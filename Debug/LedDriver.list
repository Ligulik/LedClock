
LedDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d280  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  0800d410  0800d410  0001d410  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d864  0800d864  00020264  2**0
                  CONTENTS
  4 .ARM          00000008  0800d864  0800d864  0001d864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d86c  0800d86c  00020264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d86c  0800d86c  0001d86c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d870  0800d870  0001d870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000264  20000000  0800d874  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000884  20000264  0800dad8  00020264  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ae8  0800dad8  00020ae8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020264  2**0
                  CONTENTS, READONLY
 12 .debug_info   000279f6  00000000  00000000  00020294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004795  00000000  00000000  00047c8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019b0  00000000  00000000  0004c420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017b8  00000000  00000000  0004ddd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d72e  00000000  00000000  0004f588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000204a3  00000000  00000000  0007ccb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011130a  00000000  00000000  0009d159  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001ae463  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b60  00000000  00000000  001ae4b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000264 	.word	0x20000264
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d3f8 	.word	0x0800d3f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000268 	.word	0x20000268
 80001cc:	0800d3f8 	.word	0x0800d3f8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08a      	sub	sp, #40	; 0x28
 8000ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000ea6:	f107 031c 	add.w	r3, r7, #28
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	605a      	str	r2, [r3, #4]
 8000eb0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000eb2:	1d3b      	adds	r3, r7, #4
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
 8000ebe:	611a      	str	r2, [r3, #16]
 8000ec0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ec2:	4b35      	ldr	r3, [pc, #212]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000ec4:	4a35      	ldr	r2, [pc, #212]	; (8000f9c <MX_ADC1_Init+0xfc>)
 8000ec6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ec8:	4b33      	ldr	r3, [pc, #204]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ece:	4b32      	ldr	r3, [pc, #200]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ed4:	4b30      	ldr	r3, [pc, #192]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000eda:	4b2f      	ldr	r3, [pc, #188]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ee0:	4b2d      	ldr	r3, [pc, #180]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000ee2:	2204      	movs	r2, #4
 8000ee4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ee6:	4b2c      	ldr	r3, [pc, #176]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000eec:	4b2a      	ldr	r3, [pc, #168]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000ef2:	4b29      	ldr	r3, [pc, #164]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ef8:	4b27      	ldr	r3, [pc, #156]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f00:	4b25      	ldr	r3, [pc, #148]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f06:	4b24      	ldr	r3, [pc, #144]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f0c:	4b22      	ldr	r3, [pc, #136]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f14:	4b20      	ldr	r3, [pc, #128]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 8000f1a:	4b1f      	ldr	r3, [pc, #124]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_64;
 8000f22:	4b1d      	ldr	r3, [pc, #116]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000f24:	2214      	movs	r2, #20
 8000f26:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_6;
 8000f28:	4b1b      	ldr	r3, [pc, #108]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000f2a:	22c0      	movs	r2, #192	; 0xc0
 8000f2c:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000f2e:	4b1a      	ldr	r3, [pc, #104]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000f34:	4b18      	ldr	r3, [pc, #96]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000f36:	2201      	movs	r2, #1
 8000f38:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f3a:	4817      	ldr	r0, [pc, #92]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000f3c:	f002 fe8c 	bl	8003c58 <HAL_ADC_Init>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000f46:	f000 fb99 	bl	800167c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f4e:	f107 031c 	add.w	r3, r7, #28
 8000f52:	4619      	mov	r1, r3
 8000f54:	4810      	ldr	r0, [pc, #64]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000f56:	f003 fed9 	bl	8004d0c <HAL_ADCEx_MultiModeConfigChannel>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8000f60:	f000 fb8c 	bl	800167c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f64:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <MX_ADC1_Init+0x100>)
 8000f66:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f68:	2306      	movs	r3, #6
 8000f6a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000f6c:	2307      	movs	r3, #7
 8000f6e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f70:	237f      	movs	r3, #127	; 0x7f
 8000f72:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f74:	2304      	movs	r3, #4
 8000f76:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f7c:	1d3b      	adds	r3, r7, #4
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4805      	ldr	r0, [pc, #20]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000f82:	f003 f95f 	bl	8004244 <HAL_ADC_ConfigChannel>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 8000f8c:	f000 fb76 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f90:	bf00      	nop
 8000f92:	3728      	adds	r7, #40	; 0x28
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	20000888 	.word	0x20000888
 8000f9c:	50040000 	.word	0x50040000
 8000fa0:	04300002 	.word	0x04300002

08000fa4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b0ac      	sub	sp, #176	; 0xb0
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fbc:	f107 0314 	add.w	r3, r7, #20
 8000fc0:	2288      	movs	r2, #136	; 0x88
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f009 fb19 	bl	800a5fc <memset>
  if(adcHandle->Instance==ADC1)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a27      	ldr	r2, [pc, #156]	; (800106c <HAL_ADC_MspInit+0xc8>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d146      	bne.n	8001062 <HAL_ADC_MspInit+0xbe>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000fd4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000fd8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000fda:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fde:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000fea:	2310      	movs	r3, #16
 8000fec:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000fee:	2307      	movs	r3, #7
 8000ff0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000ffa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ffe:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001000:	f107 0314 	add.w	r3, r7, #20
 8001004:	4618      	mov	r0, r3
 8001006:	f005 fabf 	bl	8006588 <HAL_RCCEx_PeriphCLKConfig>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001010:	f000 fb34 	bl	800167c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001014:	4b16      	ldr	r3, [pc, #88]	; (8001070 <HAL_ADC_MspInit+0xcc>)
 8001016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001018:	4a15      	ldr	r2, [pc, #84]	; (8001070 <HAL_ADC_MspInit+0xcc>)
 800101a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800101e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001020:	4b13      	ldr	r3, [pc, #76]	; (8001070 <HAL_ADC_MspInit+0xcc>)
 8001022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001024:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001028:	613b      	str	r3, [r7, #16]
 800102a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800102c:	4b10      	ldr	r3, [pc, #64]	; (8001070 <HAL_ADC_MspInit+0xcc>)
 800102e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001030:	4a0f      	ldr	r2, [pc, #60]	; (8001070 <HAL_ADC_MspInit+0xcc>)
 8001032:	f043 0304 	orr.w	r3, r3, #4
 8001036:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001038:	4b0d      	ldr	r3, [pc, #52]	; (8001070 <HAL_ADC_MspInit+0xcc>)
 800103a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800103c:	f003 0304 	and.w	r3, r3, #4
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001044:	2301      	movs	r3, #1
 8001046:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800104a:	230b      	movs	r3, #11
 800104c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001056:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800105a:	4619      	mov	r1, r3
 800105c:	4805      	ldr	r0, [pc, #20]	; (8001074 <HAL_ADC_MspInit+0xd0>)
 800105e:	f004 fa0f 	bl	8005480 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001062:	bf00      	nop
 8001064:	37b0      	adds	r7, #176	; 0xb0
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	50040000 	.word	0x50040000
 8001070:	40021000 	.word	0x40021000
 8001074:	48000800 	.word	0x48000800

08001078 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800107e:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <MX_DMA_Init+0x38>)
 8001080:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001082:	4a0b      	ldr	r2, [pc, #44]	; (80010b0 <MX_DMA_Init+0x38>)
 8001084:	f043 0301 	orr.w	r3, r3, #1
 8001088:	6493      	str	r3, [r2, #72]	; 0x48
 800108a:	4b09      	ldr	r3, [pc, #36]	; (80010b0 <MX_DMA_Init+0x38>)
 800108c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	607b      	str	r3, [r7, #4]
 8001094:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001096:	2200      	movs	r2, #0
 8001098:	2100      	movs	r1, #0
 800109a:	200b      	movs	r0, #11
 800109c:	f003 ffc1 	bl	8005022 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80010a0:	200b      	movs	r0, #11
 80010a2:	f003 ffda 	bl	800505a <HAL_NVIC_EnableIRQ>

}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40021000 	.word	0x40021000

080010b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ba:	4b15      	ldr	r3, [pc, #84]	; (8001110 <MX_GPIO_Init+0x5c>)
 80010bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010be:	4a14      	ldr	r2, [pc, #80]	; (8001110 <MX_GPIO_Init+0x5c>)
 80010c0:	f043 0304 	orr.w	r3, r3, #4
 80010c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010c6:	4b12      	ldr	r3, [pc, #72]	; (8001110 <MX_GPIO_Init+0x5c>)
 80010c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ca:	f003 0304 	and.w	r3, r3, #4
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d2:	4b0f      	ldr	r3, [pc, #60]	; (8001110 <MX_GPIO_Init+0x5c>)
 80010d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d6:	4a0e      	ldr	r2, [pc, #56]	; (8001110 <MX_GPIO_Init+0x5c>)
 80010d8:	f043 0301 	orr.w	r3, r3, #1
 80010dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010de:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <MX_GPIO_Init+0x5c>)
 80010e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	60bb      	str	r3, [r7, #8]
 80010e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ea:	4b09      	ldr	r3, [pc, #36]	; (8001110 <MX_GPIO_Init+0x5c>)
 80010ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ee:	4a08      	ldr	r2, [pc, #32]	; (8001110 <MX_GPIO_Init+0x5c>)
 80010f0:	f043 0302 	orr.w	r3, r3, #2
 80010f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010f6:	4b06      	ldr	r3, [pc, #24]	; (8001110 <MX_GPIO_Init+0x5c>)
 80010f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fa:	f003 0302 	and.w	r3, r3, #2
 80010fe:	607b      	str	r3, [r7, #4]
 8001100:	687b      	ldr	r3, [r7, #4]

}
 8001102:	bf00      	nop
 8001104:	3714      	adds	r7, #20
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	40021000 	.word	0x40021000

08001114 <calc_pulse>:
static volatile uint32_t received_value;
static int received_bits;


static pulse_t calc_pulse(uint32_t time)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
	if (time < 250)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2bf9      	cmp	r3, #249	; 0xf9
 8001120:	d801      	bhi.n	8001126 <calc_pulse+0x12>
		return PULSE_ERROR;
 8001122:	2305      	movs	r3, #5
 8001124:	e021      	b.n	800116a <calc_pulse+0x56>
	else if (time < 1200)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800112c:	d201      	bcs.n	8001132 <calc_pulse+0x1e>
		return PULSE_SHORT;
 800112e:	2304      	movs	r3, #4
 8001130:	e01b      	b.n	800116a <calc_pulse+0x56>
	else if (time < 2000)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001138:	d201      	bcs.n	800113e <calc_pulse+0x2a>
		return PULSE_LONG;
 800113a:	2303      	movs	r3, #3
 800113c:	e015      	b.n	800116a <calc_pulse+0x56>
	else if (time < 3000)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001144:	4293      	cmp	r3, r2
 8001146:	d801      	bhi.n	800114c <calc_pulse+0x38>
		return PULSE_2MS;
 8001148:	2302      	movs	r3, #2
 800114a:	e00e      	b.n	800116a <calc_pulse+0x56>
	else if (time < 6000)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f241 726f 	movw	r2, #5999	; 0x176f
 8001152:	4293      	cmp	r3, r2
 8001154:	d801      	bhi.n	800115a <calc_pulse+0x46>
		return PULSE_4MS;
 8001156:	2301      	movs	r3, #1
 8001158:	e007      	b.n	800116a <calc_pulse+0x56>
	else if (time < 12000)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f642 62df 	movw	r2, #11999	; 0x2edf
 8001160:	4293      	cmp	r3, r2
 8001162:	d801      	bhi.n	8001168 <calc_pulse+0x54>
		return PULSE_9MS;
 8001164:	2300      	movs	r3, #0
 8001166:	e000      	b.n	800116a <calc_pulse+0x56>
	else
		return PULSE_ERROR;
 8001168:	2305      	movs	r3, #5
}
 800116a:	4618      	mov	r0, r3
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
	...

08001178 <ir_tim_interrupt>:


void ir_tim_interrupt(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
	pulse_t pulse;

	if (received_bits >= 32)
 800117e:	4b1f      	ldr	r3, [pc, #124]	; (80011fc <ir_tim_interrupt+0x84>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	2b1f      	cmp	r3, #31
 8001184:	dc36      	bgt.n	80011f4 <ir_tim_interrupt+0x7c>
		return;

	pulse = calc_pulse(HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1));
 8001186:	2100      	movs	r1, #0
 8001188:	481d      	ldr	r0, [pc, #116]	; (8001200 <ir_tim_interrupt+0x88>)
 800118a:	f007 fcd7 	bl	8008b3c <HAL_TIM_ReadCapturedValue>
 800118e:	4603      	mov	r3, r0
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff ffbf 	bl	8001114 <calc_pulse>
 8001196:	4603      	mov	r3, r0
 8001198:	71fb      	strb	r3, [r7, #7]

	switch (pulse) {
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	2b04      	cmp	r3, #4
 800119e:	d006      	beq.n	80011ae <ir_tim_interrupt+0x36>
 80011a0:	2b04      	cmp	r3, #4
 80011a2:	dc23      	bgt.n	80011ec <ir_tim_interrupt+0x74>
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d01a      	beq.n	80011de <ir_tim_interrupt+0x66>
 80011a8:	2b03      	cmp	r3, #3
 80011aa:	d00b      	beq.n	80011c4 <ir_tim_interrupt+0x4c>
 80011ac:	e01e      	b.n	80011ec <ir_tim_interrupt+0x74>
	case PULSE_SHORT:
		received_value = received_value >> 1;
 80011ae:	4b15      	ldr	r3, [pc, #84]	; (8001204 <ir_tim_interrupt+0x8c>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	085b      	lsrs	r3, r3, #1
 80011b4:	4a13      	ldr	r2, [pc, #76]	; (8001204 <ir_tim_interrupt+0x8c>)
 80011b6:	6013      	str	r3, [r2, #0]
		received_bits++;
 80011b8:	4b10      	ldr	r3, [pc, #64]	; (80011fc <ir_tim_interrupt+0x84>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	3301      	adds	r3, #1
 80011be:	4a0f      	ldr	r2, [pc, #60]	; (80011fc <ir_tim_interrupt+0x84>)
 80011c0:	6013      	str	r3, [r2, #0]
		break;
 80011c2:	e018      	b.n	80011f6 <ir_tim_interrupt+0x7e>
	case PULSE_LONG:
		received_value = (received_value >> 1) | 0x80000000;
 80011c4:	4b0f      	ldr	r3, [pc, #60]	; (8001204 <ir_tim_interrupt+0x8c>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	085b      	lsrs	r3, r3, #1
 80011ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011ce:	4a0d      	ldr	r2, [pc, #52]	; (8001204 <ir_tim_interrupt+0x8c>)
 80011d0:	6013      	str	r3, [r2, #0]
		received_bits++;
 80011d2:	4b0a      	ldr	r3, [pc, #40]	; (80011fc <ir_tim_interrupt+0x84>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	3301      	adds	r3, #1
 80011d8:	4a08      	ldr	r2, [pc, #32]	; (80011fc <ir_tim_interrupt+0x84>)
 80011da:	6013      	str	r3, [r2, #0]
		break;
 80011dc:	e00b      	b.n	80011f6 <ir_tim_interrupt+0x7e>
	case PULSE_4MS:
		received_value = 0;
 80011de:	4b09      	ldr	r3, [pc, #36]	; (8001204 <ir_tim_interrupt+0x8c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
		received_bits = 0;
 80011e4:	4b05      	ldr	r3, [pc, #20]	; (80011fc <ir_tim_interrupt+0x84>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
		break;
 80011ea:	e004      	b.n	80011f6 <ir_tim_interrupt+0x7e>
//	case PULSE_2MS:
//		if (received_bits == 0)
//			received_bits = 32;
//		break;
	default:
		received_bits = 0;
 80011ec:	4b03      	ldr	r3, [pc, #12]	; (80011fc <ir_tim_interrupt+0x84>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
		break;
 80011f2:	e000      	b.n	80011f6 <ir_tim_interrupt+0x7e>
		return;
 80011f4:	bf00      	nop
	}
}
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20000284 	.word	0x20000284
 8001200:	200009bc 	.word	0x200009bc
 8001204:	20000280 	.word	0x20000280

08001208 <ir_init>:


void ir_init(void){
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim2);
 800120c:	4804      	ldr	r0, [pc, #16]	; (8001220 <ir_init+0x18>)
 800120e:	f006 fbb3 	bl	8007978 <HAL_TIM_Base_Start>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8001212:	2100      	movs	r1, #0
 8001214:	4802      	ldr	r0, [pc, #8]	; (8001220 <ir_init+0x18>)
 8001216:	f006 ff6b 	bl	80080f0 <HAL_TIM_IC_Start_IT>
}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	200009bc 	.word	0x200009bc

08001224 <ir_read>:


int ir_read(void){
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
	if(received_bits!=32){
 800122a:	4b0a      	ldr	r3, [pc, #40]	; (8001254 <ir_read+0x30>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2b20      	cmp	r3, #32
 8001230:	d002      	beq.n	8001238 <ir_read+0x14>
		return -1;
 8001232:	f04f 33ff 	mov.w	r3, #4294967295
 8001236:	e007      	b.n	8001248 <ir_read+0x24>
	}

	uint8_t value=received_value>>16;
 8001238:	4b07      	ldr	r3, [pc, #28]	; (8001258 <ir_read+0x34>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	0c1b      	lsrs	r3, r3, #16
 800123e:	71fb      	strb	r3, [r7, #7]
	received_bits=0;
 8001240:	4b04      	ldr	r3, [pc, #16]	; (8001254 <ir_read+0x30>)
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
	return value;
 8001246:	79fb      	ldrb	r3, [r7, #7]
}
 8001248:	4618      	mov	r0, r3
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	20000284 	.word	0x20000284
 8001258:	20000280 	.word	0x20000280

0800125c <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8001260:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <MX_IWDG_Init+0x34>)
 8001262:	4a0c      	ldr	r2, [pc, #48]	; (8001294 <MX_IWDG_Init+0x38>)
 8001264:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 8001266:	4b0a      	ldr	r3, [pc, #40]	; (8001290 <MX_IWDG_Init+0x34>)
 8001268:	2203      	movs	r2, #3
 800126a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 800126c:	4b08      	ldr	r3, [pc, #32]	; (8001290 <MX_IWDG_Init+0x34>)
 800126e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001272:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 8001274:	4b06      	ldr	r3, [pc, #24]	; (8001290 <MX_IWDG_Init+0x34>)
 8001276:	f640 72ff 	movw	r2, #4095	; 0xfff
 800127a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800127c:	4804      	ldr	r0, [pc, #16]	; (8001290 <MX_IWDG_Init+0x34>)
 800127e:	f004 faa9 	bl	80057d4 <HAL_IWDG_Init>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8001288:	f000 f9f8 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 800128c:	bf00      	nop
 800128e:	bd80      	pop	{r7, pc}
 8001290:	200008ec 	.word	0x200008ec
 8001294:	40003000 	.word	0x40003000

08001298 <normalWorkStart>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// FUNTIONS:

void normalWorkStart(void) {
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
	if (flag_showCalendar_or_temperature < DATA_SHOW_DURATION
 800129c:	4b24      	ldr	r3, [pc, #144]	; (8001330 <normalWorkStart+0x98>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2b18      	cmp	r3, #24
 80012a2:	dc15      	bgt.n	80012d0 <normalWorkStart+0x38>
			&& flag_showCalendar_or_temperature < TEMPERATURE_SHOW_DURATION) {
 80012a4:	4b22      	ldr	r3, [pc, #136]	; (8001330 <normalWorkStart+0x98>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2b1d      	cmp	r3, #29
 80012aa:	dc11      	bgt.n	80012d0 <normalWorkStart+0x38>
		if (flag_showCalendar_or_temperature == 0) {
 80012ac:	4b20      	ldr	r3, [pc, #128]	; (8001330 <normalWorkStart+0x98>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d10a      	bne.n	80012ca <normalWorkStart+0x32>
			dotOff();
 80012b4:	f001 f9e2 	bl	800267c <dotOff>
			backToColorinMemory();
 80012b8:	f000 ffa0 	bl	80021fc <backToColorinMemory>
			dwukropekTurnOn();
 80012bc:	f001 f98e 	bl	80025dc <dwukropekTurnOn>
			//Zapobieganie migotaniu
			flag_showCalendar_or_temperature += 1;
 80012c0:	4b1b      	ldr	r3, [pc, #108]	; (8001330 <normalWorkStart+0x98>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	3301      	adds	r3, #1
 80012c6:	4a1a      	ldr	r2, [pc, #104]	; (8001330 <normalWorkStart+0x98>)
 80012c8:	6013      	str	r3, [r2, #0]
		}
		normalDisplayStart();
 80012ca:	f001 fb75 	bl	80029b8 <normalDisplayStart>
		temperatureOnDisplay();
		flag_showCalendar_or_temperature += 1;
	} else if (flag_showCalendar_or_temperature < TEMPERATURE_SHOW_PERIOD) {
		ws2811_update();
	}
}
 80012ce:	e02d      	b.n	800132c <normalWorkStart+0x94>
	else if (flag_showCalendar_or_temperature < TEMPERATURE_SHOW_DURATION) {
 80012d0:	4b17      	ldr	r3, [pc, #92]	; (8001330 <normalWorkStart+0x98>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2b1d      	cmp	r3, #29
 80012d6:	dc0f      	bgt.n	80012f8 <normalWorkStart+0x60>
		if (flag_showCalendar_or_temperature == DATA_SHOW_DURATION) {
 80012d8:	4b15      	ldr	r3, [pc, #84]	; (8001330 <normalWorkStart+0x98>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2b19      	cmp	r3, #25
 80012de:	d106      	bne.n	80012ee <normalWorkStart+0x56>
			dwukropekTurnOff();
 80012e0:	f001 f99c 	bl	800261c <dwukropekTurnOff>
			flag_showCalendar_or_temperature = DATA_SHOW_DURATION + 1;
 80012e4:	4b12      	ldr	r3, [pc, #72]	; (8001330 <normalWorkStart+0x98>)
 80012e6:	221a      	movs	r2, #26
 80012e8:	601a      	str	r2, [r3, #0]
			mixColor();
 80012ea:	f000 ff6d 	bl	80021c8 <mixColor>
		dotOn();
 80012ee:	f001 f9ad 	bl	800264c <dotOn>
		dateOnDisplay();
 80012f2:	f001 fbc1 	bl	8002a78 <dateOnDisplay>
}
 80012f6:	e019      	b.n	800132c <normalWorkStart+0x94>
	else if (flag_showCalendar_or_temperature == TEMPERATURE_SHOW_DURATION) {
 80012f8:	4b0d      	ldr	r3, [pc, #52]	; (8001330 <normalWorkStart+0x98>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2b1e      	cmp	r3, #30
 80012fe:	d10f      	bne.n	8001320 <normalWorkStart+0x88>
		displayStop();
 8001300:	f001 fc16 	bl	8002b30 <displayStop>
		ws2811_wait();
 8001304:	f002 f9ba 	bl	800367c <ws2811_wait>
		mixColor();
 8001308:	f000 ff5e 	bl	80021c8 <mixColor>
		dotOn();
 800130c:	f001 f99e 	bl	800264c <dotOn>
		temperatureOnDisplay();
 8001310:	f001 fbe0 	bl	8002ad4 <temperatureOnDisplay>
		flag_showCalendar_or_temperature += 1;
 8001314:	4b06      	ldr	r3, [pc, #24]	; (8001330 <normalWorkStart+0x98>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	3301      	adds	r3, #1
 800131a:	4a05      	ldr	r2, [pc, #20]	; (8001330 <normalWorkStart+0x98>)
 800131c:	6013      	str	r3, [r2, #0]
}
 800131e:	e005      	b.n	800132c <normalWorkStart+0x94>
	} else if (flag_showCalendar_or_temperature < TEMPERATURE_SHOW_PERIOD) {
 8001320:	4b03      	ldr	r3, [pc, #12]	; (8001330 <normalWorkStart+0x98>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2b22      	cmp	r3, #34	; 0x22
 8001326:	dc01      	bgt.n	800132c <normalWorkStart+0x94>
		ws2811_update();
 8001328:	f002 f998 	bl	800365c <ws2811_update>
}
 800132c:	bf00      	nop
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20000290 	.word	0x20000290

08001334 <__io_putchar>:


// Funtions rewrite;

// Printf function modifed to use with USART
int __io_putchar(int ch) {
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
	if (ch == '\n') {
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2b0a      	cmp	r3, #10
 8001340:	d102      	bne.n	8001348 <__io_putchar+0x14>
		__io_putchar('\r');
 8001342:	200d      	movs	r0, #13
 8001344:	f7ff fff6 	bl	8001334 <__io_putchar>
	}

	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 8001348:	1d39      	adds	r1, r7, #4
 800134a:	f04f 33ff 	mov.w	r3, #4294967295
 800134e:	2201      	movs	r2, #1
 8001350:	4803      	ldr	r0, [pc, #12]	; (8001360 <__io_putchar+0x2c>)
 8001352:	f008 fc5b 	bl	8009c0c <HAL_UART_Transmit>

	return 1;
 8001356:	2301      	movs	r3, #1
}
 8001358:	4618      	mov	r0, r3
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	20000a50 	.word	0x20000a50

08001364 <HAL_RTC_AlarmAEventCallback>:


// Callbacks from interrupts

// Interrupt from RTC after every one second
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]





}
 800136c:	bf00      	nop
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <HAL_TIM_IC_CaptureCallback>:




// Interrupt for remote controler
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]

	if (htim == &htim2) {
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	4a09      	ldr	r2, [pc, #36]	; (80013a8 <HAL_TIM_IC_CaptureCallback+0x30>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d108      	bne.n	800139a <HAL_TIM_IC_CaptureCallback+0x22>
		switch (HAL_TIM_GetActiveChannel(&htim2)) {
 8001388:	4807      	ldr	r0, [pc, #28]	; (80013a8 <HAL_TIM_IC_CaptureCallback+0x30>)
 800138a:	f007 fc4d 	bl	8008c28 <HAL_TIM_GetActiveChannel>
 800138e:	4603      	mov	r3, r0
 8001390:	2b01      	cmp	r3, #1
 8001392:	d104      	bne.n	800139e <HAL_TIM_IC_CaptureCallback+0x26>
		case HAL_TIM_ACTIVE_CHANNEL_1:
			ir_tim_interrupt();
 8001394:	f7ff fef0 	bl	8001178 <ir_tim_interrupt>
			break;
 8001398:	e002      	b.n	80013a0 <HAL_TIM_IC_CaptureCallback+0x28>
		default:
			break;
		}
	}
 800139a:	bf00      	nop
 800139c:	e000      	b.n	80013a0 <HAL_TIM_IC_CaptureCallback+0x28>
			break;
 800139e:	bf00      	nop
}
 80013a0:	bf00      	nop
 80013a2:	3708      	adds	r7, #8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	200009bc 	.word	0x200009bc

080013ac <HAL_TIM_PeriodElapsedCallback>:

// Interrupt from timer 6 after 0,3 seconds. It is run, when MENU is on.
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]

	if (htim == &htim6)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	4a4b      	ldr	r2, [pc, #300]	; (80014e4 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	f040 808f 	bne.w	80014dc <HAL_TIM_PeriodElapsedCallback+0x130>

	{
		// Hours blinking in hours menu mode:
		if (TurnOnMenuMode() == MENU_TIME_LEVEL
 80013be:	f000 f963 	bl	8001688 <TurnOnMenuMode>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d004      	beq.n	80013d2 <HAL_TIM_PeriodElapsedCallback+0x26>
				|| TurnOnMenuMode() == MENU_TIME_HOUR_SECOND_DIGIT) {
 80013c8:	f000 f95e 	bl	8001688 <TurnOnMenuMode>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b03      	cmp	r3, #3
 80013d0:	d110      	bne.n	80013f4 <HAL_TIM_PeriodElapsedCallback+0x48>

			if (flag_blinker == 1) {
 80013d2:	4b45      	ldr	r3, [pc, #276]	; (80014e8 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d105      	bne.n	80013e6 <HAL_TIM_PeriodElapsedCallback+0x3a>
				ws2811_firstAndSecondSegmentsDisplayReset();
 80013da:	f002 f8b9 	bl	8003550 <ws2811_firstAndSecondSegmentsDisplayReset>
				flag_blinker = 0;
 80013de:	4b42      	ldr	r3, [pc, #264]	; (80014e8 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	e006      	b.n	80013f4 <HAL_TIM_PeriodElapsedCallback+0x48>
			} else {
				menuDisplayStart();
 80013e6:	f001 fb17 	bl	8002a18 <menuDisplayStart>
				dwukropekTurnOn();
 80013ea:	f001 f8f7 	bl	80025dc <dwukropekTurnOn>
				flag_blinker = 1;
 80013ee:	4b3e      	ldr	r3, [pc, #248]	; (80014e8 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80013f0:	2201      	movs	r2, #1
 80013f2:	601a      	str	r2, [r3, #0]
			}
		}

		// Minute blinking in minutes menu mode:
		if (TurnOnMenuMode() == MENU_TIME_MINUTE_LEVEL
 80013f4:	f000 f948 	bl	8001688 <TurnOnMenuMode>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d004      	beq.n	8001408 <HAL_TIM_PeriodElapsedCallback+0x5c>
				|| TurnOnMenuMode() == MENU_TIME_MINUTE_SECOND_DIGIT) {
 80013fe:	f000 f943 	bl	8001688 <TurnOnMenuMode>
 8001402:	4603      	mov	r3, r0
 8001404:	2b04      	cmp	r3, #4
 8001406:	d110      	bne.n	800142a <HAL_TIM_PeriodElapsedCallback+0x7e>

			if (flag_blinker == 1) {
 8001408:	4b37      	ldr	r3, [pc, #220]	; (80014e8 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2b01      	cmp	r3, #1
 800140e:	d105      	bne.n	800141c <HAL_TIM_PeriodElapsedCallback+0x70>
				ws2811_ThirdAndFourthSegmentsDisplayReset();
 8001410:	f002 f8ca 	bl	80035a8 <ws2811_ThirdAndFourthSegmentsDisplayReset>
				flag_blinker = 0;
 8001414:	4b34      	ldr	r3, [pc, #208]	; (80014e8 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	e006      	b.n	800142a <HAL_TIM_PeriodElapsedCallback+0x7e>
			} else {
				menuDisplayStart();
 800141c:	f001 fafc 	bl	8002a18 <menuDisplayStart>
				dwukropekTurnOn();
 8001420:	f001 f8dc 	bl	80025dc <dwukropekTurnOn>
				flag_blinker = 1;
 8001424:	4b30      	ldr	r3, [pc, #192]	; (80014e8 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001426:	2201      	movs	r2, #1
 8001428:	601a      	str	r2, [r3, #0]
			}
		}

		// Months blinking in months menu mode:
		if (TurnOnMenuMode() == MENU_DATE_LEVEL
 800142a:	f000 f92d 	bl	8001688 <TurnOnMenuMode>
 800142e:	4603      	mov	r3, r0
 8001430:	2b05      	cmp	r3, #5
 8001432:	d004      	beq.n	800143e <HAL_TIM_PeriodElapsedCallback+0x92>
				|| TurnOnMenuMode() == MENU_DATE_MONTH_SECOND_DIGIT) {
 8001434:	f000 f928 	bl	8001688 <TurnOnMenuMode>
 8001438:	4603      	mov	r3, r0
 800143a:	2b06      	cmp	r3, #6
 800143c:	d110      	bne.n	8001460 <HAL_TIM_PeriodElapsedCallback+0xb4>

			if (flag_blinker == 1) {
 800143e:	4b2a      	ldr	r3, [pc, #168]	; (80014e8 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2b01      	cmp	r3, #1
 8001444:	d105      	bne.n	8001452 <HAL_TIM_PeriodElapsedCallback+0xa6>
				ws2811_ThirdAndFourthSegmentsDisplayReset();
 8001446:	f002 f8af 	bl	80035a8 <ws2811_ThirdAndFourthSegmentsDisplayReset>
				flag_blinker = 0;
 800144a:	4b27      	ldr	r3, [pc, #156]	; (80014e8 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	e006      	b.n	8001460 <HAL_TIM_PeriodElapsedCallback+0xb4>
			} else {
				dateOnDisplay();
 8001452:	f001 fb11 	bl	8002a78 <dateOnDisplay>
				dotOn();
 8001456:	f001 f8f9 	bl	800264c <dotOn>
				flag_blinker = 1;
 800145a:	4b23      	ldr	r3, [pc, #140]	; (80014e8 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800145c:	2201      	movs	r2, #1
 800145e:	601a      	str	r2, [r3, #0]
			}
		}

		// Days blinking in days menu mode:
		if (TurnOnMenuMode() == MENU_DATE_DAY_FIRST_DIGIT
 8001460:	f000 f912 	bl	8001688 <TurnOnMenuMode>
 8001464:	4603      	mov	r3, r0
 8001466:	2b07      	cmp	r3, #7
 8001468:	d004      	beq.n	8001474 <HAL_TIM_PeriodElapsedCallback+0xc8>
				|| TurnOnMenuMode() == MENU_DATE_DAY_SECOND_DIGIT) {
 800146a:	f000 f90d 	bl	8001688 <TurnOnMenuMode>
 800146e:	4603      	mov	r3, r0
 8001470:	2b08      	cmp	r3, #8
 8001472:	d110      	bne.n	8001496 <HAL_TIM_PeriodElapsedCallback+0xea>

			if (flag_blinker == 1) {
 8001474:	4b1c      	ldr	r3, [pc, #112]	; (80014e8 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2b01      	cmp	r3, #1
 800147a:	d105      	bne.n	8001488 <HAL_TIM_PeriodElapsedCallback+0xdc>
				ws2811_firstAndSecondSegmentsDisplayReset();
 800147c:	f002 f868 	bl	8003550 <ws2811_firstAndSecondSegmentsDisplayReset>
				flag_blinker = 0;
 8001480:	4b19      	ldr	r3, [pc, #100]	; (80014e8 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	e006      	b.n	8001496 <HAL_TIM_PeriodElapsedCallback+0xea>
			} else {
				dateOnDisplay();
 8001488:	f001 faf6 	bl	8002a78 <dateOnDisplay>
				dotOn();
 800148c:	f001 f8de 	bl	800264c <dotOn>
				flag_blinker = 1;
 8001490:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001492:	2201      	movs	r2, #1
 8001494:	601a      	str	r2, [r3, #0]
			}
		}

		// OKRES 1 skundy:
		one_second_flag += 1;
 8001496:	4b15      	ldr	r3, [pc, #84]	; (80014ec <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	3301      	adds	r3, #1
 800149c:	4a13      	ldr	r2, [pc, #76]	; (80014ec <HAL_TIM_PeriodElapsedCallback+0x140>)
 800149e:	6013      	str	r3, [r2, #0]

		if (one_second_flag == 4) {
 80014a0:	4b12      	ldr	r3, [pc, #72]	; (80014ec <HAL_TIM_PeriodElapsedCallback+0x140>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2b04      	cmp	r3, #4
 80014a6:	d119      	bne.n	80014dc <HAL_TIM_PeriodElapsedCallback+0x130>
			if (TurnOnMenuMode() == MENU_OFF
 80014a8:	f000 f8ee 	bl	8001688 <TurnOnMenuMode>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d105      	bne.n	80014be <HAL_TIM_PeriodElapsedCallback+0x112>
					&& flag_showCalendar_or_temperature < DATA_SHOW_DURATION) {
 80014b2:	4b0f      	ldr	r3, [pc, #60]	; (80014f0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2b18      	cmp	r3, #24
 80014b8:	dc01      	bgt.n	80014be <HAL_TIM_PeriodElapsedCallback+0x112>
				dwukropekStart();
 80014ba:	f001 f90f 	bl	80026dc <dwukropekStart>
			} else {

			}

			// Obsluga flagi daty i temperatury
			flag_showCalendar_or_temperature += 1;
 80014be:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	3301      	adds	r3, #1
 80014c4:	4a0a      	ldr	r2, [pc, #40]	; (80014f0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80014c6:	6013      	str	r3, [r2, #0]
			if (flag_showCalendar_or_temperature == TEMPERATURE_SHOW_PERIOD) {
 80014c8:	4b09      	ldr	r3, [pc, #36]	; (80014f0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2b23      	cmp	r3, #35	; 0x23
 80014ce:	d102      	bne.n	80014d6 <HAL_TIM_PeriodElapsedCallback+0x12a>
				flag_showCalendar_or_temperature = 0;
 80014d0:	4b07      	ldr	r3, [pc, #28]	; (80014f0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
			}
			one_second_flag = 0;
 80014d6:	4b05      	ldr	r3, [pc, #20]	; (80014ec <HAL_TIM_PeriodElapsedCallback+0x140>)
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
		}

	}
}
 80014dc:	bf00      	nop
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	20000970 	.word	0x20000970
 80014e8:	20000288 	.word	0x20000288
 80014ec:	2000028c 	.word	0x2000028c
 80014f0:	20000290 	.word	0x20000290

080014f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014fa:	f002 f92e 	bl	800375a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014fe:	f000 f83d 	bl	800157c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001502:	f7ff fdd7 	bl	80010b4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001506:	f7ff fdb7 	bl	8001078 <MX_DMA_Init>
  MX_TIM4_Init();
 800150a:	f001 fdbb 	bl	8003084 <MX_TIM4_Init>
  MX_RTC_Init();
 800150e:	f000 fcd1 	bl	8001eb4 <MX_RTC_Init>
  MX_TIM2_Init();
 8001512:	f001 fd2b 	bl	8002f6c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001516:	f001 ff31 	bl	800337c <MX_USART2_UART_Init>
  MX_TIM6_Init();
 800151a:	f001 fe29 	bl	8003170 <MX_TIM6_Init>
  MX_ADC1_Init();
 800151e:	f7ff fcbf 	bl	8000ea0 <MX_ADC1_Init>
  MX_IWDG_Init();
 8001522:	f7ff fe9b 	bl	800125c <MX_IWDG_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001526:	f000 f88d 	bl	8001644 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

	//Initalization od program
	ws2811_init();
 800152a:	f001 ffdf 	bl	80034ec <ws2811_init>
	HAL_TIM_Base_Start_IT(&htim6);
 800152e:	4811      	ldr	r0, [pc, #68]	; (8001574 <main+0x80>)
 8001530:	f006 fa8a 	bl	8007a48 <HAL_TIM_Base_Start_IT>
	ir_init();
 8001534:	f7ff fe68 	bl	8001208 <ir_init>
	HAL_PWR_EnableBkUpAccess();
 8001538:	f004 f9ac 	bl	8005894 <HAL_PWR_EnableBkUpAccess>


	/*
	 * --------------------------------------> CHANGE STANDARD COLOR
	 */
	backToColorinMemory();
 800153c:	f000 fe5e 	bl	80021fc <backToColorinMemory>

		// ZEGAR:

		// NORMAL WORK

		if (TurnOnMenuMode() == 0) {
 8001540:	f000 f8a2 	bl	8001688 <TurnOnMenuMode>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d101      	bne.n	800154e <main+0x5a>
			normalWorkStart();
 800154a:	f7ff fea5 	bl	8001298 <normalWorkStart>
		}

		// WAIT FOR SIGNAL FROM REMOTE CONTROLLER
		int value = ir_read();
 800154e:	f7ff fe69 	bl	8001224 <ir_read>
 8001552:	6078      	str	r0, [r7, #4]
		if (value != -1) {
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800155a:	d002      	beq.n	8001562 <main+0x6e>
			menu(value);
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f000 fa0f 	bl	8001980 <menu>
		}

		// Turn on StanbyMode when it is time for it
		TurnOnStanbyMode(17, 0, 0);
 8001562:	2200      	movs	r2, #0
 8001564:	2100      	movs	r1, #0
 8001566:	2011      	movs	r0, #17
 8001568:	f000 fdcc 	bl	8002104 <TurnOnStanbyMode>

		HAL_IWDG_Refresh(&hiwdg);
 800156c:	4802      	ldr	r0, [pc, #8]	; (8001578 <main+0x84>)
 800156e:	f004 f980 	bl	8005872 <HAL_IWDG_Refresh>
	while (1) {
 8001572:	e7e5      	b.n	8001540 <main+0x4c>
 8001574:	20000970 	.word	0x20000970
 8001578:	200008ec 	.word	0x200008ec

0800157c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b096      	sub	sp, #88	; 0x58
 8001580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001582:	f107 0314 	add.w	r3, r7, #20
 8001586:	2244      	movs	r2, #68	; 0x44
 8001588:	2100      	movs	r1, #0
 800158a:	4618      	mov	r0, r3
 800158c:	f009 f836 	bl	800a5fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001590:	463b      	mov	r3, r7
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	605a      	str	r2, [r3, #4]
 8001598:	609a      	str	r2, [r3, #8]
 800159a:	60da      	str	r2, [r3, #12]
 800159c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800159e:	f44f 7000 	mov.w	r0, #512	; 0x200
 80015a2:	f004 f9af 	bl	8005904 <HAL_PWREx_ControlVoltageScaling>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80015ac:	f000 f866 	bl	800167c <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80015b0:	f004 f970 	bl	8005894 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80015b4:	4b22      	ldr	r3, [pc, #136]	; (8001640 <SystemClock_Config+0xc4>)
 80015b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015ba:	4a21      	ldr	r2, [pc, #132]	; (8001640 <SystemClock_Config+0xc4>)
 80015bc:	f023 0318 	bic.w	r3, r3, #24
 80015c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 80015c4:	231c      	movs	r3, #28
 80015c6:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80015c8:	2301      	movs	r3, #1
 80015ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80015cc:	2301      	movs	r3, #1
 80015ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80015d0:	2301      	movs	r3, #1
 80015d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80015d4:	2300      	movs	r3, #0
 80015d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80015d8:	2360      	movs	r3, #96	; 0x60
 80015da:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015dc:	2302      	movs	r3, #2
 80015de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80015e0:	2301      	movs	r3, #1
 80015e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80015e4:	2301      	movs	r3, #1
 80015e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80015e8:	2328      	movs	r3, #40	; 0x28
 80015ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80015ec:	2307      	movs	r3, #7
 80015ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80015f0:	2302      	movs	r3, #2
 80015f2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015f4:	2302      	movs	r3, #2
 80015f6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015f8:	f107 0314 	add.w	r3, r7, #20
 80015fc:	4618      	mov	r0, r3
 80015fe:	f004 f9d7 	bl	80059b0 <HAL_RCC_OscConfig>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001608:	f000 f838 	bl	800167c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800160c:	230f      	movs	r3, #15
 800160e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001610:	2303      	movs	r3, #3
 8001612:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001614:	2300      	movs	r3, #0
 8001616:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001618:	2300      	movs	r3, #0
 800161a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800161c:	2300      	movs	r3, #0
 800161e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001620:	463b      	mov	r3, r7
 8001622:	2104      	movs	r1, #4
 8001624:	4618      	mov	r0, r3
 8001626:	f004 fda9 	bl	800617c <HAL_RCC_ClockConfig>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001630:	f000 f824 	bl	800167c <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001634:	f005 fa92 	bl	8006b5c <HAL_RCCEx_EnableMSIPLLMode>
}
 8001638:	bf00      	nop
 800163a:	3758      	adds	r7, #88	; 0x58
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40021000 	.word	0x40021000

08001644 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* RTC_Alarm_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 1, 0);
 8001648:	2200      	movs	r2, #0
 800164a:	2101      	movs	r1, #1
 800164c:	2029      	movs	r0, #41	; 0x29
 800164e:	f003 fce8 	bl	8005022 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001652:	2029      	movs	r0, #41	; 0x29
 8001654:	f003 fd01 	bl	800505a <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8001658:	2200      	movs	r2, #0
 800165a:	2102      	movs	r1, #2
 800165c:	201c      	movs	r0, #28
 800165e:	f003 fce0 	bl	8005022 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001662:	201c      	movs	r0, #28
 8001664:	f003 fcf9 	bl	800505a <HAL_NVIC_EnableIRQ>
  /* TIM6_DAC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 8001668:	2200      	movs	r2, #0
 800166a:	2103      	movs	r1, #3
 800166c:	2036      	movs	r0, #54	; 0x36
 800166e:	f003 fcd8 	bl	8005022 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001672:	2036      	movs	r0, #54	; 0x36
 8001674:	f003 fcf1 	bl	800505a <HAL_NVIC_EnableIRQ>
}
 8001678:	bf00      	nop
 800167a:	bd80      	pop	{r7, pc}

0800167c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001680:	b672      	cpsid	i
}
 8001682:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001684:	e7fe      	b.n	8001684 <Error_Handler+0x8>
	...

08001688 <TurnOnMenuMode>:



// Funtions:

int TurnOnMenuMode(void){
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
	return flagMenu;
 800168c:	4b03      	ldr	r3, [pc, #12]	; (800169c <TurnOnMenuMode+0x14>)
 800168e:	681b      	ldr	r3, [r3, #0]
}
 8001690:	4618      	mov	r0, r3
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	20000298 	.word	0x20000298

080016a0 <isInRangeHours>:


// Tests:

int isInRangeHours(uint8_t entryData){
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	71fb      	strb	r3, [r7, #7]
	if(entryData>23){
 80016aa:	79fb      	ldrb	r3, [r7, #7]
 80016ac:	2b17      	cmp	r3, #23
 80016ae:	d901      	bls.n	80016b4 <isInRangeHours+0x14>
		return 1;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e000      	b.n	80016b6 <isInRangeHours+0x16>
	}else{
		return 0;
 80016b4:	2300      	movs	r3, #0
	}
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr

080016c2 <isInRangeMinute>:

int isInRangeMinute(uint8_t entryData){
 80016c2:	b480      	push	{r7}
 80016c4:	b083      	sub	sp, #12
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	4603      	mov	r3, r0
 80016ca:	71fb      	strb	r3, [r7, #7]
	if(entryData>60){
 80016cc:	79fb      	ldrb	r3, [r7, #7]
 80016ce:	2b3c      	cmp	r3, #60	; 0x3c
 80016d0:	d901      	bls.n	80016d6 <isInRangeMinute+0x14>
		return 1;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e000      	b.n	80016d8 <isInRangeMinute+0x16>
	}else{
		return 0;
 80016d6:	2300      	movs	r3, #0
	}
}
 80016d8:	4618      	mov	r0, r3
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <isInRangeMonth>:


int isInRangeMonth(uint8_t entryData){
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	71fb      	strb	r3, [r7, #7]
	if(entryData>12){
 80016ee:	79fb      	ldrb	r3, [r7, #7]
 80016f0:	2b0c      	cmp	r3, #12
 80016f2:	d901      	bls.n	80016f8 <isInRangeMonth+0x14>
		return 1;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e000      	b.n	80016fa <isInRangeMonth+0x16>
	}else{
		return 0;
 80016f8:	2300      	movs	r3, #0
	}
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr

08001706 <isInRangeDay>:


int isInRangeDay(uint8_t entryData){
 8001706:	b480      	push	{r7}
 8001708:	b083      	sub	sp, #12
 800170a:	af00      	add	r7, sp, #0
 800170c:	4603      	mov	r3, r0
 800170e:	71fb      	strb	r3, [r7, #7]
	if(entryData>31){
 8001710:	79fb      	ldrb	r3, [r7, #7]
 8001712:	2b1f      	cmp	r3, #31
 8001714:	d901      	bls.n	800171a <isInRangeDay+0x14>
		return 1;
 8001716:	2301      	movs	r3, #1
 8001718:	e000      	b.n	800171c <isInRangeDay+0x16>
	}else{
		return 0;
 800171a:	2300      	movs	r3, #0
	}
}
 800171c:	4618      	mov	r0, r3
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <colorMenu>:


void colorMenu(struct colorRgb color){
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
	if (flagColor == MENU_COLOR_LEVEL) {
 8001730:	4b06      	ldr	r3, [pc, #24]	; (800174c <colorMenu+0x24>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d105      	bne.n	8001744 <colorMenu+0x1c>
				changeColor(color);
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f000 fd1b 	bl	8002174 <changeColor>
				flagColor = MENU_OFF;
 800173e:	4b03      	ldr	r3, [pc, #12]	; (800174c <colorMenu+0x24>)
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
			}
}
 8001744:	bf00      	nop
 8001746:	3708      	adds	r7, #8
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	20000294 	.word	0x20000294

08001750 <firstDigitHour>:


// Funtions to chagne time in menu:


void firstDigitHour(uint8_t forAdd){
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	71fb      	strb	r3, [r7, #7]
	if (flagMenu == MENU_TIME_LEVEL) {
 800175a:	4b08      	ldr	r3, [pc, #32]	; (800177c <firstDigitHour+0x2c>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2b01      	cmp	r3, #1
 8001760:	d105      	bne.n	800176e <firstDigitHour+0x1e>
		hoursChange = forAdd;
 8001762:	4a07      	ldr	r2, [pc, #28]	; (8001780 <firstDigitHour+0x30>)
 8001764:	79fb      	ldrb	r3, [r7, #7]
 8001766:	7013      	strb	r3, [r2, #0]
		flagMenu = MENU_TIME_HOUR_SECOND_DIGIT;
 8001768:	4b04      	ldr	r3, [pc, #16]	; (800177c <firstDigitHour+0x2c>)
 800176a:	2203      	movs	r2, #3
 800176c:	601a      	str	r2, [r3, #0]
	}
}
 800176e:	bf00      	nop
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	20000298 	.word	0x20000298
 8001780:	2000029d 	.word	0x2000029d

08001784 <secondDigitHour>:

void secondDigitHour(uint8_t forAdd){
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	71fb      	strb	r3, [r7, #7]
	if (flagMenu == MENU_TIME_HOUR_SECOND_DIGIT) {
 800178e:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <secondDigitHour+0x50>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2b03      	cmp	r3, #3
 8001794:	d119      	bne.n	80017ca <secondDigitHour+0x46>

		hoursChange += forAdd;
 8001796:	4b10      	ldr	r3, [pc, #64]	; (80017d8 <secondDigitHour+0x54>)
 8001798:	781a      	ldrb	r2, [r3, #0]
 800179a:	79fb      	ldrb	r3, [r7, #7]
 800179c:	4413      	add	r3, r2
 800179e:	b2da      	uxtb	r2, r3
 80017a0:	4b0d      	ldr	r3, [pc, #52]	; (80017d8 <secondDigitHour+0x54>)
 80017a2:	701a      	strb	r2, [r3, #0]

		if (isInRangeHours(hoursChange)) {
 80017a4:	4b0c      	ldr	r3, [pc, #48]	; (80017d8 <secondDigitHour+0x54>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff ff79 	bl	80016a0 <isInRangeHours>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d002      	beq.n	80017ba <secondDigitHour+0x36>
			hoursChange = 0;
 80017b4:	4b08      	ldr	r3, [pc, #32]	; (80017d8 <secondDigitHour+0x54>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	701a      	strb	r2, [r3, #0]
		}

		setHours(hoursChange);
 80017ba:	4b07      	ldr	r3, [pc, #28]	; (80017d8 <secondDigitHour+0x54>)
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	4618      	mov	r0, r3
 80017c0:	f001 f862 	bl	8002888 <setHours>
		flagMenu = MENU_TIME_LEVEL;
 80017c4:	4b03      	ldr	r3, [pc, #12]	; (80017d4 <secondDigitHour+0x50>)
 80017c6:	2201      	movs	r2, #1
 80017c8:	601a      	str	r2, [r3, #0]
	}
}
 80017ca:	bf00      	nop
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	20000298 	.word	0x20000298
 80017d8:	2000029d 	.word	0x2000029d

080017dc <firstDigitMinute>:

void firstDigitMinute(uint8_t forAdd){
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	71fb      	strb	r3, [r7, #7]
	if (flagMenu == MENU_TIME_MINUTE_LEVEL) {
 80017e6:	4b08      	ldr	r3, [pc, #32]	; (8001808 <firstDigitMinute+0x2c>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d105      	bne.n	80017fa <firstDigitMinute+0x1e>
		minutesChange = forAdd;
 80017ee:	4a07      	ldr	r2, [pc, #28]	; (800180c <firstDigitMinute+0x30>)
 80017f0:	79fb      	ldrb	r3, [r7, #7]
 80017f2:	7013      	strb	r3, [r2, #0]
		flagMenu = MENU_TIME_MINUTE_SECOND_DIGIT;
 80017f4:	4b04      	ldr	r3, [pc, #16]	; (8001808 <firstDigitMinute+0x2c>)
 80017f6:	2204      	movs	r2, #4
 80017f8:	601a      	str	r2, [r3, #0]

	}
}
 80017fa:	bf00      	nop
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	20000298 	.word	0x20000298
 800180c:	2000029c 	.word	0x2000029c

08001810 <secondDigitMinute>:

void secondDigitMinute(uint8_t forAdd){
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	71fb      	strb	r3, [r7, #7]
	if (flagMenu == MENU_TIME_MINUTE_SECOND_DIGIT) {
 800181a:	4b11      	ldr	r3, [pc, #68]	; (8001860 <secondDigitMinute+0x50>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2b04      	cmp	r3, #4
 8001820:	d119      	bne.n	8001856 <secondDigitMinute+0x46>
		minutesChange += forAdd;
 8001822:	4b10      	ldr	r3, [pc, #64]	; (8001864 <secondDigitMinute+0x54>)
 8001824:	781a      	ldrb	r2, [r3, #0]
 8001826:	79fb      	ldrb	r3, [r7, #7]
 8001828:	4413      	add	r3, r2
 800182a:	b2da      	uxtb	r2, r3
 800182c:	4b0d      	ldr	r3, [pc, #52]	; (8001864 <secondDigitMinute+0x54>)
 800182e:	701a      	strb	r2, [r3, #0]

		if (isInRangeMinute(minutesChange)) {
 8001830:	4b0c      	ldr	r3, [pc, #48]	; (8001864 <secondDigitMinute+0x54>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff ff44 	bl	80016c2 <isInRangeMinute>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d002      	beq.n	8001846 <secondDigitMinute+0x36>
			minutesChange = 0;
 8001840:	4b08      	ldr	r3, [pc, #32]	; (8001864 <secondDigitMinute+0x54>)
 8001842:	2200      	movs	r2, #0
 8001844:	701a      	strb	r2, [r3, #0]
		}
		setMinutes(minutesChange);
 8001846:	4b07      	ldr	r3, [pc, #28]	; (8001864 <secondDigitMinute+0x54>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	4618      	mov	r0, r3
 800184c:	f000 ffee 	bl	800282c <setMinutes>
		flagMenu = MENU_TIME_MINUTE_LEVEL;
 8001850:	4b03      	ldr	r3, [pc, #12]	; (8001860 <secondDigitMinute+0x50>)
 8001852:	2202      	movs	r2, #2
 8001854:	601a      	str	r2, [r3, #0]
	}
}
 8001856:	bf00      	nop
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20000298 	.word	0x20000298
 8001864:	2000029c 	.word	0x2000029c

08001868 <firstDigitMonth>:


// functions to change data in menu


void firstDigitMonth(uint8_t forAdd){
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	71fb      	strb	r3, [r7, #7]
	if (flagMenu == MENU_DATE_LEVEL) {
 8001872:	4b08      	ldr	r3, [pc, #32]	; (8001894 <firstDigitMonth+0x2c>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2b05      	cmp	r3, #5
 8001878:	d105      	bne.n	8001886 <firstDigitMonth+0x1e>
		monthChange = forAdd;
 800187a:	4a07      	ldr	r2, [pc, #28]	; (8001898 <firstDigitMonth+0x30>)
 800187c:	79fb      	ldrb	r3, [r7, #7]
 800187e:	7013      	strb	r3, [r2, #0]
		flagMenu = MENU_DATE_MONTH_SECOND_DIGIT;
 8001880:	4b04      	ldr	r3, [pc, #16]	; (8001894 <firstDigitMonth+0x2c>)
 8001882:	2206      	movs	r2, #6
 8001884:	601a      	str	r2, [r3, #0]
	}
}
 8001886:	bf00      	nop
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	20000298 	.word	0x20000298
 8001898:	2000029f 	.word	0x2000029f

0800189c <secondDigitMonth>:


void secondDigitMonth(uint8_t forAdd){
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4603      	mov	r3, r0
 80018a4:	71fb      	strb	r3, [r7, #7]
	if (flagMenu == MENU_DATE_MONTH_SECOND_DIGIT) {
 80018a6:	4b11      	ldr	r3, [pc, #68]	; (80018ec <secondDigitMonth+0x50>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	2b06      	cmp	r3, #6
 80018ac:	d119      	bne.n	80018e2 <secondDigitMonth+0x46>

		monthChange += forAdd;
 80018ae:	4b10      	ldr	r3, [pc, #64]	; (80018f0 <secondDigitMonth+0x54>)
 80018b0:	781a      	ldrb	r2, [r3, #0]
 80018b2:	79fb      	ldrb	r3, [r7, #7]
 80018b4:	4413      	add	r3, r2
 80018b6:	b2da      	uxtb	r2, r3
 80018b8:	4b0d      	ldr	r3, [pc, #52]	; (80018f0 <secondDigitMonth+0x54>)
 80018ba:	701a      	strb	r2, [r3, #0]

		if (isInRangeMonth(monthChange)) {
 80018bc:	4b0c      	ldr	r3, [pc, #48]	; (80018f0 <secondDigitMonth+0x54>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff ff0f 	bl	80016e4 <isInRangeMonth>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d002      	beq.n	80018d2 <secondDigitMonth+0x36>
			monthChange = 0;
 80018cc:	4b08      	ldr	r3, [pc, #32]	; (80018f0 <secondDigitMonth+0x54>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	701a      	strb	r2, [r3, #0]
		}

		setMonth(monthChange);
 80018d2:	4b07      	ldr	r3, [pc, #28]	; (80018f0 <secondDigitMonth+0x54>)
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f001 f804 	bl	80028e4 <setMonth>
		flagMenu = MENU_DATE_LEVEL;
 80018dc:	4b03      	ldr	r3, [pc, #12]	; (80018ec <secondDigitMonth+0x50>)
 80018de:	2205      	movs	r2, #5
 80018e0:	601a      	str	r2, [r3, #0]
	}
}
 80018e2:	bf00      	nop
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	20000298 	.word	0x20000298
 80018f0:	2000029f 	.word	0x2000029f

080018f4 <firstDigitDay>:


void firstDigitDay(uint8_t forAdd){
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	71fb      	strb	r3, [r7, #7]
	if (flagMenu == MENU_DATE_DAY_FIRST_DIGIT) {
 80018fe:	4b08      	ldr	r3, [pc, #32]	; (8001920 <firstDigitDay+0x2c>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2b07      	cmp	r3, #7
 8001904:	d105      	bne.n	8001912 <firstDigitDay+0x1e>
		dayChange = forAdd;
 8001906:	4a07      	ldr	r2, [pc, #28]	; (8001924 <firstDigitDay+0x30>)
 8001908:	79fb      	ldrb	r3, [r7, #7]
 800190a:	7013      	strb	r3, [r2, #0]
		flagMenu = MENU_DATE_DAY_SECOND_DIGIT;
 800190c:	4b04      	ldr	r3, [pc, #16]	; (8001920 <firstDigitDay+0x2c>)
 800190e:	2208      	movs	r2, #8
 8001910:	601a      	str	r2, [r3, #0]

	}
}
 8001912:	bf00      	nop
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	20000298 	.word	0x20000298
 8001924:	2000029e 	.word	0x2000029e

08001928 <secondDigitDay>:


void secondDigitDay(uint8_t forAdd){
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	71fb      	strb	r3, [r7, #7]
	if (flagMenu == MENU_DATE_DAY_SECOND_DIGIT) {
 8001932:	4b11      	ldr	r3, [pc, #68]	; (8001978 <secondDigitDay+0x50>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2b08      	cmp	r3, #8
 8001938:	d119      	bne.n	800196e <secondDigitDay+0x46>
		dayChange += forAdd;
 800193a:	4b10      	ldr	r3, [pc, #64]	; (800197c <secondDigitDay+0x54>)
 800193c:	781a      	ldrb	r2, [r3, #0]
 800193e:	79fb      	ldrb	r3, [r7, #7]
 8001940:	4413      	add	r3, r2
 8001942:	b2da      	uxtb	r2, r3
 8001944:	4b0d      	ldr	r3, [pc, #52]	; (800197c <secondDigitDay+0x54>)
 8001946:	701a      	strb	r2, [r3, #0]

		if (isInRangeDay(dayChange)) {
 8001948:	4b0c      	ldr	r3, [pc, #48]	; (800197c <secondDigitDay+0x54>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff feda 	bl	8001706 <isInRangeDay>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d002      	beq.n	800195e <secondDigitDay+0x36>
			dayChange = 0;
 8001958:	4b08      	ldr	r3, [pc, #32]	; (800197c <secondDigitDay+0x54>)
 800195a:	2200      	movs	r2, #0
 800195c:	701a      	strb	r2, [r3, #0]
		}
		setDay(dayChange);
 800195e:	4b07      	ldr	r3, [pc, #28]	; (800197c <secondDigitDay+0x54>)
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	4618      	mov	r0, r3
 8001964:	f000 fff6 	bl	8002954 <setDay>
		flagMenu = MENU_DATE_DAY_FIRST_DIGIT;
 8001968:	4b03      	ldr	r3, [pc, #12]	; (8001978 <secondDigitDay+0x50>)
 800196a:	2207      	movs	r2, #7
 800196c:	601a      	str	r2, [r3, #0]
	}
}
 800196e:	bf00      	nop
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	20000298 	.word	0x20000298
 800197c:	2000029e 	.word	0x2000029e

08001980 <menu>:
/*
 *
 * REMOTE CONTROLLER MENU
 *
 */
void menu(int value) {
 8001980:	b580      	push	{r7, lr}
 8001982:	b088      	sub	sp, #32
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]

	// Display via USART
	printf("code=%02x\n", value);
 8001988:	6879      	ldr	r1, [r7, #4]
 800198a:	48cb      	ldr	r0, [pc, #812]	; (8001cb8 <menu+0x338>)
 800198c:	f009 faa8 	bl	800aee0 <iprintf>

	RTC_TimeTypeDef time = {0};
 8001990:	f107 030c 	add.w	r3, r7, #12
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	605a      	str	r2, [r3, #4]
 800199a:	609a      	str	r2, [r3, #8]
 800199c:	60da      	str	r2, [r3, #12]
 800199e:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef date = {0};
 80019a0:	2300      	movs	r3, #0
 80019a2:	60bb      	str	r3, [r7, #8]

	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 80019a4:	f107 030c 	add.w	r3, r7, #12
 80019a8:	2200      	movs	r2, #0
 80019aa:	4619      	mov	r1, r3
 80019ac:	48c3      	ldr	r0, [pc, #780]	; (8001cbc <menu+0x33c>)
 80019ae:	f005 fbcf 	bl	8007150 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 80019b2:	f107 0308 	add.w	r3, r7, #8
 80019b6:	2200      	movs	r2, #0
 80019b8:	4619      	mov	r1, r3
 80019ba:	48c0      	ldr	r0, [pc, #768]	; (8001cbc <menu+0x33c>)
 80019bc:	f005 fcab 	bl	8007316 <HAL_RTC_GetDate>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	3b07      	subs	r3, #7
 80019c4:	2b57      	cmp	r3, #87	; 0x57
 80019c6:	f200 8263 	bhi.w	8001e90 <menu+0x510>
 80019ca:	a201      	add	r2, pc, #4	; (adr r2, 80019d0 <menu+0x50>)
 80019cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019d0:	08001baf 	.word	0x08001baf
 80019d4:	08001cd5 	.word	0x08001cd5
 80019d8:	08001b7f 	.word	0x08001b7f
 80019dc:	08001e91 	.word	0x08001e91
 80019e0:	08001e91 	.word	0x08001e91
 80019e4:	08001bdf 	.word	0x08001bdf
 80019e8:	08001b37 	.word	0x08001b37
 80019ec:	08001e91 	.word	0x08001e91
 80019f0:	08001e91 	.word	0x08001e91
 80019f4:	08001e91 	.word	0x08001e91
 80019f8:	08001e91 	.word	0x08001e91
 80019fc:	08001e91 	.word	0x08001e91
 8001a00:	08001e91 	.word	0x08001e91
 8001a04:	08001e91 	.word	0x08001e91
 8001a08:	08001b6f 	.word	0x08001b6f
 8001a0c:	08001db5 	.word	0x08001db5
 8001a10:	08001e91 	.word	0x08001e91
 8001a14:	08001c2d 	.word	0x08001c2d
 8001a18:	08001b31 	.word	0x08001b31
 8001a1c:	08001e91 	.word	0x08001e91
 8001a20:	08001e91 	.word	0x08001e91
 8001a24:	08001d11 	.word	0x08001d11
 8001a28:	08001e91 	.word	0x08001e91
 8001a2c:	08001e91 	.word	0x08001e91
 8001a30:	08001e91 	.word	0x08001e91
 8001a34:	08001e91 	.word	0x08001e91
 8001a38:	08001e91 	.word	0x08001e91
 8001a3c:	08001e91 	.word	0x08001e91
 8001a40:	08001e91 	.word	0x08001e91
 8001a44:	08001e91 	.word	0x08001e91
 8001a48:	08001e91 	.word	0x08001e91
 8001a4c:	08001e91 	.word	0x08001e91
 8001a50:	08001e91 	.word	0x08001e91
 8001a54:	08001e91 	.word	0x08001e91
 8001a58:	08001e91 	.word	0x08001e91
 8001a5c:	08001e91 	.word	0x08001e91
 8001a60:	08001e91 	.word	0x08001e91
 8001a64:	08001e91 	.word	0x08001e91
 8001a68:	08001e91 	.word	0x08001e91
 8001a6c:	08001e91 	.word	0x08001e91
 8001a70:	08001e91 	.word	0x08001e91
 8001a74:	08001e91 	.word	0x08001e91
 8001a78:	08001e91 	.word	0x08001e91
 8001a7c:	08001e91 	.word	0x08001e91
 8001a80:	08001e91 	.word	0x08001e91
 8001a84:	08001e91 	.word	0x08001e91
 8001a88:	08001e91 	.word	0x08001e91
 8001a8c:	08001e91 	.word	0x08001e91
 8001a90:	08001e91 	.word	0x08001e91
 8001a94:	08001e91 	.word	0x08001e91
 8001a98:	08001e91 	.word	0x08001e91
 8001a9c:	08001e91 	.word	0x08001e91
 8001aa0:	08001e91 	.word	0x08001e91
 8001aa4:	08001e91 	.word	0x08001e91
 8001aa8:	08001e91 	.word	0x08001e91
 8001aac:	08001e91 	.word	0x08001e91
 8001ab0:	08001e91 	.word	0x08001e91
 8001ab4:	08001e87 	.word	0x08001e87
 8001ab8:	08001e91 	.word	0x08001e91
 8001abc:	08001d67 	.word	0x08001d67
 8001ac0:	08001e91 	.word	0x08001e91
 8001ac4:	08001e91 	.word	0x08001e91
 8001ac8:	08001e91 	.word	0x08001e91
 8001acc:	08001e91 	.word	0x08001e91
 8001ad0:	08001b3f 	.word	0x08001b3f
 8001ad4:	08001e91 	.word	0x08001e91
 8001ad8:	08001e91 	.word	0x08001e91
 8001adc:	08001d9b 	.word	0x08001d9b
 8001ae0:	08001e91 	.word	0x08001e91
 8001ae4:	08001e91 	.word	0x08001e91
 8001ae8:	08001e91 	.word	0x08001e91
 8001aec:	08001e91 	.word	0x08001e91
 8001af0:	08001e91 	.word	0x08001e91
 8001af4:	08001e91 	.word	0x08001e91
 8001af8:	08001e91 	.word	0x08001e91
 8001afc:	08001d81 	.word	0x08001d81
 8001b00:	08001e91 	.word	0x08001e91
 8001b04:	08001e91 	.word	0x08001e91
 8001b08:	08001e91 	.word	0x08001e91
 8001b0c:	08001e91 	.word	0x08001e91
 8001b10:	08001e91 	.word	0x08001e91
 8001b14:	08001e91 	.word	0x08001e91
 8001b18:	08001e91 	.word	0x08001e91
 8001b1c:	08001d4d 	.word	0x08001d4d
 8001b20:	08001e91 	.word	0x08001e91
 8001b24:	08001e91 	.word	0x08001e91
 8001b28:	08001e91 	.word	0x08001e91
 8001b2c:	08001c75 	.word	0x08001c75

	switch (value) {
	case IR_CODE_PLUS:
		break;
	case IR_CODE_MINUS:
		flagMenu=15;
 8001b30:	4b63      	ldr	r3, [pc, #396]	; (8001cc0 <menu+0x340>)
 8001b32:	220f      	movs	r2, #15
 8001b34:	601a      	str	r2, [r3, #0]

	case IR_CODE_CANCEL:
		flagColor = MENU_COLOR_LEVEL;
 8001b36:	4b63      	ldr	r3, [pc, #396]	; (8001cc4 <menu+0x344>)
 8001b38:	2201      	movs	r2, #1
 8001b3a:	601a      	str	r2, [r3, #0]
		break;
 8001b3c:	e1a8      	b.n	8001e90 <menu+0x510>

	case IR_CODE_MENU:
		if (flagMenu == MENU_TIME_LEVEL || flagMenu == MENU_TIME_MINUTE_LEVEL
 8001b3e:	4b60      	ldr	r3, [pc, #384]	; (8001cc0 <menu+0x340>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d007      	beq.n	8001b56 <menu+0x1d6>
 8001b46:	4b5e      	ldr	r3, [pc, #376]	; (8001cc0 <menu+0x340>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d003      	beq.n	8001b56 <menu+0x1d6>
				|| flagMenu == MENU_TIME_MINUTE_SECOND_DIGIT) {
 8001b4e:	4b5c      	ldr	r3, [pc, #368]	; (8001cc0 <menu+0x340>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2b04      	cmp	r3, #4
 8001b54:	d105      	bne.n	8001b62 <menu+0x1e2>
			mixColor();
 8001b56:	f000 fb37 	bl	80021c8 <mixColor>
			flagMenu = MENU_DATE_DAY_FIRST_DIGIT;
 8001b5a:	4b59      	ldr	r3, [pc, #356]	; (8001cc0 <menu+0x340>)
 8001b5c:	2207      	movs	r2, #7
 8001b5e:	601a      	str	r2, [r3, #0]
		} else {
			backToColorinMemory();
			flagMenu = MENU_TIME_LEVEL;
		}

		break;
 8001b60:	e196      	b.n	8001e90 <menu+0x510>
			backToColorinMemory();
 8001b62:	f000 fb4b 	bl	80021fc <backToColorinMemory>
			flagMenu = MENU_TIME_LEVEL;
 8001b66:	4b56      	ldr	r3, [pc, #344]	; (8001cc0 <menu+0x340>)
 8001b68:	2201      	movs	r2, #1
 8001b6a:	601a      	str	r2, [r3, #0]
		break;
 8001b6c:	e190      	b.n	8001e90 <menu+0x510>

	case IR_CODE_PLAY:
		dotOff();
 8001b6e:	f000 fd85 	bl	800267c <dotOff>
		backToColorinMemory();
 8001b72:	f000 fb43 	bl	80021fc <backToColorinMemory>
		flagMenu = MENU_OFF;
 8001b76:	4b52      	ldr	r3, [pc, #328]	; (8001cc0 <menu+0x340>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
		break;
 8001b7c:	e188      	b.n	8001e90 <menu+0x510>

	case IR_CODE_FORWARD:
		if (flagMenu == MENU_TIME_LEVEL
 8001b7e:	4b50      	ldr	r3, [pc, #320]	; (8001cc0 <menu+0x340>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d003      	beq.n	8001b8e <menu+0x20e>
				|| flagMenu == MENU_TIME_HOUR_SECOND_DIGIT) {
 8001b86:	4b4e      	ldr	r3, [pc, #312]	; (8001cc0 <menu+0x340>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2b03      	cmp	r3, #3
 8001b8c:	d102      	bne.n	8001b94 <menu+0x214>
			flagMenu = MENU_TIME_MINUTE_LEVEL;
 8001b8e:	4b4c      	ldr	r3, [pc, #304]	; (8001cc0 <menu+0x340>)
 8001b90:	2202      	movs	r2, #2
 8001b92:	601a      	str	r2, [r3, #0]
		}
		if (flagMenu == MENU_DATE_DAY_FIRST_DIGIT
 8001b94:	4b4a      	ldr	r3, [pc, #296]	; (8001cc0 <menu+0x340>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2b07      	cmp	r3, #7
 8001b9a:	d004      	beq.n	8001ba6 <menu+0x226>
				|| flagMenu == MENU_DATE_DAY_SECOND_DIGIT) {
 8001b9c:	4b48      	ldr	r3, [pc, #288]	; (8001cc0 <menu+0x340>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2b08      	cmp	r3, #8
 8001ba2:	f040 8172 	bne.w	8001e8a <menu+0x50a>
			flagMenu = MENU_DATE_LEVEL;
 8001ba6:	4b46      	ldr	r3, [pc, #280]	; (8001cc0 <menu+0x340>)
 8001ba8:	2205      	movs	r2, #5
 8001baa:	601a      	str	r2, [r3, #0]
		}
		break;
 8001bac:	e16d      	b.n	8001e8a <menu+0x50a>

	case IR_CODE_REWIND:
		if (flagMenu == MENU_TIME_MINUTE_LEVEL
 8001bae:	4b44      	ldr	r3, [pc, #272]	; (8001cc0 <menu+0x340>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d003      	beq.n	8001bbe <menu+0x23e>
				|| flagMenu == MENU_TIME_MINUTE_SECOND_DIGIT) {
 8001bb6:	4b42      	ldr	r3, [pc, #264]	; (8001cc0 <menu+0x340>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2b04      	cmp	r3, #4
 8001bbc:	d102      	bne.n	8001bc4 <menu+0x244>
			flagMenu = MENU_TIME_LEVEL;
 8001bbe:	4b40      	ldr	r3, [pc, #256]	; (8001cc0 <menu+0x340>)
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	601a      	str	r2, [r3, #0]
		}
		if (flagMenu == MENU_DATE_LEVEL
 8001bc4:	4b3e      	ldr	r3, [pc, #248]	; (8001cc0 <menu+0x340>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2b05      	cmp	r3, #5
 8001bca:	d004      	beq.n	8001bd6 <menu+0x256>
				|| flagMenu == MENU_DATE_MONTH_SECOND_DIGIT) {
 8001bcc:	4b3c      	ldr	r3, [pc, #240]	; (8001cc0 <menu+0x340>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2b06      	cmp	r3, #6
 8001bd2:	f040 815c 	bne.w	8001e8e <menu+0x50e>
			flagMenu = MENU_DATE_DAY_FIRST_DIGIT;
 8001bd6:	4b3a      	ldr	r3, [pc, #232]	; (8001cc0 <menu+0x340>)
 8001bd8:	2207      	movs	r2, #7
 8001bda:	601a      	str	r2, [r3, #0]
		}
		break;
 8001bdc:	e157      	b.n	8001e8e <menu+0x50e>

	case IR_CODE_1:
		// COLOR
		colorMenu(BLUE);
 8001bde:	4b3a      	ldr	r3, [pc, #232]	; (8001cc8 <menu+0x348>)
 8001be0:	781a      	ldrb	r2, [r3, #0]
 8001be2:	7859      	ldrb	r1, [r3, #1]
 8001be4:	0209      	lsls	r1, r1, #8
 8001be6:	430a      	orrs	r2, r1
 8001be8:	789b      	ldrb	r3, [r3, #2]
 8001bea:	041b      	lsls	r3, r3, #16
 8001bec:	431a      	orrs	r2, r3
 8001bee:	2300      	movs	r3, #0
 8001bf0:	f362 0317 	bfi	r3, r2, #0, #24
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff fd97 	bl	8001728 <colorMenu>

		// FUNCTIONS MUST BE IN THIS ORDER

		// SECOND DIGIT_HOUR
		secondDigitHour(1);
 8001bfa:	2001      	movs	r0, #1
 8001bfc:	f7ff fdc2 	bl	8001784 <secondDigitHour>

		// FIRST DIGIT HOUR

		firstDigitHour(10);
 8001c00:	200a      	movs	r0, #10
 8001c02:	f7ff fda5 	bl	8001750 <firstDigitHour>

		// SECOND DIGIT MINUTE
		secondDigitMinute(1);
 8001c06:	2001      	movs	r0, #1
 8001c08:	f7ff fe02 	bl	8001810 <secondDigitMinute>

		// FIRST DIGIT MINUTE
		firstDigitMinute(10);
 8001c0c:	200a      	movs	r0, #10
 8001c0e:	f7ff fde5 	bl	80017dc <firstDigitMinute>

		// SECOND DIGIT MONTH
		secondDigitMonth(1);
 8001c12:	2001      	movs	r0, #1
 8001c14:	f7ff fe42 	bl	800189c <secondDigitMonth>
		// FIRST DIGIT MONTH
		firstDigitMonth(10);
 8001c18:	200a      	movs	r0, #10
 8001c1a:	f7ff fe25 	bl	8001868 <firstDigitMonth>
		// SECOND DIGIT DAY
		secondDigitDay(1);
 8001c1e:	2001      	movs	r0, #1
 8001c20:	f7ff fe82 	bl	8001928 <secondDigitDay>
		// FIRST DIGIT DAY
		firstDigitDay(10);
 8001c24:	200a      	movs	r0, #10
 8001c26:	f7ff fe65 	bl	80018f4 <firstDigitDay>

		break;
 8001c2a:	e131      	b.n	8001e90 <menu+0x510>

	case IR_CODE_2:
		//COLOR
		colorMenu(RED);
 8001c2c:	4b27      	ldr	r3, [pc, #156]	; (8001ccc <menu+0x34c>)
 8001c2e:	781a      	ldrb	r2, [r3, #0]
 8001c30:	7859      	ldrb	r1, [r3, #1]
 8001c32:	0209      	lsls	r1, r1, #8
 8001c34:	430a      	orrs	r2, r1
 8001c36:	789b      	ldrb	r3, [r3, #2]
 8001c38:	041b      	lsls	r3, r3, #16
 8001c3a:	431a      	orrs	r2, r3
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	f362 0317 	bfi	r3, r2, #0, #24
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff fd70 	bl	8001728 <colorMenu>

		// FUNCTIONS MUST BE IN THIS ORDER

		// SECOND DIGIT_HOUR
		secondDigitHour(2);
 8001c48:	2002      	movs	r0, #2
 8001c4a:	f7ff fd9b 	bl	8001784 <secondDigitHour>

		// FIRST DIGIT HOUR

		firstDigitHour(20);
 8001c4e:	2014      	movs	r0, #20
 8001c50:	f7ff fd7e 	bl	8001750 <firstDigitHour>

		// SECOND DIGIT MINUTE
		secondDigitMinute(2);
 8001c54:	2002      	movs	r0, #2
 8001c56:	f7ff fddb 	bl	8001810 <secondDigitMinute>

		// FIRST DIGIT MINUTE
		firstDigitMinute(20);
 8001c5a:	2014      	movs	r0, #20
 8001c5c:	f7ff fdbe 	bl	80017dc <firstDigitMinute>

		// SECOND DIGIT MONTH
		secondDigitMonth(2);
 8001c60:	2002      	movs	r0, #2
 8001c62:	f7ff fe1b 	bl	800189c <secondDigitMonth>
		// FIRST DIGIT MONTH
		// NULL
		// SECOND DIGIT DAY
		secondDigitDay(2);
 8001c66:	2002      	movs	r0, #2
 8001c68:	f7ff fe5e 	bl	8001928 <secondDigitDay>
		// FIRST DIGIT DAY
		firstDigitDay(20);
 8001c6c:	2014      	movs	r0, #20
 8001c6e:	f7ff fe41 	bl	80018f4 <firstDigitDay>

		break;
 8001c72:	e10d      	b.n	8001e90 <menu+0x510>

	case IR_CODE_3:
		// COLOR
		colorMenu(GREEN);
 8001c74:	4b16      	ldr	r3, [pc, #88]	; (8001cd0 <menu+0x350>)
 8001c76:	781a      	ldrb	r2, [r3, #0]
 8001c78:	7859      	ldrb	r1, [r3, #1]
 8001c7a:	0209      	lsls	r1, r1, #8
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	789b      	ldrb	r3, [r3, #2]
 8001c80:	041b      	lsls	r3, r3, #16
 8001c82:	431a      	orrs	r2, r3
 8001c84:	2300      	movs	r3, #0
 8001c86:	f362 0317 	bfi	r3, r2, #0, #24
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff fd4c 	bl	8001728 <colorMenu>

		// FUNCTIONS MUST BE IN THIS ORDER

		// SECOND DIGIT_HOUR
		secondDigitHour(3);
 8001c90:	2003      	movs	r0, #3
 8001c92:	f7ff fd77 	bl	8001784 <secondDigitHour>
		// FIRST DIGIT HOUR

		// NULL

		// SECOND DIGIT MINUTE
		secondDigitMinute(3);
 8001c96:	2003      	movs	r0, #3
 8001c98:	f7ff fdba 	bl	8001810 <secondDigitMinute>

		// FIRST DIGIT MINUTE
		firstDigitMinute(30);
 8001c9c:	201e      	movs	r0, #30
 8001c9e:	f7ff fd9d 	bl	80017dc <firstDigitMinute>

		// SECOND DIGIT MONTH
		secondDigitMonth(3);
 8001ca2:	2003      	movs	r0, #3
 8001ca4:	f7ff fdfa 	bl	800189c <secondDigitMonth>
		// FIRST DIGIT MONTH
		// NULL
		// SECOND DIGIT DAY
		secondDigitDay(3);
 8001ca8:	2003      	movs	r0, #3
 8001caa:	f7ff fe3d 	bl	8001928 <secondDigitDay>
		// FIRST DIGIT DAY
		firstDigitDay(30);
 8001cae:	201e      	movs	r0, #30
 8001cb0:	f7ff fe20 	bl	80018f4 <firstDigitDay>

		break;
 8001cb4:	e0ec      	b.n	8001e90 <menu+0x510>
 8001cb6:	bf00      	nop
 8001cb8:	0800d410 	.word	0x0800d410
 8001cbc:	200008fc 	.word	0x200008fc
 8001cc0:	20000298 	.word	0x20000298
 8001cc4:	20000294 	.word	0x20000294
 8001cc8:	20000078 	.word	0x20000078
 8001ccc:	20000070 	.word	0x20000070
 8001cd0:	20000074 	.word	0x20000074

	case IR_CODE_4:

		//COLOR
		colorMenu(YELLOW);
 8001cd4:	4b70      	ldr	r3, [pc, #448]	; (8001e98 <menu+0x518>)
 8001cd6:	781a      	ldrb	r2, [r3, #0]
 8001cd8:	7859      	ldrb	r1, [r3, #1]
 8001cda:	0209      	lsls	r1, r1, #8
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	789b      	ldrb	r3, [r3, #2]
 8001ce0:	041b      	lsls	r3, r3, #16
 8001ce2:	431a      	orrs	r2, r3
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	f362 0317 	bfi	r3, r2, #0, #24
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff fd1c 	bl	8001728 <colorMenu>

		// FUNCTIONS MUST BE IN THIS ORDER

		// SECOND DIGIT_HOUR
		secondDigitHour(4);
 8001cf0:	2004      	movs	r0, #4
 8001cf2:	f7ff fd47 	bl	8001784 <secondDigitHour>
		// FIRST DIGIT HOUR

		// NULL

		// SECOND DIGIT MINUTE
		secondDigitMinute(4);
 8001cf6:	2004      	movs	r0, #4
 8001cf8:	f7ff fd8a 	bl	8001810 <secondDigitMinute>

		// FIRST DIGIT MINUTE
		firstDigitMinute(40);
 8001cfc:	2028      	movs	r0, #40	; 0x28
 8001cfe:	f7ff fd6d 	bl	80017dc <firstDigitMinute>

		// SECOND DIGIT MONTH
		secondDigitMonth(4);
 8001d02:	2004      	movs	r0, #4
 8001d04:	f7ff fdca 	bl	800189c <secondDigitMonth>
		// FIRST DIGIT MONTH
		// NULL
		// SECOND DIGIT DAY
		secondDigitDay(4);
 8001d08:	2004      	movs	r0, #4
 8001d0a:	f7ff fe0d 	bl	8001928 <secondDigitDay>
		// FIRST DIGIT DAY
		// NULL

		break;
 8001d0e:	e0bf      	b.n	8001e90 <menu+0x510>

	case IR_CODE_5:
		//COLOR
		colorMenu(PINK);
 8001d10:	4b62      	ldr	r3, [pc, #392]	; (8001e9c <menu+0x51c>)
 8001d12:	781a      	ldrb	r2, [r3, #0]
 8001d14:	7859      	ldrb	r1, [r3, #1]
 8001d16:	0209      	lsls	r1, r1, #8
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	789b      	ldrb	r3, [r3, #2]
 8001d1c:	041b      	lsls	r3, r3, #16
 8001d1e:	431a      	orrs	r2, r3
 8001d20:	2300      	movs	r3, #0
 8001d22:	f362 0317 	bfi	r3, r2, #0, #24
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff fcfe 	bl	8001728 <colorMenu>

		// FUNCTIONS MUST BE IN THIS ORDER

		// SECOND DIGIT_HOUR
		secondDigitHour(5);
 8001d2c:	2005      	movs	r0, #5
 8001d2e:	f7ff fd29 	bl	8001784 <secondDigitHour>
		// FIRST DIGIT HOUR

		// NULL

		// SECOND DIGIT MINUTE
		secondDigitMinute(5);
 8001d32:	2005      	movs	r0, #5
 8001d34:	f7ff fd6c 	bl	8001810 <secondDigitMinute>

		// FIRST DIGIT MINUTE
		firstDigitMinute(50);
 8001d38:	2032      	movs	r0, #50	; 0x32
 8001d3a:	f7ff fd4f 	bl	80017dc <firstDigitMinute>

		// SECOND DIGIT MONTH
		secondDigitMonth(5);
 8001d3e:	2005      	movs	r0, #5
 8001d40:	f7ff fdac 	bl	800189c <secondDigitMonth>
		// FIRST DIGIT MONTH
		// NULL
		// SECOND DIGIT DAY
		secondDigitDay(5);
 8001d44:	2005      	movs	r0, #5
 8001d46:	f7ff fdef 	bl	8001928 <secondDigitDay>
		// FIRST DIGIT DAY
		// NULL

		break;
 8001d4a:	e0a1      	b.n	8001e90 <menu+0x510>
		//COLOR

		// FUNCTIONS MUST BE IN THIS ORDER

		// SECOND DIGIT_HOUR
		secondDigitHour(6);
 8001d4c:	2006      	movs	r0, #6
 8001d4e:	f7ff fd19 	bl	8001784 <secondDigitHour>
		// FIRST DIGIT HOUR

		// NULL

		// SECOND DIGIT MINUTE
		secondDigitMinute(6);
 8001d52:	2006      	movs	r0, #6
 8001d54:	f7ff fd5c 	bl	8001810 <secondDigitMinute>
		// FIRST DIGIT MINUTE

		// NULL

		// SECOND DIGIT MONTH
		secondDigitMonth(6);
 8001d58:	2006      	movs	r0, #6
 8001d5a:	f7ff fd9f 	bl	800189c <secondDigitMonth>
		// FIRST DIGIT MONTH
		// NULL
		// SECOND DIGIT DAY
		secondDigitDay(6);
 8001d5e:	2006      	movs	r0, #6
 8001d60:	f7ff fde2 	bl	8001928 <secondDigitDay>
		// FIRST DIGIT DAY
		// NULL

		break;
 8001d64:	e094      	b.n	8001e90 <menu+0x510>
		//COLOR

		// FUNCTIONS MUST BE IN THIS ORDER

		// SECOND DIGIT_HOUR
		secondDigitHour(7);
 8001d66:	2007      	movs	r0, #7
 8001d68:	f7ff fd0c 	bl	8001784 <secondDigitHour>
		// FIRST DIGIT HOUR

		// NULL

		// SECOND DIGIT MINUTE
		secondDigitMinute(7);
 8001d6c:	2007      	movs	r0, #7
 8001d6e:	f7ff fd4f 	bl	8001810 <secondDigitMinute>
		// FIRST DIGIT MINUTE

		// NULL

		// SECOND DIGIT MONTH
		secondDigitMonth(7);
 8001d72:	2007      	movs	r0, #7
 8001d74:	f7ff fd92 	bl	800189c <secondDigitMonth>
		// FIRST DIGIT MONTH
		// NULL
		// SECOND DIGIT DAY
		secondDigitDay(7);
 8001d78:	2007      	movs	r0, #7
 8001d7a:	f7ff fdd5 	bl	8001928 <secondDigitDay>
		// FIRST DIGIT DAY
		// NULL

		break;
 8001d7e:	e087      	b.n	8001e90 <menu+0x510>
		//COLOR

		// FUNCTIONS MUST BE IN THIS ORDER

		// SECOND DIGIT_HOUR
		secondDigitHour(8);
 8001d80:	2008      	movs	r0, #8
 8001d82:	f7ff fcff 	bl	8001784 <secondDigitHour>
		// FIRST DIGIT HOUR

		// NULL

		// SECOND DIGIT MINUTE
		secondDigitMinute(8);
 8001d86:	2008      	movs	r0, #8
 8001d88:	f7ff fd42 	bl	8001810 <secondDigitMinute>
		// FIRST DIGIT MINUTE

		// NULL

		// SECOND DIGIT MONTH
		secondDigitMonth(8);
 8001d8c:	2008      	movs	r0, #8
 8001d8e:	f7ff fd85 	bl	800189c <secondDigitMonth>
		// FIRST DIGIT MONTH
		// NULL
		// SECOND DIGIT DAY
		secondDigitDay(8);
 8001d92:	2008      	movs	r0, #8
 8001d94:	f7ff fdc8 	bl	8001928 <secondDigitDay>
		// FIRST DIGIT DAY
		// NULL

		break;
 8001d98:	e07a      	b.n	8001e90 <menu+0x510>
		//COLOR

		// FUNCTIONS MUST BE IN THIS ORDER

		// SECOND DIGIT_HOUR
		secondDigitHour(9);
 8001d9a:	2009      	movs	r0, #9
 8001d9c:	f7ff fcf2 	bl	8001784 <secondDigitHour>
		// FIRST DIGIT HOUR

		// NULL

		// SECOND DIGIT MINUTE
		secondDigitMinute(9);
 8001da0:	2009      	movs	r0, #9
 8001da2:	f7ff fd35 	bl	8001810 <secondDigitMinute>
		// FIRST DIGIT MINUTE

		// NULL

		// SECOND DIGIT MONTH
		secondDigitMonth(9);
 8001da6:	2009      	movs	r0, #9
 8001da8:	f7ff fd78 	bl	800189c <secondDigitMonth>
		// FIRST DIGIT MONTH
		// NULL
		// SECOND DIGIT DAY
		secondDigitDay(9);
 8001dac:	2009      	movs	r0, #9
 8001dae:	f7ff fdbb 	bl	8001928 <secondDigitDay>
		// FIRST DIGIT DAY
		// NULL

		break;
 8001db2:	e06d      	b.n	8001e90 <menu+0x510>

		// NULL

		// SECOND DIGIT_HOUR

		if (flagMenu == MENU_TIME_HOUR_SECOND_DIGIT) {
 8001db4:	4b3a      	ldr	r3, [pc, #232]	; (8001ea0 <menu+0x520>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2b03      	cmp	r3, #3
 8001dba:	d112      	bne.n	8001de2 <menu+0x462>

			if (isInRangeHours(hoursChange)) {
 8001dbc:	4b39      	ldr	r3, [pc, #228]	; (8001ea4 <menu+0x524>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff fc6d 	bl	80016a0 <isInRangeHours>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d002      	beq.n	8001dd2 <menu+0x452>
				hoursChange = 0;
 8001dcc:	4b35      	ldr	r3, [pc, #212]	; (8001ea4 <menu+0x524>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	701a      	strb	r2, [r3, #0]
			}

			setHours(hoursChange);
 8001dd2:	4b34      	ldr	r3, [pc, #208]	; (8001ea4 <menu+0x524>)
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f000 fd56 	bl	8002888 <setHours>
			flagMenu = MENU_TIME_LEVEL;
 8001ddc:	4b30      	ldr	r3, [pc, #192]	; (8001ea0 <menu+0x520>)
 8001dde:	2201      	movs	r2, #1
 8001de0:	601a      	str	r2, [r3, #0]
		}

		// FIRST DIGIT HOUR

		firstDigitHour(0);
 8001de2:	2000      	movs	r0, #0
 8001de4:	f7ff fcb4 	bl	8001750 <firstDigitHour>

		// SECOND DIGIT MINUTE
		if (flagMenu == MENU_TIME_MINUTE_SECOND_DIGIT) {
 8001de8:	4b2d      	ldr	r3, [pc, #180]	; (8001ea0 <menu+0x520>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2b04      	cmp	r3, #4
 8001dee:	d112      	bne.n	8001e16 <menu+0x496>

			if (isInRangeMinute(minutesChange)) {
 8001df0:	4b2d      	ldr	r3, [pc, #180]	; (8001ea8 <menu+0x528>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff fc64 	bl	80016c2 <isInRangeMinute>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d002      	beq.n	8001e06 <menu+0x486>
				minutesChange = 0;
 8001e00:	4b29      	ldr	r3, [pc, #164]	; (8001ea8 <menu+0x528>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	701a      	strb	r2, [r3, #0]
			}
			setMinutes(minutesChange);
 8001e06:	4b28      	ldr	r3, [pc, #160]	; (8001ea8 <menu+0x528>)
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f000 fd0e 	bl	800282c <setMinutes>
			flagMenu = MENU_TIME_MINUTE_LEVEL;
 8001e10:	4b23      	ldr	r3, [pc, #140]	; (8001ea0 <menu+0x520>)
 8001e12:	2202      	movs	r2, #2
 8001e14:	601a      	str	r2, [r3, #0]
		}

		// FIRST DIGIT MINUTE

		firstDigitMinute(0);
 8001e16:	2000      	movs	r0, #0
 8001e18:	f7ff fce0 	bl	80017dc <firstDigitMinute>

		// SECOND DIGIT MONTH

		if (flagMenu == MENU_DATE_MONTH_SECOND_DIGIT) {
 8001e1c:	4b20      	ldr	r3, [pc, #128]	; (8001ea0 <menu+0x520>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2b06      	cmp	r3, #6
 8001e22:	d112      	bne.n	8001e4a <menu+0x4ca>

			if (isInRangeMonth(monthChange)) {
 8001e24:	4b21      	ldr	r3, [pc, #132]	; (8001eac <menu+0x52c>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff fc5b 	bl	80016e4 <isInRangeMonth>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d002      	beq.n	8001e3a <menu+0x4ba>
				monthChange = 0;
 8001e34:	4b1d      	ldr	r3, [pc, #116]	; (8001eac <menu+0x52c>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	701a      	strb	r2, [r3, #0]
			}

			setMonth(monthChange);
 8001e3a:	4b1c      	ldr	r3, [pc, #112]	; (8001eac <menu+0x52c>)
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f000 fd50 	bl	80028e4 <setMonth>
			flagMenu = MENU_DATE_LEVEL;
 8001e44:	4b16      	ldr	r3, [pc, #88]	; (8001ea0 <menu+0x520>)
 8001e46:	2205      	movs	r2, #5
 8001e48:	601a      	str	r2, [r3, #0]
		}

		// FIRST DIGIT MONTH

		firstDigitMonth(0);
 8001e4a:	2000      	movs	r0, #0
 8001e4c:	f7ff fd0c 	bl	8001868 <firstDigitMonth>

		// SECOND DIGIT DAY
		if (flagMenu == MENU_DATE_DAY_SECOND_DIGIT) {
 8001e50:	4b13      	ldr	r3, [pc, #76]	; (8001ea0 <menu+0x520>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2b08      	cmp	r3, #8
 8001e56:	d112      	bne.n	8001e7e <menu+0x4fe>

			if (isInRangeDay(dayChange)) {
 8001e58:	4b15      	ldr	r3, [pc, #84]	; (8001eb0 <menu+0x530>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff fc52 	bl	8001706 <isInRangeDay>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d002      	beq.n	8001e6e <menu+0x4ee>
				dayChange = 0;
 8001e68:	4b11      	ldr	r3, [pc, #68]	; (8001eb0 <menu+0x530>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	701a      	strb	r2, [r3, #0]
			}
			setDay(dayChange);
 8001e6e:	4b10      	ldr	r3, [pc, #64]	; (8001eb0 <menu+0x530>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f000 fd6e 	bl	8002954 <setDay>
			flagMenu = MENU_DATE_DAY_FIRST_DIGIT;
 8001e78:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <menu+0x520>)
 8001e7a:	2207      	movs	r2, #7
 8001e7c:	601a      	str	r2, [r3, #0]
		}

		// FIRST DIGIT DAY

		firstDigitDay(0);
 8001e7e:	2000      	movs	r0, #0
 8001e80:	f7ff fd38 	bl	80018f4 <firstDigitDay>

		break;
 8001e84:	e004      	b.n	8001e90 <menu+0x510>
		break;
 8001e86:	bf00      	nop
 8001e88:	e002      	b.n	8001e90 <menu+0x510>
		break;
 8001e8a:	bf00      	nop
 8001e8c:	e000      	b.n	8001e90 <menu+0x510>
		break;
 8001e8e:	bf00      	nop

	}

}
 8001e90:	bf00      	nop
 8001e92:	3720      	adds	r7, #32
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	2000007c 	.word	0x2000007c
 8001e9c:	20000080 	.word	0x20000080
 8001ea0:	20000298 	.word	0x20000298
 8001ea4:	2000029d 	.word	0x2000029d
 8001ea8:	2000029c 	.word	0x2000029c
 8001eac:	2000029f 	.word	0x2000029f
 8001eb0:	2000029e 	.word	0x2000029e

08001eb4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b098      	sub	sp, #96	; 0x60
 8001eb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001eba:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	601a      	str	r2, [r3, #0]
 8001ec2:	605a      	str	r2, [r3, #4]
 8001ec4:	609a      	str	r2, [r3, #8]
 8001ec6:	60da      	str	r2, [r3, #12]
 8001ec8:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001eca:	2300      	movs	r3, #0
 8001ecc:	64bb      	str	r3, [r7, #72]	; 0x48
  RTC_AlarmTypeDef sAlarm = {0};
 8001ece:	f107 031c 	add.w	r3, r7, #28
 8001ed2:	222c      	movs	r2, #44	; 0x2c
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f008 fb90 	bl	800a5fc <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001edc:	4b6e      	ldr	r3, [pc, #440]	; (8002098 <MX_RTC_Init+0x1e4>)
 8001ede:	4a6f      	ldr	r2, [pc, #444]	; (800209c <MX_RTC_Init+0x1e8>)
 8001ee0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001ee2:	4b6d      	ldr	r3, [pc, #436]	; (8002098 <MX_RTC_Init+0x1e4>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001ee8:	4b6b      	ldr	r3, [pc, #428]	; (8002098 <MX_RTC_Init+0x1e4>)
 8001eea:	227f      	movs	r2, #127	; 0x7f
 8001eec:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001eee:	4b6a      	ldr	r3, [pc, #424]	; (8002098 <MX_RTC_Init+0x1e4>)
 8001ef0:	22ff      	movs	r2, #255	; 0xff
 8001ef2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001ef4:	4b68      	ldr	r3, [pc, #416]	; (8002098 <MX_RTC_Init+0x1e4>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001efa:	4b67      	ldr	r3, [pc, #412]	; (8002098 <MX_RTC_Init+0x1e4>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001f00:	4b65      	ldr	r3, [pc, #404]	; (8002098 <MX_RTC_Init+0x1e4>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001f06:	4b64      	ldr	r3, [pc, #400]	; (8002098 <MX_RTC_Init+0x1e4>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001f0c:	4862      	ldr	r0, [pc, #392]	; (8002098 <MX_RTC_Init+0x1e4>)
 8001f0e:	f005 f807 	bl	8006f20 <HAL_RTC_Init>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <MX_RTC_Init+0x68>
  {
    Error_Handler();
 8001f18:	f7ff fbb0 	bl	800167c <Error_Handler>

  /* USER CODE BEGIN Check_RTC_BKUP */

	// After reset- download backup:

  	RTC_TimeTypeDef time = { 0 };
 8001f1c:	f107 0308 	add.w	r3, r7, #8
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	605a      	str	r2, [r3, #4]
 8001f26:	609a      	str	r2, [r3, #8]
 8001f28:	60da      	str	r2, [r3, #12]
 8001f2a:	611a      	str	r2, [r3, #16]
  	RTC_DateTypeDef date = { 0 };
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	607b      	str	r3, [r7, #4]

  	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8001f30:	f107 0308 	add.w	r3, r7, #8
 8001f34:	2200      	movs	r2, #0
 8001f36:	4619      	mov	r1, r3
 8001f38:	4857      	ldr	r0, [pc, #348]	; (8002098 <MX_RTC_Init+0x1e4>)
 8001f3a:	f005 f909 	bl	8007150 <HAL_RTC_GetTime>
  	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8001f3e:	1d3b      	adds	r3, r7, #4
 8001f40:	2200      	movs	r2, #0
 8001f42:	4619      	mov	r1, r3
 8001f44:	4854      	ldr	r0, [pc, #336]	; (8002098 <MX_RTC_Init+0x1e4>)
 8001f46:	f005 f9e6 	bl	8007316 <HAL_RTC_GetDate>

  	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR5, ((date.Month << 8) | (date.Year)));
 8001f4a:	797b      	ldrb	r3, [r7, #5]
 8001f4c:	021b      	lsls	r3, r3, #8
 8001f4e:	79fa      	ldrb	r2, [r7, #7]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	461a      	mov	r2, r3
 8001f54:	2105      	movs	r1, #5
 8001f56:	4850      	ldr	r0, [pc, #320]	; (8002098 <MX_RTC_Init+0x1e4>)
 8001f58:	f005 fc88 	bl	800786c <HAL_RTCEx_BKUPWrite>
  	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR6, date.Date);
 8001f5c:	79bb      	ldrb	r3, [r7, #6]
 8001f5e:	461a      	mov	r2, r3
 8001f60:	2106      	movs	r1, #6
 8001f62:	484d      	ldr	r0, [pc, #308]	; (8002098 <MX_RTC_Init+0x1e4>)
 8001f64:	f005 fc82 	bl	800786c <HAL_RTCEx_BKUPWrite>
  	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR7, ((time.Hours << 8) | (time.Minutes)));
 8001f68:	7a3b      	ldrb	r3, [r7, #8]
 8001f6a:	021b      	lsls	r3, r3, #8
 8001f6c:	7a7a      	ldrb	r2, [r7, #9]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	461a      	mov	r2, r3
 8001f72:	2107      	movs	r1, #7
 8001f74:	4848      	ldr	r0, [pc, #288]	; (8002098 <MX_RTC_Init+0x1e4>)
 8001f76:	f005 fc79 	bl	800786c <HAL_RTCEx_BKUPWrite>
  	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR8, time.Seconds);
 8001f7a:	7abb      	ldrb	r3, [r7, #10]
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	2108      	movs	r1, #8
 8001f80:	4845      	ldr	r0, [pc, #276]	; (8002098 <MX_RTC_Init+0x1e4>)
 8001f82:	f005 fc73 	bl	800786c <HAL_RTCEx_BKUPWrite>


	sDate.Month = (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR5) >> 8);
 8001f86:	2105      	movs	r1, #5
 8001f88:	4843      	ldr	r0, [pc, #268]	; (8002098 <MX_RTC_Init+0x1e4>)
 8001f8a:	f005 fc88 	bl	800789e <HAL_RTCEx_BKUPRead>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	0a1b      	lsrs	r3, r3, #8
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	sDate.Year = (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR5));
 8001f98:	2105      	movs	r1, #5
 8001f9a:	483f      	ldr	r0, [pc, #252]	; (8002098 <MX_RTC_Init+0x1e4>)
 8001f9c:	f005 fc7f 	bl	800789e <HAL_RTCEx_BKUPRead>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	sDate.Date = (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR6));
 8001fa8:	2106      	movs	r1, #6
 8001faa:	483b      	ldr	r0, [pc, #236]	; (8002098 <MX_RTC_Init+0x1e4>)
 8001fac:	f005 fc77 	bl	800789e <HAL_RTCEx_BKUPRead>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a

	sTime.Hours =(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR7) >> 8);
 8001fb8:	2107      	movs	r1, #7
 8001fba:	4837      	ldr	r0, [pc, #220]	; (8002098 <MX_RTC_Init+0x1e4>)
 8001fbc:	f005 fc6f 	bl	800789e <HAL_RTCEx_BKUPRead>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	0a1b      	lsrs	r3, r3, #8
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	sTime.Minutes = (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR7));
 8001fca:	2107      	movs	r1, #7
 8001fcc:	4832      	ldr	r0, [pc, #200]	; (8002098 <MX_RTC_Init+0x1e4>)
 8001fce:	f005 fc66 	bl	800789e <HAL_RTCEx_BKUPRead>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	sTime.Seconds = (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR8));
 8001fda:	2108      	movs	r1, #8
 8001fdc:	482e      	ldr	r0, [pc, #184]	; (8002098 <MX_RTC_Init+0x1e4>)
 8001fde:	f005 fc5e 	bl	800789e <HAL_RTCEx_BKUPRead>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001fea:	2300      	movs	r3, #0
 8001fec:	65bb      	str	r3, [r7, #88]	; 0x58
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	65fb      	str	r3, [r7, #92]	; 0x5c

	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) {
 8001ff2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4827      	ldr	r0, [pc, #156]	; (8002098 <MX_RTC_Init+0x1e4>)
 8001ffc:	f005 f80b 	bl	8007016 <HAL_RTC_SetTime>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <MX_RTC_Init+0x156>
		Error_Handler();
 8002006:	f7ff fb39 	bl	800167c <Error_Handler>
	}

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) {
 800200a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800200e:	2200      	movs	r2, #0
 8002010:	4619      	mov	r1, r3
 8002012:	4821      	ldr	r0, [pc, #132]	; (8002098 <MX_RTC_Init+0x1e4>)
 8002014:	f005 f8f8 	bl	8007208 <HAL_RTC_SetDate>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <MX_RTC_Init+0x16e>
		Error_Handler();
 800201e:	f7ff fb2d 	bl	800167c <Error_Handler>
	}

	/** Enable the Alarm A
	 */
	sAlarm.AlarmTime.Hours = 8;
 8002022:	2308      	movs	r3, #8
 8002024:	773b      	strb	r3, [r7, #28]
	sAlarm.AlarmTime.Minutes = 0;
 8002026:	2300      	movs	r3, #0
 8002028:	777b      	strb	r3, [r7, #29]
	sAlarm.AlarmTime.Seconds = 0;
 800202a:	2300      	movs	r3, #0
 800202c:	77bb      	strb	r3, [r7, #30]
	sAlarm.AlarmTime.SubSeconds = 0;
 800202e:	2300      	movs	r3, #0
 8002030:	623b      	str	r3, [r7, #32]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002032:	2300      	movs	r3, #0
 8002034:	62bb      	str	r3, [r7, #40]	; 0x28
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002036:	2300      	movs	r3, #0
 8002038:	62fb      	str	r3, [r7, #44]	; 0x2c
	sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;
 800203a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800203e:	633b      	str	r3, [r7, #48]	; 0x30
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002040:	2300      	movs	r3, #0
 8002042:	63bb      	str	r3, [r7, #56]	; 0x38
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002044:	2300      	movs	r3, #0
 8002046:	63fb      	str	r3, [r7, #60]	; 0x3c
	sAlarm.AlarmDateWeekDay = 1;
 8002048:	2301      	movs	r3, #1
 800204a:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	sAlarm.Alarm = RTC_ALARM_A;
 800204e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002052:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK) {
 8002054:	f107 031c 	add.w	r3, r7, #28
 8002058:	2200      	movs	r2, #0
 800205a:	4619      	mov	r1, r3
 800205c:	480e      	ldr	r0, [pc, #56]	; (8002098 <MX_RTC_Init+0x1e4>)
 800205e:	f005 f9a7 	bl	80073b0 <HAL_RTC_SetAlarm_IT>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <MX_RTC_Init+0x1b8>
		Error_Handler();
 8002068:	f7ff fb08 	bl	800167c <Error_Handler>
	}

	/** Enable the Alarm B
	 */
	sAlarm.AlarmTime.Minutes = 16;
 800206c:	2310      	movs	r3, #16
 800206e:	777b      	strb	r3, [r7, #29]
	sAlarm.AlarmTime.Seconds = 15;
 8002070:	230f      	movs	r3, #15
 8002072:	77bb      	strb	r3, [r7, #30]
	sAlarm.Alarm = RTC_ALARM_B;
 8002074:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002078:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK) {
 800207a:	f107 031c 	add.w	r3, r7, #28
 800207e:	2200      	movs	r2, #0
 8002080:	4619      	mov	r1, r3
 8002082:	4805      	ldr	r0, [pc, #20]	; (8002098 <MX_RTC_Init+0x1e4>)
 8002084:	f005 f994 	bl	80073b0 <HAL_RTC_SetAlarm_IT>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <MX_RTC_Init+0x1de>
		Error_Handler();
 800208e:	f7ff faf5 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002092:	3760      	adds	r7, #96	; 0x60
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	200008fc 	.word	0x200008fc
 800209c:	40002800 	.word	0x40002800

080020a0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b0a4      	sub	sp, #144	; 0x90
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020a8:	f107 0308 	add.w	r3, r7, #8
 80020ac:	2288      	movs	r2, #136	; 0x88
 80020ae:	2100      	movs	r1, #0
 80020b0:	4618      	mov	r0, r3
 80020b2:	f008 faa3 	bl	800a5fc <memset>
  if(rtcHandle->Instance==RTC)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a10      	ldr	r2, [pc, #64]	; (80020fc <HAL_RTC_MspInit+0x5c>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d118      	bne.n	80020f2 <HAL_RTC_MspInit+0x52>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80020c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020c4:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80020c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020ce:	f107 0308 	add.w	r3, r7, #8
 80020d2:	4618      	mov	r0, r3
 80020d4:	f004 fa58 	bl	8006588 <HAL_RCCEx_PeriphCLKConfig>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80020de:	f7ff facd 	bl	800167c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80020e2:	4b07      	ldr	r3, [pc, #28]	; (8002100 <HAL_RTC_MspInit+0x60>)
 80020e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020e8:	4a05      	ldr	r2, [pc, #20]	; (8002100 <HAL_RTC_MspInit+0x60>)
 80020ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80020f2:	bf00      	nop
 80020f4:	3790      	adds	r7, #144	; 0x90
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	40002800 	.word	0x40002800
 8002100:	40021000 	.word	0x40021000

08002104 <TurnOnStanbyMode>:
}

/* USER CODE BEGIN 1 */


void TurnOnStanbyMode(uint8_t hour, uint8_t minute, uint8_t second){
 8002104:	b580      	push	{r7, lr}
 8002106:	b088      	sub	sp, #32
 8002108:	af00      	add	r7, sp, #0
 800210a:	4603      	mov	r3, r0
 800210c:	71fb      	strb	r3, [r7, #7]
 800210e:	460b      	mov	r3, r1
 8002110:	71bb      	strb	r3, [r7, #6]
 8002112:	4613      	mov	r3, r2
 8002114:	717b      	strb	r3, [r7, #5]
	RTC_TimeTypeDef time = { 0 };
 8002116:	f107 030c 	add.w	r3, r7, #12
 800211a:	2200      	movs	r2, #0
 800211c:	601a      	str	r2, [r3, #0]
 800211e:	605a      	str	r2, [r3, #4]
 8002120:	609a      	str	r2, [r3, #8]
 8002122:	60da      	str	r2, [r3, #12]
 8002124:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef date = { 0 };
 8002126:	2300      	movs	r3, #0
 8002128:	60bb      	str	r3, [r7, #8]


	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 800212a:	f107 030c 	add.w	r3, r7, #12
 800212e:	2200      	movs	r2, #0
 8002130:	4619      	mov	r1, r3
 8002132:	480f      	ldr	r0, [pc, #60]	; (8002170 <TurnOnStanbyMode+0x6c>)
 8002134:	f005 f80c 	bl	8007150 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8002138:	f107 0308 	add.w	r3, r7, #8
 800213c:	2200      	movs	r2, #0
 800213e:	4619      	mov	r1, r3
 8002140:	480b      	ldr	r0, [pc, #44]	; (8002170 <TurnOnStanbyMode+0x6c>)
 8002142:	f005 f8e8 	bl	8007316 <HAL_RTC_GetDate>



	if(time.Hours==hour && time.Minutes==minute && time.Seconds==second){
 8002146:	7b3b      	ldrb	r3, [r7, #12]
 8002148:	79fa      	ldrb	r2, [r7, #7]
 800214a:	429a      	cmp	r2, r3
 800214c:	d10b      	bne.n	8002166 <TurnOnStanbyMode+0x62>
 800214e:	7b7b      	ldrb	r3, [r7, #13]
 8002150:	79ba      	ldrb	r2, [r7, #6]
 8002152:	429a      	cmp	r2, r3
 8002154:	d107      	bne.n	8002166 <TurnOnStanbyMode+0x62>
 8002156:	7bbb      	ldrb	r3, [r7, #14]
 8002158:	797a      	ldrb	r2, [r7, #5]
 800215a:	429a      	cmp	r2, r3
 800215c:	d103      	bne.n	8002166 <TurnOnStanbyMode+0x62>

		displayStop();
 800215e:	f000 fce7 	bl	8002b30 <displayStop>
		HAL_PWR_EnterSTANDBYMode();
 8002162:	f003 fba7 	bl	80058b4 <HAL_PWR_EnterSTANDBYMode>





}
 8002166:	bf00      	nop
 8002168:	3720      	adds	r7, #32
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	200008fc 	.word	0x200008fc

08002174 <changeColor>:
 *  FUNCTIONS
 *
 */

// COLORS
void changeColor(struct colorRgb newColor) {
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
	displayStop();
 800217c:	f000 fcd8 	bl	8002b30 <displayStop>
	actualColor=newColor;
 8002180:	4b0f      	ldr	r3, [pc, #60]	; (80021c0 <changeColor+0x4c>)
 8002182:	461a      	mov	r2, r3
 8002184:	1d3b      	adds	r3, r7, #4
 8002186:	8819      	ldrh	r1, [r3, #0]
 8002188:	789b      	ldrb	r3, [r3, #2]
 800218a:	8011      	strh	r1, [r2, #0]
 800218c:	7093      	strb	r3, [r2, #2]
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR2, actualColor.blue);
 800218e:	4b0c      	ldr	r3, [pc, #48]	; (80021c0 <changeColor+0x4c>)
 8002190:	785b      	ldrb	r3, [r3, #1]
 8002192:	461a      	mov	r2, r3
 8002194:	2102      	movs	r1, #2
 8002196:	480b      	ldr	r0, [pc, #44]	; (80021c4 <changeColor+0x50>)
 8002198:	f005 fb68 	bl	800786c <HAL_RTCEx_BKUPWrite>
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR3, actualColor.red);
 800219c:	4b08      	ldr	r3, [pc, #32]	; (80021c0 <changeColor+0x4c>)
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	461a      	mov	r2, r3
 80021a2:	2103      	movs	r1, #3
 80021a4:	4807      	ldr	r0, [pc, #28]	; (80021c4 <changeColor+0x50>)
 80021a6:	f005 fb61 	bl	800786c <HAL_RTCEx_BKUPWrite>
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR4, actualColor.green);
 80021aa:	4b05      	ldr	r3, [pc, #20]	; (80021c0 <changeColor+0x4c>)
 80021ac:	789b      	ldrb	r3, [r3, #2]
 80021ae:	461a      	mov	r2, r3
 80021b0:	2104      	movs	r1, #4
 80021b2:	4804      	ldr	r0, [pc, #16]	; (80021c4 <changeColor+0x50>)
 80021b4:	f005 fb5a 	bl	800786c <HAL_RTCEx_BKUPWrite>
}
 80021b8:	bf00      	nop
 80021ba:	3708      	adds	r7, #8
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	20000920 	.word	0x20000920
 80021c4:	200008fc 	.word	0x200008fc

080021c8 <mixColor>:

void mixColor() {
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
	uint8_t tempColor;

	tempColor = actualColor.blue;
 80021ce:	4b0a      	ldr	r3, [pc, #40]	; (80021f8 <mixColor+0x30>)
 80021d0:	785b      	ldrb	r3, [r3, #1]
 80021d2:	71fb      	strb	r3, [r7, #7]

	actualColor.blue = actualColor.red;
 80021d4:	4b08      	ldr	r3, [pc, #32]	; (80021f8 <mixColor+0x30>)
 80021d6:	781a      	ldrb	r2, [r3, #0]
 80021d8:	4b07      	ldr	r3, [pc, #28]	; (80021f8 <mixColor+0x30>)
 80021da:	705a      	strb	r2, [r3, #1]
	actualColor.red = actualColor.green;
 80021dc:	4b06      	ldr	r3, [pc, #24]	; (80021f8 <mixColor+0x30>)
 80021de:	789a      	ldrb	r2, [r3, #2]
 80021e0:	4b05      	ldr	r3, [pc, #20]	; (80021f8 <mixColor+0x30>)
 80021e2:	701a      	strb	r2, [r3, #0]
	actualColor.green = tempColor;
 80021e4:	4a04      	ldr	r2, [pc, #16]	; (80021f8 <mixColor+0x30>)
 80021e6:	79fb      	ldrb	r3, [r7, #7]
 80021e8:	7093      	strb	r3, [r2, #2]
}
 80021ea:	bf00      	nop
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	20000920 	.word	0x20000920

080021fc <backToColorinMemory>:


void backToColorinMemory() {
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
	actualColor.blue=HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR2);
 8002200:	2102      	movs	r1, #2
 8002202:	4819      	ldr	r0, [pc, #100]	; (8002268 <backToColorinMemory+0x6c>)
 8002204:	f005 fb4b 	bl	800789e <HAL_RTCEx_BKUPRead>
 8002208:	4603      	mov	r3, r0
 800220a:	b2da      	uxtb	r2, r3
 800220c:	4b17      	ldr	r3, [pc, #92]	; (800226c <backToColorinMemory+0x70>)
 800220e:	705a      	strb	r2, [r3, #1]
	actualColor.red=HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR3);
 8002210:	2103      	movs	r1, #3
 8002212:	4815      	ldr	r0, [pc, #84]	; (8002268 <backToColorinMemory+0x6c>)
 8002214:	f005 fb43 	bl	800789e <HAL_RTCEx_BKUPRead>
 8002218:	4603      	mov	r3, r0
 800221a:	b2da      	uxtb	r2, r3
 800221c:	4b13      	ldr	r3, [pc, #76]	; (800226c <backToColorinMemory+0x70>)
 800221e:	701a      	strb	r2, [r3, #0]
	actualColor.green=HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR4);
 8002220:	2104      	movs	r1, #4
 8002222:	4811      	ldr	r0, [pc, #68]	; (8002268 <backToColorinMemory+0x6c>)
 8002224:	f005 fb3b 	bl	800789e <HAL_RTCEx_BKUPRead>
 8002228:	4603      	mov	r3, r0
 800222a:	b2da      	uxtb	r2, r3
 800222c:	4b0f      	ldr	r3, [pc, #60]	; (800226c <backToColorinMemory+0x70>)
 800222e:	709a      	strb	r2, [r3, #2]

	if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR2)==0 && HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR3)==0 && HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR4)==0){
 8002230:	2102      	movs	r1, #2
 8002232:	480d      	ldr	r0, [pc, #52]	; (8002268 <backToColorinMemory+0x6c>)
 8002234:	f005 fb33 	bl	800789e <HAL_RTCEx_BKUPRead>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d111      	bne.n	8002262 <backToColorinMemory+0x66>
 800223e:	2103      	movs	r1, #3
 8002240:	4809      	ldr	r0, [pc, #36]	; (8002268 <backToColorinMemory+0x6c>)
 8002242:	f005 fb2c 	bl	800789e <HAL_RTCEx_BKUPRead>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d10a      	bne.n	8002262 <backToColorinMemory+0x66>
 800224c:	2104      	movs	r1, #4
 800224e:	4806      	ldr	r0, [pc, #24]	; (8002268 <backToColorinMemory+0x6c>)
 8002250:	f005 fb25 	bl	800789e <HAL_RTCEx_BKUPRead>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d103      	bne.n	8002262 <backToColorinMemory+0x66>
		changeColor(RED);
 800225a:	4b05      	ldr	r3, [pc, #20]	; (8002270 <backToColorinMemory+0x74>)
 800225c:	6818      	ldr	r0, [r3, #0]
 800225e:	f7ff ff89 	bl	8002174 <changeColor>
	}

}
 8002262:	bf00      	nop
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	200008fc 	.word	0x200008fc
 800226c:	20000920 	.word	0x20000920
 8002270:	20000070 	.word	0x20000070

08002274 <numberToMatrix>:

// AUXILIARY FUNCTIONS:
uint8_t* numberToMatrix(int number) {
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2b09      	cmp	r3, #9
 8002280:	d82a      	bhi.n	80022d8 <numberToMatrix+0x64>
 8002282:	a201      	add	r2, pc, #4	; (adr r2, 8002288 <numberToMatrix+0x14>)
 8002284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002288:	080022b1 	.word	0x080022b1
 800228c:	080022b5 	.word	0x080022b5
 8002290:	080022b9 	.word	0x080022b9
 8002294:	080022bd 	.word	0x080022bd
 8002298:	080022c1 	.word	0x080022c1
 800229c:	080022c5 	.word	0x080022c5
 80022a0:	080022c9 	.word	0x080022c9
 80022a4:	080022cd 	.word	0x080022cd
 80022a8:	080022d1 	.word	0x080022d1
 80022ac:	080022d5 	.word	0x080022d5
	switch (number) {
	case 0:
		return zero;
 80022b0:	4b0d      	ldr	r3, [pc, #52]	; (80022e8 <numberToMatrix+0x74>)
 80022b2:	e012      	b.n	80022da <numberToMatrix+0x66>
		break;
	case 1:
		return one;
 80022b4:	4b0d      	ldr	r3, [pc, #52]	; (80022ec <numberToMatrix+0x78>)
 80022b6:	e010      	b.n	80022da <numberToMatrix+0x66>
		break;
	case 2:
		return two;
 80022b8:	4b0d      	ldr	r3, [pc, #52]	; (80022f0 <numberToMatrix+0x7c>)
 80022ba:	e00e      	b.n	80022da <numberToMatrix+0x66>
		break;
	case 3:
		return three;
 80022bc:	4b0d      	ldr	r3, [pc, #52]	; (80022f4 <numberToMatrix+0x80>)
 80022be:	e00c      	b.n	80022da <numberToMatrix+0x66>
		break;
	case 4:
		return four;
 80022c0:	4b0d      	ldr	r3, [pc, #52]	; (80022f8 <numberToMatrix+0x84>)
 80022c2:	e00a      	b.n	80022da <numberToMatrix+0x66>
		break;
	case 5:
		return five;
 80022c4:	4b0d      	ldr	r3, [pc, #52]	; (80022fc <numberToMatrix+0x88>)
 80022c6:	e008      	b.n	80022da <numberToMatrix+0x66>
		break;
	case 6:
		return six;
 80022c8:	4b0d      	ldr	r3, [pc, #52]	; (8002300 <numberToMatrix+0x8c>)
 80022ca:	e006      	b.n	80022da <numberToMatrix+0x66>
		break;
	case 7:
		return seven;
 80022cc:	4b0d      	ldr	r3, [pc, #52]	; (8002304 <numberToMatrix+0x90>)
 80022ce:	e004      	b.n	80022da <numberToMatrix+0x66>
		break;
	case 8:
		return eight;
 80022d0:	4b0d      	ldr	r3, [pc, #52]	; (8002308 <numberToMatrix+0x94>)
 80022d2:	e002      	b.n	80022da <numberToMatrix+0x66>
		break;
	case 9:
		return nine;
 80022d4:	4b0d      	ldr	r3, [pc, #52]	; (800230c <numberToMatrix+0x98>)
 80022d6:	e000      	b.n	80022da <numberToMatrix+0x66>
		break;
	default:
		return 0;
 80022d8:	2300      	movs	r3, #0
	}

}
 80022da:	4618      	mov	r0, r3
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	20000004 	.word	0x20000004
 80022ec:	20000010 	.word	0x20000010
 80022f0:	20000014 	.word	0x20000014
 80022f4:	20000020 	.word	0x20000020
 80022f8:	2000002c 	.word	0x2000002c
 80022fc:	20000034 	.word	0x20000034
 8002300:	20000040 	.word	0x20000040
 8002304:	2000004c 	.word	0x2000004c
 8002308:	20000054 	.word	0x20000054
 800230c:	20000064 	.word	0x20000064

08002310 <destroy>:

struct manyNumber destroy(uint8_t numberToDestroy) {
 8002310:	b480      	push	{r7}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
 8002316:	4603      	mov	r3, r0
 8002318:	71fb      	strb	r3, [r7, #7]

	struct manyNumber temp;

	temp.firstNumber = numberToDestroy / 10;
 800231a:	79fb      	ldrb	r3, [r7, #7]
 800231c:	4a10      	ldr	r2, [pc, #64]	; (8002360 <destroy+0x50>)
 800231e:	fba2 2303 	umull	r2, r3, r2, r3
 8002322:	08db      	lsrs	r3, r3, #3
 8002324:	b2db      	uxtb	r3, r3
 8002326:	723b      	strb	r3, [r7, #8]
	temp.secondNumber = numberToDestroy % 10;
 8002328:	79fa      	ldrb	r2, [r7, #7]
 800232a:	4b0d      	ldr	r3, [pc, #52]	; (8002360 <destroy+0x50>)
 800232c:	fba3 1302 	umull	r1, r3, r3, r2
 8002330:	08d9      	lsrs	r1, r3, #3
 8002332:	460b      	mov	r3, r1
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	440b      	add	r3, r1
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	b2db      	uxtb	r3, r3
 800233e:	727b      	strb	r3, [r7, #9]
	return temp;
 8002340:	893b      	ldrh	r3, [r7, #8]
 8002342:	81bb      	strh	r3, [r7, #12]
 8002344:	2300      	movs	r3, #0
 8002346:	7b3a      	ldrb	r2, [r7, #12]
 8002348:	f362 0307 	bfi	r3, r2, #0, #8
 800234c:	7b7a      	ldrb	r2, [r7, #13]
 800234e:	f362 230f 	bfi	r3, r2, #8, #8
}
 8002352:	4618      	mov	r0, r3
 8002354:	3714      	adds	r7, #20
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	cccccccd 	.word	0xcccccccd

08002364 <destoryCelcius>:

struct manyNumberCelcius destoryCelcius() {
 8002364:	b580      	push	{r7, lr}
 8002366:	b088      	sub	sp, #32
 8002368:	af00      	add	r7, sp, #0
	struct manyNumberCelcius temp;
	double measureTemperature = temperatureMeasure();
 800236a:	f000 fdd1 	bl	8002f10 <temperatureMeasure>
 800236e:	ed87 0b06 	vstr	d0, [r7, #24]
	int tempTotalValueTemperature = (int) temperatureMeasure();
 8002372:	f000 fdcd 	bl	8002f10 <temperatureMeasure>
 8002376:	ec53 2b10 	vmov	r2, r3, d0
 800237a:	4610      	mov	r0, r2
 800237c:	4619      	mov	r1, r3
 800237e:	f7fe fbeb 	bl	8000b58 <__aeabi_d2iz>
 8002382:	4603      	mov	r3, r0
 8002384:	617b      	str	r3, [r7, #20]
	double valueAfterPointTemperature;


	temp.firstNumber = tempTotalValueTemperature / 10;
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	4a2e      	ldr	r2, [pc, #184]	; (8002444 <destoryCelcius+0xe0>)
 800238a:	fb82 1203 	smull	r1, r2, r2, r3
 800238e:	1092      	asrs	r2, r2, #2
 8002390:	17db      	asrs	r3, r3, #31
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	b2db      	uxtb	r3, r3
 8002396:	703b      	strb	r3, [r7, #0]
	temp.secondNumber = tempTotalValueTemperature % 10;
 8002398:	697a      	ldr	r2, [r7, #20]
 800239a:	4b2a      	ldr	r3, [pc, #168]	; (8002444 <destoryCelcius+0xe0>)
 800239c:	fb83 1302 	smull	r1, r3, r3, r2
 80023a0:	1099      	asrs	r1, r3, #2
 80023a2:	17d3      	asrs	r3, r2, #31
 80023a4:	1ac9      	subs	r1, r1, r3
 80023a6:	460b      	mov	r3, r1
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	440b      	add	r3, r1
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	1ad1      	subs	r1, r2, r3
 80023b0:	b2cb      	uxtb	r3, r1
 80023b2:	707b      	strb	r3, [r7, #1]
	valueAfterPointTemperature = measureTemperature - tempTotalValueTemperature;
 80023b4:	6978      	ldr	r0, [r7, #20]
 80023b6:	f7fe f8b5 	bl	8000524 <__aeabi_i2d>
 80023ba:	4602      	mov	r2, r0
 80023bc:	460b      	mov	r3, r1
 80023be:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80023c2:	f7fd ff61 	bl	8000288 <__aeabi_dsub>
 80023c6:	4602      	mov	r2, r0
 80023c8:	460b      	mov	r3, r1
 80023ca:	e9c7 2302 	strd	r2, r3, [r7, #8]
	valueAfterPointTemperature = valueAfterPointTemperature * 10;
 80023ce:	f04f 0200 	mov.w	r2, #0
 80023d2:	4b1d      	ldr	r3, [pc, #116]	; (8002448 <destoryCelcius+0xe4>)
 80023d4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80023d8:	f7fe f90e 	bl	80005f8 <__aeabi_dmul>
 80023dc:	4602      	mov	r2, r0
 80023de:	460b      	mov	r3, r1
 80023e0:	e9c7 2302 	strd	r2, r3, [r7, #8]
	tempTotalValueTemperature = (int) valueAfterPointTemperature % 10;
 80023e4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80023e8:	f7fe fbb6 	bl	8000b58 <__aeabi_d2iz>
 80023ec:	4602      	mov	r2, r0
 80023ee:	4b15      	ldr	r3, [pc, #84]	; (8002444 <destoryCelcius+0xe0>)
 80023f0:	fb83 1302 	smull	r1, r3, r3, r2
 80023f4:	1099      	asrs	r1, r3, #2
 80023f6:	17d3      	asrs	r3, r2, #31
 80023f8:	1ac9      	subs	r1, r1, r3
 80023fa:	460b      	mov	r3, r1
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	440b      	add	r3, r1
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	617b      	str	r3, [r7, #20]
	
	
	/*
	 * ----------------------------------------------> ROUNDING
	 */
	if (tempTotalValueTemperature < 5) {
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	2b04      	cmp	r3, #4
 800240a:	dc02      	bgt.n	8002412 <destoryCelcius+0xae>
		temp.numberAfterPoint = 0;
 800240c:	2300      	movs	r3, #0
 800240e:	70bb      	strb	r3, [r7, #2]
 8002410:	e001      	b.n	8002416 <destoryCelcius+0xb2>
	} else {
		temp.numberAfterPoint = 5;
 8002412:	2305      	movs	r3, #5
 8002414:	70bb      	strb	r3, [r7, #2]
	}

	return temp;
 8002416:	1d3b      	adds	r3, r7, #4
 8002418:	463a      	mov	r2, r7
 800241a:	6812      	ldr	r2, [r2, #0]
 800241c:	4611      	mov	r1, r2
 800241e:	8019      	strh	r1, [r3, #0]
 8002420:	3302      	adds	r3, #2
 8002422:	0c12      	lsrs	r2, r2, #16
 8002424:	701a      	strb	r2, [r3, #0]
 8002426:	2300      	movs	r3, #0
 8002428:	793a      	ldrb	r2, [r7, #4]
 800242a:	f362 0307 	bfi	r3, r2, #0, #8
 800242e:	797a      	ldrb	r2, [r7, #5]
 8002430:	f362 230f 	bfi	r3, r2, #8, #8
 8002434:	79ba      	ldrb	r2, [r7, #6]
 8002436:	f362 4317 	bfi	r3, r2, #16, #8
}
 800243a:	4618      	mov	r0, r3
 800243c:	3720      	adds	r7, #32
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	66666667 	.word	0x66666667
 8002448:	40240000 	.word	0x40240000

0800244c <firstSegment>:

// SEGMETNS
void firstSegment(uint8_t number[]) {
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
	uint8_t x = 0;
 8002454:	2300      	movs	r3, #0
 8002456:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i <= 13; i++) {
 8002458:	2300      	movs	r3, #0
 800245a:	60bb      	str	r3, [r7, #8]
 800245c:	e01d      	b.n	800249a <firstSegment+0x4e>

		if (number[x] == i) {
 800245e:	7bfb      	ldrb	r3, [r7, #15]
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	4413      	add	r3, r2
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	461a      	mov	r2, r3
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	4293      	cmp	r3, r2
 800246c:	d10c      	bne.n	8002488 <firstSegment+0x3c>
			ws2811_set_color(i, actualColor.red, actualColor.green,
 800246e:	68b8      	ldr	r0, [r7, #8]
 8002470:	4b0e      	ldr	r3, [pc, #56]	; (80024ac <firstSegment+0x60>)
 8002472:	7819      	ldrb	r1, [r3, #0]
 8002474:	4b0d      	ldr	r3, [pc, #52]	; (80024ac <firstSegment+0x60>)
 8002476:	789a      	ldrb	r2, [r3, #2]
 8002478:	4b0c      	ldr	r3, [pc, #48]	; (80024ac <firstSegment+0x60>)
 800247a:	785b      	ldrb	r3, [r3, #1]
 800247c:	f001 f90e 	bl	800369c <ws2811_set_color>
					actualColor.blue);
			x++;
 8002480:	7bfb      	ldrb	r3, [r7, #15]
 8002482:	3301      	adds	r3, #1
 8002484:	73fb      	strb	r3, [r7, #15]
 8002486:	e005      	b.n	8002494 <firstSegment+0x48>
		} else {
			ws2811_set_color(i, 0, 0, 0);
 8002488:	68b8      	ldr	r0, [r7, #8]
 800248a:	2300      	movs	r3, #0
 800248c:	2200      	movs	r2, #0
 800248e:	2100      	movs	r1, #0
 8002490:	f001 f904 	bl	800369c <ws2811_set_color>
	for (int i = 0; i <= 13; i++) {
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	3301      	adds	r3, #1
 8002498:	60bb      	str	r3, [r7, #8]
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	2b0d      	cmp	r3, #13
 800249e:	ddde      	ble.n	800245e <firstSegment+0x12>
		}
	}
}
 80024a0:	bf00      	nop
 80024a2:	bf00      	nop
 80024a4:	3710      	adds	r7, #16
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	20000920 	.word	0x20000920

080024b0 <secondSegment>:

void secondSegment(uint8_t number[]) {
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
	uint8_t x = 0;
 80024b8:	2300      	movs	r3, #0
 80024ba:	73fb      	strb	r3, [r7, #15]
	for (int i = 14; i <= 27; i++) {
 80024bc:	230e      	movs	r3, #14
 80024be:	60bb      	str	r3, [r7, #8]
 80024c0:	e01e      	b.n	8002500 <secondSegment+0x50>

		if (number[x] == i - 14) {
 80024c2:	7bfb      	ldrb	r3, [r7, #15]
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	4413      	add	r3, r2
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	461a      	mov	r2, r3
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	3b0e      	subs	r3, #14
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d10c      	bne.n	80024ee <secondSegment+0x3e>
			ws2811_set_color(i, actualColor.red, actualColor.green,
 80024d4:	68b8      	ldr	r0, [r7, #8]
 80024d6:	4b0e      	ldr	r3, [pc, #56]	; (8002510 <secondSegment+0x60>)
 80024d8:	7819      	ldrb	r1, [r3, #0]
 80024da:	4b0d      	ldr	r3, [pc, #52]	; (8002510 <secondSegment+0x60>)
 80024dc:	789a      	ldrb	r2, [r3, #2]
 80024de:	4b0c      	ldr	r3, [pc, #48]	; (8002510 <secondSegment+0x60>)
 80024e0:	785b      	ldrb	r3, [r3, #1]
 80024e2:	f001 f8db 	bl	800369c <ws2811_set_color>
					actualColor.blue);
			x++;
 80024e6:	7bfb      	ldrb	r3, [r7, #15]
 80024e8:	3301      	adds	r3, #1
 80024ea:	73fb      	strb	r3, [r7, #15]
 80024ec:	e005      	b.n	80024fa <secondSegment+0x4a>
		} else {
			ws2811_set_color(i, 0, 0, 0);
 80024ee:	68b8      	ldr	r0, [r7, #8]
 80024f0:	2300      	movs	r3, #0
 80024f2:	2200      	movs	r2, #0
 80024f4:	2100      	movs	r1, #0
 80024f6:	f001 f8d1 	bl	800369c <ws2811_set_color>
	for (int i = 14; i <= 27; i++) {
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	3301      	adds	r3, #1
 80024fe:	60bb      	str	r3, [r7, #8]
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	2b1b      	cmp	r3, #27
 8002504:	dddd      	ble.n	80024c2 <secondSegment+0x12>
		}
	}
}
 8002506:	bf00      	nop
 8002508:	bf00      	nop
 800250a:	3710      	adds	r7, #16
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	20000920 	.word	0x20000920

08002514 <thirdSegment>:

void thirdSegment(uint8_t number[]) {
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
	uint8_t x = 0;
 800251c:	2300      	movs	r3, #0
 800251e:	73fb      	strb	r3, [r7, #15]
	for (int i = 30; i <= 43; i++) {
 8002520:	231e      	movs	r3, #30
 8002522:	60bb      	str	r3, [r7, #8]
 8002524:	e01e      	b.n	8002564 <thirdSegment+0x50>

		if (number[x] == i - 30) {
 8002526:	7bfb      	ldrb	r3, [r7, #15]
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	4413      	add	r3, r2
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	461a      	mov	r2, r3
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	3b1e      	subs	r3, #30
 8002534:	429a      	cmp	r2, r3
 8002536:	d10c      	bne.n	8002552 <thirdSegment+0x3e>
			ws2811_set_color(i, actualColor.red, actualColor.green,
 8002538:	68b8      	ldr	r0, [r7, #8]
 800253a:	4b0e      	ldr	r3, [pc, #56]	; (8002574 <thirdSegment+0x60>)
 800253c:	7819      	ldrb	r1, [r3, #0]
 800253e:	4b0d      	ldr	r3, [pc, #52]	; (8002574 <thirdSegment+0x60>)
 8002540:	789a      	ldrb	r2, [r3, #2]
 8002542:	4b0c      	ldr	r3, [pc, #48]	; (8002574 <thirdSegment+0x60>)
 8002544:	785b      	ldrb	r3, [r3, #1]
 8002546:	f001 f8a9 	bl	800369c <ws2811_set_color>
					actualColor.blue);
			x++;
 800254a:	7bfb      	ldrb	r3, [r7, #15]
 800254c:	3301      	adds	r3, #1
 800254e:	73fb      	strb	r3, [r7, #15]
 8002550:	e005      	b.n	800255e <thirdSegment+0x4a>
		} else {
			ws2811_set_color(i, 0, 0, 0);
 8002552:	68b8      	ldr	r0, [r7, #8]
 8002554:	2300      	movs	r3, #0
 8002556:	2200      	movs	r2, #0
 8002558:	2100      	movs	r1, #0
 800255a:	f001 f89f 	bl	800369c <ws2811_set_color>
	for (int i = 30; i <= 43; i++) {
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	3301      	adds	r3, #1
 8002562:	60bb      	str	r3, [r7, #8]
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	2b2b      	cmp	r3, #43	; 0x2b
 8002568:	dddd      	ble.n	8002526 <thirdSegment+0x12>
		}
	}
}
 800256a:	bf00      	nop
 800256c:	bf00      	nop
 800256e:	3710      	adds	r7, #16
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	20000920 	.word	0x20000920

08002578 <fourthSegment>:

void fourthSegment(uint8_t number[]) {
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
	uint8_t x = 0;
 8002580:	2300      	movs	r3, #0
 8002582:	73fb      	strb	r3, [r7, #15]
	for (int i = 44; i <= 57; i++) {
 8002584:	232c      	movs	r3, #44	; 0x2c
 8002586:	60bb      	str	r3, [r7, #8]
 8002588:	e01e      	b.n	80025c8 <fourthSegment+0x50>

		if (number[x] == i - 44) {
 800258a:	7bfb      	ldrb	r3, [r7, #15]
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	4413      	add	r3, r2
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	461a      	mov	r2, r3
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	3b2c      	subs	r3, #44	; 0x2c
 8002598:	429a      	cmp	r2, r3
 800259a:	d10c      	bne.n	80025b6 <fourthSegment+0x3e>
			ws2811_set_color(i, actualColor.red, actualColor.green,
 800259c:	68b8      	ldr	r0, [r7, #8]
 800259e:	4b0e      	ldr	r3, [pc, #56]	; (80025d8 <fourthSegment+0x60>)
 80025a0:	7819      	ldrb	r1, [r3, #0]
 80025a2:	4b0d      	ldr	r3, [pc, #52]	; (80025d8 <fourthSegment+0x60>)
 80025a4:	789a      	ldrb	r2, [r3, #2]
 80025a6:	4b0c      	ldr	r3, [pc, #48]	; (80025d8 <fourthSegment+0x60>)
 80025a8:	785b      	ldrb	r3, [r3, #1]
 80025aa:	f001 f877 	bl	800369c <ws2811_set_color>
					actualColor.blue);
			x++;
 80025ae:	7bfb      	ldrb	r3, [r7, #15]
 80025b0:	3301      	adds	r3, #1
 80025b2:	73fb      	strb	r3, [r7, #15]
 80025b4:	e005      	b.n	80025c2 <fourthSegment+0x4a>
		} else {
			ws2811_set_color(i, 0, 0, 0);
 80025b6:	68b8      	ldr	r0, [r7, #8]
 80025b8:	2300      	movs	r3, #0
 80025ba:	2200      	movs	r2, #0
 80025bc:	2100      	movs	r1, #0
 80025be:	f001 f86d 	bl	800369c <ws2811_set_color>
	for (int i = 44; i <= 57; i++) {
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	3301      	adds	r3, #1
 80025c6:	60bb      	str	r3, [r7, #8]
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	2b39      	cmp	r3, #57	; 0x39
 80025cc:	dddd      	ble.n	800258a <fourthSegment+0x12>
		}
	}
}
 80025ce:	bf00      	nop
 80025d0:	bf00      	nop
 80025d2:	3710      	adds	r7, #16
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	20000920 	.word	0x20000920

080025dc <dwukropekTurnOn>:

void dwukropekTurnOn() {
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0

	ws2811_set_color(28, actualColor.red, actualColor.green, actualColor.blue);
 80025e0:	4b0c      	ldr	r3, [pc, #48]	; (8002614 <dwukropekTurnOn+0x38>)
 80025e2:	7819      	ldrb	r1, [r3, #0]
 80025e4:	4b0b      	ldr	r3, [pc, #44]	; (8002614 <dwukropekTurnOn+0x38>)
 80025e6:	789a      	ldrb	r2, [r3, #2]
 80025e8:	4b0a      	ldr	r3, [pc, #40]	; (8002614 <dwukropekTurnOn+0x38>)
 80025ea:	785b      	ldrb	r3, [r3, #1]
 80025ec:	201c      	movs	r0, #28
 80025ee:	f001 f855 	bl	800369c <ws2811_set_color>
	ws2811_set_color(29, actualColor.red, actualColor.green, actualColor.blue);
 80025f2:	4b08      	ldr	r3, [pc, #32]	; (8002614 <dwukropekTurnOn+0x38>)
 80025f4:	7819      	ldrb	r1, [r3, #0]
 80025f6:	4b07      	ldr	r3, [pc, #28]	; (8002614 <dwukropekTurnOn+0x38>)
 80025f8:	789a      	ldrb	r2, [r3, #2]
 80025fa:	4b06      	ldr	r3, [pc, #24]	; (8002614 <dwukropekTurnOn+0x38>)
 80025fc:	785b      	ldrb	r3, [r3, #1]
 80025fe:	201d      	movs	r0, #29
 8002600:	f001 f84c 	bl	800369c <ws2811_set_color>
	ws2811_update();
 8002604:	f001 f82a 	bl	800365c <ws2811_update>
	doubleDot = 0;
 8002608:	4b03      	ldr	r3, [pc, #12]	; (8002618 <dwukropekTurnOn+0x3c>)
 800260a:	2200      	movs	r2, #0
 800260c:	601a      	str	r2, [r3, #0]

}
 800260e:	bf00      	nop
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	20000920 	.word	0x20000920
 8002618:	200002a0 	.word	0x200002a0

0800261c <dwukropekTurnOff>:

void dwukropekTurnOff() {
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0

	ws2811_set_color(28, 0, 0, 0);
 8002620:	2300      	movs	r3, #0
 8002622:	2200      	movs	r2, #0
 8002624:	2100      	movs	r1, #0
 8002626:	201c      	movs	r0, #28
 8002628:	f001 f838 	bl	800369c <ws2811_set_color>
	ws2811_set_color(29, 0, 0, 0);
 800262c:	2300      	movs	r3, #0
 800262e:	2200      	movs	r2, #0
 8002630:	2100      	movs	r1, #0
 8002632:	201d      	movs	r0, #29
 8002634:	f001 f832 	bl	800369c <ws2811_set_color>
	ws2811_update();
 8002638:	f001 f810 	bl	800365c <ws2811_update>
	doubleDot = 1;
 800263c:	4b02      	ldr	r3, [pc, #8]	; (8002648 <dwukropekTurnOff+0x2c>)
 800263e:	2201      	movs	r2, #1
 8002640:	601a      	str	r2, [r3, #0]
}
 8002642:	bf00      	nop
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	200002a0 	.word	0x200002a0

0800264c <dotOn>:

void dotOn() {
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
	ws2811_set_color(28, 0, 0, 0);
 8002650:	2300      	movs	r3, #0
 8002652:	2200      	movs	r2, #0
 8002654:	2100      	movs	r1, #0
 8002656:	201c      	movs	r0, #28
 8002658:	f001 f820 	bl	800369c <ws2811_set_color>
	ws2811_set_color(29, actualColor.red, actualColor.green, actualColor.blue);
 800265c:	4b06      	ldr	r3, [pc, #24]	; (8002678 <dotOn+0x2c>)
 800265e:	7819      	ldrb	r1, [r3, #0]
 8002660:	4b05      	ldr	r3, [pc, #20]	; (8002678 <dotOn+0x2c>)
 8002662:	789a      	ldrb	r2, [r3, #2]
 8002664:	4b04      	ldr	r3, [pc, #16]	; (8002678 <dotOn+0x2c>)
 8002666:	785b      	ldrb	r3, [r3, #1]
 8002668:	201d      	movs	r0, #29
 800266a:	f001 f817 	bl	800369c <ws2811_set_color>
	ws2811_update();
 800266e:	f000 fff5 	bl	800365c <ws2811_update>
}
 8002672:	bf00      	nop
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	20000920 	.word	0x20000920

0800267c <dotOff>:

void dotOff(){
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
	ws2811_set_color(28, 0, 0, 0);
 8002680:	2300      	movs	r3, #0
 8002682:	2200      	movs	r2, #0
 8002684:	2100      	movs	r1, #0
 8002686:	201c      	movs	r0, #28
 8002688:	f001 f808 	bl	800369c <ws2811_set_color>
	ws2811_set_color(29, 0, 0, 0);
 800268c:	2300      	movs	r3, #0
 800268e:	2200      	movs	r2, #0
 8002690:	2100      	movs	r1, #0
 8002692:	201d      	movs	r0, #29
 8002694:	f001 f802 	bl	800369c <ws2811_set_color>
	ws2811_update();
 8002698:	f000 ffe0 	bl	800365c <ws2811_update>
}
 800269c:	bf00      	nop
 800269e:	bd80      	pop	{r7, pc}

080026a0 <celsiusMark>:

void celsiusMark() {
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
	uint32_t i;
	for (i = 50; i <= 55; i++) {
 80026a6:	2332      	movs	r3, #50	; 0x32
 80026a8:	607b      	str	r3, [r7, #4]
 80026aa:	e00b      	b.n	80026c4 <celsiusMark+0x24>
		ws2811_set_color(i, actualColor.red, actualColor.green,actualColor.blue);
 80026ac:	4b0a      	ldr	r3, [pc, #40]	; (80026d8 <celsiusMark+0x38>)
 80026ae:	7819      	ldrb	r1, [r3, #0]
 80026b0:	4b09      	ldr	r3, [pc, #36]	; (80026d8 <celsiusMark+0x38>)
 80026b2:	789a      	ldrb	r2, [r3, #2]
 80026b4:	4b08      	ldr	r3, [pc, #32]	; (80026d8 <celsiusMark+0x38>)
 80026b6:	785b      	ldrb	r3, [r3, #1]
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f000 ffef 	bl	800369c <ws2811_set_color>
	for (i = 50; i <= 55; i++) {
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	3301      	adds	r3, #1
 80026c2:	607b      	str	r3, [r7, #4]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2b37      	cmp	r3, #55	; 0x37
 80026c8:	d9f0      	bls.n	80026ac <celsiusMark+0xc>
	}
	ws2811_update();
 80026ca:	f000 ffc7 	bl	800365c <ws2811_update>
}
 80026ce:	bf00      	nop
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	20000920 	.word	0x20000920

080026dc <dwukropekStart>:

void dwukropekStart(void) {
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
	if (doubleDot == 1) {
 80026e0:	4b05      	ldr	r3, [pc, #20]	; (80026f8 <dwukropekStart+0x1c>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d102      	bne.n	80026ee <dwukropekStart+0x12>
		dwukropekTurnOn();
 80026e8:	f7ff ff78 	bl	80025dc <dwukropekTurnOn>
	} else {
		dwukropekTurnOff();
	}
}
 80026ec:	e001      	b.n	80026f2 <dwukropekStart+0x16>
		dwukropekTurnOff();
 80026ee:	f7ff ff95 	bl	800261c <dwukropekTurnOff>
}
 80026f2:	bf00      	nop
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	200002a0 	.word	0x200002a0

080026fc <putMinutes>:


// SETTERS
void putMinutes(uint8_t minutes) {
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	4603      	mov	r3, r0
 8002704:	71fb      	strb	r3, [r7, #7]
	if (minutes <= 9) {
 8002706:	79fb      	ldrb	r3, [r7, #7]
 8002708:	2b09      	cmp	r3, #9
 800270a:	d812      	bhi.n	8002732 <putMinutes+0x36>
		thirdSegment(zero);
 800270c:	4816      	ldr	r0, [pc, #88]	; (8002768 <putMinutes+0x6c>)
 800270e:	f7ff ff01 	bl	8002514 <thirdSegment>
		if (minutes == 0) {
 8002712:	79fb      	ldrb	r3, [r7, #7]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d103      	bne.n	8002720 <putMinutes+0x24>
			fourthSegment(zero);
 8002718:	4813      	ldr	r0, [pc, #76]	; (8002768 <putMinutes+0x6c>)
 800271a:	f7ff ff2d 	bl	8002578 <fourthSegment>
	} else {
		struct manyNumber temp = destroy(minutes);
		thirdSegment(numberToMatrix(temp.firstNumber));
		fourthSegment(numberToMatrix(temp.secondNumber));
	}
}
 800271e:	e01e      	b.n	800275e <putMinutes+0x62>
			fourthSegment(numberToMatrix(minutes));
 8002720:	79fb      	ldrb	r3, [r7, #7]
 8002722:	4618      	mov	r0, r3
 8002724:	f7ff fda6 	bl	8002274 <numberToMatrix>
 8002728:	4603      	mov	r3, r0
 800272a:	4618      	mov	r0, r3
 800272c:	f7ff ff24 	bl	8002578 <fourthSegment>
}
 8002730:	e015      	b.n	800275e <putMinutes+0x62>
		struct manyNumber temp = destroy(minutes);
 8002732:	79fb      	ldrb	r3, [r7, #7]
 8002734:	4618      	mov	r0, r3
 8002736:	f7ff fdeb 	bl	8002310 <destroy>
 800273a:	4603      	mov	r3, r0
 800273c:	81bb      	strh	r3, [r7, #12]
		thirdSegment(numberToMatrix(temp.firstNumber));
 800273e:	7b3b      	ldrb	r3, [r7, #12]
 8002740:	4618      	mov	r0, r3
 8002742:	f7ff fd97 	bl	8002274 <numberToMatrix>
 8002746:	4603      	mov	r3, r0
 8002748:	4618      	mov	r0, r3
 800274a:	f7ff fee3 	bl	8002514 <thirdSegment>
		fourthSegment(numberToMatrix(temp.secondNumber));
 800274e:	7b7b      	ldrb	r3, [r7, #13]
 8002750:	4618      	mov	r0, r3
 8002752:	f7ff fd8f 	bl	8002274 <numberToMatrix>
 8002756:	4603      	mov	r3, r0
 8002758:	4618      	mov	r0, r3
 800275a:	f7ff ff0d 	bl	8002578 <fourthSegment>
}
 800275e:	bf00      	nop
 8002760:	3710      	adds	r7, #16
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	20000004 	.word	0x20000004

0800276c <putHours>:

void putHours(uint8_t hours, int isMenuOn) {
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	4603      	mov	r3, r0
 8002774:	6039      	str	r1, [r7, #0]
 8002776:	71fb      	strb	r3, [r7, #7]
	if (hours <= 9) {
 8002778:	79fb      	ldrb	r3, [r7, #7]
 800277a:	2b09      	cmp	r3, #9
 800277c:	d81c      	bhi.n	80027b8 <putHours+0x4c>

		if (isMenuOn == MENU_ON) {
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	2b01      	cmp	r3, #1
 8002782:	d103      	bne.n	800278c <putHours+0x20>
			firstSegment(zero);
 8002784:	4819      	ldr	r0, [pc, #100]	; (80027ec <putHours+0x80>)
 8002786:	f7ff fe61 	bl	800244c <firstSegment>
 800278a:	e005      	b.n	8002798 <putHours+0x2c>
		} else if (isMenuOn == MENU_OFF) {
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d102      	bne.n	8002798 <putHours+0x2c>
			firstSegment(noDigit);
 8002792:	4817      	ldr	r0, [pc, #92]	; (80027f0 <putHours+0x84>)
 8002794:	f7ff fe5a 	bl	800244c <firstSegment>
		}

		if (hours == 0) {
 8002798:	79fb      	ldrb	r3, [r7, #7]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d103      	bne.n	80027a6 <putHours+0x3a>
			secondSegment(zero);
 800279e:	4813      	ldr	r0, [pc, #76]	; (80027ec <putHours+0x80>)
 80027a0:	f7ff fe86 	bl	80024b0 <secondSegment>
	} else {
		struct manyNumber temp = destroy(hours);
		firstSegment(numberToMatrix(temp.firstNumber));
		secondSegment(numberToMatrix(temp.secondNumber));
	}
}
 80027a4:	e01e      	b.n	80027e4 <putHours+0x78>
			secondSegment(numberToMatrix(hours));
 80027a6:	79fb      	ldrb	r3, [r7, #7]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7ff fd63 	bl	8002274 <numberToMatrix>
 80027ae:	4603      	mov	r3, r0
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7ff fe7d 	bl	80024b0 <secondSegment>
}
 80027b6:	e015      	b.n	80027e4 <putHours+0x78>
		struct manyNumber temp = destroy(hours);
 80027b8:	79fb      	ldrb	r3, [r7, #7]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7ff fda8 	bl	8002310 <destroy>
 80027c0:	4603      	mov	r3, r0
 80027c2:	81bb      	strh	r3, [r7, #12]
		firstSegment(numberToMatrix(temp.firstNumber));
 80027c4:	7b3b      	ldrb	r3, [r7, #12]
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7ff fd54 	bl	8002274 <numberToMatrix>
 80027cc:	4603      	mov	r3, r0
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7ff fe3c 	bl	800244c <firstSegment>
		secondSegment(numberToMatrix(temp.secondNumber));
 80027d4:	7b7b      	ldrb	r3, [r7, #13]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7ff fd4c 	bl	8002274 <numberToMatrix>
 80027dc:	4603      	mov	r3, r0
 80027de:	4618      	mov	r0, r3
 80027e0:	f7ff fe66 	bl	80024b0 <secondSegment>
}
 80027e4:	bf00      	nop
 80027e6:	3710      	adds	r7, #16
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	20000004 	.word	0x20000004
 80027f0:	20000000 	.word	0x20000000

080027f4 <putMonth>:

void putMonth(uint8_t month) {
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	4603      	mov	r3, r0
 80027fc:	71fb      	strb	r3, [r7, #7]
	putMinutes(month);
 80027fe:	79fb      	ldrb	r3, [r7, #7]
 8002800:	4618      	mov	r0, r3
 8002802:	f7ff ff7b 	bl	80026fc <putMinutes>
}
 8002806:	bf00      	nop
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <putDay>:

void putDay(uint8_t day) {
 800280e:	b580      	push	{r7, lr}
 8002810:	b082      	sub	sp, #8
 8002812:	af00      	add	r7, sp, #0
 8002814:	4603      	mov	r3, r0
 8002816:	71fb      	strb	r3, [r7, #7]
	putHours(day, MENU_ON);
 8002818:	79fb      	ldrb	r3, [r7, #7]
 800281a:	2101      	movs	r1, #1
 800281c:	4618      	mov	r0, r3
 800281e:	f7ff ffa5 	bl	800276c <putHours>
}
 8002822:	bf00      	nop
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
	...

0800282c <setMinutes>:

void setMinutes(uint8_t minute) {
 800282c:	b580      	push	{r7, lr}
 800282e:	b088      	sub	sp, #32
 8002830:	af00      	add	r7, sp, #0
 8002832:	4603      	mov	r3, r0
 8002834:	71fb      	strb	r3, [r7, #7]
	RTC_TimeTypeDef time = { 0 };
 8002836:	f107 030c 	add.w	r3, r7, #12
 800283a:	2200      	movs	r2, #0
 800283c:	601a      	str	r2, [r3, #0]
 800283e:	605a      	str	r2, [r3, #4]
 8002840:	609a      	str	r2, [r3, #8]
 8002842:	60da      	str	r2, [r3, #12]
 8002844:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef date = { 0 };
 8002846:	2300      	movs	r3, #0
 8002848:	60bb      	str	r3, [r7, #8]

	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 800284a:	f107 030c 	add.w	r3, r7, #12
 800284e:	2200      	movs	r2, #0
 8002850:	4619      	mov	r1, r3
 8002852:	480c      	ldr	r0, [pc, #48]	; (8002884 <setMinutes+0x58>)
 8002854:	f004 fc7c 	bl	8007150 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8002858:	f107 0308 	add.w	r3, r7, #8
 800285c:	2200      	movs	r2, #0
 800285e:	4619      	mov	r1, r3
 8002860:	4808      	ldr	r0, [pc, #32]	; (8002884 <setMinutes+0x58>)
 8002862:	f004 fd58 	bl	8007316 <HAL_RTC_GetDate>

	time.Minutes = minute;
 8002866:	79fb      	ldrb	r3, [r7, #7]
 8002868:	737b      	strb	r3, [r7, #13]
	time.Seconds = 0;
 800286a:	2300      	movs	r3, #0
 800286c:	73bb      	strb	r3, [r7, #14]

	HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN);
 800286e:	f107 030c 	add.w	r3, r7, #12
 8002872:	2200      	movs	r2, #0
 8002874:	4619      	mov	r1, r3
 8002876:	4803      	ldr	r0, [pc, #12]	; (8002884 <setMinutes+0x58>)
 8002878:	f004 fbcd 	bl	8007016 <HAL_RTC_SetTime>
}
 800287c:	bf00      	nop
 800287e:	3720      	adds	r7, #32
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	200008fc 	.word	0x200008fc

08002888 <setHours>:

void setHours(uint8_t hours) {
 8002888:	b580      	push	{r7, lr}
 800288a:	b088      	sub	sp, #32
 800288c:	af00      	add	r7, sp, #0
 800288e:	4603      	mov	r3, r0
 8002890:	71fb      	strb	r3, [r7, #7]
	RTC_TimeTypeDef time = { 0 };
 8002892:	f107 030c 	add.w	r3, r7, #12
 8002896:	2200      	movs	r2, #0
 8002898:	601a      	str	r2, [r3, #0]
 800289a:	605a      	str	r2, [r3, #4]
 800289c:	609a      	str	r2, [r3, #8]
 800289e:	60da      	str	r2, [r3, #12]
 80028a0:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef date = { 0 };
 80028a2:	2300      	movs	r3, #0
 80028a4:	60bb      	str	r3, [r7, #8]

	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 80028a6:	f107 030c 	add.w	r3, r7, #12
 80028aa:	2200      	movs	r2, #0
 80028ac:	4619      	mov	r1, r3
 80028ae:	480c      	ldr	r0, [pc, #48]	; (80028e0 <setHours+0x58>)
 80028b0:	f004 fc4e 	bl	8007150 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 80028b4:	f107 0308 	add.w	r3, r7, #8
 80028b8:	2200      	movs	r2, #0
 80028ba:	4619      	mov	r1, r3
 80028bc:	4808      	ldr	r0, [pc, #32]	; (80028e0 <setHours+0x58>)
 80028be:	f004 fd2a 	bl	8007316 <HAL_RTC_GetDate>

	time.Hours = hours;
 80028c2:	79fb      	ldrb	r3, [r7, #7]
 80028c4:	733b      	strb	r3, [r7, #12]
	time.Seconds = 0;
 80028c6:	2300      	movs	r3, #0
 80028c8:	73bb      	strb	r3, [r7, #14]

	HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN);
 80028ca:	f107 030c 	add.w	r3, r7, #12
 80028ce:	2200      	movs	r2, #0
 80028d0:	4619      	mov	r1, r3
 80028d2:	4803      	ldr	r0, [pc, #12]	; (80028e0 <setHours+0x58>)
 80028d4:	f004 fb9f 	bl	8007016 <HAL_RTC_SetTime>
}
 80028d8:	bf00      	nop
 80028da:	3720      	adds	r7, #32
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	200008fc 	.word	0x200008fc

080028e4 <setMonth>:

// DATA

void setMonth(uint8_t month) {
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b088      	sub	sp, #32
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	4603      	mov	r3, r0
 80028ec:	71fb      	strb	r3, [r7, #7]
	RTC_TimeTypeDef time = { 0 };
 80028ee:	f107 030c 	add.w	r3, r7, #12
 80028f2:	2200      	movs	r2, #0
 80028f4:	601a      	str	r2, [r3, #0]
 80028f6:	605a      	str	r2, [r3, #4]
 80028f8:	609a      	str	r2, [r3, #8]
 80028fa:	60da      	str	r2, [r3, #12]
 80028fc:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef date = { 0 };
 80028fe:	2300      	movs	r3, #0
 8002900:	60bb      	str	r3, [r7, #8]

	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8002902:	f107 030c 	add.w	r3, r7, #12
 8002906:	2200      	movs	r2, #0
 8002908:	4619      	mov	r1, r3
 800290a:	4811      	ldr	r0, [pc, #68]	; (8002950 <setMonth+0x6c>)
 800290c:	f004 fc20 	bl	8007150 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8002910:	f107 0308 	add.w	r3, r7, #8
 8002914:	2200      	movs	r2, #0
 8002916:	4619      	mov	r1, r3
 8002918:	480d      	ldr	r0, [pc, #52]	; (8002950 <setMonth+0x6c>)
 800291a:	f004 fcfc 	bl	8007316 <HAL_RTC_GetDate>

	date.Year=22;
 800291e:	2316      	movs	r3, #22
 8002920:	72fb      	strb	r3, [r7, #11]
	date.Month=month;
 8002922:	79fb      	ldrb	r3, [r7, #7]
 8002924:	727b      	strb	r3, [r7, #9]
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR5, ((date.Month << 8) | (date.Year)));
 8002926:	7a7b      	ldrb	r3, [r7, #9]
 8002928:	021b      	lsls	r3, r3, #8
 800292a:	7afa      	ldrb	r2, [r7, #11]
 800292c:	4313      	orrs	r3, r2
 800292e:	461a      	mov	r2, r3
 8002930:	2105      	movs	r1, #5
 8002932:	4807      	ldr	r0, [pc, #28]	; (8002950 <setMonth+0x6c>)
 8002934:	f004 ff9a 	bl	800786c <HAL_RTCEx_BKUPWrite>


	HAL_RTC_SetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8002938:	f107 0308 	add.w	r3, r7, #8
 800293c:	2200      	movs	r2, #0
 800293e:	4619      	mov	r1, r3
 8002940:	4803      	ldr	r0, [pc, #12]	; (8002950 <setMonth+0x6c>)
 8002942:	f004 fc61 	bl	8007208 <HAL_RTC_SetDate>
}
 8002946:	bf00      	nop
 8002948:	3720      	adds	r7, #32
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	200008fc 	.word	0x200008fc

08002954 <setDay>:

void setDay(uint8_t day) {
 8002954:	b580      	push	{r7, lr}
 8002956:	b088      	sub	sp, #32
 8002958:	af00      	add	r7, sp, #0
 800295a:	4603      	mov	r3, r0
 800295c:	71fb      	strb	r3, [r7, #7]
	RTC_TimeTypeDef time = { 0 };
 800295e:	f107 030c 	add.w	r3, r7, #12
 8002962:	2200      	movs	r2, #0
 8002964:	601a      	str	r2, [r3, #0]
 8002966:	605a      	str	r2, [r3, #4]
 8002968:	609a      	str	r2, [r3, #8]
 800296a:	60da      	str	r2, [r3, #12]
 800296c:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef date = { 0 };
 800296e:	2300      	movs	r3, #0
 8002970:	60bb      	str	r3, [r7, #8]

	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8002972:	f107 030c 	add.w	r3, r7, #12
 8002976:	2200      	movs	r2, #0
 8002978:	4619      	mov	r1, r3
 800297a:	480e      	ldr	r0, [pc, #56]	; (80029b4 <setDay+0x60>)
 800297c:	f004 fbe8 	bl	8007150 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8002980:	f107 0308 	add.w	r3, r7, #8
 8002984:	2200      	movs	r2, #0
 8002986:	4619      	mov	r1, r3
 8002988:	480a      	ldr	r0, [pc, #40]	; (80029b4 <setDay+0x60>)
 800298a:	f004 fcc4 	bl	8007316 <HAL_RTC_GetDate>

	date.Date=day;
 800298e:	79fb      	ldrb	r3, [r7, #7]
 8002990:	72bb      	strb	r3, [r7, #10]

	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR6, date.Date);
 8002992:	7abb      	ldrb	r3, [r7, #10]
 8002994:	461a      	mov	r2, r3
 8002996:	2106      	movs	r1, #6
 8002998:	4806      	ldr	r0, [pc, #24]	; (80029b4 <setDay+0x60>)
 800299a:	f004 ff67 	bl	800786c <HAL_RTCEx_BKUPWrite>

	HAL_RTC_SetDate(&hrtc, &date, RTC_FORMAT_BIN);
 800299e:	f107 0308 	add.w	r3, r7, #8
 80029a2:	2200      	movs	r2, #0
 80029a4:	4619      	mov	r1, r3
 80029a6:	4803      	ldr	r0, [pc, #12]	; (80029b4 <setDay+0x60>)
 80029a8:	f004 fc2e 	bl	8007208 <HAL_RTC_SetDate>
}
 80029ac:	bf00      	nop
 80029ae:	3720      	adds	r7, #32
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	200008fc 	.word	0x200008fc

080029b8 <normalDisplayStart>:


/*
 *  DISPLAY MODES
 */
void normalDisplayStart() {
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b088      	sub	sp, #32
 80029bc:	af00      	add	r7, sp, #0

	RTC_TimeTypeDef time = { 0 };
 80029be:	f107 0308 	add.w	r3, r7, #8
 80029c2:	2200      	movs	r2, #0
 80029c4:	601a      	str	r2, [r3, #0]
 80029c6:	605a      	str	r2, [r3, #4]
 80029c8:	609a      	str	r2, [r3, #8]
 80029ca:	60da      	str	r2, [r3, #12]
 80029cc:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef date = { 0 };
 80029ce:	2300      	movs	r3, #0
 80029d0:	607b      	str	r3, [r7, #4]

	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 80029d2:	f107 0308 	add.w	r3, r7, #8
 80029d6:	2200      	movs	r2, #0
 80029d8:	4619      	mov	r1, r3
 80029da:	480e      	ldr	r0, [pc, #56]	; (8002a14 <normalDisplayStart+0x5c>)
 80029dc:	f004 fbb8 	bl	8007150 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 80029e0:	1d3b      	adds	r3, r7, #4
 80029e2:	2200      	movs	r2, #0
 80029e4:	4619      	mov	r1, r3
 80029e6:	480b      	ldr	r0, [pc, #44]	; (8002a14 <normalDisplayStart+0x5c>)
 80029e8:	f004 fc95 	bl	8007316 <HAL_RTC_GetDate>

	uint8_t hours = time.Hours;
 80029ec:	7a3b      	ldrb	r3, [r7, #8]
 80029ee:	77fb      	strb	r3, [r7, #31]
	uint8_t minutes = time.Minutes;
 80029f0:	7a7b      	ldrb	r3, [r7, #9]
 80029f2:	77bb      	strb	r3, [r7, #30]

	putHours(hours, MENU_OFF);
 80029f4:	7ffb      	ldrb	r3, [r7, #31]
 80029f6:	2100      	movs	r1, #0
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7ff feb7 	bl	800276c <putHours>
	putMinutes(minutes);
 80029fe:	7fbb      	ldrb	r3, [r7, #30]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7ff fe7b 	bl	80026fc <putMinutes>
	ws2811_update();
 8002a06:	f000 fe29 	bl	800365c <ws2811_update>
}
 8002a0a:	bf00      	nop
 8002a0c:	3720      	adds	r7, #32
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	200008fc 	.word	0x200008fc

08002a18 <menuDisplayStart>:

// menu mode, first segment is always active
void menuDisplayStart() {
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b088      	sub	sp, #32
 8002a1c:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef time = { 0 };
 8002a1e:	f107 0308 	add.w	r3, r7, #8
 8002a22:	2200      	movs	r2, #0
 8002a24:	601a      	str	r2, [r3, #0]
 8002a26:	605a      	str	r2, [r3, #4]
 8002a28:	609a      	str	r2, [r3, #8]
 8002a2a:	60da      	str	r2, [r3, #12]
 8002a2c:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef date = { 0 };
 8002a2e:	2300      	movs	r3, #0
 8002a30:	607b      	str	r3, [r7, #4]

	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8002a32:	f107 0308 	add.w	r3, r7, #8
 8002a36:	2200      	movs	r2, #0
 8002a38:	4619      	mov	r1, r3
 8002a3a:	480e      	ldr	r0, [pc, #56]	; (8002a74 <menuDisplayStart+0x5c>)
 8002a3c:	f004 fb88 	bl	8007150 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8002a40:	1d3b      	adds	r3, r7, #4
 8002a42:	2200      	movs	r2, #0
 8002a44:	4619      	mov	r1, r3
 8002a46:	480b      	ldr	r0, [pc, #44]	; (8002a74 <menuDisplayStart+0x5c>)
 8002a48:	f004 fc65 	bl	8007316 <HAL_RTC_GetDate>

	uint8_t hours = time.Hours;
 8002a4c:	7a3b      	ldrb	r3, [r7, #8]
 8002a4e:	77fb      	strb	r3, [r7, #31]
	uint8_t minutes = time.Minutes;
 8002a50:	7a7b      	ldrb	r3, [r7, #9]
 8002a52:	77bb      	strb	r3, [r7, #30]

	putHours(hours, MENU_ON);
 8002a54:	7ffb      	ldrb	r3, [r7, #31]
 8002a56:	2101      	movs	r1, #1
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7ff fe87 	bl	800276c <putHours>
	putMinutes(minutes);
 8002a5e:	7fbb      	ldrb	r3, [r7, #30]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7ff fe4b 	bl	80026fc <putMinutes>
	ws2811_update();
 8002a66:	f000 fdf9 	bl	800365c <ws2811_update>
}
 8002a6a:	bf00      	nop
 8002a6c:	3720      	adds	r7, #32
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	200008fc 	.word	0x200008fc

08002a78 <dateOnDisplay>:

void dateOnDisplay() {
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b088      	sub	sp, #32
 8002a7c:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef time = { 0 };
 8002a7e:	f107 0308 	add.w	r3, r7, #8
 8002a82:	2200      	movs	r2, #0
 8002a84:	601a      	str	r2, [r3, #0]
 8002a86:	605a      	str	r2, [r3, #4]
 8002a88:	609a      	str	r2, [r3, #8]
 8002a8a:	60da      	str	r2, [r3, #12]
 8002a8c:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef date = { 0 };
 8002a8e:	2300      	movs	r3, #0
 8002a90:	607b      	str	r3, [r7, #4]

	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8002a92:	f107 0308 	add.w	r3, r7, #8
 8002a96:	2200      	movs	r2, #0
 8002a98:	4619      	mov	r1, r3
 8002a9a:	480d      	ldr	r0, [pc, #52]	; (8002ad0 <dateOnDisplay+0x58>)
 8002a9c:	f004 fb58 	bl	8007150 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8002aa0:	1d3b      	adds	r3, r7, #4
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	480a      	ldr	r0, [pc, #40]	; (8002ad0 <dateOnDisplay+0x58>)
 8002aa8:	f004 fc35 	bl	8007316 <HAL_RTC_GetDate>

	uint8_t month = date.Month;
 8002aac:	797b      	ldrb	r3, [r7, #5]
 8002aae:	77fb      	strb	r3, [r7, #31]
	uint8_t day = date.Date;
 8002ab0:	79bb      	ldrb	r3, [r7, #6]
 8002ab2:	77bb      	strb	r3, [r7, #30]

	putMonth(month);
 8002ab4:	7ffb      	ldrb	r3, [r7, #31]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7ff fe9c 	bl	80027f4 <putMonth>
	putDay(day);
 8002abc:	7fbb      	ldrb	r3, [r7, #30]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7ff fea5 	bl	800280e <putDay>
	ws2811_update();
 8002ac4:	f000 fdca 	bl	800365c <ws2811_update>
}
 8002ac8:	bf00      	nop
 8002aca:	3720      	adds	r7, #32
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	200008fc 	.word	0x200008fc

08002ad4 <temperatureOnDisplay>:

void temperatureOnDisplay() {
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
	struct manyNumberCelcius result = destoryCelcius();
 8002ada:	f7ff fc43 	bl	8002364 <destoryCelcius>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	713a      	strb	r2, [r7, #4]
 8002ae4:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8002ae8:	717a      	strb	r2, [r7, #5]
 8002aea:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8002aee:	71bb      	strb	r3, [r7, #6]

	firstSegment(numberToMatrix(result.firstNumber));
 8002af0:	793b      	ldrb	r3, [r7, #4]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7ff fbbe 	bl	8002274 <numberToMatrix>
 8002af8:	4603      	mov	r3, r0
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7ff fca6 	bl	800244c <firstSegment>
	secondSegment(numberToMatrix(result.secondNumber));
 8002b00:	797b      	ldrb	r3, [r7, #5]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7ff fbb6 	bl	8002274 <numberToMatrix>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7ff fcd0 	bl	80024b0 <secondSegment>
	thirdSegment(numberToMatrix(result.numberAfterPoint));
 8002b10:	79bb      	ldrb	r3, [r7, #6]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7ff fbae 	bl	8002274 <numberToMatrix>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7ff fcfa 	bl	8002514 <thirdSegment>
	celsiusMark();
 8002b20:	f7ff fdbe 	bl	80026a0 <celsiusMark>
	ws2811_update();
 8002b24:	f000 fd9a 	bl	800365c <ws2811_update>
}
 8002b28:	bf00      	nop
 8002b2a:	3708      	adds	r7, #8
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <displayStop>:

void displayStop(void){
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
	ws2811_fullDisplayReset();
 8002b34:	f000 fd66 	bl	8003604 <ws2811_fullDisplayReset>
	ws2811_wait();
 8002b38:	f000 fda0 	bl	800367c <ws2811_wait>
}
 8002b3c:	bf00      	nop
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b46:	4b0f      	ldr	r3, [pc, #60]	; (8002b84 <HAL_MspInit+0x44>)
 8002b48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b4a:	4a0e      	ldr	r2, [pc, #56]	; (8002b84 <HAL_MspInit+0x44>)
 8002b4c:	f043 0301 	orr.w	r3, r3, #1
 8002b50:	6613      	str	r3, [r2, #96]	; 0x60
 8002b52:	4b0c      	ldr	r3, [pc, #48]	; (8002b84 <HAL_MspInit+0x44>)
 8002b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	607b      	str	r3, [r7, #4]
 8002b5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b5e:	4b09      	ldr	r3, [pc, #36]	; (8002b84 <HAL_MspInit+0x44>)
 8002b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b62:	4a08      	ldr	r2, [pc, #32]	; (8002b84 <HAL_MspInit+0x44>)
 8002b64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b68:	6593      	str	r3, [r2, #88]	; 0x58
 8002b6a:	4b06      	ldr	r3, [pc, #24]	; (8002b84 <HAL_MspInit+0x44>)
 8002b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b72:	603b      	str	r3, [r7, #0]
 8002b74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b76:	bf00      	nop
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	40021000 	.word	0x40021000

08002b88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b8c:	e7fe      	b.n	8002b8c <NMI_Handler+0x4>

08002b8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b92:	e7fe      	b.n	8002b92 <HardFault_Handler+0x4>

08002b94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b98:	e7fe      	b.n	8002b98 <MemManage_Handler+0x4>

08002b9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b9e:	e7fe      	b.n	8002b9e <BusFault_Handler+0x4>

08002ba0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ba4:	e7fe      	b.n	8002ba4 <UsageFault_Handler+0x4>

08002ba6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002baa:	bf00      	nop
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bb8:	bf00      	nop
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr

08002bc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bc6:	bf00      	nop
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bd4:	f000 fe16 	bl	8003804 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bd8:	bf00      	nop
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8002be0:	4802      	ldr	r0, [pc, #8]	; (8002bec <DMA1_Channel1_IRQHandler+0x10>)
 8002be2:	f002 fb6d 	bl	80052c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002be6:	bf00      	nop
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	20000a08 	.word	0x20000a08

08002bf0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002bf4:	4802      	ldr	r0, [pc, #8]	; (8002c00 <TIM2_IRQHandler+0x10>)
 8002bf6:	f005 fbc5 	bl	8008384 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002bfa:	bf00      	nop
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	200009bc 	.word	0x200009bc

08002c04 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002c08:	4802      	ldr	r0, [pc, #8]	; (8002c14 <RTC_Alarm_IRQHandler+0x10>)
 8002c0a:	f004 fd0d 	bl	8007628 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8002c0e:	bf00      	nop
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	200008fc 	.word	0x200008fc

08002c18 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002c1c:	4802      	ldr	r0, [pc, #8]	; (8002c28 <TIM6_DAC_IRQHandler+0x10>)
 8002c1e:	f005 fbb1 	bl	8008384 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002c22:	bf00      	nop
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	20000970 	.word	0x20000970

08002c2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
	return 1;
 8002c30:	2301      	movs	r3, #1
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <_kill>:

int _kill(int pid, int sig)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002c46:	f007 fcaf 	bl	800a5a8 <__errno>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2216      	movs	r2, #22
 8002c4e:	601a      	str	r2, [r3, #0]
	return -1;
 8002c50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3708      	adds	r7, #8
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <_exit>:

void _exit (int status)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002c64:	f04f 31ff 	mov.w	r1, #4294967295
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f7ff ffe7 	bl	8002c3c <_kill>
	while (1) {}		/* Make sure we hang here */
 8002c6e:	e7fe      	b.n	8002c6e <_exit+0x12>

08002c70 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b086      	sub	sp, #24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	617b      	str	r3, [r7, #20]
 8002c80:	e00a      	b.n	8002c98 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002c82:	f3af 8000 	nop.w
 8002c86:	4601      	mov	r1, r0
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	1c5a      	adds	r2, r3, #1
 8002c8c:	60ba      	str	r2, [r7, #8]
 8002c8e:	b2ca      	uxtb	r2, r1
 8002c90:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	3301      	adds	r3, #1
 8002c96:	617b      	str	r3, [r7, #20]
 8002c98:	697a      	ldr	r2, [r7, #20]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	dbf0      	blt.n	8002c82 <_read+0x12>
	}

return len;
 8002ca0:	687b      	ldr	r3, [r7, #4]
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3718      	adds	r7, #24
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b086      	sub	sp, #24
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	60f8      	str	r0, [r7, #12]
 8002cb2:	60b9      	str	r1, [r7, #8]
 8002cb4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	617b      	str	r3, [r7, #20]
 8002cba:	e009      	b.n	8002cd0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	1c5a      	adds	r2, r3, #1
 8002cc0:	60ba      	str	r2, [r7, #8]
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7fe fb35 	bl	8001334 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	3301      	adds	r3, #1
 8002cce:	617b      	str	r3, [r7, #20]
 8002cd0:	697a      	ldr	r2, [r7, #20]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	dbf1      	blt.n	8002cbc <_write+0x12>
	}
	return len;
 8002cd8:	687b      	ldr	r3, [r7, #4]
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3718      	adds	r7, #24
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <_close>:

int _close(int file)
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	b083      	sub	sp, #12
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
	return -1;
 8002cea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	370c      	adds	r7, #12
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr

08002cfa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002cfa:	b480      	push	{r7}
 8002cfc:	b083      	sub	sp, #12
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
 8002d02:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d0a:	605a      	str	r2, [r3, #4]
	return 0;
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr

08002d1a <_isatty>:

int _isatty(int file)
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	b083      	sub	sp, #12
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
	return 1;
 8002d22:	2301      	movs	r3, #1
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	607a      	str	r2, [r7, #4]
	return 0;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3714      	adds	r7, #20
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
	...

08002d4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b086      	sub	sp, #24
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d54:	4a14      	ldr	r2, [pc, #80]	; (8002da8 <_sbrk+0x5c>)
 8002d56:	4b15      	ldr	r3, [pc, #84]	; (8002dac <_sbrk+0x60>)
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d60:	4b13      	ldr	r3, [pc, #76]	; (8002db0 <_sbrk+0x64>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d102      	bne.n	8002d6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d68:	4b11      	ldr	r3, [pc, #68]	; (8002db0 <_sbrk+0x64>)
 8002d6a:	4a12      	ldr	r2, [pc, #72]	; (8002db4 <_sbrk+0x68>)
 8002d6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d6e:	4b10      	ldr	r3, [pc, #64]	; (8002db0 <_sbrk+0x64>)
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4413      	add	r3, r2
 8002d76:	693a      	ldr	r2, [r7, #16]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d207      	bcs.n	8002d8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d7c:	f007 fc14 	bl	800a5a8 <__errno>
 8002d80:	4603      	mov	r3, r0
 8002d82:	220c      	movs	r2, #12
 8002d84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d86:	f04f 33ff 	mov.w	r3, #4294967295
 8002d8a:	e009      	b.n	8002da0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d8c:	4b08      	ldr	r3, [pc, #32]	; (8002db0 <_sbrk+0x64>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d92:	4b07      	ldr	r3, [pc, #28]	; (8002db0 <_sbrk+0x64>)
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4413      	add	r3, r2
 8002d9a:	4a05      	ldr	r2, [pc, #20]	; (8002db0 <_sbrk+0x64>)
 8002d9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3718      	adds	r7, #24
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	20018000 	.word	0x20018000
 8002dac:	00000400 	.word	0x00000400
 8002db0:	200002a4 	.word	0x200002a4
 8002db4:	20000ae8 	.word	0x20000ae8

08002db8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002dbc:	4b15      	ldr	r3, [pc, #84]	; (8002e14 <SystemInit+0x5c>)
 8002dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dc2:	4a14      	ldr	r2, [pc, #80]	; (8002e14 <SystemInit+0x5c>)
 8002dc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002dc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002dcc:	4b12      	ldr	r3, [pc, #72]	; (8002e18 <SystemInit+0x60>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a11      	ldr	r2, [pc, #68]	; (8002e18 <SystemInit+0x60>)
 8002dd2:	f043 0301 	orr.w	r3, r3, #1
 8002dd6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002dd8:	4b0f      	ldr	r3, [pc, #60]	; (8002e18 <SystemInit+0x60>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002dde:	4b0e      	ldr	r3, [pc, #56]	; (8002e18 <SystemInit+0x60>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a0d      	ldr	r2, [pc, #52]	; (8002e18 <SystemInit+0x60>)
 8002de4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002de8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002dec:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002dee:	4b0a      	ldr	r3, [pc, #40]	; (8002e18 <SystemInit+0x60>)
 8002df0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002df4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002df6:	4b08      	ldr	r3, [pc, #32]	; (8002e18 <SystemInit+0x60>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a07      	ldr	r2, [pc, #28]	; (8002e18 <SystemInit+0x60>)
 8002dfc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e00:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002e02:	4b05      	ldr	r3, [pc, #20]	; (8002e18 <SystemInit+0x60>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	619a      	str	r2, [r3, #24]
}
 8002e08:	bf00      	nop
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	e000ed00 	.word	0xe000ed00
 8002e18:	40021000 	.word	0x40021000
 8002e1c:	00000000 	.word	0x00000000

08002e20 <Thermister>:

#include "temperature_sensor.h"
#include <stdio.h>

// FROM DATASHEET
double Thermister(uint32_t RawADC) {
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  double Temp;
    Temp = log(((10240000 / (1024-RawADC)) - 10000));
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8002e2e:	4a36      	ldr	r2, [pc, #216]	; (8002f08 <Thermister+0xe8>)
 8002e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e34:	f5a3 531c 	sub.w	r3, r3, #9984	; 0x2700
 8002e38:	3b10      	subs	r3, #16
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7fd fb62 	bl	8000504 <__aeabi_ui2d>
 8002e40:	4602      	mov	r2, r0
 8002e42:	460b      	mov	r3, r1
 8002e44:	ec43 2b10 	vmov	d0, r2, r3
 8002e48:	f00a f8ca 	bl	800cfe0 <log>
 8002e4c:	ed87 0b02 	vstr	d0, [r7, #8]
    Temp = 1 / (0.001129148 + (0.000234125 + (0.0000000876741 * Temp * Temp )) * Temp );
 8002e50:	a325      	add	r3, pc, #148	; (adr r3, 8002ee8 <Thermister+0xc8>)
 8002e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e56:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002e5a:	f7fd fbcd 	bl	80005f8 <__aeabi_dmul>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	460b      	mov	r3, r1
 8002e62:	4610      	mov	r0, r2
 8002e64:	4619      	mov	r1, r3
 8002e66:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e6a:	f7fd fbc5 	bl	80005f8 <__aeabi_dmul>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	460b      	mov	r3, r1
 8002e72:	4610      	mov	r0, r2
 8002e74:	4619      	mov	r1, r3
 8002e76:	a31e      	add	r3, pc, #120	; (adr r3, 8002ef0 <Thermister+0xd0>)
 8002e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e7c:	f7fd fa06 	bl	800028c <__adddf3>
 8002e80:	4602      	mov	r2, r0
 8002e82:	460b      	mov	r3, r1
 8002e84:	4610      	mov	r0, r2
 8002e86:	4619      	mov	r1, r3
 8002e88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e8c:	f7fd fbb4 	bl	80005f8 <__aeabi_dmul>
 8002e90:	4602      	mov	r2, r0
 8002e92:	460b      	mov	r3, r1
 8002e94:	4610      	mov	r0, r2
 8002e96:	4619      	mov	r1, r3
 8002e98:	a317      	add	r3, pc, #92	; (adr r3, 8002ef8 <Thermister+0xd8>)
 8002e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e9e:	f7fd f9f5 	bl	800028c <__adddf3>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	f04f 0000 	mov.w	r0, #0
 8002eaa:	4918      	ldr	r1, [pc, #96]	; (8002f0c <Thermister+0xec>)
 8002eac:	f7fd fcce 	bl	800084c <__aeabi_ddiv>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	e9c7 2302 	strd	r2, r3, [r7, #8]
    Temp = Temp - 273.15;
 8002eb8:	a311      	add	r3, pc, #68	; (adr r3, 8002f00 <Thermister+0xe0>)
 8002eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ebe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ec2:	f7fd f9e1 	bl	8000288 <__aeabi_dsub>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	460b      	mov	r3, r1
 8002eca:	e9c7 2302 	strd	r2, r3, [r7, #8]
    return Temp;
 8002ece:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ed2:	ec43 2b17 	vmov	d7, r2, r3
  return Temp;
}
 8002ed6:	eeb0 0a47 	vmov.f32	s0, s14
 8002eda:	eef0 0a67 	vmov.f32	s1, s15
 8002ede:	3710      	adds	r7, #16
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	f3af 8000 	nop.w
 8002ee8:	14170d19 	.word	0x14170d19
 8002eec:	3e7788eb 	.word	0x3e7788eb
 8002ef0:	6fb4c3c2 	.word	0x6fb4c3c2
 8002ef4:	3f2eafee 	.word	0x3f2eafee
 8002ef8:	6edeb890 	.word	0x6edeb890
 8002efc:	3f527ffd 	.word	0x3f527ffd
 8002f00:	66666666 	.word	0x66666666
 8002f04:	40711266 	.word	0x40711266
 8002f08:	009c4000 	.word	0x009c4000
 8002f0c:	3ff00000 	.word	0x3ff00000

08002f10 <temperatureMeasure>:



// TEMPERATURE MEASURE
double temperatureMeasure(){
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
	// Calibration
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8002f16:	217f      	movs	r1, #127	; 0x7f
 8002f18:	4812      	ldr	r0, [pc, #72]	; (8002f64 <temperatureMeasure+0x54>)
 8002f1a:	f001 fe97 	bl	8004c4c <HAL_ADCEx_Calibration_Start>

	// Measure start:
	HAL_ADC_Start(&hadc1);
 8002f1e:	4811      	ldr	r0, [pc, #68]	; (8002f64 <temperatureMeasure+0x54>)
 8002f20:	f000 fff0 	bl	8003f04 <HAL_ADC_Start>
	// Wait for result:
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8002f24:	f04f 31ff 	mov.w	r1, #4294967295
 8002f28:	480e      	ldr	r0, [pc, #56]	; (8002f64 <temperatureMeasure+0x54>)
 8002f2a:	f001 f8a5 	bl	8004078 <HAL_ADC_PollForConversion>

	// get resistance value
	uint32_t value=HAL_ADC_GetValue(&hadc1);
 8002f2e:	480d      	ldr	r0, [pc, #52]	; (8002f64 <temperatureMeasure+0x54>)
 8002f30:	f001 f97a 	bl	8004228 <HAL_ADC_GetValue>
 8002f34:	60f8      	str	r0, [r7, #12]

	// Transform to temperature
	double temperature =Thermister(value);
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f7ff ff72 	bl	8002e20 <Thermister>
 8002f3c:	ed87 0b00 	vstr	d0, [r7]

	// for USART comunnication
	printf("ADC= %lu temperature %lf \n, ", value, temperature);
 8002f40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f44:	68f9      	ldr	r1, [r7, #12]
 8002f46:	4808      	ldr	r0, [pc, #32]	; (8002f68 <temperatureMeasure+0x58>)
 8002f48:	f007 ffca 	bl	800aee0 <iprintf>

	return temperature;
 8002f4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f50:	ec43 2b17 	vmov	d7, r2, r3

	}
 8002f54:	eeb0 0a47 	vmov.f32	s0, s14
 8002f58:	eef0 0a67 	vmov.f32	s1, s15
 8002f5c:	3710      	adds	r7, #16
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	20000888 	.word	0x20000888
 8002f68:	0800d41c 	.word	0x0800d41c

08002f6c <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
DMA_HandleTypeDef hdma_tim4_ch1;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b090      	sub	sp, #64	; 0x40
 8002f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f72:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002f76:	2200      	movs	r2, #0
 8002f78:	601a      	str	r2, [r3, #0]
 8002f7a:	605a      	str	r2, [r3, #4]
 8002f7c:	609a      	str	r2, [r3, #8]
 8002f7e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002f80:	f107 031c 	add.w	r3, r7, #28
 8002f84:	2200      	movs	r2, #0
 8002f86:	601a      	str	r2, [r3, #0]
 8002f88:	605a      	str	r2, [r3, #4]
 8002f8a:	609a      	str	r2, [r3, #8]
 8002f8c:	60da      	str	r2, [r3, #12]
 8002f8e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f90:	f107 0310 	add.w	r3, r7, #16
 8002f94:	2200      	movs	r2, #0
 8002f96:	601a      	str	r2, [r3, #0]
 8002f98:	605a      	str	r2, [r3, #4]
 8002f9a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002f9c:	463b      	mov	r3, r7
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	601a      	str	r2, [r3, #0]
 8002fa2:	605a      	str	r2, [r3, #4]
 8002fa4:	609a      	str	r2, [r3, #8]
 8002fa6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002fa8:	4b35      	ldr	r3, [pc, #212]	; (8003080 <MX_TIM2_Init+0x114>)
 8002faa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002fae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8002fb0:	4b33      	ldr	r3, [pc, #204]	; (8003080 <MX_TIM2_Init+0x114>)
 8002fb2:	224f      	movs	r2, #79	; 0x4f
 8002fb4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fb6:	4b32      	ldr	r3, [pc, #200]	; (8003080 <MX_TIM2_Init+0x114>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002fbc:	4b30      	ldr	r3, [pc, #192]	; (8003080 <MX_TIM2_Init+0x114>)
 8002fbe:	f04f 32ff 	mov.w	r2, #4294967295
 8002fc2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fc4:	4b2e      	ldr	r3, [pc, #184]	; (8003080 <MX_TIM2_Init+0x114>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fca:	4b2d      	ldr	r3, [pc, #180]	; (8003080 <MX_TIM2_Init+0x114>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002fd0:	482b      	ldr	r0, [pc, #172]	; (8003080 <MX_TIM2_Init+0x114>)
 8002fd2:	f004 fc7a 	bl	80078ca <HAL_TIM_Base_Init>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d001      	beq.n	8002fe0 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8002fdc:	f7fe fb4e 	bl	800167c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fe0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fe4:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002fe6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002fea:	4619      	mov	r1, r3
 8002fec:	4824      	ldr	r0, [pc, #144]	; (8003080 <MX_TIM2_Init+0x114>)
 8002fee:	f005 fc99 	bl	8008924 <HAL_TIM_ConfigClockSource>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d001      	beq.n	8002ffc <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8002ff8:	f7fe fb40 	bl	800167c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002ffc:	4820      	ldr	r0, [pc, #128]	; (8003080 <MX_TIM2_Init+0x114>)
 8002ffe:	f005 f815 	bl	800802c <HAL_TIM_IC_Init>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8003008:	f7fe fb38 	bl	800167c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800300c:	2304      	movs	r3, #4
 800300e:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 8003010:	2340      	movs	r3, #64	; 0x40
 8003012:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003014:	2300      	movs	r3, #0
 8003016:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8003018:	2300      	movs	r3, #0
 800301a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800301c:	f107 031c 	add.w	r3, r7, #28
 8003020:	4619      	mov	r1, r3
 8003022:	4817      	ldr	r0, [pc, #92]	; (8003080 <MX_TIM2_Init+0x114>)
 8003024:	f005 fd47 	bl	8008ab6 <HAL_TIM_SlaveConfigSynchro>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 800302e:	f7fe fb25 	bl	800167c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003032:	2300      	movs	r3, #0
 8003034:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003036:	2300      	movs	r3, #0
 8003038:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800303a:	f107 0310 	add.w	r3, r7, #16
 800303e:	4619      	mov	r1, r3
 8003040:	480f      	ldr	r0, [pc, #60]	; (8003080 <MX_TIM2_Init+0x114>)
 8003042:	f006 fcef 	bl	8009a24 <HAL_TIMEx_MasterConfigSynchronization>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d001      	beq.n	8003050 <MX_TIM2_Init+0xe4>
  {
    Error_Handler();
 800304c:	f7fe fb16 	bl	800167c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8003050:	2302      	movs	r3, #2
 8003052:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003054:	2301      	movs	r3, #1
 8003056:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003058:	2300      	movs	r3, #0
 800305a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800305c:	2300      	movs	r3, #0
 800305e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003060:	463b      	mov	r3, r7
 8003062:	2200      	movs	r2, #0
 8003064:	4619      	mov	r1, r3
 8003066:	4806      	ldr	r0, [pc, #24]	; (8003080 <MX_TIM2_Init+0x114>)
 8003068:	f005 faab 	bl	80085c2 <HAL_TIM_IC_ConfigChannel>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <MX_TIM2_Init+0x10a>
  {
    Error_Handler();
 8003072:	f7fe fb03 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003076:	bf00      	nop
 8003078:	3740      	adds	r7, #64	; 0x40
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	200009bc 	.word	0x200009bc

08003084 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b08e      	sub	sp, #56	; 0x38
 8003088:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800308a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800308e:	2200      	movs	r2, #0
 8003090:	601a      	str	r2, [r3, #0]
 8003092:	605a      	str	r2, [r3, #4]
 8003094:	609a      	str	r2, [r3, #8]
 8003096:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003098:	f107 031c 	add.w	r3, r7, #28
 800309c:	2200      	movs	r2, #0
 800309e:	601a      	str	r2, [r3, #0]
 80030a0:	605a      	str	r2, [r3, #4]
 80030a2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80030a4:	463b      	mov	r3, r7
 80030a6:	2200      	movs	r2, #0
 80030a8:	601a      	str	r2, [r3, #0]
 80030aa:	605a      	str	r2, [r3, #4]
 80030ac:	609a      	str	r2, [r3, #8]
 80030ae:	60da      	str	r2, [r3, #12]
 80030b0:	611a      	str	r2, [r3, #16]
 80030b2:	615a      	str	r2, [r3, #20]
 80030b4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80030b6:	4b2c      	ldr	r3, [pc, #176]	; (8003168 <MX_TIM4_Init+0xe4>)
 80030b8:	4a2c      	ldr	r2, [pc, #176]	; (800316c <MX_TIM4_Init+0xe8>)
 80030ba:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80030bc:	4b2a      	ldr	r3, [pc, #168]	; (8003168 <MX_TIM4_Init+0xe4>)
 80030be:	2200      	movs	r2, #0
 80030c0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030c2:	4b29      	ldr	r3, [pc, #164]	; (8003168 <MX_TIM4_Init+0xe4>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 199;
 80030c8:	4b27      	ldr	r3, [pc, #156]	; (8003168 <MX_TIM4_Init+0xe4>)
 80030ca:	22c7      	movs	r2, #199	; 0xc7
 80030cc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030ce:	4b26      	ldr	r3, [pc, #152]	; (8003168 <MX_TIM4_Init+0xe4>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030d4:	4b24      	ldr	r3, [pc, #144]	; (8003168 <MX_TIM4_Init+0xe4>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80030da:	4823      	ldr	r0, [pc, #140]	; (8003168 <MX_TIM4_Init+0xe4>)
 80030dc:	f004 fbf5 	bl	80078ca <HAL_TIM_Base_Init>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80030e6:	f7fe fac9 	bl	800167c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030ee:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80030f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80030f4:	4619      	mov	r1, r3
 80030f6:	481c      	ldr	r0, [pc, #112]	; (8003168 <MX_TIM4_Init+0xe4>)
 80030f8:	f005 fc14 	bl	8008924 <HAL_TIM_ConfigClockSource>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d001      	beq.n	8003106 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8003102:	f7fe fabb 	bl	800167c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003106:	4818      	ldr	r0, [pc, #96]	; (8003168 <MX_TIM4_Init+0xe4>)
 8003108:	f004 fd0e 	bl	8007b28 <HAL_TIM_PWM_Init>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8003112:	f7fe fab3 	bl	800167c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003116:	2300      	movs	r3, #0
 8003118:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800311a:	2300      	movs	r3, #0
 800311c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800311e:	f107 031c 	add.w	r3, r7, #28
 8003122:	4619      	mov	r1, r3
 8003124:	4810      	ldr	r0, [pc, #64]	; (8003168 <MX_TIM4_Init+0xe4>)
 8003126:	f006 fc7d 	bl	8009a24 <HAL_TIMEx_MasterConfigSynchronization>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d001      	beq.n	8003134 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8003130:	f7fe faa4 	bl	800167c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003134:	2360      	movs	r3, #96	; 0x60
 8003136:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003138:	2300      	movs	r3, #0
 800313a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800313c:	2300      	movs	r3, #0
 800313e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003140:	2300      	movs	r3, #0
 8003142:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003144:	463b      	mov	r3, r7
 8003146:	2200      	movs	r2, #0
 8003148:	4619      	mov	r1, r3
 800314a:	4807      	ldr	r0, [pc, #28]	; (8003168 <MX_TIM4_Init+0xe4>)
 800314c:	f005 fad6 	bl	80086fc <HAL_TIM_PWM_ConfigChannel>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d001      	beq.n	800315a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8003156:	f7fe fa91 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800315a:	4803      	ldr	r0, [pc, #12]	; (8003168 <MX_TIM4_Init+0xe4>)
 800315c:	f000 f8d6 	bl	800330c <HAL_TIM_MspPostInit>

}
 8003160:	bf00      	nop
 8003162:	3738      	adds	r7, #56	; 0x38
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	20000924 	.word	0x20000924
 800316c:	40000800 	.word	0x40000800

08003170 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003176:	1d3b      	adds	r3, r7, #4
 8003178:	2200      	movs	r2, #0
 800317a:	601a      	str	r2, [r3, #0]
 800317c:	605a      	str	r2, [r3, #4]
 800317e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003180:	4b15      	ldr	r3, [pc, #84]	; (80031d8 <MX_TIM6_Init+0x68>)
 8003182:	4a16      	ldr	r2, [pc, #88]	; (80031dc <MX_TIM6_Init+0x6c>)
 8003184:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 8003186:	4b14      	ldr	r3, [pc, #80]	; (80031d8 <MX_TIM6_Init+0x68>)
 8003188:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800318c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800318e:	4b12      	ldr	r3, [pc, #72]	; (80031d8 <MX_TIM6_Init+0x68>)
 8003190:	2200      	movs	r2, #0
 8003192:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 2499;
 8003194:	4b10      	ldr	r3, [pc, #64]	; (80031d8 <MX_TIM6_Init+0x68>)
 8003196:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800319a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800319c:	4b0e      	ldr	r3, [pc, #56]	; (80031d8 <MX_TIM6_Init+0x68>)
 800319e:	2200      	movs	r2, #0
 80031a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80031a2:	480d      	ldr	r0, [pc, #52]	; (80031d8 <MX_TIM6_Init+0x68>)
 80031a4:	f004 fb91 	bl	80078ca <HAL_TIM_Base_Init>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d001      	beq.n	80031b2 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80031ae:	f7fe fa65 	bl	800167c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031b2:	2300      	movs	r3, #0
 80031b4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031b6:	2300      	movs	r3, #0
 80031b8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80031ba:	1d3b      	adds	r3, r7, #4
 80031bc:	4619      	mov	r1, r3
 80031be:	4806      	ldr	r0, [pc, #24]	; (80031d8 <MX_TIM6_Init+0x68>)
 80031c0:	f006 fc30 	bl	8009a24 <HAL_TIMEx_MasterConfigSynchronization>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d001      	beq.n	80031ce <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80031ca:	f7fe fa57 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80031ce:	bf00      	nop
 80031d0:	3710      	adds	r7, #16
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	20000970 	.word	0x20000970
 80031dc:	40001000 	.word	0x40001000

080031e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b08c      	sub	sp, #48	; 0x30
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031e8:	f107 031c 	add.w	r3, r7, #28
 80031ec:	2200      	movs	r2, #0
 80031ee:	601a      	str	r2, [r3, #0]
 80031f0:	605a      	str	r2, [r3, #4]
 80031f2:	609a      	str	r2, [r3, #8]
 80031f4:	60da      	str	r2, [r3, #12]
 80031f6:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003200:	d129      	bne.n	8003256 <HAL_TIM_Base_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003202:	4b3d      	ldr	r3, [pc, #244]	; (80032f8 <HAL_TIM_Base_MspInit+0x118>)
 8003204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003206:	4a3c      	ldr	r2, [pc, #240]	; (80032f8 <HAL_TIM_Base_MspInit+0x118>)
 8003208:	f043 0301 	orr.w	r3, r3, #1
 800320c:	6593      	str	r3, [r2, #88]	; 0x58
 800320e:	4b3a      	ldr	r3, [pc, #232]	; (80032f8 <HAL_TIM_Base_MspInit+0x118>)
 8003210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003212:	f003 0301 	and.w	r3, r3, #1
 8003216:	61bb      	str	r3, [r7, #24]
 8003218:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800321a:	4b37      	ldr	r3, [pc, #220]	; (80032f8 <HAL_TIM_Base_MspInit+0x118>)
 800321c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800321e:	4a36      	ldr	r2, [pc, #216]	; (80032f8 <HAL_TIM_Base_MspInit+0x118>)
 8003220:	f043 0301 	orr.w	r3, r3, #1
 8003224:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003226:	4b34      	ldr	r3, [pc, #208]	; (80032f8 <HAL_TIM_Base_MspInit+0x118>)
 8003228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	617b      	str	r3, [r7, #20]
 8003230:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003232:	2301      	movs	r3, #1
 8003234:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003236:	2302      	movs	r3, #2
 8003238:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800323a:	2300      	movs	r3, #0
 800323c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800323e:	2300      	movs	r3, #0
 8003240:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003242:	2301      	movs	r3, #1
 8003244:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003246:	f107 031c 	add.w	r3, r7, #28
 800324a:	4619      	mov	r1, r3
 800324c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003250:	f002 f916 	bl	8005480 <HAL_GPIO_Init>
    __HAL_RCC_TIM6_CLK_ENABLE();
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8003254:	e04c      	b.n	80032f0 <HAL_TIM_Base_MspInit+0x110>
  else if(tim_baseHandle->Instance==TIM4)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a28      	ldr	r2, [pc, #160]	; (80032fc <HAL_TIM_Base_MspInit+0x11c>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d136      	bne.n	80032ce <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003260:	4b25      	ldr	r3, [pc, #148]	; (80032f8 <HAL_TIM_Base_MspInit+0x118>)
 8003262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003264:	4a24      	ldr	r2, [pc, #144]	; (80032f8 <HAL_TIM_Base_MspInit+0x118>)
 8003266:	f043 0304 	orr.w	r3, r3, #4
 800326a:	6593      	str	r3, [r2, #88]	; 0x58
 800326c:	4b22      	ldr	r3, [pc, #136]	; (80032f8 <HAL_TIM_Base_MspInit+0x118>)
 800326e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003270:	f003 0304 	and.w	r3, r3, #4
 8003274:	613b      	str	r3, [r7, #16]
 8003276:	693b      	ldr	r3, [r7, #16]
    hdma_tim4_ch1.Instance = DMA1_Channel1;
 8003278:	4b21      	ldr	r3, [pc, #132]	; (8003300 <HAL_TIM_Base_MspInit+0x120>)
 800327a:	4a22      	ldr	r2, [pc, #136]	; (8003304 <HAL_TIM_Base_MspInit+0x124>)
 800327c:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Request = DMA_REQUEST_6;
 800327e:	4b20      	ldr	r3, [pc, #128]	; (8003300 <HAL_TIM_Base_MspInit+0x120>)
 8003280:	2206      	movs	r2, #6
 8003282:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003284:	4b1e      	ldr	r3, [pc, #120]	; (8003300 <HAL_TIM_Base_MspInit+0x120>)
 8003286:	2210      	movs	r2, #16
 8003288:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800328a:	4b1d      	ldr	r3, [pc, #116]	; (8003300 <HAL_TIM_Base_MspInit+0x120>)
 800328c:	2200      	movs	r2, #0
 800328e:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003290:	4b1b      	ldr	r3, [pc, #108]	; (8003300 <HAL_TIM_Base_MspInit+0x120>)
 8003292:	2280      	movs	r2, #128	; 0x80
 8003294:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003296:	4b1a      	ldr	r3, [pc, #104]	; (8003300 <HAL_TIM_Base_MspInit+0x120>)
 8003298:	f44f 7280 	mov.w	r2, #256	; 0x100
 800329c:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800329e:	4b18      	ldr	r3, [pc, #96]	; (8003300 <HAL_TIM_Base_MspInit+0x120>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_NORMAL;
 80032a4:	4b16      	ldr	r3, [pc, #88]	; (8003300 <HAL_TIM_Base_MspInit+0x120>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80032aa:	4b15      	ldr	r3, [pc, #84]	; (8003300 <HAL_TIM_Base_MspInit+0x120>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 80032b0:	4813      	ldr	r0, [pc, #76]	; (8003300 <HAL_TIM_Base_MspInit+0x120>)
 80032b2:	f001 feed 	bl	8005090 <HAL_DMA_Init>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d001      	beq.n	80032c0 <HAL_TIM_Base_MspInit+0xe0>
      Error_Handler();
 80032bc:	f7fe f9de 	bl	800167c <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4a0f      	ldr	r2, [pc, #60]	; (8003300 <HAL_TIM_Base_MspInit+0x120>)
 80032c4:	625a      	str	r2, [r3, #36]	; 0x24
 80032c6:	4a0e      	ldr	r2, [pc, #56]	; (8003300 <HAL_TIM_Base_MspInit+0x120>)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6293      	str	r3, [r2, #40]	; 0x28
}
 80032cc:	e010      	b.n	80032f0 <HAL_TIM_Base_MspInit+0x110>
  else if(tim_baseHandle->Instance==TIM6)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a0d      	ldr	r2, [pc, #52]	; (8003308 <HAL_TIM_Base_MspInit+0x128>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d10b      	bne.n	80032f0 <HAL_TIM_Base_MspInit+0x110>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80032d8:	4b07      	ldr	r3, [pc, #28]	; (80032f8 <HAL_TIM_Base_MspInit+0x118>)
 80032da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032dc:	4a06      	ldr	r2, [pc, #24]	; (80032f8 <HAL_TIM_Base_MspInit+0x118>)
 80032de:	f043 0310 	orr.w	r3, r3, #16
 80032e2:	6593      	str	r3, [r2, #88]	; 0x58
 80032e4:	4b04      	ldr	r3, [pc, #16]	; (80032f8 <HAL_TIM_Base_MspInit+0x118>)
 80032e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032e8:	f003 0310 	and.w	r3, r3, #16
 80032ec:	60fb      	str	r3, [r7, #12]
 80032ee:	68fb      	ldr	r3, [r7, #12]
}
 80032f0:	bf00      	nop
 80032f2:	3730      	adds	r7, #48	; 0x30
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	40021000 	.word	0x40021000
 80032fc:	40000800 	.word	0x40000800
 8003300:	20000a08 	.word	0x20000a08
 8003304:	40020008 	.word	0x40020008
 8003308:	40001000 	.word	0x40001000

0800330c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b088      	sub	sp, #32
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003314:	f107 030c 	add.w	r3, r7, #12
 8003318:	2200      	movs	r2, #0
 800331a:	601a      	str	r2, [r3, #0]
 800331c:	605a      	str	r2, [r3, #4]
 800331e:	609a      	str	r2, [r3, #8]
 8003320:	60da      	str	r2, [r3, #12]
 8003322:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a11      	ldr	r2, [pc, #68]	; (8003370 <HAL_TIM_MspPostInit+0x64>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d11b      	bne.n	8003366 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800332e:	4b11      	ldr	r3, [pc, #68]	; (8003374 <HAL_TIM_MspPostInit+0x68>)
 8003330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003332:	4a10      	ldr	r2, [pc, #64]	; (8003374 <HAL_TIM_MspPostInit+0x68>)
 8003334:	f043 0302 	orr.w	r3, r3, #2
 8003338:	64d3      	str	r3, [r2, #76]	; 0x4c
 800333a:	4b0e      	ldr	r3, [pc, #56]	; (8003374 <HAL_TIM_MspPostInit+0x68>)
 800333c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800333e:	f003 0302 	and.w	r3, r3, #2
 8003342:	60bb      	str	r3, [r7, #8]
 8003344:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003346:	2340      	movs	r3, #64	; 0x40
 8003348:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800334a:	2302      	movs	r3, #2
 800334c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800334e:	2300      	movs	r3, #0
 8003350:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003352:	2300      	movs	r3, #0
 8003354:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003356:	2302      	movs	r3, #2
 8003358:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800335a:	f107 030c 	add.w	r3, r7, #12
 800335e:	4619      	mov	r1, r3
 8003360:	4805      	ldr	r0, [pc, #20]	; (8003378 <HAL_TIM_MspPostInit+0x6c>)
 8003362:	f002 f88d 	bl	8005480 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003366:	bf00      	nop
 8003368:	3720      	adds	r7, #32
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	40000800 	.word	0x40000800
 8003374:	40021000 	.word	0x40021000
 8003378:	48000400 	.word	0x48000400

0800337c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003380:	4b14      	ldr	r3, [pc, #80]	; (80033d4 <MX_USART2_UART_Init+0x58>)
 8003382:	4a15      	ldr	r2, [pc, #84]	; (80033d8 <MX_USART2_UART_Init+0x5c>)
 8003384:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003386:	4b13      	ldr	r3, [pc, #76]	; (80033d4 <MX_USART2_UART_Init+0x58>)
 8003388:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800338c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800338e:	4b11      	ldr	r3, [pc, #68]	; (80033d4 <MX_USART2_UART_Init+0x58>)
 8003390:	2200      	movs	r2, #0
 8003392:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003394:	4b0f      	ldr	r3, [pc, #60]	; (80033d4 <MX_USART2_UART_Init+0x58>)
 8003396:	2200      	movs	r2, #0
 8003398:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800339a:	4b0e      	ldr	r3, [pc, #56]	; (80033d4 <MX_USART2_UART_Init+0x58>)
 800339c:	2200      	movs	r2, #0
 800339e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80033a0:	4b0c      	ldr	r3, [pc, #48]	; (80033d4 <MX_USART2_UART_Init+0x58>)
 80033a2:	220c      	movs	r2, #12
 80033a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033a6:	4b0b      	ldr	r3, [pc, #44]	; (80033d4 <MX_USART2_UART_Init+0x58>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80033ac:	4b09      	ldr	r3, [pc, #36]	; (80033d4 <MX_USART2_UART_Init+0x58>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80033b2:	4b08      	ldr	r3, [pc, #32]	; (80033d4 <MX_USART2_UART_Init+0x58>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80033b8:	4b06      	ldr	r3, [pc, #24]	; (80033d4 <MX_USART2_UART_Init+0x58>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80033be:	4805      	ldr	r0, [pc, #20]	; (80033d4 <MX_USART2_UART_Init+0x58>)
 80033c0:	f006 fbd6 	bl	8009b70 <HAL_UART_Init>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d001      	beq.n	80033ce <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80033ca:	f7fe f957 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80033ce:	bf00      	nop
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	20000a50 	.word	0x20000a50
 80033d8:	40004400 	.word	0x40004400

080033dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b0ac      	sub	sp, #176	; 0xb0
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033e4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80033e8:	2200      	movs	r2, #0
 80033ea:	601a      	str	r2, [r3, #0]
 80033ec:	605a      	str	r2, [r3, #4]
 80033ee:	609a      	str	r2, [r3, #8]
 80033f0:	60da      	str	r2, [r3, #12]
 80033f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80033f4:	f107 0314 	add.w	r3, r7, #20
 80033f8:	2288      	movs	r2, #136	; 0x88
 80033fa:	2100      	movs	r1, #0
 80033fc:	4618      	mov	r0, r3
 80033fe:	f007 f8fd 	bl	800a5fc <memset>
  if(uartHandle->Instance==USART2)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a21      	ldr	r2, [pc, #132]	; (800348c <HAL_UART_MspInit+0xb0>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d13b      	bne.n	8003484 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800340c:	2302      	movs	r3, #2
 800340e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003410:	2300      	movs	r3, #0
 8003412:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003414:	f107 0314 	add.w	r3, r7, #20
 8003418:	4618      	mov	r0, r3
 800341a:	f003 f8b5 	bl	8006588 <HAL_RCCEx_PeriphCLKConfig>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d001      	beq.n	8003428 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003424:	f7fe f92a 	bl	800167c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003428:	4b19      	ldr	r3, [pc, #100]	; (8003490 <HAL_UART_MspInit+0xb4>)
 800342a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800342c:	4a18      	ldr	r2, [pc, #96]	; (8003490 <HAL_UART_MspInit+0xb4>)
 800342e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003432:	6593      	str	r3, [r2, #88]	; 0x58
 8003434:	4b16      	ldr	r3, [pc, #88]	; (8003490 <HAL_UART_MspInit+0xb4>)
 8003436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800343c:	613b      	str	r3, [r7, #16]
 800343e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003440:	4b13      	ldr	r3, [pc, #76]	; (8003490 <HAL_UART_MspInit+0xb4>)
 8003442:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003444:	4a12      	ldr	r2, [pc, #72]	; (8003490 <HAL_UART_MspInit+0xb4>)
 8003446:	f043 0301 	orr.w	r3, r3, #1
 800344a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800344c:	4b10      	ldr	r3, [pc, #64]	; (8003490 <HAL_UART_MspInit+0xb4>)
 800344e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003450:	f003 0301 	and.w	r3, r3, #1
 8003454:	60fb      	str	r3, [r7, #12]
 8003456:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003458:	230c      	movs	r3, #12
 800345a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800345e:	2302      	movs	r3, #2
 8003460:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003464:	2300      	movs	r3, #0
 8003466:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800346a:	2303      	movs	r3, #3
 800346c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003470:	2307      	movs	r3, #7
 8003472:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003476:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800347a:	4619      	mov	r1, r3
 800347c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003480:	f001 fffe 	bl	8005480 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003484:	bf00      	nop
 8003486:	37b0      	adds	r7, #176	; 0xb0
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	40004400 	.word	0x40004400
 8003490:	40021000 	.word	0x40021000

08003494 <set_byte>:

static uint8_t led_buffer[RESET_LEN+24*LED_N+1];

// Konwertowanie 8 bitowej liczby na 8 bajtow;

static void set_byte(uint32_t pos, uint8_t value){
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	460b      	mov	r3, r1
 800349e:	70fb      	strb	r3, [r7, #3]
	int i;
	for(i=0; i<8;i++){
 80034a0:	2300      	movs	r3, #0
 80034a2:	60fb      	str	r3, [r7, #12]
 80034a4:	e016      	b.n	80034d4 <set_byte+0x40>
		if(value & 0x80){
 80034a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	da06      	bge.n	80034bc <set_byte+0x28>
			led_buffer[pos+i]=BIT_1_TIME;
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4413      	add	r3, r2
 80034b4:	4a0c      	ldr	r2, [pc, #48]	; (80034e8 <set_byte+0x54>)
 80034b6:	2140      	movs	r1, #64	; 0x40
 80034b8:	54d1      	strb	r1, [r2, r3]
 80034ba:	e005      	b.n	80034c8 <set_byte+0x34>
		}else{
			led_buffer[pos+i]=BIT_0_TIME;
 80034bc:	68fa      	ldr	r2, [r7, #12]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4413      	add	r3, r2
 80034c2:	4a09      	ldr	r2, [pc, #36]	; (80034e8 <set_byte+0x54>)
 80034c4:	2120      	movs	r1, #32
 80034c6:	54d1      	strb	r1, [r2, r3]
		}
		value<<=1;
 80034c8:	78fb      	ldrb	r3, [r7, #3]
 80034ca:	005b      	lsls	r3, r3, #1
 80034cc:	70fb      	strb	r3, [r7, #3]
	for(i=0; i<8;i++){
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	3301      	adds	r3, #1
 80034d2:	60fb      	str	r3, [r7, #12]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2b07      	cmp	r3, #7
 80034d8:	dde5      	ble.n	80034a6 <set_byte+0x12>
	}
}
 80034da:	bf00      	nop
 80034dc:	bf00      	nop
 80034de:	3714      	adds	r7, #20
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr
 80034e8:	200002a8 	.word	0x200002a8

080034ec <ws2811_init>:


// DEFINICJE FUNKCJI

void ws2811_init(void){
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
	int i;

	// Wysłanie resetu:
	for(i=0;i<RESET_LEN;i++){
 80034f2:	2300      	movs	r3, #0
 80034f4:	607b      	str	r3, [r7, #4]
 80034f6:	e007      	b.n	8003508 <ws2811_init+0x1c>
		led_buffer[i]=0;
 80034f8:	4a13      	ldr	r2, [pc, #76]	; (8003548 <ws2811_init+0x5c>)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4413      	add	r3, r2
 80034fe:	2200      	movs	r2, #0
 8003500:	701a      	strb	r2, [r3, #0]
	for(i=0;i<RESET_LEN;i++){
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	3301      	adds	r3, #1
 8003506:	607b      	str	r3, [r7, #4]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2b63      	cmp	r3, #99	; 0x63
 800350c:	ddf4      	ble.n	80034f8 <ws2811_init+0xc>
	}

	// Zgaszenie wszystkich diod:
	for(i=0; i<24*LED_N;i++){
 800350e:	2300      	movs	r3, #0
 8003510:	607b      	str	r3, [r7, #4]
 8003512:	e007      	b.n	8003524 <ws2811_init+0x38>
		led_buffer[RESET_LEN+i]=BIT_0_TIME;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	3364      	adds	r3, #100	; 0x64
 8003518:	4a0b      	ldr	r2, [pc, #44]	; (8003548 <ws2811_init+0x5c>)
 800351a:	2120      	movs	r1, #32
 800351c:	54d1      	strb	r1, [r2, r3]
	for(i=0; i<24*LED_N;i++){
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	3301      	adds	r3, #1
 8003522:	607b      	str	r3, [r7, #4]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f5b3 6fae 	cmp.w	r3, #1392	; 0x570
 800352a:	dbf3      	blt.n	8003514 <ws2811_init+0x28>
	}

	// Wypełnienie na koniec:

	led_buffer[RESET_LEN+24*LED_N]=100;
 800352c:	4b06      	ldr	r3, [pc, #24]	; (8003548 <ws2811_init+0x5c>)
 800352e:	2264      	movs	r2, #100	; 0x64
 8003530:	f883 25d4 	strb.w	r2, [r3, #1492]	; 0x5d4

	// Wlączenie timera:
	HAL_TIM_Base_Start(&htim4);
 8003534:	4805      	ldr	r0, [pc, #20]	; (800354c <ws2811_init+0x60>)
 8003536:	f004 fa1f 	bl	8007978 <HAL_TIM_Base_Start>
	// Zacznij odswiezanie:
	ws2811_update();
 800353a:	f000 f88f 	bl	800365c <ws2811_update>

}
 800353e:	bf00      	nop
 8003540:	3708      	adds	r7, #8
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	200002a8 	.word	0x200002a8
 800354c:	20000924 	.word	0x20000924

08003550 <ws2811_firstAndSecondSegmentsDisplayReset>:

void ws2811_firstAndSecondSegmentsDisplayReset(void){
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
	int i;

		// Wysłanie resetu:
		for(i=0;i<RESET_LEN;i++){
 8003556:	2300      	movs	r3, #0
 8003558:	607b      	str	r3, [r7, #4]
 800355a:	e007      	b.n	800356c <ws2811_firstAndSecondSegmentsDisplayReset+0x1c>
			led_buffer[i]=0;
 800355c:	4a11      	ldr	r2, [pc, #68]	; (80035a4 <ws2811_firstAndSecondSegmentsDisplayReset+0x54>)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4413      	add	r3, r2
 8003562:	2200      	movs	r2, #0
 8003564:	701a      	strb	r2, [r3, #0]
		for(i=0;i<RESET_LEN;i++){
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	3301      	adds	r3, #1
 800356a:	607b      	str	r3, [r7, #4]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2b63      	cmp	r3, #99	; 0x63
 8003570:	ddf4      	ble.n	800355c <ws2811_firstAndSecondSegmentsDisplayReset+0xc>
		}

		// Zgaszenie wszystkich diod:
		for(i=0; i<24*LED_N_HOURS_FOR_SECTOR;i++){
 8003572:	2300      	movs	r3, #0
 8003574:	607b      	str	r3, [r7, #4]
 8003576:	e007      	b.n	8003588 <ws2811_firstAndSecondSegmentsDisplayReset+0x38>
			led_buffer[RESET_LEN+i]=BIT_0_TIME;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	3364      	adds	r3, #100	; 0x64
 800357c:	4a09      	ldr	r2, [pc, #36]	; (80035a4 <ws2811_firstAndSecondSegmentsDisplayReset+0x54>)
 800357e:	2120      	movs	r1, #32
 8003580:	54d1      	strb	r1, [r2, r3]
		for(i=0; i<24*LED_N_HOURS_FOR_SECTOR;i++){
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	3301      	adds	r3, #1
 8003586:	607b      	str	r3, [r7, #4]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f5b3 7f28 	cmp.w	r3, #672	; 0x2a0
 800358e:	dbf3      	blt.n	8003578 <ws2811_firstAndSecondSegmentsDisplayReset+0x28>
		}

		// Wypełnienie na koniec:

		led_buffer[RESET_LEN+24*LED_N]=100;
 8003590:	4b04      	ldr	r3, [pc, #16]	; (80035a4 <ws2811_firstAndSecondSegmentsDisplayReset+0x54>)
 8003592:	2264      	movs	r2, #100	; 0x64
 8003594:	f883 25d4 	strb.w	r2, [r3, #1492]	; 0x5d4

		// Zacznij odswiezanie:
		ws2811_update();
 8003598:	f000 f860 	bl	800365c <ws2811_update>
}
 800359c:	bf00      	nop
 800359e:	3708      	adds	r7, #8
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	200002a8 	.word	0x200002a8

080035a8 <ws2811_ThirdAndFourthSegmentsDisplayReset>:

void ws2811_ThirdAndFourthSegmentsDisplayReset(void){
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
	int i;

		// Wysłanie resetu:
		for(i=0;i<RESET_LEN;i++){
 80035ae:	2300      	movs	r3, #0
 80035b0:	607b      	str	r3, [r7, #4]
 80035b2:	e007      	b.n	80035c4 <ws2811_ThirdAndFourthSegmentsDisplayReset+0x1c>
			led_buffer[i]=0;
 80035b4:	4a12      	ldr	r2, [pc, #72]	; (8003600 <ws2811_ThirdAndFourthSegmentsDisplayReset+0x58>)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4413      	add	r3, r2
 80035ba:	2200      	movs	r2, #0
 80035bc:	701a      	strb	r2, [r3, #0]
		for(i=0;i<RESET_LEN;i++){
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	3301      	adds	r3, #1
 80035c2:	607b      	str	r3, [r7, #4]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2b63      	cmp	r3, #99	; 0x63
 80035c8:	ddf4      	ble.n	80035b4 <ws2811_ThirdAndFourthSegmentsDisplayReset+0xc>
		}

		// Zgaszenie wszystkich diod:
		for(i=0; i<24*LED_N_MINUTES_FOR_SECTOR;i++){
 80035ca:	2300      	movs	r3, #0
 80035cc:	607b      	str	r3, [r7, #4]
 80035ce:	e008      	b.n	80035e2 <ws2811_ThirdAndFourthSegmentsDisplayReset+0x3a>
			led_buffer[RESET_LEN+24*LED_N_HOURS_FOR_SECTOR+24*2+i]=BIT_0_TIME;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f503 734d 	add.w	r3, r3, #820	; 0x334
 80035d6:	4a0a      	ldr	r2, [pc, #40]	; (8003600 <ws2811_ThirdAndFourthSegmentsDisplayReset+0x58>)
 80035d8:	2120      	movs	r1, #32
 80035da:	54d1      	strb	r1, [r2, r3]
		for(i=0; i<24*LED_N_MINUTES_FOR_SECTOR;i++){
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	3301      	adds	r3, #1
 80035e0:	607b      	str	r3, [r7, #4]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f5b3 7f28 	cmp.w	r3, #672	; 0x2a0
 80035e8:	dbf2      	blt.n	80035d0 <ws2811_ThirdAndFourthSegmentsDisplayReset+0x28>
		}

		// Wypełnienie na koniec:

		led_buffer[RESET_LEN+24*LED_N]=100;
 80035ea:	4b05      	ldr	r3, [pc, #20]	; (8003600 <ws2811_ThirdAndFourthSegmentsDisplayReset+0x58>)
 80035ec:	2264      	movs	r2, #100	; 0x64
 80035ee:	f883 25d4 	strb.w	r2, [r3, #1492]	; 0x5d4

		// Zacznij odswiezanie:
		ws2811_update();
 80035f2:	f000 f833 	bl	800365c <ws2811_update>
}
 80035f6:	bf00      	nop
 80035f8:	3708      	adds	r7, #8
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	200002a8 	.word	0x200002a8

08003604 <ws2811_fullDisplayReset>:

void ws2811_fullDisplayReset(void){
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
	int i;

			// Wysłanie resetu:
			for(i=0;i<RESET_LEN;i++){
 800360a:	2300      	movs	r3, #0
 800360c:	607b      	str	r3, [r7, #4]
 800360e:	e007      	b.n	8003620 <ws2811_fullDisplayReset+0x1c>
				led_buffer[i]=0;
 8003610:	4a11      	ldr	r2, [pc, #68]	; (8003658 <ws2811_fullDisplayReset+0x54>)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4413      	add	r3, r2
 8003616:	2200      	movs	r2, #0
 8003618:	701a      	strb	r2, [r3, #0]
			for(i=0;i<RESET_LEN;i++){
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	3301      	adds	r3, #1
 800361e:	607b      	str	r3, [r7, #4]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2b63      	cmp	r3, #99	; 0x63
 8003624:	ddf4      	ble.n	8003610 <ws2811_fullDisplayReset+0xc>
			}

			// Zgaszenie wszystkich diod:
			for(i=0; i<24*LED_N;i++){
 8003626:	2300      	movs	r3, #0
 8003628:	607b      	str	r3, [r7, #4]
 800362a:	e007      	b.n	800363c <ws2811_fullDisplayReset+0x38>
				led_buffer[RESET_LEN+i]=BIT_0_TIME;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	3364      	adds	r3, #100	; 0x64
 8003630:	4a09      	ldr	r2, [pc, #36]	; (8003658 <ws2811_fullDisplayReset+0x54>)
 8003632:	2120      	movs	r1, #32
 8003634:	54d1      	strb	r1, [r2, r3]
			for(i=0; i<24*LED_N;i++){
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	3301      	adds	r3, #1
 800363a:	607b      	str	r3, [r7, #4]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f5b3 6fae 	cmp.w	r3, #1392	; 0x570
 8003642:	dbf3      	blt.n	800362c <ws2811_fullDisplayReset+0x28>
			}

			// Wypełnienie na koniec:

			led_buffer[RESET_LEN+24*LED_N]=100;
 8003644:	4b04      	ldr	r3, [pc, #16]	; (8003658 <ws2811_fullDisplayReset+0x54>)
 8003646:	2264      	movs	r2, #100	; 0x64
 8003648:	f883 25d4 	strb.w	r2, [r3, #1492]	; 0x5d4

			// Zacznij odswiezanie:
			ws2811_update();
 800364c:	f000 f806 	bl	800365c <ws2811_update>
	}
 8003650:	bf00      	nop
 8003652:	3708      	adds	r7, #8
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}
 8003658:	200002a8 	.word	0x200002a8

0800365c <ws2811_update>:



void ws2811_update(void){
 800365c:	b580      	push	{r7, lr}
 800365e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start_DMA(&htim4, TIM_CHANNEL_1, (uint32_t*)led_buffer, sizeof(led_buffer));
 8003660:	f240 53d5 	movw	r3, #1493	; 0x5d5
 8003664:	4a03      	ldr	r2, [pc, #12]	; (8003674 <ws2811_update+0x18>)
 8003666:	2100      	movs	r1, #0
 8003668:	4803      	ldr	r0, [pc, #12]	; (8003678 <ws2811_update+0x1c>)
 800366a:	f004 fabf 	bl	8007bec <HAL_TIM_PWM_Start_DMA>
}
 800366e:	bf00      	nop
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	200002a8 	.word	0x200002a8
 8003678:	20000924 	.word	0x20000924

0800367c <ws2811_wait>:


void ws2811_wait(void){
 800367c:	b580      	push	{r7, lr}
 800367e:	af00      	add	r7, sp, #0
	while(HAL_TIM_GetChannelState(&htim4, TIM_CHANNEL_1)== HAL_TIM_CHANNEL_STATE_BUSY){
 8003680:	bf00      	nop
 8003682:	2100      	movs	r1, #0
 8003684:	4804      	ldr	r0, [pc, #16]	; (8003698 <ws2811_wait+0x1c>)
 8003686:	f005 fadb 	bl	8008c40 <HAL_TIM_GetChannelState>
 800368a:	4603      	mov	r3, r0
 800368c:	2b02      	cmp	r3, #2
 800368e:	d0f8      	beq.n	8003682 <ws2811_wait+0x6>

	}
}
 8003690:	bf00      	nop
 8003692:	bf00      	nop
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	20000924 	.word	0x20000924

0800369c <ws2811_set_color>:


void ws2811_set_color(uint32_t led, uint8_t red, uint8_t green, uint8_t blue){
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	4608      	mov	r0, r1
 80036a6:	4611      	mov	r1, r2
 80036a8:	461a      	mov	r2, r3
 80036aa:	4603      	mov	r3, r0
 80036ac:	70fb      	strb	r3, [r7, #3]
 80036ae:	460b      	mov	r3, r1
 80036b0:	70bb      	strb	r3, [r7, #2]
 80036b2:	4613      	mov	r3, r2
 80036b4:	707b      	strb	r3, [r7, #1]
	if(led<LED_N){
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2b39      	cmp	r3, #57	; 0x39
 80036ba:	d820      	bhi.n	80036fe <ws2811_set_color+0x62>
		set_byte(RESET_LEN+24*led, green);
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	4613      	mov	r3, r2
 80036c0:	005b      	lsls	r3, r3, #1
 80036c2:	4413      	add	r3, r2
 80036c4:	00db      	lsls	r3, r3, #3
 80036c6:	3364      	adds	r3, #100	; 0x64
 80036c8:	78ba      	ldrb	r2, [r7, #2]
 80036ca:	4611      	mov	r1, r2
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7ff fee1 	bl	8003494 <set_byte>
		set_byte(RESET_LEN+24*led+8, red);
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	4613      	mov	r3, r2
 80036d6:	005b      	lsls	r3, r3, #1
 80036d8:	4413      	add	r3, r2
 80036da:	00db      	lsls	r3, r3, #3
 80036dc:	336c      	adds	r3, #108	; 0x6c
 80036de:	78fa      	ldrb	r2, [r7, #3]
 80036e0:	4611      	mov	r1, r2
 80036e2:	4618      	mov	r0, r3
 80036e4:	f7ff fed6 	bl	8003494 <set_byte>
		set_byte(RESET_LEN+24*led+16, blue);
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	4613      	mov	r3, r2
 80036ec:	005b      	lsls	r3, r3, #1
 80036ee:	4413      	add	r3, r2
 80036f0:	00db      	lsls	r3, r3, #3
 80036f2:	3374      	adds	r3, #116	; 0x74
 80036f4:	787a      	ldrb	r2, [r7, #1]
 80036f6:	4611      	mov	r1, r2
 80036f8:	4618      	mov	r0, r3
 80036fa:	f7ff fecb 	bl	8003494 <set_byte>
	}
}
 80036fe:	bf00      	nop
 8003700:	3708      	adds	r7, #8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
	...

08003708 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003708:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003740 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800370c:	f7ff fb54 	bl	8002db8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003710:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003712:	e003      	b.n	800371c <LoopCopyDataInit>

08003714 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003714:	4b0b      	ldr	r3, [pc, #44]	; (8003744 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003716:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003718:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800371a:	3104      	adds	r1, #4

0800371c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800371c:	480a      	ldr	r0, [pc, #40]	; (8003748 <LoopForever+0xa>)
	ldr	r3, =_edata
 800371e:	4b0b      	ldr	r3, [pc, #44]	; (800374c <LoopForever+0xe>)
	adds	r2, r0, r1
 8003720:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003722:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003724:	d3f6      	bcc.n	8003714 <CopyDataInit>
	ldr	r2, =_sbss
 8003726:	4a0a      	ldr	r2, [pc, #40]	; (8003750 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003728:	e002      	b.n	8003730 <LoopFillZerobss>

0800372a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800372a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800372c:	f842 3b04 	str.w	r3, [r2], #4

08003730 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003730:	4b08      	ldr	r3, [pc, #32]	; (8003754 <LoopForever+0x16>)
	cmp	r2, r3
 8003732:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003734:	d3f9      	bcc.n	800372a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003736:	f006 ff3d 	bl	800a5b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800373a:	f7fd fedb 	bl	80014f4 <main>

0800373e <LoopForever>:

LoopForever:
    b LoopForever
 800373e:	e7fe      	b.n	800373e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003740:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8003744:	0800d874 	.word	0x0800d874
	ldr	r0, =_sdata
 8003748:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800374c:	20000264 	.word	0x20000264
	ldr	r2, =_sbss
 8003750:	20000264 	.word	0x20000264
	ldr	r3, = _ebss
 8003754:	20000ae8 	.word	0x20000ae8

08003758 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003758:	e7fe      	b.n	8003758 <ADC1_2_IRQHandler>

0800375a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800375a:	b580      	push	{r7, lr}
 800375c:	b082      	sub	sp, #8
 800375e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003760:	2300      	movs	r3, #0
 8003762:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003764:	2003      	movs	r0, #3
 8003766:	f001 fc51 	bl	800500c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800376a:	2000      	movs	r0, #0
 800376c:	f000 f80e 	bl	800378c <HAL_InitTick>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d002      	beq.n	800377c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	71fb      	strb	r3, [r7, #7]
 800377a:	e001      	b.n	8003780 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800377c:	f7ff f9e0 	bl	8002b40 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003780:	79fb      	ldrb	r3, [r7, #7]
}
 8003782:	4618      	mov	r0, r3
 8003784:	3708      	adds	r7, #8
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
	...

0800378c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003794:	2300      	movs	r3, #0
 8003796:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003798:	4b17      	ldr	r3, [pc, #92]	; (80037f8 <HAL_InitTick+0x6c>)
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d023      	beq.n	80037e8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80037a0:	4b16      	ldr	r3, [pc, #88]	; (80037fc <HAL_InitTick+0x70>)
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	4b14      	ldr	r3, [pc, #80]	; (80037f8 <HAL_InitTick+0x6c>)
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	4619      	mov	r1, r3
 80037aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80037b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037b6:	4618      	mov	r0, r3
 80037b8:	f001 fc5d 	bl	8005076 <HAL_SYSTICK_Config>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d10f      	bne.n	80037e2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2b0f      	cmp	r3, #15
 80037c6:	d809      	bhi.n	80037dc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037c8:	2200      	movs	r2, #0
 80037ca:	6879      	ldr	r1, [r7, #4]
 80037cc:	f04f 30ff 	mov.w	r0, #4294967295
 80037d0:	f001 fc27 	bl	8005022 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80037d4:	4a0a      	ldr	r2, [pc, #40]	; (8003800 <HAL_InitTick+0x74>)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6013      	str	r3, [r2, #0]
 80037da:	e007      	b.n	80037ec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	73fb      	strb	r3, [r7, #15]
 80037e0:	e004      	b.n	80037ec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	73fb      	strb	r3, [r7, #15]
 80037e6:	e001      	b.n	80037ec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80037ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3710      	adds	r7, #16
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	2000008c 	.word	0x2000008c
 80037fc:	20000084 	.word	0x20000084
 8003800:	20000088 	.word	0x20000088

08003804 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003804:	b480      	push	{r7}
 8003806:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003808:	4b06      	ldr	r3, [pc, #24]	; (8003824 <HAL_IncTick+0x20>)
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	461a      	mov	r2, r3
 800380e:	4b06      	ldr	r3, [pc, #24]	; (8003828 <HAL_IncTick+0x24>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4413      	add	r3, r2
 8003814:	4a04      	ldr	r2, [pc, #16]	; (8003828 <HAL_IncTick+0x24>)
 8003816:	6013      	str	r3, [r2, #0]
}
 8003818:	bf00      	nop
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	2000008c 	.word	0x2000008c
 8003828:	20000ad4 	.word	0x20000ad4

0800382c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0
  return uwTick;
 8003830:	4b03      	ldr	r3, [pc, #12]	; (8003840 <HAL_GetTick+0x14>)
 8003832:	681b      	ldr	r3, [r3, #0]
}
 8003834:	4618      	mov	r0, r3
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	20000ad4 	.word	0x20000ad4

08003844 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	431a      	orrs	r2, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	609a      	str	r2, [r3, #8]
}
 800385e:	bf00      	nop
 8003860:	370c      	adds	r7, #12
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr

0800386a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800386a:	b480      	push	{r7}
 800386c:	b083      	sub	sp, #12
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
 8003872:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	431a      	orrs	r2, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	609a      	str	r2, [r3, #8]
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b087      	sub	sp, #28
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	607a      	str	r2, [r7, #4]
 80038b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	3360      	adds	r3, #96	; 0x60
 80038be:	461a      	mov	r2, r3
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	4413      	add	r3, r2
 80038c6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	4b08      	ldr	r3, [pc, #32]	; (80038f0 <LL_ADC_SetOffset+0x44>)
 80038ce:	4013      	ands	r3, r2
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80038d6:	683a      	ldr	r2, [r7, #0]
 80038d8:	430a      	orrs	r2, r1
 80038da:	4313      	orrs	r3, r2
 80038dc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80038e4:	bf00      	nop
 80038e6:	371c      	adds	r7, #28
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr
 80038f0:	03fff000 	.word	0x03fff000

080038f4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	3360      	adds	r3, #96	; 0x60
 8003902:	461a      	mov	r2, r3
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	4413      	add	r3, r2
 800390a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003914:	4618      	mov	r0, r3
 8003916:	3714      	adds	r7, #20
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003920:	b480      	push	{r7}
 8003922:	b087      	sub	sp, #28
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	3360      	adds	r3, #96	; 0x60
 8003930:	461a      	mov	r2, r3
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	4413      	add	r3, r2
 8003938:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	431a      	orrs	r2, r3
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800394a:	bf00      	nop
 800394c:	371c      	adds	r7, #28
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr

08003956 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003956:	b480      	push	{r7}
 8003958:	b083      	sub	sp, #12
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800396a:	2301      	movs	r3, #1
 800396c:	e000      	b.n	8003970 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800396e:	2300      	movs	r3, #0
}
 8003970:	4618      	mov	r0, r3
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800397c:	b480      	push	{r7}
 800397e:	b087      	sub	sp, #28
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	3330      	adds	r3, #48	; 0x30
 800398c:	461a      	mov	r2, r3
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	0a1b      	lsrs	r3, r3, #8
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	f003 030c 	and.w	r3, r3, #12
 8003998:	4413      	add	r3, r2
 800399a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	f003 031f 	and.w	r3, r3, #31
 80039a6:	211f      	movs	r1, #31
 80039a8:	fa01 f303 	lsl.w	r3, r1, r3
 80039ac:	43db      	mvns	r3, r3
 80039ae:	401a      	ands	r2, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	0e9b      	lsrs	r3, r3, #26
 80039b4:	f003 011f 	and.w	r1, r3, #31
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	f003 031f 	and.w	r3, r3, #31
 80039be:	fa01 f303 	lsl.w	r3, r1, r3
 80039c2:	431a      	orrs	r2, r3
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80039c8:	bf00      	nop
 80039ca:	371c      	adds	r7, #28
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b087      	sub	sp, #28
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	3314      	adds	r3, #20
 80039e4:	461a      	mov	r2, r3
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	0e5b      	lsrs	r3, r3, #25
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	f003 0304 	and.w	r3, r3, #4
 80039f0:	4413      	add	r3, r2
 80039f2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	0d1b      	lsrs	r3, r3, #20
 80039fc:	f003 031f 	and.w	r3, r3, #31
 8003a00:	2107      	movs	r1, #7
 8003a02:	fa01 f303 	lsl.w	r3, r1, r3
 8003a06:	43db      	mvns	r3, r3
 8003a08:	401a      	ands	r2, r3
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	0d1b      	lsrs	r3, r3, #20
 8003a0e:	f003 031f 	and.w	r3, r3, #31
 8003a12:	6879      	ldr	r1, [r7, #4]
 8003a14:	fa01 f303 	lsl.w	r3, r1, r3
 8003a18:	431a      	orrs	r2, r3
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003a1e:	bf00      	nop
 8003a20:	371c      	adds	r7, #28
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
	...

08003a2c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b085      	sub	sp, #20
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a44:	43db      	mvns	r3, r3
 8003a46:	401a      	ands	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f003 0318 	and.w	r3, r3, #24
 8003a4e:	4908      	ldr	r1, [pc, #32]	; (8003a70 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003a50:	40d9      	lsrs	r1, r3
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	400b      	ands	r3, r1
 8003a56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a5a:	431a      	orrs	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003a62:	bf00      	nop
 8003a64:	3714      	adds	r7, #20
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	0007ffff 	.word	0x0007ffff

08003a74 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f003 031f 	and.w	r3, r3, #31
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003abc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	6093      	str	r3, [r2, #8]
}
 8003ac4:	bf00      	nop
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ae0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ae4:	d101      	bne.n	8003aea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e000      	b.n	8003aec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003aea:	2300      	movs	r3, #0
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003b08:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003b0c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003b14:	bf00      	nop
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b34:	d101      	bne.n	8003b3a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003b36:	2301      	movs	r3, #1
 8003b38:	e000      	b.n	8003b3c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003b3a:	2300      	movs	r3, #0
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003b58:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003b5c:	f043 0201 	orr.w	r2, r3, #1
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003b64:	bf00      	nop
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003b80:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003b84:	f043 0202 	orr.w	r2, r3, #2
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003b8c:	bf00      	nop
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	f003 0301 	and.w	r3, r3, #1
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d101      	bne.n	8003bb0 <LL_ADC_IsEnabled+0x18>
 8003bac:	2301      	movs	r3, #1
 8003bae:	e000      	b.n	8003bb2 <LL_ADC_IsEnabled+0x1a>
 8003bb0:	2300      	movs	r3, #0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	370c      	adds	r7, #12
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr

08003bbe <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003bbe:	b480      	push	{r7}
 8003bc0:	b083      	sub	sp, #12
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d101      	bne.n	8003bd6 <LL_ADC_IsDisableOngoing+0x18>
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e000      	b.n	8003bd8 <LL_ADC_IsDisableOngoing+0x1a>
 8003bd6:	2300      	movs	r3, #0
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003bf4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003bf8:	f043 0204 	orr.w	r2, r3, #4
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003c00:	bf00      	nop
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	f003 0304 	and.w	r3, r3, #4
 8003c1c:	2b04      	cmp	r3, #4
 8003c1e:	d101      	bne.n	8003c24 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003c20:	2301      	movs	r3, #1
 8003c22:	e000      	b.n	8003c26 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	370c      	adds	r7, #12
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr

08003c32 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003c32:	b480      	push	{r7}
 8003c34:	b083      	sub	sp, #12
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f003 0308 	and.w	r3, r3, #8
 8003c42:	2b08      	cmp	r3, #8
 8003c44:	d101      	bne.n	8003c4a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003c46:	2301      	movs	r3, #1
 8003c48:	e000      	b.n	8003c4c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003c4a:	2300      	movs	r3, #0
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003c58:	b590      	push	{r4, r7, lr}
 8003c5a:	b089      	sub	sp, #36	; 0x24
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c60:	2300      	movs	r3, #0
 8003c62:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003c64:	2300      	movs	r3, #0
 8003c66:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d101      	bne.n	8003c72 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e136      	b.n	8003ee0 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d109      	bne.n	8003c94 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f7fd f98f 	bl	8000fa4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f7ff ff19 	bl	8003ad0 <LL_ADC_IsDeepPowerDownEnabled>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d004      	beq.n	8003cae <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f7ff feff 	bl	8003aac <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f7ff ff34 	bl	8003b20 <LL_ADC_IsInternalRegulatorEnabled>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d115      	bne.n	8003cea <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f7ff ff18 	bl	8003af8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003cc8:	4b87      	ldr	r3, [pc, #540]	; (8003ee8 <HAL_ADC_Init+0x290>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	099b      	lsrs	r3, r3, #6
 8003cce:	4a87      	ldr	r2, [pc, #540]	; (8003eec <HAL_ADC_Init+0x294>)
 8003cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd4:	099b      	lsrs	r3, r3, #6
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	005b      	lsls	r3, r3, #1
 8003cda:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003cdc:	e002      	b.n	8003ce4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	3b01      	subs	r3, #1
 8003ce2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1f9      	bne.n	8003cde <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f7ff ff16 	bl	8003b20 <LL_ADC_IsInternalRegulatorEnabled>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d10d      	bne.n	8003d16 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cfe:	f043 0210 	orr.w	r2, r3, #16
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d0a:	f043 0201 	orr.w	r2, r3, #1
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7ff ff76 	bl	8003c0c <LL_ADC_REG_IsConversionOngoing>
 8003d20:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d26:	f003 0310 	and.w	r3, r3, #16
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	f040 80cf 	bne.w	8003ece <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	f040 80cb 	bne.w	8003ece <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d3c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003d40:	f043 0202 	orr.w	r2, r3, #2
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f7ff ff23 	bl	8003b98 <LL_ADC_IsEnabled>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d115      	bne.n	8003d84 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d58:	4865      	ldr	r0, [pc, #404]	; (8003ef0 <HAL_ADC_Init+0x298>)
 8003d5a:	f7ff ff1d 	bl	8003b98 <LL_ADC_IsEnabled>
 8003d5e:	4604      	mov	r4, r0
 8003d60:	4864      	ldr	r0, [pc, #400]	; (8003ef4 <HAL_ADC_Init+0x29c>)
 8003d62:	f7ff ff19 	bl	8003b98 <LL_ADC_IsEnabled>
 8003d66:	4603      	mov	r3, r0
 8003d68:	431c      	orrs	r4, r3
 8003d6a:	4863      	ldr	r0, [pc, #396]	; (8003ef8 <HAL_ADC_Init+0x2a0>)
 8003d6c:	f7ff ff14 	bl	8003b98 <LL_ADC_IsEnabled>
 8003d70:	4603      	mov	r3, r0
 8003d72:	4323      	orrs	r3, r4
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d105      	bne.n	8003d84 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	485f      	ldr	r0, [pc, #380]	; (8003efc <HAL_ADC_Init+0x2a4>)
 8003d80:	f7ff fd60 	bl	8003844 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	7e5b      	ldrb	r3, [r3, #25]
 8003d88:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003d8e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003d94:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003d9a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003da2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003da4:	4313      	orrs	r3, r2
 8003da6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d106      	bne.n	8003dc0 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db6:	3b01      	subs	r3, #1
 8003db8:	045b      	lsls	r3, r3, #17
 8003dba:	69ba      	ldr	r2, [r7, #24]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d009      	beq.n	8003ddc <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dcc:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003dd6:	69ba      	ldr	r2, [r7, #24]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68da      	ldr	r2, [r3, #12]
 8003de2:	4b47      	ldr	r3, [pc, #284]	; (8003f00 <HAL_ADC_Init+0x2a8>)
 8003de4:	4013      	ands	r3, r2
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	6812      	ldr	r2, [r2, #0]
 8003dea:	69b9      	ldr	r1, [r7, #24]
 8003dec:	430b      	orrs	r3, r1
 8003dee:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4618      	mov	r0, r3
 8003df6:	f7ff ff09 	bl	8003c0c <LL_ADC_REG_IsConversionOngoing>
 8003dfa:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7ff ff16 	bl	8003c32 <LL_ADC_INJ_IsConversionOngoing>
 8003e06:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d13d      	bne.n	8003e8a <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d13a      	bne.n	8003e8a <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003e18:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003e20:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003e22:	4313      	orrs	r3, r2
 8003e24:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e30:	f023 0302 	bic.w	r3, r3, #2
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	6812      	ldr	r2, [r2, #0]
 8003e38:	69b9      	ldr	r1, [r7, #24]
 8003e3a:	430b      	orrs	r3, r1
 8003e3c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d118      	bne.n	8003e7a <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003e52:	f023 0304 	bic.w	r3, r3, #4
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003e5e:	4311      	orrs	r1, r2
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003e64:	4311      	orrs	r1, r2
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003e6a:	430a      	orrs	r2, r1
 8003e6c:	431a      	orrs	r2, r3
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f042 0201 	orr.w	r2, r2, #1
 8003e76:	611a      	str	r2, [r3, #16]
 8003e78:	e007      	b.n	8003e8a <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	691a      	ldr	r2, [r3, #16]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f022 0201 	bic.w	r2, r2, #1
 8003e88:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d10c      	bne.n	8003eac <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e98:	f023 010f 	bic.w	r1, r3, #15
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	69db      	ldr	r3, [r3, #28]
 8003ea0:	1e5a      	subs	r2, r3, #1
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	631a      	str	r2, [r3, #48]	; 0x30
 8003eaa:	e007      	b.n	8003ebc <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f022 020f 	bic.w	r2, r2, #15
 8003eba:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ec0:	f023 0303 	bic.w	r3, r3, #3
 8003ec4:	f043 0201 	orr.w	r2, r3, #1
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	655a      	str	r2, [r3, #84]	; 0x54
 8003ecc:	e007      	b.n	8003ede <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed2:	f043 0210 	orr.w	r2, r3, #16
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003ede:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3724      	adds	r7, #36	; 0x24
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd90      	pop	{r4, r7, pc}
 8003ee8:	20000084 	.word	0x20000084
 8003eec:	053e2d63 	.word	0x053e2d63
 8003ef0:	50040000 	.word	0x50040000
 8003ef4:	50040100 	.word	0x50040100
 8003ef8:	50040200 	.word	0x50040200
 8003efc:	50040300 	.word	0x50040300
 8003f00:	fff0c007 	.word	0xfff0c007

08003f04 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b086      	sub	sp, #24
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003f0c:	4857      	ldr	r0, [pc, #348]	; (800406c <HAL_ADC_Start+0x168>)
 8003f0e:	f7ff fdb1 	bl	8003a74 <LL_ADC_GetMultimode>
 8003f12:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f7ff fe77 	bl	8003c0c <LL_ADC_REG_IsConversionOngoing>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	f040 809c 	bne.w	800405e <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d101      	bne.n	8003f34 <HAL_ADC_Start+0x30>
 8003f30:	2302      	movs	r3, #2
 8003f32:	e097      	b.n	8004064 <HAL_ADC_Start+0x160>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f000 fd71 	bl	8004a24 <ADC_Enable>
 8003f42:	4603      	mov	r3, r0
 8003f44:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003f46:	7dfb      	ldrb	r3, [r7, #23]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	f040 8083 	bne.w	8004054 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f52:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003f56:	f023 0301 	bic.w	r3, r3, #1
 8003f5a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a42      	ldr	r2, [pc, #264]	; (8004070 <HAL_ADC_Start+0x16c>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d002      	beq.n	8003f72 <HAL_ADC_Start+0x6e>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	e000      	b.n	8003f74 <HAL_ADC_Start+0x70>
 8003f72:	4b40      	ldr	r3, [pc, #256]	; (8004074 <HAL_ADC_Start+0x170>)
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	6812      	ldr	r2, [r2, #0]
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d002      	beq.n	8003f82 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d105      	bne.n	8003f8e <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f86:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f9a:	d106      	bne.n	8003faa <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fa0:	f023 0206 	bic.w	r2, r3, #6
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	659a      	str	r2, [r3, #88]	; 0x58
 8003fa8:	e002      	b.n	8003fb0 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	221c      	movs	r2, #28
 8003fb6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a2a      	ldr	r2, [pc, #168]	; (8004070 <HAL_ADC_Start+0x16c>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d002      	beq.n	8003fd0 <HAL_ADC_Start+0xcc>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	e000      	b.n	8003fd2 <HAL_ADC_Start+0xce>
 8003fd0:	4b28      	ldr	r3, [pc, #160]	; (8004074 <HAL_ADC_Start+0x170>)
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	6812      	ldr	r2, [r2, #0]
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d008      	beq.n	8003fec <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d005      	beq.n	8003fec <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	2b05      	cmp	r3, #5
 8003fe4:	d002      	beq.n	8003fec <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	2b09      	cmp	r3, #9
 8003fea:	d114      	bne.n	8004016 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d007      	beq.n	800400a <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ffe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004002:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4618      	mov	r0, r3
 8004010:	f7ff fde8 	bl	8003be4 <LL_ADC_REG_StartConversion>
 8004014:	e025      	b.n	8004062 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800401a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a12      	ldr	r2, [pc, #72]	; (8004070 <HAL_ADC_Start+0x16c>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d002      	beq.n	8004032 <HAL_ADC_Start+0x12e>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	e000      	b.n	8004034 <HAL_ADC_Start+0x130>
 8004032:	4b10      	ldr	r3, [pc, #64]	; (8004074 <HAL_ADC_Start+0x170>)
 8004034:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d00f      	beq.n	8004062 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004046:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800404a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	655a      	str	r2, [r3, #84]	; 0x54
 8004052:	e006      	b.n	8004062 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800405c:	e001      	b.n	8004062 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800405e:	2302      	movs	r3, #2
 8004060:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004062:	7dfb      	ldrb	r3, [r7, #23]
}
 8004064:	4618      	mov	r0, r3
 8004066:	3718      	adds	r7, #24
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}
 800406c:	50040300 	.word	0x50040300
 8004070:	50040100 	.word	0x50040100
 8004074:	50040000 	.word	0x50040000

08004078 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b088      	sub	sp, #32
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004082:	4866      	ldr	r0, [pc, #408]	; (800421c <HAL_ADC_PollForConversion+0x1a4>)
 8004084:	f7ff fcf6 	bl	8003a74 <LL_ADC_GetMultimode>
 8004088:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	695b      	ldr	r3, [r3, #20]
 800408e:	2b08      	cmp	r3, #8
 8004090:	d102      	bne.n	8004098 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8004092:	2308      	movs	r3, #8
 8004094:	61fb      	str	r3, [r7, #28]
 8004096:	e02a      	b.n	80040ee <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d005      	beq.n	80040aa <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	2b05      	cmp	r3, #5
 80040a2:	d002      	beq.n	80040aa <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	2b09      	cmp	r3, #9
 80040a8:	d111      	bne.n	80040ce <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	f003 0301 	and.w	r3, r3, #1
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d007      	beq.n	80040c8 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040bc:	f043 0220 	orr.w	r2, r3, #32
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e0a4      	b.n	8004212 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80040c8:	2304      	movs	r3, #4
 80040ca:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80040cc:	e00f      	b.n	80040ee <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80040ce:	4853      	ldr	r0, [pc, #332]	; (800421c <HAL_ADC_PollForConversion+0x1a4>)
 80040d0:	f7ff fcde 	bl	8003a90 <LL_ADC_GetMultiDMATransfer>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d007      	beq.n	80040ea <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040de:	f043 0220 	orr.w	r2, r3, #32
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e093      	b.n	8004212 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80040ea:	2304      	movs	r3, #4
 80040ec:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80040ee:	f7ff fb9d 	bl	800382c <HAL_GetTick>
 80040f2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80040f4:	e021      	b.n	800413a <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040fc:	d01d      	beq.n	800413a <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80040fe:	f7ff fb95 	bl	800382c <HAL_GetTick>
 8004102:	4602      	mov	r2, r0
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	683a      	ldr	r2, [r7, #0]
 800410a:	429a      	cmp	r2, r3
 800410c:	d302      	bcc.n	8004114 <HAL_ADC_PollForConversion+0x9c>
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d112      	bne.n	800413a <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	4013      	ands	r3, r2
 800411e:	2b00      	cmp	r3, #0
 8004120:	d10b      	bne.n	800413a <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004126:	f043 0204 	orr.w	r2, r3, #4
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e06b      	b.n	8004212 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	4013      	ands	r3, r2
 8004144:	2b00      	cmp	r3, #0
 8004146:	d0d6      	beq.n	80040f6 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800414c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4618      	mov	r0, r3
 800415a:	f7ff fbfc 	bl	8003956 <LL_ADC_REG_IsTriggerSourceSWStart>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d01c      	beq.n	800419e <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	7e5b      	ldrb	r3, [r3, #25]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d118      	bne.n	800419e <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0308 	and.w	r3, r3, #8
 8004176:	2b08      	cmp	r3, #8
 8004178:	d111      	bne.n	800419e <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800417e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800418a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d105      	bne.n	800419e <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004196:	f043 0201 	orr.w	r2, r3, #1
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a1f      	ldr	r2, [pc, #124]	; (8004220 <HAL_ADC_PollForConversion+0x1a8>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d002      	beq.n	80041ae <HAL_ADC_PollForConversion+0x136>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	e000      	b.n	80041b0 <HAL_ADC_PollForConversion+0x138>
 80041ae:	4b1d      	ldr	r3, [pc, #116]	; (8004224 <HAL_ADC_PollForConversion+0x1ac>)
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	6812      	ldr	r2, [r2, #0]
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d008      	beq.n	80041ca <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d005      	beq.n	80041ca <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	2b05      	cmp	r3, #5
 80041c2:	d002      	beq.n	80041ca <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	2b09      	cmp	r3, #9
 80041c8:	d104      	bne.n	80041d4 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	61bb      	str	r3, [r7, #24]
 80041d2:	e00c      	b.n	80041ee <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a11      	ldr	r2, [pc, #68]	; (8004220 <HAL_ADC_PollForConversion+0x1a8>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d002      	beq.n	80041e4 <HAL_ADC_PollForConversion+0x16c>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	e000      	b.n	80041e6 <HAL_ADC_PollForConversion+0x16e>
 80041e4:	4b0f      	ldr	r3, [pc, #60]	; (8004224 <HAL_ADC_PollForConversion+0x1ac>)
 80041e6:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	2b08      	cmp	r3, #8
 80041f2:	d104      	bne.n	80041fe <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2208      	movs	r2, #8
 80041fa:	601a      	str	r2, [r3, #0]
 80041fc:	e008      	b.n	8004210 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d103      	bne.n	8004210 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	220c      	movs	r2, #12
 800420e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8004210:	2300      	movs	r3, #0
}
 8004212:	4618      	mov	r0, r3
 8004214:	3720      	adds	r7, #32
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	50040300 	.word	0x50040300
 8004220:	50040100 	.word	0x50040100
 8004224:	50040000 	.word	0x50040000

08004228 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004236:	4618      	mov	r0, r3
 8004238:	370c      	adds	r7, #12
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
	...

08004244 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b0b6      	sub	sp, #216	; 0xd8
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800424e:	2300      	movs	r3, #0
 8004250:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004254:	2300      	movs	r3, #0
 8004256:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800425e:	2b01      	cmp	r3, #1
 8004260:	d101      	bne.n	8004266 <HAL_ADC_ConfigChannel+0x22>
 8004262:	2302      	movs	r3, #2
 8004264:	e3c7      	b.n	80049f6 <HAL_ADC_ConfigChannel+0x7b2>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2201      	movs	r2, #1
 800426a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4618      	mov	r0, r3
 8004274:	f7ff fcca 	bl	8003c0c <LL_ADC_REG_IsConversionOngoing>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	f040 83a8 	bne.w	80049d0 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	2b05      	cmp	r3, #5
 8004286:	d824      	bhi.n	80042d2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	3b02      	subs	r3, #2
 800428e:	2b03      	cmp	r3, #3
 8004290:	d81b      	bhi.n	80042ca <HAL_ADC_ConfigChannel+0x86>
 8004292:	a201      	add	r2, pc, #4	; (adr r2, 8004298 <HAL_ADC_ConfigChannel+0x54>)
 8004294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004298:	080042a9 	.word	0x080042a9
 800429c:	080042b1 	.word	0x080042b1
 80042a0:	080042b9 	.word	0x080042b9
 80042a4:	080042c1 	.word	0x080042c1
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	220c      	movs	r2, #12
 80042ac:	605a      	str	r2, [r3, #4]
          break;
 80042ae:	e011      	b.n	80042d4 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	2212      	movs	r2, #18
 80042b4:	605a      	str	r2, [r3, #4]
          break;
 80042b6:	e00d      	b.n	80042d4 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	2218      	movs	r2, #24
 80042bc:	605a      	str	r2, [r3, #4]
          break;
 80042be:	e009      	b.n	80042d4 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80042c6:	605a      	str	r2, [r3, #4]
          break;
 80042c8:	e004      	b.n	80042d4 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	2206      	movs	r2, #6
 80042ce:	605a      	str	r2, [r3, #4]
          break;
 80042d0:	e000      	b.n	80042d4 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80042d2:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6818      	ldr	r0, [r3, #0]
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	6859      	ldr	r1, [r3, #4]
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	461a      	mov	r2, r3
 80042e2:	f7ff fb4b 	bl	800397c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7ff fc8e 	bl	8003c0c <LL_ADC_REG_IsConversionOngoing>
 80042f0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4618      	mov	r0, r3
 80042fa:	f7ff fc9a 	bl	8003c32 <LL_ADC_INJ_IsConversionOngoing>
 80042fe:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004302:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004306:	2b00      	cmp	r3, #0
 8004308:	f040 81a6 	bne.w	8004658 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800430c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004310:	2b00      	cmp	r3, #0
 8004312:	f040 81a1 	bne.w	8004658 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6818      	ldr	r0, [r3, #0]
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	6819      	ldr	r1, [r3, #0]
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	461a      	mov	r2, r3
 8004324:	f7ff fb56 	bl	80039d4 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	695a      	ldr	r2, [r3, #20]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	08db      	lsrs	r3, r3, #3
 8004334:	f003 0303 	and.w	r3, r3, #3
 8004338:	005b      	lsls	r3, r3, #1
 800433a:	fa02 f303 	lsl.w	r3, r2, r3
 800433e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	2b04      	cmp	r3, #4
 8004348:	d00a      	beq.n	8004360 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6818      	ldr	r0, [r3, #0]
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	6919      	ldr	r1, [r3, #16]
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800435a:	f7ff faa7 	bl	80038ac <LL_ADC_SetOffset>
 800435e:	e17b      	b.n	8004658 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2100      	movs	r1, #0
 8004366:	4618      	mov	r0, r3
 8004368:	f7ff fac4 	bl	80038f4 <LL_ADC_GetOffsetChannel>
 800436c:	4603      	mov	r3, r0
 800436e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004372:	2b00      	cmp	r3, #0
 8004374:	d10a      	bne.n	800438c <HAL_ADC_ConfigChannel+0x148>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2100      	movs	r1, #0
 800437c:	4618      	mov	r0, r3
 800437e:	f7ff fab9 	bl	80038f4 <LL_ADC_GetOffsetChannel>
 8004382:	4603      	mov	r3, r0
 8004384:	0e9b      	lsrs	r3, r3, #26
 8004386:	f003 021f 	and.w	r2, r3, #31
 800438a:	e01e      	b.n	80043ca <HAL_ADC_ConfigChannel+0x186>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2100      	movs	r1, #0
 8004392:	4618      	mov	r0, r3
 8004394:	f7ff faae 	bl	80038f4 <LL_ADC_GetOffsetChannel>
 8004398:	4603      	mov	r3, r0
 800439a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800439e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80043a2:	fa93 f3a3 	rbit	r3, r3
 80043a6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80043aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80043ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80043b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d101      	bne.n	80043be <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80043ba:	2320      	movs	r3, #32
 80043bc:	e004      	b.n	80043c8 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80043be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80043c2:	fab3 f383 	clz	r3, r3
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d105      	bne.n	80043e2 <HAL_ADC_ConfigChannel+0x19e>
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	0e9b      	lsrs	r3, r3, #26
 80043dc:	f003 031f 	and.w	r3, r3, #31
 80043e0:	e018      	b.n	8004414 <HAL_ADC_ConfigChannel+0x1d0>
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80043ee:	fa93 f3a3 	rbit	r3, r3
 80043f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80043f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80043fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80043fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004402:	2b00      	cmp	r3, #0
 8004404:	d101      	bne.n	800440a <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8004406:	2320      	movs	r3, #32
 8004408:	e004      	b.n	8004414 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800440a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800440e:	fab3 f383 	clz	r3, r3
 8004412:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004414:	429a      	cmp	r2, r3
 8004416:	d106      	bne.n	8004426 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2200      	movs	r2, #0
 800441e:	2100      	movs	r1, #0
 8004420:	4618      	mov	r0, r3
 8004422:	f7ff fa7d 	bl	8003920 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2101      	movs	r1, #1
 800442c:	4618      	mov	r0, r3
 800442e:	f7ff fa61 	bl	80038f4 <LL_ADC_GetOffsetChannel>
 8004432:	4603      	mov	r3, r0
 8004434:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004438:	2b00      	cmp	r3, #0
 800443a:	d10a      	bne.n	8004452 <HAL_ADC_ConfigChannel+0x20e>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2101      	movs	r1, #1
 8004442:	4618      	mov	r0, r3
 8004444:	f7ff fa56 	bl	80038f4 <LL_ADC_GetOffsetChannel>
 8004448:	4603      	mov	r3, r0
 800444a:	0e9b      	lsrs	r3, r3, #26
 800444c:	f003 021f 	and.w	r2, r3, #31
 8004450:	e01e      	b.n	8004490 <HAL_ADC_ConfigChannel+0x24c>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2101      	movs	r1, #1
 8004458:	4618      	mov	r0, r3
 800445a:	f7ff fa4b 	bl	80038f4 <LL_ADC_GetOffsetChannel>
 800445e:	4603      	mov	r3, r0
 8004460:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004464:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004468:	fa93 f3a3 	rbit	r3, r3
 800446c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004470:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004474:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004478:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800447c:	2b00      	cmp	r3, #0
 800447e:	d101      	bne.n	8004484 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8004480:	2320      	movs	r3, #32
 8004482:	e004      	b.n	800448e <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8004484:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004488:	fab3 f383 	clz	r3, r3
 800448c:	b2db      	uxtb	r3, r3
 800448e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004498:	2b00      	cmp	r3, #0
 800449a:	d105      	bne.n	80044a8 <HAL_ADC_ConfigChannel+0x264>
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	0e9b      	lsrs	r3, r3, #26
 80044a2:	f003 031f 	and.w	r3, r3, #31
 80044a6:	e018      	b.n	80044da <HAL_ADC_ConfigChannel+0x296>
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80044b4:	fa93 f3a3 	rbit	r3, r3
 80044b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80044bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80044c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80044c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d101      	bne.n	80044d0 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80044cc:	2320      	movs	r3, #32
 80044ce:	e004      	b.n	80044da <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80044d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80044d4:	fab3 f383 	clz	r3, r3
 80044d8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80044da:	429a      	cmp	r2, r3
 80044dc:	d106      	bne.n	80044ec <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2200      	movs	r2, #0
 80044e4:	2101      	movs	r1, #1
 80044e6:	4618      	mov	r0, r3
 80044e8:	f7ff fa1a 	bl	8003920 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2102      	movs	r1, #2
 80044f2:	4618      	mov	r0, r3
 80044f4:	f7ff f9fe 	bl	80038f4 <LL_ADC_GetOffsetChannel>
 80044f8:	4603      	mov	r3, r0
 80044fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d10a      	bne.n	8004518 <HAL_ADC_ConfigChannel+0x2d4>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	2102      	movs	r1, #2
 8004508:	4618      	mov	r0, r3
 800450a:	f7ff f9f3 	bl	80038f4 <LL_ADC_GetOffsetChannel>
 800450e:	4603      	mov	r3, r0
 8004510:	0e9b      	lsrs	r3, r3, #26
 8004512:	f003 021f 	and.w	r2, r3, #31
 8004516:	e01e      	b.n	8004556 <HAL_ADC_ConfigChannel+0x312>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2102      	movs	r1, #2
 800451e:	4618      	mov	r0, r3
 8004520:	f7ff f9e8 	bl	80038f4 <LL_ADC_GetOffsetChannel>
 8004524:	4603      	mov	r3, r0
 8004526:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800452a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800452e:	fa93 f3a3 	rbit	r3, r3
 8004532:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004536:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800453a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800453e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004542:	2b00      	cmp	r3, #0
 8004544:	d101      	bne.n	800454a <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8004546:	2320      	movs	r3, #32
 8004548:	e004      	b.n	8004554 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800454a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800454e:	fab3 f383 	clz	r3, r3
 8004552:	b2db      	uxtb	r3, r3
 8004554:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800455e:	2b00      	cmp	r3, #0
 8004560:	d105      	bne.n	800456e <HAL_ADC_ConfigChannel+0x32a>
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	0e9b      	lsrs	r3, r3, #26
 8004568:	f003 031f 	and.w	r3, r3, #31
 800456c:	e016      	b.n	800459c <HAL_ADC_ConfigChannel+0x358>
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004576:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800457a:	fa93 f3a3 	rbit	r3, r3
 800457e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004580:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004582:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004586:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800458a:	2b00      	cmp	r3, #0
 800458c:	d101      	bne.n	8004592 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800458e:	2320      	movs	r3, #32
 8004590:	e004      	b.n	800459c <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8004592:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004596:	fab3 f383 	clz	r3, r3
 800459a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800459c:	429a      	cmp	r2, r3
 800459e:	d106      	bne.n	80045ae <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2200      	movs	r2, #0
 80045a6:	2102      	movs	r1, #2
 80045a8:	4618      	mov	r0, r3
 80045aa:	f7ff f9b9 	bl	8003920 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	2103      	movs	r1, #3
 80045b4:	4618      	mov	r0, r3
 80045b6:	f7ff f99d 	bl	80038f4 <LL_ADC_GetOffsetChannel>
 80045ba:	4603      	mov	r3, r0
 80045bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d10a      	bne.n	80045da <HAL_ADC_ConfigChannel+0x396>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2103      	movs	r1, #3
 80045ca:	4618      	mov	r0, r3
 80045cc:	f7ff f992 	bl	80038f4 <LL_ADC_GetOffsetChannel>
 80045d0:	4603      	mov	r3, r0
 80045d2:	0e9b      	lsrs	r3, r3, #26
 80045d4:	f003 021f 	and.w	r2, r3, #31
 80045d8:	e017      	b.n	800460a <HAL_ADC_ConfigChannel+0x3c6>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	2103      	movs	r1, #3
 80045e0:	4618      	mov	r0, r3
 80045e2:	f7ff f987 	bl	80038f4 <LL_ADC_GetOffsetChannel>
 80045e6:	4603      	mov	r3, r0
 80045e8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045ec:	fa93 f3a3 	rbit	r3, r3
 80045f0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80045f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045f4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80045f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d101      	bne.n	8004600 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80045fc:	2320      	movs	r3, #32
 80045fe:	e003      	b.n	8004608 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8004600:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004602:	fab3 f383 	clz	r3, r3
 8004606:	b2db      	uxtb	r3, r3
 8004608:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004612:	2b00      	cmp	r3, #0
 8004614:	d105      	bne.n	8004622 <HAL_ADC_ConfigChannel+0x3de>
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	0e9b      	lsrs	r3, r3, #26
 800461c:	f003 031f 	and.w	r3, r3, #31
 8004620:	e011      	b.n	8004646 <HAL_ADC_ConfigChannel+0x402>
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004628:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800462a:	fa93 f3a3 	rbit	r3, r3
 800462e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004630:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004632:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004634:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004636:	2b00      	cmp	r3, #0
 8004638:	d101      	bne.n	800463e <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800463a:	2320      	movs	r3, #32
 800463c:	e003      	b.n	8004646 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800463e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004640:	fab3 f383 	clz	r3, r3
 8004644:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004646:	429a      	cmp	r2, r3
 8004648:	d106      	bne.n	8004658 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	2200      	movs	r2, #0
 8004650:	2103      	movs	r1, #3
 8004652:	4618      	mov	r0, r3
 8004654:	f7ff f964 	bl	8003920 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4618      	mov	r0, r3
 800465e:	f7ff fa9b 	bl	8003b98 <LL_ADC_IsEnabled>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	f040 813f 	bne.w	80048e8 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6818      	ldr	r0, [r3, #0]
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	6819      	ldr	r1, [r3, #0]
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	461a      	mov	r2, r3
 8004678:	f7ff f9d8 	bl	8003a2c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	4a8e      	ldr	r2, [pc, #568]	; (80048bc <HAL_ADC_ConfigChannel+0x678>)
 8004682:	4293      	cmp	r3, r2
 8004684:	f040 8130 	bne.w	80048e8 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004694:	2b00      	cmp	r3, #0
 8004696:	d10b      	bne.n	80046b0 <HAL_ADC_ConfigChannel+0x46c>
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	0e9b      	lsrs	r3, r3, #26
 800469e:	3301      	adds	r3, #1
 80046a0:	f003 031f 	and.w	r3, r3, #31
 80046a4:	2b09      	cmp	r3, #9
 80046a6:	bf94      	ite	ls
 80046a8:	2301      	movls	r3, #1
 80046aa:	2300      	movhi	r3, #0
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	e019      	b.n	80046e4 <HAL_ADC_ConfigChannel+0x4a0>
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046b8:	fa93 f3a3 	rbit	r3, r3
 80046bc:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80046be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046c0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80046c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d101      	bne.n	80046cc <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80046c8:	2320      	movs	r3, #32
 80046ca:	e003      	b.n	80046d4 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80046cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80046ce:	fab3 f383 	clz	r3, r3
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	3301      	adds	r3, #1
 80046d6:	f003 031f 	and.w	r3, r3, #31
 80046da:	2b09      	cmp	r3, #9
 80046dc:	bf94      	ite	ls
 80046de:	2301      	movls	r3, #1
 80046e0:	2300      	movhi	r3, #0
 80046e2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d079      	beq.n	80047dc <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d107      	bne.n	8004704 <HAL_ADC_ConfigChannel+0x4c0>
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	0e9b      	lsrs	r3, r3, #26
 80046fa:	3301      	adds	r3, #1
 80046fc:	069b      	lsls	r3, r3, #26
 80046fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004702:	e015      	b.n	8004730 <HAL_ADC_ConfigChannel+0x4ec>
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800470a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800470c:	fa93 f3a3 	rbit	r3, r3
 8004710:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004712:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004714:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004716:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004718:	2b00      	cmp	r3, #0
 800471a:	d101      	bne.n	8004720 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 800471c:	2320      	movs	r3, #32
 800471e:	e003      	b.n	8004728 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8004720:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004722:	fab3 f383 	clz	r3, r3
 8004726:	b2db      	uxtb	r3, r3
 8004728:	3301      	adds	r3, #1
 800472a:	069b      	lsls	r3, r3, #26
 800472c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004738:	2b00      	cmp	r3, #0
 800473a:	d109      	bne.n	8004750 <HAL_ADC_ConfigChannel+0x50c>
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	0e9b      	lsrs	r3, r3, #26
 8004742:	3301      	adds	r3, #1
 8004744:	f003 031f 	and.w	r3, r3, #31
 8004748:	2101      	movs	r1, #1
 800474a:	fa01 f303 	lsl.w	r3, r1, r3
 800474e:	e017      	b.n	8004780 <HAL_ADC_ConfigChannel+0x53c>
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004756:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004758:	fa93 f3a3 	rbit	r3, r3
 800475c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800475e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004760:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004762:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004764:	2b00      	cmp	r3, #0
 8004766:	d101      	bne.n	800476c <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8004768:	2320      	movs	r3, #32
 800476a:	e003      	b.n	8004774 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 800476c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800476e:	fab3 f383 	clz	r3, r3
 8004772:	b2db      	uxtb	r3, r3
 8004774:	3301      	adds	r3, #1
 8004776:	f003 031f 	and.w	r3, r3, #31
 800477a:	2101      	movs	r1, #1
 800477c:	fa01 f303 	lsl.w	r3, r1, r3
 8004780:	ea42 0103 	orr.w	r1, r2, r3
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800478c:	2b00      	cmp	r3, #0
 800478e:	d10a      	bne.n	80047a6 <HAL_ADC_ConfigChannel+0x562>
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	0e9b      	lsrs	r3, r3, #26
 8004796:	3301      	adds	r3, #1
 8004798:	f003 021f 	and.w	r2, r3, #31
 800479c:	4613      	mov	r3, r2
 800479e:	005b      	lsls	r3, r3, #1
 80047a0:	4413      	add	r3, r2
 80047a2:	051b      	lsls	r3, r3, #20
 80047a4:	e018      	b.n	80047d8 <HAL_ADC_ConfigChannel+0x594>
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ae:	fa93 f3a3 	rbit	r3, r3
 80047b2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80047b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80047b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d101      	bne.n	80047c2 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80047be:	2320      	movs	r3, #32
 80047c0:	e003      	b.n	80047ca <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80047c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047c4:	fab3 f383 	clz	r3, r3
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	3301      	adds	r3, #1
 80047cc:	f003 021f 	and.w	r2, r3, #31
 80047d0:	4613      	mov	r3, r2
 80047d2:	005b      	lsls	r3, r3, #1
 80047d4:	4413      	add	r3, r2
 80047d6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80047d8:	430b      	orrs	r3, r1
 80047da:	e080      	b.n	80048de <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d107      	bne.n	80047f8 <HAL_ADC_ConfigChannel+0x5b4>
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	0e9b      	lsrs	r3, r3, #26
 80047ee:	3301      	adds	r3, #1
 80047f0:	069b      	lsls	r3, r3, #26
 80047f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80047f6:	e015      	b.n	8004824 <HAL_ADC_ConfigChannel+0x5e0>
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004800:	fa93 f3a3 	rbit	r3, r3
 8004804:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004808:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800480a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800480c:	2b00      	cmp	r3, #0
 800480e:	d101      	bne.n	8004814 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8004810:	2320      	movs	r3, #32
 8004812:	e003      	b.n	800481c <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8004814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004816:	fab3 f383 	clz	r3, r3
 800481a:	b2db      	uxtb	r3, r3
 800481c:	3301      	adds	r3, #1
 800481e:	069b      	lsls	r3, r3, #26
 8004820:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800482c:	2b00      	cmp	r3, #0
 800482e:	d109      	bne.n	8004844 <HAL_ADC_ConfigChannel+0x600>
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	0e9b      	lsrs	r3, r3, #26
 8004836:	3301      	adds	r3, #1
 8004838:	f003 031f 	and.w	r3, r3, #31
 800483c:	2101      	movs	r1, #1
 800483e:	fa01 f303 	lsl.w	r3, r1, r3
 8004842:	e017      	b.n	8004874 <HAL_ADC_ConfigChannel+0x630>
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800484a:	6a3b      	ldr	r3, [r7, #32]
 800484c:	fa93 f3a3 	rbit	r3, r3
 8004850:	61fb      	str	r3, [r7, #28]
  return result;
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004858:	2b00      	cmp	r3, #0
 800485a:	d101      	bne.n	8004860 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 800485c:	2320      	movs	r3, #32
 800485e:	e003      	b.n	8004868 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8004860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004862:	fab3 f383 	clz	r3, r3
 8004866:	b2db      	uxtb	r3, r3
 8004868:	3301      	adds	r3, #1
 800486a:	f003 031f 	and.w	r3, r3, #31
 800486e:	2101      	movs	r1, #1
 8004870:	fa01 f303 	lsl.w	r3, r1, r3
 8004874:	ea42 0103 	orr.w	r1, r2, r3
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004880:	2b00      	cmp	r3, #0
 8004882:	d10d      	bne.n	80048a0 <HAL_ADC_ConfigChannel+0x65c>
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	0e9b      	lsrs	r3, r3, #26
 800488a:	3301      	adds	r3, #1
 800488c:	f003 021f 	and.w	r2, r3, #31
 8004890:	4613      	mov	r3, r2
 8004892:	005b      	lsls	r3, r3, #1
 8004894:	4413      	add	r3, r2
 8004896:	3b1e      	subs	r3, #30
 8004898:	051b      	lsls	r3, r3, #20
 800489a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800489e:	e01d      	b.n	80048dc <HAL_ADC_ConfigChannel+0x698>
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	fa93 f3a3 	rbit	r3, r3
 80048ac:	613b      	str	r3, [r7, #16]
  return result;
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d103      	bne.n	80048c0 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80048b8:	2320      	movs	r3, #32
 80048ba:	e005      	b.n	80048c8 <HAL_ADC_ConfigChannel+0x684>
 80048bc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80048c0:	69bb      	ldr	r3, [r7, #24]
 80048c2:	fab3 f383 	clz	r3, r3
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	3301      	adds	r3, #1
 80048ca:	f003 021f 	and.w	r2, r3, #31
 80048ce:	4613      	mov	r3, r2
 80048d0:	005b      	lsls	r3, r3, #1
 80048d2:	4413      	add	r3, r2
 80048d4:	3b1e      	subs	r3, #30
 80048d6:	051b      	lsls	r3, r3, #20
 80048d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80048dc:	430b      	orrs	r3, r1
 80048de:	683a      	ldr	r2, [r7, #0]
 80048e0:	6892      	ldr	r2, [r2, #8]
 80048e2:	4619      	mov	r1, r3
 80048e4:	f7ff f876 	bl	80039d4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	4b44      	ldr	r3, [pc, #272]	; (8004a00 <HAL_ADC_ConfigChannel+0x7bc>)
 80048ee:	4013      	ands	r3, r2
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d07a      	beq.n	80049ea <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80048f4:	4843      	ldr	r0, [pc, #268]	; (8004a04 <HAL_ADC_ConfigChannel+0x7c0>)
 80048f6:	f7fe ffcb 	bl	8003890 <LL_ADC_GetCommonPathInternalCh>
 80048fa:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a41      	ldr	r2, [pc, #260]	; (8004a08 <HAL_ADC_ConfigChannel+0x7c4>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d12c      	bne.n	8004962 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004908:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800490c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d126      	bne.n	8004962 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a3c      	ldr	r2, [pc, #240]	; (8004a0c <HAL_ADC_ConfigChannel+0x7c8>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d004      	beq.n	8004928 <HAL_ADC_ConfigChannel+0x6e4>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a3b      	ldr	r2, [pc, #236]	; (8004a10 <HAL_ADC_ConfigChannel+0x7cc>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d15d      	bne.n	80049e4 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004928:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800492c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004930:	4619      	mov	r1, r3
 8004932:	4834      	ldr	r0, [pc, #208]	; (8004a04 <HAL_ADC_ConfigChannel+0x7c0>)
 8004934:	f7fe ff99 	bl	800386a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004938:	4b36      	ldr	r3, [pc, #216]	; (8004a14 <HAL_ADC_ConfigChannel+0x7d0>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	099b      	lsrs	r3, r3, #6
 800493e:	4a36      	ldr	r2, [pc, #216]	; (8004a18 <HAL_ADC_ConfigChannel+0x7d4>)
 8004940:	fba2 2303 	umull	r2, r3, r2, r3
 8004944:	099b      	lsrs	r3, r3, #6
 8004946:	1c5a      	adds	r2, r3, #1
 8004948:	4613      	mov	r3, r2
 800494a:	005b      	lsls	r3, r3, #1
 800494c:	4413      	add	r3, r2
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004952:	e002      	b.n	800495a <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	3b01      	subs	r3, #1
 8004958:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d1f9      	bne.n	8004954 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004960:	e040      	b.n	80049e4 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a2d      	ldr	r2, [pc, #180]	; (8004a1c <HAL_ADC_ConfigChannel+0x7d8>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d118      	bne.n	800499e <HAL_ADC_ConfigChannel+0x75a>
 800496c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004970:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004974:	2b00      	cmp	r3, #0
 8004976:	d112      	bne.n	800499e <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a23      	ldr	r2, [pc, #140]	; (8004a0c <HAL_ADC_ConfigChannel+0x7c8>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d004      	beq.n	800498c <HAL_ADC_ConfigChannel+0x748>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a22      	ldr	r2, [pc, #136]	; (8004a10 <HAL_ADC_ConfigChannel+0x7cc>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d12d      	bne.n	80049e8 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800498c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004990:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004994:	4619      	mov	r1, r3
 8004996:	481b      	ldr	r0, [pc, #108]	; (8004a04 <HAL_ADC_ConfigChannel+0x7c0>)
 8004998:	f7fe ff67 	bl	800386a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800499c:	e024      	b.n	80049e8 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a1f      	ldr	r2, [pc, #124]	; (8004a20 <HAL_ADC_ConfigChannel+0x7dc>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d120      	bne.n	80049ea <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80049a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80049ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d11a      	bne.n	80049ea <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a14      	ldr	r2, [pc, #80]	; (8004a0c <HAL_ADC_ConfigChannel+0x7c8>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d115      	bne.n	80049ea <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80049be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80049c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80049c6:	4619      	mov	r1, r3
 80049c8:	480e      	ldr	r0, [pc, #56]	; (8004a04 <HAL_ADC_ConfigChannel+0x7c0>)
 80049ca:	f7fe ff4e 	bl	800386a <LL_ADC_SetCommonPathInternalCh>
 80049ce:	e00c      	b.n	80049ea <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049d4:	f043 0220 	orr.w	r2, r3, #32
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80049e2:	e002      	b.n	80049ea <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80049e4:	bf00      	nop
 80049e6:	e000      	b.n	80049ea <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80049e8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80049f2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	37d8      	adds	r7, #216	; 0xd8
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	80080000 	.word	0x80080000
 8004a04:	50040300 	.word	0x50040300
 8004a08:	c7520000 	.word	0xc7520000
 8004a0c:	50040000 	.word	0x50040000
 8004a10:	50040200 	.word	0x50040200
 8004a14:	20000084 	.word	0x20000084
 8004a18:	053e2d63 	.word	0x053e2d63
 8004a1c:	cb840000 	.word	0xcb840000
 8004a20:	80000001 	.word	0x80000001

08004a24 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4618      	mov	r0, r3
 8004a32:	f7ff f8b1 	bl	8003b98 <LL_ADC_IsEnabled>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d14d      	bne.n	8004ad8 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	689a      	ldr	r2, [r3, #8]
 8004a42:	4b28      	ldr	r3, [pc, #160]	; (8004ae4 <ADC_Enable+0xc0>)
 8004a44:	4013      	ands	r3, r2
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00d      	beq.n	8004a66 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a4e:	f043 0210 	orr.w	r2, r3, #16
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a5a:	f043 0201 	orr.w	r2, r3, #1
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e039      	b.n	8004ada <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f7ff f86c 	bl	8003b48 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004a70:	f7fe fedc 	bl	800382c <HAL_GetTick>
 8004a74:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004a76:	e028      	b.n	8004aca <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f7ff f88b 	bl	8003b98 <LL_ADC_IsEnabled>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d104      	bne.n	8004a92 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f7ff f85b 	bl	8003b48 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004a92:	f7fe fecb 	bl	800382c <HAL_GetTick>
 8004a96:	4602      	mov	r2, r0
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d914      	bls.n	8004aca <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 0301 	and.w	r3, r3, #1
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d00d      	beq.n	8004aca <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ab2:	f043 0210 	orr.w	r2, r3, #16
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004abe:	f043 0201 	orr.w	r2, r3, #1
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e007      	b.n	8004ada <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 0301 	and.w	r3, r3, #1
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d1cf      	bne.n	8004a78 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004ad8:	2300      	movs	r3, #0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3710      	adds	r7, #16
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	8000003f 	.word	0x8000003f

08004ae8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4618      	mov	r0, r3
 8004af6:	f7ff f862 	bl	8003bbe <LL_ADC_IsDisableOngoing>
 8004afa:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4618      	mov	r0, r3
 8004b02:	f7ff f849 	bl	8003b98 <LL_ADC_IsEnabled>
 8004b06:	4603      	mov	r3, r0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d047      	beq.n	8004b9c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d144      	bne.n	8004b9c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	f003 030d 	and.w	r3, r3, #13
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d10c      	bne.n	8004b3a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4618      	mov	r0, r3
 8004b26:	f7ff f823 	bl	8003b70 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	2203      	movs	r2, #3
 8004b30:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004b32:	f7fe fe7b 	bl	800382c <HAL_GetTick>
 8004b36:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004b38:	e029      	b.n	8004b8e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b3e:	f043 0210 	orr.w	r2, r3, #16
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b4a:	f043 0201 	orr.w	r2, r3, #1
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e023      	b.n	8004b9e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004b56:	f7fe fe69 	bl	800382c <HAL_GetTick>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d914      	bls.n	8004b8e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	f003 0301 	and.w	r3, r3, #1
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00d      	beq.n	8004b8e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b76:	f043 0210 	orr.w	r2, r3, #16
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b82:	f043 0201 	orr.w	r2, r3, #1
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e007      	b.n	8004b9e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	f003 0301 	and.w	r3, r3, #1
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d1dc      	bne.n	8004b56 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004b9c:	2300      	movs	r3, #0
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3710      	adds	r7, #16
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}

08004ba6 <LL_ADC_IsEnabled>:
{
 8004ba6:	b480      	push	{r7}
 8004ba8:	b083      	sub	sp, #12
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f003 0301 	and.w	r3, r3, #1
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d101      	bne.n	8004bbe <LL_ADC_IsEnabled+0x18>
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e000      	b.n	8004bc0 <LL_ADC_IsEnabled+0x1a>
 8004bbe:	2300      	movs	r3, #0
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	370c      	adds	r7, #12
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr

08004bcc <LL_ADC_StartCalibration>:
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004bde:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004be2:	683a      	ldr	r2, [r7, #0]
 8004be4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004be8:	4313      	orrs	r3, r2
 8004bea:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	609a      	str	r2, [r3, #8]
}
 8004bf2:	bf00      	nop
 8004bf4:	370c      	adds	r7, #12
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr

08004bfe <LL_ADC_IsCalibrationOnGoing>:
{
 8004bfe:	b480      	push	{r7}
 8004c00:	b083      	sub	sp, #12
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c12:	d101      	bne.n	8004c18 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004c14:	2301      	movs	r3, #1
 8004c16:	e000      	b.n	8004c1a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004c18:	2300      	movs	r3, #0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	370c      	adds	r7, #12
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr

08004c26 <LL_ADC_REG_IsConversionOngoing>:
{
 8004c26:	b480      	push	{r7}
 8004c28:	b083      	sub	sp, #12
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f003 0304 	and.w	r3, r3, #4
 8004c36:	2b04      	cmp	r3, #4
 8004c38:	d101      	bne.n	8004c3e <LL_ADC_REG_IsConversionOngoing+0x18>
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e000      	b.n	8004c40 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004c3e:	2300      	movs	r3, #0
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	370c      	adds	r7, #12
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b084      	sub	sp, #16
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004c56:	2300      	movs	r3, #0
 8004c58:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d101      	bne.n	8004c68 <HAL_ADCEx_Calibration_Start+0x1c>
 8004c64:	2302      	movs	r3, #2
 8004c66:	e04d      	b.n	8004d04 <HAL_ADCEx_Calibration_Start+0xb8>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f7ff ff39 	bl	8004ae8 <ADC_Disable>
 8004c76:	4603      	mov	r3, r0
 8004c78:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004c7a:	7bfb      	ldrb	r3, [r7, #15]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d136      	bne.n	8004cee <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c84:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004c88:	f023 0302 	bic.w	r3, r3, #2
 8004c8c:	f043 0202 	orr.w	r2, r3, #2
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	6839      	ldr	r1, [r7, #0]
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f7ff ff96 	bl	8004bcc <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004ca0:	e014      	b.n	8004ccc <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	3301      	adds	r3, #1
 8004ca6:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8004cae:	d30d      	bcc.n	8004ccc <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cb4:	f023 0312 	bic.w	r3, r3, #18
 8004cb8:	f043 0210 	orr.w	r2, r3, #16
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e01b      	b.n	8004d04 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f7ff ff94 	bl	8004bfe <LL_ADC_IsCalibrationOnGoing>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d1e2      	bne.n	8004ca2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ce0:	f023 0303 	bic.w	r3, r3, #3
 8004ce4:	f043 0201 	orr.w	r2, r3, #1
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	655a      	str	r2, [r3, #84]	; 0x54
 8004cec:	e005      	b.n	8004cfa <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cf2:	f043 0210 	orr.w	r2, r3, #16
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3710      	adds	r7, #16
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004d0c:	b590      	push	{r4, r7, lr}
 8004d0e:	b09f      	sub	sp, #124	; 0x7c
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d16:	2300      	movs	r3, #0
 8004d18:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d101      	bne.n	8004d2a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004d26:	2302      	movs	r3, #2
 8004d28:	e093      	b.n	8004e52 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8004d32:	2300      	movs	r3, #0
 8004d34:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8004d36:	2300      	movs	r3, #0
 8004d38:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a47      	ldr	r2, [pc, #284]	; (8004e5c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d102      	bne.n	8004d4a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004d44:	4b46      	ldr	r3, [pc, #280]	; (8004e60 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004d46:	60bb      	str	r3, [r7, #8]
 8004d48:	e001      	b.n	8004d4e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d10b      	bne.n	8004d6c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d58:	f043 0220 	orr.w	r2, r3, #32
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e072      	b.n	8004e52 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f7ff ff59 	bl	8004c26 <LL_ADC_REG_IsConversionOngoing>
 8004d74:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f7ff ff53 	bl	8004c26 <LL_ADC_REG_IsConversionOngoing>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d154      	bne.n	8004e30 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004d86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d151      	bne.n	8004e30 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004d8c:	4b35      	ldr	r3, [pc, #212]	; (8004e64 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8004d8e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d02c      	beq.n	8004df2 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004d98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	6859      	ldr	r1, [r3, #4]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004daa:	035b      	lsls	r3, r3, #13
 8004dac:	430b      	orrs	r3, r1
 8004dae:	431a      	orrs	r2, r3
 8004db0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004db2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004db4:	4829      	ldr	r0, [pc, #164]	; (8004e5c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004db6:	f7ff fef6 	bl	8004ba6 <LL_ADC_IsEnabled>
 8004dba:	4604      	mov	r4, r0
 8004dbc:	4828      	ldr	r0, [pc, #160]	; (8004e60 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004dbe:	f7ff fef2 	bl	8004ba6 <LL_ADC_IsEnabled>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	431c      	orrs	r4, r3
 8004dc6:	4828      	ldr	r0, [pc, #160]	; (8004e68 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8004dc8:	f7ff feed 	bl	8004ba6 <LL_ADC_IsEnabled>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	4323      	orrs	r3, r4
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d137      	bne.n	8004e44 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004dd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004ddc:	f023 030f 	bic.w	r3, r3, #15
 8004de0:	683a      	ldr	r2, [r7, #0]
 8004de2:	6811      	ldr	r1, [r2, #0]
 8004de4:	683a      	ldr	r2, [r7, #0]
 8004de6:	6892      	ldr	r2, [r2, #8]
 8004de8:	430a      	orrs	r2, r1
 8004dea:	431a      	orrs	r2, r3
 8004dec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dee:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004df0:	e028      	b.n	8004e44 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004df2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004dfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dfc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004dfe:	4817      	ldr	r0, [pc, #92]	; (8004e5c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004e00:	f7ff fed1 	bl	8004ba6 <LL_ADC_IsEnabled>
 8004e04:	4604      	mov	r4, r0
 8004e06:	4816      	ldr	r0, [pc, #88]	; (8004e60 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004e08:	f7ff fecd 	bl	8004ba6 <LL_ADC_IsEnabled>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	431c      	orrs	r4, r3
 8004e10:	4815      	ldr	r0, [pc, #84]	; (8004e68 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8004e12:	f7ff fec8 	bl	8004ba6 <LL_ADC_IsEnabled>
 8004e16:	4603      	mov	r3, r0
 8004e18:	4323      	orrs	r3, r4
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d112      	bne.n	8004e44 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004e1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004e26:	f023 030f 	bic.w	r3, r3, #15
 8004e2a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004e2c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004e2e:	e009      	b.n	8004e44 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e34:	f043 0220 	orr.w	r2, r3, #32
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004e42:	e000      	b.n	8004e46 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004e44:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004e4e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	377c      	adds	r7, #124	; 0x7c
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd90      	pop	{r4, r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	50040000 	.word	0x50040000
 8004e60:	50040100 	.word	0x50040100
 8004e64:	50040300 	.word	0x50040300
 8004e68:	50040200 	.word	0x50040200

08004e6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b085      	sub	sp, #20
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f003 0307 	and.w	r3, r3, #7
 8004e7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e7c:	4b0c      	ldr	r3, [pc, #48]	; (8004eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e82:	68ba      	ldr	r2, [r7, #8]
 8004e84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004e88:	4013      	ands	r3, r2
 8004e8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004e94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004e98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e9e:	4a04      	ldr	r2, [pc, #16]	; (8004eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	60d3      	str	r3, [r2, #12]
}
 8004ea4:	bf00      	nop
 8004ea6:	3714      	adds	r7, #20
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr
 8004eb0:	e000ed00 	.word	0xe000ed00

08004eb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004eb8:	4b04      	ldr	r3, [pc, #16]	; (8004ecc <__NVIC_GetPriorityGrouping+0x18>)
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	0a1b      	lsrs	r3, r3, #8
 8004ebe:	f003 0307 	and.w	r3, r3, #7
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr
 8004ecc:	e000ed00 	.word	0xe000ed00

08004ed0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	db0b      	blt.n	8004efa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ee2:	79fb      	ldrb	r3, [r7, #7]
 8004ee4:	f003 021f 	and.w	r2, r3, #31
 8004ee8:	4907      	ldr	r1, [pc, #28]	; (8004f08 <__NVIC_EnableIRQ+0x38>)
 8004eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eee:	095b      	lsrs	r3, r3, #5
 8004ef0:	2001      	movs	r0, #1
 8004ef2:	fa00 f202 	lsl.w	r2, r0, r2
 8004ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004efa:	bf00      	nop
 8004efc:	370c      	adds	r7, #12
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop
 8004f08:	e000e100 	.word	0xe000e100

08004f0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	4603      	mov	r3, r0
 8004f14:	6039      	str	r1, [r7, #0]
 8004f16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	db0a      	blt.n	8004f36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	b2da      	uxtb	r2, r3
 8004f24:	490c      	ldr	r1, [pc, #48]	; (8004f58 <__NVIC_SetPriority+0x4c>)
 8004f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f2a:	0112      	lsls	r2, r2, #4
 8004f2c:	b2d2      	uxtb	r2, r2
 8004f2e:	440b      	add	r3, r1
 8004f30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004f34:	e00a      	b.n	8004f4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	b2da      	uxtb	r2, r3
 8004f3a:	4908      	ldr	r1, [pc, #32]	; (8004f5c <__NVIC_SetPriority+0x50>)
 8004f3c:	79fb      	ldrb	r3, [r7, #7]
 8004f3e:	f003 030f 	and.w	r3, r3, #15
 8004f42:	3b04      	subs	r3, #4
 8004f44:	0112      	lsls	r2, r2, #4
 8004f46:	b2d2      	uxtb	r2, r2
 8004f48:	440b      	add	r3, r1
 8004f4a:	761a      	strb	r2, [r3, #24]
}
 8004f4c:	bf00      	nop
 8004f4e:	370c      	adds	r7, #12
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr
 8004f58:	e000e100 	.word	0xe000e100
 8004f5c:	e000ed00 	.word	0xe000ed00

08004f60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b089      	sub	sp, #36	; 0x24
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	60b9      	str	r1, [r7, #8]
 8004f6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f003 0307 	and.w	r3, r3, #7
 8004f72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	f1c3 0307 	rsb	r3, r3, #7
 8004f7a:	2b04      	cmp	r3, #4
 8004f7c:	bf28      	it	cs
 8004f7e:	2304      	movcs	r3, #4
 8004f80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	3304      	adds	r3, #4
 8004f86:	2b06      	cmp	r3, #6
 8004f88:	d902      	bls.n	8004f90 <NVIC_EncodePriority+0x30>
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	3b03      	subs	r3, #3
 8004f8e:	e000      	b.n	8004f92 <NVIC_EncodePriority+0x32>
 8004f90:	2300      	movs	r3, #0
 8004f92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f94:	f04f 32ff 	mov.w	r2, #4294967295
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f9e:	43da      	mvns	r2, r3
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	401a      	ands	r2, r3
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004fa8:	f04f 31ff 	mov.w	r1, #4294967295
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	fa01 f303 	lsl.w	r3, r1, r3
 8004fb2:	43d9      	mvns	r1, r3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fb8:	4313      	orrs	r3, r2
         );
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3724      	adds	r7, #36	; 0x24
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr
	...

08004fc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b082      	sub	sp, #8
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	3b01      	subs	r3, #1
 8004fd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004fd8:	d301      	bcc.n	8004fde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e00f      	b.n	8004ffe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004fde:	4a0a      	ldr	r2, [pc, #40]	; (8005008 <SysTick_Config+0x40>)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004fe6:	210f      	movs	r1, #15
 8004fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8004fec:	f7ff ff8e 	bl	8004f0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ff0:	4b05      	ldr	r3, [pc, #20]	; (8005008 <SysTick_Config+0x40>)
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ff6:	4b04      	ldr	r3, [pc, #16]	; (8005008 <SysTick_Config+0x40>)
 8004ff8:	2207      	movs	r2, #7
 8004ffa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3708      	adds	r7, #8
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop
 8005008:	e000e010 	.word	0xe000e010

0800500c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b082      	sub	sp, #8
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f7ff ff29 	bl	8004e6c <__NVIC_SetPriorityGrouping>
}
 800501a:	bf00      	nop
 800501c:	3708      	adds	r7, #8
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}

08005022 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005022:	b580      	push	{r7, lr}
 8005024:	b086      	sub	sp, #24
 8005026:	af00      	add	r7, sp, #0
 8005028:	4603      	mov	r3, r0
 800502a:	60b9      	str	r1, [r7, #8]
 800502c:	607a      	str	r2, [r7, #4]
 800502e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005030:	2300      	movs	r3, #0
 8005032:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005034:	f7ff ff3e 	bl	8004eb4 <__NVIC_GetPriorityGrouping>
 8005038:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	68b9      	ldr	r1, [r7, #8]
 800503e:	6978      	ldr	r0, [r7, #20]
 8005040:	f7ff ff8e 	bl	8004f60 <NVIC_EncodePriority>
 8005044:	4602      	mov	r2, r0
 8005046:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800504a:	4611      	mov	r1, r2
 800504c:	4618      	mov	r0, r3
 800504e:	f7ff ff5d 	bl	8004f0c <__NVIC_SetPriority>
}
 8005052:	bf00      	nop
 8005054:	3718      	adds	r7, #24
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}

0800505a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800505a:	b580      	push	{r7, lr}
 800505c:	b082      	sub	sp, #8
 800505e:	af00      	add	r7, sp, #0
 8005060:	4603      	mov	r3, r0
 8005062:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005068:	4618      	mov	r0, r3
 800506a:	f7ff ff31 	bl	8004ed0 <__NVIC_EnableIRQ>
}
 800506e:	bf00      	nop
 8005070:	3708      	adds	r7, #8
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}

08005076 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005076:	b580      	push	{r7, lr}
 8005078:	b082      	sub	sp, #8
 800507a:	af00      	add	r7, sp, #0
 800507c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f7ff ffa2 	bl	8004fc8 <SysTick_Config>
 8005084:	4603      	mov	r3, r0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3708      	adds	r7, #8
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
	...

08005090 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005090:	b480      	push	{r7}
 8005092:	b085      	sub	sp, #20
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d101      	bne.n	80050a2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e098      	b.n	80051d4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	461a      	mov	r2, r3
 80050a8:	4b4d      	ldr	r3, [pc, #308]	; (80051e0 <HAL_DMA_Init+0x150>)
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d80f      	bhi.n	80050ce <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	461a      	mov	r2, r3
 80050b4:	4b4b      	ldr	r3, [pc, #300]	; (80051e4 <HAL_DMA_Init+0x154>)
 80050b6:	4413      	add	r3, r2
 80050b8:	4a4b      	ldr	r2, [pc, #300]	; (80051e8 <HAL_DMA_Init+0x158>)
 80050ba:	fba2 2303 	umull	r2, r3, r2, r3
 80050be:	091b      	lsrs	r3, r3, #4
 80050c0:	009a      	lsls	r2, r3, #2
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4a48      	ldr	r2, [pc, #288]	; (80051ec <HAL_DMA_Init+0x15c>)
 80050ca:	641a      	str	r2, [r3, #64]	; 0x40
 80050cc:	e00e      	b.n	80050ec <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	461a      	mov	r2, r3
 80050d4:	4b46      	ldr	r3, [pc, #280]	; (80051f0 <HAL_DMA_Init+0x160>)
 80050d6:	4413      	add	r3, r2
 80050d8:	4a43      	ldr	r2, [pc, #268]	; (80051e8 <HAL_DMA_Init+0x158>)
 80050da:	fba2 2303 	umull	r2, r3, r2, r3
 80050de:	091b      	lsrs	r3, r3, #4
 80050e0:	009a      	lsls	r2, r3, #2
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a42      	ldr	r2, [pc, #264]	; (80051f4 <HAL_DMA_Init+0x164>)
 80050ea:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2202      	movs	r2, #2
 80050f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005106:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005110:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	691b      	ldr	r3, [r3, #16]
 8005116:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800511c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	699b      	ldr	r3, [r3, #24]
 8005122:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005128:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a1b      	ldr	r3, [r3, #32]
 800512e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005130:	68fa      	ldr	r2, [r7, #12]
 8005132:	4313      	orrs	r3, r2
 8005134:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005146:	d039      	beq.n	80051bc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800514c:	4a27      	ldr	r2, [pc, #156]	; (80051ec <HAL_DMA_Init+0x15c>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d11a      	bne.n	8005188 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005152:	4b29      	ldr	r3, [pc, #164]	; (80051f8 <HAL_DMA_Init+0x168>)
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800515a:	f003 031c 	and.w	r3, r3, #28
 800515e:	210f      	movs	r1, #15
 8005160:	fa01 f303 	lsl.w	r3, r1, r3
 8005164:	43db      	mvns	r3, r3
 8005166:	4924      	ldr	r1, [pc, #144]	; (80051f8 <HAL_DMA_Init+0x168>)
 8005168:	4013      	ands	r3, r2
 800516a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800516c:	4b22      	ldr	r3, [pc, #136]	; (80051f8 <HAL_DMA_Init+0x168>)
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6859      	ldr	r1, [r3, #4]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005178:	f003 031c 	and.w	r3, r3, #28
 800517c:	fa01 f303 	lsl.w	r3, r1, r3
 8005180:	491d      	ldr	r1, [pc, #116]	; (80051f8 <HAL_DMA_Init+0x168>)
 8005182:	4313      	orrs	r3, r2
 8005184:	600b      	str	r3, [r1, #0]
 8005186:	e019      	b.n	80051bc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005188:	4b1c      	ldr	r3, [pc, #112]	; (80051fc <HAL_DMA_Init+0x16c>)
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005190:	f003 031c 	and.w	r3, r3, #28
 8005194:	210f      	movs	r1, #15
 8005196:	fa01 f303 	lsl.w	r3, r1, r3
 800519a:	43db      	mvns	r3, r3
 800519c:	4917      	ldr	r1, [pc, #92]	; (80051fc <HAL_DMA_Init+0x16c>)
 800519e:	4013      	ands	r3, r2
 80051a0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80051a2:	4b16      	ldr	r3, [pc, #88]	; (80051fc <HAL_DMA_Init+0x16c>)
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6859      	ldr	r1, [r3, #4]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051ae:	f003 031c 	and.w	r3, r3, #28
 80051b2:	fa01 f303 	lsl.w	r3, r1, r3
 80051b6:	4911      	ldr	r1, [pc, #68]	; (80051fc <HAL_DMA_Init+0x16c>)
 80051b8:	4313      	orrs	r3, r2
 80051ba:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2201      	movs	r2, #1
 80051c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80051d2:	2300      	movs	r3, #0
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3714      	adds	r7, #20
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr
 80051e0:	40020407 	.word	0x40020407
 80051e4:	bffdfff8 	.word	0xbffdfff8
 80051e8:	cccccccd 	.word	0xcccccccd
 80051ec:	40020000 	.word	0x40020000
 80051f0:	bffdfbf8 	.word	0xbffdfbf8
 80051f4:	40020400 	.word	0x40020400
 80051f8:	400200a8 	.word	0x400200a8
 80051fc:	400204a8 	.word	0x400204a8

08005200 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b086      	sub	sp, #24
 8005204:	af00      	add	r7, sp, #0
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	607a      	str	r2, [r7, #4]
 800520c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800520e:	2300      	movs	r3, #0
 8005210:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005218:	2b01      	cmp	r3, #1
 800521a:	d101      	bne.n	8005220 <HAL_DMA_Start_IT+0x20>
 800521c:	2302      	movs	r3, #2
 800521e:	e04b      	b.n	80052b8 <HAL_DMA_Start_IT+0xb8>
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800522e:	b2db      	uxtb	r3, r3
 8005230:	2b01      	cmp	r3, #1
 8005232:	d13a      	bne.n	80052aa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2202      	movs	r2, #2
 8005238:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2200      	movs	r2, #0
 8005240:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f022 0201 	bic.w	r2, r2, #1
 8005250:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	68b9      	ldr	r1, [r7, #8]
 8005258:	68f8      	ldr	r0, [r7, #12]
 800525a:	f000 f8e0 	bl	800541e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005262:	2b00      	cmp	r3, #0
 8005264:	d008      	beq.n	8005278 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f042 020e 	orr.w	r2, r2, #14
 8005274:	601a      	str	r2, [r3, #0]
 8005276:	e00f      	b.n	8005298 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f022 0204 	bic.w	r2, r2, #4
 8005286:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f042 020a 	orr.w	r2, r2, #10
 8005296:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f042 0201 	orr.w	r2, r2, #1
 80052a6:	601a      	str	r2, [r3, #0]
 80052a8:	e005      	b.n	80052b6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2200      	movs	r2, #0
 80052ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80052b2:	2302      	movs	r3, #2
 80052b4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80052b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3718      	adds	r7, #24
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}

080052c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052dc:	f003 031c 	and.w	r3, r3, #28
 80052e0:	2204      	movs	r2, #4
 80052e2:	409a      	lsls	r2, r3
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	4013      	ands	r3, r2
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d026      	beq.n	800533a <HAL_DMA_IRQHandler+0x7a>
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	f003 0304 	and.w	r3, r3, #4
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d021      	beq.n	800533a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 0320 	and.w	r3, r3, #32
 8005300:	2b00      	cmp	r3, #0
 8005302:	d107      	bne.n	8005314 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f022 0204 	bic.w	r2, r2, #4
 8005312:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005318:	f003 021c 	and.w	r2, r3, #28
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005320:	2104      	movs	r1, #4
 8005322:	fa01 f202 	lsl.w	r2, r1, r2
 8005326:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800532c:	2b00      	cmp	r3, #0
 800532e:	d071      	beq.n	8005414 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8005338:	e06c      	b.n	8005414 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800533e:	f003 031c 	and.w	r3, r3, #28
 8005342:	2202      	movs	r2, #2
 8005344:	409a      	lsls	r2, r3
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	4013      	ands	r3, r2
 800534a:	2b00      	cmp	r3, #0
 800534c:	d02e      	beq.n	80053ac <HAL_DMA_IRQHandler+0xec>
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	f003 0302 	and.w	r3, r3, #2
 8005354:	2b00      	cmp	r3, #0
 8005356:	d029      	beq.n	80053ac <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 0320 	and.w	r3, r3, #32
 8005362:	2b00      	cmp	r3, #0
 8005364:	d10b      	bne.n	800537e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f022 020a 	bic.w	r2, r2, #10
 8005374:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2201      	movs	r2, #1
 800537a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005382:	f003 021c 	and.w	r2, r3, #28
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538a:	2102      	movs	r1, #2
 800538c:	fa01 f202 	lsl.w	r2, r1, r2
 8005390:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d038      	beq.n	8005414 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80053aa:	e033      	b.n	8005414 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053b0:	f003 031c 	and.w	r3, r3, #28
 80053b4:	2208      	movs	r2, #8
 80053b6:	409a      	lsls	r2, r3
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	4013      	ands	r3, r2
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d02a      	beq.n	8005416 <HAL_DMA_IRQHandler+0x156>
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	f003 0308 	and.w	r3, r3, #8
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d025      	beq.n	8005416 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f022 020e 	bic.w	r2, r2, #14
 80053d8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053de:	f003 021c 	and.w	r2, r3, #28
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e6:	2101      	movs	r1, #1
 80053e8:	fa01 f202 	lsl.w	r2, r1, r2
 80053ec:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2201      	movs	r2, #1
 80053f2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005408:	2b00      	cmp	r3, #0
 800540a:	d004      	beq.n	8005416 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005414:	bf00      	nop
 8005416:	bf00      	nop
}
 8005418:	3710      	adds	r7, #16
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}

0800541e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800541e:	b480      	push	{r7}
 8005420:	b085      	sub	sp, #20
 8005422:	af00      	add	r7, sp, #0
 8005424:	60f8      	str	r0, [r7, #12]
 8005426:	60b9      	str	r1, [r7, #8]
 8005428:	607a      	str	r2, [r7, #4]
 800542a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005430:	f003 021c 	and.w	r2, r3, #28
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005438:	2101      	movs	r1, #1
 800543a:	fa01 f202 	lsl.w	r2, r1, r2
 800543e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	683a      	ldr	r2, [r7, #0]
 8005446:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	2b10      	cmp	r3, #16
 800544e:	d108      	bne.n	8005462 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	68ba      	ldr	r2, [r7, #8]
 800545e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005460:	e007      	b.n	8005472 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	68ba      	ldr	r2, [r7, #8]
 8005468:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	60da      	str	r2, [r3, #12]
}
 8005472:	bf00      	nop
 8005474:	3714      	adds	r7, #20
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr
	...

08005480 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005480:	b480      	push	{r7}
 8005482:	b087      	sub	sp, #28
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800548a:	2300      	movs	r3, #0
 800548c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800548e:	e17f      	b.n	8005790 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	2101      	movs	r1, #1
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	fa01 f303 	lsl.w	r3, r1, r3
 800549c:	4013      	ands	r3, r2
 800549e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	f000 8171 	beq.w	800578a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	f003 0303 	and.w	r3, r3, #3
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d005      	beq.n	80054c0 <HAL_GPIO_Init+0x40>
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	f003 0303 	and.w	r3, r3, #3
 80054bc:	2b02      	cmp	r3, #2
 80054be:	d130      	bne.n	8005522 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	005b      	lsls	r3, r3, #1
 80054ca:	2203      	movs	r2, #3
 80054cc:	fa02 f303 	lsl.w	r3, r2, r3
 80054d0:	43db      	mvns	r3, r3
 80054d2:	693a      	ldr	r2, [r7, #16]
 80054d4:	4013      	ands	r3, r2
 80054d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	68da      	ldr	r2, [r3, #12]
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	005b      	lsls	r3, r3, #1
 80054e0:	fa02 f303 	lsl.w	r3, r2, r3
 80054e4:	693a      	ldr	r2, [r7, #16]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	693a      	ldr	r2, [r7, #16]
 80054ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80054f6:	2201      	movs	r2, #1
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	fa02 f303 	lsl.w	r3, r2, r3
 80054fe:	43db      	mvns	r3, r3
 8005500:	693a      	ldr	r2, [r7, #16]
 8005502:	4013      	ands	r3, r2
 8005504:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	091b      	lsrs	r3, r3, #4
 800550c:	f003 0201 	and.w	r2, r3, #1
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	fa02 f303 	lsl.w	r3, r2, r3
 8005516:	693a      	ldr	r2, [r7, #16]
 8005518:	4313      	orrs	r3, r2
 800551a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	693a      	ldr	r2, [r7, #16]
 8005520:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	f003 0303 	and.w	r3, r3, #3
 800552a:	2b03      	cmp	r3, #3
 800552c:	d118      	bne.n	8005560 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005532:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8005534:	2201      	movs	r2, #1
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	fa02 f303 	lsl.w	r3, r2, r3
 800553c:	43db      	mvns	r3, r3
 800553e:	693a      	ldr	r2, [r7, #16]
 8005540:	4013      	ands	r3, r2
 8005542:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	08db      	lsrs	r3, r3, #3
 800554a:	f003 0201 	and.w	r2, r3, #1
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	fa02 f303 	lsl.w	r3, r2, r3
 8005554:	693a      	ldr	r2, [r7, #16]
 8005556:	4313      	orrs	r3, r2
 8005558:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	693a      	ldr	r2, [r7, #16]
 800555e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	f003 0303 	and.w	r3, r3, #3
 8005568:	2b03      	cmp	r3, #3
 800556a:	d017      	beq.n	800559c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	005b      	lsls	r3, r3, #1
 8005576:	2203      	movs	r2, #3
 8005578:	fa02 f303 	lsl.w	r3, r2, r3
 800557c:	43db      	mvns	r3, r3
 800557e:	693a      	ldr	r2, [r7, #16]
 8005580:	4013      	ands	r3, r2
 8005582:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	689a      	ldr	r2, [r3, #8]
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	005b      	lsls	r3, r3, #1
 800558c:	fa02 f303 	lsl.w	r3, r2, r3
 8005590:	693a      	ldr	r2, [r7, #16]
 8005592:	4313      	orrs	r3, r2
 8005594:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	693a      	ldr	r2, [r7, #16]
 800559a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	f003 0303 	and.w	r3, r3, #3
 80055a4:	2b02      	cmp	r3, #2
 80055a6:	d123      	bne.n	80055f0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	08da      	lsrs	r2, r3, #3
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	3208      	adds	r2, #8
 80055b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	f003 0307 	and.w	r3, r3, #7
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	220f      	movs	r2, #15
 80055c0:	fa02 f303 	lsl.w	r3, r2, r3
 80055c4:	43db      	mvns	r3, r3
 80055c6:	693a      	ldr	r2, [r7, #16]
 80055c8:	4013      	ands	r3, r2
 80055ca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	691a      	ldr	r2, [r3, #16]
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	f003 0307 	and.w	r3, r3, #7
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	fa02 f303 	lsl.w	r3, r2, r3
 80055dc:	693a      	ldr	r2, [r7, #16]
 80055de:	4313      	orrs	r3, r2
 80055e0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	08da      	lsrs	r2, r3, #3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	3208      	adds	r2, #8
 80055ea:	6939      	ldr	r1, [r7, #16]
 80055ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	005b      	lsls	r3, r3, #1
 80055fa:	2203      	movs	r2, #3
 80055fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005600:	43db      	mvns	r3, r3
 8005602:	693a      	ldr	r2, [r7, #16]
 8005604:	4013      	ands	r3, r2
 8005606:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	f003 0203 	and.w	r2, r3, #3
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	005b      	lsls	r3, r3, #1
 8005614:	fa02 f303 	lsl.w	r3, r2, r3
 8005618:	693a      	ldr	r2, [r7, #16]
 800561a:	4313      	orrs	r3, r2
 800561c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	693a      	ldr	r2, [r7, #16]
 8005622:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800562c:	2b00      	cmp	r3, #0
 800562e:	f000 80ac 	beq.w	800578a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005632:	4b5f      	ldr	r3, [pc, #380]	; (80057b0 <HAL_GPIO_Init+0x330>)
 8005634:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005636:	4a5e      	ldr	r2, [pc, #376]	; (80057b0 <HAL_GPIO_Init+0x330>)
 8005638:	f043 0301 	orr.w	r3, r3, #1
 800563c:	6613      	str	r3, [r2, #96]	; 0x60
 800563e:	4b5c      	ldr	r3, [pc, #368]	; (80057b0 <HAL_GPIO_Init+0x330>)
 8005640:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005642:	f003 0301 	and.w	r3, r3, #1
 8005646:	60bb      	str	r3, [r7, #8]
 8005648:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800564a:	4a5a      	ldr	r2, [pc, #360]	; (80057b4 <HAL_GPIO_Init+0x334>)
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	089b      	lsrs	r3, r3, #2
 8005650:	3302      	adds	r3, #2
 8005652:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005656:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	f003 0303 	and.w	r3, r3, #3
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	220f      	movs	r2, #15
 8005662:	fa02 f303 	lsl.w	r3, r2, r3
 8005666:	43db      	mvns	r3, r3
 8005668:	693a      	ldr	r2, [r7, #16]
 800566a:	4013      	ands	r3, r2
 800566c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005674:	d025      	beq.n	80056c2 <HAL_GPIO_Init+0x242>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4a4f      	ldr	r2, [pc, #316]	; (80057b8 <HAL_GPIO_Init+0x338>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d01f      	beq.n	80056be <HAL_GPIO_Init+0x23e>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4a4e      	ldr	r2, [pc, #312]	; (80057bc <HAL_GPIO_Init+0x33c>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d019      	beq.n	80056ba <HAL_GPIO_Init+0x23a>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4a4d      	ldr	r2, [pc, #308]	; (80057c0 <HAL_GPIO_Init+0x340>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d013      	beq.n	80056b6 <HAL_GPIO_Init+0x236>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4a4c      	ldr	r2, [pc, #304]	; (80057c4 <HAL_GPIO_Init+0x344>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d00d      	beq.n	80056b2 <HAL_GPIO_Init+0x232>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4a4b      	ldr	r2, [pc, #300]	; (80057c8 <HAL_GPIO_Init+0x348>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d007      	beq.n	80056ae <HAL_GPIO_Init+0x22e>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a4a      	ldr	r2, [pc, #296]	; (80057cc <HAL_GPIO_Init+0x34c>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d101      	bne.n	80056aa <HAL_GPIO_Init+0x22a>
 80056a6:	2306      	movs	r3, #6
 80056a8:	e00c      	b.n	80056c4 <HAL_GPIO_Init+0x244>
 80056aa:	2307      	movs	r3, #7
 80056ac:	e00a      	b.n	80056c4 <HAL_GPIO_Init+0x244>
 80056ae:	2305      	movs	r3, #5
 80056b0:	e008      	b.n	80056c4 <HAL_GPIO_Init+0x244>
 80056b2:	2304      	movs	r3, #4
 80056b4:	e006      	b.n	80056c4 <HAL_GPIO_Init+0x244>
 80056b6:	2303      	movs	r3, #3
 80056b8:	e004      	b.n	80056c4 <HAL_GPIO_Init+0x244>
 80056ba:	2302      	movs	r3, #2
 80056bc:	e002      	b.n	80056c4 <HAL_GPIO_Init+0x244>
 80056be:	2301      	movs	r3, #1
 80056c0:	e000      	b.n	80056c4 <HAL_GPIO_Init+0x244>
 80056c2:	2300      	movs	r3, #0
 80056c4:	697a      	ldr	r2, [r7, #20]
 80056c6:	f002 0203 	and.w	r2, r2, #3
 80056ca:	0092      	lsls	r2, r2, #2
 80056cc:	4093      	lsls	r3, r2
 80056ce:	693a      	ldr	r2, [r7, #16]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80056d4:	4937      	ldr	r1, [pc, #220]	; (80057b4 <HAL_GPIO_Init+0x334>)
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	089b      	lsrs	r3, r3, #2
 80056da:	3302      	adds	r3, #2
 80056dc:	693a      	ldr	r2, [r7, #16]
 80056de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80056e2:	4b3b      	ldr	r3, [pc, #236]	; (80057d0 <HAL_GPIO_Init+0x350>)
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	43db      	mvns	r3, r3
 80056ec:	693a      	ldr	r2, [r7, #16]
 80056ee:	4013      	ands	r3, r2
 80056f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d003      	beq.n	8005706 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80056fe:	693a      	ldr	r2, [r7, #16]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	4313      	orrs	r3, r2
 8005704:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005706:	4a32      	ldr	r2, [pc, #200]	; (80057d0 <HAL_GPIO_Init+0x350>)
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800570c:	4b30      	ldr	r3, [pc, #192]	; (80057d0 <HAL_GPIO_Init+0x350>)
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	43db      	mvns	r3, r3
 8005716:	693a      	ldr	r2, [r7, #16]
 8005718:	4013      	ands	r3, r2
 800571a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005724:	2b00      	cmp	r3, #0
 8005726:	d003      	beq.n	8005730 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8005728:	693a      	ldr	r2, [r7, #16]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	4313      	orrs	r3, r2
 800572e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005730:	4a27      	ldr	r2, [pc, #156]	; (80057d0 <HAL_GPIO_Init+0x350>)
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005736:	4b26      	ldr	r3, [pc, #152]	; (80057d0 <HAL_GPIO_Init+0x350>)
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	43db      	mvns	r3, r3
 8005740:	693a      	ldr	r2, [r7, #16]
 8005742:	4013      	ands	r3, r2
 8005744:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800574e:	2b00      	cmp	r3, #0
 8005750:	d003      	beq.n	800575a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8005752:	693a      	ldr	r2, [r7, #16]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	4313      	orrs	r3, r2
 8005758:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800575a:	4a1d      	ldr	r2, [pc, #116]	; (80057d0 <HAL_GPIO_Init+0x350>)
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005760:	4b1b      	ldr	r3, [pc, #108]	; (80057d0 <HAL_GPIO_Init+0x350>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	43db      	mvns	r3, r3
 800576a:	693a      	ldr	r2, [r7, #16]
 800576c:	4013      	ands	r3, r2
 800576e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005778:	2b00      	cmp	r3, #0
 800577a:	d003      	beq.n	8005784 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800577c:	693a      	ldr	r2, [r7, #16]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	4313      	orrs	r3, r2
 8005782:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005784:	4a12      	ldr	r2, [pc, #72]	; (80057d0 <HAL_GPIO_Init+0x350>)
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	3301      	adds	r3, #1
 800578e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	fa22 f303 	lsr.w	r3, r2, r3
 800579a:	2b00      	cmp	r3, #0
 800579c:	f47f ae78 	bne.w	8005490 <HAL_GPIO_Init+0x10>
  }
}
 80057a0:	bf00      	nop
 80057a2:	bf00      	nop
 80057a4:	371c      	adds	r7, #28
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr
 80057ae:	bf00      	nop
 80057b0:	40021000 	.word	0x40021000
 80057b4:	40010000 	.word	0x40010000
 80057b8:	48000400 	.word	0x48000400
 80057bc:	48000800 	.word	0x48000800
 80057c0:	48000c00 	.word	0x48000c00
 80057c4:	48001000 	.word	0x48001000
 80057c8:	48001400 	.word	0x48001400
 80057cc:	48001800 	.word	0x48001800
 80057d0:	40010400 	.word	0x40010400

080057d4 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b084      	sub	sp, #16
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d101      	bne.n	80057e6 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e041      	b.n	800586a <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80057ee:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f245 5255 	movw	r2, #21845	; 0x5555
 80057f8:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	6852      	ldr	r2, [r2, #4]
 8005802:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	6892      	ldr	r2, [r2, #8]
 800580c:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800580e:	f7fe f80d 	bl	800382c <HAL_GetTick>
 8005812:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8005814:	e00f      	b.n	8005836 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8005816:	f7fe f809 	bl	800382c <HAL_GetTick>
 800581a:	4602      	mov	r2, r0
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	1ad3      	subs	r3, r2, r3
 8005820:	2b31      	cmp	r3, #49	; 0x31
 8005822:	d908      	bls.n	8005836 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	f003 0307 	and.w	r3, r3, #7
 800582e:	2b00      	cmp	r3, #0
 8005830:	d001      	beq.n	8005836 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8005832:	2303      	movs	r3, #3
 8005834:	e019      	b.n	800586a <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	f003 0307 	and.w	r3, r3, #7
 8005840:	2b00      	cmp	r3, #0
 8005842:	d1e8      	bne.n	8005816 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	691a      	ldr	r2, [r3, #16]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	68db      	ldr	r3, [r3, #12]
 800584e:	429a      	cmp	r2, r3
 8005850:	d005      	beq.n	800585e <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	68d2      	ldr	r2, [r2, #12]
 800585a:	611a      	str	r2, [r3, #16]
 800585c:	e004      	b.n	8005868 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8005866:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005868:	2300      	movs	r3, #0
}
 800586a:	4618      	mov	r0, r3
 800586c:	3710      	adds	r7, #16
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}

08005872 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8005872:	b480      	push	{r7}
 8005874:	b083      	sub	sp, #12
 8005876:	af00      	add	r7, sp, #0
 8005878:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8005882:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005884:	2300      	movs	r3, #0
}
 8005886:	4618      	mov	r0, r3
 8005888:	370c      	adds	r7, #12
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr
	...

08005894 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005894:	b480      	push	{r7}
 8005896:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005898:	4b05      	ldr	r3, [pc, #20]	; (80058b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a04      	ldr	r2, [pc, #16]	; (80058b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800589e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058a2:	6013      	str	r3, [r2, #0]
}
 80058a4:	bf00      	nop
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr
 80058ae:	bf00      	nop
 80058b0:	40007000 	.word	0x40007000

080058b4 <HAL_PWR_EnterSTANDBYMode>:
  *        These states are effective in Standby mode only if APC bit is set through
  *        HAL_PWREx_EnablePullUpPullDownConfig() API.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 80058b4:	b480      	push	{r7}
 80058b6:	af00      	add	r7, sp, #0
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STANDBY);
 80058b8:	4b09      	ldr	r3, [pc, #36]	; (80058e0 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f023 0307 	bic.w	r3, r3, #7
 80058c0:	4a07      	ldr	r2, [pc, #28]	; (80058e0 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80058c2:	f043 0303 	orr.w	r3, r3, #3
 80058c6:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80058c8:	4b06      	ldr	r3, [pc, #24]	; (80058e4 <HAL_PWR_EnterSTANDBYMode+0x30>)
 80058ca:	691b      	ldr	r3, [r3, #16]
 80058cc:	4a05      	ldr	r2, [pc, #20]	; (80058e4 <HAL_PWR_EnterSTANDBYMode+0x30>)
 80058ce:	f043 0304 	orr.w	r3, r3, #4
 80058d2:	6113      	str	r3, [r2, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 80058d4:	bf30      	wfi
}
 80058d6:	bf00      	nop
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr
 80058e0:	40007000 	.word	0x40007000
 80058e4:	e000ed00 	.word	0xe000ed00

080058e8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80058e8:	b480      	push	{r7}
 80058ea:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80058ec:	4b04      	ldr	r3, [pc, #16]	; (8005900 <HAL_PWREx_GetVoltageRange+0x18>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr
 80058fe:	bf00      	nop
 8005900:	40007000 	.word	0x40007000

08005904 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005904:	b480      	push	{r7}
 8005906:	b085      	sub	sp, #20
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005912:	d130      	bne.n	8005976 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005914:	4b23      	ldr	r3, [pc, #140]	; (80059a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800591c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005920:	d038      	beq.n	8005994 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005922:	4b20      	ldr	r3, [pc, #128]	; (80059a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800592a:	4a1e      	ldr	r2, [pc, #120]	; (80059a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800592c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005930:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005932:	4b1d      	ldr	r3, [pc, #116]	; (80059a8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	2232      	movs	r2, #50	; 0x32
 8005938:	fb02 f303 	mul.w	r3, r2, r3
 800593c:	4a1b      	ldr	r2, [pc, #108]	; (80059ac <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800593e:	fba2 2303 	umull	r2, r3, r2, r3
 8005942:	0c9b      	lsrs	r3, r3, #18
 8005944:	3301      	adds	r3, #1
 8005946:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005948:	e002      	b.n	8005950 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	3b01      	subs	r3, #1
 800594e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005950:	4b14      	ldr	r3, [pc, #80]	; (80059a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005952:	695b      	ldr	r3, [r3, #20]
 8005954:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005958:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800595c:	d102      	bne.n	8005964 <HAL_PWREx_ControlVoltageScaling+0x60>
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d1f2      	bne.n	800594a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005964:	4b0f      	ldr	r3, [pc, #60]	; (80059a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005966:	695b      	ldr	r3, [r3, #20]
 8005968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800596c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005970:	d110      	bne.n	8005994 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005972:	2303      	movs	r3, #3
 8005974:	e00f      	b.n	8005996 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005976:	4b0b      	ldr	r3, [pc, #44]	; (80059a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800597e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005982:	d007      	beq.n	8005994 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005984:	4b07      	ldr	r3, [pc, #28]	; (80059a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800598c:	4a05      	ldr	r2, [pc, #20]	; (80059a4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800598e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005992:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	3714      	adds	r7, #20
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr
 80059a2:	bf00      	nop
 80059a4:	40007000 	.word	0x40007000
 80059a8:	20000084 	.word	0x20000084
 80059ac:	431bde83 	.word	0x431bde83

080059b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b088      	sub	sp, #32
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d101      	bne.n	80059c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	e3d4      	b.n	800616c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059c2:	4ba1      	ldr	r3, [pc, #644]	; (8005c48 <HAL_RCC_OscConfig+0x298>)
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	f003 030c 	and.w	r3, r3, #12
 80059ca:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80059cc:	4b9e      	ldr	r3, [pc, #632]	; (8005c48 <HAL_RCC_OscConfig+0x298>)
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	f003 0303 	and.w	r3, r3, #3
 80059d4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f003 0310 	and.w	r3, r3, #16
 80059de:	2b00      	cmp	r3, #0
 80059e0:	f000 80e4 	beq.w	8005bac <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d007      	beq.n	80059fa <HAL_RCC_OscConfig+0x4a>
 80059ea:	69bb      	ldr	r3, [r7, #24]
 80059ec:	2b0c      	cmp	r3, #12
 80059ee:	f040 808b 	bne.w	8005b08 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	f040 8087 	bne.w	8005b08 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80059fa:	4b93      	ldr	r3, [pc, #588]	; (8005c48 <HAL_RCC_OscConfig+0x298>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f003 0302 	and.w	r3, r3, #2
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d005      	beq.n	8005a12 <HAL_RCC_OscConfig+0x62>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	699b      	ldr	r3, [r3, #24]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d101      	bne.n	8005a12 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e3ac      	b.n	800616c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a1a      	ldr	r2, [r3, #32]
 8005a16:	4b8c      	ldr	r3, [pc, #560]	; (8005c48 <HAL_RCC_OscConfig+0x298>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 0308 	and.w	r3, r3, #8
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d004      	beq.n	8005a2c <HAL_RCC_OscConfig+0x7c>
 8005a22:	4b89      	ldr	r3, [pc, #548]	; (8005c48 <HAL_RCC_OscConfig+0x298>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a2a:	e005      	b.n	8005a38 <HAL_RCC_OscConfig+0x88>
 8005a2c:	4b86      	ldr	r3, [pc, #536]	; (8005c48 <HAL_RCC_OscConfig+0x298>)
 8005a2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a32:	091b      	lsrs	r3, r3, #4
 8005a34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d223      	bcs.n	8005a84 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6a1b      	ldr	r3, [r3, #32]
 8005a40:	4618      	mov	r0, r3
 8005a42:	f000 fd41 	bl	80064c8 <RCC_SetFlashLatencyFromMSIRange>
 8005a46:	4603      	mov	r3, r0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d001      	beq.n	8005a50 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e38d      	b.n	800616c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005a50:	4b7d      	ldr	r3, [pc, #500]	; (8005c48 <HAL_RCC_OscConfig+0x298>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a7c      	ldr	r2, [pc, #496]	; (8005c48 <HAL_RCC_OscConfig+0x298>)
 8005a56:	f043 0308 	orr.w	r3, r3, #8
 8005a5a:	6013      	str	r3, [r2, #0]
 8005a5c:	4b7a      	ldr	r3, [pc, #488]	; (8005c48 <HAL_RCC_OscConfig+0x298>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6a1b      	ldr	r3, [r3, #32]
 8005a68:	4977      	ldr	r1, [pc, #476]	; (8005c48 <HAL_RCC_OscConfig+0x298>)
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005a6e:	4b76      	ldr	r3, [pc, #472]	; (8005c48 <HAL_RCC_OscConfig+0x298>)
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	69db      	ldr	r3, [r3, #28]
 8005a7a:	021b      	lsls	r3, r3, #8
 8005a7c:	4972      	ldr	r1, [pc, #456]	; (8005c48 <HAL_RCC_OscConfig+0x298>)
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	604b      	str	r3, [r1, #4]
 8005a82:	e025      	b.n	8005ad0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005a84:	4b70      	ldr	r3, [pc, #448]	; (8005c48 <HAL_RCC_OscConfig+0x298>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a6f      	ldr	r2, [pc, #444]	; (8005c48 <HAL_RCC_OscConfig+0x298>)
 8005a8a:	f043 0308 	orr.w	r3, r3, #8
 8005a8e:	6013      	str	r3, [r2, #0]
 8005a90:	4b6d      	ldr	r3, [pc, #436]	; (8005c48 <HAL_RCC_OscConfig+0x298>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6a1b      	ldr	r3, [r3, #32]
 8005a9c:	496a      	ldr	r1, [pc, #424]	; (8005c48 <HAL_RCC_OscConfig+0x298>)
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005aa2:	4b69      	ldr	r3, [pc, #420]	; (8005c48 <HAL_RCC_OscConfig+0x298>)
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	69db      	ldr	r3, [r3, #28]
 8005aae:	021b      	lsls	r3, r3, #8
 8005ab0:	4965      	ldr	r1, [pc, #404]	; (8005c48 <HAL_RCC_OscConfig+0x298>)
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005ab6:	69bb      	ldr	r3, [r7, #24]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d109      	bne.n	8005ad0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6a1b      	ldr	r3, [r3, #32]
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f000 fd01 	bl	80064c8 <RCC_SetFlashLatencyFromMSIRange>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d001      	beq.n	8005ad0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	e34d      	b.n	800616c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005ad0:	f000 fc36 	bl	8006340 <HAL_RCC_GetSysClockFreq>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	4b5c      	ldr	r3, [pc, #368]	; (8005c48 <HAL_RCC_OscConfig+0x298>)
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	091b      	lsrs	r3, r3, #4
 8005adc:	f003 030f 	and.w	r3, r3, #15
 8005ae0:	495a      	ldr	r1, [pc, #360]	; (8005c4c <HAL_RCC_OscConfig+0x29c>)
 8005ae2:	5ccb      	ldrb	r3, [r1, r3]
 8005ae4:	f003 031f 	and.w	r3, r3, #31
 8005ae8:	fa22 f303 	lsr.w	r3, r2, r3
 8005aec:	4a58      	ldr	r2, [pc, #352]	; (8005c50 <HAL_RCC_OscConfig+0x2a0>)
 8005aee:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005af0:	4b58      	ldr	r3, [pc, #352]	; (8005c54 <HAL_RCC_OscConfig+0x2a4>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4618      	mov	r0, r3
 8005af6:	f7fd fe49 	bl	800378c <HAL_InitTick>
 8005afa:	4603      	mov	r3, r0
 8005afc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005afe:	7bfb      	ldrb	r3, [r7, #15]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d052      	beq.n	8005baa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005b04:	7bfb      	ldrb	r3, [r7, #15]
 8005b06:	e331      	b.n	800616c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	699b      	ldr	r3, [r3, #24]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d032      	beq.n	8005b76 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005b10:	4b4d      	ldr	r3, [pc, #308]	; (8005c48 <HAL_RCC_OscConfig+0x298>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a4c      	ldr	r2, [pc, #304]	; (8005c48 <HAL_RCC_OscConfig+0x298>)
 8005b16:	f043 0301 	orr.w	r3, r3, #1
 8005b1a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005b1c:	f7fd fe86 	bl	800382c <HAL_GetTick>
 8005b20:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005b22:	e008      	b.n	8005b36 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005b24:	f7fd fe82 	bl	800382c <HAL_GetTick>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	1ad3      	subs	r3, r2, r3
 8005b2e:	2b02      	cmp	r3, #2
 8005b30:	d901      	bls.n	8005b36 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8005b32:	2303      	movs	r3, #3
 8005b34:	e31a      	b.n	800616c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005b36:	4b44      	ldr	r3, [pc, #272]	; (8005c48 <HAL_RCC_OscConfig+0x298>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f003 0302 	and.w	r3, r3, #2
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d0f0      	beq.n	8005b24 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005b42:	4b41      	ldr	r3, [pc, #260]	; (8005c48 <HAL_RCC_OscConfig+0x298>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a40      	ldr	r2, [pc, #256]	; (8005c48 <HAL_RCC_OscConfig+0x298>)
 8005b48:	f043 0308 	orr.w	r3, r3, #8
 8005b4c:	6013      	str	r3, [r2, #0]
 8005b4e:	4b3e      	ldr	r3, [pc, #248]	; (8005c48 <HAL_RCC_OscConfig+0x298>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a1b      	ldr	r3, [r3, #32]
 8005b5a:	493b      	ldr	r1, [pc, #236]	; (8005c48 <HAL_RCC_OscConfig+0x298>)
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005b60:	4b39      	ldr	r3, [pc, #228]	; (8005c48 <HAL_RCC_OscConfig+0x298>)
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	69db      	ldr	r3, [r3, #28]
 8005b6c:	021b      	lsls	r3, r3, #8
 8005b6e:	4936      	ldr	r1, [pc, #216]	; (8005c48 <HAL_RCC_OscConfig+0x298>)
 8005b70:	4313      	orrs	r3, r2
 8005b72:	604b      	str	r3, [r1, #4]
 8005b74:	e01a      	b.n	8005bac <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005b76:	4b34      	ldr	r3, [pc, #208]	; (8005c48 <HAL_RCC_OscConfig+0x298>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a33      	ldr	r2, [pc, #204]	; (8005c48 <HAL_RCC_OscConfig+0x298>)
 8005b7c:	f023 0301 	bic.w	r3, r3, #1
 8005b80:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005b82:	f7fd fe53 	bl	800382c <HAL_GetTick>
 8005b86:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005b88:	e008      	b.n	8005b9c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005b8a:	f7fd fe4f 	bl	800382c <HAL_GetTick>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	1ad3      	subs	r3, r2, r3
 8005b94:	2b02      	cmp	r3, #2
 8005b96:	d901      	bls.n	8005b9c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005b98:	2303      	movs	r3, #3
 8005b9a:	e2e7      	b.n	800616c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005b9c:	4b2a      	ldr	r3, [pc, #168]	; (8005c48 <HAL_RCC_OscConfig+0x298>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 0302 	and.w	r3, r3, #2
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d1f0      	bne.n	8005b8a <HAL_RCC_OscConfig+0x1da>
 8005ba8:	e000      	b.n	8005bac <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005baa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f003 0301 	and.w	r3, r3, #1
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d074      	beq.n	8005ca2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005bb8:	69bb      	ldr	r3, [r7, #24]
 8005bba:	2b08      	cmp	r3, #8
 8005bbc:	d005      	beq.n	8005bca <HAL_RCC_OscConfig+0x21a>
 8005bbe:	69bb      	ldr	r3, [r7, #24]
 8005bc0:	2b0c      	cmp	r3, #12
 8005bc2:	d10e      	bne.n	8005be2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	2b03      	cmp	r3, #3
 8005bc8:	d10b      	bne.n	8005be2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bca:	4b1f      	ldr	r3, [pc, #124]	; (8005c48 <HAL_RCC_OscConfig+0x298>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d064      	beq.n	8005ca0 <HAL_RCC_OscConfig+0x2f0>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d160      	bne.n	8005ca0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	e2c4      	b.n	800616c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bea:	d106      	bne.n	8005bfa <HAL_RCC_OscConfig+0x24a>
 8005bec:	4b16      	ldr	r3, [pc, #88]	; (8005c48 <HAL_RCC_OscConfig+0x298>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a15      	ldr	r2, [pc, #84]	; (8005c48 <HAL_RCC_OscConfig+0x298>)
 8005bf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bf6:	6013      	str	r3, [r2, #0]
 8005bf8:	e01d      	b.n	8005c36 <HAL_RCC_OscConfig+0x286>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c02:	d10c      	bne.n	8005c1e <HAL_RCC_OscConfig+0x26e>
 8005c04:	4b10      	ldr	r3, [pc, #64]	; (8005c48 <HAL_RCC_OscConfig+0x298>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a0f      	ldr	r2, [pc, #60]	; (8005c48 <HAL_RCC_OscConfig+0x298>)
 8005c0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c0e:	6013      	str	r3, [r2, #0]
 8005c10:	4b0d      	ldr	r3, [pc, #52]	; (8005c48 <HAL_RCC_OscConfig+0x298>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a0c      	ldr	r2, [pc, #48]	; (8005c48 <HAL_RCC_OscConfig+0x298>)
 8005c16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c1a:	6013      	str	r3, [r2, #0]
 8005c1c:	e00b      	b.n	8005c36 <HAL_RCC_OscConfig+0x286>
 8005c1e:	4b0a      	ldr	r3, [pc, #40]	; (8005c48 <HAL_RCC_OscConfig+0x298>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a09      	ldr	r2, [pc, #36]	; (8005c48 <HAL_RCC_OscConfig+0x298>)
 8005c24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c28:	6013      	str	r3, [r2, #0]
 8005c2a:	4b07      	ldr	r3, [pc, #28]	; (8005c48 <HAL_RCC_OscConfig+0x298>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a06      	ldr	r2, [pc, #24]	; (8005c48 <HAL_RCC_OscConfig+0x298>)
 8005c30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c34:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d01c      	beq.n	8005c78 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c3e:	f7fd fdf5 	bl	800382c <HAL_GetTick>
 8005c42:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c44:	e011      	b.n	8005c6a <HAL_RCC_OscConfig+0x2ba>
 8005c46:	bf00      	nop
 8005c48:	40021000 	.word	0x40021000
 8005c4c:	0800d43c 	.word	0x0800d43c
 8005c50:	20000084 	.word	0x20000084
 8005c54:	20000088 	.word	0x20000088
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c58:	f7fd fde8 	bl	800382c <HAL_GetTick>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	1ad3      	subs	r3, r2, r3
 8005c62:	2b64      	cmp	r3, #100	; 0x64
 8005c64:	d901      	bls.n	8005c6a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005c66:	2303      	movs	r3, #3
 8005c68:	e280      	b.n	800616c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c6a:	4baf      	ldr	r3, [pc, #700]	; (8005f28 <HAL_RCC_OscConfig+0x578>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d0f0      	beq.n	8005c58 <HAL_RCC_OscConfig+0x2a8>
 8005c76:	e014      	b.n	8005ca2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c78:	f7fd fdd8 	bl	800382c <HAL_GetTick>
 8005c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005c7e:	e008      	b.n	8005c92 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c80:	f7fd fdd4 	bl	800382c <HAL_GetTick>
 8005c84:	4602      	mov	r2, r0
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	1ad3      	subs	r3, r2, r3
 8005c8a:	2b64      	cmp	r3, #100	; 0x64
 8005c8c:	d901      	bls.n	8005c92 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005c8e:	2303      	movs	r3, #3
 8005c90:	e26c      	b.n	800616c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005c92:	4ba5      	ldr	r3, [pc, #660]	; (8005f28 <HAL_RCC_OscConfig+0x578>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d1f0      	bne.n	8005c80 <HAL_RCC_OscConfig+0x2d0>
 8005c9e:	e000      	b.n	8005ca2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ca0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f003 0302 	and.w	r3, r3, #2
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d060      	beq.n	8005d70 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005cae:	69bb      	ldr	r3, [r7, #24]
 8005cb0:	2b04      	cmp	r3, #4
 8005cb2:	d005      	beq.n	8005cc0 <HAL_RCC_OscConfig+0x310>
 8005cb4:	69bb      	ldr	r3, [r7, #24]
 8005cb6:	2b0c      	cmp	r3, #12
 8005cb8:	d119      	bne.n	8005cee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	2b02      	cmp	r3, #2
 8005cbe:	d116      	bne.n	8005cee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005cc0:	4b99      	ldr	r3, [pc, #612]	; (8005f28 <HAL_RCC_OscConfig+0x578>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d005      	beq.n	8005cd8 <HAL_RCC_OscConfig+0x328>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d101      	bne.n	8005cd8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	e249      	b.n	800616c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cd8:	4b93      	ldr	r3, [pc, #588]	; (8005f28 <HAL_RCC_OscConfig+0x578>)
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	691b      	ldr	r3, [r3, #16]
 8005ce4:	061b      	lsls	r3, r3, #24
 8005ce6:	4990      	ldr	r1, [pc, #576]	; (8005f28 <HAL_RCC_OscConfig+0x578>)
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005cec:	e040      	b.n	8005d70 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d023      	beq.n	8005d3e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005cf6:	4b8c      	ldr	r3, [pc, #560]	; (8005f28 <HAL_RCC_OscConfig+0x578>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a8b      	ldr	r2, [pc, #556]	; (8005f28 <HAL_RCC_OscConfig+0x578>)
 8005cfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d02:	f7fd fd93 	bl	800382c <HAL_GetTick>
 8005d06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d08:	e008      	b.n	8005d1c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d0a:	f7fd fd8f 	bl	800382c <HAL_GetTick>
 8005d0e:	4602      	mov	r2, r0
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	1ad3      	subs	r3, r2, r3
 8005d14:	2b02      	cmp	r3, #2
 8005d16:	d901      	bls.n	8005d1c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005d18:	2303      	movs	r3, #3
 8005d1a:	e227      	b.n	800616c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d1c:	4b82      	ldr	r3, [pc, #520]	; (8005f28 <HAL_RCC_OscConfig+0x578>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d0f0      	beq.n	8005d0a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d28:	4b7f      	ldr	r3, [pc, #508]	; (8005f28 <HAL_RCC_OscConfig+0x578>)
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	691b      	ldr	r3, [r3, #16]
 8005d34:	061b      	lsls	r3, r3, #24
 8005d36:	497c      	ldr	r1, [pc, #496]	; (8005f28 <HAL_RCC_OscConfig+0x578>)
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	604b      	str	r3, [r1, #4]
 8005d3c:	e018      	b.n	8005d70 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d3e:	4b7a      	ldr	r3, [pc, #488]	; (8005f28 <HAL_RCC_OscConfig+0x578>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a79      	ldr	r2, [pc, #484]	; (8005f28 <HAL_RCC_OscConfig+0x578>)
 8005d44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d4a:	f7fd fd6f 	bl	800382c <HAL_GetTick>
 8005d4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005d50:	e008      	b.n	8005d64 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d52:	f7fd fd6b 	bl	800382c <HAL_GetTick>
 8005d56:	4602      	mov	r2, r0
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	1ad3      	subs	r3, r2, r3
 8005d5c:	2b02      	cmp	r3, #2
 8005d5e:	d901      	bls.n	8005d64 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005d60:	2303      	movs	r3, #3
 8005d62:	e203      	b.n	800616c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005d64:	4b70      	ldr	r3, [pc, #448]	; (8005f28 <HAL_RCC_OscConfig+0x578>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d1f0      	bne.n	8005d52 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f003 0308 	and.w	r3, r3, #8
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d03c      	beq.n	8005df6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	695b      	ldr	r3, [r3, #20]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d01c      	beq.n	8005dbe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d84:	4b68      	ldr	r3, [pc, #416]	; (8005f28 <HAL_RCC_OscConfig+0x578>)
 8005d86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d8a:	4a67      	ldr	r2, [pc, #412]	; (8005f28 <HAL_RCC_OscConfig+0x578>)
 8005d8c:	f043 0301 	orr.w	r3, r3, #1
 8005d90:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d94:	f7fd fd4a 	bl	800382c <HAL_GetTick>
 8005d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005d9a:	e008      	b.n	8005dae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d9c:	f7fd fd46 	bl	800382c <HAL_GetTick>
 8005da0:	4602      	mov	r2, r0
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	2b02      	cmp	r3, #2
 8005da8:	d901      	bls.n	8005dae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	e1de      	b.n	800616c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005dae:	4b5e      	ldr	r3, [pc, #376]	; (8005f28 <HAL_RCC_OscConfig+0x578>)
 8005db0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005db4:	f003 0302 	and.w	r3, r3, #2
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d0ef      	beq.n	8005d9c <HAL_RCC_OscConfig+0x3ec>
 8005dbc:	e01b      	b.n	8005df6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005dbe:	4b5a      	ldr	r3, [pc, #360]	; (8005f28 <HAL_RCC_OscConfig+0x578>)
 8005dc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005dc4:	4a58      	ldr	r2, [pc, #352]	; (8005f28 <HAL_RCC_OscConfig+0x578>)
 8005dc6:	f023 0301 	bic.w	r3, r3, #1
 8005dca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dce:	f7fd fd2d 	bl	800382c <HAL_GetTick>
 8005dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005dd4:	e008      	b.n	8005de8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005dd6:	f7fd fd29 	bl	800382c <HAL_GetTick>
 8005dda:	4602      	mov	r2, r0
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	1ad3      	subs	r3, r2, r3
 8005de0:	2b02      	cmp	r3, #2
 8005de2:	d901      	bls.n	8005de8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005de4:	2303      	movs	r3, #3
 8005de6:	e1c1      	b.n	800616c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005de8:	4b4f      	ldr	r3, [pc, #316]	; (8005f28 <HAL_RCC_OscConfig+0x578>)
 8005dea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005dee:	f003 0302 	and.w	r3, r3, #2
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d1ef      	bne.n	8005dd6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 0304 	and.w	r3, r3, #4
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	f000 80a6 	beq.w	8005f50 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e04:	2300      	movs	r3, #0
 8005e06:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005e08:	4b47      	ldr	r3, [pc, #284]	; (8005f28 <HAL_RCC_OscConfig+0x578>)
 8005e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d10d      	bne.n	8005e30 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e14:	4b44      	ldr	r3, [pc, #272]	; (8005f28 <HAL_RCC_OscConfig+0x578>)
 8005e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e18:	4a43      	ldr	r2, [pc, #268]	; (8005f28 <HAL_RCC_OscConfig+0x578>)
 8005e1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e1e:	6593      	str	r3, [r2, #88]	; 0x58
 8005e20:	4b41      	ldr	r3, [pc, #260]	; (8005f28 <HAL_RCC_OscConfig+0x578>)
 8005e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e28:	60bb      	str	r3, [r7, #8]
 8005e2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e30:	4b3e      	ldr	r3, [pc, #248]	; (8005f2c <HAL_RCC_OscConfig+0x57c>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d118      	bne.n	8005e6e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e3c:	4b3b      	ldr	r3, [pc, #236]	; (8005f2c <HAL_RCC_OscConfig+0x57c>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a3a      	ldr	r2, [pc, #232]	; (8005f2c <HAL_RCC_OscConfig+0x57c>)
 8005e42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e46:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e48:	f7fd fcf0 	bl	800382c <HAL_GetTick>
 8005e4c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e4e:	e008      	b.n	8005e62 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e50:	f7fd fcec 	bl	800382c <HAL_GetTick>
 8005e54:	4602      	mov	r2, r0
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	1ad3      	subs	r3, r2, r3
 8005e5a:	2b02      	cmp	r3, #2
 8005e5c:	d901      	bls.n	8005e62 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005e5e:	2303      	movs	r3, #3
 8005e60:	e184      	b.n	800616c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e62:	4b32      	ldr	r3, [pc, #200]	; (8005f2c <HAL_RCC_OscConfig+0x57c>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d0f0      	beq.n	8005e50 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d108      	bne.n	8005e88 <HAL_RCC_OscConfig+0x4d8>
 8005e76:	4b2c      	ldr	r3, [pc, #176]	; (8005f28 <HAL_RCC_OscConfig+0x578>)
 8005e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e7c:	4a2a      	ldr	r2, [pc, #168]	; (8005f28 <HAL_RCC_OscConfig+0x578>)
 8005e7e:	f043 0301 	orr.w	r3, r3, #1
 8005e82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005e86:	e024      	b.n	8005ed2 <HAL_RCC_OscConfig+0x522>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	2b05      	cmp	r3, #5
 8005e8e:	d110      	bne.n	8005eb2 <HAL_RCC_OscConfig+0x502>
 8005e90:	4b25      	ldr	r3, [pc, #148]	; (8005f28 <HAL_RCC_OscConfig+0x578>)
 8005e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e96:	4a24      	ldr	r2, [pc, #144]	; (8005f28 <HAL_RCC_OscConfig+0x578>)
 8005e98:	f043 0304 	orr.w	r3, r3, #4
 8005e9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005ea0:	4b21      	ldr	r3, [pc, #132]	; (8005f28 <HAL_RCC_OscConfig+0x578>)
 8005ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ea6:	4a20      	ldr	r2, [pc, #128]	; (8005f28 <HAL_RCC_OscConfig+0x578>)
 8005ea8:	f043 0301 	orr.w	r3, r3, #1
 8005eac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005eb0:	e00f      	b.n	8005ed2 <HAL_RCC_OscConfig+0x522>
 8005eb2:	4b1d      	ldr	r3, [pc, #116]	; (8005f28 <HAL_RCC_OscConfig+0x578>)
 8005eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eb8:	4a1b      	ldr	r2, [pc, #108]	; (8005f28 <HAL_RCC_OscConfig+0x578>)
 8005eba:	f023 0301 	bic.w	r3, r3, #1
 8005ebe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005ec2:	4b19      	ldr	r3, [pc, #100]	; (8005f28 <HAL_RCC_OscConfig+0x578>)
 8005ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ec8:	4a17      	ldr	r2, [pc, #92]	; (8005f28 <HAL_RCC_OscConfig+0x578>)
 8005eca:	f023 0304 	bic.w	r3, r3, #4
 8005ece:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d016      	beq.n	8005f08 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005eda:	f7fd fca7 	bl	800382c <HAL_GetTick>
 8005ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ee0:	e00a      	b.n	8005ef8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ee2:	f7fd fca3 	bl	800382c <HAL_GetTick>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	1ad3      	subs	r3, r2, r3
 8005eec:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d901      	bls.n	8005ef8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8005ef4:	2303      	movs	r3, #3
 8005ef6:	e139      	b.n	800616c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ef8:	4b0b      	ldr	r3, [pc, #44]	; (8005f28 <HAL_RCC_OscConfig+0x578>)
 8005efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005efe:	f003 0302 	and.w	r3, r3, #2
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d0ed      	beq.n	8005ee2 <HAL_RCC_OscConfig+0x532>
 8005f06:	e01a      	b.n	8005f3e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f08:	f7fd fc90 	bl	800382c <HAL_GetTick>
 8005f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005f0e:	e00f      	b.n	8005f30 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f10:	f7fd fc8c 	bl	800382c <HAL_GetTick>
 8005f14:	4602      	mov	r2, r0
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d906      	bls.n	8005f30 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005f22:	2303      	movs	r3, #3
 8005f24:	e122      	b.n	800616c <HAL_RCC_OscConfig+0x7bc>
 8005f26:	bf00      	nop
 8005f28:	40021000 	.word	0x40021000
 8005f2c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005f30:	4b90      	ldr	r3, [pc, #576]	; (8006174 <HAL_RCC_OscConfig+0x7c4>)
 8005f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f36:	f003 0302 	and.w	r3, r3, #2
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d1e8      	bne.n	8005f10 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005f3e:	7ffb      	ldrb	r3, [r7, #31]
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d105      	bne.n	8005f50 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f44:	4b8b      	ldr	r3, [pc, #556]	; (8006174 <HAL_RCC_OscConfig+0x7c4>)
 8005f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f48:	4a8a      	ldr	r2, [pc, #552]	; (8006174 <HAL_RCC_OscConfig+0x7c4>)
 8005f4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f4e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	f000 8108 	beq.w	800616a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f5e:	2b02      	cmp	r3, #2
 8005f60:	f040 80d0 	bne.w	8006104 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005f64:	4b83      	ldr	r3, [pc, #524]	; (8006174 <HAL_RCC_OscConfig+0x7c4>)
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	f003 0203 	and.w	r2, r3, #3
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d130      	bne.n	8005fda <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f82:	3b01      	subs	r3, #1
 8005f84:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f86:	429a      	cmp	r2, r3
 8005f88:	d127      	bne.n	8005fda <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f94:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d11f      	bne.n	8005fda <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005fa4:	2a07      	cmp	r2, #7
 8005fa6:	bf14      	ite	ne
 8005fa8:	2201      	movne	r2, #1
 8005faa:	2200      	moveq	r2, #0
 8005fac:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d113      	bne.n	8005fda <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fbc:	085b      	lsrs	r3, r3, #1
 8005fbe:	3b01      	subs	r3, #1
 8005fc0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d109      	bne.n	8005fda <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd0:	085b      	lsrs	r3, r3, #1
 8005fd2:	3b01      	subs	r3, #1
 8005fd4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d06e      	beq.n	80060b8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005fda:	69bb      	ldr	r3, [r7, #24]
 8005fdc:	2b0c      	cmp	r3, #12
 8005fde:	d069      	beq.n	80060b4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005fe0:	4b64      	ldr	r3, [pc, #400]	; (8006174 <HAL_RCC_OscConfig+0x7c4>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d105      	bne.n	8005ff8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005fec:	4b61      	ldr	r3, [pc, #388]	; (8006174 <HAL_RCC_OscConfig+0x7c4>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d001      	beq.n	8005ffc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	e0b7      	b.n	800616c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005ffc:	4b5d      	ldr	r3, [pc, #372]	; (8006174 <HAL_RCC_OscConfig+0x7c4>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a5c      	ldr	r2, [pc, #368]	; (8006174 <HAL_RCC_OscConfig+0x7c4>)
 8006002:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006006:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006008:	f7fd fc10 	bl	800382c <HAL_GetTick>
 800600c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800600e:	e008      	b.n	8006022 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006010:	f7fd fc0c 	bl	800382c <HAL_GetTick>
 8006014:	4602      	mov	r2, r0
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	1ad3      	subs	r3, r2, r3
 800601a:	2b02      	cmp	r3, #2
 800601c:	d901      	bls.n	8006022 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800601e:	2303      	movs	r3, #3
 8006020:	e0a4      	b.n	800616c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006022:	4b54      	ldr	r3, [pc, #336]	; (8006174 <HAL_RCC_OscConfig+0x7c4>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800602a:	2b00      	cmp	r3, #0
 800602c:	d1f0      	bne.n	8006010 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800602e:	4b51      	ldr	r3, [pc, #324]	; (8006174 <HAL_RCC_OscConfig+0x7c4>)
 8006030:	68da      	ldr	r2, [r3, #12]
 8006032:	4b51      	ldr	r3, [pc, #324]	; (8006178 <HAL_RCC_OscConfig+0x7c8>)
 8006034:	4013      	ands	r3, r2
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800603e:	3a01      	subs	r2, #1
 8006040:	0112      	lsls	r2, r2, #4
 8006042:	4311      	orrs	r1, r2
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006048:	0212      	lsls	r2, r2, #8
 800604a:	4311      	orrs	r1, r2
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006050:	0852      	lsrs	r2, r2, #1
 8006052:	3a01      	subs	r2, #1
 8006054:	0552      	lsls	r2, r2, #21
 8006056:	4311      	orrs	r1, r2
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800605c:	0852      	lsrs	r2, r2, #1
 800605e:	3a01      	subs	r2, #1
 8006060:	0652      	lsls	r2, r2, #25
 8006062:	4311      	orrs	r1, r2
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006068:	0912      	lsrs	r2, r2, #4
 800606a:	0452      	lsls	r2, r2, #17
 800606c:	430a      	orrs	r2, r1
 800606e:	4941      	ldr	r1, [pc, #260]	; (8006174 <HAL_RCC_OscConfig+0x7c4>)
 8006070:	4313      	orrs	r3, r2
 8006072:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006074:	4b3f      	ldr	r3, [pc, #252]	; (8006174 <HAL_RCC_OscConfig+0x7c4>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a3e      	ldr	r2, [pc, #248]	; (8006174 <HAL_RCC_OscConfig+0x7c4>)
 800607a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800607e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006080:	4b3c      	ldr	r3, [pc, #240]	; (8006174 <HAL_RCC_OscConfig+0x7c4>)
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	4a3b      	ldr	r2, [pc, #236]	; (8006174 <HAL_RCC_OscConfig+0x7c4>)
 8006086:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800608a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800608c:	f7fd fbce 	bl	800382c <HAL_GetTick>
 8006090:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006092:	e008      	b.n	80060a6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006094:	f7fd fbca 	bl	800382c <HAL_GetTick>
 8006098:	4602      	mov	r2, r0
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	1ad3      	subs	r3, r2, r3
 800609e:	2b02      	cmp	r3, #2
 80060a0:	d901      	bls.n	80060a6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80060a2:	2303      	movs	r3, #3
 80060a4:	e062      	b.n	800616c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060a6:	4b33      	ldr	r3, [pc, #204]	; (8006174 <HAL_RCC_OscConfig+0x7c4>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d0f0      	beq.n	8006094 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80060b2:	e05a      	b.n	800616a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80060b4:	2301      	movs	r3, #1
 80060b6:	e059      	b.n	800616c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060b8:	4b2e      	ldr	r3, [pc, #184]	; (8006174 <HAL_RCC_OscConfig+0x7c4>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d152      	bne.n	800616a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80060c4:	4b2b      	ldr	r3, [pc, #172]	; (8006174 <HAL_RCC_OscConfig+0x7c4>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a2a      	ldr	r2, [pc, #168]	; (8006174 <HAL_RCC_OscConfig+0x7c4>)
 80060ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80060ce:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80060d0:	4b28      	ldr	r3, [pc, #160]	; (8006174 <HAL_RCC_OscConfig+0x7c4>)
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	4a27      	ldr	r2, [pc, #156]	; (8006174 <HAL_RCC_OscConfig+0x7c4>)
 80060d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80060da:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80060dc:	f7fd fba6 	bl	800382c <HAL_GetTick>
 80060e0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060e2:	e008      	b.n	80060f6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060e4:	f7fd fba2 	bl	800382c <HAL_GetTick>
 80060e8:	4602      	mov	r2, r0
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	1ad3      	subs	r3, r2, r3
 80060ee:	2b02      	cmp	r3, #2
 80060f0:	d901      	bls.n	80060f6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80060f2:	2303      	movs	r3, #3
 80060f4:	e03a      	b.n	800616c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060f6:	4b1f      	ldr	r3, [pc, #124]	; (8006174 <HAL_RCC_OscConfig+0x7c4>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d0f0      	beq.n	80060e4 <HAL_RCC_OscConfig+0x734>
 8006102:	e032      	b.n	800616a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	2b0c      	cmp	r3, #12
 8006108:	d02d      	beq.n	8006166 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800610a:	4b1a      	ldr	r3, [pc, #104]	; (8006174 <HAL_RCC_OscConfig+0x7c4>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a19      	ldr	r2, [pc, #100]	; (8006174 <HAL_RCC_OscConfig+0x7c4>)
 8006110:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006114:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8006116:	4b17      	ldr	r3, [pc, #92]	; (8006174 <HAL_RCC_OscConfig+0x7c4>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800611e:	2b00      	cmp	r3, #0
 8006120:	d105      	bne.n	800612e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006122:	4b14      	ldr	r3, [pc, #80]	; (8006174 <HAL_RCC_OscConfig+0x7c4>)
 8006124:	68db      	ldr	r3, [r3, #12]
 8006126:	4a13      	ldr	r2, [pc, #76]	; (8006174 <HAL_RCC_OscConfig+0x7c4>)
 8006128:	f023 0303 	bic.w	r3, r3, #3
 800612c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800612e:	4b11      	ldr	r3, [pc, #68]	; (8006174 <HAL_RCC_OscConfig+0x7c4>)
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	4a10      	ldr	r2, [pc, #64]	; (8006174 <HAL_RCC_OscConfig+0x7c4>)
 8006134:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006138:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800613c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800613e:	f7fd fb75 	bl	800382c <HAL_GetTick>
 8006142:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006144:	e008      	b.n	8006158 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006146:	f7fd fb71 	bl	800382c <HAL_GetTick>
 800614a:	4602      	mov	r2, r0
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	1ad3      	subs	r3, r2, r3
 8006150:	2b02      	cmp	r3, #2
 8006152:	d901      	bls.n	8006158 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8006154:	2303      	movs	r3, #3
 8006156:	e009      	b.n	800616c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006158:	4b06      	ldr	r3, [pc, #24]	; (8006174 <HAL_RCC_OscConfig+0x7c4>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006160:	2b00      	cmp	r3, #0
 8006162:	d1f0      	bne.n	8006146 <HAL_RCC_OscConfig+0x796>
 8006164:	e001      	b.n	800616a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	e000      	b.n	800616c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800616a:	2300      	movs	r3, #0
}
 800616c:	4618      	mov	r0, r3
 800616e:	3720      	adds	r7, #32
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}
 8006174:	40021000 	.word	0x40021000
 8006178:	f99d808c 	.word	0xf99d808c

0800617c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b084      	sub	sp, #16
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d101      	bne.n	8006190 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	e0c8      	b.n	8006322 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006190:	4b66      	ldr	r3, [pc, #408]	; (800632c <HAL_RCC_ClockConfig+0x1b0>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 0307 	and.w	r3, r3, #7
 8006198:	683a      	ldr	r2, [r7, #0]
 800619a:	429a      	cmp	r2, r3
 800619c:	d910      	bls.n	80061c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800619e:	4b63      	ldr	r3, [pc, #396]	; (800632c <HAL_RCC_ClockConfig+0x1b0>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f023 0207 	bic.w	r2, r3, #7
 80061a6:	4961      	ldr	r1, [pc, #388]	; (800632c <HAL_RCC_ClockConfig+0x1b0>)
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061ae:	4b5f      	ldr	r3, [pc, #380]	; (800632c <HAL_RCC_ClockConfig+0x1b0>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f003 0307 	and.w	r3, r3, #7
 80061b6:	683a      	ldr	r2, [r7, #0]
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d001      	beq.n	80061c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	e0b0      	b.n	8006322 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f003 0301 	and.w	r3, r3, #1
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d04c      	beq.n	8006266 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	2b03      	cmp	r3, #3
 80061d2:	d107      	bne.n	80061e4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80061d4:	4b56      	ldr	r3, [pc, #344]	; (8006330 <HAL_RCC_ClockConfig+0x1b4>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d121      	bne.n	8006224 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	e09e      	b.n	8006322 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	2b02      	cmp	r3, #2
 80061ea:	d107      	bne.n	80061fc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80061ec:	4b50      	ldr	r3, [pc, #320]	; (8006330 <HAL_RCC_ClockConfig+0x1b4>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d115      	bne.n	8006224 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80061f8:	2301      	movs	r3, #1
 80061fa:	e092      	b.n	8006322 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d107      	bne.n	8006214 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006204:	4b4a      	ldr	r3, [pc, #296]	; (8006330 <HAL_RCC_ClockConfig+0x1b4>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f003 0302 	and.w	r3, r3, #2
 800620c:	2b00      	cmp	r3, #0
 800620e:	d109      	bne.n	8006224 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006210:	2301      	movs	r3, #1
 8006212:	e086      	b.n	8006322 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006214:	4b46      	ldr	r3, [pc, #280]	; (8006330 <HAL_RCC_ClockConfig+0x1b4>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800621c:	2b00      	cmp	r3, #0
 800621e:	d101      	bne.n	8006224 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	e07e      	b.n	8006322 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006224:	4b42      	ldr	r3, [pc, #264]	; (8006330 <HAL_RCC_ClockConfig+0x1b4>)
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	f023 0203 	bic.w	r2, r3, #3
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	493f      	ldr	r1, [pc, #252]	; (8006330 <HAL_RCC_ClockConfig+0x1b4>)
 8006232:	4313      	orrs	r3, r2
 8006234:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006236:	f7fd faf9 	bl	800382c <HAL_GetTick>
 800623a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800623c:	e00a      	b.n	8006254 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800623e:	f7fd faf5 	bl	800382c <HAL_GetTick>
 8006242:	4602      	mov	r2, r0
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	1ad3      	subs	r3, r2, r3
 8006248:	f241 3288 	movw	r2, #5000	; 0x1388
 800624c:	4293      	cmp	r3, r2
 800624e:	d901      	bls.n	8006254 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8006250:	2303      	movs	r3, #3
 8006252:	e066      	b.n	8006322 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006254:	4b36      	ldr	r3, [pc, #216]	; (8006330 <HAL_RCC_ClockConfig+0x1b4>)
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	f003 020c 	and.w	r2, r3, #12
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	429a      	cmp	r2, r3
 8006264:	d1eb      	bne.n	800623e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f003 0302 	and.w	r3, r3, #2
 800626e:	2b00      	cmp	r3, #0
 8006270:	d008      	beq.n	8006284 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006272:	4b2f      	ldr	r3, [pc, #188]	; (8006330 <HAL_RCC_ClockConfig+0x1b4>)
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	492c      	ldr	r1, [pc, #176]	; (8006330 <HAL_RCC_ClockConfig+0x1b4>)
 8006280:	4313      	orrs	r3, r2
 8006282:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006284:	4b29      	ldr	r3, [pc, #164]	; (800632c <HAL_RCC_ClockConfig+0x1b0>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f003 0307 	and.w	r3, r3, #7
 800628c:	683a      	ldr	r2, [r7, #0]
 800628e:	429a      	cmp	r2, r3
 8006290:	d210      	bcs.n	80062b4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006292:	4b26      	ldr	r3, [pc, #152]	; (800632c <HAL_RCC_ClockConfig+0x1b0>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f023 0207 	bic.w	r2, r3, #7
 800629a:	4924      	ldr	r1, [pc, #144]	; (800632c <HAL_RCC_ClockConfig+0x1b0>)
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	4313      	orrs	r3, r2
 80062a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062a2:	4b22      	ldr	r3, [pc, #136]	; (800632c <HAL_RCC_ClockConfig+0x1b0>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f003 0307 	and.w	r3, r3, #7
 80062aa:	683a      	ldr	r2, [r7, #0]
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d001      	beq.n	80062b4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80062b0:	2301      	movs	r3, #1
 80062b2:	e036      	b.n	8006322 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f003 0304 	and.w	r3, r3, #4
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d008      	beq.n	80062d2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80062c0:	4b1b      	ldr	r3, [pc, #108]	; (8006330 <HAL_RCC_ClockConfig+0x1b4>)
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	68db      	ldr	r3, [r3, #12]
 80062cc:	4918      	ldr	r1, [pc, #96]	; (8006330 <HAL_RCC_ClockConfig+0x1b4>)
 80062ce:	4313      	orrs	r3, r2
 80062d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f003 0308 	and.w	r3, r3, #8
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d009      	beq.n	80062f2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80062de:	4b14      	ldr	r3, [pc, #80]	; (8006330 <HAL_RCC_ClockConfig+0x1b4>)
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	00db      	lsls	r3, r3, #3
 80062ec:	4910      	ldr	r1, [pc, #64]	; (8006330 <HAL_RCC_ClockConfig+0x1b4>)
 80062ee:	4313      	orrs	r3, r2
 80062f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80062f2:	f000 f825 	bl	8006340 <HAL_RCC_GetSysClockFreq>
 80062f6:	4602      	mov	r2, r0
 80062f8:	4b0d      	ldr	r3, [pc, #52]	; (8006330 <HAL_RCC_ClockConfig+0x1b4>)
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	091b      	lsrs	r3, r3, #4
 80062fe:	f003 030f 	and.w	r3, r3, #15
 8006302:	490c      	ldr	r1, [pc, #48]	; (8006334 <HAL_RCC_ClockConfig+0x1b8>)
 8006304:	5ccb      	ldrb	r3, [r1, r3]
 8006306:	f003 031f 	and.w	r3, r3, #31
 800630a:	fa22 f303 	lsr.w	r3, r2, r3
 800630e:	4a0a      	ldr	r2, [pc, #40]	; (8006338 <HAL_RCC_ClockConfig+0x1bc>)
 8006310:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006312:	4b0a      	ldr	r3, [pc, #40]	; (800633c <HAL_RCC_ClockConfig+0x1c0>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4618      	mov	r0, r3
 8006318:	f7fd fa38 	bl	800378c <HAL_InitTick>
 800631c:	4603      	mov	r3, r0
 800631e:	72fb      	strb	r3, [r7, #11]

  return status;
 8006320:	7afb      	ldrb	r3, [r7, #11]
}
 8006322:	4618      	mov	r0, r3
 8006324:	3710      	adds	r7, #16
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	40022000 	.word	0x40022000
 8006330:	40021000 	.word	0x40021000
 8006334:	0800d43c 	.word	0x0800d43c
 8006338:	20000084 	.word	0x20000084
 800633c:	20000088 	.word	0x20000088

08006340 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006340:	b480      	push	{r7}
 8006342:	b089      	sub	sp, #36	; 0x24
 8006344:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006346:	2300      	movs	r3, #0
 8006348:	61fb      	str	r3, [r7, #28]
 800634a:	2300      	movs	r3, #0
 800634c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800634e:	4b3e      	ldr	r3, [pc, #248]	; (8006448 <HAL_RCC_GetSysClockFreq+0x108>)
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	f003 030c 	and.w	r3, r3, #12
 8006356:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006358:	4b3b      	ldr	r3, [pc, #236]	; (8006448 <HAL_RCC_GetSysClockFreq+0x108>)
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	f003 0303 	and.w	r3, r3, #3
 8006360:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d005      	beq.n	8006374 <HAL_RCC_GetSysClockFreq+0x34>
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	2b0c      	cmp	r3, #12
 800636c:	d121      	bne.n	80063b2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2b01      	cmp	r3, #1
 8006372:	d11e      	bne.n	80063b2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006374:	4b34      	ldr	r3, [pc, #208]	; (8006448 <HAL_RCC_GetSysClockFreq+0x108>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f003 0308 	and.w	r3, r3, #8
 800637c:	2b00      	cmp	r3, #0
 800637e:	d107      	bne.n	8006390 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006380:	4b31      	ldr	r3, [pc, #196]	; (8006448 <HAL_RCC_GetSysClockFreq+0x108>)
 8006382:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006386:	0a1b      	lsrs	r3, r3, #8
 8006388:	f003 030f 	and.w	r3, r3, #15
 800638c:	61fb      	str	r3, [r7, #28]
 800638e:	e005      	b.n	800639c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006390:	4b2d      	ldr	r3, [pc, #180]	; (8006448 <HAL_RCC_GetSysClockFreq+0x108>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	091b      	lsrs	r3, r3, #4
 8006396:	f003 030f 	and.w	r3, r3, #15
 800639a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800639c:	4a2b      	ldr	r2, [pc, #172]	; (800644c <HAL_RCC_GetSysClockFreq+0x10c>)
 800639e:	69fb      	ldr	r3, [r7, #28]
 80063a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063a4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d10d      	bne.n	80063c8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80063ac:	69fb      	ldr	r3, [r7, #28]
 80063ae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80063b0:	e00a      	b.n	80063c8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	2b04      	cmp	r3, #4
 80063b6:	d102      	bne.n	80063be <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80063b8:	4b25      	ldr	r3, [pc, #148]	; (8006450 <HAL_RCC_GetSysClockFreq+0x110>)
 80063ba:	61bb      	str	r3, [r7, #24]
 80063bc:	e004      	b.n	80063c8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	2b08      	cmp	r3, #8
 80063c2:	d101      	bne.n	80063c8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80063c4:	4b23      	ldr	r3, [pc, #140]	; (8006454 <HAL_RCC_GetSysClockFreq+0x114>)
 80063c6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	2b0c      	cmp	r3, #12
 80063cc:	d134      	bne.n	8006438 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80063ce:	4b1e      	ldr	r3, [pc, #120]	; (8006448 <HAL_RCC_GetSysClockFreq+0x108>)
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	f003 0303 	and.w	r3, r3, #3
 80063d6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	2b02      	cmp	r3, #2
 80063dc:	d003      	beq.n	80063e6 <HAL_RCC_GetSysClockFreq+0xa6>
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	2b03      	cmp	r3, #3
 80063e2:	d003      	beq.n	80063ec <HAL_RCC_GetSysClockFreq+0xac>
 80063e4:	e005      	b.n	80063f2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80063e6:	4b1a      	ldr	r3, [pc, #104]	; (8006450 <HAL_RCC_GetSysClockFreq+0x110>)
 80063e8:	617b      	str	r3, [r7, #20]
      break;
 80063ea:	e005      	b.n	80063f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80063ec:	4b19      	ldr	r3, [pc, #100]	; (8006454 <HAL_RCC_GetSysClockFreq+0x114>)
 80063ee:	617b      	str	r3, [r7, #20]
      break;
 80063f0:	e002      	b.n	80063f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80063f2:	69fb      	ldr	r3, [r7, #28]
 80063f4:	617b      	str	r3, [r7, #20]
      break;
 80063f6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80063f8:	4b13      	ldr	r3, [pc, #76]	; (8006448 <HAL_RCC_GetSysClockFreq+0x108>)
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	091b      	lsrs	r3, r3, #4
 80063fe:	f003 0307 	and.w	r3, r3, #7
 8006402:	3301      	adds	r3, #1
 8006404:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006406:	4b10      	ldr	r3, [pc, #64]	; (8006448 <HAL_RCC_GetSysClockFreq+0x108>)
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	0a1b      	lsrs	r3, r3, #8
 800640c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006410:	697a      	ldr	r2, [r7, #20]
 8006412:	fb02 f203 	mul.w	r2, r2, r3
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	fbb2 f3f3 	udiv	r3, r2, r3
 800641c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800641e:	4b0a      	ldr	r3, [pc, #40]	; (8006448 <HAL_RCC_GetSysClockFreq+0x108>)
 8006420:	68db      	ldr	r3, [r3, #12]
 8006422:	0e5b      	lsrs	r3, r3, #25
 8006424:	f003 0303 	and.w	r3, r3, #3
 8006428:	3301      	adds	r3, #1
 800642a:	005b      	lsls	r3, r3, #1
 800642c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800642e:	697a      	ldr	r2, [r7, #20]
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	fbb2 f3f3 	udiv	r3, r2, r3
 8006436:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006438:	69bb      	ldr	r3, [r7, #24]
}
 800643a:	4618      	mov	r0, r3
 800643c:	3724      	adds	r7, #36	; 0x24
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr
 8006446:	bf00      	nop
 8006448:	40021000 	.word	0x40021000
 800644c:	0800d454 	.word	0x0800d454
 8006450:	00f42400 	.word	0x00f42400
 8006454:	007a1200 	.word	0x007a1200

08006458 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006458:	b480      	push	{r7}
 800645a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800645c:	4b03      	ldr	r3, [pc, #12]	; (800646c <HAL_RCC_GetHCLKFreq+0x14>)
 800645e:	681b      	ldr	r3, [r3, #0]
}
 8006460:	4618      	mov	r0, r3
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr
 800646a:	bf00      	nop
 800646c:	20000084 	.word	0x20000084

08006470 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006474:	f7ff fff0 	bl	8006458 <HAL_RCC_GetHCLKFreq>
 8006478:	4602      	mov	r2, r0
 800647a:	4b06      	ldr	r3, [pc, #24]	; (8006494 <HAL_RCC_GetPCLK1Freq+0x24>)
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	0a1b      	lsrs	r3, r3, #8
 8006480:	f003 0307 	and.w	r3, r3, #7
 8006484:	4904      	ldr	r1, [pc, #16]	; (8006498 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006486:	5ccb      	ldrb	r3, [r1, r3]
 8006488:	f003 031f 	and.w	r3, r3, #31
 800648c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006490:	4618      	mov	r0, r3
 8006492:	bd80      	pop	{r7, pc}
 8006494:	40021000 	.word	0x40021000
 8006498:	0800d44c 	.word	0x0800d44c

0800649c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80064a0:	f7ff ffda 	bl	8006458 <HAL_RCC_GetHCLKFreq>
 80064a4:	4602      	mov	r2, r0
 80064a6:	4b06      	ldr	r3, [pc, #24]	; (80064c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	0adb      	lsrs	r3, r3, #11
 80064ac:	f003 0307 	and.w	r3, r3, #7
 80064b0:	4904      	ldr	r1, [pc, #16]	; (80064c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80064b2:	5ccb      	ldrb	r3, [r1, r3]
 80064b4:	f003 031f 	and.w	r3, r3, #31
 80064b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064bc:	4618      	mov	r0, r3
 80064be:	bd80      	pop	{r7, pc}
 80064c0:	40021000 	.word	0x40021000
 80064c4:	0800d44c 	.word	0x0800d44c

080064c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b086      	sub	sp, #24
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80064d0:	2300      	movs	r3, #0
 80064d2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80064d4:	4b2a      	ldr	r3, [pc, #168]	; (8006580 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80064d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d003      	beq.n	80064e8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80064e0:	f7ff fa02 	bl	80058e8 <HAL_PWREx_GetVoltageRange>
 80064e4:	6178      	str	r0, [r7, #20]
 80064e6:	e014      	b.n	8006512 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80064e8:	4b25      	ldr	r3, [pc, #148]	; (8006580 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80064ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064ec:	4a24      	ldr	r2, [pc, #144]	; (8006580 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80064ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064f2:	6593      	str	r3, [r2, #88]	; 0x58
 80064f4:	4b22      	ldr	r3, [pc, #136]	; (8006580 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80064f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064fc:	60fb      	str	r3, [r7, #12]
 80064fe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006500:	f7ff f9f2 	bl	80058e8 <HAL_PWREx_GetVoltageRange>
 8006504:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006506:	4b1e      	ldr	r3, [pc, #120]	; (8006580 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800650a:	4a1d      	ldr	r2, [pc, #116]	; (8006580 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800650c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006510:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006518:	d10b      	bne.n	8006532 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2b80      	cmp	r3, #128	; 0x80
 800651e:	d919      	bls.n	8006554 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2ba0      	cmp	r3, #160	; 0xa0
 8006524:	d902      	bls.n	800652c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006526:	2302      	movs	r3, #2
 8006528:	613b      	str	r3, [r7, #16]
 800652a:	e013      	b.n	8006554 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800652c:	2301      	movs	r3, #1
 800652e:	613b      	str	r3, [r7, #16]
 8006530:	e010      	b.n	8006554 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2b80      	cmp	r3, #128	; 0x80
 8006536:	d902      	bls.n	800653e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006538:	2303      	movs	r3, #3
 800653a:	613b      	str	r3, [r7, #16]
 800653c:	e00a      	b.n	8006554 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2b80      	cmp	r3, #128	; 0x80
 8006542:	d102      	bne.n	800654a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006544:	2302      	movs	r3, #2
 8006546:	613b      	str	r3, [r7, #16]
 8006548:	e004      	b.n	8006554 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2b70      	cmp	r3, #112	; 0x70
 800654e:	d101      	bne.n	8006554 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006550:	2301      	movs	r3, #1
 8006552:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006554:	4b0b      	ldr	r3, [pc, #44]	; (8006584 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f023 0207 	bic.w	r2, r3, #7
 800655c:	4909      	ldr	r1, [pc, #36]	; (8006584 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	4313      	orrs	r3, r2
 8006562:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006564:	4b07      	ldr	r3, [pc, #28]	; (8006584 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f003 0307 	and.w	r3, r3, #7
 800656c:	693a      	ldr	r2, [r7, #16]
 800656e:	429a      	cmp	r2, r3
 8006570:	d001      	beq.n	8006576 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	e000      	b.n	8006578 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006576:	2300      	movs	r3, #0
}
 8006578:	4618      	mov	r0, r3
 800657a:	3718      	adds	r7, #24
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}
 8006580:	40021000 	.word	0x40021000
 8006584:	40022000 	.word	0x40022000

08006588 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b086      	sub	sp, #24
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006590:	2300      	movs	r3, #0
 8006592:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006594:	2300      	movs	r3, #0
 8006596:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d041      	beq.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065a8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80065ac:	d02a      	beq.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80065ae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80065b2:	d824      	bhi.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80065b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80065b8:	d008      	beq.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80065ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80065be:	d81e      	bhi.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x76>
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d00a      	beq.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x52>
 80065c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065c8:	d010      	beq.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x64>
 80065ca:	e018      	b.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80065cc:	4b86      	ldr	r3, [pc, #536]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80065ce:	68db      	ldr	r3, [r3, #12]
 80065d0:	4a85      	ldr	r2, [pc, #532]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80065d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065d6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80065d8:	e015      	b.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	3304      	adds	r3, #4
 80065de:	2100      	movs	r1, #0
 80065e0:	4618      	mov	r0, r3
 80065e2:	f000 facb 	bl	8006b7c <RCCEx_PLLSAI1_Config>
 80065e6:	4603      	mov	r3, r0
 80065e8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80065ea:	e00c      	b.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	3320      	adds	r3, #32
 80065f0:	2100      	movs	r1, #0
 80065f2:	4618      	mov	r0, r3
 80065f4:	f000 fbb6 	bl	8006d64 <RCCEx_PLLSAI2_Config>
 80065f8:	4603      	mov	r3, r0
 80065fa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80065fc:	e003      	b.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	74fb      	strb	r3, [r7, #19]
      break;
 8006602:	e000      	b.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006604:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006606:	7cfb      	ldrb	r3, [r7, #19]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d10b      	bne.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800660c:	4b76      	ldr	r3, [pc, #472]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800660e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006612:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800661a:	4973      	ldr	r1, [pc, #460]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800661c:	4313      	orrs	r3, r2
 800661e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006622:	e001      	b.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006624:	7cfb      	ldrb	r3, [r7, #19]
 8006626:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006630:	2b00      	cmp	r3, #0
 8006632:	d041      	beq.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006638:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800663c:	d02a      	beq.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800663e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006642:	d824      	bhi.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006644:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006648:	d008      	beq.n	800665c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800664a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800664e:	d81e      	bhi.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006650:	2b00      	cmp	r3, #0
 8006652:	d00a      	beq.n	800666a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8006654:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006658:	d010      	beq.n	800667c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800665a:	e018      	b.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800665c:	4b62      	ldr	r3, [pc, #392]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	4a61      	ldr	r2, [pc, #388]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006662:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006666:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006668:	e015      	b.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	3304      	adds	r3, #4
 800666e:	2100      	movs	r1, #0
 8006670:	4618      	mov	r0, r3
 8006672:	f000 fa83 	bl	8006b7c <RCCEx_PLLSAI1_Config>
 8006676:	4603      	mov	r3, r0
 8006678:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800667a:	e00c      	b.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	3320      	adds	r3, #32
 8006680:	2100      	movs	r1, #0
 8006682:	4618      	mov	r0, r3
 8006684:	f000 fb6e 	bl	8006d64 <RCCEx_PLLSAI2_Config>
 8006688:	4603      	mov	r3, r0
 800668a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800668c:	e003      	b.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	74fb      	strb	r3, [r7, #19]
      break;
 8006692:	e000      	b.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8006694:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006696:	7cfb      	ldrb	r3, [r7, #19]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d10b      	bne.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800669c:	4b52      	ldr	r3, [pc, #328]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800669e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066a2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066aa:	494f      	ldr	r1, [pc, #316]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80066ac:	4313      	orrs	r3, r2
 80066ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80066b2:	e001      	b.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066b4:	7cfb      	ldrb	r3, [r7, #19]
 80066b6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	f000 80a0 	beq.w	8006806 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80066c6:	2300      	movs	r3, #0
 80066c8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80066ca:	4b47      	ldr	r3, [pc, #284]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80066cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d101      	bne.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x152>
 80066d6:	2301      	movs	r3, #1
 80066d8:	e000      	b.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80066da:	2300      	movs	r3, #0
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d00d      	beq.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066e0:	4b41      	ldr	r3, [pc, #260]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80066e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066e4:	4a40      	ldr	r2, [pc, #256]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80066e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066ea:	6593      	str	r3, [r2, #88]	; 0x58
 80066ec:	4b3e      	ldr	r3, [pc, #248]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80066ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066f4:	60bb      	str	r3, [r7, #8]
 80066f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80066f8:	2301      	movs	r3, #1
 80066fa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80066fc:	4b3b      	ldr	r3, [pc, #236]	; (80067ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a3a      	ldr	r2, [pc, #232]	; (80067ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006702:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006706:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006708:	f7fd f890 	bl	800382c <HAL_GetTick>
 800670c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800670e:	e009      	b.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006710:	f7fd f88c 	bl	800382c <HAL_GetTick>
 8006714:	4602      	mov	r2, r0
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	1ad3      	subs	r3, r2, r3
 800671a:	2b02      	cmp	r3, #2
 800671c:	d902      	bls.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800671e:	2303      	movs	r3, #3
 8006720:	74fb      	strb	r3, [r7, #19]
        break;
 8006722:	e005      	b.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006724:	4b31      	ldr	r3, [pc, #196]	; (80067ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800672c:	2b00      	cmp	r3, #0
 800672e:	d0ef      	beq.n	8006710 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8006730:	7cfb      	ldrb	r3, [r7, #19]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d15c      	bne.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006736:	4b2c      	ldr	r3, [pc, #176]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006738:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800673c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006740:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d01f      	beq.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800674e:	697a      	ldr	r2, [r7, #20]
 8006750:	429a      	cmp	r2, r3
 8006752:	d019      	beq.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006754:	4b24      	ldr	r3, [pc, #144]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800675a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800675e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006760:	4b21      	ldr	r3, [pc, #132]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006766:	4a20      	ldr	r2, [pc, #128]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006768:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800676c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006770:	4b1d      	ldr	r3, [pc, #116]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006776:	4a1c      	ldr	r2, [pc, #112]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006778:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800677c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006780:	4a19      	ldr	r2, [pc, #100]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	f003 0301 	and.w	r3, r3, #1
 800678e:	2b00      	cmp	r3, #0
 8006790:	d016      	beq.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006792:	f7fd f84b 	bl	800382c <HAL_GetTick>
 8006796:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006798:	e00b      	b.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800679a:	f7fd f847 	bl	800382c <HAL_GetTick>
 800679e:	4602      	mov	r2, r0
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	1ad3      	subs	r3, r2, r3
 80067a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d902      	bls.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80067ac:	2303      	movs	r3, #3
 80067ae:	74fb      	strb	r3, [r7, #19]
            break;
 80067b0:	e006      	b.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80067b2:	4b0d      	ldr	r3, [pc, #52]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80067b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067b8:	f003 0302 	and.w	r3, r3, #2
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d0ec      	beq.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80067c0:	7cfb      	ldrb	r3, [r7, #19]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d10c      	bne.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80067c6:	4b08      	ldr	r3, [pc, #32]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80067c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067d6:	4904      	ldr	r1, [pc, #16]	; (80067e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80067d8:	4313      	orrs	r3, r2
 80067da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80067de:	e009      	b.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80067e0:	7cfb      	ldrb	r3, [r7, #19]
 80067e2:	74bb      	strb	r3, [r7, #18]
 80067e4:	e006      	b.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80067e6:	bf00      	nop
 80067e8:	40021000 	.word	0x40021000
 80067ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067f0:	7cfb      	ldrb	r3, [r7, #19]
 80067f2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80067f4:	7c7b      	ldrb	r3, [r7, #17]
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	d105      	bne.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80067fa:	4b9e      	ldr	r3, [pc, #632]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067fe:	4a9d      	ldr	r2, [pc, #628]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006800:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006804:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f003 0301 	and.w	r3, r3, #1
 800680e:	2b00      	cmp	r3, #0
 8006810:	d00a      	beq.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006812:	4b98      	ldr	r3, [pc, #608]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006814:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006818:	f023 0203 	bic.w	r2, r3, #3
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006820:	4994      	ldr	r1, [pc, #592]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006822:	4313      	orrs	r3, r2
 8006824:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f003 0302 	and.w	r3, r3, #2
 8006830:	2b00      	cmp	r3, #0
 8006832:	d00a      	beq.n	800684a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006834:	4b8f      	ldr	r3, [pc, #572]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800683a:	f023 020c 	bic.w	r2, r3, #12
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006842:	498c      	ldr	r1, [pc, #560]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006844:	4313      	orrs	r3, r2
 8006846:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f003 0304 	and.w	r3, r3, #4
 8006852:	2b00      	cmp	r3, #0
 8006854:	d00a      	beq.n	800686c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006856:	4b87      	ldr	r3, [pc, #540]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006858:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800685c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006864:	4983      	ldr	r1, [pc, #524]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006866:	4313      	orrs	r3, r2
 8006868:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f003 0308 	and.w	r3, r3, #8
 8006874:	2b00      	cmp	r3, #0
 8006876:	d00a      	beq.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006878:	4b7e      	ldr	r3, [pc, #504]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800687a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800687e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006886:	497b      	ldr	r1, [pc, #492]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006888:	4313      	orrs	r3, r2
 800688a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f003 0310 	and.w	r3, r3, #16
 8006896:	2b00      	cmp	r3, #0
 8006898:	d00a      	beq.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800689a:	4b76      	ldr	r3, [pc, #472]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800689c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068a8:	4972      	ldr	r1, [pc, #456]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80068aa:	4313      	orrs	r3, r2
 80068ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f003 0320 	and.w	r3, r3, #32
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d00a      	beq.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80068bc:	4b6d      	ldr	r3, [pc, #436]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80068be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068c2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068ca:	496a      	ldr	r1, [pc, #424]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80068cc:	4313      	orrs	r3, r2
 80068ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d00a      	beq.n	80068f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80068de:	4b65      	ldr	r3, [pc, #404]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80068e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068ec:	4961      	ldr	r1, [pc, #388]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80068ee:	4313      	orrs	r3, r2
 80068f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d00a      	beq.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006900:	4b5c      	ldr	r3, [pc, #368]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006906:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800690e:	4959      	ldr	r1, [pc, #356]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006910:	4313      	orrs	r3, r2
 8006912:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800691e:	2b00      	cmp	r3, #0
 8006920:	d00a      	beq.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006922:	4b54      	ldr	r3, [pc, #336]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006928:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006930:	4950      	ldr	r1, [pc, #320]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006932:	4313      	orrs	r3, r2
 8006934:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006940:	2b00      	cmp	r3, #0
 8006942:	d00a      	beq.n	800695a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006944:	4b4b      	ldr	r3, [pc, #300]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800694a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006952:	4948      	ldr	r1, [pc, #288]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006954:	4313      	orrs	r3, r2
 8006956:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006962:	2b00      	cmp	r3, #0
 8006964:	d00a      	beq.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006966:	4b43      	ldr	r3, [pc, #268]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006968:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800696c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006974:	493f      	ldr	r1, [pc, #252]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006976:	4313      	orrs	r3, r2
 8006978:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006984:	2b00      	cmp	r3, #0
 8006986:	d028      	beq.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006988:	4b3a      	ldr	r3, [pc, #232]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800698a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800698e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006996:	4937      	ldr	r1, [pc, #220]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006998:	4313      	orrs	r3, r2
 800699a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069a6:	d106      	bne.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80069a8:	4b32      	ldr	r3, [pc, #200]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069aa:	68db      	ldr	r3, [r3, #12]
 80069ac:	4a31      	ldr	r2, [pc, #196]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80069b2:	60d3      	str	r3, [r2, #12]
 80069b4:	e011      	b.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80069be:	d10c      	bne.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	3304      	adds	r3, #4
 80069c4:	2101      	movs	r1, #1
 80069c6:	4618      	mov	r0, r3
 80069c8:	f000 f8d8 	bl	8006b7c <RCCEx_PLLSAI1_Config>
 80069cc:	4603      	mov	r3, r0
 80069ce:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80069d0:	7cfb      	ldrb	r3, [r7, #19]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d001      	beq.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80069d6:	7cfb      	ldrb	r3, [r7, #19]
 80069d8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d028      	beq.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80069e6:	4b23      	ldr	r3, [pc, #140]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069ec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069f4:	491f      	ldr	r1, [pc, #124]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069f6:	4313      	orrs	r3, r2
 80069f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a04:	d106      	bne.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a06:	4b1b      	ldr	r3, [pc, #108]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a08:	68db      	ldr	r3, [r3, #12]
 8006a0a:	4a1a      	ldr	r2, [pc, #104]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a10:	60d3      	str	r3, [r2, #12]
 8006a12:	e011      	b.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a18:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006a1c:	d10c      	bne.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	3304      	adds	r3, #4
 8006a22:	2101      	movs	r1, #1
 8006a24:	4618      	mov	r0, r3
 8006a26:	f000 f8a9 	bl	8006b7c <RCCEx_PLLSAI1_Config>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006a2e:	7cfb      	ldrb	r3, [r7, #19]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d001      	beq.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8006a34:	7cfb      	ldrb	r3, [r7, #19]
 8006a36:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d02b      	beq.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006a44:	4b0b      	ldr	r3, [pc, #44]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a4a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a52:	4908      	ldr	r1, [pc, #32]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a54:	4313      	orrs	r3, r2
 8006a56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a62:	d109      	bne.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a64:	4b03      	ldr	r3, [pc, #12]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	4a02      	ldr	r2, [pc, #8]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a6e:	60d3      	str	r3, [r2, #12]
 8006a70:	e014      	b.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8006a72:	bf00      	nop
 8006a74:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a7c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006a80:	d10c      	bne.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	3304      	adds	r3, #4
 8006a86:	2101      	movs	r1, #1
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f000 f877 	bl	8006b7c <RCCEx_PLLSAI1_Config>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006a92:	7cfb      	ldrb	r3, [r7, #19]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d001      	beq.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8006a98:	7cfb      	ldrb	r3, [r7, #19]
 8006a9a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d02f      	beq.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006aa8:	4b2b      	ldr	r3, [pc, #172]	; (8006b58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ab6:	4928      	ldr	r1, [pc, #160]	; (8006b58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ac2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ac6:	d10d      	bne.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	3304      	adds	r3, #4
 8006acc:	2102      	movs	r1, #2
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f000 f854 	bl	8006b7c <RCCEx_PLLSAI1_Config>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006ad8:	7cfb      	ldrb	r3, [r7, #19]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d014      	beq.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006ade:	7cfb      	ldrb	r3, [r7, #19]
 8006ae0:	74bb      	strb	r3, [r7, #18]
 8006ae2:	e011      	b.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ae8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006aec:	d10c      	bne.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	3320      	adds	r3, #32
 8006af2:	2102      	movs	r1, #2
 8006af4:	4618      	mov	r0, r3
 8006af6:	f000 f935 	bl	8006d64 <RCCEx_PLLSAI2_Config>
 8006afa:	4603      	mov	r3, r0
 8006afc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006afe:	7cfb      	ldrb	r3, [r7, #19]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d001      	beq.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006b04:	7cfb      	ldrb	r3, [r7, #19]
 8006b06:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d00a      	beq.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006b14:	4b10      	ldr	r3, [pc, #64]	; (8006b58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b1a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b22:	490d      	ldr	r1, [pc, #52]	; (8006b58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006b24:	4313      	orrs	r3, r2
 8006b26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d00b      	beq.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006b36:	4b08      	ldr	r3, [pc, #32]	; (8006b58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b3c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b46:	4904      	ldr	r1, [pc, #16]	; (8006b58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006b4e:	7cbb      	ldrb	r3, [r7, #18]
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3718      	adds	r7, #24
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}
 8006b58:	40021000 	.word	0x40021000

08006b5c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006b60:	4b05      	ldr	r3, [pc, #20]	; (8006b78 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a04      	ldr	r2, [pc, #16]	; (8006b78 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006b66:	f043 0304 	orr.w	r3, r3, #4
 8006b6a:	6013      	str	r3, [r2, #0]
}
 8006b6c:	bf00      	nop
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b74:	4770      	bx	lr
 8006b76:	bf00      	nop
 8006b78:	40021000 	.word	0x40021000

08006b7c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b084      	sub	sp, #16
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006b86:	2300      	movs	r3, #0
 8006b88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006b8a:	4b75      	ldr	r3, [pc, #468]	; (8006d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b8c:	68db      	ldr	r3, [r3, #12]
 8006b8e:	f003 0303 	and.w	r3, r3, #3
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d018      	beq.n	8006bc8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006b96:	4b72      	ldr	r3, [pc, #456]	; (8006d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b98:	68db      	ldr	r3, [r3, #12]
 8006b9a:	f003 0203 	and.w	r2, r3, #3
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d10d      	bne.n	8006bc2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
       ||
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d009      	beq.n	8006bc2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006bae:	4b6c      	ldr	r3, [pc, #432]	; (8006d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006bb0:	68db      	ldr	r3, [r3, #12]
 8006bb2:	091b      	lsrs	r3, r3, #4
 8006bb4:	f003 0307 	and.w	r3, r3, #7
 8006bb8:	1c5a      	adds	r2, r3, #1
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	685b      	ldr	r3, [r3, #4]
       ||
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	d047      	beq.n	8006c52 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	73fb      	strb	r3, [r7, #15]
 8006bc6:	e044      	b.n	8006c52 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	2b03      	cmp	r3, #3
 8006bce:	d018      	beq.n	8006c02 <RCCEx_PLLSAI1_Config+0x86>
 8006bd0:	2b03      	cmp	r3, #3
 8006bd2:	d825      	bhi.n	8006c20 <RCCEx_PLLSAI1_Config+0xa4>
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d002      	beq.n	8006bde <RCCEx_PLLSAI1_Config+0x62>
 8006bd8:	2b02      	cmp	r3, #2
 8006bda:	d009      	beq.n	8006bf0 <RCCEx_PLLSAI1_Config+0x74>
 8006bdc:	e020      	b.n	8006c20 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006bde:	4b60      	ldr	r3, [pc, #384]	; (8006d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f003 0302 	and.w	r3, r3, #2
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d11d      	bne.n	8006c26 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006bee:	e01a      	b.n	8006c26 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006bf0:	4b5b      	ldr	r3, [pc, #364]	; (8006d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d116      	bne.n	8006c2a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006c00:	e013      	b.n	8006c2a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006c02:	4b57      	ldr	r3, [pc, #348]	; (8006d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d10f      	bne.n	8006c2e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006c0e:	4b54      	ldr	r3, [pc, #336]	; (8006d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d109      	bne.n	8006c2e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006c1e:	e006      	b.n	8006c2e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006c20:	2301      	movs	r3, #1
 8006c22:	73fb      	strb	r3, [r7, #15]
      break;
 8006c24:	e004      	b.n	8006c30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006c26:	bf00      	nop
 8006c28:	e002      	b.n	8006c30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006c2a:	bf00      	nop
 8006c2c:	e000      	b.n	8006c30 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006c2e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006c30:	7bfb      	ldrb	r3, [r7, #15]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d10d      	bne.n	8006c52 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006c36:	4b4a      	ldr	r3, [pc, #296]	; (8006d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c38:	68db      	ldr	r3, [r3, #12]
 8006c3a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6819      	ldr	r1, [r3, #0]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	3b01      	subs	r3, #1
 8006c48:	011b      	lsls	r3, r3, #4
 8006c4a:	430b      	orrs	r3, r1
 8006c4c:	4944      	ldr	r1, [pc, #272]	; (8006d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006c52:	7bfb      	ldrb	r3, [r7, #15]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d17d      	bne.n	8006d54 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006c58:	4b41      	ldr	r3, [pc, #260]	; (8006d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a40      	ldr	r2, [pc, #256]	; (8006d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c5e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006c62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c64:	f7fc fde2 	bl	800382c <HAL_GetTick>
 8006c68:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006c6a:	e009      	b.n	8006c80 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006c6c:	f7fc fdde 	bl	800382c <HAL_GetTick>
 8006c70:	4602      	mov	r2, r0
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	1ad3      	subs	r3, r2, r3
 8006c76:	2b02      	cmp	r3, #2
 8006c78:	d902      	bls.n	8006c80 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006c7a:	2303      	movs	r3, #3
 8006c7c:	73fb      	strb	r3, [r7, #15]
        break;
 8006c7e:	e005      	b.n	8006c8c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006c80:	4b37      	ldr	r3, [pc, #220]	; (8006d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d1ef      	bne.n	8006c6c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006c8c:	7bfb      	ldrb	r3, [r7, #15]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d160      	bne.n	8006d54 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d111      	bne.n	8006cbc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006c98:	4b31      	ldr	r3, [pc, #196]	; (8006d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c9a:	691b      	ldr	r3, [r3, #16]
 8006c9c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006ca0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ca4:	687a      	ldr	r2, [r7, #4]
 8006ca6:	6892      	ldr	r2, [r2, #8]
 8006ca8:	0211      	lsls	r1, r2, #8
 8006caa:	687a      	ldr	r2, [r7, #4]
 8006cac:	68d2      	ldr	r2, [r2, #12]
 8006cae:	0912      	lsrs	r2, r2, #4
 8006cb0:	0452      	lsls	r2, r2, #17
 8006cb2:	430a      	orrs	r2, r1
 8006cb4:	492a      	ldr	r1, [pc, #168]	; (8006d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	610b      	str	r3, [r1, #16]
 8006cba:	e027      	b.n	8006d0c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d112      	bne.n	8006ce8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006cc2:	4b27      	ldr	r3, [pc, #156]	; (8006d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006cc4:	691b      	ldr	r3, [r3, #16]
 8006cc6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006cca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	6892      	ldr	r2, [r2, #8]
 8006cd2:	0211      	lsls	r1, r2, #8
 8006cd4:	687a      	ldr	r2, [r7, #4]
 8006cd6:	6912      	ldr	r2, [r2, #16]
 8006cd8:	0852      	lsrs	r2, r2, #1
 8006cda:	3a01      	subs	r2, #1
 8006cdc:	0552      	lsls	r2, r2, #21
 8006cde:	430a      	orrs	r2, r1
 8006ce0:	491f      	ldr	r1, [pc, #124]	; (8006d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	610b      	str	r3, [r1, #16]
 8006ce6:	e011      	b.n	8006d0c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006ce8:	4b1d      	ldr	r3, [pc, #116]	; (8006d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006cea:	691b      	ldr	r3, [r3, #16]
 8006cec:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006cf0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	6892      	ldr	r2, [r2, #8]
 8006cf8:	0211      	lsls	r1, r2, #8
 8006cfa:	687a      	ldr	r2, [r7, #4]
 8006cfc:	6952      	ldr	r2, [r2, #20]
 8006cfe:	0852      	lsrs	r2, r2, #1
 8006d00:	3a01      	subs	r2, #1
 8006d02:	0652      	lsls	r2, r2, #25
 8006d04:	430a      	orrs	r2, r1
 8006d06:	4916      	ldr	r1, [pc, #88]	; (8006d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006d0c:	4b14      	ldr	r3, [pc, #80]	; (8006d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a13      	ldr	r2, [pc, #76]	; (8006d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d12:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006d16:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d18:	f7fc fd88 	bl	800382c <HAL_GetTick>
 8006d1c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006d1e:	e009      	b.n	8006d34 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006d20:	f7fc fd84 	bl	800382c <HAL_GetTick>
 8006d24:	4602      	mov	r2, r0
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	1ad3      	subs	r3, r2, r3
 8006d2a:	2b02      	cmp	r3, #2
 8006d2c:	d902      	bls.n	8006d34 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8006d2e:	2303      	movs	r3, #3
 8006d30:	73fb      	strb	r3, [r7, #15]
          break;
 8006d32:	e005      	b.n	8006d40 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006d34:	4b0a      	ldr	r3, [pc, #40]	; (8006d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d0ef      	beq.n	8006d20 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006d40:	7bfb      	ldrb	r3, [r7, #15]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d106      	bne.n	8006d54 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006d46:	4b06      	ldr	r3, [pc, #24]	; (8006d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d48:	691a      	ldr	r2, [r3, #16]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	699b      	ldr	r3, [r3, #24]
 8006d4e:	4904      	ldr	r1, [pc, #16]	; (8006d60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d50:	4313      	orrs	r3, r2
 8006d52:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3710      	adds	r7, #16
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}
 8006d5e:	bf00      	nop
 8006d60:	40021000 	.word	0x40021000

08006d64 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b084      	sub	sp, #16
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006d72:	4b6a      	ldr	r3, [pc, #424]	; (8006f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d74:	68db      	ldr	r3, [r3, #12]
 8006d76:	f003 0303 	and.w	r3, r3, #3
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d018      	beq.n	8006db0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006d7e:	4b67      	ldr	r3, [pc, #412]	; (8006f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d80:	68db      	ldr	r3, [r3, #12]
 8006d82:	f003 0203 	and.w	r2, r3, #3
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d10d      	bne.n	8006daa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
       ||
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d009      	beq.n	8006daa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006d96:	4b61      	ldr	r3, [pc, #388]	; (8006f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d98:	68db      	ldr	r3, [r3, #12]
 8006d9a:	091b      	lsrs	r3, r3, #4
 8006d9c:	f003 0307 	and.w	r3, r3, #7
 8006da0:	1c5a      	adds	r2, r3, #1
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	685b      	ldr	r3, [r3, #4]
       ||
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d047      	beq.n	8006e3a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006daa:	2301      	movs	r3, #1
 8006dac:	73fb      	strb	r3, [r7, #15]
 8006dae:	e044      	b.n	8006e3a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	2b03      	cmp	r3, #3
 8006db6:	d018      	beq.n	8006dea <RCCEx_PLLSAI2_Config+0x86>
 8006db8:	2b03      	cmp	r3, #3
 8006dba:	d825      	bhi.n	8006e08 <RCCEx_PLLSAI2_Config+0xa4>
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d002      	beq.n	8006dc6 <RCCEx_PLLSAI2_Config+0x62>
 8006dc0:	2b02      	cmp	r3, #2
 8006dc2:	d009      	beq.n	8006dd8 <RCCEx_PLLSAI2_Config+0x74>
 8006dc4:	e020      	b.n	8006e08 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006dc6:	4b55      	ldr	r3, [pc, #340]	; (8006f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f003 0302 	and.w	r3, r3, #2
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d11d      	bne.n	8006e0e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006dd6:	e01a      	b.n	8006e0e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006dd8:	4b50      	ldr	r3, [pc, #320]	; (8006f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d116      	bne.n	8006e12 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006de4:	2301      	movs	r3, #1
 8006de6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006de8:	e013      	b.n	8006e12 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006dea:	4b4c      	ldr	r3, [pc, #304]	; (8006f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d10f      	bne.n	8006e16 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006df6:	4b49      	ldr	r3, [pc, #292]	; (8006f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d109      	bne.n	8006e16 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006e02:	2301      	movs	r3, #1
 8006e04:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006e06:	e006      	b.n	8006e16 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	73fb      	strb	r3, [r7, #15]
      break;
 8006e0c:	e004      	b.n	8006e18 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006e0e:	bf00      	nop
 8006e10:	e002      	b.n	8006e18 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006e12:	bf00      	nop
 8006e14:	e000      	b.n	8006e18 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006e16:	bf00      	nop
    }

    if(status == HAL_OK)
 8006e18:	7bfb      	ldrb	r3, [r7, #15]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d10d      	bne.n	8006e3a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006e1e:	4b3f      	ldr	r3, [pc, #252]	; (8006f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e20:	68db      	ldr	r3, [r3, #12]
 8006e22:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6819      	ldr	r1, [r3, #0]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	3b01      	subs	r3, #1
 8006e30:	011b      	lsls	r3, r3, #4
 8006e32:	430b      	orrs	r3, r1
 8006e34:	4939      	ldr	r1, [pc, #228]	; (8006f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e36:	4313      	orrs	r3, r2
 8006e38:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006e3a:	7bfb      	ldrb	r3, [r7, #15]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d167      	bne.n	8006f10 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006e40:	4b36      	ldr	r3, [pc, #216]	; (8006f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a35      	ldr	r2, [pc, #212]	; (8006f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e4c:	f7fc fcee 	bl	800382c <HAL_GetTick>
 8006e50:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006e52:	e009      	b.n	8006e68 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006e54:	f7fc fcea 	bl	800382c <HAL_GetTick>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	1ad3      	subs	r3, r2, r3
 8006e5e:	2b02      	cmp	r3, #2
 8006e60:	d902      	bls.n	8006e68 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006e62:	2303      	movs	r3, #3
 8006e64:	73fb      	strb	r3, [r7, #15]
        break;
 8006e66:	e005      	b.n	8006e74 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006e68:	4b2c      	ldr	r3, [pc, #176]	; (8006f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d1ef      	bne.n	8006e54 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006e74:	7bfb      	ldrb	r3, [r7, #15]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d14a      	bne.n	8006f10 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d111      	bne.n	8006ea4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006e80:	4b26      	ldr	r3, [pc, #152]	; (8006f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e82:	695b      	ldr	r3, [r3, #20]
 8006e84:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006e88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e8c:	687a      	ldr	r2, [r7, #4]
 8006e8e:	6892      	ldr	r2, [r2, #8]
 8006e90:	0211      	lsls	r1, r2, #8
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	68d2      	ldr	r2, [r2, #12]
 8006e96:	0912      	lsrs	r2, r2, #4
 8006e98:	0452      	lsls	r2, r2, #17
 8006e9a:	430a      	orrs	r2, r1
 8006e9c:	491f      	ldr	r1, [pc, #124]	; (8006f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	614b      	str	r3, [r1, #20]
 8006ea2:	e011      	b.n	8006ec8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006ea4:	4b1d      	ldr	r3, [pc, #116]	; (8006f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ea6:	695b      	ldr	r3, [r3, #20]
 8006ea8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006eac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006eb0:	687a      	ldr	r2, [r7, #4]
 8006eb2:	6892      	ldr	r2, [r2, #8]
 8006eb4:	0211      	lsls	r1, r2, #8
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	6912      	ldr	r2, [r2, #16]
 8006eba:	0852      	lsrs	r2, r2, #1
 8006ebc:	3a01      	subs	r2, #1
 8006ebe:	0652      	lsls	r2, r2, #25
 8006ec0:	430a      	orrs	r2, r1
 8006ec2:	4916      	ldr	r1, [pc, #88]	; (8006f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006ec8:	4b14      	ldr	r3, [pc, #80]	; (8006f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a13      	ldr	r2, [pc, #76]	; (8006f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ece:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ed2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ed4:	f7fc fcaa 	bl	800382c <HAL_GetTick>
 8006ed8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006eda:	e009      	b.n	8006ef0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006edc:	f7fc fca6 	bl	800382c <HAL_GetTick>
 8006ee0:	4602      	mov	r2, r0
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	1ad3      	subs	r3, r2, r3
 8006ee6:	2b02      	cmp	r3, #2
 8006ee8:	d902      	bls.n	8006ef0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8006eea:	2303      	movs	r3, #3
 8006eec:	73fb      	strb	r3, [r7, #15]
          break;
 8006eee:	e005      	b.n	8006efc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006ef0:	4b0a      	ldr	r3, [pc, #40]	; (8006f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d0ef      	beq.n	8006edc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006efc:	7bfb      	ldrb	r3, [r7, #15]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d106      	bne.n	8006f10 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006f02:	4b06      	ldr	r3, [pc, #24]	; (8006f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f04:	695a      	ldr	r2, [r3, #20]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	695b      	ldr	r3, [r3, #20]
 8006f0a:	4904      	ldr	r1, [pc, #16]	; (8006f1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3710      	adds	r7, #16
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop
 8006f1c:	40021000 	.word	0x40021000

08006f20 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b084      	sub	sp, #16
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d06c      	beq.n	800700c <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d106      	bne.n	8006f4c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2200      	movs	r2, #0
 8006f42:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f7fb f8aa 	bl	80020a0 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2202      	movs	r2, #2
 8006f50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	22ca      	movs	r2, #202	; 0xca
 8006f5a:	625a      	str	r2, [r3, #36]	; 0x24
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	2253      	movs	r2, #83	; 0x53
 8006f62:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f000 fbcb 	bl	8007700 <RTC_EnterInitMode>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8006f6e:	7bfb      	ldrb	r3, [r7, #15]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d14b      	bne.n	800700c <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	687a      	ldr	r2, [r7, #4]
 8006f7c:	6812      	ldr	r2, [r2, #0]
 8006f7e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006f82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f86:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	6899      	ldr	r1, [r3, #8]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	685a      	ldr	r2, [r3, #4]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	691b      	ldr	r3, [r3, #16]
 8006f96:	431a      	orrs	r2, r3
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	699b      	ldr	r3, [r3, #24]
 8006f9c:	431a      	orrs	r2, r3
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	430a      	orrs	r2, r1
 8006fa4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	687a      	ldr	r2, [r7, #4]
 8006fac:	68d2      	ldr	r2, [r2, #12]
 8006fae:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	6919      	ldr	r1, [r3, #16]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	689b      	ldr	r3, [r3, #8]
 8006fba:	041a      	lsls	r2, r3, #16
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	430a      	orrs	r2, r1
 8006fc2:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f000 fbcf 	bl	8007768 <RTC_ExitInitMode>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8006fce:	7bfb      	ldrb	r3, [r7, #15]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d11b      	bne.n	800700c <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f022 0203 	bic.w	r2, r2, #3
 8006fe2:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	69da      	ldr	r2, [r3, #28]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	695b      	ldr	r3, [r3, #20]
 8006ff2:	431a      	orrs	r2, r3
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	430a      	orrs	r2, r1
 8006ffa:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	22ff      	movs	r2, #255	; 0xff
 8007002:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2201      	movs	r2, #1
 8007008:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 800700c:	7bfb      	ldrb	r3, [r7, #15]
}
 800700e:	4618      	mov	r0, r3
 8007010:	3710      	adds	r7, #16
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}

08007016 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007016:	b590      	push	{r4, r7, lr}
 8007018:	b087      	sub	sp, #28
 800701a:	af00      	add	r7, sp, #0
 800701c:	60f8      	str	r0, [r7, #12]
 800701e:	60b9      	str	r1, [r7, #8]
 8007020:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007028:	2b01      	cmp	r3, #1
 800702a:	d101      	bne.n	8007030 <HAL_RTC_SetTime+0x1a>
 800702c:	2302      	movs	r3, #2
 800702e:	e08b      	b.n	8007148 <HAL_RTC_SetTime+0x132>
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2201      	movs	r2, #1
 8007034:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2202      	movs	r2, #2
 800703c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	22ca      	movs	r2, #202	; 0xca
 8007046:	625a      	str	r2, [r3, #36]	; 0x24
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	2253      	movs	r2, #83	; 0x53
 800704e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007050:	68f8      	ldr	r0, [r7, #12]
 8007052:	f000 fb55 	bl	8007700 <RTC_EnterInitMode>
 8007056:	4603      	mov	r3, r0
 8007058:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800705a:	7cfb      	ldrb	r3, [r7, #19]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d163      	bne.n	8007128 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d126      	bne.n	80070b4 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	689b      	ldr	r3, [r3, #8]
 800706c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007070:	2b00      	cmp	r3, #0
 8007072:	d102      	bne.n	800707a <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	2200      	movs	r2, #0
 8007078:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	781b      	ldrb	r3, [r3, #0]
 800707e:	4618      	mov	r0, r3
 8007080:	f000 fbb0 	bl	80077e4 <RTC_ByteToBcd2>
 8007084:	4603      	mov	r3, r0
 8007086:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	785b      	ldrb	r3, [r3, #1]
 800708c:	4618      	mov	r0, r3
 800708e:	f000 fba9 	bl	80077e4 <RTC_ByteToBcd2>
 8007092:	4603      	mov	r3, r0
 8007094:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007096:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	789b      	ldrb	r3, [r3, #2]
 800709c:	4618      	mov	r0, r3
 800709e:	f000 fba1 	bl	80077e4 <RTC_ByteToBcd2>
 80070a2:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80070a4:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	78db      	ldrb	r3, [r3, #3]
 80070ac:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80070ae:	4313      	orrs	r3, r2
 80070b0:	617b      	str	r3, [r7, #20]
 80070b2:	e018      	b.n	80070e6 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	689b      	ldr	r3, [r3, #8]
 80070ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d102      	bne.n	80070c8 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	2200      	movs	r2, #0
 80070c6:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	781b      	ldrb	r3, [r3, #0]
 80070cc:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	785b      	ldrb	r3, [r3, #1]
 80070d2:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80070d4:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80070d6:	68ba      	ldr	r2, [r7, #8]
 80070d8:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80070da:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	78db      	ldrb	r3, [r3, #3]
 80070e0:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80070e2:	4313      	orrs	r3, r2
 80070e4:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80070f0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80070f4:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	689a      	ldr	r2, [r3, #8]
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007104:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	6899      	ldr	r1, [r3, #8]
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	68da      	ldr	r2, [r3, #12]
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	691b      	ldr	r3, [r3, #16]
 8007114:	431a      	orrs	r2, r3
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	430a      	orrs	r2, r1
 800711c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800711e:	68f8      	ldr	r0, [r7, #12]
 8007120:	f000 fb22 	bl	8007768 <RTC_ExitInitMode>
 8007124:	4603      	mov	r3, r0
 8007126:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	22ff      	movs	r2, #255	; 0xff
 800712e:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8007130:	7cfb      	ldrb	r3, [r7, #19]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d103      	bne.n	800713e <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2201      	movs	r2, #1
 800713a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2200      	movs	r2, #0
 8007142:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8007146:	7cfb      	ldrb	r3, [r7, #19]
}
 8007148:	4618      	mov	r0, r3
 800714a:	371c      	adds	r7, #28
 800714c:	46bd      	mov	sp, r7
 800714e:	bd90      	pop	{r4, r7, pc}

08007150 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b086      	sub	sp, #24
 8007154:	af00      	add	r7, sp, #0
 8007156:	60f8      	str	r0, [r7, #12]
 8007158:	60b9      	str	r1, [r7, #8]
 800715a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	691b      	ldr	r3, [r3, #16]
 800716c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800717e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007182:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	0c1b      	lsrs	r3, r3, #16
 8007188:	b2db      	uxtb	r3, r3
 800718a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800718e:	b2da      	uxtb	r2, r3
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	0a1b      	lsrs	r3, r3, #8
 8007198:	b2db      	uxtb	r3, r3
 800719a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800719e:	b2da      	uxtb	r2, r3
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	b2db      	uxtb	r3, r3
 80071a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071ac:	b2da      	uxtb	r2, r3
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	0d9b      	lsrs	r3, r3, #22
 80071b6:	b2db      	uxtb	r3, r3
 80071b8:	f003 0301 	and.w	r3, r3, #1
 80071bc:	b2da      	uxtb	r2, r3
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d11a      	bne.n	80071fe <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	781b      	ldrb	r3, [r3, #0]
 80071cc:	4618      	mov	r0, r3
 80071ce:	f000 fb29 	bl	8007824 <RTC_Bcd2ToByte>
 80071d2:	4603      	mov	r3, r0
 80071d4:	461a      	mov	r2, r3
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	785b      	ldrb	r3, [r3, #1]
 80071de:	4618      	mov	r0, r3
 80071e0:	f000 fb20 	bl	8007824 <RTC_Bcd2ToByte>
 80071e4:	4603      	mov	r3, r0
 80071e6:	461a      	mov	r2, r3
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	789b      	ldrb	r3, [r3, #2]
 80071f0:	4618      	mov	r0, r3
 80071f2:	f000 fb17 	bl	8007824 <RTC_Bcd2ToByte>
 80071f6:	4603      	mov	r3, r0
 80071f8:	461a      	mov	r2, r3
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80071fe:	2300      	movs	r3, #0
}
 8007200:	4618      	mov	r0, r3
 8007202:	3718      	adds	r7, #24
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}

08007208 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007208:	b590      	push	{r4, r7, lr}
 800720a:	b087      	sub	sp, #28
 800720c:	af00      	add	r7, sp, #0
 800720e:	60f8      	str	r0, [r7, #12]
 8007210:	60b9      	str	r1, [r7, #8]
 8007212:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f893 3020 	ldrb.w	r3, [r3, #32]
 800721a:	2b01      	cmp	r3, #1
 800721c:	d101      	bne.n	8007222 <HAL_RTC_SetDate+0x1a>
 800721e:	2302      	movs	r3, #2
 8007220:	e075      	b.n	800730e <HAL_RTC_SetDate+0x106>
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2201      	movs	r2, #1
 8007226:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2202      	movs	r2, #2
 800722e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d10e      	bne.n	8007256 <HAL_RTC_SetDate+0x4e>
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	785b      	ldrb	r3, [r3, #1]
 800723c:	f003 0310 	and.w	r3, r3, #16
 8007240:	2b00      	cmp	r3, #0
 8007242:	d008      	beq.n	8007256 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	785b      	ldrb	r3, [r3, #1]
 8007248:	f023 0310 	bic.w	r3, r3, #16
 800724c:	b2db      	uxtb	r3, r3
 800724e:	330a      	adds	r3, #10
 8007250:	b2da      	uxtb	r2, r3
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d11c      	bne.n	8007296 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	78db      	ldrb	r3, [r3, #3]
 8007260:	4618      	mov	r0, r3
 8007262:	f000 fabf 	bl	80077e4 <RTC_ByteToBcd2>
 8007266:	4603      	mov	r3, r0
 8007268:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	785b      	ldrb	r3, [r3, #1]
 800726e:	4618      	mov	r0, r3
 8007270:	f000 fab8 	bl	80077e4 <RTC_ByteToBcd2>
 8007274:	4603      	mov	r3, r0
 8007276:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8007278:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	789b      	ldrb	r3, [r3, #2]
 800727e:	4618      	mov	r0, r3
 8007280:	f000 fab0 	bl	80077e4 <RTC_ByteToBcd2>
 8007284:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007286:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8007290:	4313      	orrs	r3, r2
 8007292:	617b      	str	r3, [r7, #20]
 8007294:	e00e      	b.n	80072b4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	78db      	ldrb	r3, [r3, #3]
 800729a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	785b      	ldrb	r3, [r3, #1]
 80072a0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80072a2:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80072a4:	68ba      	ldr	r2, [r7, #8]
 80072a6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80072a8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80072b0:	4313      	orrs	r3, r2
 80072b2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	22ca      	movs	r2, #202	; 0xca
 80072ba:	625a      	str	r2, [r3, #36]	; 0x24
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	2253      	movs	r2, #83	; 0x53
 80072c2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80072c4:	68f8      	ldr	r0, [r7, #12]
 80072c6:	f000 fa1b 	bl	8007700 <RTC_EnterInitMode>
 80072ca:	4603      	mov	r3, r0
 80072cc:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80072ce:	7cfb      	ldrb	r3, [r7, #19]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d10c      	bne.n	80072ee <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80072de:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80072e2:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80072e4:	68f8      	ldr	r0, [r7, #12]
 80072e6:	f000 fa3f 	bl	8007768 <RTC_ExitInitMode>
 80072ea:	4603      	mov	r3, r0
 80072ec:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	22ff      	movs	r2, #255	; 0xff
 80072f4:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80072f6:	7cfb      	ldrb	r3, [r7, #19]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d103      	bne.n	8007304 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	2201      	movs	r2, #1
 8007300:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2200      	movs	r2, #0
 8007308:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800730c:	7cfb      	ldrb	r3, [r7, #19]
}
 800730e:	4618      	mov	r0, r3
 8007310:	371c      	adds	r7, #28
 8007312:	46bd      	mov	sp, r7
 8007314:	bd90      	pop	{r4, r7, pc}

08007316 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007316:	b580      	push	{r7, lr}
 8007318:	b086      	sub	sp, #24
 800731a:	af00      	add	r7, sp, #0
 800731c:	60f8      	str	r0, [r7, #12]
 800731e:	60b9      	str	r1, [r7, #8]
 8007320:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800732c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007330:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	0c1b      	lsrs	r3, r3, #16
 8007336:	b2da      	uxtb	r2, r3
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	0a1b      	lsrs	r3, r3, #8
 8007340:	b2db      	uxtb	r3, r3
 8007342:	f003 031f 	and.w	r3, r3, #31
 8007346:	b2da      	uxtb	r2, r3
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	b2db      	uxtb	r3, r3
 8007350:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007354:	b2da      	uxtb	r2, r3
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	0b5b      	lsrs	r3, r3, #13
 800735e:	b2db      	uxtb	r3, r3
 8007360:	f003 0307 	and.w	r3, r3, #7
 8007364:	b2da      	uxtb	r2, r3
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d11a      	bne.n	80073a6 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	78db      	ldrb	r3, [r3, #3]
 8007374:	4618      	mov	r0, r3
 8007376:	f000 fa55 	bl	8007824 <RTC_Bcd2ToByte>
 800737a:	4603      	mov	r3, r0
 800737c:	461a      	mov	r2, r3
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	785b      	ldrb	r3, [r3, #1]
 8007386:	4618      	mov	r0, r3
 8007388:	f000 fa4c 	bl	8007824 <RTC_Bcd2ToByte>
 800738c:	4603      	mov	r3, r0
 800738e:	461a      	mov	r2, r3
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	789b      	ldrb	r3, [r3, #2]
 8007398:	4618      	mov	r0, r3
 800739a:	f000 fa43 	bl	8007824 <RTC_Bcd2ToByte>
 800739e:	4603      	mov	r3, r0
 80073a0:	461a      	mov	r2, r3
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80073a6:	2300      	movs	r3, #0
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	3718      	adds	r7, #24
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80073b0:	b590      	push	{r4, r7, lr}
 80073b2:	b089      	sub	sp, #36	; 0x24
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	60f8      	str	r0, [r7, #12]
 80073b8:	60b9      	str	r1, [r7, #8]
 80073ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	d101      	bne.n	80073ca <HAL_RTC_SetAlarm_IT+0x1a>
 80073c6:	2302      	movs	r3, #2
 80073c8:	e127      	b.n	800761a <HAL_RTC_SetAlarm_IT+0x26a>
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2201      	movs	r2, #1
 80073ce:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2202      	movs	r2, #2
 80073d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d137      	bne.n	8007450 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	689b      	ldr	r3, [r3, #8]
 80073e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d102      	bne.n	80073f4 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	2200      	movs	r2, #0
 80073f2:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	781b      	ldrb	r3, [r3, #0]
 80073f8:	4618      	mov	r0, r3
 80073fa:	f000 f9f3 	bl	80077e4 <RTC_ByteToBcd2>
 80073fe:	4603      	mov	r3, r0
 8007400:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	785b      	ldrb	r3, [r3, #1]
 8007406:	4618      	mov	r0, r3
 8007408:	f000 f9ec 	bl	80077e4 <RTC_ByteToBcd2>
 800740c:	4603      	mov	r3, r0
 800740e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007410:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	789b      	ldrb	r3, [r3, #2]
 8007416:	4618      	mov	r0, r3
 8007418:	f000 f9e4 	bl	80077e4 <RTC_ByteToBcd2>
 800741c:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800741e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	78db      	ldrb	r3, [r3, #3]
 8007426:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8007428:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007432:	4618      	mov	r0, r3
 8007434:	f000 f9d6 	bl	80077e4 <RTC_ByteToBcd2>
 8007438:	4603      	mov	r3, r0
 800743a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800743c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8007444:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800744a:	4313      	orrs	r3, r2
 800744c:	61fb      	str	r3, [r7, #28]
 800744e:	e023      	b.n	8007498 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800745a:	2b00      	cmp	r3, #0
 800745c:	d102      	bne.n	8007464 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	2200      	movs	r2, #0
 8007462:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	785b      	ldrb	r3, [r3, #1]
 800746e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007470:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8007472:	68ba      	ldr	r2, [r7, #8]
 8007474:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007476:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	78db      	ldrb	r3, [r3, #3]
 800747c:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800747e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007486:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8007488:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800748e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007494:	4313      	orrs	r3, r2
 8007496:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	685a      	ldr	r2, [r3, #4]
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	69db      	ldr	r3, [r3, #28]
 80074a0:	4313      	orrs	r3, r2
 80074a2:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	22ca      	movs	r2, #202	; 0xca
 80074aa:	625a      	str	r2, [r3, #36]	; 0x24
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	2253      	movs	r2, #83	; 0x53
 80074b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074bc:	d14a      	bne.n	8007554 <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	689a      	ldr	r2, [r3, #8]
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80074cc:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	68db      	ldr	r3, [r3, #12]
 80074d4:	b2da      	uxtb	r2, r3
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80074de:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 80074e0:	f7fc f9a4 	bl	800382c <HAL_GetTick>
 80074e4:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80074e6:	e015      	b.n	8007514 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80074e8:	f7fc f9a0 	bl	800382c <HAL_GetTick>
 80074ec:	4602      	mov	r2, r0
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	1ad3      	subs	r3, r2, r3
 80074f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80074f6:	d90d      	bls.n	8007514 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	22ff      	movs	r2, #255	; 0xff
 80074fe:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2203      	movs	r2, #3
 8007504:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2200      	movs	r2, #0
 800750c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8007510:	2303      	movs	r3, #3
 8007512:	e082      	b.n	800761a <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	68db      	ldr	r3, [r3, #12]
 800751a:	f003 0301 	and.w	r3, r3, #1
 800751e:	2b00      	cmp	r3, #0
 8007520:	d0e2      	beq.n	80074e8 <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	69fa      	ldr	r2, [r7, #28]
 8007528:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	69ba      	ldr	r2, [r7, #24]
 8007530:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	689a      	ldr	r2, [r3, #8]
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007540:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	689a      	ldr	r2, [r3, #8]
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007550:	609a      	str	r2, [r3, #8]
 8007552:	e049      	b.n	80075e8 <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	689a      	ldr	r2, [r3, #8]
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007562:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	68db      	ldr	r3, [r3, #12]
 800756a:	b2da      	uxtb	r2, r3
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f462 7220 	orn	r2, r2, #640	; 0x280
 8007574:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 8007576:	f7fc f959 	bl	800382c <HAL_GetTick>
 800757a:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800757c:	e015      	b.n	80075aa <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800757e:	f7fc f955 	bl	800382c <HAL_GetTick>
 8007582:	4602      	mov	r2, r0
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	1ad3      	subs	r3, r2, r3
 8007588:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800758c:	d90d      	bls.n	80075aa <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	22ff      	movs	r2, #255	; 0xff
 8007594:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2203      	movs	r2, #3
 800759a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2200      	movs	r2, #0
 80075a2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80075a6:	2303      	movs	r3, #3
 80075a8:	e037      	b.n	800761a <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	68db      	ldr	r3, [r3, #12]
 80075b0:	f003 0302 	and.w	r3, r3, #2
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d0e2      	beq.n	800757e <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	69fa      	ldr	r2, [r7, #28]
 80075be:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	69ba      	ldr	r2, [r7, #24]
 80075c6:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	689a      	ldr	r2, [r3, #8]
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075d6:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	689a      	ldr	r2, [r3, #8]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80075e6:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80075e8:	4b0e      	ldr	r3, [pc, #56]	; (8007624 <HAL_RTC_SetAlarm_IT+0x274>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a0d      	ldr	r2, [pc, #52]	; (8007624 <HAL_RTC_SetAlarm_IT+0x274>)
 80075ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80075f2:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80075f4:	4b0b      	ldr	r3, [pc, #44]	; (8007624 <HAL_RTC_SetAlarm_IT+0x274>)
 80075f6:	689b      	ldr	r3, [r3, #8]
 80075f8:	4a0a      	ldr	r2, [pc, #40]	; (8007624 <HAL_RTC_SetAlarm_IT+0x274>)
 80075fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80075fe:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	22ff      	movs	r2, #255	; 0xff
 8007606:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2201      	movs	r2, #1
 800760c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2200      	movs	r2, #0
 8007614:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8007618:	2300      	movs	r3, #0
}
 800761a:	4618      	mov	r0, r3
 800761c:	3724      	adds	r7, #36	; 0x24
 800761e:	46bd      	mov	sp, r7
 8007620:	bd90      	pop	{r4, r7, pc}
 8007622:	bf00      	nop
 8007624:	40010400 	.word	0x40010400

08007628 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b082      	sub	sp, #8
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8007630:	4b1f      	ldr	r3, [pc, #124]	; (80076b0 <HAL_RTC_AlarmIRQHandler+0x88>)
 8007632:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8007636:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007642:	2b00      	cmp	r3, #0
 8007644:	d012      	beq.n	800766c <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	68db      	ldr	r3, [r3, #12]
 800764c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007650:	2b00      	cmp	r3, #0
 8007652:	d00b      	beq.n	800766c <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	68db      	ldr	r3, [r3, #12]
 800765a:	b2da      	uxtb	r2, r3
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8007664:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f7f9 fe7c 	bl	8001364 <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	689b      	ldr	r3, [r3, #8]
 8007672:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007676:	2b00      	cmp	r3, #0
 8007678:	d012      	beq.n	80076a0 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	68db      	ldr	r3, [r3, #12]
 8007680:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007684:	2b00      	cmp	r3, #0
 8007686:	d00b      	beq.n	80076a0 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	68db      	ldr	r3, [r3, #12]
 800768e:	b2da      	uxtb	r2, r3
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f462 7220 	orn	r2, r2, #640	; 0x280
 8007698:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f000 f8dc 	bl	8007858 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2201      	movs	r2, #1
 80076a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 80076a8:	bf00      	nop
 80076aa:	3708      	adds	r7, #8
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}
 80076b0:	40010400 	.word	0x40010400

080076b4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b084      	sub	sp, #16
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	68da      	ldr	r2, [r3, #12]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80076ca:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80076cc:	f7fc f8ae 	bl	800382c <HAL_GetTick>
 80076d0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80076d2:	e009      	b.n	80076e8 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80076d4:	f7fc f8aa 	bl	800382c <HAL_GetTick>
 80076d8:	4602      	mov	r2, r0
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	1ad3      	subs	r3, r2, r3
 80076de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80076e2:	d901      	bls.n	80076e8 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80076e4:	2303      	movs	r3, #3
 80076e6:	e007      	b.n	80076f8 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	68db      	ldr	r3, [r3, #12]
 80076ee:	f003 0320 	and.w	r3, r3, #32
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d0ee      	beq.n	80076d4 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80076f6:	2300      	movs	r3, #0
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3710      	adds	r7, #16
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}

08007700 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b084      	sub	sp, #16
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007708:	2300      	movs	r3, #0
 800770a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007716:	2b00      	cmp	r3, #0
 8007718:	d120      	bne.n	800775c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f04f 32ff 	mov.w	r2, #4294967295
 8007722:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007724:	f7fc f882 	bl	800382c <HAL_GetTick>
 8007728:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800772a:	e00d      	b.n	8007748 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800772c:	f7fc f87e 	bl	800382c <HAL_GetTick>
 8007730:	4602      	mov	r2, r0
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	1ad3      	subs	r3, r2, r3
 8007736:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800773a:	d905      	bls.n	8007748 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800773c:	2303      	movs	r3, #3
 800773e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2203      	movs	r2, #3
 8007744:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	68db      	ldr	r3, [r3, #12]
 800774e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007752:	2b00      	cmp	r3, #0
 8007754:	d102      	bne.n	800775c <RTC_EnterInitMode+0x5c>
 8007756:	7bfb      	ldrb	r3, [r7, #15]
 8007758:	2b03      	cmp	r3, #3
 800775a:	d1e7      	bne.n	800772c <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800775c:	7bfb      	ldrb	r3, [r7, #15]
}
 800775e:	4618      	mov	r0, r3
 8007760:	3710      	adds	r7, #16
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}
	...

08007768 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b084      	sub	sp, #16
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007770:	2300      	movs	r3, #0
 8007772:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8007774:	4b1a      	ldr	r3, [pc, #104]	; (80077e0 <RTC_ExitInitMode+0x78>)
 8007776:	68db      	ldr	r3, [r3, #12]
 8007778:	4a19      	ldr	r2, [pc, #100]	; (80077e0 <RTC_ExitInitMode+0x78>)
 800777a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800777e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007780:	4b17      	ldr	r3, [pc, #92]	; (80077e0 <RTC_ExitInitMode+0x78>)
 8007782:	689b      	ldr	r3, [r3, #8]
 8007784:	f003 0320 	and.w	r3, r3, #32
 8007788:	2b00      	cmp	r3, #0
 800778a:	d10c      	bne.n	80077a6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f7ff ff91 	bl	80076b4 <HAL_RTC_WaitForSynchro>
 8007792:	4603      	mov	r3, r0
 8007794:	2b00      	cmp	r3, #0
 8007796:	d01e      	beq.n	80077d6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2203      	movs	r2, #3
 800779c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80077a0:	2303      	movs	r3, #3
 80077a2:	73fb      	strb	r3, [r7, #15]
 80077a4:	e017      	b.n	80077d6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80077a6:	4b0e      	ldr	r3, [pc, #56]	; (80077e0 <RTC_ExitInitMode+0x78>)
 80077a8:	689b      	ldr	r3, [r3, #8]
 80077aa:	4a0d      	ldr	r2, [pc, #52]	; (80077e0 <RTC_ExitInitMode+0x78>)
 80077ac:	f023 0320 	bic.w	r3, r3, #32
 80077b0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f7ff ff7e 	bl	80076b4 <HAL_RTC_WaitForSynchro>
 80077b8:	4603      	mov	r3, r0
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d005      	beq.n	80077ca <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2203      	movs	r2, #3
 80077c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80077c6:	2303      	movs	r3, #3
 80077c8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80077ca:	4b05      	ldr	r3, [pc, #20]	; (80077e0 <RTC_ExitInitMode+0x78>)
 80077cc:	689b      	ldr	r3, [r3, #8]
 80077ce:	4a04      	ldr	r2, [pc, #16]	; (80077e0 <RTC_ExitInitMode+0x78>)
 80077d0:	f043 0320 	orr.w	r3, r3, #32
 80077d4:	6093      	str	r3, [r2, #8]
  }

  return status;
 80077d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3710      	adds	r7, #16
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}
 80077e0:	40002800 	.word	0x40002800

080077e4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b085      	sub	sp, #20
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	4603      	mov	r3, r0
 80077ec:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80077ee:	2300      	movs	r3, #0
 80077f0:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 80077f2:	79fb      	ldrb	r3, [r7, #7]
 80077f4:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 80077f6:	e005      	b.n	8007804 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	3301      	adds	r3, #1
 80077fc:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 80077fe:	7afb      	ldrb	r3, [r7, #11]
 8007800:	3b0a      	subs	r3, #10
 8007802:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8007804:	7afb      	ldrb	r3, [r7, #11]
 8007806:	2b09      	cmp	r3, #9
 8007808:	d8f6      	bhi.n	80077f8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	b2db      	uxtb	r3, r3
 800780e:	011b      	lsls	r3, r3, #4
 8007810:	b2da      	uxtb	r2, r3
 8007812:	7afb      	ldrb	r3, [r7, #11]
 8007814:	4313      	orrs	r3, r2
 8007816:	b2db      	uxtb	r3, r3
}
 8007818:	4618      	mov	r0, r3
 800781a:	3714      	adds	r7, #20
 800781c:	46bd      	mov	sp, r7
 800781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007822:	4770      	bx	lr

08007824 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8007824:	b480      	push	{r7}
 8007826:	b085      	sub	sp, #20
 8007828:	af00      	add	r7, sp, #0
 800782a:	4603      	mov	r3, r0
 800782c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800782e:	79fb      	ldrb	r3, [r7, #7]
 8007830:	091b      	lsrs	r3, r3, #4
 8007832:	b2db      	uxtb	r3, r3
 8007834:	461a      	mov	r2, r3
 8007836:	0092      	lsls	r2, r2, #2
 8007838:	4413      	add	r3, r2
 800783a:	005b      	lsls	r3, r3, #1
 800783c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800783e:	79fb      	ldrb	r3, [r7, #7]
 8007840:	f003 030f 	and.w	r3, r3, #15
 8007844:	b2da      	uxtb	r2, r3
 8007846:	7bfb      	ldrb	r3, [r7, #15]
 8007848:	4413      	add	r3, r2
 800784a:	b2db      	uxtb	r3, r3
}
 800784c:	4618      	mov	r0, r3
 800784e:	3714      	adds	r7, #20
 8007850:	46bd      	mov	sp, r7
 8007852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007856:	4770      	bx	lr

08007858 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8007858:	b480      	push	{r7}
 800785a:	b083      	sub	sp, #12
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8007860:	bf00      	nop
 8007862:	370c      	adds	r7, #12
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr

0800786c <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800786c:	b480      	push	{r7}
 800786e:	b087      	sub	sp, #28
 8007870:	af00      	add	r7, sp, #0
 8007872:	60f8      	str	r0, [r7, #12]
 8007874:	60b9      	str	r1, [r7, #8]
 8007876:	607a      	str	r2, [r7, #4]
  tmp = (uint32_t) & (tamp->BKP0R);
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	3350      	adds	r3, #80	; 0x50
 800787e:	617b      	str	r3, [r7, #20]
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  tmp += (BackupRegister * 4U);
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	009a      	lsls	r2, r3, #2
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	4413      	add	r3, r2
 8007888:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	461a      	mov	r2, r3
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6013      	str	r3, [r2, #0]
}
 8007892:	bf00      	nop
 8007894:	371c      	adds	r7, #28
 8007896:	46bd      	mov	sp, r7
 8007898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789c:	4770      	bx	lr

0800789e <HAL_RTCEx_BKUPRead>:
  *         This parameter can be: RTC_BKP_DRx where x can be from 0 to 31 to
  *         specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800789e:	b480      	push	{r7}
 80078a0:	b085      	sub	sp, #20
 80078a2:	af00      	add	r7, sp, #0
 80078a4:	6078      	str	r0, [r7, #4]
 80078a6:	6039      	str	r1, [r7, #0]
  tmp = (uint32_t) & (tamp->BKP0R);
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	3350      	adds	r3, #80	; 0x50
 80078ae:	60fb      	str	r3, [r7, #12]
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  tmp += (BackupRegister * 4U);
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	009b      	lsls	r3, r3, #2
 80078b4:	68fa      	ldr	r2, [r7, #12]
 80078b6:	4413      	add	r3, r2
 80078b8:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3714      	adds	r7, #20
 80078c2:	46bd      	mov	sp, r7
 80078c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c8:	4770      	bx	lr

080078ca <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80078ca:	b580      	push	{r7, lr}
 80078cc:	b082      	sub	sp, #8
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d101      	bne.n	80078dc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80078d8:	2301      	movs	r3, #1
 80078da:	e049      	b.n	8007970 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d106      	bne.n	80078f6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2200      	movs	r2, #0
 80078ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f7fb fc75 	bl	80031e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2202      	movs	r2, #2
 80078fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681a      	ldr	r2, [r3, #0]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	3304      	adds	r3, #4
 8007906:	4619      	mov	r1, r3
 8007908:	4610      	mov	r0, r2
 800790a:	f001 faa3 	bl	8008e54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2201      	movs	r2, #1
 8007912:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2201      	movs	r2, #1
 800791a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2201      	movs	r2, #1
 8007922:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2201      	movs	r2, #1
 800792a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2201      	movs	r2, #1
 8007932:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2201      	movs	r2, #1
 800793a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2201      	movs	r2, #1
 8007942:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2201      	movs	r2, #1
 800794a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2201      	movs	r2, #1
 8007952:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2201      	movs	r2, #1
 800795a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2201      	movs	r2, #1
 8007962:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2201      	movs	r2, #1
 800796a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800796e:	2300      	movs	r3, #0
}
 8007970:	4618      	mov	r0, r3
 8007972:	3708      	adds	r7, #8
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}

08007978 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007978:	b480      	push	{r7}
 800797a:	b085      	sub	sp, #20
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007986:	b2db      	uxtb	r3, r3
 8007988:	2b01      	cmp	r3, #1
 800798a:	d001      	beq.n	8007990 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800798c:	2301      	movs	r3, #1
 800798e:	e047      	b.n	8007a20 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2202      	movs	r2, #2
 8007994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a23      	ldr	r2, [pc, #140]	; (8007a2c <HAL_TIM_Base_Start+0xb4>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d01d      	beq.n	80079de <HAL_TIM_Base_Start+0x66>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079aa:	d018      	beq.n	80079de <HAL_TIM_Base_Start+0x66>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4a1f      	ldr	r2, [pc, #124]	; (8007a30 <HAL_TIM_Base_Start+0xb8>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d013      	beq.n	80079de <HAL_TIM_Base_Start+0x66>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4a1e      	ldr	r2, [pc, #120]	; (8007a34 <HAL_TIM_Base_Start+0xbc>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d00e      	beq.n	80079de <HAL_TIM_Base_Start+0x66>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a1c      	ldr	r2, [pc, #112]	; (8007a38 <HAL_TIM_Base_Start+0xc0>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d009      	beq.n	80079de <HAL_TIM_Base_Start+0x66>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4a1b      	ldr	r2, [pc, #108]	; (8007a3c <HAL_TIM_Base_Start+0xc4>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d004      	beq.n	80079de <HAL_TIM_Base_Start+0x66>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a19      	ldr	r2, [pc, #100]	; (8007a40 <HAL_TIM_Base_Start+0xc8>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d115      	bne.n	8007a0a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	689a      	ldr	r2, [r3, #8]
 80079e4:	4b17      	ldr	r3, [pc, #92]	; (8007a44 <HAL_TIM_Base_Start+0xcc>)
 80079e6:	4013      	ands	r3, r2
 80079e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2b06      	cmp	r3, #6
 80079ee:	d015      	beq.n	8007a1c <HAL_TIM_Base_Start+0xa4>
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079f6:	d011      	beq.n	8007a1c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	681a      	ldr	r2, [r3, #0]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f042 0201 	orr.w	r2, r2, #1
 8007a06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a08:	e008      	b.n	8007a1c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	681a      	ldr	r2, [r3, #0]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f042 0201 	orr.w	r2, r2, #1
 8007a18:	601a      	str	r2, [r3, #0]
 8007a1a:	e000      	b.n	8007a1e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a1c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007a1e:	2300      	movs	r3, #0
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3714      	adds	r7, #20
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	4770      	bx	lr
 8007a2c:	40012c00 	.word	0x40012c00
 8007a30:	40000400 	.word	0x40000400
 8007a34:	40000800 	.word	0x40000800
 8007a38:	40000c00 	.word	0x40000c00
 8007a3c:	40013400 	.word	0x40013400
 8007a40:	40014000 	.word	0x40014000
 8007a44:	00010007 	.word	0x00010007

08007a48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b085      	sub	sp, #20
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a56:	b2db      	uxtb	r3, r3
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	d001      	beq.n	8007a60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	e04f      	b.n	8007b00 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2202      	movs	r2, #2
 8007a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	68da      	ldr	r2, [r3, #12]
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f042 0201 	orr.w	r2, r2, #1
 8007a76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a23      	ldr	r2, [pc, #140]	; (8007b0c <HAL_TIM_Base_Start_IT+0xc4>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d01d      	beq.n	8007abe <HAL_TIM_Base_Start_IT+0x76>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a8a:	d018      	beq.n	8007abe <HAL_TIM_Base_Start_IT+0x76>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a1f      	ldr	r2, [pc, #124]	; (8007b10 <HAL_TIM_Base_Start_IT+0xc8>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d013      	beq.n	8007abe <HAL_TIM_Base_Start_IT+0x76>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a1e      	ldr	r2, [pc, #120]	; (8007b14 <HAL_TIM_Base_Start_IT+0xcc>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d00e      	beq.n	8007abe <HAL_TIM_Base_Start_IT+0x76>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a1c      	ldr	r2, [pc, #112]	; (8007b18 <HAL_TIM_Base_Start_IT+0xd0>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d009      	beq.n	8007abe <HAL_TIM_Base_Start_IT+0x76>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4a1b      	ldr	r2, [pc, #108]	; (8007b1c <HAL_TIM_Base_Start_IT+0xd4>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d004      	beq.n	8007abe <HAL_TIM_Base_Start_IT+0x76>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a19      	ldr	r2, [pc, #100]	; (8007b20 <HAL_TIM_Base_Start_IT+0xd8>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d115      	bne.n	8007aea <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	689a      	ldr	r2, [r3, #8]
 8007ac4:	4b17      	ldr	r3, [pc, #92]	; (8007b24 <HAL_TIM_Base_Start_IT+0xdc>)
 8007ac6:	4013      	ands	r3, r2
 8007ac8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2b06      	cmp	r3, #6
 8007ace:	d015      	beq.n	8007afc <HAL_TIM_Base_Start_IT+0xb4>
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ad6:	d011      	beq.n	8007afc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	681a      	ldr	r2, [r3, #0]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f042 0201 	orr.w	r2, r2, #1
 8007ae6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ae8:	e008      	b.n	8007afc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	681a      	ldr	r2, [r3, #0]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f042 0201 	orr.w	r2, r2, #1
 8007af8:	601a      	str	r2, [r3, #0]
 8007afa:	e000      	b.n	8007afe <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007afc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007afe:	2300      	movs	r3, #0
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3714      	adds	r7, #20
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr
 8007b0c:	40012c00 	.word	0x40012c00
 8007b10:	40000400 	.word	0x40000400
 8007b14:	40000800 	.word	0x40000800
 8007b18:	40000c00 	.word	0x40000c00
 8007b1c:	40013400 	.word	0x40013400
 8007b20:	40014000 	.word	0x40014000
 8007b24:	00010007 	.word	0x00010007

08007b28 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b082      	sub	sp, #8
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d101      	bne.n	8007b3a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007b36:	2301      	movs	r3, #1
 8007b38:	e049      	b.n	8007bce <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b40:	b2db      	uxtb	r3, r3
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d106      	bne.n	8007b54 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 f841 	bl	8007bd6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2202      	movs	r2, #2
 8007b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681a      	ldr	r2, [r3, #0]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	3304      	adds	r3, #4
 8007b64:	4619      	mov	r1, r3
 8007b66:	4610      	mov	r0, r2
 8007b68:	f001 f974 	bl	8008e54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2201      	movs	r2, #1
 8007b70:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2201      	movs	r2, #1
 8007b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2201      	movs	r2, #1
 8007b80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2201      	movs	r2, #1
 8007b88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2201      	movs	r2, #1
 8007b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2201      	movs	r2, #1
 8007b98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2201      	movs	r2, #1
 8007bb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007bcc:	2300      	movs	r3, #0
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3708      	adds	r7, #8
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}

08007bd6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007bd6:	b480      	push	{r7}
 8007bd8:	b083      	sub	sp, #12
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007bde:	bf00      	nop
 8007be0:	370c      	adds	r7, #12
 8007be2:	46bd      	mov	sp, r7
 8007be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be8:	4770      	bx	lr
	...

08007bec <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b086      	sub	sp, #24
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	60f8      	str	r0, [r7, #12]
 8007bf4:	60b9      	str	r1, [r7, #8]
 8007bf6:	607a      	str	r2, [r7, #4]
 8007bf8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d109      	bne.n	8007c18 <HAL_TIM_PWM_Start_DMA+0x2c>
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c0a:	b2db      	uxtb	r3, r3
 8007c0c:	2b02      	cmp	r3, #2
 8007c0e:	bf0c      	ite	eq
 8007c10:	2301      	moveq	r3, #1
 8007c12:	2300      	movne	r3, #0
 8007c14:	b2db      	uxtb	r3, r3
 8007c16:	e03c      	b.n	8007c92 <HAL_TIM_PWM_Start_DMA+0xa6>
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	2b04      	cmp	r3, #4
 8007c1c:	d109      	bne.n	8007c32 <HAL_TIM_PWM_Start_DMA+0x46>
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007c24:	b2db      	uxtb	r3, r3
 8007c26:	2b02      	cmp	r3, #2
 8007c28:	bf0c      	ite	eq
 8007c2a:	2301      	moveq	r3, #1
 8007c2c:	2300      	movne	r3, #0
 8007c2e:	b2db      	uxtb	r3, r3
 8007c30:	e02f      	b.n	8007c92 <HAL_TIM_PWM_Start_DMA+0xa6>
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	2b08      	cmp	r3, #8
 8007c36:	d109      	bne.n	8007c4c <HAL_TIM_PWM_Start_DMA+0x60>
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007c3e:	b2db      	uxtb	r3, r3
 8007c40:	2b02      	cmp	r3, #2
 8007c42:	bf0c      	ite	eq
 8007c44:	2301      	moveq	r3, #1
 8007c46:	2300      	movne	r3, #0
 8007c48:	b2db      	uxtb	r3, r3
 8007c4a:	e022      	b.n	8007c92 <HAL_TIM_PWM_Start_DMA+0xa6>
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	2b0c      	cmp	r3, #12
 8007c50:	d109      	bne.n	8007c66 <HAL_TIM_PWM_Start_DMA+0x7a>
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c58:	b2db      	uxtb	r3, r3
 8007c5a:	2b02      	cmp	r3, #2
 8007c5c:	bf0c      	ite	eq
 8007c5e:	2301      	moveq	r3, #1
 8007c60:	2300      	movne	r3, #0
 8007c62:	b2db      	uxtb	r3, r3
 8007c64:	e015      	b.n	8007c92 <HAL_TIM_PWM_Start_DMA+0xa6>
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	2b10      	cmp	r3, #16
 8007c6a:	d109      	bne.n	8007c80 <HAL_TIM_PWM_Start_DMA+0x94>
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007c72:	b2db      	uxtb	r3, r3
 8007c74:	2b02      	cmp	r3, #2
 8007c76:	bf0c      	ite	eq
 8007c78:	2301      	moveq	r3, #1
 8007c7a:	2300      	movne	r3, #0
 8007c7c:	b2db      	uxtb	r3, r3
 8007c7e:	e008      	b.n	8007c92 <HAL_TIM_PWM_Start_DMA+0xa6>
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007c86:	b2db      	uxtb	r3, r3
 8007c88:	2b02      	cmp	r3, #2
 8007c8a:	bf0c      	ite	eq
 8007c8c:	2301      	moveq	r3, #1
 8007c8e:	2300      	movne	r3, #0
 8007c90:	b2db      	uxtb	r3, r3
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d001      	beq.n	8007c9a <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8007c96:	2302      	movs	r3, #2
 8007c98:	e1ab      	b.n	8007ff2 <HAL_TIM_PWM_Start_DMA+0x406>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d109      	bne.n	8007cb4 <HAL_TIM_PWM_Start_DMA+0xc8>
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	bf0c      	ite	eq
 8007cac:	2301      	moveq	r3, #1
 8007cae:	2300      	movne	r3, #0
 8007cb0:	b2db      	uxtb	r3, r3
 8007cb2:	e03c      	b.n	8007d2e <HAL_TIM_PWM_Start_DMA+0x142>
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	2b04      	cmp	r3, #4
 8007cb8:	d109      	bne.n	8007cce <HAL_TIM_PWM_Start_DMA+0xe2>
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007cc0:	b2db      	uxtb	r3, r3
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	bf0c      	ite	eq
 8007cc6:	2301      	moveq	r3, #1
 8007cc8:	2300      	movne	r3, #0
 8007cca:	b2db      	uxtb	r3, r3
 8007ccc:	e02f      	b.n	8007d2e <HAL_TIM_PWM_Start_DMA+0x142>
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	2b08      	cmp	r3, #8
 8007cd2:	d109      	bne.n	8007ce8 <HAL_TIM_PWM_Start_DMA+0xfc>
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007cda:	b2db      	uxtb	r3, r3
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	bf0c      	ite	eq
 8007ce0:	2301      	moveq	r3, #1
 8007ce2:	2300      	movne	r3, #0
 8007ce4:	b2db      	uxtb	r3, r3
 8007ce6:	e022      	b.n	8007d2e <HAL_TIM_PWM_Start_DMA+0x142>
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	2b0c      	cmp	r3, #12
 8007cec:	d109      	bne.n	8007d02 <HAL_TIM_PWM_Start_DMA+0x116>
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007cf4:	b2db      	uxtb	r3, r3
 8007cf6:	2b01      	cmp	r3, #1
 8007cf8:	bf0c      	ite	eq
 8007cfa:	2301      	moveq	r3, #1
 8007cfc:	2300      	movne	r3, #0
 8007cfe:	b2db      	uxtb	r3, r3
 8007d00:	e015      	b.n	8007d2e <HAL_TIM_PWM_Start_DMA+0x142>
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	2b10      	cmp	r3, #16
 8007d06:	d109      	bne.n	8007d1c <HAL_TIM_PWM_Start_DMA+0x130>
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007d0e:	b2db      	uxtb	r3, r3
 8007d10:	2b01      	cmp	r3, #1
 8007d12:	bf0c      	ite	eq
 8007d14:	2301      	moveq	r3, #1
 8007d16:	2300      	movne	r3, #0
 8007d18:	b2db      	uxtb	r3, r3
 8007d1a:	e008      	b.n	8007d2e <HAL_TIM_PWM_Start_DMA+0x142>
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007d22:	b2db      	uxtb	r3, r3
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	bf0c      	ite	eq
 8007d28:	2301      	moveq	r3, #1
 8007d2a:	2300      	movne	r3, #0
 8007d2c:	b2db      	uxtb	r3, r3
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d034      	beq.n	8007d9c <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) && (Length > 0U))
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d104      	bne.n	8007d42 <HAL_TIM_PWM_Start_DMA+0x156>
 8007d38:	887b      	ldrh	r3, [r7, #2]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d001      	beq.n	8007d42 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8007d3e:	2301      	movs	r3, #1
 8007d40:	e157      	b.n	8007ff2 <HAL_TIM_PWM_Start_DMA+0x406>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d104      	bne.n	8007d52 <HAL_TIM_PWM_Start_DMA+0x166>
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2202      	movs	r2, #2
 8007d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d50:	e026      	b.n	8007da0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	2b04      	cmp	r3, #4
 8007d56:	d104      	bne.n	8007d62 <HAL_TIM_PWM_Start_DMA+0x176>
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2202      	movs	r2, #2
 8007d5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d60:	e01e      	b.n	8007da0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	2b08      	cmp	r3, #8
 8007d66:	d104      	bne.n	8007d72 <HAL_TIM_PWM_Start_DMA+0x186>
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	2202      	movs	r2, #2
 8007d6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d70:	e016      	b.n	8007da0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	2b0c      	cmp	r3, #12
 8007d76:	d104      	bne.n	8007d82 <HAL_TIM_PWM_Start_DMA+0x196>
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2202      	movs	r2, #2
 8007d7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007d80:	e00e      	b.n	8007da0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	2b10      	cmp	r3, #16
 8007d86:	d104      	bne.n	8007d92 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2202      	movs	r2, #2
 8007d8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d90:	e006      	b.n	8007da0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	2202      	movs	r2, #2
 8007d96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007d9a:	e001      	b.n	8007da0 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	e128      	b.n	8007ff2 <HAL_TIM_PWM_Start_DMA+0x406>
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	2b0c      	cmp	r3, #12
 8007da4:	f200 80ae 	bhi.w	8007f04 <HAL_TIM_PWM_Start_DMA+0x318>
 8007da8:	a201      	add	r2, pc, #4	; (adr r2, 8007db0 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8007daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dae:	bf00      	nop
 8007db0:	08007de5 	.word	0x08007de5
 8007db4:	08007f05 	.word	0x08007f05
 8007db8:	08007f05 	.word	0x08007f05
 8007dbc:	08007f05 	.word	0x08007f05
 8007dc0:	08007e2d 	.word	0x08007e2d
 8007dc4:	08007f05 	.word	0x08007f05
 8007dc8:	08007f05 	.word	0x08007f05
 8007dcc:	08007f05 	.word	0x08007f05
 8007dd0:	08007e75 	.word	0x08007e75
 8007dd4:	08007f05 	.word	0x08007f05
 8007dd8:	08007f05 	.word	0x08007f05
 8007ddc:	08007f05 	.word	0x08007f05
 8007de0:	08007ebd 	.word	0x08007ebd
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de8:	4a84      	ldr	r2, [pc, #528]	; (8007ffc <HAL_TIM_PWM_Start_DMA+0x410>)
 8007dea:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df0:	4a83      	ldr	r2, [pc, #524]	; (8008000 <HAL_TIM_PWM_Start_DMA+0x414>)
 8007df2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df8:	4a82      	ldr	r2, [pc, #520]	; (8008004 <HAL_TIM_PWM_Start_DMA+0x418>)
 8007dfa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8007e00:	6879      	ldr	r1, [r7, #4]
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	3334      	adds	r3, #52	; 0x34
 8007e08:	461a      	mov	r2, r3
 8007e0a:	887b      	ldrh	r3, [r7, #2]
 8007e0c:	f7fd f9f8 	bl	8005200 <HAL_DMA_Start_IT>
 8007e10:	4603      	mov	r3, r0
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d001      	beq.n	8007e1a <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007e16:	2301      	movs	r3, #1
 8007e18:	e0eb      	b.n	8007ff2 <HAL_TIM_PWM_Start_DMA+0x406>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	68da      	ldr	r2, [r3, #12]
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e28:	60da      	str	r2, [r3, #12]
      break;
 8007e2a:	e06e      	b.n	8007f0a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e30:	4a72      	ldr	r2, [pc, #456]	; (8007ffc <HAL_TIM_PWM_Start_DMA+0x410>)
 8007e32:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e38:	4a71      	ldr	r2, [pc, #452]	; (8008000 <HAL_TIM_PWM_Start_DMA+0x414>)
 8007e3a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e40:	4a70      	ldr	r2, [pc, #448]	; (8008004 <HAL_TIM_PWM_Start_DMA+0x418>)
 8007e42:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8007e48:	6879      	ldr	r1, [r7, #4]
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	3338      	adds	r3, #56	; 0x38
 8007e50:	461a      	mov	r2, r3
 8007e52:	887b      	ldrh	r3, [r7, #2]
 8007e54:	f7fd f9d4 	bl	8005200 <HAL_DMA_Start_IT>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d001      	beq.n	8007e62 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007e5e:	2301      	movs	r3, #1
 8007e60:	e0c7      	b.n	8007ff2 <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	68da      	ldr	r2, [r3, #12]
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007e70:	60da      	str	r2, [r3, #12]
      break;
 8007e72:	e04a      	b.n	8007f0a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e78:	4a60      	ldr	r2, [pc, #384]	; (8007ffc <HAL_TIM_PWM_Start_DMA+0x410>)
 8007e7a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e80:	4a5f      	ldr	r2, [pc, #380]	; (8008000 <HAL_TIM_PWM_Start_DMA+0x414>)
 8007e82:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e88:	4a5e      	ldr	r2, [pc, #376]	; (8008004 <HAL_TIM_PWM_Start_DMA+0x418>)
 8007e8a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007e90:	6879      	ldr	r1, [r7, #4]
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	333c      	adds	r3, #60	; 0x3c
 8007e98:	461a      	mov	r2, r3
 8007e9a:	887b      	ldrh	r3, [r7, #2]
 8007e9c:	f7fd f9b0 	bl	8005200 <HAL_DMA_Start_IT>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d001      	beq.n	8007eaa <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	e0a3      	b.n	8007ff2 <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	68da      	ldr	r2, [r3, #12]
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007eb8:	60da      	str	r2, [r3, #12]
      break;
 8007eba:	e026      	b.n	8007f0a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ec0:	4a4e      	ldr	r2, [pc, #312]	; (8007ffc <HAL_TIM_PWM_Start_DMA+0x410>)
 8007ec2:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ec8:	4a4d      	ldr	r2, [pc, #308]	; (8008000 <HAL_TIM_PWM_Start_DMA+0x414>)
 8007eca:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ed0:	4a4c      	ldr	r2, [pc, #304]	; (8008004 <HAL_TIM_PWM_Start_DMA+0x418>)
 8007ed2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007ed8:	6879      	ldr	r1, [r7, #4]
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	3340      	adds	r3, #64	; 0x40
 8007ee0:	461a      	mov	r2, r3
 8007ee2:	887b      	ldrh	r3, [r7, #2]
 8007ee4:	f7fd f98c 	bl	8005200 <HAL_DMA_Start_IT>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d001      	beq.n	8007ef2 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007eee:	2301      	movs	r3, #1
 8007ef0:	e07f      	b.n	8007ff2 <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	68da      	ldr	r2, [r3, #12]
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007f00:	60da      	str	r2, [r3, #12]
      break;
 8007f02:	e002      	b.n	8007f0a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8007f04:	2301      	movs	r3, #1
 8007f06:	75fb      	strb	r3, [r7, #23]
      break;
 8007f08:	bf00      	nop
  }

  if (status == HAL_OK)
 8007f0a:	7dfb      	ldrb	r3, [r7, #23]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d16f      	bne.n	8007ff0 <HAL_TIM_PWM_Start_DMA+0x404>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	2201      	movs	r2, #1
 8007f16:	68b9      	ldr	r1, [r7, #8]
 8007f18:	4618      	mov	r0, r3
 8007f1a:	f001 fd5d 	bl	80099d8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4a39      	ldr	r2, [pc, #228]	; (8008008 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d013      	beq.n	8007f50 <HAL_TIM_PWM_Start_DMA+0x364>
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4a37      	ldr	r2, [pc, #220]	; (800800c <HAL_TIM_PWM_Start_DMA+0x420>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d00e      	beq.n	8007f50 <HAL_TIM_PWM_Start_DMA+0x364>
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a36      	ldr	r2, [pc, #216]	; (8008010 <HAL_TIM_PWM_Start_DMA+0x424>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d009      	beq.n	8007f50 <HAL_TIM_PWM_Start_DMA+0x364>
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a34      	ldr	r2, [pc, #208]	; (8008014 <HAL_TIM_PWM_Start_DMA+0x428>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d004      	beq.n	8007f50 <HAL_TIM_PWM_Start_DMA+0x364>
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a33      	ldr	r2, [pc, #204]	; (8008018 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d101      	bne.n	8007f54 <HAL_TIM_PWM_Start_DMA+0x368>
 8007f50:	2301      	movs	r3, #1
 8007f52:	e000      	b.n	8007f56 <HAL_TIM_PWM_Start_DMA+0x36a>
 8007f54:	2300      	movs	r3, #0
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d007      	beq.n	8007f6a <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007f68:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4a26      	ldr	r2, [pc, #152]	; (8008008 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d01d      	beq.n	8007fb0 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f7c:	d018      	beq.n	8007fb0 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4a26      	ldr	r2, [pc, #152]	; (800801c <HAL_TIM_PWM_Start_DMA+0x430>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d013      	beq.n	8007fb0 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4a24      	ldr	r2, [pc, #144]	; (8008020 <HAL_TIM_PWM_Start_DMA+0x434>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d00e      	beq.n	8007fb0 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4a23      	ldr	r2, [pc, #140]	; (8008024 <HAL_TIM_PWM_Start_DMA+0x438>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d009      	beq.n	8007fb0 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a1a      	ldr	r2, [pc, #104]	; (800800c <HAL_TIM_PWM_Start_DMA+0x420>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d004      	beq.n	8007fb0 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4a19      	ldr	r2, [pc, #100]	; (8008010 <HAL_TIM_PWM_Start_DMA+0x424>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d115      	bne.n	8007fdc <HAL_TIM_PWM_Start_DMA+0x3f0>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	689a      	ldr	r2, [r3, #8]
 8007fb6:	4b1c      	ldr	r3, [pc, #112]	; (8008028 <HAL_TIM_PWM_Start_DMA+0x43c>)
 8007fb8:	4013      	ands	r3, r2
 8007fba:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	2b06      	cmp	r3, #6
 8007fc0:	d015      	beq.n	8007fee <HAL_TIM_PWM_Start_DMA+0x402>
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fc8:	d011      	beq.n	8007fee <HAL_TIM_PWM_Start_DMA+0x402>
      {
        __HAL_TIM_ENABLE(htim);
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	681a      	ldr	r2, [r3, #0]
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f042 0201 	orr.w	r2, r2, #1
 8007fd8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fda:	e008      	b.n	8007fee <HAL_TIM_PWM_Start_DMA+0x402>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	681a      	ldr	r2, [r3, #0]
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f042 0201 	orr.w	r2, r2, #1
 8007fea:	601a      	str	r2, [r3, #0]
 8007fec:	e000      	b.n	8007ff0 <HAL_TIM_PWM_Start_DMA+0x404>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fee:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8007ff0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3718      	adds	r7, #24
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}
 8007ffa:	bf00      	nop
 8007ffc:	08008d45 	.word	0x08008d45
 8008000:	08008ded 	.word	0x08008ded
 8008004:	08008cb3 	.word	0x08008cb3
 8008008:	40012c00 	.word	0x40012c00
 800800c:	40013400 	.word	0x40013400
 8008010:	40014000 	.word	0x40014000
 8008014:	40014400 	.word	0x40014400
 8008018:	40014800 	.word	0x40014800
 800801c:	40000400 	.word	0x40000400
 8008020:	40000800 	.word	0x40000800
 8008024:	40000c00 	.word	0x40000c00
 8008028:	00010007 	.word	0x00010007

0800802c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b082      	sub	sp, #8
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d101      	bne.n	800803e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800803a:	2301      	movs	r3, #1
 800803c:	e049      	b.n	80080d2 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008044:	b2db      	uxtb	r3, r3
 8008046:	2b00      	cmp	r3, #0
 8008048:	d106      	bne.n	8008058 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2200      	movs	r2, #0
 800804e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f000 f841 	bl	80080da <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2202      	movs	r2, #2
 800805c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681a      	ldr	r2, [r3, #0]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	3304      	adds	r3, #4
 8008068:	4619      	mov	r1, r3
 800806a:	4610      	mov	r0, r2
 800806c:	f000 fef2 	bl	8008e54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2201      	movs	r2, #1
 8008074:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2201      	movs	r2, #1
 800807c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2201      	movs	r2, #1
 8008084:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2201      	movs	r2, #1
 800808c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2201      	movs	r2, #1
 8008094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2201      	movs	r2, #1
 800809c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2201      	movs	r2, #1
 80080a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2201      	movs	r2, #1
 80080ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2201      	movs	r2, #1
 80080b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2201      	movs	r2, #1
 80080bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2201      	movs	r2, #1
 80080c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2201      	movs	r2, #1
 80080cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80080d0:	2300      	movs	r3, #0
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3708      	adds	r7, #8
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}

080080da <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80080da:	b480      	push	{r7}
 80080dc:	b083      	sub	sp, #12
 80080de:	af00      	add	r7, sp, #0
 80080e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80080e2:	bf00      	nop
 80080e4:	370c      	adds	r7, #12
 80080e6:	46bd      	mov	sp, r7
 80080e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ec:	4770      	bx	lr
	...

080080f0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b084      	sub	sp, #16
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
 80080f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80080fa:	2300      	movs	r3, #0
 80080fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d104      	bne.n	800810e <HAL_TIM_IC_Start_IT+0x1e>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800810a:	b2db      	uxtb	r3, r3
 800810c:	e023      	b.n	8008156 <HAL_TIM_IC_Start_IT+0x66>
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	2b04      	cmp	r3, #4
 8008112:	d104      	bne.n	800811e <HAL_TIM_IC_Start_IT+0x2e>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800811a:	b2db      	uxtb	r3, r3
 800811c:	e01b      	b.n	8008156 <HAL_TIM_IC_Start_IT+0x66>
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	2b08      	cmp	r3, #8
 8008122:	d104      	bne.n	800812e <HAL_TIM_IC_Start_IT+0x3e>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800812a:	b2db      	uxtb	r3, r3
 800812c:	e013      	b.n	8008156 <HAL_TIM_IC_Start_IT+0x66>
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	2b0c      	cmp	r3, #12
 8008132:	d104      	bne.n	800813e <HAL_TIM_IC_Start_IT+0x4e>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800813a:	b2db      	uxtb	r3, r3
 800813c:	e00b      	b.n	8008156 <HAL_TIM_IC_Start_IT+0x66>
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	2b10      	cmp	r3, #16
 8008142:	d104      	bne.n	800814e <HAL_TIM_IC_Start_IT+0x5e>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800814a:	b2db      	uxtb	r3, r3
 800814c:	e003      	b.n	8008156 <HAL_TIM_IC_Start_IT+0x66>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008154:	b2db      	uxtb	r3, r3
 8008156:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d104      	bne.n	8008168 <HAL_TIM_IC_Start_IT+0x78>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008164:	b2db      	uxtb	r3, r3
 8008166:	e013      	b.n	8008190 <HAL_TIM_IC_Start_IT+0xa0>
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	2b04      	cmp	r3, #4
 800816c:	d104      	bne.n	8008178 <HAL_TIM_IC_Start_IT+0x88>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008174:	b2db      	uxtb	r3, r3
 8008176:	e00b      	b.n	8008190 <HAL_TIM_IC_Start_IT+0xa0>
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	2b08      	cmp	r3, #8
 800817c:	d104      	bne.n	8008188 <HAL_TIM_IC_Start_IT+0x98>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008184:	b2db      	uxtb	r3, r3
 8008186:	e003      	b.n	8008190 <HAL_TIM_IC_Start_IT+0xa0>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800818e:	b2db      	uxtb	r3, r3
 8008190:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8008192:	7bbb      	ldrb	r3, [r7, #14]
 8008194:	2b01      	cmp	r3, #1
 8008196:	d102      	bne.n	800819e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8008198:	7b7b      	ldrb	r3, [r7, #13]
 800819a:	2b01      	cmp	r3, #1
 800819c:	d001      	beq.n	80081a2 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800819e:	2301      	movs	r3, #1
 80081a0:	e0dd      	b.n	800835e <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d104      	bne.n	80081b2 <HAL_TIM_IC_Start_IT+0xc2>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2202      	movs	r2, #2
 80081ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80081b0:	e023      	b.n	80081fa <HAL_TIM_IC_Start_IT+0x10a>
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	2b04      	cmp	r3, #4
 80081b6:	d104      	bne.n	80081c2 <HAL_TIM_IC_Start_IT+0xd2>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2202      	movs	r2, #2
 80081bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80081c0:	e01b      	b.n	80081fa <HAL_TIM_IC_Start_IT+0x10a>
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	2b08      	cmp	r3, #8
 80081c6:	d104      	bne.n	80081d2 <HAL_TIM_IC_Start_IT+0xe2>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2202      	movs	r2, #2
 80081cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80081d0:	e013      	b.n	80081fa <HAL_TIM_IC_Start_IT+0x10a>
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	2b0c      	cmp	r3, #12
 80081d6:	d104      	bne.n	80081e2 <HAL_TIM_IC_Start_IT+0xf2>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2202      	movs	r2, #2
 80081dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80081e0:	e00b      	b.n	80081fa <HAL_TIM_IC_Start_IT+0x10a>
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	2b10      	cmp	r3, #16
 80081e6:	d104      	bne.n	80081f2 <HAL_TIM_IC_Start_IT+0x102>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2202      	movs	r2, #2
 80081ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80081f0:	e003      	b.n	80081fa <HAL_TIM_IC_Start_IT+0x10a>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2202      	movs	r2, #2
 80081f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d104      	bne.n	800820a <HAL_TIM_IC_Start_IT+0x11a>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2202      	movs	r2, #2
 8008204:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008208:	e013      	b.n	8008232 <HAL_TIM_IC_Start_IT+0x142>
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	2b04      	cmp	r3, #4
 800820e:	d104      	bne.n	800821a <HAL_TIM_IC_Start_IT+0x12a>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2202      	movs	r2, #2
 8008214:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008218:	e00b      	b.n	8008232 <HAL_TIM_IC_Start_IT+0x142>
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	2b08      	cmp	r3, #8
 800821e:	d104      	bne.n	800822a <HAL_TIM_IC_Start_IT+0x13a>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2202      	movs	r2, #2
 8008224:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008228:	e003      	b.n	8008232 <HAL_TIM_IC_Start_IT+0x142>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2202      	movs	r2, #2
 800822e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	2b0c      	cmp	r3, #12
 8008236:	d841      	bhi.n	80082bc <HAL_TIM_IC_Start_IT+0x1cc>
 8008238:	a201      	add	r2, pc, #4	; (adr r2, 8008240 <HAL_TIM_IC_Start_IT+0x150>)
 800823a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800823e:	bf00      	nop
 8008240:	08008275 	.word	0x08008275
 8008244:	080082bd 	.word	0x080082bd
 8008248:	080082bd 	.word	0x080082bd
 800824c:	080082bd 	.word	0x080082bd
 8008250:	08008287 	.word	0x08008287
 8008254:	080082bd 	.word	0x080082bd
 8008258:	080082bd 	.word	0x080082bd
 800825c:	080082bd 	.word	0x080082bd
 8008260:	08008299 	.word	0x08008299
 8008264:	080082bd 	.word	0x080082bd
 8008268:	080082bd 	.word	0x080082bd
 800826c:	080082bd 	.word	0x080082bd
 8008270:	080082ab 	.word	0x080082ab
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	68da      	ldr	r2, [r3, #12]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f042 0202 	orr.w	r2, r2, #2
 8008282:	60da      	str	r2, [r3, #12]
      break;
 8008284:	e01d      	b.n	80082c2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	68da      	ldr	r2, [r3, #12]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f042 0204 	orr.w	r2, r2, #4
 8008294:	60da      	str	r2, [r3, #12]
      break;
 8008296:	e014      	b.n	80082c2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	68da      	ldr	r2, [r3, #12]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f042 0208 	orr.w	r2, r2, #8
 80082a6:	60da      	str	r2, [r3, #12]
      break;
 80082a8:	e00b      	b.n	80082c2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	68da      	ldr	r2, [r3, #12]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f042 0210 	orr.w	r2, r2, #16
 80082b8:	60da      	str	r2, [r3, #12]
      break;
 80082ba:	e002      	b.n	80082c2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80082bc:	2301      	movs	r3, #1
 80082be:	73fb      	strb	r3, [r7, #15]
      break;
 80082c0:	bf00      	nop
  }

  if (status == HAL_OK)
 80082c2:	7bfb      	ldrb	r3, [r7, #15]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d149      	bne.n	800835c <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	2201      	movs	r2, #1
 80082ce:	6839      	ldr	r1, [r7, #0]
 80082d0:	4618      	mov	r0, r3
 80082d2:	f001 fb81 	bl	80099d8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4a23      	ldr	r2, [pc, #140]	; (8008368 <HAL_TIM_IC_Start_IT+0x278>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d01d      	beq.n	800831c <HAL_TIM_IC_Start_IT+0x22c>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082e8:	d018      	beq.n	800831c <HAL_TIM_IC_Start_IT+0x22c>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4a1f      	ldr	r2, [pc, #124]	; (800836c <HAL_TIM_IC_Start_IT+0x27c>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d013      	beq.n	800831c <HAL_TIM_IC_Start_IT+0x22c>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4a1d      	ldr	r2, [pc, #116]	; (8008370 <HAL_TIM_IC_Start_IT+0x280>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d00e      	beq.n	800831c <HAL_TIM_IC_Start_IT+0x22c>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4a1c      	ldr	r2, [pc, #112]	; (8008374 <HAL_TIM_IC_Start_IT+0x284>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d009      	beq.n	800831c <HAL_TIM_IC_Start_IT+0x22c>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a1a      	ldr	r2, [pc, #104]	; (8008378 <HAL_TIM_IC_Start_IT+0x288>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d004      	beq.n	800831c <HAL_TIM_IC_Start_IT+0x22c>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4a19      	ldr	r2, [pc, #100]	; (800837c <HAL_TIM_IC_Start_IT+0x28c>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d115      	bne.n	8008348 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	689a      	ldr	r2, [r3, #8]
 8008322:	4b17      	ldr	r3, [pc, #92]	; (8008380 <HAL_TIM_IC_Start_IT+0x290>)
 8008324:	4013      	ands	r3, r2
 8008326:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	2b06      	cmp	r3, #6
 800832c:	d015      	beq.n	800835a <HAL_TIM_IC_Start_IT+0x26a>
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008334:	d011      	beq.n	800835a <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	681a      	ldr	r2, [r3, #0]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f042 0201 	orr.w	r2, r2, #1
 8008344:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008346:	e008      	b.n	800835a <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	681a      	ldr	r2, [r3, #0]
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f042 0201 	orr.w	r2, r2, #1
 8008356:	601a      	str	r2, [r3, #0]
 8008358:	e000      	b.n	800835c <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800835a:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800835c:	7bfb      	ldrb	r3, [r7, #15]
}
 800835e:	4618      	mov	r0, r3
 8008360:	3710      	adds	r7, #16
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}
 8008366:	bf00      	nop
 8008368:	40012c00 	.word	0x40012c00
 800836c:	40000400 	.word	0x40000400
 8008370:	40000800 	.word	0x40000800
 8008374:	40000c00 	.word	0x40000c00
 8008378:	40013400 	.word	0x40013400
 800837c:	40014000 	.word	0x40014000
 8008380:	00010007 	.word	0x00010007

08008384 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b082      	sub	sp, #8
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	691b      	ldr	r3, [r3, #16]
 8008392:	f003 0302 	and.w	r3, r3, #2
 8008396:	2b02      	cmp	r3, #2
 8008398:	d122      	bne.n	80083e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	68db      	ldr	r3, [r3, #12]
 80083a0:	f003 0302 	and.w	r3, r3, #2
 80083a4:	2b02      	cmp	r3, #2
 80083a6:	d11b      	bne.n	80083e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f06f 0202 	mvn.w	r2, #2
 80083b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2201      	movs	r2, #1
 80083b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	699b      	ldr	r3, [r3, #24]
 80083be:	f003 0303 	and.w	r3, r3, #3
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d003      	beq.n	80083ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f7f8 ffd6 	bl	8001378 <HAL_TIM_IC_CaptureCallback>
 80083cc:	e005      	b.n	80083da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f000 fbf8 	bl	8008bc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f000 fbff 	bl	8008bd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2200      	movs	r2, #0
 80083de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	691b      	ldr	r3, [r3, #16]
 80083e6:	f003 0304 	and.w	r3, r3, #4
 80083ea:	2b04      	cmp	r3, #4
 80083ec:	d122      	bne.n	8008434 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	68db      	ldr	r3, [r3, #12]
 80083f4:	f003 0304 	and.w	r3, r3, #4
 80083f8:	2b04      	cmp	r3, #4
 80083fa:	d11b      	bne.n	8008434 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f06f 0204 	mvn.w	r2, #4
 8008404:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2202      	movs	r2, #2
 800840a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	699b      	ldr	r3, [r3, #24]
 8008412:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008416:	2b00      	cmp	r3, #0
 8008418:	d003      	beq.n	8008422 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f7f8 ffac 	bl	8001378 <HAL_TIM_IC_CaptureCallback>
 8008420:	e005      	b.n	800842e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 fbce 	bl	8008bc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f000 fbd5 	bl	8008bd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2200      	movs	r2, #0
 8008432:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	691b      	ldr	r3, [r3, #16]
 800843a:	f003 0308 	and.w	r3, r3, #8
 800843e:	2b08      	cmp	r3, #8
 8008440:	d122      	bne.n	8008488 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	68db      	ldr	r3, [r3, #12]
 8008448:	f003 0308 	and.w	r3, r3, #8
 800844c:	2b08      	cmp	r3, #8
 800844e:	d11b      	bne.n	8008488 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f06f 0208 	mvn.w	r2, #8
 8008458:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2204      	movs	r2, #4
 800845e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	69db      	ldr	r3, [r3, #28]
 8008466:	f003 0303 	and.w	r3, r3, #3
 800846a:	2b00      	cmp	r3, #0
 800846c:	d003      	beq.n	8008476 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f7f8 ff82 	bl	8001378 <HAL_TIM_IC_CaptureCallback>
 8008474:	e005      	b.n	8008482 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f000 fba4 	bl	8008bc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f000 fbab 	bl	8008bd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2200      	movs	r2, #0
 8008486:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	691b      	ldr	r3, [r3, #16]
 800848e:	f003 0310 	and.w	r3, r3, #16
 8008492:	2b10      	cmp	r3, #16
 8008494:	d122      	bne.n	80084dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	68db      	ldr	r3, [r3, #12]
 800849c:	f003 0310 	and.w	r3, r3, #16
 80084a0:	2b10      	cmp	r3, #16
 80084a2:	d11b      	bne.n	80084dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f06f 0210 	mvn.w	r2, #16
 80084ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2208      	movs	r2, #8
 80084b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	69db      	ldr	r3, [r3, #28]
 80084ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d003      	beq.n	80084ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f7f8 ff58 	bl	8001378 <HAL_TIM_IC_CaptureCallback>
 80084c8:	e005      	b.n	80084d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f000 fb7a 	bl	8008bc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f000 fb81 	bl	8008bd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2200      	movs	r2, #0
 80084da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	691b      	ldr	r3, [r3, #16]
 80084e2:	f003 0301 	and.w	r3, r3, #1
 80084e6:	2b01      	cmp	r3, #1
 80084e8:	d10e      	bne.n	8008508 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	68db      	ldr	r3, [r3, #12]
 80084f0:	f003 0301 	and.w	r3, r3, #1
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	d107      	bne.n	8008508 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f06f 0201 	mvn.w	r2, #1
 8008500:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f7f8 ff52 	bl	80013ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	691b      	ldr	r3, [r3, #16]
 800850e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008512:	2b80      	cmp	r3, #128	; 0x80
 8008514:	d10e      	bne.n	8008534 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	68db      	ldr	r3, [r3, #12]
 800851c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008520:	2b80      	cmp	r3, #128	; 0x80
 8008522:	d107      	bne.n	8008534 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800852c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f001 fb0a 	bl	8009b48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	691b      	ldr	r3, [r3, #16]
 800853a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800853e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008542:	d10e      	bne.n	8008562 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	68db      	ldr	r3, [r3, #12]
 800854a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800854e:	2b80      	cmp	r3, #128	; 0x80
 8008550:	d107      	bne.n	8008562 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800855a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f001 fafd 	bl	8009b5c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	691b      	ldr	r3, [r3, #16]
 8008568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800856c:	2b40      	cmp	r3, #64	; 0x40
 800856e:	d10e      	bne.n	800858e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	68db      	ldr	r3, [r3, #12]
 8008576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800857a:	2b40      	cmp	r3, #64	; 0x40
 800857c:	d107      	bne.n	800858e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008586:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f000 fb39 	bl	8008c00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	691b      	ldr	r3, [r3, #16]
 8008594:	f003 0320 	and.w	r3, r3, #32
 8008598:	2b20      	cmp	r3, #32
 800859a:	d10e      	bne.n	80085ba <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	68db      	ldr	r3, [r3, #12]
 80085a2:	f003 0320 	and.w	r3, r3, #32
 80085a6:	2b20      	cmp	r3, #32
 80085a8:	d107      	bne.n	80085ba <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f06f 0220 	mvn.w	r2, #32
 80085b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f001 fabd 	bl	8009b34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80085ba:	bf00      	nop
 80085bc:	3708      	adds	r7, #8
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}

080085c2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80085c2:	b580      	push	{r7, lr}
 80085c4:	b086      	sub	sp, #24
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	60f8      	str	r0, [r7, #12]
 80085ca:	60b9      	str	r1, [r7, #8]
 80085cc:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80085ce:	2300      	movs	r3, #0
 80085d0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085d8:	2b01      	cmp	r3, #1
 80085da:	d101      	bne.n	80085e0 <HAL_TIM_IC_ConfigChannel+0x1e>
 80085dc:	2302      	movs	r3, #2
 80085de:	e088      	b.n	80086f2 <HAL_TIM_IC_ConfigChannel+0x130>
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	2201      	movs	r2, #1
 80085e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d11b      	bne.n	8008626 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	6818      	ldr	r0, [r3, #0]
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	6819      	ldr	r1, [r3, #0]
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	685a      	ldr	r2, [r3, #4]
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	68db      	ldr	r3, [r3, #12]
 80085fe:	f001 f82d 	bl	800965c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	699a      	ldr	r2, [r3, #24]
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f022 020c 	bic.w	r2, r2, #12
 8008610:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	6999      	ldr	r1, [r3, #24]
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	689a      	ldr	r2, [r3, #8]
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	430a      	orrs	r2, r1
 8008622:	619a      	str	r2, [r3, #24]
 8008624:	e060      	b.n	80086e8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2b04      	cmp	r3, #4
 800862a:	d11c      	bne.n	8008666 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	6818      	ldr	r0, [r3, #0]
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	6819      	ldr	r1, [r3, #0]
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	685a      	ldr	r2, [r3, #4]
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	68db      	ldr	r3, [r3, #12]
 800863c:	f001 f8ab 	bl	8009796 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	699a      	ldr	r2, [r3, #24]
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800864e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	6999      	ldr	r1, [r3, #24]
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	689b      	ldr	r3, [r3, #8]
 800865a:	021a      	lsls	r2, r3, #8
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	430a      	orrs	r2, r1
 8008662:	619a      	str	r2, [r3, #24]
 8008664:	e040      	b.n	80086e8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2b08      	cmp	r3, #8
 800866a:	d11b      	bne.n	80086a4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	6818      	ldr	r0, [r3, #0]
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	6819      	ldr	r1, [r3, #0]
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	685a      	ldr	r2, [r3, #4]
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	68db      	ldr	r3, [r3, #12]
 800867c:	f001 f8f8 	bl	8009870 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	69da      	ldr	r2, [r3, #28]
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f022 020c 	bic.w	r2, r2, #12
 800868e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	69d9      	ldr	r1, [r3, #28]
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	689a      	ldr	r2, [r3, #8]
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	430a      	orrs	r2, r1
 80086a0:	61da      	str	r2, [r3, #28]
 80086a2:	e021      	b.n	80086e8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2b0c      	cmp	r3, #12
 80086a8:	d11c      	bne.n	80086e4 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	6818      	ldr	r0, [r3, #0]
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	6819      	ldr	r1, [r3, #0]
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	685a      	ldr	r2, [r3, #4]
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	68db      	ldr	r3, [r3, #12]
 80086ba:	f001 f915 	bl	80098e8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	69da      	ldr	r2, [r3, #28]
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80086cc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	69d9      	ldr	r1, [r3, #28]
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	689b      	ldr	r3, [r3, #8]
 80086d8:	021a      	lsls	r2, r3, #8
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	430a      	orrs	r2, r1
 80086e0:	61da      	str	r2, [r3, #28]
 80086e2:	e001      	b.n	80086e8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80086e4:	2301      	movs	r3, #1
 80086e6:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	2200      	movs	r2, #0
 80086ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80086f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3718      	adds	r7, #24
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}
	...

080086fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b086      	sub	sp, #24
 8008700:	af00      	add	r7, sp, #0
 8008702:	60f8      	str	r0, [r7, #12]
 8008704:	60b9      	str	r1, [r7, #8]
 8008706:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008708:	2300      	movs	r3, #0
 800870a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008712:	2b01      	cmp	r3, #1
 8008714:	d101      	bne.n	800871a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008716:	2302      	movs	r3, #2
 8008718:	e0ff      	b.n	800891a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	2201      	movs	r2, #1
 800871e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2b14      	cmp	r3, #20
 8008726:	f200 80f0 	bhi.w	800890a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800872a:	a201      	add	r2, pc, #4	; (adr r2, 8008730 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800872c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008730:	08008785 	.word	0x08008785
 8008734:	0800890b 	.word	0x0800890b
 8008738:	0800890b 	.word	0x0800890b
 800873c:	0800890b 	.word	0x0800890b
 8008740:	080087c5 	.word	0x080087c5
 8008744:	0800890b 	.word	0x0800890b
 8008748:	0800890b 	.word	0x0800890b
 800874c:	0800890b 	.word	0x0800890b
 8008750:	08008807 	.word	0x08008807
 8008754:	0800890b 	.word	0x0800890b
 8008758:	0800890b 	.word	0x0800890b
 800875c:	0800890b 	.word	0x0800890b
 8008760:	08008847 	.word	0x08008847
 8008764:	0800890b 	.word	0x0800890b
 8008768:	0800890b 	.word	0x0800890b
 800876c:	0800890b 	.word	0x0800890b
 8008770:	08008889 	.word	0x08008889
 8008774:	0800890b 	.word	0x0800890b
 8008778:	0800890b 	.word	0x0800890b
 800877c:	0800890b 	.word	0x0800890b
 8008780:	080088c9 	.word	0x080088c9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	68b9      	ldr	r1, [r7, #8]
 800878a:	4618      	mov	r0, r3
 800878c:	f000 fbfc 	bl	8008f88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	699a      	ldr	r2, [r3, #24]
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f042 0208 	orr.w	r2, r2, #8
 800879e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	699a      	ldr	r2, [r3, #24]
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f022 0204 	bic.w	r2, r2, #4
 80087ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	6999      	ldr	r1, [r3, #24]
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	691a      	ldr	r2, [r3, #16]
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	430a      	orrs	r2, r1
 80087c0:	619a      	str	r2, [r3, #24]
      break;
 80087c2:	e0a5      	b.n	8008910 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	68b9      	ldr	r1, [r7, #8]
 80087ca:	4618      	mov	r0, r3
 80087cc:	f000 fc6c 	bl	80090a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	699a      	ldr	r2, [r3, #24]
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80087de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	699a      	ldr	r2, [r3, #24]
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80087ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	6999      	ldr	r1, [r3, #24]
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	691b      	ldr	r3, [r3, #16]
 80087fa:	021a      	lsls	r2, r3, #8
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	430a      	orrs	r2, r1
 8008802:	619a      	str	r2, [r3, #24]
      break;
 8008804:	e084      	b.n	8008910 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	68b9      	ldr	r1, [r7, #8]
 800880c:	4618      	mov	r0, r3
 800880e:	f000 fcd5 	bl	80091bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	69da      	ldr	r2, [r3, #28]
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f042 0208 	orr.w	r2, r2, #8
 8008820:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	69da      	ldr	r2, [r3, #28]
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f022 0204 	bic.w	r2, r2, #4
 8008830:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	69d9      	ldr	r1, [r3, #28]
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	691a      	ldr	r2, [r3, #16]
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	430a      	orrs	r2, r1
 8008842:	61da      	str	r2, [r3, #28]
      break;
 8008844:	e064      	b.n	8008910 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	68b9      	ldr	r1, [r7, #8]
 800884c:	4618      	mov	r0, r3
 800884e:	f000 fd3d 	bl	80092cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	69da      	ldr	r2, [r3, #28]
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008860:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	69da      	ldr	r2, [r3, #28]
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008870:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	69d9      	ldr	r1, [r3, #28]
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	691b      	ldr	r3, [r3, #16]
 800887c:	021a      	lsls	r2, r3, #8
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	430a      	orrs	r2, r1
 8008884:	61da      	str	r2, [r3, #28]
      break;
 8008886:	e043      	b.n	8008910 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	68b9      	ldr	r1, [r7, #8]
 800888e:	4618      	mov	r0, r3
 8008890:	f000 fd86 	bl	80093a0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f042 0208 	orr.w	r2, r2, #8
 80088a2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f022 0204 	bic.w	r2, r2, #4
 80088b2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	691a      	ldr	r2, [r3, #16]
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	430a      	orrs	r2, r1
 80088c4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80088c6:	e023      	b.n	8008910 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	68b9      	ldr	r1, [r7, #8]
 80088ce:	4618      	mov	r0, r3
 80088d0:	f000 fdca 	bl	8009468 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80088e2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80088f2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	691b      	ldr	r3, [r3, #16]
 80088fe:	021a      	lsls	r2, r3, #8
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	430a      	orrs	r2, r1
 8008906:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008908:	e002      	b.n	8008910 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800890a:	2301      	movs	r3, #1
 800890c:	75fb      	strb	r3, [r7, #23]
      break;
 800890e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	2200      	movs	r2, #0
 8008914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008918:	7dfb      	ldrb	r3, [r7, #23]
}
 800891a:	4618      	mov	r0, r3
 800891c:	3718      	adds	r7, #24
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}
 8008922:	bf00      	nop

08008924 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b084      	sub	sp, #16
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
 800892c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800892e:	2300      	movs	r3, #0
 8008930:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008938:	2b01      	cmp	r3, #1
 800893a:	d101      	bne.n	8008940 <HAL_TIM_ConfigClockSource+0x1c>
 800893c:	2302      	movs	r3, #2
 800893e:	e0b6      	b.n	8008aae <HAL_TIM_ConfigClockSource+0x18a>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2201      	movs	r2, #1
 8008944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2202      	movs	r2, #2
 800894c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	689b      	ldr	r3, [r3, #8]
 8008956:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800895e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008962:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800896a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	68ba      	ldr	r2, [r7, #8]
 8008972:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800897c:	d03e      	beq.n	80089fc <HAL_TIM_ConfigClockSource+0xd8>
 800897e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008982:	f200 8087 	bhi.w	8008a94 <HAL_TIM_ConfigClockSource+0x170>
 8008986:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800898a:	f000 8086 	beq.w	8008a9a <HAL_TIM_ConfigClockSource+0x176>
 800898e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008992:	d87f      	bhi.n	8008a94 <HAL_TIM_ConfigClockSource+0x170>
 8008994:	2b70      	cmp	r3, #112	; 0x70
 8008996:	d01a      	beq.n	80089ce <HAL_TIM_ConfigClockSource+0xaa>
 8008998:	2b70      	cmp	r3, #112	; 0x70
 800899a:	d87b      	bhi.n	8008a94 <HAL_TIM_ConfigClockSource+0x170>
 800899c:	2b60      	cmp	r3, #96	; 0x60
 800899e:	d050      	beq.n	8008a42 <HAL_TIM_ConfigClockSource+0x11e>
 80089a0:	2b60      	cmp	r3, #96	; 0x60
 80089a2:	d877      	bhi.n	8008a94 <HAL_TIM_ConfigClockSource+0x170>
 80089a4:	2b50      	cmp	r3, #80	; 0x50
 80089a6:	d03c      	beq.n	8008a22 <HAL_TIM_ConfigClockSource+0xfe>
 80089a8:	2b50      	cmp	r3, #80	; 0x50
 80089aa:	d873      	bhi.n	8008a94 <HAL_TIM_ConfigClockSource+0x170>
 80089ac:	2b40      	cmp	r3, #64	; 0x40
 80089ae:	d058      	beq.n	8008a62 <HAL_TIM_ConfigClockSource+0x13e>
 80089b0:	2b40      	cmp	r3, #64	; 0x40
 80089b2:	d86f      	bhi.n	8008a94 <HAL_TIM_ConfigClockSource+0x170>
 80089b4:	2b30      	cmp	r3, #48	; 0x30
 80089b6:	d064      	beq.n	8008a82 <HAL_TIM_ConfigClockSource+0x15e>
 80089b8:	2b30      	cmp	r3, #48	; 0x30
 80089ba:	d86b      	bhi.n	8008a94 <HAL_TIM_ConfigClockSource+0x170>
 80089bc:	2b20      	cmp	r3, #32
 80089be:	d060      	beq.n	8008a82 <HAL_TIM_ConfigClockSource+0x15e>
 80089c0:	2b20      	cmp	r3, #32
 80089c2:	d867      	bhi.n	8008a94 <HAL_TIM_ConfigClockSource+0x170>
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d05c      	beq.n	8008a82 <HAL_TIM_ConfigClockSource+0x15e>
 80089c8:	2b10      	cmp	r3, #16
 80089ca:	d05a      	beq.n	8008a82 <HAL_TIM_ConfigClockSource+0x15e>
 80089cc:	e062      	b.n	8008a94 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6818      	ldr	r0, [r3, #0]
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	6899      	ldr	r1, [r3, #8]
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	685a      	ldr	r2, [r3, #4]
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	68db      	ldr	r3, [r3, #12]
 80089de:	f000 ffdb 	bl	8009998 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	689b      	ldr	r3, [r3, #8]
 80089e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80089f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	68ba      	ldr	r2, [r7, #8]
 80089f8:	609a      	str	r2, [r3, #8]
      break;
 80089fa:	e04f      	b.n	8008a9c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6818      	ldr	r0, [r3, #0]
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	6899      	ldr	r1, [r3, #8]
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	685a      	ldr	r2, [r3, #4]
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	68db      	ldr	r3, [r3, #12]
 8008a0c:	f000 ffc4 	bl	8009998 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	689a      	ldr	r2, [r3, #8]
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008a1e:	609a      	str	r2, [r3, #8]
      break;
 8008a20:	e03c      	b.n	8008a9c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6818      	ldr	r0, [r3, #0]
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	6859      	ldr	r1, [r3, #4]
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	68db      	ldr	r3, [r3, #12]
 8008a2e:	461a      	mov	r2, r3
 8008a30:	f000 fe82 	bl	8009738 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	2150      	movs	r1, #80	; 0x50
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f000 ff91 	bl	8009962 <TIM_ITRx_SetConfig>
      break;
 8008a40:	e02c      	b.n	8008a9c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6818      	ldr	r0, [r3, #0]
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	6859      	ldr	r1, [r3, #4]
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	68db      	ldr	r3, [r3, #12]
 8008a4e:	461a      	mov	r2, r3
 8008a50:	f000 fede 	bl	8009810 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	2160      	movs	r1, #96	; 0x60
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f000 ff81 	bl	8009962 <TIM_ITRx_SetConfig>
      break;
 8008a60:	e01c      	b.n	8008a9c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6818      	ldr	r0, [r3, #0]
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	6859      	ldr	r1, [r3, #4]
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	68db      	ldr	r3, [r3, #12]
 8008a6e:	461a      	mov	r2, r3
 8008a70:	f000 fe62 	bl	8009738 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	2140      	movs	r1, #64	; 0x40
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f000 ff71 	bl	8009962 <TIM_ITRx_SetConfig>
      break;
 8008a80:	e00c      	b.n	8008a9c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681a      	ldr	r2, [r3, #0]
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4619      	mov	r1, r3
 8008a8c:	4610      	mov	r0, r2
 8008a8e:	f000 ff68 	bl	8009962 <TIM_ITRx_SetConfig>
      break;
 8008a92:	e003      	b.n	8008a9c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8008a94:	2301      	movs	r3, #1
 8008a96:	73fb      	strb	r3, [r7, #15]
      break;
 8008a98:	e000      	b.n	8008a9c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8008a9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3710      	adds	r7, #16
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}

08008ab6 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008ab6:	b580      	push	{r7, lr}
 8008ab8:	b082      	sub	sp, #8
 8008aba:	af00      	add	r7, sp, #0
 8008abc:	6078      	str	r0, [r7, #4]
 8008abe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ac6:	2b01      	cmp	r3, #1
 8008ac8:	d101      	bne.n	8008ace <HAL_TIM_SlaveConfigSynchro+0x18>
 8008aca:	2302      	movs	r3, #2
 8008acc:	e031      	b.n	8008b32 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2201      	movs	r2, #1
 8008ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2202      	movs	r2, #2
 8008ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8008ade:	6839      	ldr	r1, [r7, #0]
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f000 fd27 	bl	8009534 <TIM_SlaveTimer_SetConfig>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d009      	beq.n	8008b00 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2201      	movs	r2, #1
 8008af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2200      	movs	r2, #0
 8008af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8008afc:	2301      	movs	r3, #1
 8008afe:	e018      	b.n	8008b32 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	68da      	ldr	r2, [r3, #12]
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b0e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	68da      	ldr	r2, [r3, #12]
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008b1e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2201      	movs	r2, #1
 8008b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008b30:	2300      	movs	r3, #0
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3708      	adds	r7, #8
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}
	...

08008b3c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b085      	sub	sp, #20
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8008b46:	2300      	movs	r3, #0
 8008b48:	60fb      	str	r3, [r7, #12]
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	2b0c      	cmp	r3, #12
 8008b4e:	d831      	bhi.n	8008bb4 <HAL_TIM_ReadCapturedValue+0x78>
 8008b50:	a201      	add	r2, pc, #4	; (adr r2, 8008b58 <HAL_TIM_ReadCapturedValue+0x1c>)
 8008b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b56:	bf00      	nop
 8008b58:	08008b8d 	.word	0x08008b8d
 8008b5c:	08008bb5 	.word	0x08008bb5
 8008b60:	08008bb5 	.word	0x08008bb5
 8008b64:	08008bb5 	.word	0x08008bb5
 8008b68:	08008b97 	.word	0x08008b97
 8008b6c:	08008bb5 	.word	0x08008bb5
 8008b70:	08008bb5 	.word	0x08008bb5
 8008b74:	08008bb5 	.word	0x08008bb5
 8008b78:	08008ba1 	.word	0x08008ba1
 8008b7c:	08008bb5 	.word	0x08008bb5
 8008b80:	08008bb5 	.word	0x08008bb5
 8008b84:	08008bb5 	.word	0x08008bb5
 8008b88:	08008bab 	.word	0x08008bab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b92:	60fb      	str	r3, [r7, #12]

      break;
 8008b94:	e00f      	b.n	8008bb6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b9c:	60fb      	str	r3, [r7, #12]

      break;
 8008b9e:	e00a      	b.n	8008bb6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ba6:	60fb      	str	r3, [r7, #12]

      break;
 8008ba8:	e005      	b.n	8008bb6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bb0:	60fb      	str	r3, [r7, #12]

      break;
 8008bb2:	e000      	b.n	8008bb6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8008bb4:	bf00      	nop
  }

  return tmpreg;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	3714      	adds	r7, #20
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc2:	4770      	bx	lr

08008bc4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b083      	sub	sp, #12
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008bcc:	bf00      	nop
 8008bce:	370c      	adds	r7, #12
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd6:	4770      	bx	lr

08008bd8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b083      	sub	sp, #12
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008be0:	bf00      	nop
 8008be2:	370c      	adds	r7, #12
 8008be4:	46bd      	mov	sp, r7
 8008be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bea:	4770      	bx	lr

08008bec <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008bec:	b480      	push	{r7}
 8008bee:	b083      	sub	sp, #12
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008bf4:	bf00      	nop
 8008bf6:	370c      	adds	r7, #12
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr

08008c00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008c00:	b480      	push	{r7}
 8008c02:	b083      	sub	sp, #12
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008c08:	bf00      	nop
 8008c0a:	370c      	adds	r7, #12
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c12:	4770      	bx	lr

08008c14 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008c14:	b480      	push	{r7}
 8008c16:	b083      	sub	sp, #12
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008c1c:	bf00      	nop
 8008c1e:	370c      	adds	r7, #12
 8008c20:	46bd      	mov	sp, r7
 8008c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c26:	4770      	bx	lr

08008c28 <HAL_TIM_GetActiveChannel>:
  * @brief  Return the TIM Encoder Mode handle state.
  * @param  htim TIM handle
  * @retval Active channel
  */
HAL_TIM_ActiveChannel HAL_TIM_GetActiveChannel(TIM_HandleTypeDef *htim)
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b083      	sub	sp, #12
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
  return htim->Channel;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	7f1b      	ldrb	r3, [r3, #28]
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	370c      	adds	r7, #12
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3e:	4770      	bx	lr

08008c40 <HAL_TIM_GetChannelState>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5
  *            @arg TIM_CHANNEL_6: TIM Channel 6
  * @retval TIM Channel state
  */
HAL_TIM_ChannelStateTypeDef HAL_TIM_GetChannelState(TIM_HandleTypeDef *htim,  uint32_t Channel)
{
 8008c40:	b480      	push	{r7}
 8008c42:	b085      	sub	sp, #20
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
 8008c48:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_state;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d104      	bne.n	8008c5a <HAL_TIM_GetChannelState+0x1a>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008c56:	b2db      	uxtb	r3, r3
 8008c58:	e023      	b.n	8008ca2 <HAL_TIM_GetChannelState+0x62>
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	2b04      	cmp	r3, #4
 8008c5e:	d104      	bne.n	8008c6a <HAL_TIM_GetChannelState+0x2a>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008c66:	b2db      	uxtb	r3, r3
 8008c68:	e01b      	b.n	8008ca2 <HAL_TIM_GetChannelState+0x62>
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	2b08      	cmp	r3, #8
 8008c6e:	d104      	bne.n	8008c7a <HAL_TIM_GetChannelState+0x3a>
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008c76:	b2db      	uxtb	r3, r3
 8008c78:	e013      	b.n	8008ca2 <HAL_TIM_GetChannelState+0x62>
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	2b0c      	cmp	r3, #12
 8008c7e:	d104      	bne.n	8008c8a <HAL_TIM_GetChannelState+0x4a>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c86:	b2db      	uxtb	r3, r3
 8008c88:	e00b      	b.n	8008ca2 <HAL_TIM_GetChannelState+0x62>
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	2b10      	cmp	r3, #16
 8008c8e:	d104      	bne.n	8008c9a <HAL_TIM_GetChannelState+0x5a>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008c96:	b2db      	uxtb	r3, r3
 8008c98:	e003      	b.n	8008ca2 <HAL_TIM_GetChannelState+0x62>
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008ca0:	b2db      	uxtb	r3, r3
 8008ca2:	73fb      	strb	r3, [r7, #15]

  return channel_state;
 8008ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3714      	adds	r7, #20
 8008caa:	46bd      	mov	sp, r7
 8008cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb0:	4770      	bx	lr

08008cb2 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8008cb2:	b580      	push	{r7, lr}
 8008cb4:	b084      	sub	sp, #16
 8008cb6:	af00      	add	r7, sp, #0
 8008cb8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cbe:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cc4:	687a      	ldr	r2, [r7, #4]
 8008cc6:	429a      	cmp	r2, r3
 8008cc8:	d107      	bne.n	8008cda <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	2201      	movs	r2, #1
 8008cce:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008cd8:	e02a      	b.n	8008d30 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cde:	687a      	ldr	r2, [r7, #4]
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	d107      	bne.n	8008cf4 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	2202      	movs	r2, #2
 8008ce8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	2201      	movs	r2, #1
 8008cee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008cf2:	e01d      	b.n	8008d30 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cf8:	687a      	ldr	r2, [r7, #4]
 8008cfa:	429a      	cmp	r2, r3
 8008cfc:	d107      	bne.n	8008d0e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	2204      	movs	r2, #4
 8008d02:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	2201      	movs	r2, #1
 8008d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008d0c:	e010      	b.n	8008d30 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d12:	687a      	ldr	r2, [r7, #4]
 8008d14:	429a      	cmp	r2, r3
 8008d16:	d107      	bne.n	8008d28 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	2208      	movs	r2, #8
 8008d1c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	2201      	movs	r2, #1
 8008d22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008d26:	e003      	b.n	8008d30 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	2201      	movs	r2, #1
 8008d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8008d30:	68f8      	ldr	r0, [r7, #12]
 8008d32:	f7ff ff6f 	bl	8008c14 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	771a      	strb	r2, [r3, #28]
}
 8008d3c:	bf00      	nop
 8008d3e:	3710      	adds	r7, #16
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}

08008d44 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b084      	sub	sp, #16
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d50:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d56:	687a      	ldr	r2, [r7, #4]
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	d10b      	bne.n	8008d74 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	2201      	movs	r2, #1
 8008d60:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	69db      	ldr	r3, [r3, #28]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d136      	bne.n	8008dd8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	2201      	movs	r2, #1
 8008d6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008d72:	e031      	b.n	8008dd8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d78:	687a      	ldr	r2, [r7, #4]
 8008d7a:	429a      	cmp	r2, r3
 8008d7c:	d10b      	bne.n	8008d96 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	2202      	movs	r2, #2
 8008d82:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	69db      	ldr	r3, [r3, #28]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d125      	bne.n	8008dd8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	2201      	movs	r2, #1
 8008d90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008d94:	e020      	b.n	8008dd8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d9a:	687a      	ldr	r2, [r7, #4]
 8008d9c:	429a      	cmp	r2, r3
 8008d9e:	d10b      	bne.n	8008db8 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	2204      	movs	r2, #4
 8008da4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	69db      	ldr	r3, [r3, #28]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d114      	bne.n	8008dd8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	2201      	movs	r2, #1
 8008db2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008db6:	e00f      	b.n	8008dd8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dbc:	687a      	ldr	r2, [r7, #4]
 8008dbe:	429a      	cmp	r2, r3
 8008dc0:	d10a      	bne.n	8008dd8 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	2208      	movs	r2, #8
 8008dc6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	69db      	ldr	r3, [r3, #28]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d103      	bne.n	8008dd8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	2201      	movs	r2, #1
 8008dd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008dd8:	68f8      	ldr	r0, [r7, #12]
 8008dda:	f7ff fefd 	bl	8008bd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	2200      	movs	r2, #0
 8008de2:	771a      	strb	r2, [r3, #28]
}
 8008de4:	bf00      	nop
 8008de6:	3710      	adds	r7, #16
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}

08008dec <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b084      	sub	sp, #16
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008df8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dfe:	687a      	ldr	r2, [r7, #4]
 8008e00:	429a      	cmp	r2, r3
 8008e02:	d103      	bne.n	8008e0c <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	2201      	movs	r2, #1
 8008e08:	771a      	strb	r2, [r3, #28]
 8008e0a:	e019      	b.n	8008e40 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e10:	687a      	ldr	r2, [r7, #4]
 8008e12:	429a      	cmp	r2, r3
 8008e14:	d103      	bne.n	8008e1e <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	2202      	movs	r2, #2
 8008e1a:	771a      	strb	r2, [r3, #28]
 8008e1c:	e010      	b.n	8008e40 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e22:	687a      	ldr	r2, [r7, #4]
 8008e24:	429a      	cmp	r2, r3
 8008e26:	d103      	bne.n	8008e30 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	2204      	movs	r2, #4
 8008e2c:	771a      	strb	r2, [r3, #28]
 8008e2e:	e007      	b.n	8008e40 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e34:	687a      	ldr	r2, [r7, #4]
 8008e36:	429a      	cmp	r2, r3
 8008e38:	d102      	bne.n	8008e40 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	2208      	movs	r2, #8
 8008e3e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8008e40:	68f8      	ldr	r0, [r7, #12]
 8008e42:	f7ff fed3 	bl	8008bec <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	771a      	strb	r2, [r3, #28]
}
 8008e4c:	bf00      	nop
 8008e4e:	3710      	adds	r7, #16
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}

08008e54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008e54:	b480      	push	{r7}
 8008e56:	b085      	sub	sp, #20
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
 8008e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	4a40      	ldr	r2, [pc, #256]	; (8008f68 <TIM_Base_SetConfig+0x114>)
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d013      	beq.n	8008e94 <TIM_Base_SetConfig+0x40>
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e72:	d00f      	beq.n	8008e94 <TIM_Base_SetConfig+0x40>
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	4a3d      	ldr	r2, [pc, #244]	; (8008f6c <TIM_Base_SetConfig+0x118>)
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d00b      	beq.n	8008e94 <TIM_Base_SetConfig+0x40>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	4a3c      	ldr	r2, [pc, #240]	; (8008f70 <TIM_Base_SetConfig+0x11c>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d007      	beq.n	8008e94 <TIM_Base_SetConfig+0x40>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	4a3b      	ldr	r2, [pc, #236]	; (8008f74 <TIM_Base_SetConfig+0x120>)
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d003      	beq.n	8008e94 <TIM_Base_SetConfig+0x40>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	4a3a      	ldr	r2, [pc, #232]	; (8008f78 <TIM_Base_SetConfig+0x124>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d108      	bne.n	8008ea6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	685b      	ldr	r3, [r3, #4]
 8008ea0:	68fa      	ldr	r2, [r7, #12]
 8008ea2:	4313      	orrs	r3, r2
 8008ea4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	4a2f      	ldr	r2, [pc, #188]	; (8008f68 <TIM_Base_SetConfig+0x114>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d01f      	beq.n	8008eee <TIM_Base_SetConfig+0x9a>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008eb4:	d01b      	beq.n	8008eee <TIM_Base_SetConfig+0x9a>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	4a2c      	ldr	r2, [pc, #176]	; (8008f6c <TIM_Base_SetConfig+0x118>)
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d017      	beq.n	8008eee <TIM_Base_SetConfig+0x9a>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	4a2b      	ldr	r2, [pc, #172]	; (8008f70 <TIM_Base_SetConfig+0x11c>)
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d013      	beq.n	8008eee <TIM_Base_SetConfig+0x9a>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	4a2a      	ldr	r2, [pc, #168]	; (8008f74 <TIM_Base_SetConfig+0x120>)
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d00f      	beq.n	8008eee <TIM_Base_SetConfig+0x9a>
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	4a29      	ldr	r2, [pc, #164]	; (8008f78 <TIM_Base_SetConfig+0x124>)
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d00b      	beq.n	8008eee <TIM_Base_SetConfig+0x9a>
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	4a28      	ldr	r2, [pc, #160]	; (8008f7c <TIM_Base_SetConfig+0x128>)
 8008eda:	4293      	cmp	r3, r2
 8008edc:	d007      	beq.n	8008eee <TIM_Base_SetConfig+0x9a>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	4a27      	ldr	r2, [pc, #156]	; (8008f80 <TIM_Base_SetConfig+0x12c>)
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d003      	beq.n	8008eee <TIM_Base_SetConfig+0x9a>
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	4a26      	ldr	r2, [pc, #152]	; (8008f84 <TIM_Base_SetConfig+0x130>)
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d108      	bne.n	8008f00 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ef4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	68db      	ldr	r3, [r3, #12]
 8008efa:	68fa      	ldr	r2, [r7, #12]
 8008efc:	4313      	orrs	r3, r2
 8008efe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	695b      	ldr	r3, [r3, #20]
 8008f0a:	4313      	orrs	r3, r2
 8008f0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	68fa      	ldr	r2, [r7, #12]
 8008f12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	689a      	ldr	r2, [r3, #8]
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	681a      	ldr	r2, [r3, #0]
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	4a10      	ldr	r2, [pc, #64]	; (8008f68 <TIM_Base_SetConfig+0x114>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d00f      	beq.n	8008f4c <TIM_Base_SetConfig+0xf8>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	4a12      	ldr	r2, [pc, #72]	; (8008f78 <TIM_Base_SetConfig+0x124>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d00b      	beq.n	8008f4c <TIM_Base_SetConfig+0xf8>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	4a11      	ldr	r2, [pc, #68]	; (8008f7c <TIM_Base_SetConfig+0x128>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d007      	beq.n	8008f4c <TIM_Base_SetConfig+0xf8>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	4a10      	ldr	r2, [pc, #64]	; (8008f80 <TIM_Base_SetConfig+0x12c>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d003      	beq.n	8008f4c <TIM_Base_SetConfig+0xf8>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	4a0f      	ldr	r2, [pc, #60]	; (8008f84 <TIM_Base_SetConfig+0x130>)
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d103      	bne.n	8008f54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	691a      	ldr	r2, [r3, #16]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2201      	movs	r2, #1
 8008f58:	615a      	str	r2, [r3, #20]
}
 8008f5a:	bf00      	nop
 8008f5c:	3714      	adds	r7, #20
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f64:	4770      	bx	lr
 8008f66:	bf00      	nop
 8008f68:	40012c00 	.word	0x40012c00
 8008f6c:	40000400 	.word	0x40000400
 8008f70:	40000800 	.word	0x40000800
 8008f74:	40000c00 	.word	0x40000c00
 8008f78:	40013400 	.word	0x40013400
 8008f7c:	40014000 	.word	0x40014000
 8008f80:	40014400 	.word	0x40014400
 8008f84:	40014800 	.word	0x40014800

08008f88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b087      	sub	sp, #28
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
 8008f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6a1b      	ldr	r3, [r3, #32]
 8008f96:	f023 0201 	bic.w	r2, r3, #1
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6a1b      	ldr	r3, [r3, #32]
 8008fa2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	685b      	ldr	r3, [r3, #4]
 8008fa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	699b      	ldr	r3, [r3, #24]
 8008fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008fb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	f023 0303 	bic.w	r3, r3, #3
 8008fc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	68fa      	ldr	r2, [r7, #12]
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008fce:	697b      	ldr	r3, [r7, #20]
 8008fd0:	f023 0302 	bic.w	r3, r3, #2
 8008fd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	689b      	ldr	r3, [r3, #8]
 8008fda:	697a      	ldr	r2, [r7, #20]
 8008fdc:	4313      	orrs	r3, r2
 8008fde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	4a2c      	ldr	r2, [pc, #176]	; (8009094 <TIM_OC1_SetConfig+0x10c>)
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	d00f      	beq.n	8009008 <TIM_OC1_SetConfig+0x80>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	4a2b      	ldr	r2, [pc, #172]	; (8009098 <TIM_OC1_SetConfig+0x110>)
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d00b      	beq.n	8009008 <TIM_OC1_SetConfig+0x80>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	4a2a      	ldr	r2, [pc, #168]	; (800909c <TIM_OC1_SetConfig+0x114>)
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d007      	beq.n	8009008 <TIM_OC1_SetConfig+0x80>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	4a29      	ldr	r2, [pc, #164]	; (80090a0 <TIM_OC1_SetConfig+0x118>)
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	d003      	beq.n	8009008 <TIM_OC1_SetConfig+0x80>
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	4a28      	ldr	r2, [pc, #160]	; (80090a4 <TIM_OC1_SetConfig+0x11c>)
 8009004:	4293      	cmp	r3, r2
 8009006:	d10c      	bne.n	8009022 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009008:	697b      	ldr	r3, [r7, #20]
 800900a:	f023 0308 	bic.w	r3, r3, #8
 800900e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	68db      	ldr	r3, [r3, #12]
 8009014:	697a      	ldr	r2, [r7, #20]
 8009016:	4313      	orrs	r3, r2
 8009018:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800901a:	697b      	ldr	r3, [r7, #20]
 800901c:	f023 0304 	bic.w	r3, r3, #4
 8009020:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	4a1b      	ldr	r2, [pc, #108]	; (8009094 <TIM_OC1_SetConfig+0x10c>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d00f      	beq.n	800904a <TIM_OC1_SetConfig+0xc2>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	4a1a      	ldr	r2, [pc, #104]	; (8009098 <TIM_OC1_SetConfig+0x110>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d00b      	beq.n	800904a <TIM_OC1_SetConfig+0xc2>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	4a19      	ldr	r2, [pc, #100]	; (800909c <TIM_OC1_SetConfig+0x114>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d007      	beq.n	800904a <TIM_OC1_SetConfig+0xc2>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	4a18      	ldr	r2, [pc, #96]	; (80090a0 <TIM_OC1_SetConfig+0x118>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d003      	beq.n	800904a <TIM_OC1_SetConfig+0xc2>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	4a17      	ldr	r2, [pc, #92]	; (80090a4 <TIM_OC1_SetConfig+0x11c>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d111      	bne.n	800906e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800904a:	693b      	ldr	r3, [r7, #16]
 800904c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009050:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009052:	693b      	ldr	r3, [r7, #16]
 8009054:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009058:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	695b      	ldr	r3, [r3, #20]
 800905e:	693a      	ldr	r2, [r7, #16]
 8009060:	4313      	orrs	r3, r2
 8009062:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	699b      	ldr	r3, [r3, #24]
 8009068:	693a      	ldr	r2, [r7, #16]
 800906a:	4313      	orrs	r3, r2
 800906c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	693a      	ldr	r2, [r7, #16]
 8009072:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	68fa      	ldr	r2, [r7, #12]
 8009078:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	685a      	ldr	r2, [r3, #4]
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	697a      	ldr	r2, [r7, #20]
 8009086:	621a      	str	r2, [r3, #32]
}
 8009088:	bf00      	nop
 800908a:	371c      	adds	r7, #28
 800908c:	46bd      	mov	sp, r7
 800908e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009092:	4770      	bx	lr
 8009094:	40012c00 	.word	0x40012c00
 8009098:	40013400 	.word	0x40013400
 800909c:	40014000 	.word	0x40014000
 80090a0:	40014400 	.word	0x40014400
 80090a4:	40014800 	.word	0x40014800

080090a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80090a8:	b480      	push	{r7}
 80090aa:	b087      	sub	sp, #28
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
 80090b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6a1b      	ldr	r3, [r3, #32]
 80090b6:	f023 0210 	bic.w	r2, r3, #16
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6a1b      	ldr	r3, [r3, #32]
 80090c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	685b      	ldr	r3, [r3, #4]
 80090c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	699b      	ldr	r3, [r3, #24]
 80090ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80090d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80090e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	021b      	lsls	r3, r3, #8
 80090ea:	68fa      	ldr	r2, [r7, #12]
 80090ec:	4313      	orrs	r3, r2
 80090ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	f023 0320 	bic.w	r3, r3, #32
 80090f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	689b      	ldr	r3, [r3, #8]
 80090fc:	011b      	lsls	r3, r3, #4
 80090fe:	697a      	ldr	r2, [r7, #20]
 8009100:	4313      	orrs	r3, r2
 8009102:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	4a28      	ldr	r2, [pc, #160]	; (80091a8 <TIM_OC2_SetConfig+0x100>)
 8009108:	4293      	cmp	r3, r2
 800910a:	d003      	beq.n	8009114 <TIM_OC2_SetConfig+0x6c>
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	4a27      	ldr	r2, [pc, #156]	; (80091ac <TIM_OC2_SetConfig+0x104>)
 8009110:	4293      	cmp	r3, r2
 8009112:	d10d      	bne.n	8009130 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009114:	697b      	ldr	r3, [r7, #20]
 8009116:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800911a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	68db      	ldr	r3, [r3, #12]
 8009120:	011b      	lsls	r3, r3, #4
 8009122:	697a      	ldr	r2, [r7, #20]
 8009124:	4313      	orrs	r3, r2
 8009126:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009128:	697b      	ldr	r3, [r7, #20]
 800912a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800912e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	4a1d      	ldr	r2, [pc, #116]	; (80091a8 <TIM_OC2_SetConfig+0x100>)
 8009134:	4293      	cmp	r3, r2
 8009136:	d00f      	beq.n	8009158 <TIM_OC2_SetConfig+0xb0>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	4a1c      	ldr	r2, [pc, #112]	; (80091ac <TIM_OC2_SetConfig+0x104>)
 800913c:	4293      	cmp	r3, r2
 800913e:	d00b      	beq.n	8009158 <TIM_OC2_SetConfig+0xb0>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	4a1b      	ldr	r2, [pc, #108]	; (80091b0 <TIM_OC2_SetConfig+0x108>)
 8009144:	4293      	cmp	r3, r2
 8009146:	d007      	beq.n	8009158 <TIM_OC2_SetConfig+0xb0>
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	4a1a      	ldr	r2, [pc, #104]	; (80091b4 <TIM_OC2_SetConfig+0x10c>)
 800914c:	4293      	cmp	r3, r2
 800914e:	d003      	beq.n	8009158 <TIM_OC2_SetConfig+0xb0>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	4a19      	ldr	r2, [pc, #100]	; (80091b8 <TIM_OC2_SetConfig+0x110>)
 8009154:	4293      	cmp	r3, r2
 8009156:	d113      	bne.n	8009180 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009158:	693b      	ldr	r3, [r7, #16]
 800915a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800915e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009160:	693b      	ldr	r3, [r7, #16]
 8009162:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009166:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	695b      	ldr	r3, [r3, #20]
 800916c:	009b      	lsls	r3, r3, #2
 800916e:	693a      	ldr	r2, [r7, #16]
 8009170:	4313      	orrs	r3, r2
 8009172:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	699b      	ldr	r3, [r3, #24]
 8009178:	009b      	lsls	r3, r3, #2
 800917a:	693a      	ldr	r2, [r7, #16]
 800917c:	4313      	orrs	r3, r2
 800917e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	693a      	ldr	r2, [r7, #16]
 8009184:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	68fa      	ldr	r2, [r7, #12]
 800918a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	685a      	ldr	r2, [r3, #4]
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	697a      	ldr	r2, [r7, #20]
 8009198:	621a      	str	r2, [r3, #32]
}
 800919a:	bf00      	nop
 800919c:	371c      	adds	r7, #28
 800919e:	46bd      	mov	sp, r7
 80091a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a4:	4770      	bx	lr
 80091a6:	bf00      	nop
 80091a8:	40012c00 	.word	0x40012c00
 80091ac:	40013400 	.word	0x40013400
 80091b0:	40014000 	.word	0x40014000
 80091b4:	40014400 	.word	0x40014400
 80091b8:	40014800 	.word	0x40014800

080091bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80091bc:	b480      	push	{r7}
 80091be:	b087      	sub	sp, #28
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
 80091c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6a1b      	ldr	r3, [r3, #32]
 80091ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6a1b      	ldr	r3, [r3, #32]
 80091d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	685b      	ldr	r3, [r3, #4]
 80091dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	69db      	ldr	r3, [r3, #28]
 80091e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80091ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	f023 0303 	bic.w	r3, r3, #3
 80091f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	68fa      	ldr	r2, [r7, #12]
 80091fe:	4313      	orrs	r3, r2
 8009200:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009208:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	689b      	ldr	r3, [r3, #8]
 800920e:	021b      	lsls	r3, r3, #8
 8009210:	697a      	ldr	r2, [r7, #20]
 8009212:	4313      	orrs	r3, r2
 8009214:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	4a27      	ldr	r2, [pc, #156]	; (80092b8 <TIM_OC3_SetConfig+0xfc>)
 800921a:	4293      	cmp	r3, r2
 800921c:	d003      	beq.n	8009226 <TIM_OC3_SetConfig+0x6a>
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	4a26      	ldr	r2, [pc, #152]	; (80092bc <TIM_OC3_SetConfig+0x100>)
 8009222:	4293      	cmp	r3, r2
 8009224:	d10d      	bne.n	8009242 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009226:	697b      	ldr	r3, [r7, #20]
 8009228:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800922c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	68db      	ldr	r3, [r3, #12]
 8009232:	021b      	lsls	r3, r3, #8
 8009234:	697a      	ldr	r2, [r7, #20]
 8009236:	4313      	orrs	r3, r2
 8009238:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009240:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	4a1c      	ldr	r2, [pc, #112]	; (80092b8 <TIM_OC3_SetConfig+0xfc>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d00f      	beq.n	800926a <TIM_OC3_SetConfig+0xae>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	4a1b      	ldr	r2, [pc, #108]	; (80092bc <TIM_OC3_SetConfig+0x100>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d00b      	beq.n	800926a <TIM_OC3_SetConfig+0xae>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	4a1a      	ldr	r2, [pc, #104]	; (80092c0 <TIM_OC3_SetConfig+0x104>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d007      	beq.n	800926a <TIM_OC3_SetConfig+0xae>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	4a19      	ldr	r2, [pc, #100]	; (80092c4 <TIM_OC3_SetConfig+0x108>)
 800925e:	4293      	cmp	r3, r2
 8009260:	d003      	beq.n	800926a <TIM_OC3_SetConfig+0xae>
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	4a18      	ldr	r2, [pc, #96]	; (80092c8 <TIM_OC3_SetConfig+0x10c>)
 8009266:	4293      	cmp	r3, r2
 8009268:	d113      	bne.n	8009292 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800926a:	693b      	ldr	r3, [r7, #16]
 800926c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009270:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009278:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	695b      	ldr	r3, [r3, #20]
 800927e:	011b      	lsls	r3, r3, #4
 8009280:	693a      	ldr	r2, [r7, #16]
 8009282:	4313      	orrs	r3, r2
 8009284:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	699b      	ldr	r3, [r3, #24]
 800928a:	011b      	lsls	r3, r3, #4
 800928c:	693a      	ldr	r2, [r7, #16]
 800928e:	4313      	orrs	r3, r2
 8009290:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	693a      	ldr	r2, [r7, #16]
 8009296:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	68fa      	ldr	r2, [r7, #12]
 800929c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	685a      	ldr	r2, [r3, #4]
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	697a      	ldr	r2, [r7, #20]
 80092aa:	621a      	str	r2, [r3, #32]
}
 80092ac:	bf00      	nop
 80092ae:	371c      	adds	r7, #28
 80092b0:	46bd      	mov	sp, r7
 80092b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b6:	4770      	bx	lr
 80092b8:	40012c00 	.word	0x40012c00
 80092bc:	40013400 	.word	0x40013400
 80092c0:	40014000 	.word	0x40014000
 80092c4:	40014400 	.word	0x40014400
 80092c8:	40014800 	.word	0x40014800

080092cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80092cc:	b480      	push	{r7}
 80092ce:	b087      	sub	sp, #28
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
 80092d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6a1b      	ldr	r3, [r3, #32]
 80092da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6a1b      	ldr	r3, [r3, #32]
 80092e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	685b      	ldr	r3, [r3, #4]
 80092ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	69db      	ldr	r3, [r3, #28]
 80092f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80092fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009306:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	021b      	lsls	r3, r3, #8
 800930e:	68fa      	ldr	r2, [r7, #12]
 8009310:	4313      	orrs	r3, r2
 8009312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009314:	693b      	ldr	r3, [r7, #16]
 8009316:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800931a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	689b      	ldr	r3, [r3, #8]
 8009320:	031b      	lsls	r3, r3, #12
 8009322:	693a      	ldr	r2, [r7, #16]
 8009324:	4313      	orrs	r3, r2
 8009326:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	4a18      	ldr	r2, [pc, #96]	; (800938c <TIM_OC4_SetConfig+0xc0>)
 800932c:	4293      	cmp	r3, r2
 800932e:	d00f      	beq.n	8009350 <TIM_OC4_SetConfig+0x84>
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	4a17      	ldr	r2, [pc, #92]	; (8009390 <TIM_OC4_SetConfig+0xc4>)
 8009334:	4293      	cmp	r3, r2
 8009336:	d00b      	beq.n	8009350 <TIM_OC4_SetConfig+0x84>
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	4a16      	ldr	r2, [pc, #88]	; (8009394 <TIM_OC4_SetConfig+0xc8>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d007      	beq.n	8009350 <TIM_OC4_SetConfig+0x84>
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	4a15      	ldr	r2, [pc, #84]	; (8009398 <TIM_OC4_SetConfig+0xcc>)
 8009344:	4293      	cmp	r3, r2
 8009346:	d003      	beq.n	8009350 <TIM_OC4_SetConfig+0x84>
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	4a14      	ldr	r2, [pc, #80]	; (800939c <TIM_OC4_SetConfig+0xd0>)
 800934c:	4293      	cmp	r3, r2
 800934e:	d109      	bne.n	8009364 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009350:	697b      	ldr	r3, [r7, #20]
 8009352:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009356:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	695b      	ldr	r3, [r3, #20]
 800935c:	019b      	lsls	r3, r3, #6
 800935e:	697a      	ldr	r2, [r7, #20]
 8009360:	4313      	orrs	r3, r2
 8009362:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	697a      	ldr	r2, [r7, #20]
 8009368:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	68fa      	ldr	r2, [r7, #12]
 800936e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	685a      	ldr	r2, [r3, #4]
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	693a      	ldr	r2, [r7, #16]
 800937c:	621a      	str	r2, [r3, #32]
}
 800937e:	bf00      	nop
 8009380:	371c      	adds	r7, #28
 8009382:	46bd      	mov	sp, r7
 8009384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009388:	4770      	bx	lr
 800938a:	bf00      	nop
 800938c:	40012c00 	.word	0x40012c00
 8009390:	40013400 	.word	0x40013400
 8009394:	40014000 	.word	0x40014000
 8009398:	40014400 	.word	0x40014400
 800939c:	40014800 	.word	0x40014800

080093a0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80093a0:	b480      	push	{r7}
 80093a2:	b087      	sub	sp, #28
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
 80093a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6a1b      	ldr	r3, [r3, #32]
 80093ae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6a1b      	ldr	r3, [r3, #32]
 80093ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	685b      	ldr	r3, [r3, #4]
 80093c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80093ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	68fa      	ldr	r2, [r7, #12]
 80093da:	4313      	orrs	r3, r2
 80093dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80093de:	693b      	ldr	r3, [r7, #16]
 80093e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80093e4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	689b      	ldr	r3, [r3, #8]
 80093ea:	041b      	lsls	r3, r3, #16
 80093ec:	693a      	ldr	r2, [r7, #16]
 80093ee:	4313      	orrs	r3, r2
 80093f0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	4a17      	ldr	r2, [pc, #92]	; (8009454 <TIM_OC5_SetConfig+0xb4>)
 80093f6:	4293      	cmp	r3, r2
 80093f8:	d00f      	beq.n	800941a <TIM_OC5_SetConfig+0x7a>
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	4a16      	ldr	r2, [pc, #88]	; (8009458 <TIM_OC5_SetConfig+0xb8>)
 80093fe:	4293      	cmp	r3, r2
 8009400:	d00b      	beq.n	800941a <TIM_OC5_SetConfig+0x7a>
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	4a15      	ldr	r2, [pc, #84]	; (800945c <TIM_OC5_SetConfig+0xbc>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d007      	beq.n	800941a <TIM_OC5_SetConfig+0x7a>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	4a14      	ldr	r2, [pc, #80]	; (8009460 <TIM_OC5_SetConfig+0xc0>)
 800940e:	4293      	cmp	r3, r2
 8009410:	d003      	beq.n	800941a <TIM_OC5_SetConfig+0x7a>
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	4a13      	ldr	r2, [pc, #76]	; (8009464 <TIM_OC5_SetConfig+0xc4>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d109      	bne.n	800942e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009420:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	695b      	ldr	r3, [r3, #20]
 8009426:	021b      	lsls	r3, r3, #8
 8009428:	697a      	ldr	r2, [r7, #20]
 800942a:	4313      	orrs	r3, r2
 800942c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	697a      	ldr	r2, [r7, #20]
 8009432:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	68fa      	ldr	r2, [r7, #12]
 8009438:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	685a      	ldr	r2, [r3, #4]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	693a      	ldr	r2, [r7, #16]
 8009446:	621a      	str	r2, [r3, #32]
}
 8009448:	bf00      	nop
 800944a:	371c      	adds	r7, #28
 800944c:	46bd      	mov	sp, r7
 800944e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009452:	4770      	bx	lr
 8009454:	40012c00 	.word	0x40012c00
 8009458:	40013400 	.word	0x40013400
 800945c:	40014000 	.word	0x40014000
 8009460:	40014400 	.word	0x40014400
 8009464:	40014800 	.word	0x40014800

08009468 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009468:	b480      	push	{r7}
 800946a:	b087      	sub	sp, #28
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
 8009470:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6a1b      	ldr	r3, [r3, #32]
 8009476:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6a1b      	ldr	r3, [r3, #32]
 8009482:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	685b      	ldr	r3, [r3, #4]
 8009488:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800948e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009496:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800949a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	021b      	lsls	r3, r3, #8
 80094a2:	68fa      	ldr	r2, [r7, #12]
 80094a4:	4313      	orrs	r3, r2
 80094a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80094a8:	693b      	ldr	r3, [r7, #16]
 80094aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80094ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	689b      	ldr	r3, [r3, #8]
 80094b4:	051b      	lsls	r3, r3, #20
 80094b6:	693a      	ldr	r2, [r7, #16]
 80094b8:	4313      	orrs	r3, r2
 80094ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	4a18      	ldr	r2, [pc, #96]	; (8009520 <TIM_OC6_SetConfig+0xb8>)
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d00f      	beq.n	80094e4 <TIM_OC6_SetConfig+0x7c>
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	4a17      	ldr	r2, [pc, #92]	; (8009524 <TIM_OC6_SetConfig+0xbc>)
 80094c8:	4293      	cmp	r3, r2
 80094ca:	d00b      	beq.n	80094e4 <TIM_OC6_SetConfig+0x7c>
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	4a16      	ldr	r2, [pc, #88]	; (8009528 <TIM_OC6_SetConfig+0xc0>)
 80094d0:	4293      	cmp	r3, r2
 80094d2:	d007      	beq.n	80094e4 <TIM_OC6_SetConfig+0x7c>
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	4a15      	ldr	r2, [pc, #84]	; (800952c <TIM_OC6_SetConfig+0xc4>)
 80094d8:	4293      	cmp	r3, r2
 80094da:	d003      	beq.n	80094e4 <TIM_OC6_SetConfig+0x7c>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	4a14      	ldr	r2, [pc, #80]	; (8009530 <TIM_OC6_SetConfig+0xc8>)
 80094e0:	4293      	cmp	r3, r2
 80094e2:	d109      	bne.n	80094f8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80094e4:	697b      	ldr	r3, [r7, #20]
 80094e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80094ea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	695b      	ldr	r3, [r3, #20]
 80094f0:	029b      	lsls	r3, r3, #10
 80094f2:	697a      	ldr	r2, [r7, #20]
 80094f4:	4313      	orrs	r3, r2
 80094f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	697a      	ldr	r2, [r7, #20]
 80094fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	68fa      	ldr	r2, [r7, #12]
 8009502:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	685a      	ldr	r2, [r3, #4]
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	693a      	ldr	r2, [r7, #16]
 8009510:	621a      	str	r2, [r3, #32]
}
 8009512:	bf00      	nop
 8009514:	371c      	adds	r7, #28
 8009516:	46bd      	mov	sp, r7
 8009518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951c:	4770      	bx	lr
 800951e:	bf00      	nop
 8009520:	40012c00 	.word	0x40012c00
 8009524:	40013400 	.word	0x40013400
 8009528:	40014000 	.word	0x40014000
 800952c:	40014400 	.word	0x40014400
 8009530:	40014800 	.word	0x40014800

08009534 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b086      	sub	sp, #24
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
 800953c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800953e:	2300      	movs	r3, #0
 8009540:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	689b      	ldr	r3, [r3, #8]
 8009548:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800954a:	693b      	ldr	r3, [r7, #16]
 800954c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009550:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	685b      	ldr	r3, [r3, #4]
 8009556:	693a      	ldr	r2, [r7, #16]
 8009558:	4313      	orrs	r3, r2
 800955a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800955c:	693b      	ldr	r3, [r7, #16]
 800955e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009562:	f023 0307 	bic.w	r3, r3, #7
 8009566:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	693a      	ldr	r2, [r7, #16]
 800956e:	4313      	orrs	r3, r2
 8009570:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	693a      	ldr	r2, [r7, #16]
 8009578:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	685b      	ldr	r3, [r3, #4]
 800957e:	2b70      	cmp	r3, #112	; 0x70
 8009580:	d01a      	beq.n	80095b8 <TIM_SlaveTimer_SetConfig+0x84>
 8009582:	2b70      	cmp	r3, #112	; 0x70
 8009584:	d860      	bhi.n	8009648 <TIM_SlaveTimer_SetConfig+0x114>
 8009586:	2b60      	cmp	r3, #96	; 0x60
 8009588:	d054      	beq.n	8009634 <TIM_SlaveTimer_SetConfig+0x100>
 800958a:	2b60      	cmp	r3, #96	; 0x60
 800958c:	d85c      	bhi.n	8009648 <TIM_SlaveTimer_SetConfig+0x114>
 800958e:	2b50      	cmp	r3, #80	; 0x50
 8009590:	d046      	beq.n	8009620 <TIM_SlaveTimer_SetConfig+0xec>
 8009592:	2b50      	cmp	r3, #80	; 0x50
 8009594:	d858      	bhi.n	8009648 <TIM_SlaveTimer_SetConfig+0x114>
 8009596:	2b40      	cmp	r3, #64	; 0x40
 8009598:	d019      	beq.n	80095ce <TIM_SlaveTimer_SetConfig+0x9a>
 800959a:	2b40      	cmp	r3, #64	; 0x40
 800959c:	d854      	bhi.n	8009648 <TIM_SlaveTimer_SetConfig+0x114>
 800959e:	2b30      	cmp	r3, #48	; 0x30
 80095a0:	d055      	beq.n	800964e <TIM_SlaveTimer_SetConfig+0x11a>
 80095a2:	2b30      	cmp	r3, #48	; 0x30
 80095a4:	d850      	bhi.n	8009648 <TIM_SlaveTimer_SetConfig+0x114>
 80095a6:	2b20      	cmp	r3, #32
 80095a8:	d051      	beq.n	800964e <TIM_SlaveTimer_SetConfig+0x11a>
 80095aa:	2b20      	cmp	r3, #32
 80095ac:	d84c      	bhi.n	8009648 <TIM_SlaveTimer_SetConfig+0x114>
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d04d      	beq.n	800964e <TIM_SlaveTimer_SetConfig+0x11a>
 80095b2:	2b10      	cmp	r3, #16
 80095b4:	d04b      	beq.n	800964e <TIM_SlaveTimer_SetConfig+0x11a>
 80095b6:	e047      	b.n	8009648 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6818      	ldr	r0, [r3, #0]
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	68d9      	ldr	r1, [r3, #12]
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	689a      	ldr	r2, [r3, #8]
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	691b      	ldr	r3, [r3, #16]
 80095c8:	f000 f9e6 	bl	8009998 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 80095cc:	e040      	b.n	8009650 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	2b05      	cmp	r3, #5
 80095d4:	d101      	bne.n	80095da <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 80095d6:	2301      	movs	r3, #1
 80095d8:	e03b      	b.n	8009652 <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	6a1b      	ldr	r3, [r3, #32]
 80095e0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	6a1a      	ldr	r2, [r3, #32]
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	f022 0201 	bic.w	r2, r2, #1
 80095f0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	699b      	ldr	r3, [r3, #24]
 80095f8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009600:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	691b      	ldr	r3, [r3, #16]
 8009606:	011b      	lsls	r3, r3, #4
 8009608:	68ba      	ldr	r2, [r7, #8]
 800960a:	4313      	orrs	r3, r2
 800960c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	68ba      	ldr	r2, [r7, #8]
 8009614:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	68fa      	ldr	r2, [r7, #12]
 800961c:	621a      	str	r2, [r3, #32]
      break;
 800961e:	e017      	b.n	8009650 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6818      	ldr	r0, [r3, #0]
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	6899      	ldr	r1, [r3, #8]
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	691b      	ldr	r3, [r3, #16]
 800962c:	461a      	mov	r2, r3
 800962e:	f000 f883 	bl	8009738 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8009632:	e00d      	b.n	8009650 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6818      	ldr	r0, [r3, #0]
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	6899      	ldr	r1, [r3, #8]
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	691b      	ldr	r3, [r3, #16]
 8009640:	461a      	mov	r2, r3
 8009642:	f000 f8e5 	bl	8009810 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8009646:	e003      	b.n	8009650 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8009648:	2301      	movs	r3, #1
 800964a:	75fb      	strb	r3, [r7, #23]
      break;
 800964c:	e000      	b.n	8009650 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 800964e:	bf00      	nop
  }

  return status;
 8009650:	7dfb      	ldrb	r3, [r7, #23]
}
 8009652:	4618      	mov	r0, r3
 8009654:	3718      	adds	r7, #24
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}
	...

0800965c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800965c:	b480      	push	{r7}
 800965e:	b087      	sub	sp, #28
 8009660:	af00      	add	r7, sp, #0
 8009662:	60f8      	str	r0, [r7, #12]
 8009664:	60b9      	str	r1, [r7, #8]
 8009666:	607a      	str	r2, [r7, #4]
 8009668:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	6a1b      	ldr	r3, [r3, #32]
 800966e:	f023 0201 	bic.w	r2, r3, #1
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	699b      	ldr	r3, [r3, #24]
 800967a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	6a1b      	ldr	r3, [r3, #32]
 8009680:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	4a26      	ldr	r2, [pc, #152]	; (8009720 <TIM_TI1_SetConfig+0xc4>)
 8009686:	4293      	cmp	r3, r2
 8009688:	d017      	beq.n	80096ba <TIM_TI1_SetConfig+0x5e>
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009690:	d013      	beq.n	80096ba <TIM_TI1_SetConfig+0x5e>
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	4a23      	ldr	r2, [pc, #140]	; (8009724 <TIM_TI1_SetConfig+0xc8>)
 8009696:	4293      	cmp	r3, r2
 8009698:	d00f      	beq.n	80096ba <TIM_TI1_SetConfig+0x5e>
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	4a22      	ldr	r2, [pc, #136]	; (8009728 <TIM_TI1_SetConfig+0xcc>)
 800969e:	4293      	cmp	r3, r2
 80096a0:	d00b      	beq.n	80096ba <TIM_TI1_SetConfig+0x5e>
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	4a21      	ldr	r2, [pc, #132]	; (800972c <TIM_TI1_SetConfig+0xd0>)
 80096a6:	4293      	cmp	r3, r2
 80096a8:	d007      	beq.n	80096ba <TIM_TI1_SetConfig+0x5e>
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	4a20      	ldr	r2, [pc, #128]	; (8009730 <TIM_TI1_SetConfig+0xd4>)
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d003      	beq.n	80096ba <TIM_TI1_SetConfig+0x5e>
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	4a1f      	ldr	r2, [pc, #124]	; (8009734 <TIM_TI1_SetConfig+0xd8>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d101      	bne.n	80096be <TIM_TI1_SetConfig+0x62>
 80096ba:	2301      	movs	r3, #1
 80096bc:	e000      	b.n	80096c0 <TIM_TI1_SetConfig+0x64>
 80096be:	2300      	movs	r3, #0
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d008      	beq.n	80096d6 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	f023 0303 	bic.w	r3, r3, #3
 80096ca:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80096cc:	697a      	ldr	r2, [r7, #20]
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	4313      	orrs	r3, r2
 80096d2:	617b      	str	r3, [r7, #20]
 80096d4:	e003      	b.n	80096de <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80096d6:	697b      	ldr	r3, [r7, #20]
 80096d8:	f043 0301 	orr.w	r3, r3, #1
 80096dc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80096de:	697b      	ldr	r3, [r7, #20]
 80096e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80096e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	011b      	lsls	r3, r3, #4
 80096ea:	b2db      	uxtb	r3, r3
 80096ec:	697a      	ldr	r2, [r7, #20]
 80096ee:	4313      	orrs	r3, r2
 80096f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80096f2:	693b      	ldr	r3, [r7, #16]
 80096f4:	f023 030a 	bic.w	r3, r3, #10
 80096f8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	f003 030a 	and.w	r3, r3, #10
 8009700:	693a      	ldr	r2, [r7, #16]
 8009702:	4313      	orrs	r3, r2
 8009704:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	697a      	ldr	r2, [r7, #20]
 800970a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	693a      	ldr	r2, [r7, #16]
 8009710:	621a      	str	r2, [r3, #32]
}
 8009712:	bf00      	nop
 8009714:	371c      	adds	r7, #28
 8009716:	46bd      	mov	sp, r7
 8009718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971c:	4770      	bx	lr
 800971e:	bf00      	nop
 8009720:	40012c00 	.word	0x40012c00
 8009724:	40000400 	.word	0x40000400
 8009728:	40000800 	.word	0x40000800
 800972c:	40000c00 	.word	0x40000c00
 8009730:	40013400 	.word	0x40013400
 8009734:	40014000 	.word	0x40014000

08009738 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009738:	b480      	push	{r7}
 800973a:	b087      	sub	sp, #28
 800973c:	af00      	add	r7, sp, #0
 800973e:	60f8      	str	r0, [r7, #12]
 8009740:	60b9      	str	r1, [r7, #8]
 8009742:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	6a1b      	ldr	r3, [r3, #32]
 8009748:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	6a1b      	ldr	r3, [r3, #32]
 800974e:	f023 0201 	bic.w	r2, r3, #1
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	699b      	ldr	r3, [r3, #24]
 800975a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800975c:	693b      	ldr	r3, [r7, #16]
 800975e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009762:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	011b      	lsls	r3, r3, #4
 8009768:	693a      	ldr	r2, [r7, #16]
 800976a:	4313      	orrs	r3, r2
 800976c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800976e:	697b      	ldr	r3, [r7, #20]
 8009770:	f023 030a 	bic.w	r3, r3, #10
 8009774:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009776:	697a      	ldr	r2, [r7, #20]
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	4313      	orrs	r3, r2
 800977c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	693a      	ldr	r2, [r7, #16]
 8009782:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	697a      	ldr	r2, [r7, #20]
 8009788:	621a      	str	r2, [r3, #32]
}
 800978a:	bf00      	nop
 800978c:	371c      	adds	r7, #28
 800978e:	46bd      	mov	sp, r7
 8009790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009794:	4770      	bx	lr

08009796 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009796:	b480      	push	{r7}
 8009798:	b087      	sub	sp, #28
 800979a:	af00      	add	r7, sp, #0
 800979c:	60f8      	str	r0, [r7, #12]
 800979e:	60b9      	str	r1, [r7, #8]
 80097a0:	607a      	str	r2, [r7, #4]
 80097a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	6a1b      	ldr	r3, [r3, #32]
 80097a8:	f023 0210 	bic.w	r2, r3, #16
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	699b      	ldr	r3, [r3, #24]
 80097b4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	6a1b      	ldr	r3, [r3, #32]
 80097ba:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80097bc:	697b      	ldr	r3, [r7, #20]
 80097be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80097c2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	021b      	lsls	r3, r3, #8
 80097c8:	697a      	ldr	r2, [r7, #20]
 80097ca:	4313      	orrs	r3, r2
 80097cc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80097ce:	697b      	ldr	r3, [r7, #20]
 80097d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80097d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	031b      	lsls	r3, r3, #12
 80097da:	b29b      	uxth	r3, r3
 80097dc:	697a      	ldr	r2, [r7, #20]
 80097de:	4313      	orrs	r3, r2
 80097e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80097e2:	693b      	ldr	r3, [r7, #16]
 80097e4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80097e8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	011b      	lsls	r3, r3, #4
 80097ee:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80097f2:	693a      	ldr	r2, [r7, #16]
 80097f4:	4313      	orrs	r3, r2
 80097f6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	697a      	ldr	r2, [r7, #20]
 80097fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	693a      	ldr	r2, [r7, #16]
 8009802:	621a      	str	r2, [r3, #32]
}
 8009804:	bf00      	nop
 8009806:	371c      	adds	r7, #28
 8009808:	46bd      	mov	sp, r7
 800980a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980e:	4770      	bx	lr

08009810 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009810:	b480      	push	{r7}
 8009812:	b087      	sub	sp, #28
 8009814:	af00      	add	r7, sp, #0
 8009816:	60f8      	str	r0, [r7, #12]
 8009818:	60b9      	str	r1, [r7, #8]
 800981a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	6a1b      	ldr	r3, [r3, #32]
 8009820:	f023 0210 	bic.w	r2, r3, #16
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	699b      	ldr	r3, [r3, #24]
 800982c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	6a1b      	ldr	r3, [r3, #32]
 8009832:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009834:	697b      	ldr	r3, [r7, #20]
 8009836:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800983a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	031b      	lsls	r3, r3, #12
 8009840:	697a      	ldr	r2, [r7, #20]
 8009842:	4313      	orrs	r3, r2
 8009844:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800984c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	011b      	lsls	r3, r3, #4
 8009852:	693a      	ldr	r2, [r7, #16]
 8009854:	4313      	orrs	r3, r2
 8009856:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	697a      	ldr	r2, [r7, #20]
 800985c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	693a      	ldr	r2, [r7, #16]
 8009862:	621a      	str	r2, [r3, #32]
}
 8009864:	bf00      	nop
 8009866:	371c      	adds	r7, #28
 8009868:	46bd      	mov	sp, r7
 800986a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986e:	4770      	bx	lr

08009870 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009870:	b480      	push	{r7}
 8009872:	b087      	sub	sp, #28
 8009874:	af00      	add	r7, sp, #0
 8009876:	60f8      	str	r0, [r7, #12]
 8009878:	60b9      	str	r1, [r7, #8]
 800987a:	607a      	str	r2, [r7, #4]
 800987c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	6a1b      	ldr	r3, [r3, #32]
 8009882:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	69db      	ldr	r3, [r3, #28]
 800988e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	6a1b      	ldr	r3, [r3, #32]
 8009894:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009896:	697b      	ldr	r3, [r7, #20]
 8009898:	f023 0303 	bic.w	r3, r3, #3
 800989c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800989e:	697a      	ldr	r2, [r7, #20]
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	4313      	orrs	r3, r2
 80098a4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80098ac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	011b      	lsls	r3, r3, #4
 80098b2:	b2db      	uxtb	r3, r3
 80098b4:	697a      	ldr	r2, [r7, #20]
 80098b6:	4313      	orrs	r3, r2
 80098b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80098ba:	693b      	ldr	r3, [r7, #16]
 80098bc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80098c0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	021b      	lsls	r3, r3, #8
 80098c6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80098ca:	693a      	ldr	r2, [r7, #16]
 80098cc:	4313      	orrs	r3, r2
 80098ce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	697a      	ldr	r2, [r7, #20]
 80098d4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	693a      	ldr	r2, [r7, #16]
 80098da:	621a      	str	r2, [r3, #32]
}
 80098dc:	bf00      	nop
 80098de:	371c      	adds	r7, #28
 80098e0:	46bd      	mov	sp, r7
 80098e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e6:	4770      	bx	lr

080098e8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b087      	sub	sp, #28
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	60f8      	str	r0, [r7, #12]
 80098f0:	60b9      	str	r1, [r7, #8]
 80098f2:	607a      	str	r2, [r7, #4]
 80098f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	6a1b      	ldr	r3, [r3, #32]
 80098fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	69db      	ldr	r3, [r3, #28]
 8009906:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	6a1b      	ldr	r3, [r3, #32]
 800990c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009914:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	021b      	lsls	r3, r3, #8
 800991a:	697a      	ldr	r2, [r7, #20]
 800991c:	4313      	orrs	r3, r2
 800991e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009920:	697b      	ldr	r3, [r7, #20]
 8009922:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009926:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	031b      	lsls	r3, r3, #12
 800992c:	b29b      	uxth	r3, r3
 800992e:	697a      	ldr	r2, [r7, #20]
 8009930:	4313      	orrs	r3, r2
 8009932:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009934:	693b      	ldr	r3, [r7, #16]
 8009936:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800993a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	031b      	lsls	r3, r3, #12
 8009940:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8009944:	693a      	ldr	r2, [r7, #16]
 8009946:	4313      	orrs	r3, r2
 8009948:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	697a      	ldr	r2, [r7, #20]
 800994e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	693a      	ldr	r2, [r7, #16]
 8009954:	621a      	str	r2, [r3, #32]
}
 8009956:	bf00      	nop
 8009958:	371c      	adds	r7, #28
 800995a:	46bd      	mov	sp, r7
 800995c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009960:	4770      	bx	lr

08009962 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009962:	b480      	push	{r7}
 8009964:	b085      	sub	sp, #20
 8009966:	af00      	add	r7, sp, #0
 8009968:	6078      	str	r0, [r7, #4]
 800996a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	689b      	ldr	r3, [r3, #8]
 8009970:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009978:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800997a:	683a      	ldr	r2, [r7, #0]
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	4313      	orrs	r3, r2
 8009980:	f043 0307 	orr.w	r3, r3, #7
 8009984:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	68fa      	ldr	r2, [r7, #12]
 800998a:	609a      	str	r2, [r3, #8]
}
 800998c:	bf00      	nop
 800998e:	3714      	adds	r7, #20
 8009990:	46bd      	mov	sp, r7
 8009992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009996:	4770      	bx	lr

08009998 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009998:	b480      	push	{r7}
 800999a:	b087      	sub	sp, #28
 800999c:	af00      	add	r7, sp, #0
 800999e:	60f8      	str	r0, [r7, #12]
 80099a0:	60b9      	str	r1, [r7, #8]
 80099a2:	607a      	str	r2, [r7, #4]
 80099a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	689b      	ldr	r3, [r3, #8]
 80099aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80099ac:	697b      	ldr	r3, [r7, #20]
 80099ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80099b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	021a      	lsls	r2, r3, #8
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	431a      	orrs	r2, r3
 80099bc:	68bb      	ldr	r3, [r7, #8]
 80099be:	4313      	orrs	r3, r2
 80099c0:	697a      	ldr	r2, [r7, #20]
 80099c2:	4313      	orrs	r3, r2
 80099c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	697a      	ldr	r2, [r7, #20]
 80099ca:	609a      	str	r2, [r3, #8]
}
 80099cc:	bf00      	nop
 80099ce:	371c      	adds	r7, #28
 80099d0:	46bd      	mov	sp, r7
 80099d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d6:	4770      	bx	lr

080099d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80099d8:	b480      	push	{r7}
 80099da:	b087      	sub	sp, #28
 80099dc:	af00      	add	r7, sp, #0
 80099de:	60f8      	str	r0, [r7, #12]
 80099e0:	60b9      	str	r1, [r7, #8]
 80099e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	f003 031f 	and.w	r3, r3, #31
 80099ea:	2201      	movs	r2, #1
 80099ec:	fa02 f303 	lsl.w	r3, r2, r3
 80099f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	6a1a      	ldr	r2, [r3, #32]
 80099f6:	697b      	ldr	r3, [r7, #20]
 80099f8:	43db      	mvns	r3, r3
 80099fa:	401a      	ands	r2, r3
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	6a1a      	ldr	r2, [r3, #32]
 8009a04:	68bb      	ldr	r3, [r7, #8]
 8009a06:	f003 031f 	and.w	r3, r3, #31
 8009a0a:	6879      	ldr	r1, [r7, #4]
 8009a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8009a10:	431a      	orrs	r2, r3
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	621a      	str	r2, [r3, #32]
}
 8009a16:	bf00      	nop
 8009a18:	371c      	adds	r7, #28
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a20:	4770      	bx	lr
	...

08009a24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009a24:	b480      	push	{r7}
 8009a26:	b085      	sub	sp, #20
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
 8009a2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a34:	2b01      	cmp	r3, #1
 8009a36:	d101      	bne.n	8009a3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009a38:	2302      	movs	r3, #2
 8009a3a:	e068      	b.n	8009b0e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2201      	movs	r2, #1
 8009a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2202      	movs	r2, #2
 8009a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	685b      	ldr	r3, [r3, #4]
 8009a52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	689b      	ldr	r3, [r3, #8]
 8009a5a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	4a2e      	ldr	r2, [pc, #184]	; (8009b1c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009a62:	4293      	cmp	r3, r2
 8009a64:	d004      	beq.n	8009a70 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	4a2d      	ldr	r2, [pc, #180]	; (8009b20 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009a6c:	4293      	cmp	r3, r2
 8009a6e:	d108      	bne.n	8009a82 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009a76:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	685b      	ldr	r3, [r3, #4]
 8009a7c:	68fa      	ldr	r2, [r7, #12]
 8009a7e:	4313      	orrs	r3, r2
 8009a80:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a88:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	68fa      	ldr	r2, [r7, #12]
 8009a90:	4313      	orrs	r3, r2
 8009a92:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	68fa      	ldr	r2, [r7, #12]
 8009a9a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	4a1e      	ldr	r2, [pc, #120]	; (8009b1c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009aa2:	4293      	cmp	r3, r2
 8009aa4:	d01d      	beq.n	8009ae2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009aae:	d018      	beq.n	8009ae2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	4a1b      	ldr	r2, [pc, #108]	; (8009b24 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	d013      	beq.n	8009ae2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	4a1a      	ldr	r2, [pc, #104]	; (8009b28 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009ac0:	4293      	cmp	r3, r2
 8009ac2:	d00e      	beq.n	8009ae2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	4a18      	ldr	r2, [pc, #96]	; (8009b2c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009aca:	4293      	cmp	r3, r2
 8009acc:	d009      	beq.n	8009ae2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	4a13      	ldr	r2, [pc, #76]	; (8009b20 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009ad4:	4293      	cmp	r3, r2
 8009ad6:	d004      	beq.n	8009ae2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	4a14      	ldr	r2, [pc, #80]	; (8009b30 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d10c      	bne.n	8009afc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009ae2:	68bb      	ldr	r3, [r7, #8]
 8009ae4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ae8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	689b      	ldr	r3, [r3, #8]
 8009aee:	68ba      	ldr	r2, [r7, #8]
 8009af0:	4313      	orrs	r3, r2
 8009af2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	68ba      	ldr	r2, [r7, #8]
 8009afa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2201      	movs	r2, #1
 8009b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2200      	movs	r2, #0
 8009b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009b0c:	2300      	movs	r3, #0
}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	3714      	adds	r7, #20
 8009b12:	46bd      	mov	sp, r7
 8009b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b18:	4770      	bx	lr
 8009b1a:	bf00      	nop
 8009b1c:	40012c00 	.word	0x40012c00
 8009b20:	40013400 	.word	0x40013400
 8009b24:	40000400 	.word	0x40000400
 8009b28:	40000800 	.word	0x40000800
 8009b2c:	40000c00 	.word	0x40000c00
 8009b30:	40014000 	.word	0x40014000

08009b34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009b34:	b480      	push	{r7}
 8009b36:	b083      	sub	sp, #12
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009b3c:	bf00      	nop
 8009b3e:	370c      	adds	r7, #12
 8009b40:	46bd      	mov	sp, r7
 8009b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b46:	4770      	bx	lr

08009b48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009b48:	b480      	push	{r7}
 8009b4a:	b083      	sub	sp, #12
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009b50:	bf00      	nop
 8009b52:	370c      	adds	r7, #12
 8009b54:	46bd      	mov	sp, r7
 8009b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5a:	4770      	bx	lr

08009b5c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	b083      	sub	sp, #12
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009b64:	bf00      	nop
 8009b66:	370c      	adds	r7, #12
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6e:	4770      	bx	lr

08009b70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b082      	sub	sp, #8
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d101      	bne.n	8009b82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009b7e:	2301      	movs	r3, #1
 8009b80:	e040      	b.n	8009c04 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d106      	bne.n	8009b98 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f7f9 fc22 	bl	80033dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2224      	movs	r2, #36	; 0x24
 8009b9c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	681a      	ldr	r2, [r3, #0]
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	f022 0201 	bic.w	r2, r2, #1
 8009bac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	f000 f8c0 	bl	8009d34 <UART_SetConfig>
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	2b01      	cmp	r3, #1
 8009bb8:	d101      	bne.n	8009bbe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009bba:	2301      	movs	r3, #1
 8009bbc:	e022      	b.n	8009c04 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d002      	beq.n	8009bcc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f000 fb3e 	bl	800a248 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	685a      	ldr	r2, [r3, #4]
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009bda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	689a      	ldr	r2, [r3, #8]
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009bea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	681a      	ldr	r2, [r3, #0]
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f042 0201 	orr.w	r2, r2, #1
 8009bfa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f000 fbc5 	bl	800a38c <UART_CheckIdleState>
 8009c02:	4603      	mov	r3, r0
}
 8009c04:	4618      	mov	r0, r3
 8009c06:	3708      	adds	r7, #8
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bd80      	pop	{r7, pc}

08009c0c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b08a      	sub	sp, #40	; 0x28
 8009c10:	af02      	add	r7, sp, #8
 8009c12:	60f8      	str	r0, [r7, #12]
 8009c14:	60b9      	str	r1, [r7, #8]
 8009c16:	603b      	str	r3, [r7, #0]
 8009c18:	4613      	mov	r3, r2
 8009c1a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c20:	2b20      	cmp	r3, #32
 8009c22:	f040 8082 	bne.w	8009d2a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c26:	68bb      	ldr	r3, [r7, #8]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d002      	beq.n	8009c32 <HAL_UART_Transmit+0x26>
 8009c2c:	88fb      	ldrh	r3, [r7, #6]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d101      	bne.n	8009c36 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009c32:	2301      	movs	r3, #1
 8009c34:	e07a      	b.n	8009d2c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009c3c:	2b01      	cmp	r3, #1
 8009c3e:	d101      	bne.n	8009c44 <HAL_UART_Transmit+0x38>
 8009c40:	2302      	movs	r3, #2
 8009c42:	e073      	b.n	8009d2c <HAL_UART_Transmit+0x120>
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	2201      	movs	r2, #1
 8009c48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	2200      	movs	r2, #0
 8009c50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	2221      	movs	r2, #33	; 0x21
 8009c58:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009c5a:	f7f9 fde7 	bl	800382c <HAL_GetTick>
 8009c5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	88fa      	ldrh	r2, [r7, #6]
 8009c64:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	88fa      	ldrh	r2, [r7, #6]
 8009c6c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	689b      	ldr	r3, [r3, #8]
 8009c74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c78:	d108      	bne.n	8009c8c <HAL_UART_Transmit+0x80>
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	691b      	ldr	r3, [r3, #16]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d104      	bne.n	8009c8c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8009c82:	2300      	movs	r3, #0
 8009c84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	61bb      	str	r3, [r7, #24]
 8009c8a:	e003      	b.n	8009c94 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009c90:	2300      	movs	r3, #0
 8009c92:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	2200      	movs	r2, #0
 8009c98:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8009c9c:	e02d      	b.n	8009cfa <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	9300      	str	r3, [sp, #0]
 8009ca2:	697b      	ldr	r3, [r7, #20]
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	2180      	movs	r1, #128	; 0x80
 8009ca8:	68f8      	ldr	r0, [r7, #12]
 8009caa:	f000 fbb8 	bl	800a41e <UART_WaitOnFlagUntilTimeout>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d001      	beq.n	8009cb8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8009cb4:	2303      	movs	r3, #3
 8009cb6:	e039      	b.n	8009d2c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8009cb8:	69fb      	ldr	r3, [r7, #28]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d10b      	bne.n	8009cd6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009cbe:	69bb      	ldr	r3, [r7, #24]
 8009cc0:	881a      	ldrh	r2, [r3, #0]
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009cca:	b292      	uxth	r2, r2
 8009ccc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009cce:	69bb      	ldr	r3, [r7, #24]
 8009cd0:	3302      	adds	r3, #2
 8009cd2:	61bb      	str	r3, [r7, #24]
 8009cd4:	e008      	b.n	8009ce8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009cd6:	69fb      	ldr	r3, [r7, #28]
 8009cd8:	781a      	ldrb	r2, [r3, #0]
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	b292      	uxth	r2, r2
 8009ce0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009ce2:	69fb      	ldr	r3, [r7, #28]
 8009ce4:	3301      	adds	r3, #1
 8009ce6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009cee:	b29b      	uxth	r3, r3
 8009cf0:	3b01      	subs	r3, #1
 8009cf2:	b29a      	uxth	r2, r3
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009d00:	b29b      	uxth	r3, r3
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d1cb      	bne.n	8009c9e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	9300      	str	r3, [sp, #0]
 8009d0a:	697b      	ldr	r3, [r7, #20]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	2140      	movs	r1, #64	; 0x40
 8009d10:	68f8      	ldr	r0, [r7, #12]
 8009d12:	f000 fb84 	bl	800a41e <UART_WaitOnFlagUntilTimeout>
 8009d16:	4603      	mov	r3, r0
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d001      	beq.n	8009d20 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8009d1c:	2303      	movs	r3, #3
 8009d1e:	e005      	b.n	8009d2c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	2220      	movs	r2, #32
 8009d24:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8009d26:	2300      	movs	r3, #0
 8009d28:	e000      	b.n	8009d2c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8009d2a:	2302      	movs	r3, #2
  }
}
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	3720      	adds	r7, #32
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}

08009d34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009d34:	b5b0      	push	{r4, r5, r7, lr}
 8009d36:	b088      	sub	sp, #32
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	689a      	ldr	r2, [r3, #8]
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	691b      	ldr	r3, [r3, #16]
 8009d48:	431a      	orrs	r2, r3
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	695b      	ldr	r3, [r3, #20]
 8009d4e:	431a      	orrs	r2, r3
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	69db      	ldr	r3, [r3, #28]
 8009d54:	4313      	orrs	r3, r2
 8009d56:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	681a      	ldr	r2, [r3, #0]
 8009d5e:	4bad      	ldr	r3, [pc, #692]	; (800a014 <UART_SetConfig+0x2e0>)
 8009d60:	4013      	ands	r3, r2
 8009d62:	687a      	ldr	r2, [r7, #4]
 8009d64:	6812      	ldr	r2, [r2, #0]
 8009d66:	69f9      	ldr	r1, [r7, #28]
 8009d68:	430b      	orrs	r3, r1
 8009d6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	685b      	ldr	r3, [r3, #4]
 8009d72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	68da      	ldr	r2, [r3, #12]
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	430a      	orrs	r2, r1
 8009d80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	699b      	ldr	r3, [r3, #24]
 8009d86:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	4aa2      	ldr	r2, [pc, #648]	; (800a018 <UART_SetConfig+0x2e4>)
 8009d8e:	4293      	cmp	r3, r2
 8009d90:	d004      	beq.n	8009d9c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	6a1b      	ldr	r3, [r3, #32]
 8009d96:	69fa      	ldr	r2, [r7, #28]
 8009d98:	4313      	orrs	r3, r2
 8009d9a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	689b      	ldr	r3, [r3, #8]
 8009da2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	69fa      	ldr	r2, [r7, #28]
 8009dac:	430a      	orrs	r2, r1
 8009dae:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	4a99      	ldr	r2, [pc, #612]	; (800a01c <UART_SetConfig+0x2e8>)
 8009db6:	4293      	cmp	r3, r2
 8009db8:	d121      	bne.n	8009dfe <UART_SetConfig+0xca>
 8009dba:	4b99      	ldr	r3, [pc, #612]	; (800a020 <UART_SetConfig+0x2ec>)
 8009dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dc0:	f003 0303 	and.w	r3, r3, #3
 8009dc4:	2b03      	cmp	r3, #3
 8009dc6:	d817      	bhi.n	8009df8 <UART_SetConfig+0xc4>
 8009dc8:	a201      	add	r2, pc, #4	; (adr r2, 8009dd0 <UART_SetConfig+0x9c>)
 8009dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dce:	bf00      	nop
 8009dd0:	08009de1 	.word	0x08009de1
 8009dd4:	08009ded 	.word	0x08009ded
 8009dd8:	08009de7 	.word	0x08009de7
 8009ddc:	08009df3 	.word	0x08009df3
 8009de0:	2301      	movs	r3, #1
 8009de2:	76fb      	strb	r3, [r7, #27]
 8009de4:	e0e7      	b.n	8009fb6 <UART_SetConfig+0x282>
 8009de6:	2302      	movs	r3, #2
 8009de8:	76fb      	strb	r3, [r7, #27]
 8009dea:	e0e4      	b.n	8009fb6 <UART_SetConfig+0x282>
 8009dec:	2304      	movs	r3, #4
 8009dee:	76fb      	strb	r3, [r7, #27]
 8009df0:	e0e1      	b.n	8009fb6 <UART_SetConfig+0x282>
 8009df2:	2308      	movs	r3, #8
 8009df4:	76fb      	strb	r3, [r7, #27]
 8009df6:	e0de      	b.n	8009fb6 <UART_SetConfig+0x282>
 8009df8:	2310      	movs	r3, #16
 8009dfa:	76fb      	strb	r3, [r7, #27]
 8009dfc:	e0db      	b.n	8009fb6 <UART_SetConfig+0x282>
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	4a88      	ldr	r2, [pc, #544]	; (800a024 <UART_SetConfig+0x2f0>)
 8009e04:	4293      	cmp	r3, r2
 8009e06:	d132      	bne.n	8009e6e <UART_SetConfig+0x13a>
 8009e08:	4b85      	ldr	r3, [pc, #532]	; (800a020 <UART_SetConfig+0x2ec>)
 8009e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e0e:	f003 030c 	and.w	r3, r3, #12
 8009e12:	2b0c      	cmp	r3, #12
 8009e14:	d828      	bhi.n	8009e68 <UART_SetConfig+0x134>
 8009e16:	a201      	add	r2, pc, #4	; (adr r2, 8009e1c <UART_SetConfig+0xe8>)
 8009e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e1c:	08009e51 	.word	0x08009e51
 8009e20:	08009e69 	.word	0x08009e69
 8009e24:	08009e69 	.word	0x08009e69
 8009e28:	08009e69 	.word	0x08009e69
 8009e2c:	08009e5d 	.word	0x08009e5d
 8009e30:	08009e69 	.word	0x08009e69
 8009e34:	08009e69 	.word	0x08009e69
 8009e38:	08009e69 	.word	0x08009e69
 8009e3c:	08009e57 	.word	0x08009e57
 8009e40:	08009e69 	.word	0x08009e69
 8009e44:	08009e69 	.word	0x08009e69
 8009e48:	08009e69 	.word	0x08009e69
 8009e4c:	08009e63 	.word	0x08009e63
 8009e50:	2300      	movs	r3, #0
 8009e52:	76fb      	strb	r3, [r7, #27]
 8009e54:	e0af      	b.n	8009fb6 <UART_SetConfig+0x282>
 8009e56:	2302      	movs	r3, #2
 8009e58:	76fb      	strb	r3, [r7, #27]
 8009e5a:	e0ac      	b.n	8009fb6 <UART_SetConfig+0x282>
 8009e5c:	2304      	movs	r3, #4
 8009e5e:	76fb      	strb	r3, [r7, #27]
 8009e60:	e0a9      	b.n	8009fb6 <UART_SetConfig+0x282>
 8009e62:	2308      	movs	r3, #8
 8009e64:	76fb      	strb	r3, [r7, #27]
 8009e66:	e0a6      	b.n	8009fb6 <UART_SetConfig+0x282>
 8009e68:	2310      	movs	r3, #16
 8009e6a:	76fb      	strb	r3, [r7, #27]
 8009e6c:	e0a3      	b.n	8009fb6 <UART_SetConfig+0x282>
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	4a6d      	ldr	r2, [pc, #436]	; (800a028 <UART_SetConfig+0x2f4>)
 8009e74:	4293      	cmp	r3, r2
 8009e76:	d120      	bne.n	8009eba <UART_SetConfig+0x186>
 8009e78:	4b69      	ldr	r3, [pc, #420]	; (800a020 <UART_SetConfig+0x2ec>)
 8009e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e7e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009e82:	2b30      	cmp	r3, #48	; 0x30
 8009e84:	d013      	beq.n	8009eae <UART_SetConfig+0x17a>
 8009e86:	2b30      	cmp	r3, #48	; 0x30
 8009e88:	d814      	bhi.n	8009eb4 <UART_SetConfig+0x180>
 8009e8a:	2b20      	cmp	r3, #32
 8009e8c:	d009      	beq.n	8009ea2 <UART_SetConfig+0x16e>
 8009e8e:	2b20      	cmp	r3, #32
 8009e90:	d810      	bhi.n	8009eb4 <UART_SetConfig+0x180>
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d002      	beq.n	8009e9c <UART_SetConfig+0x168>
 8009e96:	2b10      	cmp	r3, #16
 8009e98:	d006      	beq.n	8009ea8 <UART_SetConfig+0x174>
 8009e9a:	e00b      	b.n	8009eb4 <UART_SetConfig+0x180>
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	76fb      	strb	r3, [r7, #27]
 8009ea0:	e089      	b.n	8009fb6 <UART_SetConfig+0x282>
 8009ea2:	2302      	movs	r3, #2
 8009ea4:	76fb      	strb	r3, [r7, #27]
 8009ea6:	e086      	b.n	8009fb6 <UART_SetConfig+0x282>
 8009ea8:	2304      	movs	r3, #4
 8009eaa:	76fb      	strb	r3, [r7, #27]
 8009eac:	e083      	b.n	8009fb6 <UART_SetConfig+0x282>
 8009eae:	2308      	movs	r3, #8
 8009eb0:	76fb      	strb	r3, [r7, #27]
 8009eb2:	e080      	b.n	8009fb6 <UART_SetConfig+0x282>
 8009eb4:	2310      	movs	r3, #16
 8009eb6:	76fb      	strb	r3, [r7, #27]
 8009eb8:	e07d      	b.n	8009fb6 <UART_SetConfig+0x282>
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	4a5b      	ldr	r2, [pc, #364]	; (800a02c <UART_SetConfig+0x2f8>)
 8009ec0:	4293      	cmp	r3, r2
 8009ec2:	d120      	bne.n	8009f06 <UART_SetConfig+0x1d2>
 8009ec4:	4b56      	ldr	r3, [pc, #344]	; (800a020 <UART_SetConfig+0x2ec>)
 8009ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009eca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009ece:	2bc0      	cmp	r3, #192	; 0xc0
 8009ed0:	d013      	beq.n	8009efa <UART_SetConfig+0x1c6>
 8009ed2:	2bc0      	cmp	r3, #192	; 0xc0
 8009ed4:	d814      	bhi.n	8009f00 <UART_SetConfig+0x1cc>
 8009ed6:	2b80      	cmp	r3, #128	; 0x80
 8009ed8:	d009      	beq.n	8009eee <UART_SetConfig+0x1ba>
 8009eda:	2b80      	cmp	r3, #128	; 0x80
 8009edc:	d810      	bhi.n	8009f00 <UART_SetConfig+0x1cc>
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d002      	beq.n	8009ee8 <UART_SetConfig+0x1b4>
 8009ee2:	2b40      	cmp	r3, #64	; 0x40
 8009ee4:	d006      	beq.n	8009ef4 <UART_SetConfig+0x1c0>
 8009ee6:	e00b      	b.n	8009f00 <UART_SetConfig+0x1cc>
 8009ee8:	2300      	movs	r3, #0
 8009eea:	76fb      	strb	r3, [r7, #27]
 8009eec:	e063      	b.n	8009fb6 <UART_SetConfig+0x282>
 8009eee:	2302      	movs	r3, #2
 8009ef0:	76fb      	strb	r3, [r7, #27]
 8009ef2:	e060      	b.n	8009fb6 <UART_SetConfig+0x282>
 8009ef4:	2304      	movs	r3, #4
 8009ef6:	76fb      	strb	r3, [r7, #27]
 8009ef8:	e05d      	b.n	8009fb6 <UART_SetConfig+0x282>
 8009efa:	2308      	movs	r3, #8
 8009efc:	76fb      	strb	r3, [r7, #27]
 8009efe:	e05a      	b.n	8009fb6 <UART_SetConfig+0x282>
 8009f00:	2310      	movs	r3, #16
 8009f02:	76fb      	strb	r3, [r7, #27]
 8009f04:	e057      	b.n	8009fb6 <UART_SetConfig+0x282>
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	4a49      	ldr	r2, [pc, #292]	; (800a030 <UART_SetConfig+0x2fc>)
 8009f0c:	4293      	cmp	r3, r2
 8009f0e:	d125      	bne.n	8009f5c <UART_SetConfig+0x228>
 8009f10:	4b43      	ldr	r3, [pc, #268]	; (800a020 <UART_SetConfig+0x2ec>)
 8009f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f1e:	d017      	beq.n	8009f50 <UART_SetConfig+0x21c>
 8009f20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f24:	d817      	bhi.n	8009f56 <UART_SetConfig+0x222>
 8009f26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f2a:	d00b      	beq.n	8009f44 <UART_SetConfig+0x210>
 8009f2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f30:	d811      	bhi.n	8009f56 <UART_SetConfig+0x222>
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d003      	beq.n	8009f3e <UART_SetConfig+0x20a>
 8009f36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f3a:	d006      	beq.n	8009f4a <UART_SetConfig+0x216>
 8009f3c:	e00b      	b.n	8009f56 <UART_SetConfig+0x222>
 8009f3e:	2300      	movs	r3, #0
 8009f40:	76fb      	strb	r3, [r7, #27]
 8009f42:	e038      	b.n	8009fb6 <UART_SetConfig+0x282>
 8009f44:	2302      	movs	r3, #2
 8009f46:	76fb      	strb	r3, [r7, #27]
 8009f48:	e035      	b.n	8009fb6 <UART_SetConfig+0x282>
 8009f4a:	2304      	movs	r3, #4
 8009f4c:	76fb      	strb	r3, [r7, #27]
 8009f4e:	e032      	b.n	8009fb6 <UART_SetConfig+0x282>
 8009f50:	2308      	movs	r3, #8
 8009f52:	76fb      	strb	r3, [r7, #27]
 8009f54:	e02f      	b.n	8009fb6 <UART_SetConfig+0x282>
 8009f56:	2310      	movs	r3, #16
 8009f58:	76fb      	strb	r3, [r7, #27]
 8009f5a:	e02c      	b.n	8009fb6 <UART_SetConfig+0x282>
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	4a2d      	ldr	r2, [pc, #180]	; (800a018 <UART_SetConfig+0x2e4>)
 8009f62:	4293      	cmp	r3, r2
 8009f64:	d125      	bne.n	8009fb2 <UART_SetConfig+0x27e>
 8009f66:	4b2e      	ldr	r3, [pc, #184]	; (800a020 <UART_SetConfig+0x2ec>)
 8009f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f6c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009f70:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009f74:	d017      	beq.n	8009fa6 <UART_SetConfig+0x272>
 8009f76:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009f7a:	d817      	bhi.n	8009fac <UART_SetConfig+0x278>
 8009f7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f80:	d00b      	beq.n	8009f9a <UART_SetConfig+0x266>
 8009f82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f86:	d811      	bhi.n	8009fac <UART_SetConfig+0x278>
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d003      	beq.n	8009f94 <UART_SetConfig+0x260>
 8009f8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f90:	d006      	beq.n	8009fa0 <UART_SetConfig+0x26c>
 8009f92:	e00b      	b.n	8009fac <UART_SetConfig+0x278>
 8009f94:	2300      	movs	r3, #0
 8009f96:	76fb      	strb	r3, [r7, #27]
 8009f98:	e00d      	b.n	8009fb6 <UART_SetConfig+0x282>
 8009f9a:	2302      	movs	r3, #2
 8009f9c:	76fb      	strb	r3, [r7, #27]
 8009f9e:	e00a      	b.n	8009fb6 <UART_SetConfig+0x282>
 8009fa0:	2304      	movs	r3, #4
 8009fa2:	76fb      	strb	r3, [r7, #27]
 8009fa4:	e007      	b.n	8009fb6 <UART_SetConfig+0x282>
 8009fa6:	2308      	movs	r3, #8
 8009fa8:	76fb      	strb	r3, [r7, #27]
 8009faa:	e004      	b.n	8009fb6 <UART_SetConfig+0x282>
 8009fac:	2310      	movs	r3, #16
 8009fae:	76fb      	strb	r3, [r7, #27]
 8009fb0:	e001      	b.n	8009fb6 <UART_SetConfig+0x282>
 8009fb2:	2310      	movs	r3, #16
 8009fb4:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	4a17      	ldr	r2, [pc, #92]	; (800a018 <UART_SetConfig+0x2e4>)
 8009fbc:	4293      	cmp	r3, r2
 8009fbe:	f040 8087 	bne.w	800a0d0 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009fc2:	7efb      	ldrb	r3, [r7, #27]
 8009fc4:	2b08      	cmp	r3, #8
 8009fc6:	d837      	bhi.n	800a038 <UART_SetConfig+0x304>
 8009fc8:	a201      	add	r2, pc, #4	; (adr r2, 8009fd0 <UART_SetConfig+0x29c>)
 8009fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fce:	bf00      	nop
 8009fd0:	08009ff5 	.word	0x08009ff5
 8009fd4:	0800a039 	.word	0x0800a039
 8009fd8:	08009ffd 	.word	0x08009ffd
 8009fdc:	0800a039 	.word	0x0800a039
 8009fe0:	0800a003 	.word	0x0800a003
 8009fe4:	0800a039 	.word	0x0800a039
 8009fe8:	0800a039 	.word	0x0800a039
 8009fec:	0800a039 	.word	0x0800a039
 8009ff0:	0800a00b 	.word	0x0800a00b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009ff4:	f7fc fa3c 	bl	8006470 <HAL_RCC_GetPCLK1Freq>
 8009ff8:	6178      	str	r0, [r7, #20]
        break;
 8009ffa:	e022      	b.n	800a042 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009ffc:	4b0d      	ldr	r3, [pc, #52]	; (800a034 <UART_SetConfig+0x300>)
 8009ffe:	617b      	str	r3, [r7, #20]
        break;
 800a000:	e01f      	b.n	800a042 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a002:	f7fc f99d 	bl	8006340 <HAL_RCC_GetSysClockFreq>
 800a006:	6178      	str	r0, [r7, #20]
        break;
 800a008:	e01b      	b.n	800a042 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a00a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a00e:	617b      	str	r3, [r7, #20]
        break;
 800a010:	e017      	b.n	800a042 <UART_SetConfig+0x30e>
 800a012:	bf00      	nop
 800a014:	efff69f3 	.word	0xefff69f3
 800a018:	40008000 	.word	0x40008000
 800a01c:	40013800 	.word	0x40013800
 800a020:	40021000 	.word	0x40021000
 800a024:	40004400 	.word	0x40004400
 800a028:	40004800 	.word	0x40004800
 800a02c:	40004c00 	.word	0x40004c00
 800a030:	40005000 	.word	0x40005000
 800a034:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800a038:	2300      	movs	r3, #0
 800a03a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a03c:	2301      	movs	r3, #1
 800a03e:	76bb      	strb	r3, [r7, #26]
        break;
 800a040:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a042:	697b      	ldr	r3, [r7, #20]
 800a044:	2b00      	cmp	r3, #0
 800a046:	f000 80f1 	beq.w	800a22c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	685a      	ldr	r2, [r3, #4]
 800a04e:	4613      	mov	r3, r2
 800a050:	005b      	lsls	r3, r3, #1
 800a052:	4413      	add	r3, r2
 800a054:	697a      	ldr	r2, [r7, #20]
 800a056:	429a      	cmp	r2, r3
 800a058:	d305      	bcc.n	800a066 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	685b      	ldr	r3, [r3, #4]
 800a05e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a060:	697a      	ldr	r2, [r7, #20]
 800a062:	429a      	cmp	r2, r3
 800a064:	d902      	bls.n	800a06c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800a066:	2301      	movs	r3, #1
 800a068:	76bb      	strb	r3, [r7, #26]
 800a06a:	e0df      	b.n	800a22c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800a06c:	697b      	ldr	r3, [r7, #20]
 800a06e:	4618      	mov	r0, r3
 800a070:	f04f 0100 	mov.w	r1, #0
 800a074:	f04f 0200 	mov.w	r2, #0
 800a078:	f04f 0300 	mov.w	r3, #0
 800a07c:	020b      	lsls	r3, r1, #8
 800a07e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a082:	0202      	lsls	r2, r0, #8
 800a084:	6879      	ldr	r1, [r7, #4]
 800a086:	6849      	ldr	r1, [r1, #4]
 800a088:	0849      	lsrs	r1, r1, #1
 800a08a:	4608      	mov	r0, r1
 800a08c:	f04f 0100 	mov.w	r1, #0
 800a090:	1814      	adds	r4, r2, r0
 800a092:	eb43 0501 	adc.w	r5, r3, r1
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	685b      	ldr	r3, [r3, #4]
 800a09a:	461a      	mov	r2, r3
 800a09c:	f04f 0300 	mov.w	r3, #0
 800a0a0:	4620      	mov	r0, r4
 800a0a2:	4629      	mov	r1, r5
 800a0a4:	f7f6 fd80 	bl	8000ba8 <__aeabi_uldivmod>
 800a0a8:	4602      	mov	r2, r0
 800a0aa:	460b      	mov	r3, r1
 800a0ac:	4613      	mov	r3, r2
 800a0ae:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a0b0:	693b      	ldr	r3, [r7, #16]
 800a0b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a0b6:	d308      	bcc.n	800a0ca <UART_SetConfig+0x396>
 800a0b8:	693b      	ldr	r3, [r7, #16]
 800a0ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a0be:	d204      	bcs.n	800a0ca <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	693a      	ldr	r2, [r7, #16]
 800a0c6:	60da      	str	r2, [r3, #12]
 800a0c8:	e0b0      	b.n	800a22c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	76bb      	strb	r3, [r7, #26]
 800a0ce:	e0ad      	b.n	800a22c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	69db      	ldr	r3, [r3, #28]
 800a0d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a0d8:	d15b      	bne.n	800a192 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 800a0da:	7efb      	ldrb	r3, [r7, #27]
 800a0dc:	2b08      	cmp	r3, #8
 800a0de:	d828      	bhi.n	800a132 <UART_SetConfig+0x3fe>
 800a0e0:	a201      	add	r2, pc, #4	; (adr r2, 800a0e8 <UART_SetConfig+0x3b4>)
 800a0e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0e6:	bf00      	nop
 800a0e8:	0800a10d 	.word	0x0800a10d
 800a0ec:	0800a115 	.word	0x0800a115
 800a0f0:	0800a11d 	.word	0x0800a11d
 800a0f4:	0800a133 	.word	0x0800a133
 800a0f8:	0800a123 	.word	0x0800a123
 800a0fc:	0800a133 	.word	0x0800a133
 800a100:	0800a133 	.word	0x0800a133
 800a104:	0800a133 	.word	0x0800a133
 800a108:	0800a12b 	.word	0x0800a12b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a10c:	f7fc f9b0 	bl	8006470 <HAL_RCC_GetPCLK1Freq>
 800a110:	6178      	str	r0, [r7, #20]
        break;
 800a112:	e013      	b.n	800a13c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a114:	f7fc f9c2 	bl	800649c <HAL_RCC_GetPCLK2Freq>
 800a118:	6178      	str	r0, [r7, #20]
        break;
 800a11a:	e00f      	b.n	800a13c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a11c:	4b49      	ldr	r3, [pc, #292]	; (800a244 <UART_SetConfig+0x510>)
 800a11e:	617b      	str	r3, [r7, #20]
        break;
 800a120:	e00c      	b.n	800a13c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a122:	f7fc f90d 	bl	8006340 <HAL_RCC_GetSysClockFreq>
 800a126:	6178      	str	r0, [r7, #20]
        break;
 800a128:	e008      	b.n	800a13c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a12a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a12e:	617b      	str	r3, [r7, #20]
        break;
 800a130:	e004      	b.n	800a13c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800a132:	2300      	movs	r3, #0
 800a134:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a136:	2301      	movs	r3, #1
 800a138:	76bb      	strb	r3, [r7, #26]
        break;
 800a13a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a13c:	697b      	ldr	r3, [r7, #20]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d074      	beq.n	800a22c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a142:	697b      	ldr	r3, [r7, #20]
 800a144:	005a      	lsls	r2, r3, #1
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	685b      	ldr	r3, [r3, #4]
 800a14a:	085b      	lsrs	r3, r3, #1
 800a14c:	441a      	add	r2, r3
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	685b      	ldr	r3, [r3, #4]
 800a152:	fbb2 f3f3 	udiv	r3, r2, r3
 800a156:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a158:	693b      	ldr	r3, [r7, #16]
 800a15a:	2b0f      	cmp	r3, #15
 800a15c:	d916      	bls.n	800a18c <UART_SetConfig+0x458>
 800a15e:	693b      	ldr	r3, [r7, #16]
 800a160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a164:	d212      	bcs.n	800a18c <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a166:	693b      	ldr	r3, [r7, #16]
 800a168:	b29b      	uxth	r3, r3
 800a16a:	f023 030f 	bic.w	r3, r3, #15
 800a16e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a170:	693b      	ldr	r3, [r7, #16]
 800a172:	085b      	lsrs	r3, r3, #1
 800a174:	b29b      	uxth	r3, r3
 800a176:	f003 0307 	and.w	r3, r3, #7
 800a17a:	b29a      	uxth	r2, r3
 800a17c:	89fb      	ldrh	r3, [r7, #14]
 800a17e:	4313      	orrs	r3, r2
 800a180:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	89fa      	ldrh	r2, [r7, #14]
 800a188:	60da      	str	r2, [r3, #12]
 800a18a:	e04f      	b.n	800a22c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800a18c:	2301      	movs	r3, #1
 800a18e:	76bb      	strb	r3, [r7, #26]
 800a190:	e04c      	b.n	800a22c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a192:	7efb      	ldrb	r3, [r7, #27]
 800a194:	2b08      	cmp	r3, #8
 800a196:	d828      	bhi.n	800a1ea <UART_SetConfig+0x4b6>
 800a198:	a201      	add	r2, pc, #4	; (adr r2, 800a1a0 <UART_SetConfig+0x46c>)
 800a19a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a19e:	bf00      	nop
 800a1a0:	0800a1c5 	.word	0x0800a1c5
 800a1a4:	0800a1cd 	.word	0x0800a1cd
 800a1a8:	0800a1d5 	.word	0x0800a1d5
 800a1ac:	0800a1eb 	.word	0x0800a1eb
 800a1b0:	0800a1db 	.word	0x0800a1db
 800a1b4:	0800a1eb 	.word	0x0800a1eb
 800a1b8:	0800a1eb 	.word	0x0800a1eb
 800a1bc:	0800a1eb 	.word	0x0800a1eb
 800a1c0:	0800a1e3 	.word	0x0800a1e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a1c4:	f7fc f954 	bl	8006470 <HAL_RCC_GetPCLK1Freq>
 800a1c8:	6178      	str	r0, [r7, #20]
        break;
 800a1ca:	e013      	b.n	800a1f4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a1cc:	f7fc f966 	bl	800649c <HAL_RCC_GetPCLK2Freq>
 800a1d0:	6178      	str	r0, [r7, #20]
        break;
 800a1d2:	e00f      	b.n	800a1f4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a1d4:	4b1b      	ldr	r3, [pc, #108]	; (800a244 <UART_SetConfig+0x510>)
 800a1d6:	617b      	str	r3, [r7, #20]
        break;
 800a1d8:	e00c      	b.n	800a1f4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a1da:	f7fc f8b1 	bl	8006340 <HAL_RCC_GetSysClockFreq>
 800a1de:	6178      	str	r0, [r7, #20]
        break;
 800a1e0:	e008      	b.n	800a1f4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a1e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a1e6:	617b      	str	r3, [r7, #20]
        break;
 800a1e8:	e004      	b.n	800a1f4 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	76bb      	strb	r3, [r7, #26]
        break;
 800a1f2:	bf00      	nop
    }

    if (pclk != 0U)
 800a1f4:	697b      	ldr	r3, [r7, #20]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d018      	beq.n	800a22c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	685b      	ldr	r3, [r3, #4]
 800a1fe:	085a      	lsrs	r2, r3, #1
 800a200:	697b      	ldr	r3, [r7, #20]
 800a202:	441a      	add	r2, r3
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	685b      	ldr	r3, [r3, #4]
 800a208:	fbb2 f3f3 	udiv	r3, r2, r3
 800a20c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a20e:	693b      	ldr	r3, [r7, #16]
 800a210:	2b0f      	cmp	r3, #15
 800a212:	d909      	bls.n	800a228 <UART_SetConfig+0x4f4>
 800a214:	693b      	ldr	r3, [r7, #16]
 800a216:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a21a:	d205      	bcs.n	800a228 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a21c:	693b      	ldr	r3, [r7, #16]
 800a21e:	b29a      	uxth	r2, r3
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	60da      	str	r2, [r3, #12]
 800a226:	e001      	b.n	800a22c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800a228:	2301      	movs	r3, #1
 800a22a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2200      	movs	r2, #0
 800a230:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2200      	movs	r2, #0
 800a236:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800a238:	7ebb      	ldrb	r3, [r7, #26]
}
 800a23a:	4618      	mov	r0, r3
 800a23c:	3720      	adds	r7, #32
 800a23e:	46bd      	mov	sp, r7
 800a240:	bdb0      	pop	{r4, r5, r7, pc}
 800a242:	bf00      	nop
 800a244:	00f42400 	.word	0x00f42400

0800a248 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a248:	b480      	push	{r7}
 800a24a:	b083      	sub	sp, #12
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a254:	f003 0301 	and.w	r3, r3, #1
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d00a      	beq.n	800a272 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	685b      	ldr	r3, [r3, #4]
 800a262:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	430a      	orrs	r2, r1
 800a270:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a276:	f003 0302 	and.w	r3, r3, #2
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d00a      	beq.n	800a294 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	685b      	ldr	r3, [r3, #4]
 800a284:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	430a      	orrs	r2, r1
 800a292:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a298:	f003 0304 	and.w	r3, r3, #4
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d00a      	beq.n	800a2b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	685b      	ldr	r3, [r3, #4]
 800a2a6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	430a      	orrs	r2, r1
 800a2b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ba:	f003 0308 	and.w	r3, r3, #8
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d00a      	beq.n	800a2d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	685b      	ldr	r3, [r3, #4]
 800a2c8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	430a      	orrs	r2, r1
 800a2d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2dc:	f003 0310 	and.w	r3, r3, #16
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d00a      	beq.n	800a2fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	689b      	ldr	r3, [r3, #8]
 800a2ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	430a      	orrs	r2, r1
 800a2f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2fe:	f003 0320 	and.w	r3, r3, #32
 800a302:	2b00      	cmp	r3, #0
 800a304:	d00a      	beq.n	800a31c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	689b      	ldr	r3, [r3, #8]
 800a30c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	430a      	orrs	r2, r1
 800a31a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a324:	2b00      	cmp	r3, #0
 800a326:	d01a      	beq.n	800a35e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	685b      	ldr	r3, [r3, #4]
 800a32e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	430a      	orrs	r2, r1
 800a33c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a342:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a346:	d10a      	bne.n	800a35e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	685b      	ldr	r3, [r3, #4]
 800a34e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	430a      	orrs	r2, r1
 800a35c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a366:	2b00      	cmp	r3, #0
 800a368:	d00a      	beq.n	800a380 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	685b      	ldr	r3, [r3, #4]
 800a370:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	430a      	orrs	r2, r1
 800a37e:	605a      	str	r2, [r3, #4]
  }
}
 800a380:	bf00      	nop
 800a382:	370c      	adds	r7, #12
 800a384:	46bd      	mov	sp, r7
 800a386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38a:	4770      	bx	lr

0800a38c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b086      	sub	sp, #24
 800a390:	af02      	add	r7, sp, #8
 800a392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2200      	movs	r2, #0
 800a398:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a39c:	f7f9 fa46 	bl	800382c <HAL_GetTick>
 800a3a0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f003 0308 	and.w	r3, r3, #8
 800a3ac:	2b08      	cmp	r3, #8
 800a3ae:	d10e      	bne.n	800a3ce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a3b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a3b4:	9300      	str	r3, [sp, #0]
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	f000 f82d 	bl	800a41e <UART_WaitOnFlagUntilTimeout>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d001      	beq.n	800a3ce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a3ca:	2303      	movs	r3, #3
 800a3cc:	e023      	b.n	800a416 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	f003 0304 	and.w	r3, r3, #4
 800a3d8:	2b04      	cmp	r3, #4
 800a3da:	d10e      	bne.n	800a3fa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a3dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a3e0:	9300      	str	r3, [sp, #0]
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f000 f817 	bl	800a41e <UART_WaitOnFlagUntilTimeout>
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d001      	beq.n	800a3fa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a3f6:	2303      	movs	r3, #3
 800a3f8:	e00d      	b.n	800a416 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2220      	movs	r2, #32
 800a3fe:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2220      	movs	r2, #32
 800a404:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2200      	movs	r2, #0
 800a40a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2200      	movs	r2, #0
 800a410:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800a414:	2300      	movs	r3, #0
}
 800a416:	4618      	mov	r0, r3
 800a418:	3710      	adds	r7, #16
 800a41a:	46bd      	mov	sp, r7
 800a41c:	bd80      	pop	{r7, pc}

0800a41e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a41e:	b580      	push	{r7, lr}
 800a420:	b09c      	sub	sp, #112	; 0x70
 800a422:	af00      	add	r7, sp, #0
 800a424:	60f8      	str	r0, [r7, #12]
 800a426:	60b9      	str	r1, [r7, #8]
 800a428:	603b      	str	r3, [r7, #0]
 800a42a:	4613      	mov	r3, r2
 800a42c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a42e:	e0a5      	b.n	800a57c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a430:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a432:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a436:	f000 80a1 	beq.w	800a57c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a43a:	f7f9 f9f7 	bl	800382c <HAL_GetTick>
 800a43e:	4602      	mov	r2, r0
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	1ad3      	subs	r3, r2, r3
 800a444:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a446:	429a      	cmp	r2, r3
 800a448:	d302      	bcc.n	800a450 <UART_WaitOnFlagUntilTimeout+0x32>
 800a44a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d13e      	bne.n	800a4ce <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a456:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a458:	e853 3f00 	ldrex	r3, [r3]
 800a45c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a45e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a460:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a464:	667b      	str	r3, [r7, #100]	; 0x64
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	461a      	mov	r2, r3
 800a46c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a46e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a470:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a472:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a474:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a476:	e841 2300 	strex	r3, r2, [r1]
 800a47a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a47c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d1e6      	bne.n	800a450 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	3308      	adds	r3, #8
 800a488:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a48a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a48c:	e853 3f00 	ldrex	r3, [r3]
 800a490:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a494:	f023 0301 	bic.w	r3, r3, #1
 800a498:	663b      	str	r3, [r7, #96]	; 0x60
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	3308      	adds	r3, #8
 800a4a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a4a2:	64ba      	str	r2, [r7, #72]	; 0x48
 800a4a4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a4a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a4aa:	e841 2300 	strex	r3, r2, [r1]
 800a4ae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a4b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d1e5      	bne.n	800a482 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	2220      	movs	r2, #32
 800a4ba:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	2220      	movs	r2, #32
 800a4c0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800a4ca:	2303      	movs	r3, #3
 800a4cc:	e067      	b.n	800a59e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f003 0304 	and.w	r3, r3, #4
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d04f      	beq.n	800a57c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	69db      	ldr	r3, [r3, #28]
 800a4e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a4e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a4ea:	d147      	bne.n	800a57c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a4f4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4fe:	e853 3f00 	ldrex	r3, [r3]
 800a502:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a506:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a50a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	461a      	mov	r2, r3
 800a512:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a514:	637b      	str	r3, [r7, #52]	; 0x34
 800a516:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a518:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a51a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a51c:	e841 2300 	strex	r3, r2, [r1]
 800a520:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a524:	2b00      	cmp	r3, #0
 800a526:	d1e6      	bne.n	800a4f6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	3308      	adds	r3, #8
 800a52e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a530:	697b      	ldr	r3, [r7, #20]
 800a532:	e853 3f00 	ldrex	r3, [r3]
 800a536:	613b      	str	r3, [r7, #16]
   return(result);
 800a538:	693b      	ldr	r3, [r7, #16]
 800a53a:	f023 0301 	bic.w	r3, r3, #1
 800a53e:	66bb      	str	r3, [r7, #104]	; 0x68
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	3308      	adds	r3, #8
 800a546:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a548:	623a      	str	r2, [r7, #32]
 800a54a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a54c:	69f9      	ldr	r1, [r7, #28]
 800a54e:	6a3a      	ldr	r2, [r7, #32]
 800a550:	e841 2300 	strex	r3, r2, [r1]
 800a554:	61bb      	str	r3, [r7, #24]
   return(result);
 800a556:	69bb      	ldr	r3, [r7, #24]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d1e5      	bne.n	800a528 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	2220      	movs	r2, #32
 800a560:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	2220      	movs	r2, #32
 800a566:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	2220      	movs	r2, #32
 800a56c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	2200      	movs	r2, #0
 800a574:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800a578:	2303      	movs	r3, #3
 800a57a:	e010      	b.n	800a59e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	69da      	ldr	r2, [r3, #28]
 800a582:	68bb      	ldr	r3, [r7, #8]
 800a584:	4013      	ands	r3, r2
 800a586:	68ba      	ldr	r2, [r7, #8]
 800a588:	429a      	cmp	r2, r3
 800a58a:	bf0c      	ite	eq
 800a58c:	2301      	moveq	r3, #1
 800a58e:	2300      	movne	r3, #0
 800a590:	b2db      	uxtb	r3, r3
 800a592:	461a      	mov	r2, r3
 800a594:	79fb      	ldrb	r3, [r7, #7]
 800a596:	429a      	cmp	r2, r3
 800a598:	f43f af4a 	beq.w	800a430 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a59c:	2300      	movs	r3, #0
}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	3770      	adds	r7, #112	; 0x70
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}
	...

0800a5a8 <__errno>:
 800a5a8:	4b01      	ldr	r3, [pc, #4]	; (800a5b0 <__errno+0x8>)
 800a5aa:	6818      	ldr	r0, [r3, #0]
 800a5ac:	4770      	bx	lr
 800a5ae:	bf00      	nop
 800a5b0:	20000090 	.word	0x20000090

0800a5b4 <__libc_init_array>:
 800a5b4:	b570      	push	{r4, r5, r6, lr}
 800a5b6:	4d0d      	ldr	r5, [pc, #52]	; (800a5ec <__libc_init_array+0x38>)
 800a5b8:	4c0d      	ldr	r4, [pc, #52]	; (800a5f0 <__libc_init_array+0x3c>)
 800a5ba:	1b64      	subs	r4, r4, r5
 800a5bc:	10a4      	asrs	r4, r4, #2
 800a5be:	2600      	movs	r6, #0
 800a5c0:	42a6      	cmp	r6, r4
 800a5c2:	d109      	bne.n	800a5d8 <__libc_init_array+0x24>
 800a5c4:	4d0b      	ldr	r5, [pc, #44]	; (800a5f4 <__libc_init_array+0x40>)
 800a5c6:	4c0c      	ldr	r4, [pc, #48]	; (800a5f8 <__libc_init_array+0x44>)
 800a5c8:	f002 ff16 	bl	800d3f8 <_init>
 800a5cc:	1b64      	subs	r4, r4, r5
 800a5ce:	10a4      	asrs	r4, r4, #2
 800a5d0:	2600      	movs	r6, #0
 800a5d2:	42a6      	cmp	r6, r4
 800a5d4:	d105      	bne.n	800a5e2 <__libc_init_array+0x2e>
 800a5d6:	bd70      	pop	{r4, r5, r6, pc}
 800a5d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5dc:	4798      	blx	r3
 800a5de:	3601      	adds	r6, #1
 800a5e0:	e7ee      	b.n	800a5c0 <__libc_init_array+0xc>
 800a5e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5e6:	4798      	blx	r3
 800a5e8:	3601      	adds	r6, #1
 800a5ea:	e7f2      	b.n	800a5d2 <__libc_init_array+0x1e>
 800a5ec:	0800d86c 	.word	0x0800d86c
 800a5f0:	0800d86c 	.word	0x0800d86c
 800a5f4:	0800d86c 	.word	0x0800d86c
 800a5f8:	0800d870 	.word	0x0800d870

0800a5fc <memset>:
 800a5fc:	4402      	add	r2, r0
 800a5fe:	4603      	mov	r3, r0
 800a600:	4293      	cmp	r3, r2
 800a602:	d100      	bne.n	800a606 <memset+0xa>
 800a604:	4770      	bx	lr
 800a606:	f803 1b01 	strb.w	r1, [r3], #1
 800a60a:	e7f9      	b.n	800a600 <memset+0x4>

0800a60c <__cvt>:
 800a60c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a610:	ec55 4b10 	vmov	r4, r5, d0
 800a614:	2d00      	cmp	r5, #0
 800a616:	460e      	mov	r6, r1
 800a618:	4619      	mov	r1, r3
 800a61a:	462b      	mov	r3, r5
 800a61c:	bfbb      	ittet	lt
 800a61e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a622:	461d      	movlt	r5, r3
 800a624:	2300      	movge	r3, #0
 800a626:	232d      	movlt	r3, #45	; 0x2d
 800a628:	700b      	strb	r3, [r1, #0]
 800a62a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a62c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a630:	4691      	mov	r9, r2
 800a632:	f023 0820 	bic.w	r8, r3, #32
 800a636:	bfbc      	itt	lt
 800a638:	4622      	movlt	r2, r4
 800a63a:	4614      	movlt	r4, r2
 800a63c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a640:	d005      	beq.n	800a64e <__cvt+0x42>
 800a642:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a646:	d100      	bne.n	800a64a <__cvt+0x3e>
 800a648:	3601      	adds	r6, #1
 800a64a:	2102      	movs	r1, #2
 800a64c:	e000      	b.n	800a650 <__cvt+0x44>
 800a64e:	2103      	movs	r1, #3
 800a650:	ab03      	add	r3, sp, #12
 800a652:	9301      	str	r3, [sp, #4]
 800a654:	ab02      	add	r3, sp, #8
 800a656:	9300      	str	r3, [sp, #0]
 800a658:	ec45 4b10 	vmov	d0, r4, r5
 800a65c:	4653      	mov	r3, sl
 800a65e:	4632      	mov	r2, r6
 800a660:	f000 fce2 	bl	800b028 <_dtoa_r>
 800a664:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a668:	4607      	mov	r7, r0
 800a66a:	d102      	bne.n	800a672 <__cvt+0x66>
 800a66c:	f019 0f01 	tst.w	r9, #1
 800a670:	d022      	beq.n	800a6b8 <__cvt+0xac>
 800a672:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a676:	eb07 0906 	add.w	r9, r7, r6
 800a67a:	d110      	bne.n	800a69e <__cvt+0x92>
 800a67c:	783b      	ldrb	r3, [r7, #0]
 800a67e:	2b30      	cmp	r3, #48	; 0x30
 800a680:	d10a      	bne.n	800a698 <__cvt+0x8c>
 800a682:	2200      	movs	r2, #0
 800a684:	2300      	movs	r3, #0
 800a686:	4620      	mov	r0, r4
 800a688:	4629      	mov	r1, r5
 800a68a:	f7f6 fa1d 	bl	8000ac8 <__aeabi_dcmpeq>
 800a68e:	b918      	cbnz	r0, 800a698 <__cvt+0x8c>
 800a690:	f1c6 0601 	rsb	r6, r6, #1
 800a694:	f8ca 6000 	str.w	r6, [sl]
 800a698:	f8da 3000 	ldr.w	r3, [sl]
 800a69c:	4499      	add	r9, r3
 800a69e:	2200      	movs	r2, #0
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	4620      	mov	r0, r4
 800a6a4:	4629      	mov	r1, r5
 800a6a6:	f7f6 fa0f 	bl	8000ac8 <__aeabi_dcmpeq>
 800a6aa:	b108      	cbz	r0, 800a6b0 <__cvt+0xa4>
 800a6ac:	f8cd 900c 	str.w	r9, [sp, #12]
 800a6b0:	2230      	movs	r2, #48	; 0x30
 800a6b2:	9b03      	ldr	r3, [sp, #12]
 800a6b4:	454b      	cmp	r3, r9
 800a6b6:	d307      	bcc.n	800a6c8 <__cvt+0xbc>
 800a6b8:	9b03      	ldr	r3, [sp, #12]
 800a6ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a6bc:	1bdb      	subs	r3, r3, r7
 800a6be:	4638      	mov	r0, r7
 800a6c0:	6013      	str	r3, [r2, #0]
 800a6c2:	b004      	add	sp, #16
 800a6c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6c8:	1c59      	adds	r1, r3, #1
 800a6ca:	9103      	str	r1, [sp, #12]
 800a6cc:	701a      	strb	r2, [r3, #0]
 800a6ce:	e7f0      	b.n	800a6b2 <__cvt+0xa6>

0800a6d0 <__exponent>:
 800a6d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	2900      	cmp	r1, #0
 800a6d6:	bfb8      	it	lt
 800a6d8:	4249      	neglt	r1, r1
 800a6da:	f803 2b02 	strb.w	r2, [r3], #2
 800a6de:	bfb4      	ite	lt
 800a6e0:	222d      	movlt	r2, #45	; 0x2d
 800a6e2:	222b      	movge	r2, #43	; 0x2b
 800a6e4:	2909      	cmp	r1, #9
 800a6e6:	7042      	strb	r2, [r0, #1]
 800a6e8:	dd2a      	ble.n	800a740 <__exponent+0x70>
 800a6ea:	f10d 0407 	add.w	r4, sp, #7
 800a6ee:	46a4      	mov	ip, r4
 800a6f0:	270a      	movs	r7, #10
 800a6f2:	46a6      	mov	lr, r4
 800a6f4:	460a      	mov	r2, r1
 800a6f6:	fb91 f6f7 	sdiv	r6, r1, r7
 800a6fa:	fb07 1516 	mls	r5, r7, r6, r1
 800a6fe:	3530      	adds	r5, #48	; 0x30
 800a700:	2a63      	cmp	r2, #99	; 0x63
 800a702:	f104 34ff 	add.w	r4, r4, #4294967295
 800a706:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a70a:	4631      	mov	r1, r6
 800a70c:	dcf1      	bgt.n	800a6f2 <__exponent+0x22>
 800a70e:	3130      	adds	r1, #48	; 0x30
 800a710:	f1ae 0502 	sub.w	r5, lr, #2
 800a714:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a718:	1c44      	adds	r4, r0, #1
 800a71a:	4629      	mov	r1, r5
 800a71c:	4561      	cmp	r1, ip
 800a71e:	d30a      	bcc.n	800a736 <__exponent+0x66>
 800a720:	f10d 0209 	add.w	r2, sp, #9
 800a724:	eba2 020e 	sub.w	r2, r2, lr
 800a728:	4565      	cmp	r5, ip
 800a72a:	bf88      	it	hi
 800a72c:	2200      	movhi	r2, #0
 800a72e:	4413      	add	r3, r2
 800a730:	1a18      	subs	r0, r3, r0
 800a732:	b003      	add	sp, #12
 800a734:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a736:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a73a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a73e:	e7ed      	b.n	800a71c <__exponent+0x4c>
 800a740:	2330      	movs	r3, #48	; 0x30
 800a742:	3130      	adds	r1, #48	; 0x30
 800a744:	7083      	strb	r3, [r0, #2]
 800a746:	70c1      	strb	r1, [r0, #3]
 800a748:	1d03      	adds	r3, r0, #4
 800a74a:	e7f1      	b.n	800a730 <__exponent+0x60>

0800a74c <_printf_float>:
 800a74c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a750:	ed2d 8b02 	vpush	{d8}
 800a754:	b08d      	sub	sp, #52	; 0x34
 800a756:	460c      	mov	r4, r1
 800a758:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a75c:	4616      	mov	r6, r2
 800a75e:	461f      	mov	r7, r3
 800a760:	4605      	mov	r5, r0
 800a762:	f001 fb43 	bl	800bdec <_localeconv_r>
 800a766:	f8d0 a000 	ldr.w	sl, [r0]
 800a76a:	4650      	mov	r0, sl
 800a76c:	f7f5 fd30 	bl	80001d0 <strlen>
 800a770:	2300      	movs	r3, #0
 800a772:	930a      	str	r3, [sp, #40]	; 0x28
 800a774:	6823      	ldr	r3, [r4, #0]
 800a776:	9305      	str	r3, [sp, #20]
 800a778:	f8d8 3000 	ldr.w	r3, [r8]
 800a77c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a780:	3307      	adds	r3, #7
 800a782:	f023 0307 	bic.w	r3, r3, #7
 800a786:	f103 0208 	add.w	r2, r3, #8
 800a78a:	f8c8 2000 	str.w	r2, [r8]
 800a78e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a792:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a796:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a79a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a79e:	9307      	str	r3, [sp, #28]
 800a7a0:	f8cd 8018 	str.w	r8, [sp, #24]
 800a7a4:	ee08 0a10 	vmov	s16, r0
 800a7a8:	4b9f      	ldr	r3, [pc, #636]	; (800aa28 <_printf_float+0x2dc>)
 800a7aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a7ae:	f04f 32ff 	mov.w	r2, #4294967295
 800a7b2:	f7f6 f9bb 	bl	8000b2c <__aeabi_dcmpun>
 800a7b6:	bb88      	cbnz	r0, 800a81c <_printf_float+0xd0>
 800a7b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a7bc:	4b9a      	ldr	r3, [pc, #616]	; (800aa28 <_printf_float+0x2dc>)
 800a7be:	f04f 32ff 	mov.w	r2, #4294967295
 800a7c2:	f7f6 f995 	bl	8000af0 <__aeabi_dcmple>
 800a7c6:	bb48      	cbnz	r0, 800a81c <_printf_float+0xd0>
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	4640      	mov	r0, r8
 800a7ce:	4649      	mov	r1, r9
 800a7d0:	f7f6 f984 	bl	8000adc <__aeabi_dcmplt>
 800a7d4:	b110      	cbz	r0, 800a7dc <_printf_float+0x90>
 800a7d6:	232d      	movs	r3, #45	; 0x2d
 800a7d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a7dc:	4b93      	ldr	r3, [pc, #588]	; (800aa2c <_printf_float+0x2e0>)
 800a7de:	4894      	ldr	r0, [pc, #592]	; (800aa30 <_printf_float+0x2e4>)
 800a7e0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a7e4:	bf94      	ite	ls
 800a7e6:	4698      	movls	r8, r3
 800a7e8:	4680      	movhi	r8, r0
 800a7ea:	2303      	movs	r3, #3
 800a7ec:	6123      	str	r3, [r4, #16]
 800a7ee:	9b05      	ldr	r3, [sp, #20]
 800a7f0:	f023 0204 	bic.w	r2, r3, #4
 800a7f4:	6022      	str	r2, [r4, #0]
 800a7f6:	f04f 0900 	mov.w	r9, #0
 800a7fa:	9700      	str	r7, [sp, #0]
 800a7fc:	4633      	mov	r3, r6
 800a7fe:	aa0b      	add	r2, sp, #44	; 0x2c
 800a800:	4621      	mov	r1, r4
 800a802:	4628      	mov	r0, r5
 800a804:	f000 f9d8 	bl	800abb8 <_printf_common>
 800a808:	3001      	adds	r0, #1
 800a80a:	f040 8090 	bne.w	800a92e <_printf_float+0x1e2>
 800a80e:	f04f 30ff 	mov.w	r0, #4294967295
 800a812:	b00d      	add	sp, #52	; 0x34
 800a814:	ecbd 8b02 	vpop	{d8}
 800a818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a81c:	4642      	mov	r2, r8
 800a81e:	464b      	mov	r3, r9
 800a820:	4640      	mov	r0, r8
 800a822:	4649      	mov	r1, r9
 800a824:	f7f6 f982 	bl	8000b2c <__aeabi_dcmpun>
 800a828:	b140      	cbz	r0, 800a83c <_printf_float+0xf0>
 800a82a:	464b      	mov	r3, r9
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	bfbc      	itt	lt
 800a830:	232d      	movlt	r3, #45	; 0x2d
 800a832:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a836:	487f      	ldr	r0, [pc, #508]	; (800aa34 <_printf_float+0x2e8>)
 800a838:	4b7f      	ldr	r3, [pc, #508]	; (800aa38 <_printf_float+0x2ec>)
 800a83a:	e7d1      	b.n	800a7e0 <_printf_float+0x94>
 800a83c:	6863      	ldr	r3, [r4, #4]
 800a83e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a842:	9206      	str	r2, [sp, #24]
 800a844:	1c5a      	adds	r2, r3, #1
 800a846:	d13f      	bne.n	800a8c8 <_printf_float+0x17c>
 800a848:	2306      	movs	r3, #6
 800a84a:	6063      	str	r3, [r4, #4]
 800a84c:	9b05      	ldr	r3, [sp, #20]
 800a84e:	6861      	ldr	r1, [r4, #4]
 800a850:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a854:	2300      	movs	r3, #0
 800a856:	9303      	str	r3, [sp, #12]
 800a858:	ab0a      	add	r3, sp, #40	; 0x28
 800a85a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a85e:	ab09      	add	r3, sp, #36	; 0x24
 800a860:	ec49 8b10 	vmov	d0, r8, r9
 800a864:	9300      	str	r3, [sp, #0]
 800a866:	6022      	str	r2, [r4, #0]
 800a868:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a86c:	4628      	mov	r0, r5
 800a86e:	f7ff fecd 	bl	800a60c <__cvt>
 800a872:	9b06      	ldr	r3, [sp, #24]
 800a874:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a876:	2b47      	cmp	r3, #71	; 0x47
 800a878:	4680      	mov	r8, r0
 800a87a:	d108      	bne.n	800a88e <_printf_float+0x142>
 800a87c:	1cc8      	adds	r0, r1, #3
 800a87e:	db02      	blt.n	800a886 <_printf_float+0x13a>
 800a880:	6863      	ldr	r3, [r4, #4]
 800a882:	4299      	cmp	r1, r3
 800a884:	dd41      	ble.n	800a90a <_printf_float+0x1be>
 800a886:	f1ab 0b02 	sub.w	fp, fp, #2
 800a88a:	fa5f fb8b 	uxtb.w	fp, fp
 800a88e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a892:	d820      	bhi.n	800a8d6 <_printf_float+0x18a>
 800a894:	3901      	subs	r1, #1
 800a896:	465a      	mov	r2, fp
 800a898:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a89c:	9109      	str	r1, [sp, #36]	; 0x24
 800a89e:	f7ff ff17 	bl	800a6d0 <__exponent>
 800a8a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a8a4:	1813      	adds	r3, r2, r0
 800a8a6:	2a01      	cmp	r2, #1
 800a8a8:	4681      	mov	r9, r0
 800a8aa:	6123      	str	r3, [r4, #16]
 800a8ac:	dc02      	bgt.n	800a8b4 <_printf_float+0x168>
 800a8ae:	6822      	ldr	r2, [r4, #0]
 800a8b0:	07d2      	lsls	r2, r2, #31
 800a8b2:	d501      	bpl.n	800a8b8 <_printf_float+0x16c>
 800a8b4:	3301      	adds	r3, #1
 800a8b6:	6123      	str	r3, [r4, #16]
 800a8b8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d09c      	beq.n	800a7fa <_printf_float+0xae>
 800a8c0:	232d      	movs	r3, #45	; 0x2d
 800a8c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a8c6:	e798      	b.n	800a7fa <_printf_float+0xae>
 800a8c8:	9a06      	ldr	r2, [sp, #24]
 800a8ca:	2a47      	cmp	r2, #71	; 0x47
 800a8cc:	d1be      	bne.n	800a84c <_printf_float+0x100>
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d1bc      	bne.n	800a84c <_printf_float+0x100>
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	e7b9      	b.n	800a84a <_printf_float+0xfe>
 800a8d6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a8da:	d118      	bne.n	800a90e <_printf_float+0x1c2>
 800a8dc:	2900      	cmp	r1, #0
 800a8de:	6863      	ldr	r3, [r4, #4]
 800a8e0:	dd0b      	ble.n	800a8fa <_printf_float+0x1ae>
 800a8e2:	6121      	str	r1, [r4, #16]
 800a8e4:	b913      	cbnz	r3, 800a8ec <_printf_float+0x1a0>
 800a8e6:	6822      	ldr	r2, [r4, #0]
 800a8e8:	07d0      	lsls	r0, r2, #31
 800a8ea:	d502      	bpl.n	800a8f2 <_printf_float+0x1a6>
 800a8ec:	3301      	adds	r3, #1
 800a8ee:	440b      	add	r3, r1
 800a8f0:	6123      	str	r3, [r4, #16]
 800a8f2:	65a1      	str	r1, [r4, #88]	; 0x58
 800a8f4:	f04f 0900 	mov.w	r9, #0
 800a8f8:	e7de      	b.n	800a8b8 <_printf_float+0x16c>
 800a8fa:	b913      	cbnz	r3, 800a902 <_printf_float+0x1b6>
 800a8fc:	6822      	ldr	r2, [r4, #0]
 800a8fe:	07d2      	lsls	r2, r2, #31
 800a900:	d501      	bpl.n	800a906 <_printf_float+0x1ba>
 800a902:	3302      	adds	r3, #2
 800a904:	e7f4      	b.n	800a8f0 <_printf_float+0x1a4>
 800a906:	2301      	movs	r3, #1
 800a908:	e7f2      	b.n	800a8f0 <_printf_float+0x1a4>
 800a90a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a90e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a910:	4299      	cmp	r1, r3
 800a912:	db05      	blt.n	800a920 <_printf_float+0x1d4>
 800a914:	6823      	ldr	r3, [r4, #0]
 800a916:	6121      	str	r1, [r4, #16]
 800a918:	07d8      	lsls	r0, r3, #31
 800a91a:	d5ea      	bpl.n	800a8f2 <_printf_float+0x1a6>
 800a91c:	1c4b      	adds	r3, r1, #1
 800a91e:	e7e7      	b.n	800a8f0 <_printf_float+0x1a4>
 800a920:	2900      	cmp	r1, #0
 800a922:	bfd4      	ite	le
 800a924:	f1c1 0202 	rsble	r2, r1, #2
 800a928:	2201      	movgt	r2, #1
 800a92a:	4413      	add	r3, r2
 800a92c:	e7e0      	b.n	800a8f0 <_printf_float+0x1a4>
 800a92e:	6823      	ldr	r3, [r4, #0]
 800a930:	055a      	lsls	r2, r3, #21
 800a932:	d407      	bmi.n	800a944 <_printf_float+0x1f8>
 800a934:	6923      	ldr	r3, [r4, #16]
 800a936:	4642      	mov	r2, r8
 800a938:	4631      	mov	r1, r6
 800a93a:	4628      	mov	r0, r5
 800a93c:	47b8      	blx	r7
 800a93e:	3001      	adds	r0, #1
 800a940:	d12c      	bne.n	800a99c <_printf_float+0x250>
 800a942:	e764      	b.n	800a80e <_printf_float+0xc2>
 800a944:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a948:	f240 80e0 	bls.w	800ab0c <_printf_float+0x3c0>
 800a94c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a950:	2200      	movs	r2, #0
 800a952:	2300      	movs	r3, #0
 800a954:	f7f6 f8b8 	bl	8000ac8 <__aeabi_dcmpeq>
 800a958:	2800      	cmp	r0, #0
 800a95a:	d034      	beq.n	800a9c6 <_printf_float+0x27a>
 800a95c:	4a37      	ldr	r2, [pc, #220]	; (800aa3c <_printf_float+0x2f0>)
 800a95e:	2301      	movs	r3, #1
 800a960:	4631      	mov	r1, r6
 800a962:	4628      	mov	r0, r5
 800a964:	47b8      	blx	r7
 800a966:	3001      	adds	r0, #1
 800a968:	f43f af51 	beq.w	800a80e <_printf_float+0xc2>
 800a96c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a970:	429a      	cmp	r2, r3
 800a972:	db02      	blt.n	800a97a <_printf_float+0x22e>
 800a974:	6823      	ldr	r3, [r4, #0]
 800a976:	07d8      	lsls	r0, r3, #31
 800a978:	d510      	bpl.n	800a99c <_printf_float+0x250>
 800a97a:	ee18 3a10 	vmov	r3, s16
 800a97e:	4652      	mov	r2, sl
 800a980:	4631      	mov	r1, r6
 800a982:	4628      	mov	r0, r5
 800a984:	47b8      	blx	r7
 800a986:	3001      	adds	r0, #1
 800a988:	f43f af41 	beq.w	800a80e <_printf_float+0xc2>
 800a98c:	f04f 0800 	mov.w	r8, #0
 800a990:	f104 091a 	add.w	r9, r4, #26
 800a994:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a996:	3b01      	subs	r3, #1
 800a998:	4543      	cmp	r3, r8
 800a99a:	dc09      	bgt.n	800a9b0 <_printf_float+0x264>
 800a99c:	6823      	ldr	r3, [r4, #0]
 800a99e:	079b      	lsls	r3, r3, #30
 800a9a0:	f100 8105 	bmi.w	800abae <_printf_float+0x462>
 800a9a4:	68e0      	ldr	r0, [r4, #12]
 800a9a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9a8:	4298      	cmp	r0, r3
 800a9aa:	bfb8      	it	lt
 800a9ac:	4618      	movlt	r0, r3
 800a9ae:	e730      	b.n	800a812 <_printf_float+0xc6>
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	464a      	mov	r2, r9
 800a9b4:	4631      	mov	r1, r6
 800a9b6:	4628      	mov	r0, r5
 800a9b8:	47b8      	blx	r7
 800a9ba:	3001      	adds	r0, #1
 800a9bc:	f43f af27 	beq.w	800a80e <_printf_float+0xc2>
 800a9c0:	f108 0801 	add.w	r8, r8, #1
 800a9c4:	e7e6      	b.n	800a994 <_printf_float+0x248>
 800a9c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	dc39      	bgt.n	800aa40 <_printf_float+0x2f4>
 800a9cc:	4a1b      	ldr	r2, [pc, #108]	; (800aa3c <_printf_float+0x2f0>)
 800a9ce:	2301      	movs	r3, #1
 800a9d0:	4631      	mov	r1, r6
 800a9d2:	4628      	mov	r0, r5
 800a9d4:	47b8      	blx	r7
 800a9d6:	3001      	adds	r0, #1
 800a9d8:	f43f af19 	beq.w	800a80e <_printf_float+0xc2>
 800a9dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a9e0:	4313      	orrs	r3, r2
 800a9e2:	d102      	bne.n	800a9ea <_printf_float+0x29e>
 800a9e4:	6823      	ldr	r3, [r4, #0]
 800a9e6:	07d9      	lsls	r1, r3, #31
 800a9e8:	d5d8      	bpl.n	800a99c <_printf_float+0x250>
 800a9ea:	ee18 3a10 	vmov	r3, s16
 800a9ee:	4652      	mov	r2, sl
 800a9f0:	4631      	mov	r1, r6
 800a9f2:	4628      	mov	r0, r5
 800a9f4:	47b8      	blx	r7
 800a9f6:	3001      	adds	r0, #1
 800a9f8:	f43f af09 	beq.w	800a80e <_printf_float+0xc2>
 800a9fc:	f04f 0900 	mov.w	r9, #0
 800aa00:	f104 0a1a 	add.w	sl, r4, #26
 800aa04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa06:	425b      	negs	r3, r3
 800aa08:	454b      	cmp	r3, r9
 800aa0a:	dc01      	bgt.n	800aa10 <_printf_float+0x2c4>
 800aa0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa0e:	e792      	b.n	800a936 <_printf_float+0x1ea>
 800aa10:	2301      	movs	r3, #1
 800aa12:	4652      	mov	r2, sl
 800aa14:	4631      	mov	r1, r6
 800aa16:	4628      	mov	r0, r5
 800aa18:	47b8      	blx	r7
 800aa1a:	3001      	adds	r0, #1
 800aa1c:	f43f aef7 	beq.w	800a80e <_printf_float+0xc2>
 800aa20:	f109 0901 	add.w	r9, r9, #1
 800aa24:	e7ee      	b.n	800aa04 <_printf_float+0x2b8>
 800aa26:	bf00      	nop
 800aa28:	7fefffff 	.word	0x7fefffff
 800aa2c:	0800d488 	.word	0x0800d488
 800aa30:	0800d48c 	.word	0x0800d48c
 800aa34:	0800d494 	.word	0x0800d494
 800aa38:	0800d490 	.word	0x0800d490
 800aa3c:	0800d498 	.word	0x0800d498
 800aa40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aa42:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aa44:	429a      	cmp	r2, r3
 800aa46:	bfa8      	it	ge
 800aa48:	461a      	movge	r2, r3
 800aa4a:	2a00      	cmp	r2, #0
 800aa4c:	4691      	mov	r9, r2
 800aa4e:	dc37      	bgt.n	800aac0 <_printf_float+0x374>
 800aa50:	f04f 0b00 	mov.w	fp, #0
 800aa54:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aa58:	f104 021a 	add.w	r2, r4, #26
 800aa5c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aa5e:	9305      	str	r3, [sp, #20]
 800aa60:	eba3 0309 	sub.w	r3, r3, r9
 800aa64:	455b      	cmp	r3, fp
 800aa66:	dc33      	bgt.n	800aad0 <_printf_float+0x384>
 800aa68:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aa6c:	429a      	cmp	r2, r3
 800aa6e:	db3b      	blt.n	800aae8 <_printf_float+0x39c>
 800aa70:	6823      	ldr	r3, [r4, #0]
 800aa72:	07da      	lsls	r2, r3, #31
 800aa74:	d438      	bmi.n	800aae8 <_printf_float+0x39c>
 800aa76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aa78:	9b05      	ldr	r3, [sp, #20]
 800aa7a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aa7c:	1ad3      	subs	r3, r2, r3
 800aa7e:	eba2 0901 	sub.w	r9, r2, r1
 800aa82:	4599      	cmp	r9, r3
 800aa84:	bfa8      	it	ge
 800aa86:	4699      	movge	r9, r3
 800aa88:	f1b9 0f00 	cmp.w	r9, #0
 800aa8c:	dc35      	bgt.n	800aafa <_printf_float+0x3ae>
 800aa8e:	f04f 0800 	mov.w	r8, #0
 800aa92:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aa96:	f104 0a1a 	add.w	sl, r4, #26
 800aa9a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aa9e:	1a9b      	subs	r3, r3, r2
 800aaa0:	eba3 0309 	sub.w	r3, r3, r9
 800aaa4:	4543      	cmp	r3, r8
 800aaa6:	f77f af79 	ble.w	800a99c <_printf_float+0x250>
 800aaaa:	2301      	movs	r3, #1
 800aaac:	4652      	mov	r2, sl
 800aaae:	4631      	mov	r1, r6
 800aab0:	4628      	mov	r0, r5
 800aab2:	47b8      	blx	r7
 800aab4:	3001      	adds	r0, #1
 800aab6:	f43f aeaa 	beq.w	800a80e <_printf_float+0xc2>
 800aaba:	f108 0801 	add.w	r8, r8, #1
 800aabe:	e7ec      	b.n	800aa9a <_printf_float+0x34e>
 800aac0:	4613      	mov	r3, r2
 800aac2:	4631      	mov	r1, r6
 800aac4:	4642      	mov	r2, r8
 800aac6:	4628      	mov	r0, r5
 800aac8:	47b8      	blx	r7
 800aaca:	3001      	adds	r0, #1
 800aacc:	d1c0      	bne.n	800aa50 <_printf_float+0x304>
 800aace:	e69e      	b.n	800a80e <_printf_float+0xc2>
 800aad0:	2301      	movs	r3, #1
 800aad2:	4631      	mov	r1, r6
 800aad4:	4628      	mov	r0, r5
 800aad6:	9205      	str	r2, [sp, #20]
 800aad8:	47b8      	blx	r7
 800aada:	3001      	adds	r0, #1
 800aadc:	f43f ae97 	beq.w	800a80e <_printf_float+0xc2>
 800aae0:	9a05      	ldr	r2, [sp, #20]
 800aae2:	f10b 0b01 	add.w	fp, fp, #1
 800aae6:	e7b9      	b.n	800aa5c <_printf_float+0x310>
 800aae8:	ee18 3a10 	vmov	r3, s16
 800aaec:	4652      	mov	r2, sl
 800aaee:	4631      	mov	r1, r6
 800aaf0:	4628      	mov	r0, r5
 800aaf2:	47b8      	blx	r7
 800aaf4:	3001      	adds	r0, #1
 800aaf6:	d1be      	bne.n	800aa76 <_printf_float+0x32a>
 800aaf8:	e689      	b.n	800a80e <_printf_float+0xc2>
 800aafa:	9a05      	ldr	r2, [sp, #20]
 800aafc:	464b      	mov	r3, r9
 800aafe:	4442      	add	r2, r8
 800ab00:	4631      	mov	r1, r6
 800ab02:	4628      	mov	r0, r5
 800ab04:	47b8      	blx	r7
 800ab06:	3001      	adds	r0, #1
 800ab08:	d1c1      	bne.n	800aa8e <_printf_float+0x342>
 800ab0a:	e680      	b.n	800a80e <_printf_float+0xc2>
 800ab0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab0e:	2a01      	cmp	r2, #1
 800ab10:	dc01      	bgt.n	800ab16 <_printf_float+0x3ca>
 800ab12:	07db      	lsls	r3, r3, #31
 800ab14:	d538      	bpl.n	800ab88 <_printf_float+0x43c>
 800ab16:	2301      	movs	r3, #1
 800ab18:	4642      	mov	r2, r8
 800ab1a:	4631      	mov	r1, r6
 800ab1c:	4628      	mov	r0, r5
 800ab1e:	47b8      	blx	r7
 800ab20:	3001      	adds	r0, #1
 800ab22:	f43f ae74 	beq.w	800a80e <_printf_float+0xc2>
 800ab26:	ee18 3a10 	vmov	r3, s16
 800ab2a:	4652      	mov	r2, sl
 800ab2c:	4631      	mov	r1, r6
 800ab2e:	4628      	mov	r0, r5
 800ab30:	47b8      	blx	r7
 800ab32:	3001      	adds	r0, #1
 800ab34:	f43f ae6b 	beq.w	800a80e <_printf_float+0xc2>
 800ab38:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	2300      	movs	r3, #0
 800ab40:	f7f5 ffc2 	bl	8000ac8 <__aeabi_dcmpeq>
 800ab44:	b9d8      	cbnz	r0, 800ab7e <_printf_float+0x432>
 800ab46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab48:	f108 0201 	add.w	r2, r8, #1
 800ab4c:	3b01      	subs	r3, #1
 800ab4e:	4631      	mov	r1, r6
 800ab50:	4628      	mov	r0, r5
 800ab52:	47b8      	blx	r7
 800ab54:	3001      	adds	r0, #1
 800ab56:	d10e      	bne.n	800ab76 <_printf_float+0x42a>
 800ab58:	e659      	b.n	800a80e <_printf_float+0xc2>
 800ab5a:	2301      	movs	r3, #1
 800ab5c:	4652      	mov	r2, sl
 800ab5e:	4631      	mov	r1, r6
 800ab60:	4628      	mov	r0, r5
 800ab62:	47b8      	blx	r7
 800ab64:	3001      	adds	r0, #1
 800ab66:	f43f ae52 	beq.w	800a80e <_printf_float+0xc2>
 800ab6a:	f108 0801 	add.w	r8, r8, #1
 800ab6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab70:	3b01      	subs	r3, #1
 800ab72:	4543      	cmp	r3, r8
 800ab74:	dcf1      	bgt.n	800ab5a <_printf_float+0x40e>
 800ab76:	464b      	mov	r3, r9
 800ab78:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ab7c:	e6dc      	b.n	800a938 <_printf_float+0x1ec>
 800ab7e:	f04f 0800 	mov.w	r8, #0
 800ab82:	f104 0a1a 	add.w	sl, r4, #26
 800ab86:	e7f2      	b.n	800ab6e <_printf_float+0x422>
 800ab88:	2301      	movs	r3, #1
 800ab8a:	4642      	mov	r2, r8
 800ab8c:	e7df      	b.n	800ab4e <_printf_float+0x402>
 800ab8e:	2301      	movs	r3, #1
 800ab90:	464a      	mov	r2, r9
 800ab92:	4631      	mov	r1, r6
 800ab94:	4628      	mov	r0, r5
 800ab96:	47b8      	blx	r7
 800ab98:	3001      	adds	r0, #1
 800ab9a:	f43f ae38 	beq.w	800a80e <_printf_float+0xc2>
 800ab9e:	f108 0801 	add.w	r8, r8, #1
 800aba2:	68e3      	ldr	r3, [r4, #12]
 800aba4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aba6:	1a5b      	subs	r3, r3, r1
 800aba8:	4543      	cmp	r3, r8
 800abaa:	dcf0      	bgt.n	800ab8e <_printf_float+0x442>
 800abac:	e6fa      	b.n	800a9a4 <_printf_float+0x258>
 800abae:	f04f 0800 	mov.w	r8, #0
 800abb2:	f104 0919 	add.w	r9, r4, #25
 800abb6:	e7f4      	b.n	800aba2 <_printf_float+0x456>

0800abb8 <_printf_common>:
 800abb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abbc:	4616      	mov	r6, r2
 800abbe:	4699      	mov	r9, r3
 800abc0:	688a      	ldr	r2, [r1, #8]
 800abc2:	690b      	ldr	r3, [r1, #16]
 800abc4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800abc8:	4293      	cmp	r3, r2
 800abca:	bfb8      	it	lt
 800abcc:	4613      	movlt	r3, r2
 800abce:	6033      	str	r3, [r6, #0]
 800abd0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800abd4:	4607      	mov	r7, r0
 800abd6:	460c      	mov	r4, r1
 800abd8:	b10a      	cbz	r2, 800abde <_printf_common+0x26>
 800abda:	3301      	adds	r3, #1
 800abdc:	6033      	str	r3, [r6, #0]
 800abde:	6823      	ldr	r3, [r4, #0]
 800abe0:	0699      	lsls	r1, r3, #26
 800abe2:	bf42      	ittt	mi
 800abe4:	6833      	ldrmi	r3, [r6, #0]
 800abe6:	3302      	addmi	r3, #2
 800abe8:	6033      	strmi	r3, [r6, #0]
 800abea:	6825      	ldr	r5, [r4, #0]
 800abec:	f015 0506 	ands.w	r5, r5, #6
 800abf0:	d106      	bne.n	800ac00 <_printf_common+0x48>
 800abf2:	f104 0a19 	add.w	sl, r4, #25
 800abf6:	68e3      	ldr	r3, [r4, #12]
 800abf8:	6832      	ldr	r2, [r6, #0]
 800abfa:	1a9b      	subs	r3, r3, r2
 800abfc:	42ab      	cmp	r3, r5
 800abfe:	dc26      	bgt.n	800ac4e <_printf_common+0x96>
 800ac00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ac04:	1e13      	subs	r3, r2, #0
 800ac06:	6822      	ldr	r2, [r4, #0]
 800ac08:	bf18      	it	ne
 800ac0a:	2301      	movne	r3, #1
 800ac0c:	0692      	lsls	r2, r2, #26
 800ac0e:	d42b      	bmi.n	800ac68 <_printf_common+0xb0>
 800ac10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ac14:	4649      	mov	r1, r9
 800ac16:	4638      	mov	r0, r7
 800ac18:	47c0      	blx	r8
 800ac1a:	3001      	adds	r0, #1
 800ac1c:	d01e      	beq.n	800ac5c <_printf_common+0xa4>
 800ac1e:	6823      	ldr	r3, [r4, #0]
 800ac20:	68e5      	ldr	r5, [r4, #12]
 800ac22:	6832      	ldr	r2, [r6, #0]
 800ac24:	f003 0306 	and.w	r3, r3, #6
 800ac28:	2b04      	cmp	r3, #4
 800ac2a:	bf08      	it	eq
 800ac2c:	1aad      	subeq	r5, r5, r2
 800ac2e:	68a3      	ldr	r3, [r4, #8]
 800ac30:	6922      	ldr	r2, [r4, #16]
 800ac32:	bf0c      	ite	eq
 800ac34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ac38:	2500      	movne	r5, #0
 800ac3a:	4293      	cmp	r3, r2
 800ac3c:	bfc4      	itt	gt
 800ac3e:	1a9b      	subgt	r3, r3, r2
 800ac40:	18ed      	addgt	r5, r5, r3
 800ac42:	2600      	movs	r6, #0
 800ac44:	341a      	adds	r4, #26
 800ac46:	42b5      	cmp	r5, r6
 800ac48:	d11a      	bne.n	800ac80 <_printf_common+0xc8>
 800ac4a:	2000      	movs	r0, #0
 800ac4c:	e008      	b.n	800ac60 <_printf_common+0xa8>
 800ac4e:	2301      	movs	r3, #1
 800ac50:	4652      	mov	r2, sl
 800ac52:	4649      	mov	r1, r9
 800ac54:	4638      	mov	r0, r7
 800ac56:	47c0      	blx	r8
 800ac58:	3001      	adds	r0, #1
 800ac5a:	d103      	bne.n	800ac64 <_printf_common+0xac>
 800ac5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac64:	3501      	adds	r5, #1
 800ac66:	e7c6      	b.n	800abf6 <_printf_common+0x3e>
 800ac68:	18e1      	adds	r1, r4, r3
 800ac6a:	1c5a      	adds	r2, r3, #1
 800ac6c:	2030      	movs	r0, #48	; 0x30
 800ac6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ac72:	4422      	add	r2, r4
 800ac74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ac78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ac7c:	3302      	adds	r3, #2
 800ac7e:	e7c7      	b.n	800ac10 <_printf_common+0x58>
 800ac80:	2301      	movs	r3, #1
 800ac82:	4622      	mov	r2, r4
 800ac84:	4649      	mov	r1, r9
 800ac86:	4638      	mov	r0, r7
 800ac88:	47c0      	blx	r8
 800ac8a:	3001      	adds	r0, #1
 800ac8c:	d0e6      	beq.n	800ac5c <_printf_common+0xa4>
 800ac8e:	3601      	adds	r6, #1
 800ac90:	e7d9      	b.n	800ac46 <_printf_common+0x8e>
	...

0800ac94 <_printf_i>:
 800ac94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ac98:	460c      	mov	r4, r1
 800ac9a:	4691      	mov	r9, r2
 800ac9c:	7e27      	ldrb	r7, [r4, #24]
 800ac9e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800aca0:	2f78      	cmp	r7, #120	; 0x78
 800aca2:	4680      	mov	r8, r0
 800aca4:	469a      	mov	sl, r3
 800aca6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800acaa:	d807      	bhi.n	800acbc <_printf_i+0x28>
 800acac:	2f62      	cmp	r7, #98	; 0x62
 800acae:	d80a      	bhi.n	800acc6 <_printf_i+0x32>
 800acb0:	2f00      	cmp	r7, #0
 800acb2:	f000 80d8 	beq.w	800ae66 <_printf_i+0x1d2>
 800acb6:	2f58      	cmp	r7, #88	; 0x58
 800acb8:	f000 80a3 	beq.w	800ae02 <_printf_i+0x16e>
 800acbc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800acc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800acc4:	e03a      	b.n	800ad3c <_printf_i+0xa8>
 800acc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800acca:	2b15      	cmp	r3, #21
 800accc:	d8f6      	bhi.n	800acbc <_printf_i+0x28>
 800acce:	a001      	add	r0, pc, #4	; (adr r0, 800acd4 <_printf_i+0x40>)
 800acd0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800acd4:	0800ad2d 	.word	0x0800ad2d
 800acd8:	0800ad41 	.word	0x0800ad41
 800acdc:	0800acbd 	.word	0x0800acbd
 800ace0:	0800acbd 	.word	0x0800acbd
 800ace4:	0800acbd 	.word	0x0800acbd
 800ace8:	0800acbd 	.word	0x0800acbd
 800acec:	0800ad41 	.word	0x0800ad41
 800acf0:	0800acbd 	.word	0x0800acbd
 800acf4:	0800acbd 	.word	0x0800acbd
 800acf8:	0800acbd 	.word	0x0800acbd
 800acfc:	0800acbd 	.word	0x0800acbd
 800ad00:	0800ae4d 	.word	0x0800ae4d
 800ad04:	0800ad71 	.word	0x0800ad71
 800ad08:	0800ae2f 	.word	0x0800ae2f
 800ad0c:	0800acbd 	.word	0x0800acbd
 800ad10:	0800acbd 	.word	0x0800acbd
 800ad14:	0800ae6f 	.word	0x0800ae6f
 800ad18:	0800acbd 	.word	0x0800acbd
 800ad1c:	0800ad71 	.word	0x0800ad71
 800ad20:	0800acbd 	.word	0x0800acbd
 800ad24:	0800acbd 	.word	0x0800acbd
 800ad28:	0800ae37 	.word	0x0800ae37
 800ad2c:	680b      	ldr	r3, [r1, #0]
 800ad2e:	1d1a      	adds	r2, r3, #4
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	600a      	str	r2, [r1, #0]
 800ad34:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ad38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ad3c:	2301      	movs	r3, #1
 800ad3e:	e0a3      	b.n	800ae88 <_printf_i+0x1f4>
 800ad40:	6825      	ldr	r5, [r4, #0]
 800ad42:	6808      	ldr	r0, [r1, #0]
 800ad44:	062e      	lsls	r6, r5, #24
 800ad46:	f100 0304 	add.w	r3, r0, #4
 800ad4a:	d50a      	bpl.n	800ad62 <_printf_i+0xce>
 800ad4c:	6805      	ldr	r5, [r0, #0]
 800ad4e:	600b      	str	r3, [r1, #0]
 800ad50:	2d00      	cmp	r5, #0
 800ad52:	da03      	bge.n	800ad5c <_printf_i+0xc8>
 800ad54:	232d      	movs	r3, #45	; 0x2d
 800ad56:	426d      	negs	r5, r5
 800ad58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad5c:	485e      	ldr	r0, [pc, #376]	; (800aed8 <_printf_i+0x244>)
 800ad5e:	230a      	movs	r3, #10
 800ad60:	e019      	b.n	800ad96 <_printf_i+0x102>
 800ad62:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ad66:	6805      	ldr	r5, [r0, #0]
 800ad68:	600b      	str	r3, [r1, #0]
 800ad6a:	bf18      	it	ne
 800ad6c:	b22d      	sxthne	r5, r5
 800ad6e:	e7ef      	b.n	800ad50 <_printf_i+0xbc>
 800ad70:	680b      	ldr	r3, [r1, #0]
 800ad72:	6825      	ldr	r5, [r4, #0]
 800ad74:	1d18      	adds	r0, r3, #4
 800ad76:	6008      	str	r0, [r1, #0]
 800ad78:	0628      	lsls	r0, r5, #24
 800ad7a:	d501      	bpl.n	800ad80 <_printf_i+0xec>
 800ad7c:	681d      	ldr	r5, [r3, #0]
 800ad7e:	e002      	b.n	800ad86 <_printf_i+0xf2>
 800ad80:	0669      	lsls	r1, r5, #25
 800ad82:	d5fb      	bpl.n	800ad7c <_printf_i+0xe8>
 800ad84:	881d      	ldrh	r5, [r3, #0]
 800ad86:	4854      	ldr	r0, [pc, #336]	; (800aed8 <_printf_i+0x244>)
 800ad88:	2f6f      	cmp	r7, #111	; 0x6f
 800ad8a:	bf0c      	ite	eq
 800ad8c:	2308      	moveq	r3, #8
 800ad8e:	230a      	movne	r3, #10
 800ad90:	2100      	movs	r1, #0
 800ad92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ad96:	6866      	ldr	r6, [r4, #4]
 800ad98:	60a6      	str	r6, [r4, #8]
 800ad9a:	2e00      	cmp	r6, #0
 800ad9c:	bfa2      	ittt	ge
 800ad9e:	6821      	ldrge	r1, [r4, #0]
 800ada0:	f021 0104 	bicge.w	r1, r1, #4
 800ada4:	6021      	strge	r1, [r4, #0]
 800ada6:	b90d      	cbnz	r5, 800adac <_printf_i+0x118>
 800ada8:	2e00      	cmp	r6, #0
 800adaa:	d04d      	beq.n	800ae48 <_printf_i+0x1b4>
 800adac:	4616      	mov	r6, r2
 800adae:	fbb5 f1f3 	udiv	r1, r5, r3
 800adb2:	fb03 5711 	mls	r7, r3, r1, r5
 800adb6:	5dc7      	ldrb	r7, [r0, r7]
 800adb8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800adbc:	462f      	mov	r7, r5
 800adbe:	42bb      	cmp	r3, r7
 800adc0:	460d      	mov	r5, r1
 800adc2:	d9f4      	bls.n	800adae <_printf_i+0x11a>
 800adc4:	2b08      	cmp	r3, #8
 800adc6:	d10b      	bne.n	800ade0 <_printf_i+0x14c>
 800adc8:	6823      	ldr	r3, [r4, #0]
 800adca:	07df      	lsls	r7, r3, #31
 800adcc:	d508      	bpl.n	800ade0 <_printf_i+0x14c>
 800adce:	6923      	ldr	r3, [r4, #16]
 800add0:	6861      	ldr	r1, [r4, #4]
 800add2:	4299      	cmp	r1, r3
 800add4:	bfde      	ittt	le
 800add6:	2330      	movle	r3, #48	; 0x30
 800add8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800addc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ade0:	1b92      	subs	r2, r2, r6
 800ade2:	6122      	str	r2, [r4, #16]
 800ade4:	f8cd a000 	str.w	sl, [sp]
 800ade8:	464b      	mov	r3, r9
 800adea:	aa03      	add	r2, sp, #12
 800adec:	4621      	mov	r1, r4
 800adee:	4640      	mov	r0, r8
 800adf0:	f7ff fee2 	bl	800abb8 <_printf_common>
 800adf4:	3001      	adds	r0, #1
 800adf6:	d14c      	bne.n	800ae92 <_printf_i+0x1fe>
 800adf8:	f04f 30ff 	mov.w	r0, #4294967295
 800adfc:	b004      	add	sp, #16
 800adfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae02:	4835      	ldr	r0, [pc, #212]	; (800aed8 <_printf_i+0x244>)
 800ae04:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ae08:	6823      	ldr	r3, [r4, #0]
 800ae0a:	680e      	ldr	r6, [r1, #0]
 800ae0c:	061f      	lsls	r7, r3, #24
 800ae0e:	f856 5b04 	ldr.w	r5, [r6], #4
 800ae12:	600e      	str	r6, [r1, #0]
 800ae14:	d514      	bpl.n	800ae40 <_printf_i+0x1ac>
 800ae16:	07d9      	lsls	r1, r3, #31
 800ae18:	bf44      	itt	mi
 800ae1a:	f043 0320 	orrmi.w	r3, r3, #32
 800ae1e:	6023      	strmi	r3, [r4, #0]
 800ae20:	b91d      	cbnz	r5, 800ae2a <_printf_i+0x196>
 800ae22:	6823      	ldr	r3, [r4, #0]
 800ae24:	f023 0320 	bic.w	r3, r3, #32
 800ae28:	6023      	str	r3, [r4, #0]
 800ae2a:	2310      	movs	r3, #16
 800ae2c:	e7b0      	b.n	800ad90 <_printf_i+0xfc>
 800ae2e:	6823      	ldr	r3, [r4, #0]
 800ae30:	f043 0320 	orr.w	r3, r3, #32
 800ae34:	6023      	str	r3, [r4, #0]
 800ae36:	2378      	movs	r3, #120	; 0x78
 800ae38:	4828      	ldr	r0, [pc, #160]	; (800aedc <_printf_i+0x248>)
 800ae3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ae3e:	e7e3      	b.n	800ae08 <_printf_i+0x174>
 800ae40:	065e      	lsls	r6, r3, #25
 800ae42:	bf48      	it	mi
 800ae44:	b2ad      	uxthmi	r5, r5
 800ae46:	e7e6      	b.n	800ae16 <_printf_i+0x182>
 800ae48:	4616      	mov	r6, r2
 800ae4a:	e7bb      	b.n	800adc4 <_printf_i+0x130>
 800ae4c:	680b      	ldr	r3, [r1, #0]
 800ae4e:	6826      	ldr	r6, [r4, #0]
 800ae50:	6960      	ldr	r0, [r4, #20]
 800ae52:	1d1d      	adds	r5, r3, #4
 800ae54:	600d      	str	r5, [r1, #0]
 800ae56:	0635      	lsls	r5, r6, #24
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	d501      	bpl.n	800ae60 <_printf_i+0x1cc>
 800ae5c:	6018      	str	r0, [r3, #0]
 800ae5e:	e002      	b.n	800ae66 <_printf_i+0x1d2>
 800ae60:	0671      	lsls	r1, r6, #25
 800ae62:	d5fb      	bpl.n	800ae5c <_printf_i+0x1c8>
 800ae64:	8018      	strh	r0, [r3, #0]
 800ae66:	2300      	movs	r3, #0
 800ae68:	6123      	str	r3, [r4, #16]
 800ae6a:	4616      	mov	r6, r2
 800ae6c:	e7ba      	b.n	800ade4 <_printf_i+0x150>
 800ae6e:	680b      	ldr	r3, [r1, #0]
 800ae70:	1d1a      	adds	r2, r3, #4
 800ae72:	600a      	str	r2, [r1, #0]
 800ae74:	681e      	ldr	r6, [r3, #0]
 800ae76:	6862      	ldr	r2, [r4, #4]
 800ae78:	2100      	movs	r1, #0
 800ae7a:	4630      	mov	r0, r6
 800ae7c:	f7f5 f9b0 	bl	80001e0 <memchr>
 800ae80:	b108      	cbz	r0, 800ae86 <_printf_i+0x1f2>
 800ae82:	1b80      	subs	r0, r0, r6
 800ae84:	6060      	str	r0, [r4, #4]
 800ae86:	6863      	ldr	r3, [r4, #4]
 800ae88:	6123      	str	r3, [r4, #16]
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae90:	e7a8      	b.n	800ade4 <_printf_i+0x150>
 800ae92:	6923      	ldr	r3, [r4, #16]
 800ae94:	4632      	mov	r2, r6
 800ae96:	4649      	mov	r1, r9
 800ae98:	4640      	mov	r0, r8
 800ae9a:	47d0      	blx	sl
 800ae9c:	3001      	adds	r0, #1
 800ae9e:	d0ab      	beq.n	800adf8 <_printf_i+0x164>
 800aea0:	6823      	ldr	r3, [r4, #0]
 800aea2:	079b      	lsls	r3, r3, #30
 800aea4:	d413      	bmi.n	800aece <_printf_i+0x23a>
 800aea6:	68e0      	ldr	r0, [r4, #12]
 800aea8:	9b03      	ldr	r3, [sp, #12]
 800aeaa:	4298      	cmp	r0, r3
 800aeac:	bfb8      	it	lt
 800aeae:	4618      	movlt	r0, r3
 800aeb0:	e7a4      	b.n	800adfc <_printf_i+0x168>
 800aeb2:	2301      	movs	r3, #1
 800aeb4:	4632      	mov	r2, r6
 800aeb6:	4649      	mov	r1, r9
 800aeb8:	4640      	mov	r0, r8
 800aeba:	47d0      	blx	sl
 800aebc:	3001      	adds	r0, #1
 800aebe:	d09b      	beq.n	800adf8 <_printf_i+0x164>
 800aec0:	3501      	adds	r5, #1
 800aec2:	68e3      	ldr	r3, [r4, #12]
 800aec4:	9903      	ldr	r1, [sp, #12]
 800aec6:	1a5b      	subs	r3, r3, r1
 800aec8:	42ab      	cmp	r3, r5
 800aeca:	dcf2      	bgt.n	800aeb2 <_printf_i+0x21e>
 800aecc:	e7eb      	b.n	800aea6 <_printf_i+0x212>
 800aece:	2500      	movs	r5, #0
 800aed0:	f104 0619 	add.w	r6, r4, #25
 800aed4:	e7f5      	b.n	800aec2 <_printf_i+0x22e>
 800aed6:	bf00      	nop
 800aed8:	0800d49a 	.word	0x0800d49a
 800aedc:	0800d4ab 	.word	0x0800d4ab

0800aee0 <iprintf>:
 800aee0:	b40f      	push	{r0, r1, r2, r3}
 800aee2:	4b0a      	ldr	r3, [pc, #40]	; (800af0c <iprintf+0x2c>)
 800aee4:	b513      	push	{r0, r1, r4, lr}
 800aee6:	681c      	ldr	r4, [r3, #0]
 800aee8:	b124      	cbz	r4, 800aef4 <iprintf+0x14>
 800aeea:	69a3      	ldr	r3, [r4, #24]
 800aeec:	b913      	cbnz	r3, 800aef4 <iprintf+0x14>
 800aeee:	4620      	mov	r0, r4
 800aef0:	f000 fede 	bl	800bcb0 <__sinit>
 800aef4:	ab05      	add	r3, sp, #20
 800aef6:	9a04      	ldr	r2, [sp, #16]
 800aef8:	68a1      	ldr	r1, [r4, #8]
 800aefa:	9301      	str	r3, [sp, #4]
 800aefc:	4620      	mov	r0, r4
 800aefe:	f001 fbf5 	bl	800c6ec <_vfiprintf_r>
 800af02:	b002      	add	sp, #8
 800af04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af08:	b004      	add	sp, #16
 800af0a:	4770      	bx	lr
 800af0c:	20000090 	.word	0x20000090

0800af10 <quorem>:
 800af10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af14:	6903      	ldr	r3, [r0, #16]
 800af16:	690c      	ldr	r4, [r1, #16]
 800af18:	42a3      	cmp	r3, r4
 800af1a:	4607      	mov	r7, r0
 800af1c:	f2c0 8081 	blt.w	800b022 <quorem+0x112>
 800af20:	3c01      	subs	r4, #1
 800af22:	f101 0814 	add.w	r8, r1, #20
 800af26:	f100 0514 	add.w	r5, r0, #20
 800af2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800af2e:	9301      	str	r3, [sp, #4]
 800af30:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800af34:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800af38:	3301      	adds	r3, #1
 800af3a:	429a      	cmp	r2, r3
 800af3c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800af40:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800af44:	fbb2 f6f3 	udiv	r6, r2, r3
 800af48:	d331      	bcc.n	800afae <quorem+0x9e>
 800af4a:	f04f 0e00 	mov.w	lr, #0
 800af4e:	4640      	mov	r0, r8
 800af50:	46ac      	mov	ip, r5
 800af52:	46f2      	mov	sl, lr
 800af54:	f850 2b04 	ldr.w	r2, [r0], #4
 800af58:	b293      	uxth	r3, r2
 800af5a:	fb06 e303 	mla	r3, r6, r3, lr
 800af5e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800af62:	b29b      	uxth	r3, r3
 800af64:	ebaa 0303 	sub.w	r3, sl, r3
 800af68:	0c12      	lsrs	r2, r2, #16
 800af6a:	f8dc a000 	ldr.w	sl, [ip]
 800af6e:	fb06 e202 	mla	r2, r6, r2, lr
 800af72:	fa13 f38a 	uxtah	r3, r3, sl
 800af76:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800af7a:	fa1f fa82 	uxth.w	sl, r2
 800af7e:	f8dc 2000 	ldr.w	r2, [ip]
 800af82:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800af86:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800af8a:	b29b      	uxth	r3, r3
 800af8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800af90:	4581      	cmp	r9, r0
 800af92:	f84c 3b04 	str.w	r3, [ip], #4
 800af96:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800af9a:	d2db      	bcs.n	800af54 <quorem+0x44>
 800af9c:	f855 300b 	ldr.w	r3, [r5, fp]
 800afa0:	b92b      	cbnz	r3, 800afae <quorem+0x9e>
 800afa2:	9b01      	ldr	r3, [sp, #4]
 800afa4:	3b04      	subs	r3, #4
 800afa6:	429d      	cmp	r5, r3
 800afa8:	461a      	mov	r2, r3
 800afaa:	d32e      	bcc.n	800b00a <quorem+0xfa>
 800afac:	613c      	str	r4, [r7, #16]
 800afae:	4638      	mov	r0, r7
 800afb0:	f001 f9b8 	bl	800c324 <__mcmp>
 800afb4:	2800      	cmp	r0, #0
 800afb6:	db24      	blt.n	800b002 <quorem+0xf2>
 800afb8:	3601      	adds	r6, #1
 800afba:	4628      	mov	r0, r5
 800afbc:	f04f 0c00 	mov.w	ip, #0
 800afc0:	f858 2b04 	ldr.w	r2, [r8], #4
 800afc4:	f8d0 e000 	ldr.w	lr, [r0]
 800afc8:	b293      	uxth	r3, r2
 800afca:	ebac 0303 	sub.w	r3, ip, r3
 800afce:	0c12      	lsrs	r2, r2, #16
 800afd0:	fa13 f38e 	uxtah	r3, r3, lr
 800afd4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800afd8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800afdc:	b29b      	uxth	r3, r3
 800afde:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800afe2:	45c1      	cmp	r9, r8
 800afe4:	f840 3b04 	str.w	r3, [r0], #4
 800afe8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800afec:	d2e8      	bcs.n	800afc0 <quorem+0xb0>
 800afee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aff2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aff6:	b922      	cbnz	r2, 800b002 <quorem+0xf2>
 800aff8:	3b04      	subs	r3, #4
 800affa:	429d      	cmp	r5, r3
 800affc:	461a      	mov	r2, r3
 800affe:	d30a      	bcc.n	800b016 <quorem+0x106>
 800b000:	613c      	str	r4, [r7, #16]
 800b002:	4630      	mov	r0, r6
 800b004:	b003      	add	sp, #12
 800b006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b00a:	6812      	ldr	r2, [r2, #0]
 800b00c:	3b04      	subs	r3, #4
 800b00e:	2a00      	cmp	r2, #0
 800b010:	d1cc      	bne.n	800afac <quorem+0x9c>
 800b012:	3c01      	subs	r4, #1
 800b014:	e7c7      	b.n	800afa6 <quorem+0x96>
 800b016:	6812      	ldr	r2, [r2, #0]
 800b018:	3b04      	subs	r3, #4
 800b01a:	2a00      	cmp	r2, #0
 800b01c:	d1f0      	bne.n	800b000 <quorem+0xf0>
 800b01e:	3c01      	subs	r4, #1
 800b020:	e7eb      	b.n	800affa <quorem+0xea>
 800b022:	2000      	movs	r0, #0
 800b024:	e7ee      	b.n	800b004 <quorem+0xf4>
	...

0800b028 <_dtoa_r>:
 800b028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b02c:	ed2d 8b02 	vpush	{d8}
 800b030:	ec57 6b10 	vmov	r6, r7, d0
 800b034:	b095      	sub	sp, #84	; 0x54
 800b036:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b038:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b03c:	9105      	str	r1, [sp, #20]
 800b03e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800b042:	4604      	mov	r4, r0
 800b044:	9209      	str	r2, [sp, #36]	; 0x24
 800b046:	930f      	str	r3, [sp, #60]	; 0x3c
 800b048:	b975      	cbnz	r5, 800b068 <_dtoa_r+0x40>
 800b04a:	2010      	movs	r0, #16
 800b04c:	f000 fed6 	bl	800bdfc <malloc>
 800b050:	4602      	mov	r2, r0
 800b052:	6260      	str	r0, [r4, #36]	; 0x24
 800b054:	b920      	cbnz	r0, 800b060 <_dtoa_r+0x38>
 800b056:	4bb2      	ldr	r3, [pc, #712]	; (800b320 <_dtoa_r+0x2f8>)
 800b058:	21ea      	movs	r1, #234	; 0xea
 800b05a:	48b2      	ldr	r0, [pc, #712]	; (800b324 <_dtoa_r+0x2fc>)
 800b05c:	f001 fd9c 	bl	800cb98 <__assert_func>
 800b060:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b064:	6005      	str	r5, [r0, #0]
 800b066:	60c5      	str	r5, [r0, #12]
 800b068:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b06a:	6819      	ldr	r1, [r3, #0]
 800b06c:	b151      	cbz	r1, 800b084 <_dtoa_r+0x5c>
 800b06e:	685a      	ldr	r2, [r3, #4]
 800b070:	604a      	str	r2, [r1, #4]
 800b072:	2301      	movs	r3, #1
 800b074:	4093      	lsls	r3, r2
 800b076:	608b      	str	r3, [r1, #8]
 800b078:	4620      	mov	r0, r4
 800b07a:	f000 ff15 	bl	800bea8 <_Bfree>
 800b07e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b080:	2200      	movs	r2, #0
 800b082:	601a      	str	r2, [r3, #0]
 800b084:	1e3b      	subs	r3, r7, #0
 800b086:	bfb9      	ittee	lt
 800b088:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b08c:	9303      	strlt	r3, [sp, #12]
 800b08e:	2300      	movge	r3, #0
 800b090:	f8c8 3000 	strge.w	r3, [r8]
 800b094:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800b098:	4ba3      	ldr	r3, [pc, #652]	; (800b328 <_dtoa_r+0x300>)
 800b09a:	bfbc      	itt	lt
 800b09c:	2201      	movlt	r2, #1
 800b09e:	f8c8 2000 	strlt.w	r2, [r8]
 800b0a2:	ea33 0309 	bics.w	r3, r3, r9
 800b0a6:	d11b      	bne.n	800b0e0 <_dtoa_r+0xb8>
 800b0a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b0aa:	f242 730f 	movw	r3, #9999	; 0x270f
 800b0ae:	6013      	str	r3, [r2, #0]
 800b0b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b0b4:	4333      	orrs	r3, r6
 800b0b6:	f000 857a 	beq.w	800bbae <_dtoa_r+0xb86>
 800b0ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b0bc:	b963      	cbnz	r3, 800b0d8 <_dtoa_r+0xb0>
 800b0be:	4b9b      	ldr	r3, [pc, #620]	; (800b32c <_dtoa_r+0x304>)
 800b0c0:	e024      	b.n	800b10c <_dtoa_r+0xe4>
 800b0c2:	4b9b      	ldr	r3, [pc, #620]	; (800b330 <_dtoa_r+0x308>)
 800b0c4:	9300      	str	r3, [sp, #0]
 800b0c6:	3308      	adds	r3, #8
 800b0c8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b0ca:	6013      	str	r3, [r2, #0]
 800b0cc:	9800      	ldr	r0, [sp, #0]
 800b0ce:	b015      	add	sp, #84	; 0x54
 800b0d0:	ecbd 8b02 	vpop	{d8}
 800b0d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0d8:	4b94      	ldr	r3, [pc, #592]	; (800b32c <_dtoa_r+0x304>)
 800b0da:	9300      	str	r3, [sp, #0]
 800b0dc:	3303      	adds	r3, #3
 800b0de:	e7f3      	b.n	800b0c8 <_dtoa_r+0xa0>
 800b0e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	ec51 0b17 	vmov	r0, r1, d7
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800b0f0:	f7f5 fcea 	bl	8000ac8 <__aeabi_dcmpeq>
 800b0f4:	4680      	mov	r8, r0
 800b0f6:	b158      	cbz	r0, 800b110 <_dtoa_r+0xe8>
 800b0f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b0fa:	2301      	movs	r3, #1
 800b0fc:	6013      	str	r3, [r2, #0]
 800b0fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b100:	2b00      	cmp	r3, #0
 800b102:	f000 8551 	beq.w	800bba8 <_dtoa_r+0xb80>
 800b106:	488b      	ldr	r0, [pc, #556]	; (800b334 <_dtoa_r+0x30c>)
 800b108:	6018      	str	r0, [r3, #0]
 800b10a:	1e43      	subs	r3, r0, #1
 800b10c:	9300      	str	r3, [sp, #0]
 800b10e:	e7dd      	b.n	800b0cc <_dtoa_r+0xa4>
 800b110:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800b114:	aa12      	add	r2, sp, #72	; 0x48
 800b116:	a913      	add	r1, sp, #76	; 0x4c
 800b118:	4620      	mov	r0, r4
 800b11a:	f001 f9a7 	bl	800c46c <__d2b>
 800b11e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b122:	4683      	mov	fp, r0
 800b124:	2d00      	cmp	r5, #0
 800b126:	d07c      	beq.n	800b222 <_dtoa_r+0x1fa>
 800b128:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b12a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800b12e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b132:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800b136:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b13a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b13e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b142:	4b7d      	ldr	r3, [pc, #500]	; (800b338 <_dtoa_r+0x310>)
 800b144:	2200      	movs	r2, #0
 800b146:	4630      	mov	r0, r6
 800b148:	4639      	mov	r1, r7
 800b14a:	f7f5 f89d 	bl	8000288 <__aeabi_dsub>
 800b14e:	a36e      	add	r3, pc, #440	; (adr r3, 800b308 <_dtoa_r+0x2e0>)
 800b150:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b154:	f7f5 fa50 	bl	80005f8 <__aeabi_dmul>
 800b158:	a36d      	add	r3, pc, #436	; (adr r3, 800b310 <_dtoa_r+0x2e8>)
 800b15a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b15e:	f7f5 f895 	bl	800028c <__adddf3>
 800b162:	4606      	mov	r6, r0
 800b164:	4628      	mov	r0, r5
 800b166:	460f      	mov	r7, r1
 800b168:	f7f5 f9dc 	bl	8000524 <__aeabi_i2d>
 800b16c:	a36a      	add	r3, pc, #424	; (adr r3, 800b318 <_dtoa_r+0x2f0>)
 800b16e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b172:	f7f5 fa41 	bl	80005f8 <__aeabi_dmul>
 800b176:	4602      	mov	r2, r0
 800b178:	460b      	mov	r3, r1
 800b17a:	4630      	mov	r0, r6
 800b17c:	4639      	mov	r1, r7
 800b17e:	f7f5 f885 	bl	800028c <__adddf3>
 800b182:	4606      	mov	r6, r0
 800b184:	460f      	mov	r7, r1
 800b186:	f7f5 fce7 	bl	8000b58 <__aeabi_d2iz>
 800b18a:	2200      	movs	r2, #0
 800b18c:	4682      	mov	sl, r0
 800b18e:	2300      	movs	r3, #0
 800b190:	4630      	mov	r0, r6
 800b192:	4639      	mov	r1, r7
 800b194:	f7f5 fca2 	bl	8000adc <__aeabi_dcmplt>
 800b198:	b148      	cbz	r0, 800b1ae <_dtoa_r+0x186>
 800b19a:	4650      	mov	r0, sl
 800b19c:	f7f5 f9c2 	bl	8000524 <__aeabi_i2d>
 800b1a0:	4632      	mov	r2, r6
 800b1a2:	463b      	mov	r3, r7
 800b1a4:	f7f5 fc90 	bl	8000ac8 <__aeabi_dcmpeq>
 800b1a8:	b908      	cbnz	r0, 800b1ae <_dtoa_r+0x186>
 800b1aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b1ae:	f1ba 0f16 	cmp.w	sl, #22
 800b1b2:	d854      	bhi.n	800b25e <_dtoa_r+0x236>
 800b1b4:	4b61      	ldr	r3, [pc, #388]	; (800b33c <_dtoa_r+0x314>)
 800b1b6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b1ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b1c2:	f7f5 fc8b 	bl	8000adc <__aeabi_dcmplt>
 800b1c6:	2800      	cmp	r0, #0
 800b1c8:	d04b      	beq.n	800b262 <_dtoa_r+0x23a>
 800b1ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	930e      	str	r3, [sp, #56]	; 0x38
 800b1d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b1d4:	1b5d      	subs	r5, r3, r5
 800b1d6:	1e6b      	subs	r3, r5, #1
 800b1d8:	9304      	str	r3, [sp, #16]
 800b1da:	bf43      	ittte	mi
 800b1dc:	2300      	movmi	r3, #0
 800b1de:	f1c5 0801 	rsbmi	r8, r5, #1
 800b1e2:	9304      	strmi	r3, [sp, #16]
 800b1e4:	f04f 0800 	movpl.w	r8, #0
 800b1e8:	f1ba 0f00 	cmp.w	sl, #0
 800b1ec:	db3b      	blt.n	800b266 <_dtoa_r+0x23e>
 800b1ee:	9b04      	ldr	r3, [sp, #16]
 800b1f0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800b1f4:	4453      	add	r3, sl
 800b1f6:	9304      	str	r3, [sp, #16]
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	9306      	str	r3, [sp, #24]
 800b1fc:	9b05      	ldr	r3, [sp, #20]
 800b1fe:	2b09      	cmp	r3, #9
 800b200:	d869      	bhi.n	800b2d6 <_dtoa_r+0x2ae>
 800b202:	2b05      	cmp	r3, #5
 800b204:	bfc4      	itt	gt
 800b206:	3b04      	subgt	r3, #4
 800b208:	9305      	strgt	r3, [sp, #20]
 800b20a:	9b05      	ldr	r3, [sp, #20]
 800b20c:	f1a3 0302 	sub.w	r3, r3, #2
 800b210:	bfcc      	ite	gt
 800b212:	2500      	movgt	r5, #0
 800b214:	2501      	movle	r5, #1
 800b216:	2b03      	cmp	r3, #3
 800b218:	d869      	bhi.n	800b2ee <_dtoa_r+0x2c6>
 800b21a:	e8df f003 	tbb	[pc, r3]
 800b21e:	4e2c      	.short	0x4e2c
 800b220:	5a4c      	.short	0x5a4c
 800b222:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800b226:	441d      	add	r5, r3
 800b228:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b22c:	2b20      	cmp	r3, #32
 800b22e:	bfc1      	itttt	gt
 800b230:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b234:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b238:	fa09 f303 	lslgt.w	r3, r9, r3
 800b23c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b240:	bfda      	itte	le
 800b242:	f1c3 0320 	rsble	r3, r3, #32
 800b246:	fa06 f003 	lslle.w	r0, r6, r3
 800b24a:	4318      	orrgt	r0, r3
 800b24c:	f7f5 f95a 	bl	8000504 <__aeabi_ui2d>
 800b250:	2301      	movs	r3, #1
 800b252:	4606      	mov	r6, r0
 800b254:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b258:	3d01      	subs	r5, #1
 800b25a:	9310      	str	r3, [sp, #64]	; 0x40
 800b25c:	e771      	b.n	800b142 <_dtoa_r+0x11a>
 800b25e:	2301      	movs	r3, #1
 800b260:	e7b6      	b.n	800b1d0 <_dtoa_r+0x1a8>
 800b262:	900e      	str	r0, [sp, #56]	; 0x38
 800b264:	e7b5      	b.n	800b1d2 <_dtoa_r+0x1aa>
 800b266:	f1ca 0300 	rsb	r3, sl, #0
 800b26a:	9306      	str	r3, [sp, #24]
 800b26c:	2300      	movs	r3, #0
 800b26e:	eba8 080a 	sub.w	r8, r8, sl
 800b272:	930d      	str	r3, [sp, #52]	; 0x34
 800b274:	e7c2      	b.n	800b1fc <_dtoa_r+0x1d4>
 800b276:	2300      	movs	r3, #0
 800b278:	9308      	str	r3, [sp, #32]
 800b27a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	dc39      	bgt.n	800b2f4 <_dtoa_r+0x2cc>
 800b280:	f04f 0901 	mov.w	r9, #1
 800b284:	f8cd 9004 	str.w	r9, [sp, #4]
 800b288:	464b      	mov	r3, r9
 800b28a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800b28e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b290:	2200      	movs	r2, #0
 800b292:	6042      	str	r2, [r0, #4]
 800b294:	2204      	movs	r2, #4
 800b296:	f102 0614 	add.w	r6, r2, #20
 800b29a:	429e      	cmp	r6, r3
 800b29c:	6841      	ldr	r1, [r0, #4]
 800b29e:	d92f      	bls.n	800b300 <_dtoa_r+0x2d8>
 800b2a0:	4620      	mov	r0, r4
 800b2a2:	f000 fdc1 	bl	800be28 <_Balloc>
 800b2a6:	9000      	str	r0, [sp, #0]
 800b2a8:	2800      	cmp	r0, #0
 800b2aa:	d14b      	bne.n	800b344 <_dtoa_r+0x31c>
 800b2ac:	4b24      	ldr	r3, [pc, #144]	; (800b340 <_dtoa_r+0x318>)
 800b2ae:	4602      	mov	r2, r0
 800b2b0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b2b4:	e6d1      	b.n	800b05a <_dtoa_r+0x32>
 800b2b6:	2301      	movs	r3, #1
 800b2b8:	e7de      	b.n	800b278 <_dtoa_r+0x250>
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	9308      	str	r3, [sp, #32]
 800b2be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2c0:	eb0a 0903 	add.w	r9, sl, r3
 800b2c4:	f109 0301 	add.w	r3, r9, #1
 800b2c8:	2b01      	cmp	r3, #1
 800b2ca:	9301      	str	r3, [sp, #4]
 800b2cc:	bfb8      	it	lt
 800b2ce:	2301      	movlt	r3, #1
 800b2d0:	e7dd      	b.n	800b28e <_dtoa_r+0x266>
 800b2d2:	2301      	movs	r3, #1
 800b2d4:	e7f2      	b.n	800b2bc <_dtoa_r+0x294>
 800b2d6:	2501      	movs	r5, #1
 800b2d8:	2300      	movs	r3, #0
 800b2da:	9305      	str	r3, [sp, #20]
 800b2dc:	9508      	str	r5, [sp, #32]
 800b2de:	f04f 39ff 	mov.w	r9, #4294967295
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	f8cd 9004 	str.w	r9, [sp, #4]
 800b2e8:	2312      	movs	r3, #18
 800b2ea:	9209      	str	r2, [sp, #36]	; 0x24
 800b2ec:	e7cf      	b.n	800b28e <_dtoa_r+0x266>
 800b2ee:	2301      	movs	r3, #1
 800b2f0:	9308      	str	r3, [sp, #32]
 800b2f2:	e7f4      	b.n	800b2de <_dtoa_r+0x2b6>
 800b2f4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800b2f8:	f8cd 9004 	str.w	r9, [sp, #4]
 800b2fc:	464b      	mov	r3, r9
 800b2fe:	e7c6      	b.n	800b28e <_dtoa_r+0x266>
 800b300:	3101      	adds	r1, #1
 800b302:	6041      	str	r1, [r0, #4]
 800b304:	0052      	lsls	r2, r2, #1
 800b306:	e7c6      	b.n	800b296 <_dtoa_r+0x26e>
 800b308:	636f4361 	.word	0x636f4361
 800b30c:	3fd287a7 	.word	0x3fd287a7
 800b310:	8b60c8b3 	.word	0x8b60c8b3
 800b314:	3fc68a28 	.word	0x3fc68a28
 800b318:	509f79fb 	.word	0x509f79fb
 800b31c:	3fd34413 	.word	0x3fd34413
 800b320:	0800d4c9 	.word	0x0800d4c9
 800b324:	0800d4e0 	.word	0x0800d4e0
 800b328:	7ff00000 	.word	0x7ff00000
 800b32c:	0800d4c5 	.word	0x0800d4c5
 800b330:	0800d4bc 	.word	0x0800d4bc
 800b334:	0800d499 	.word	0x0800d499
 800b338:	3ff80000 	.word	0x3ff80000
 800b33c:	0800d638 	.word	0x0800d638
 800b340:	0800d53f 	.word	0x0800d53f
 800b344:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b346:	9a00      	ldr	r2, [sp, #0]
 800b348:	601a      	str	r2, [r3, #0]
 800b34a:	9b01      	ldr	r3, [sp, #4]
 800b34c:	2b0e      	cmp	r3, #14
 800b34e:	f200 80ad 	bhi.w	800b4ac <_dtoa_r+0x484>
 800b352:	2d00      	cmp	r5, #0
 800b354:	f000 80aa 	beq.w	800b4ac <_dtoa_r+0x484>
 800b358:	f1ba 0f00 	cmp.w	sl, #0
 800b35c:	dd36      	ble.n	800b3cc <_dtoa_r+0x3a4>
 800b35e:	4ac3      	ldr	r2, [pc, #780]	; (800b66c <_dtoa_r+0x644>)
 800b360:	f00a 030f 	and.w	r3, sl, #15
 800b364:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b368:	ed93 7b00 	vldr	d7, [r3]
 800b36c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800b370:	ea4f 172a 	mov.w	r7, sl, asr #4
 800b374:	eeb0 8a47 	vmov.f32	s16, s14
 800b378:	eef0 8a67 	vmov.f32	s17, s15
 800b37c:	d016      	beq.n	800b3ac <_dtoa_r+0x384>
 800b37e:	4bbc      	ldr	r3, [pc, #752]	; (800b670 <_dtoa_r+0x648>)
 800b380:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b384:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b388:	f7f5 fa60 	bl	800084c <__aeabi_ddiv>
 800b38c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b390:	f007 070f 	and.w	r7, r7, #15
 800b394:	2503      	movs	r5, #3
 800b396:	4eb6      	ldr	r6, [pc, #728]	; (800b670 <_dtoa_r+0x648>)
 800b398:	b957      	cbnz	r7, 800b3b0 <_dtoa_r+0x388>
 800b39a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b39e:	ec53 2b18 	vmov	r2, r3, d8
 800b3a2:	f7f5 fa53 	bl	800084c <__aeabi_ddiv>
 800b3a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b3aa:	e029      	b.n	800b400 <_dtoa_r+0x3d8>
 800b3ac:	2502      	movs	r5, #2
 800b3ae:	e7f2      	b.n	800b396 <_dtoa_r+0x36e>
 800b3b0:	07f9      	lsls	r1, r7, #31
 800b3b2:	d508      	bpl.n	800b3c6 <_dtoa_r+0x39e>
 800b3b4:	ec51 0b18 	vmov	r0, r1, d8
 800b3b8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b3bc:	f7f5 f91c 	bl	80005f8 <__aeabi_dmul>
 800b3c0:	ec41 0b18 	vmov	d8, r0, r1
 800b3c4:	3501      	adds	r5, #1
 800b3c6:	107f      	asrs	r7, r7, #1
 800b3c8:	3608      	adds	r6, #8
 800b3ca:	e7e5      	b.n	800b398 <_dtoa_r+0x370>
 800b3cc:	f000 80a6 	beq.w	800b51c <_dtoa_r+0x4f4>
 800b3d0:	f1ca 0600 	rsb	r6, sl, #0
 800b3d4:	4ba5      	ldr	r3, [pc, #660]	; (800b66c <_dtoa_r+0x644>)
 800b3d6:	4fa6      	ldr	r7, [pc, #664]	; (800b670 <_dtoa_r+0x648>)
 800b3d8:	f006 020f 	and.w	r2, r6, #15
 800b3dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3e4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b3e8:	f7f5 f906 	bl	80005f8 <__aeabi_dmul>
 800b3ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b3f0:	1136      	asrs	r6, r6, #4
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	2502      	movs	r5, #2
 800b3f6:	2e00      	cmp	r6, #0
 800b3f8:	f040 8085 	bne.w	800b506 <_dtoa_r+0x4de>
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d1d2      	bne.n	800b3a6 <_dtoa_r+0x37e>
 800b400:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b402:	2b00      	cmp	r3, #0
 800b404:	f000 808c 	beq.w	800b520 <_dtoa_r+0x4f8>
 800b408:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b40c:	4b99      	ldr	r3, [pc, #612]	; (800b674 <_dtoa_r+0x64c>)
 800b40e:	2200      	movs	r2, #0
 800b410:	4630      	mov	r0, r6
 800b412:	4639      	mov	r1, r7
 800b414:	f7f5 fb62 	bl	8000adc <__aeabi_dcmplt>
 800b418:	2800      	cmp	r0, #0
 800b41a:	f000 8081 	beq.w	800b520 <_dtoa_r+0x4f8>
 800b41e:	9b01      	ldr	r3, [sp, #4]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d07d      	beq.n	800b520 <_dtoa_r+0x4f8>
 800b424:	f1b9 0f00 	cmp.w	r9, #0
 800b428:	dd3c      	ble.n	800b4a4 <_dtoa_r+0x47c>
 800b42a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b42e:	9307      	str	r3, [sp, #28]
 800b430:	2200      	movs	r2, #0
 800b432:	4b91      	ldr	r3, [pc, #580]	; (800b678 <_dtoa_r+0x650>)
 800b434:	4630      	mov	r0, r6
 800b436:	4639      	mov	r1, r7
 800b438:	f7f5 f8de 	bl	80005f8 <__aeabi_dmul>
 800b43c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b440:	3501      	adds	r5, #1
 800b442:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800b446:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b44a:	4628      	mov	r0, r5
 800b44c:	f7f5 f86a 	bl	8000524 <__aeabi_i2d>
 800b450:	4632      	mov	r2, r6
 800b452:	463b      	mov	r3, r7
 800b454:	f7f5 f8d0 	bl	80005f8 <__aeabi_dmul>
 800b458:	4b88      	ldr	r3, [pc, #544]	; (800b67c <_dtoa_r+0x654>)
 800b45a:	2200      	movs	r2, #0
 800b45c:	f7f4 ff16 	bl	800028c <__adddf3>
 800b460:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b464:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b468:	9303      	str	r3, [sp, #12]
 800b46a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d15c      	bne.n	800b52a <_dtoa_r+0x502>
 800b470:	4b83      	ldr	r3, [pc, #524]	; (800b680 <_dtoa_r+0x658>)
 800b472:	2200      	movs	r2, #0
 800b474:	4630      	mov	r0, r6
 800b476:	4639      	mov	r1, r7
 800b478:	f7f4 ff06 	bl	8000288 <__aeabi_dsub>
 800b47c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b480:	4606      	mov	r6, r0
 800b482:	460f      	mov	r7, r1
 800b484:	f7f5 fb48 	bl	8000b18 <__aeabi_dcmpgt>
 800b488:	2800      	cmp	r0, #0
 800b48a:	f040 8296 	bne.w	800b9ba <_dtoa_r+0x992>
 800b48e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b492:	4630      	mov	r0, r6
 800b494:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b498:	4639      	mov	r1, r7
 800b49a:	f7f5 fb1f 	bl	8000adc <__aeabi_dcmplt>
 800b49e:	2800      	cmp	r0, #0
 800b4a0:	f040 8288 	bne.w	800b9b4 <_dtoa_r+0x98c>
 800b4a4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b4a8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b4ac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	f2c0 8158 	blt.w	800b764 <_dtoa_r+0x73c>
 800b4b4:	f1ba 0f0e 	cmp.w	sl, #14
 800b4b8:	f300 8154 	bgt.w	800b764 <_dtoa_r+0x73c>
 800b4bc:	4b6b      	ldr	r3, [pc, #428]	; (800b66c <_dtoa_r+0x644>)
 800b4be:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b4c2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b4c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	f280 80e3 	bge.w	800b694 <_dtoa_r+0x66c>
 800b4ce:	9b01      	ldr	r3, [sp, #4]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	f300 80df 	bgt.w	800b694 <_dtoa_r+0x66c>
 800b4d6:	f040 826d 	bne.w	800b9b4 <_dtoa_r+0x98c>
 800b4da:	4b69      	ldr	r3, [pc, #420]	; (800b680 <_dtoa_r+0x658>)
 800b4dc:	2200      	movs	r2, #0
 800b4de:	4640      	mov	r0, r8
 800b4e0:	4649      	mov	r1, r9
 800b4e2:	f7f5 f889 	bl	80005f8 <__aeabi_dmul>
 800b4e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b4ea:	f7f5 fb0b 	bl	8000b04 <__aeabi_dcmpge>
 800b4ee:	9e01      	ldr	r6, [sp, #4]
 800b4f0:	4637      	mov	r7, r6
 800b4f2:	2800      	cmp	r0, #0
 800b4f4:	f040 8243 	bne.w	800b97e <_dtoa_r+0x956>
 800b4f8:	9d00      	ldr	r5, [sp, #0]
 800b4fa:	2331      	movs	r3, #49	; 0x31
 800b4fc:	f805 3b01 	strb.w	r3, [r5], #1
 800b500:	f10a 0a01 	add.w	sl, sl, #1
 800b504:	e23f      	b.n	800b986 <_dtoa_r+0x95e>
 800b506:	07f2      	lsls	r2, r6, #31
 800b508:	d505      	bpl.n	800b516 <_dtoa_r+0x4ee>
 800b50a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b50e:	f7f5 f873 	bl	80005f8 <__aeabi_dmul>
 800b512:	3501      	adds	r5, #1
 800b514:	2301      	movs	r3, #1
 800b516:	1076      	asrs	r6, r6, #1
 800b518:	3708      	adds	r7, #8
 800b51a:	e76c      	b.n	800b3f6 <_dtoa_r+0x3ce>
 800b51c:	2502      	movs	r5, #2
 800b51e:	e76f      	b.n	800b400 <_dtoa_r+0x3d8>
 800b520:	9b01      	ldr	r3, [sp, #4]
 800b522:	f8cd a01c 	str.w	sl, [sp, #28]
 800b526:	930c      	str	r3, [sp, #48]	; 0x30
 800b528:	e78d      	b.n	800b446 <_dtoa_r+0x41e>
 800b52a:	9900      	ldr	r1, [sp, #0]
 800b52c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b52e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b530:	4b4e      	ldr	r3, [pc, #312]	; (800b66c <_dtoa_r+0x644>)
 800b532:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b536:	4401      	add	r1, r0
 800b538:	9102      	str	r1, [sp, #8]
 800b53a:	9908      	ldr	r1, [sp, #32]
 800b53c:	eeb0 8a47 	vmov.f32	s16, s14
 800b540:	eef0 8a67 	vmov.f32	s17, s15
 800b544:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b548:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b54c:	2900      	cmp	r1, #0
 800b54e:	d045      	beq.n	800b5dc <_dtoa_r+0x5b4>
 800b550:	494c      	ldr	r1, [pc, #304]	; (800b684 <_dtoa_r+0x65c>)
 800b552:	2000      	movs	r0, #0
 800b554:	f7f5 f97a 	bl	800084c <__aeabi_ddiv>
 800b558:	ec53 2b18 	vmov	r2, r3, d8
 800b55c:	f7f4 fe94 	bl	8000288 <__aeabi_dsub>
 800b560:	9d00      	ldr	r5, [sp, #0]
 800b562:	ec41 0b18 	vmov	d8, r0, r1
 800b566:	4639      	mov	r1, r7
 800b568:	4630      	mov	r0, r6
 800b56a:	f7f5 faf5 	bl	8000b58 <__aeabi_d2iz>
 800b56e:	900c      	str	r0, [sp, #48]	; 0x30
 800b570:	f7f4 ffd8 	bl	8000524 <__aeabi_i2d>
 800b574:	4602      	mov	r2, r0
 800b576:	460b      	mov	r3, r1
 800b578:	4630      	mov	r0, r6
 800b57a:	4639      	mov	r1, r7
 800b57c:	f7f4 fe84 	bl	8000288 <__aeabi_dsub>
 800b580:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b582:	3330      	adds	r3, #48	; 0x30
 800b584:	f805 3b01 	strb.w	r3, [r5], #1
 800b588:	ec53 2b18 	vmov	r2, r3, d8
 800b58c:	4606      	mov	r6, r0
 800b58e:	460f      	mov	r7, r1
 800b590:	f7f5 faa4 	bl	8000adc <__aeabi_dcmplt>
 800b594:	2800      	cmp	r0, #0
 800b596:	d165      	bne.n	800b664 <_dtoa_r+0x63c>
 800b598:	4632      	mov	r2, r6
 800b59a:	463b      	mov	r3, r7
 800b59c:	4935      	ldr	r1, [pc, #212]	; (800b674 <_dtoa_r+0x64c>)
 800b59e:	2000      	movs	r0, #0
 800b5a0:	f7f4 fe72 	bl	8000288 <__aeabi_dsub>
 800b5a4:	ec53 2b18 	vmov	r2, r3, d8
 800b5a8:	f7f5 fa98 	bl	8000adc <__aeabi_dcmplt>
 800b5ac:	2800      	cmp	r0, #0
 800b5ae:	f040 80b9 	bne.w	800b724 <_dtoa_r+0x6fc>
 800b5b2:	9b02      	ldr	r3, [sp, #8]
 800b5b4:	429d      	cmp	r5, r3
 800b5b6:	f43f af75 	beq.w	800b4a4 <_dtoa_r+0x47c>
 800b5ba:	4b2f      	ldr	r3, [pc, #188]	; (800b678 <_dtoa_r+0x650>)
 800b5bc:	ec51 0b18 	vmov	r0, r1, d8
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	f7f5 f819 	bl	80005f8 <__aeabi_dmul>
 800b5c6:	4b2c      	ldr	r3, [pc, #176]	; (800b678 <_dtoa_r+0x650>)
 800b5c8:	ec41 0b18 	vmov	d8, r0, r1
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	4630      	mov	r0, r6
 800b5d0:	4639      	mov	r1, r7
 800b5d2:	f7f5 f811 	bl	80005f8 <__aeabi_dmul>
 800b5d6:	4606      	mov	r6, r0
 800b5d8:	460f      	mov	r7, r1
 800b5da:	e7c4      	b.n	800b566 <_dtoa_r+0x53e>
 800b5dc:	ec51 0b17 	vmov	r0, r1, d7
 800b5e0:	f7f5 f80a 	bl	80005f8 <__aeabi_dmul>
 800b5e4:	9b02      	ldr	r3, [sp, #8]
 800b5e6:	9d00      	ldr	r5, [sp, #0]
 800b5e8:	930c      	str	r3, [sp, #48]	; 0x30
 800b5ea:	ec41 0b18 	vmov	d8, r0, r1
 800b5ee:	4639      	mov	r1, r7
 800b5f0:	4630      	mov	r0, r6
 800b5f2:	f7f5 fab1 	bl	8000b58 <__aeabi_d2iz>
 800b5f6:	9011      	str	r0, [sp, #68]	; 0x44
 800b5f8:	f7f4 ff94 	bl	8000524 <__aeabi_i2d>
 800b5fc:	4602      	mov	r2, r0
 800b5fe:	460b      	mov	r3, r1
 800b600:	4630      	mov	r0, r6
 800b602:	4639      	mov	r1, r7
 800b604:	f7f4 fe40 	bl	8000288 <__aeabi_dsub>
 800b608:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b60a:	3330      	adds	r3, #48	; 0x30
 800b60c:	f805 3b01 	strb.w	r3, [r5], #1
 800b610:	9b02      	ldr	r3, [sp, #8]
 800b612:	429d      	cmp	r5, r3
 800b614:	4606      	mov	r6, r0
 800b616:	460f      	mov	r7, r1
 800b618:	f04f 0200 	mov.w	r2, #0
 800b61c:	d134      	bne.n	800b688 <_dtoa_r+0x660>
 800b61e:	4b19      	ldr	r3, [pc, #100]	; (800b684 <_dtoa_r+0x65c>)
 800b620:	ec51 0b18 	vmov	r0, r1, d8
 800b624:	f7f4 fe32 	bl	800028c <__adddf3>
 800b628:	4602      	mov	r2, r0
 800b62a:	460b      	mov	r3, r1
 800b62c:	4630      	mov	r0, r6
 800b62e:	4639      	mov	r1, r7
 800b630:	f7f5 fa72 	bl	8000b18 <__aeabi_dcmpgt>
 800b634:	2800      	cmp	r0, #0
 800b636:	d175      	bne.n	800b724 <_dtoa_r+0x6fc>
 800b638:	ec53 2b18 	vmov	r2, r3, d8
 800b63c:	4911      	ldr	r1, [pc, #68]	; (800b684 <_dtoa_r+0x65c>)
 800b63e:	2000      	movs	r0, #0
 800b640:	f7f4 fe22 	bl	8000288 <__aeabi_dsub>
 800b644:	4602      	mov	r2, r0
 800b646:	460b      	mov	r3, r1
 800b648:	4630      	mov	r0, r6
 800b64a:	4639      	mov	r1, r7
 800b64c:	f7f5 fa46 	bl	8000adc <__aeabi_dcmplt>
 800b650:	2800      	cmp	r0, #0
 800b652:	f43f af27 	beq.w	800b4a4 <_dtoa_r+0x47c>
 800b656:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b658:	1e6b      	subs	r3, r5, #1
 800b65a:	930c      	str	r3, [sp, #48]	; 0x30
 800b65c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b660:	2b30      	cmp	r3, #48	; 0x30
 800b662:	d0f8      	beq.n	800b656 <_dtoa_r+0x62e>
 800b664:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b668:	e04a      	b.n	800b700 <_dtoa_r+0x6d8>
 800b66a:	bf00      	nop
 800b66c:	0800d638 	.word	0x0800d638
 800b670:	0800d610 	.word	0x0800d610
 800b674:	3ff00000 	.word	0x3ff00000
 800b678:	40240000 	.word	0x40240000
 800b67c:	401c0000 	.word	0x401c0000
 800b680:	40140000 	.word	0x40140000
 800b684:	3fe00000 	.word	0x3fe00000
 800b688:	4baf      	ldr	r3, [pc, #700]	; (800b948 <_dtoa_r+0x920>)
 800b68a:	f7f4 ffb5 	bl	80005f8 <__aeabi_dmul>
 800b68e:	4606      	mov	r6, r0
 800b690:	460f      	mov	r7, r1
 800b692:	e7ac      	b.n	800b5ee <_dtoa_r+0x5c6>
 800b694:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b698:	9d00      	ldr	r5, [sp, #0]
 800b69a:	4642      	mov	r2, r8
 800b69c:	464b      	mov	r3, r9
 800b69e:	4630      	mov	r0, r6
 800b6a0:	4639      	mov	r1, r7
 800b6a2:	f7f5 f8d3 	bl	800084c <__aeabi_ddiv>
 800b6a6:	f7f5 fa57 	bl	8000b58 <__aeabi_d2iz>
 800b6aa:	9002      	str	r0, [sp, #8]
 800b6ac:	f7f4 ff3a 	bl	8000524 <__aeabi_i2d>
 800b6b0:	4642      	mov	r2, r8
 800b6b2:	464b      	mov	r3, r9
 800b6b4:	f7f4 ffa0 	bl	80005f8 <__aeabi_dmul>
 800b6b8:	4602      	mov	r2, r0
 800b6ba:	460b      	mov	r3, r1
 800b6bc:	4630      	mov	r0, r6
 800b6be:	4639      	mov	r1, r7
 800b6c0:	f7f4 fde2 	bl	8000288 <__aeabi_dsub>
 800b6c4:	9e02      	ldr	r6, [sp, #8]
 800b6c6:	9f01      	ldr	r7, [sp, #4]
 800b6c8:	3630      	adds	r6, #48	; 0x30
 800b6ca:	f805 6b01 	strb.w	r6, [r5], #1
 800b6ce:	9e00      	ldr	r6, [sp, #0]
 800b6d0:	1bae      	subs	r6, r5, r6
 800b6d2:	42b7      	cmp	r7, r6
 800b6d4:	4602      	mov	r2, r0
 800b6d6:	460b      	mov	r3, r1
 800b6d8:	d137      	bne.n	800b74a <_dtoa_r+0x722>
 800b6da:	f7f4 fdd7 	bl	800028c <__adddf3>
 800b6de:	4642      	mov	r2, r8
 800b6e0:	464b      	mov	r3, r9
 800b6e2:	4606      	mov	r6, r0
 800b6e4:	460f      	mov	r7, r1
 800b6e6:	f7f5 fa17 	bl	8000b18 <__aeabi_dcmpgt>
 800b6ea:	b9c8      	cbnz	r0, 800b720 <_dtoa_r+0x6f8>
 800b6ec:	4642      	mov	r2, r8
 800b6ee:	464b      	mov	r3, r9
 800b6f0:	4630      	mov	r0, r6
 800b6f2:	4639      	mov	r1, r7
 800b6f4:	f7f5 f9e8 	bl	8000ac8 <__aeabi_dcmpeq>
 800b6f8:	b110      	cbz	r0, 800b700 <_dtoa_r+0x6d8>
 800b6fa:	9b02      	ldr	r3, [sp, #8]
 800b6fc:	07d9      	lsls	r1, r3, #31
 800b6fe:	d40f      	bmi.n	800b720 <_dtoa_r+0x6f8>
 800b700:	4620      	mov	r0, r4
 800b702:	4659      	mov	r1, fp
 800b704:	f000 fbd0 	bl	800bea8 <_Bfree>
 800b708:	2300      	movs	r3, #0
 800b70a:	702b      	strb	r3, [r5, #0]
 800b70c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b70e:	f10a 0001 	add.w	r0, sl, #1
 800b712:	6018      	str	r0, [r3, #0]
 800b714:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b716:	2b00      	cmp	r3, #0
 800b718:	f43f acd8 	beq.w	800b0cc <_dtoa_r+0xa4>
 800b71c:	601d      	str	r5, [r3, #0]
 800b71e:	e4d5      	b.n	800b0cc <_dtoa_r+0xa4>
 800b720:	f8cd a01c 	str.w	sl, [sp, #28]
 800b724:	462b      	mov	r3, r5
 800b726:	461d      	mov	r5, r3
 800b728:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b72c:	2a39      	cmp	r2, #57	; 0x39
 800b72e:	d108      	bne.n	800b742 <_dtoa_r+0x71a>
 800b730:	9a00      	ldr	r2, [sp, #0]
 800b732:	429a      	cmp	r2, r3
 800b734:	d1f7      	bne.n	800b726 <_dtoa_r+0x6fe>
 800b736:	9a07      	ldr	r2, [sp, #28]
 800b738:	9900      	ldr	r1, [sp, #0]
 800b73a:	3201      	adds	r2, #1
 800b73c:	9207      	str	r2, [sp, #28]
 800b73e:	2230      	movs	r2, #48	; 0x30
 800b740:	700a      	strb	r2, [r1, #0]
 800b742:	781a      	ldrb	r2, [r3, #0]
 800b744:	3201      	adds	r2, #1
 800b746:	701a      	strb	r2, [r3, #0]
 800b748:	e78c      	b.n	800b664 <_dtoa_r+0x63c>
 800b74a:	4b7f      	ldr	r3, [pc, #508]	; (800b948 <_dtoa_r+0x920>)
 800b74c:	2200      	movs	r2, #0
 800b74e:	f7f4 ff53 	bl	80005f8 <__aeabi_dmul>
 800b752:	2200      	movs	r2, #0
 800b754:	2300      	movs	r3, #0
 800b756:	4606      	mov	r6, r0
 800b758:	460f      	mov	r7, r1
 800b75a:	f7f5 f9b5 	bl	8000ac8 <__aeabi_dcmpeq>
 800b75e:	2800      	cmp	r0, #0
 800b760:	d09b      	beq.n	800b69a <_dtoa_r+0x672>
 800b762:	e7cd      	b.n	800b700 <_dtoa_r+0x6d8>
 800b764:	9a08      	ldr	r2, [sp, #32]
 800b766:	2a00      	cmp	r2, #0
 800b768:	f000 80c4 	beq.w	800b8f4 <_dtoa_r+0x8cc>
 800b76c:	9a05      	ldr	r2, [sp, #20]
 800b76e:	2a01      	cmp	r2, #1
 800b770:	f300 80a8 	bgt.w	800b8c4 <_dtoa_r+0x89c>
 800b774:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b776:	2a00      	cmp	r2, #0
 800b778:	f000 80a0 	beq.w	800b8bc <_dtoa_r+0x894>
 800b77c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b780:	9e06      	ldr	r6, [sp, #24]
 800b782:	4645      	mov	r5, r8
 800b784:	9a04      	ldr	r2, [sp, #16]
 800b786:	2101      	movs	r1, #1
 800b788:	441a      	add	r2, r3
 800b78a:	4620      	mov	r0, r4
 800b78c:	4498      	add	r8, r3
 800b78e:	9204      	str	r2, [sp, #16]
 800b790:	f000 fc46 	bl	800c020 <__i2b>
 800b794:	4607      	mov	r7, r0
 800b796:	2d00      	cmp	r5, #0
 800b798:	dd0b      	ble.n	800b7b2 <_dtoa_r+0x78a>
 800b79a:	9b04      	ldr	r3, [sp, #16]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	dd08      	ble.n	800b7b2 <_dtoa_r+0x78a>
 800b7a0:	42ab      	cmp	r3, r5
 800b7a2:	9a04      	ldr	r2, [sp, #16]
 800b7a4:	bfa8      	it	ge
 800b7a6:	462b      	movge	r3, r5
 800b7a8:	eba8 0803 	sub.w	r8, r8, r3
 800b7ac:	1aed      	subs	r5, r5, r3
 800b7ae:	1ad3      	subs	r3, r2, r3
 800b7b0:	9304      	str	r3, [sp, #16]
 800b7b2:	9b06      	ldr	r3, [sp, #24]
 800b7b4:	b1fb      	cbz	r3, 800b7f6 <_dtoa_r+0x7ce>
 800b7b6:	9b08      	ldr	r3, [sp, #32]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	f000 809f 	beq.w	800b8fc <_dtoa_r+0x8d4>
 800b7be:	2e00      	cmp	r6, #0
 800b7c0:	dd11      	ble.n	800b7e6 <_dtoa_r+0x7be>
 800b7c2:	4639      	mov	r1, r7
 800b7c4:	4632      	mov	r2, r6
 800b7c6:	4620      	mov	r0, r4
 800b7c8:	f000 fce6 	bl	800c198 <__pow5mult>
 800b7cc:	465a      	mov	r2, fp
 800b7ce:	4601      	mov	r1, r0
 800b7d0:	4607      	mov	r7, r0
 800b7d2:	4620      	mov	r0, r4
 800b7d4:	f000 fc3a 	bl	800c04c <__multiply>
 800b7d8:	4659      	mov	r1, fp
 800b7da:	9007      	str	r0, [sp, #28]
 800b7dc:	4620      	mov	r0, r4
 800b7de:	f000 fb63 	bl	800bea8 <_Bfree>
 800b7e2:	9b07      	ldr	r3, [sp, #28]
 800b7e4:	469b      	mov	fp, r3
 800b7e6:	9b06      	ldr	r3, [sp, #24]
 800b7e8:	1b9a      	subs	r2, r3, r6
 800b7ea:	d004      	beq.n	800b7f6 <_dtoa_r+0x7ce>
 800b7ec:	4659      	mov	r1, fp
 800b7ee:	4620      	mov	r0, r4
 800b7f0:	f000 fcd2 	bl	800c198 <__pow5mult>
 800b7f4:	4683      	mov	fp, r0
 800b7f6:	2101      	movs	r1, #1
 800b7f8:	4620      	mov	r0, r4
 800b7fa:	f000 fc11 	bl	800c020 <__i2b>
 800b7fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b800:	2b00      	cmp	r3, #0
 800b802:	4606      	mov	r6, r0
 800b804:	dd7c      	ble.n	800b900 <_dtoa_r+0x8d8>
 800b806:	461a      	mov	r2, r3
 800b808:	4601      	mov	r1, r0
 800b80a:	4620      	mov	r0, r4
 800b80c:	f000 fcc4 	bl	800c198 <__pow5mult>
 800b810:	9b05      	ldr	r3, [sp, #20]
 800b812:	2b01      	cmp	r3, #1
 800b814:	4606      	mov	r6, r0
 800b816:	dd76      	ble.n	800b906 <_dtoa_r+0x8de>
 800b818:	2300      	movs	r3, #0
 800b81a:	9306      	str	r3, [sp, #24]
 800b81c:	6933      	ldr	r3, [r6, #16]
 800b81e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b822:	6918      	ldr	r0, [r3, #16]
 800b824:	f000 fbac 	bl	800bf80 <__hi0bits>
 800b828:	f1c0 0020 	rsb	r0, r0, #32
 800b82c:	9b04      	ldr	r3, [sp, #16]
 800b82e:	4418      	add	r0, r3
 800b830:	f010 001f 	ands.w	r0, r0, #31
 800b834:	f000 8086 	beq.w	800b944 <_dtoa_r+0x91c>
 800b838:	f1c0 0320 	rsb	r3, r0, #32
 800b83c:	2b04      	cmp	r3, #4
 800b83e:	dd7f      	ble.n	800b940 <_dtoa_r+0x918>
 800b840:	f1c0 001c 	rsb	r0, r0, #28
 800b844:	9b04      	ldr	r3, [sp, #16]
 800b846:	4403      	add	r3, r0
 800b848:	4480      	add	r8, r0
 800b84a:	4405      	add	r5, r0
 800b84c:	9304      	str	r3, [sp, #16]
 800b84e:	f1b8 0f00 	cmp.w	r8, #0
 800b852:	dd05      	ble.n	800b860 <_dtoa_r+0x838>
 800b854:	4659      	mov	r1, fp
 800b856:	4642      	mov	r2, r8
 800b858:	4620      	mov	r0, r4
 800b85a:	f000 fcf7 	bl	800c24c <__lshift>
 800b85e:	4683      	mov	fp, r0
 800b860:	9b04      	ldr	r3, [sp, #16]
 800b862:	2b00      	cmp	r3, #0
 800b864:	dd05      	ble.n	800b872 <_dtoa_r+0x84a>
 800b866:	4631      	mov	r1, r6
 800b868:	461a      	mov	r2, r3
 800b86a:	4620      	mov	r0, r4
 800b86c:	f000 fcee 	bl	800c24c <__lshift>
 800b870:	4606      	mov	r6, r0
 800b872:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b874:	2b00      	cmp	r3, #0
 800b876:	d069      	beq.n	800b94c <_dtoa_r+0x924>
 800b878:	4631      	mov	r1, r6
 800b87a:	4658      	mov	r0, fp
 800b87c:	f000 fd52 	bl	800c324 <__mcmp>
 800b880:	2800      	cmp	r0, #0
 800b882:	da63      	bge.n	800b94c <_dtoa_r+0x924>
 800b884:	2300      	movs	r3, #0
 800b886:	4659      	mov	r1, fp
 800b888:	220a      	movs	r2, #10
 800b88a:	4620      	mov	r0, r4
 800b88c:	f000 fb2e 	bl	800beec <__multadd>
 800b890:	9b08      	ldr	r3, [sp, #32]
 800b892:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b896:	4683      	mov	fp, r0
 800b898:	2b00      	cmp	r3, #0
 800b89a:	f000 818f 	beq.w	800bbbc <_dtoa_r+0xb94>
 800b89e:	4639      	mov	r1, r7
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	220a      	movs	r2, #10
 800b8a4:	4620      	mov	r0, r4
 800b8a6:	f000 fb21 	bl	800beec <__multadd>
 800b8aa:	f1b9 0f00 	cmp.w	r9, #0
 800b8ae:	4607      	mov	r7, r0
 800b8b0:	f300 808e 	bgt.w	800b9d0 <_dtoa_r+0x9a8>
 800b8b4:	9b05      	ldr	r3, [sp, #20]
 800b8b6:	2b02      	cmp	r3, #2
 800b8b8:	dc50      	bgt.n	800b95c <_dtoa_r+0x934>
 800b8ba:	e089      	b.n	800b9d0 <_dtoa_r+0x9a8>
 800b8bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b8be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b8c2:	e75d      	b.n	800b780 <_dtoa_r+0x758>
 800b8c4:	9b01      	ldr	r3, [sp, #4]
 800b8c6:	1e5e      	subs	r6, r3, #1
 800b8c8:	9b06      	ldr	r3, [sp, #24]
 800b8ca:	42b3      	cmp	r3, r6
 800b8cc:	bfbf      	itttt	lt
 800b8ce:	9b06      	ldrlt	r3, [sp, #24]
 800b8d0:	9606      	strlt	r6, [sp, #24]
 800b8d2:	1af2      	sublt	r2, r6, r3
 800b8d4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800b8d6:	bfb6      	itet	lt
 800b8d8:	189b      	addlt	r3, r3, r2
 800b8da:	1b9e      	subge	r6, r3, r6
 800b8dc:	930d      	strlt	r3, [sp, #52]	; 0x34
 800b8de:	9b01      	ldr	r3, [sp, #4]
 800b8e0:	bfb8      	it	lt
 800b8e2:	2600      	movlt	r6, #0
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	bfb5      	itete	lt
 800b8e8:	eba8 0503 	sublt.w	r5, r8, r3
 800b8ec:	9b01      	ldrge	r3, [sp, #4]
 800b8ee:	2300      	movlt	r3, #0
 800b8f0:	4645      	movge	r5, r8
 800b8f2:	e747      	b.n	800b784 <_dtoa_r+0x75c>
 800b8f4:	9e06      	ldr	r6, [sp, #24]
 800b8f6:	9f08      	ldr	r7, [sp, #32]
 800b8f8:	4645      	mov	r5, r8
 800b8fa:	e74c      	b.n	800b796 <_dtoa_r+0x76e>
 800b8fc:	9a06      	ldr	r2, [sp, #24]
 800b8fe:	e775      	b.n	800b7ec <_dtoa_r+0x7c4>
 800b900:	9b05      	ldr	r3, [sp, #20]
 800b902:	2b01      	cmp	r3, #1
 800b904:	dc18      	bgt.n	800b938 <_dtoa_r+0x910>
 800b906:	9b02      	ldr	r3, [sp, #8]
 800b908:	b9b3      	cbnz	r3, 800b938 <_dtoa_r+0x910>
 800b90a:	9b03      	ldr	r3, [sp, #12]
 800b90c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b910:	b9a3      	cbnz	r3, 800b93c <_dtoa_r+0x914>
 800b912:	9b03      	ldr	r3, [sp, #12]
 800b914:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b918:	0d1b      	lsrs	r3, r3, #20
 800b91a:	051b      	lsls	r3, r3, #20
 800b91c:	b12b      	cbz	r3, 800b92a <_dtoa_r+0x902>
 800b91e:	9b04      	ldr	r3, [sp, #16]
 800b920:	3301      	adds	r3, #1
 800b922:	9304      	str	r3, [sp, #16]
 800b924:	f108 0801 	add.w	r8, r8, #1
 800b928:	2301      	movs	r3, #1
 800b92a:	9306      	str	r3, [sp, #24]
 800b92c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b92e:	2b00      	cmp	r3, #0
 800b930:	f47f af74 	bne.w	800b81c <_dtoa_r+0x7f4>
 800b934:	2001      	movs	r0, #1
 800b936:	e779      	b.n	800b82c <_dtoa_r+0x804>
 800b938:	2300      	movs	r3, #0
 800b93a:	e7f6      	b.n	800b92a <_dtoa_r+0x902>
 800b93c:	9b02      	ldr	r3, [sp, #8]
 800b93e:	e7f4      	b.n	800b92a <_dtoa_r+0x902>
 800b940:	d085      	beq.n	800b84e <_dtoa_r+0x826>
 800b942:	4618      	mov	r0, r3
 800b944:	301c      	adds	r0, #28
 800b946:	e77d      	b.n	800b844 <_dtoa_r+0x81c>
 800b948:	40240000 	.word	0x40240000
 800b94c:	9b01      	ldr	r3, [sp, #4]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	dc38      	bgt.n	800b9c4 <_dtoa_r+0x99c>
 800b952:	9b05      	ldr	r3, [sp, #20]
 800b954:	2b02      	cmp	r3, #2
 800b956:	dd35      	ble.n	800b9c4 <_dtoa_r+0x99c>
 800b958:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b95c:	f1b9 0f00 	cmp.w	r9, #0
 800b960:	d10d      	bne.n	800b97e <_dtoa_r+0x956>
 800b962:	4631      	mov	r1, r6
 800b964:	464b      	mov	r3, r9
 800b966:	2205      	movs	r2, #5
 800b968:	4620      	mov	r0, r4
 800b96a:	f000 fabf 	bl	800beec <__multadd>
 800b96e:	4601      	mov	r1, r0
 800b970:	4606      	mov	r6, r0
 800b972:	4658      	mov	r0, fp
 800b974:	f000 fcd6 	bl	800c324 <__mcmp>
 800b978:	2800      	cmp	r0, #0
 800b97a:	f73f adbd 	bgt.w	800b4f8 <_dtoa_r+0x4d0>
 800b97e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b980:	9d00      	ldr	r5, [sp, #0]
 800b982:	ea6f 0a03 	mvn.w	sl, r3
 800b986:	f04f 0800 	mov.w	r8, #0
 800b98a:	4631      	mov	r1, r6
 800b98c:	4620      	mov	r0, r4
 800b98e:	f000 fa8b 	bl	800bea8 <_Bfree>
 800b992:	2f00      	cmp	r7, #0
 800b994:	f43f aeb4 	beq.w	800b700 <_dtoa_r+0x6d8>
 800b998:	f1b8 0f00 	cmp.w	r8, #0
 800b99c:	d005      	beq.n	800b9aa <_dtoa_r+0x982>
 800b99e:	45b8      	cmp	r8, r7
 800b9a0:	d003      	beq.n	800b9aa <_dtoa_r+0x982>
 800b9a2:	4641      	mov	r1, r8
 800b9a4:	4620      	mov	r0, r4
 800b9a6:	f000 fa7f 	bl	800bea8 <_Bfree>
 800b9aa:	4639      	mov	r1, r7
 800b9ac:	4620      	mov	r0, r4
 800b9ae:	f000 fa7b 	bl	800bea8 <_Bfree>
 800b9b2:	e6a5      	b.n	800b700 <_dtoa_r+0x6d8>
 800b9b4:	2600      	movs	r6, #0
 800b9b6:	4637      	mov	r7, r6
 800b9b8:	e7e1      	b.n	800b97e <_dtoa_r+0x956>
 800b9ba:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b9bc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b9c0:	4637      	mov	r7, r6
 800b9c2:	e599      	b.n	800b4f8 <_dtoa_r+0x4d0>
 800b9c4:	9b08      	ldr	r3, [sp, #32]
 800b9c6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	f000 80fd 	beq.w	800bbca <_dtoa_r+0xba2>
 800b9d0:	2d00      	cmp	r5, #0
 800b9d2:	dd05      	ble.n	800b9e0 <_dtoa_r+0x9b8>
 800b9d4:	4639      	mov	r1, r7
 800b9d6:	462a      	mov	r2, r5
 800b9d8:	4620      	mov	r0, r4
 800b9da:	f000 fc37 	bl	800c24c <__lshift>
 800b9de:	4607      	mov	r7, r0
 800b9e0:	9b06      	ldr	r3, [sp, #24]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d05c      	beq.n	800baa0 <_dtoa_r+0xa78>
 800b9e6:	6879      	ldr	r1, [r7, #4]
 800b9e8:	4620      	mov	r0, r4
 800b9ea:	f000 fa1d 	bl	800be28 <_Balloc>
 800b9ee:	4605      	mov	r5, r0
 800b9f0:	b928      	cbnz	r0, 800b9fe <_dtoa_r+0x9d6>
 800b9f2:	4b80      	ldr	r3, [pc, #512]	; (800bbf4 <_dtoa_r+0xbcc>)
 800b9f4:	4602      	mov	r2, r0
 800b9f6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b9fa:	f7ff bb2e 	b.w	800b05a <_dtoa_r+0x32>
 800b9fe:	693a      	ldr	r2, [r7, #16]
 800ba00:	3202      	adds	r2, #2
 800ba02:	0092      	lsls	r2, r2, #2
 800ba04:	f107 010c 	add.w	r1, r7, #12
 800ba08:	300c      	adds	r0, #12
 800ba0a:	f000 f9ff 	bl	800be0c <memcpy>
 800ba0e:	2201      	movs	r2, #1
 800ba10:	4629      	mov	r1, r5
 800ba12:	4620      	mov	r0, r4
 800ba14:	f000 fc1a 	bl	800c24c <__lshift>
 800ba18:	9b00      	ldr	r3, [sp, #0]
 800ba1a:	3301      	adds	r3, #1
 800ba1c:	9301      	str	r3, [sp, #4]
 800ba1e:	9b00      	ldr	r3, [sp, #0]
 800ba20:	444b      	add	r3, r9
 800ba22:	9307      	str	r3, [sp, #28]
 800ba24:	9b02      	ldr	r3, [sp, #8]
 800ba26:	f003 0301 	and.w	r3, r3, #1
 800ba2a:	46b8      	mov	r8, r7
 800ba2c:	9306      	str	r3, [sp, #24]
 800ba2e:	4607      	mov	r7, r0
 800ba30:	9b01      	ldr	r3, [sp, #4]
 800ba32:	4631      	mov	r1, r6
 800ba34:	3b01      	subs	r3, #1
 800ba36:	4658      	mov	r0, fp
 800ba38:	9302      	str	r3, [sp, #8]
 800ba3a:	f7ff fa69 	bl	800af10 <quorem>
 800ba3e:	4603      	mov	r3, r0
 800ba40:	3330      	adds	r3, #48	; 0x30
 800ba42:	9004      	str	r0, [sp, #16]
 800ba44:	4641      	mov	r1, r8
 800ba46:	4658      	mov	r0, fp
 800ba48:	9308      	str	r3, [sp, #32]
 800ba4a:	f000 fc6b 	bl	800c324 <__mcmp>
 800ba4e:	463a      	mov	r2, r7
 800ba50:	4681      	mov	r9, r0
 800ba52:	4631      	mov	r1, r6
 800ba54:	4620      	mov	r0, r4
 800ba56:	f000 fc81 	bl	800c35c <__mdiff>
 800ba5a:	68c2      	ldr	r2, [r0, #12]
 800ba5c:	9b08      	ldr	r3, [sp, #32]
 800ba5e:	4605      	mov	r5, r0
 800ba60:	bb02      	cbnz	r2, 800baa4 <_dtoa_r+0xa7c>
 800ba62:	4601      	mov	r1, r0
 800ba64:	4658      	mov	r0, fp
 800ba66:	f000 fc5d 	bl	800c324 <__mcmp>
 800ba6a:	9b08      	ldr	r3, [sp, #32]
 800ba6c:	4602      	mov	r2, r0
 800ba6e:	4629      	mov	r1, r5
 800ba70:	4620      	mov	r0, r4
 800ba72:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800ba76:	f000 fa17 	bl	800bea8 <_Bfree>
 800ba7a:	9b05      	ldr	r3, [sp, #20]
 800ba7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba7e:	9d01      	ldr	r5, [sp, #4]
 800ba80:	ea43 0102 	orr.w	r1, r3, r2
 800ba84:	9b06      	ldr	r3, [sp, #24]
 800ba86:	430b      	orrs	r3, r1
 800ba88:	9b08      	ldr	r3, [sp, #32]
 800ba8a:	d10d      	bne.n	800baa8 <_dtoa_r+0xa80>
 800ba8c:	2b39      	cmp	r3, #57	; 0x39
 800ba8e:	d029      	beq.n	800bae4 <_dtoa_r+0xabc>
 800ba90:	f1b9 0f00 	cmp.w	r9, #0
 800ba94:	dd01      	ble.n	800ba9a <_dtoa_r+0xa72>
 800ba96:	9b04      	ldr	r3, [sp, #16]
 800ba98:	3331      	adds	r3, #49	; 0x31
 800ba9a:	9a02      	ldr	r2, [sp, #8]
 800ba9c:	7013      	strb	r3, [r2, #0]
 800ba9e:	e774      	b.n	800b98a <_dtoa_r+0x962>
 800baa0:	4638      	mov	r0, r7
 800baa2:	e7b9      	b.n	800ba18 <_dtoa_r+0x9f0>
 800baa4:	2201      	movs	r2, #1
 800baa6:	e7e2      	b.n	800ba6e <_dtoa_r+0xa46>
 800baa8:	f1b9 0f00 	cmp.w	r9, #0
 800baac:	db06      	blt.n	800babc <_dtoa_r+0xa94>
 800baae:	9905      	ldr	r1, [sp, #20]
 800bab0:	ea41 0909 	orr.w	r9, r1, r9
 800bab4:	9906      	ldr	r1, [sp, #24]
 800bab6:	ea59 0101 	orrs.w	r1, r9, r1
 800baba:	d120      	bne.n	800bafe <_dtoa_r+0xad6>
 800babc:	2a00      	cmp	r2, #0
 800babe:	ddec      	ble.n	800ba9a <_dtoa_r+0xa72>
 800bac0:	4659      	mov	r1, fp
 800bac2:	2201      	movs	r2, #1
 800bac4:	4620      	mov	r0, r4
 800bac6:	9301      	str	r3, [sp, #4]
 800bac8:	f000 fbc0 	bl	800c24c <__lshift>
 800bacc:	4631      	mov	r1, r6
 800bace:	4683      	mov	fp, r0
 800bad0:	f000 fc28 	bl	800c324 <__mcmp>
 800bad4:	2800      	cmp	r0, #0
 800bad6:	9b01      	ldr	r3, [sp, #4]
 800bad8:	dc02      	bgt.n	800bae0 <_dtoa_r+0xab8>
 800bada:	d1de      	bne.n	800ba9a <_dtoa_r+0xa72>
 800badc:	07da      	lsls	r2, r3, #31
 800bade:	d5dc      	bpl.n	800ba9a <_dtoa_r+0xa72>
 800bae0:	2b39      	cmp	r3, #57	; 0x39
 800bae2:	d1d8      	bne.n	800ba96 <_dtoa_r+0xa6e>
 800bae4:	9a02      	ldr	r2, [sp, #8]
 800bae6:	2339      	movs	r3, #57	; 0x39
 800bae8:	7013      	strb	r3, [r2, #0]
 800baea:	462b      	mov	r3, r5
 800baec:	461d      	mov	r5, r3
 800baee:	3b01      	subs	r3, #1
 800baf0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800baf4:	2a39      	cmp	r2, #57	; 0x39
 800baf6:	d050      	beq.n	800bb9a <_dtoa_r+0xb72>
 800baf8:	3201      	adds	r2, #1
 800bafa:	701a      	strb	r2, [r3, #0]
 800bafc:	e745      	b.n	800b98a <_dtoa_r+0x962>
 800bafe:	2a00      	cmp	r2, #0
 800bb00:	dd03      	ble.n	800bb0a <_dtoa_r+0xae2>
 800bb02:	2b39      	cmp	r3, #57	; 0x39
 800bb04:	d0ee      	beq.n	800bae4 <_dtoa_r+0xabc>
 800bb06:	3301      	adds	r3, #1
 800bb08:	e7c7      	b.n	800ba9a <_dtoa_r+0xa72>
 800bb0a:	9a01      	ldr	r2, [sp, #4]
 800bb0c:	9907      	ldr	r1, [sp, #28]
 800bb0e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800bb12:	428a      	cmp	r2, r1
 800bb14:	d02a      	beq.n	800bb6c <_dtoa_r+0xb44>
 800bb16:	4659      	mov	r1, fp
 800bb18:	2300      	movs	r3, #0
 800bb1a:	220a      	movs	r2, #10
 800bb1c:	4620      	mov	r0, r4
 800bb1e:	f000 f9e5 	bl	800beec <__multadd>
 800bb22:	45b8      	cmp	r8, r7
 800bb24:	4683      	mov	fp, r0
 800bb26:	f04f 0300 	mov.w	r3, #0
 800bb2a:	f04f 020a 	mov.w	r2, #10
 800bb2e:	4641      	mov	r1, r8
 800bb30:	4620      	mov	r0, r4
 800bb32:	d107      	bne.n	800bb44 <_dtoa_r+0xb1c>
 800bb34:	f000 f9da 	bl	800beec <__multadd>
 800bb38:	4680      	mov	r8, r0
 800bb3a:	4607      	mov	r7, r0
 800bb3c:	9b01      	ldr	r3, [sp, #4]
 800bb3e:	3301      	adds	r3, #1
 800bb40:	9301      	str	r3, [sp, #4]
 800bb42:	e775      	b.n	800ba30 <_dtoa_r+0xa08>
 800bb44:	f000 f9d2 	bl	800beec <__multadd>
 800bb48:	4639      	mov	r1, r7
 800bb4a:	4680      	mov	r8, r0
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	220a      	movs	r2, #10
 800bb50:	4620      	mov	r0, r4
 800bb52:	f000 f9cb 	bl	800beec <__multadd>
 800bb56:	4607      	mov	r7, r0
 800bb58:	e7f0      	b.n	800bb3c <_dtoa_r+0xb14>
 800bb5a:	f1b9 0f00 	cmp.w	r9, #0
 800bb5e:	9a00      	ldr	r2, [sp, #0]
 800bb60:	bfcc      	ite	gt
 800bb62:	464d      	movgt	r5, r9
 800bb64:	2501      	movle	r5, #1
 800bb66:	4415      	add	r5, r2
 800bb68:	f04f 0800 	mov.w	r8, #0
 800bb6c:	4659      	mov	r1, fp
 800bb6e:	2201      	movs	r2, #1
 800bb70:	4620      	mov	r0, r4
 800bb72:	9301      	str	r3, [sp, #4]
 800bb74:	f000 fb6a 	bl	800c24c <__lshift>
 800bb78:	4631      	mov	r1, r6
 800bb7a:	4683      	mov	fp, r0
 800bb7c:	f000 fbd2 	bl	800c324 <__mcmp>
 800bb80:	2800      	cmp	r0, #0
 800bb82:	dcb2      	bgt.n	800baea <_dtoa_r+0xac2>
 800bb84:	d102      	bne.n	800bb8c <_dtoa_r+0xb64>
 800bb86:	9b01      	ldr	r3, [sp, #4]
 800bb88:	07db      	lsls	r3, r3, #31
 800bb8a:	d4ae      	bmi.n	800baea <_dtoa_r+0xac2>
 800bb8c:	462b      	mov	r3, r5
 800bb8e:	461d      	mov	r5, r3
 800bb90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bb94:	2a30      	cmp	r2, #48	; 0x30
 800bb96:	d0fa      	beq.n	800bb8e <_dtoa_r+0xb66>
 800bb98:	e6f7      	b.n	800b98a <_dtoa_r+0x962>
 800bb9a:	9a00      	ldr	r2, [sp, #0]
 800bb9c:	429a      	cmp	r2, r3
 800bb9e:	d1a5      	bne.n	800baec <_dtoa_r+0xac4>
 800bba0:	f10a 0a01 	add.w	sl, sl, #1
 800bba4:	2331      	movs	r3, #49	; 0x31
 800bba6:	e779      	b.n	800ba9c <_dtoa_r+0xa74>
 800bba8:	4b13      	ldr	r3, [pc, #76]	; (800bbf8 <_dtoa_r+0xbd0>)
 800bbaa:	f7ff baaf 	b.w	800b10c <_dtoa_r+0xe4>
 800bbae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	f47f aa86 	bne.w	800b0c2 <_dtoa_r+0x9a>
 800bbb6:	4b11      	ldr	r3, [pc, #68]	; (800bbfc <_dtoa_r+0xbd4>)
 800bbb8:	f7ff baa8 	b.w	800b10c <_dtoa_r+0xe4>
 800bbbc:	f1b9 0f00 	cmp.w	r9, #0
 800bbc0:	dc03      	bgt.n	800bbca <_dtoa_r+0xba2>
 800bbc2:	9b05      	ldr	r3, [sp, #20]
 800bbc4:	2b02      	cmp	r3, #2
 800bbc6:	f73f aec9 	bgt.w	800b95c <_dtoa_r+0x934>
 800bbca:	9d00      	ldr	r5, [sp, #0]
 800bbcc:	4631      	mov	r1, r6
 800bbce:	4658      	mov	r0, fp
 800bbd0:	f7ff f99e 	bl	800af10 <quorem>
 800bbd4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800bbd8:	f805 3b01 	strb.w	r3, [r5], #1
 800bbdc:	9a00      	ldr	r2, [sp, #0]
 800bbde:	1aaa      	subs	r2, r5, r2
 800bbe0:	4591      	cmp	r9, r2
 800bbe2:	ddba      	ble.n	800bb5a <_dtoa_r+0xb32>
 800bbe4:	4659      	mov	r1, fp
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	220a      	movs	r2, #10
 800bbea:	4620      	mov	r0, r4
 800bbec:	f000 f97e 	bl	800beec <__multadd>
 800bbf0:	4683      	mov	fp, r0
 800bbf2:	e7eb      	b.n	800bbcc <_dtoa_r+0xba4>
 800bbf4:	0800d53f 	.word	0x0800d53f
 800bbf8:	0800d498 	.word	0x0800d498
 800bbfc:	0800d4bc 	.word	0x0800d4bc

0800bc00 <std>:
 800bc00:	2300      	movs	r3, #0
 800bc02:	b510      	push	{r4, lr}
 800bc04:	4604      	mov	r4, r0
 800bc06:	e9c0 3300 	strd	r3, r3, [r0]
 800bc0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bc0e:	6083      	str	r3, [r0, #8]
 800bc10:	8181      	strh	r1, [r0, #12]
 800bc12:	6643      	str	r3, [r0, #100]	; 0x64
 800bc14:	81c2      	strh	r2, [r0, #14]
 800bc16:	6183      	str	r3, [r0, #24]
 800bc18:	4619      	mov	r1, r3
 800bc1a:	2208      	movs	r2, #8
 800bc1c:	305c      	adds	r0, #92	; 0x5c
 800bc1e:	f7fe fced 	bl	800a5fc <memset>
 800bc22:	4b05      	ldr	r3, [pc, #20]	; (800bc38 <std+0x38>)
 800bc24:	6263      	str	r3, [r4, #36]	; 0x24
 800bc26:	4b05      	ldr	r3, [pc, #20]	; (800bc3c <std+0x3c>)
 800bc28:	62a3      	str	r3, [r4, #40]	; 0x28
 800bc2a:	4b05      	ldr	r3, [pc, #20]	; (800bc40 <std+0x40>)
 800bc2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bc2e:	4b05      	ldr	r3, [pc, #20]	; (800bc44 <std+0x44>)
 800bc30:	6224      	str	r4, [r4, #32]
 800bc32:	6323      	str	r3, [r4, #48]	; 0x30
 800bc34:	bd10      	pop	{r4, pc}
 800bc36:	bf00      	nop
 800bc38:	0800c96d 	.word	0x0800c96d
 800bc3c:	0800c98f 	.word	0x0800c98f
 800bc40:	0800c9c7 	.word	0x0800c9c7
 800bc44:	0800c9eb 	.word	0x0800c9eb

0800bc48 <_cleanup_r>:
 800bc48:	4901      	ldr	r1, [pc, #4]	; (800bc50 <_cleanup_r+0x8>)
 800bc4a:	f000 b8af 	b.w	800bdac <_fwalk_reent>
 800bc4e:	bf00      	nop
 800bc50:	0800cd01 	.word	0x0800cd01

0800bc54 <__sfmoreglue>:
 800bc54:	b570      	push	{r4, r5, r6, lr}
 800bc56:	1e4a      	subs	r2, r1, #1
 800bc58:	2568      	movs	r5, #104	; 0x68
 800bc5a:	4355      	muls	r5, r2
 800bc5c:	460e      	mov	r6, r1
 800bc5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bc62:	f000 fcbf 	bl	800c5e4 <_malloc_r>
 800bc66:	4604      	mov	r4, r0
 800bc68:	b140      	cbz	r0, 800bc7c <__sfmoreglue+0x28>
 800bc6a:	2100      	movs	r1, #0
 800bc6c:	e9c0 1600 	strd	r1, r6, [r0]
 800bc70:	300c      	adds	r0, #12
 800bc72:	60a0      	str	r0, [r4, #8]
 800bc74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bc78:	f7fe fcc0 	bl	800a5fc <memset>
 800bc7c:	4620      	mov	r0, r4
 800bc7e:	bd70      	pop	{r4, r5, r6, pc}

0800bc80 <__sfp_lock_acquire>:
 800bc80:	4801      	ldr	r0, [pc, #4]	; (800bc88 <__sfp_lock_acquire+0x8>)
 800bc82:	f000 b8b8 	b.w	800bdf6 <__retarget_lock_acquire_recursive>
 800bc86:	bf00      	nop
 800bc88:	20000ae0 	.word	0x20000ae0

0800bc8c <__sfp_lock_release>:
 800bc8c:	4801      	ldr	r0, [pc, #4]	; (800bc94 <__sfp_lock_release+0x8>)
 800bc8e:	f000 b8b3 	b.w	800bdf8 <__retarget_lock_release_recursive>
 800bc92:	bf00      	nop
 800bc94:	20000ae0 	.word	0x20000ae0

0800bc98 <__sinit_lock_acquire>:
 800bc98:	4801      	ldr	r0, [pc, #4]	; (800bca0 <__sinit_lock_acquire+0x8>)
 800bc9a:	f000 b8ac 	b.w	800bdf6 <__retarget_lock_acquire_recursive>
 800bc9e:	bf00      	nop
 800bca0:	20000adb 	.word	0x20000adb

0800bca4 <__sinit_lock_release>:
 800bca4:	4801      	ldr	r0, [pc, #4]	; (800bcac <__sinit_lock_release+0x8>)
 800bca6:	f000 b8a7 	b.w	800bdf8 <__retarget_lock_release_recursive>
 800bcaa:	bf00      	nop
 800bcac:	20000adb 	.word	0x20000adb

0800bcb0 <__sinit>:
 800bcb0:	b510      	push	{r4, lr}
 800bcb2:	4604      	mov	r4, r0
 800bcb4:	f7ff fff0 	bl	800bc98 <__sinit_lock_acquire>
 800bcb8:	69a3      	ldr	r3, [r4, #24]
 800bcba:	b11b      	cbz	r3, 800bcc4 <__sinit+0x14>
 800bcbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bcc0:	f7ff bff0 	b.w	800bca4 <__sinit_lock_release>
 800bcc4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bcc8:	6523      	str	r3, [r4, #80]	; 0x50
 800bcca:	4b13      	ldr	r3, [pc, #76]	; (800bd18 <__sinit+0x68>)
 800bccc:	4a13      	ldr	r2, [pc, #76]	; (800bd1c <__sinit+0x6c>)
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	62a2      	str	r2, [r4, #40]	; 0x28
 800bcd2:	42a3      	cmp	r3, r4
 800bcd4:	bf04      	itt	eq
 800bcd6:	2301      	moveq	r3, #1
 800bcd8:	61a3      	streq	r3, [r4, #24]
 800bcda:	4620      	mov	r0, r4
 800bcdc:	f000 f820 	bl	800bd20 <__sfp>
 800bce0:	6060      	str	r0, [r4, #4]
 800bce2:	4620      	mov	r0, r4
 800bce4:	f000 f81c 	bl	800bd20 <__sfp>
 800bce8:	60a0      	str	r0, [r4, #8]
 800bcea:	4620      	mov	r0, r4
 800bcec:	f000 f818 	bl	800bd20 <__sfp>
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	60e0      	str	r0, [r4, #12]
 800bcf4:	2104      	movs	r1, #4
 800bcf6:	6860      	ldr	r0, [r4, #4]
 800bcf8:	f7ff ff82 	bl	800bc00 <std>
 800bcfc:	68a0      	ldr	r0, [r4, #8]
 800bcfe:	2201      	movs	r2, #1
 800bd00:	2109      	movs	r1, #9
 800bd02:	f7ff ff7d 	bl	800bc00 <std>
 800bd06:	68e0      	ldr	r0, [r4, #12]
 800bd08:	2202      	movs	r2, #2
 800bd0a:	2112      	movs	r1, #18
 800bd0c:	f7ff ff78 	bl	800bc00 <std>
 800bd10:	2301      	movs	r3, #1
 800bd12:	61a3      	str	r3, [r4, #24]
 800bd14:	e7d2      	b.n	800bcbc <__sinit+0xc>
 800bd16:	bf00      	nop
 800bd18:	0800d484 	.word	0x0800d484
 800bd1c:	0800bc49 	.word	0x0800bc49

0800bd20 <__sfp>:
 800bd20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd22:	4607      	mov	r7, r0
 800bd24:	f7ff ffac 	bl	800bc80 <__sfp_lock_acquire>
 800bd28:	4b1e      	ldr	r3, [pc, #120]	; (800bda4 <__sfp+0x84>)
 800bd2a:	681e      	ldr	r6, [r3, #0]
 800bd2c:	69b3      	ldr	r3, [r6, #24]
 800bd2e:	b913      	cbnz	r3, 800bd36 <__sfp+0x16>
 800bd30:	4630      	mov	r0, r6
 800bd32:	f7ff ffbd 	bl	800bcb0 <__sinit>
 800bd36:	3648      	adds	r6, #72	; 0x48
 800bd38:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bd3c:	3b01      	subs	r3, #1
 800bd3e:	d503      	bpl.n	800bd48 <__sfp+0x28>
 800bd40:	6833      	ldr	r3, [r6, #0]
 800bd42:	b30b      	cbz	r3, 800bd88 <__sfp+0x68>
 800bd44:	6836      	ldr	r6, [r6, #0]
 800bd46:	e7f7      	b.n	800bd38 <__sfp+0x18>
 800bd48:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bd4c:	b9d5      	cbnz	r5, 800bd84 <__sfp+0x64>
 800bd4e:	4b16      	ldr	r3, [pc, #88]	; (800bda8 <__sfp+0x88>)
 800bd50:	60e3      	str	r3, [r4, #12]
 800bd52:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bd56:	6665      	str	r5, [r4, #100]	; 0x64
 800bd58:	f000 f84c 	bl	800bdf4 <__retarget_lock_init_recursive>
 800bd5c:	f7ff ff96 	bl	800bc8c <__sfp_lock_release>
 800bd60:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bd64:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bd68:	6025      	str	r5, [r4, #0]
 800bd6a:	61a5      	str	r5, [r4, #24]
 800bd6c:	2208      	movs	r2, #8
 800bd6e:	4629      	mov	r1, r5
 800bd70:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bd74:	f7fe fc42 	bl	800a5fc <memset>
 800bd78:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bd7c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bd80:	4620      	mov	r0, r4
 800bd82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd84:	3468      	adds	r4, #104	; 0x68
 800bd86:	e7d9      	b.n	800bd3c <__sfp+0x1c>
 800bd88:	2104      	movs	r1, #4
 800bd8a:	4638      	mov	r0, r7
 800bd8c:	f7ff ff62 	bl	800bc54 <__sfmoreglue>
 800bd90:	4604      	mov	r4, r0
 800bd92:	6030      	str	r0, [r6, #0]
 800bd94:	2800      	cmp	r0, #0
 800bd96:	d1d5      	bne.n	800bd44 <__sfp+0x24>
 800bd98:	f7ff ff78 	bl	800bc8c <__sfp_lock_release>
 800bd9c:	230c      	movs	r3, #12
 800bd9e:	603b      	str	r3, [r7, #0]
 800bda0:	e7ee      	b.n	800bd80 <__sfp+0x60>
 800bda2:	bf00      	nop
 800bda4:	0800d484 	.word	0x0800d484
 800bda8:	ffff0001 	.word	0xffff0001

0800bdac <_fwalk_reent>:
 800bdac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bdb0:	4606      	mov	r6, r0
 800bdb2:	4688      	mov	r8, r1
 800bdb4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bdb8:	2700      	movs	r7, #0
 800bdba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bdbe:	f1b9 0901 	subs.w	r9, r9, #1
 800bdc2:	d505      	bpl.n	800bdd0 <_fwalk_reent+0x24>
 800bdc4:	6824      	ldr	r4, [r4, #0]
 800bdc6:	2c00      	cmp	r4, #0
 800bdc8:	d1f7      	bne.n	800bdba <_fwalk_reent+0xe>
 800bdca:	4638      	mov	r0, r7
 800bdcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bdd0:	89ab      	ldrh	r3, [r5, #12]
 800bdd2:	2b01      	cmp	r3, #1
 800bdd4:	d907      	bls.n	800bde6 <_fwalk_reent+0x3a>
 800bdd6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bdda:	3301      	adds	r3, #1
 800bddc:	d003      	beq.n	800bde6 <_fwalk_reent+0x3a>
 800bdde:	4629      	mov	r1, r5
 800bde0:	4630      	mov	r0, r6
 800bde2:	47c0      	blx	r8
 800bde4:	4307      	orrs	r7, r0
 800bde6:	3568      	adds	r5, #104	; 0x68
 800bde8:	e7e9      	b.n	800bdbe <_fwalk_reent+0x12>
	...

0800bdec <_localeconv_r>:
 800bdec:	4800      	ldr	r0, [pc, #0]	; (800bdf0 <_localeconv_r+0x4>)
 800bdee:	4770      	bx	lr
 800bdf0:	200001e4 	.word	0x200001e4

0800bdf4 <__retarget_lock_init_recursive>:
 800bdf4:	4770      	bx	lr

0800bdf6 <__retarget_lock_acquire_recursive>:
 800bdf6:	4770      	bx	lr

0800bdf8 <__retarget_lock_release_recursive>:
 800bdf8:	4770      	bx	lr
	...

0800bdfc <malloc>:
 800bdfc:	4b02      	ldr	r3, [pc, #8]	; (800be08 <malloc+0xc>)
 800bdfe:	4601      	mov	r1, r0
 800be00:	6818      	ldr	r0, [r3, #0]
 800be02:	f000 bbef 	b.w	800c5e4 <_malloc_r>
 800be06:	bf00      	nop
 800be08:	20000090 	.word	0x20000090

0800be0c <memcpy>:
 800be0c:	440a      	add	r2, r1
 800be0e:	4291      	cmp	r1, r2
 800be10:	f100 33ff 	add.w	r3, r0, #4294967295
 800be14:	d100      	bne.n	800be18 <memcpy+0xc>
 800be16:	4770      	bx	lr
 800be18:	b510      	push	{r4, lr}
 800be1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be22:	4291      	cmp	r1, r2
 800be24:	d1f9      	bne.n	800be1a <memcpy+0xe>
 800be26:	bd10      	pop	{r4, pc}

0800be28 <_Balloc>:
 800be28:	b570      	push	{r4, r5, r6, lr}
 800be2a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800be2c:	4604      	mov	r4, r0
 800be2e:	460d      	mov	r5, r1
 800be30:	b976      	cbnz	r6, 800be50 <_Balloc+0x28>
 800be32:	2010      	movs	r0, #16
 800be34:	f7ff ffe2 	bl	800bdfc <malloc>
 800be38:	4602      	mov	r2, r0
 800be3a:	6260      	str	r0, [r4, #36]	; 0x24
 800be3c:	b920      	cbnz	r0, 800be48 <_Balloc+0x20>
 800be3e:	4b18      	ldr	r3, [pc, #96]	; (800bea0 <_Balloc+0x78>)
 800be40:	4818      	ldr	r0, [pc, #96]	; (800bea4 <_Balloc+0x7c>)
 800be42:	2166      	movs	r1, #102	; 0x66
 800be44:	f000 fea8 	bl	800cb98 <__assert_func>
 800be48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800be4c:	6006      	str	r6, [r0, #0]
 800be4e:	60c6      	str	r6, [r0, #12]
 800be50:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800be52:	68f3      	ldr	r3, [r6, #12]
 800be54:	b183      	cbz	r3, 800be78 <_Balloc+0x50>
 800be56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800be58:	68db      	ldr	r3, [r3, #12]
 800be5a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800be5e:	b9b8      	cbnz	r0, 800be90 <_Balloc+0x68>
 800be60:	2101      	movs	r1, #1
 800be62:	fa01 f605 	lsl.w	r6, r1, r5
 800be66:	1d72      	adds	r2, r6, #5
 800be68:	0092      	lsls	r2, r2, #2
 800be6a:	4620      	mov	r0, r4
 800be6c:	f000 fb5a 	bl	800c524 <_calloc_r>
 800be70:	b160      	cbz	r0, 800be8c <_Balloc+0x64>
 800be72:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800be76:	e00e      	b.n	800be96 <_Balloc+0x6e>
 800be78:	2221      	movs	r2, #33	; 0x21
 800be7a:	2104      	movs	r1, #4
 800be7c:	4620      	mov	r0, r4
 800be7e:	f000 fb51 	bl	800c524 <_calloc_r>
 800be82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800be84:	60f0      	str	r0, [r6, #12]
 800be86:	68db      	ldr	r3, [r3, #12]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d1e4      	bne.n	800be56 <_Balloc+0x2e>
 800be8c:	2000      	movs	r0, #0
 800be8e:	bd70      	pop	{r4, r5, r6, pc}
 800be90:	6802      	ldr	r2, [r0, #0]
 800be92:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800be96:	2300      	movs	r3, #0
 800be98:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800be9c:	e7f7      	b.n	800be8e <_Balloc+0x66>
 800be9e:	bf00      	nop
 800bea0:	0800d4c9 	.word	0x0800d4c9
 800bea4:	0800d5b0 	.word	0x0800d5b0

0800bea8 <_Bfree>:
 800bea8:	b570      	push	{r4, r5, r6, lr}
 800beaa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800beac:	4605      	mov	r5, r0
 800beae:	460c      	mov	r4, r1
 800beb0:	b976      	cbnz	r6, 800bed0 <_Bfree+0x28>
 800beb2:	2010      	movs	r0, #16
 800beb4:	f7ff ffa2 	bl	800bdfc <malloc>
 800beb8:	4602      	mov	r2, r0
 800beba:	6268      	str	r0, [r5, #36]	; 0x24
 800bebc:	b920      	cbnz	r0, 800bec8 <_Bfree+0x20>
 800bebe:	4b09      	ldr	r3, [pc, #36]	; (800bee4 <_Bfree+0x3c>)
 800bec0:	4809      	ldr	r0, [pc, #36]	; (800bee8 <_Bfree+0x40>)
 800bec2:	218a      	movs	r1, #138	; 0x8a
 800bec4:	f000 fe68 	bl	800cb98 <__assert_func>
 800bec8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800becc:	6006      	str	r6, [r0, #0]
 800bece:	60c6      	str	r6, [r0, #12]
 800bed0:	b13c      	cbz	r4, 800bee2 <_Bfree+0x3a>
 800bed2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bed4:	6862      	ldr	r2, [r4, #4]
 800bed6:	68db      	ldr	r3, [r3, #12]
 800bed8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bedc:	6021      	str	r1, [r4, #0]
 800bede:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bee2:	bd70      	pop	{r4, r5, r6, pc}
 800bee4:	0800d4c9 	.word	0x0800d4c9
 800bee8:	0800d5b0 	.word	0x0800d5b0

0800beec <__multadd>:
 800beec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bef0:	690e      	ldr	r6, [r1, #16]
 800bef2:	4607      	mov	r7, r0
 800bef4:	4698      	mov	r8, r3
 800bef6:	460c      	mov	r4, r1
 800bef8:	f101 0014 	add.w	r0, r1, #20
 800befc:	2300      	movs	r3, #0
 800befe:	6805      	ldr	r5, [r0, #0]
 800bf00:	b2a9      	uxth	r1, r5
 800bf02:	fb02 8101 	mla	r1, r2, r1, r8
 800bf06:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800bf0a:	0c2d      	lsrs	r5, r5, #16
 800bf0c:	fb02 c505 	mla	r5, r2, r5, ip
 800bf10:	b289      	uxth	r1, r1
 800bf12:	3301      	adds	r3, #1
 800bf14:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800bf18:	429e      	cmp	r6, r3
 800bf1a:	f840 1b04 	str.w	r1, [r0], #4
 800bf1e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800bf22:	dcec      	bgt.n	800befe <__multadd+0x12>
 800bf24:	f1b8 0f00 	cmp.w	r8, #0
 800bf28:	d022      	beq.n	800bf70 <__multadd+0x84>
 800bf2a:	68a3      	ldr	r3, [r4, #8]
 800bf2c:	42b3      	cmp	r3, r6
 800bf2e:	dc19      	bgt.n	800bf64 <__multadd+0x78>
 800bf30:	6861      	ldr	r1, [r4, #4]
 800bf32:	4638      	mov	r0, r7
 800bf34:	3101      	adds	r1, #1
 800bf36:	f7ff ff77 	bl	800be28 <_Balloc>
 800bf3a:	4605      	mov	r5, r0
 800bf3c:	b928      	cbnz	r0, 800bf4a <__multadd+0x5e>
 800bf3e:	4602      	mov	r2, r0
 800bf40:	4b0d      	ldr	r3, [pc, #52]	; (800bf78 <__multadd+0x8c>)
 800bf42:	480e      	ldr	r0, [pc, #56]	; (800bf7c <__multadd+0x90>)
 800bf44:	21b5      	movs	r1, #181	; 0xb5
 800bf46:	f000 fe27 	bl	800cb98 <__assert_func>
 800bf4a:	6922      	ldr	r2, [r4, #16]
 800bf4c:	3202      	adds	r2, #2
 800bf4e:	f104 010c 	add.w	r1, r4, #12
 800bf52:	0092      	lsls	r2, r2, #2
 800bf54:	300c      	adds	r0, #12
 800bf56:	f7ff ff59 	bl	800be0c <memcpy>
 800bf5a:	4621      	mov	r1, r4
 800bf5c:	4638      	mov	r0, r7
 800bf5e:	f7ff ffa3 	bl	800bea8 <_Bfree>
 800bf62:	462c      	mov	r4, r5
 800bf64:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800bf68:	3601      	adds	r6, #1
 800bf6a:	f8c3 8014 	str.w	r8, [r3, #20]
 800bf6e:	6126      	str	r6, [r4, #16]
 800bf70:	4620      	mov	r0, r4
 800bf72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf76:	bf00      	nop
 800bf78:	0800d53f 	.word	0x0800d53f
 800bf7c:	0800d5b0 	.word	0x0800d5b0

0800bf80 <__hi0bits>:
 800bf80:	0c03      	lsrs	r3, r0, #16
 800bf82:	041b      	lsls	r3, r3, #16
 800bf84:	b9d3      	cbnz	r3, 800bfbc <__hi0bits+0x3c>
 800bf86:	0400      	lsls	r0, r0, #16
 800bf88:	2310      	movs	r3, #16
 800bf8a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bf8e:	bf04      	itt	eq
 800bf90:	0200      	lsleq	r0, r0, #8
 800bf92:	3308      	addeq	r3, #8
 800bf94:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bf98:	bf04      	itt	eq
 800bf9a:	0100      	lsleq	r0, r0, #4
 800bf9c:	3304      	addeq	r3, #4
 800bf9e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bfa2:	bf04      	itt	eq
 800bfa4:	0080      	lsleq	r0, r0, #2
 800bfa6:	3302      	addeq	r3, #2
 800bfa8:	2800      	cmp	r0, #0
 800bfaa:	db05      	blt.n	800bfb8 <__hi0bits+0x38>
 800bfac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bfb0:	f103 0301 	add.w	r3, r3, #1
 800bfb4:	bf08      	it	eq
 800bfb6:	2320      	moveq	r3, #32
 800bfb8:	4618      	mov	r0, r3
 800bfba:	4770      	bx	lr
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	e7e4      	b.n	800bf8a <__hi0bits+0xa>

0800bfc0 <__lo0bits>:
 800bfc0:	6803      	ldr	r3, [r0, #0]
 800bfc2:	f013 0207 	ands.w	r2, r3, #7
 800bfc6:	4601      	mov	r1, r0
 800bfc8:	d00b      	beq.n	800bfe2 <__lo0bits+0x22>
 800bfca:	07da      	lsls	r2, r3, #31
 800bfcc:	d424      	bmi.n	800c018 <__lo0bits+0x58>
 800bfce:	0798      	lsls	r0, r3, #30
 800bfd0:	bf49      	itett	mi
 800bfd2:	085b      	lsrmi	r3, r3, #1
 800bfd4:	089b      	lsrpl	r3, r3, #2
 800bfd6:	2001      	movmi	r0, #1
 800bfd8:	600b      	strmi	r3, [r1, #0]
 800bfda:	bf5c      	itt	pl
 800bfdc:	600b      	strpl	r3, [r1, #0]
 800bfde:	2002      	movpl	r0, #2
 800bfe0:	4770      	bx	lr
 800bfe2:	b298      	uxth	r0, r3
 800bfe4:	b9b0      	cbnz	r0, 800c014 <__lo0bits+0x54>
 800bfe6:	0c1b      	lsrs	r3, r3, #16
 800bfe8:	2010      	movs	r0, #16
 800bfea:	f013 0fff 	tst.w	r3, #255	; 0xff
 800bfee:	bf04      	itt	eq
 800bff0:	0a1b      	lsreq	r3, r3, #8
 800bff2:	3008      	addeq	r0, #8
 800bff4:	071a      	lsls	r2, r3, #28
 800bff6:	bf04      	itt	eq
 800bff8:	091b      	lsreq	r3, r3, #4
 800bffa:	3004      	addeq	r0, #4
 800bffc:	079a      	lsls	r2, r3, #30
 800bffe:	bf04      	itt	eq
 800c000:	089b      	lsreq	r3, r3, #2
 800c002:	3002      	addeq	r0, #2
 800c004:	07da      	lsls	r2, r3, #31
 800c006:	d403      	bmi.n	800c010 <__lo0bits+0x50>
 800c008:	085b      	lsrs	r3, r3, #1
 800c00a:	f100 0001 	add.w	r0, r0, #1
 800c00e:	d005      	beq.n	800c01c <__lo0bits+0x5c>
 800c010:	600b      	str	r3, [r1, #0]
 800c012:	4770      	bx	lr
 800c014:	4610      	mov	r0, r2
 800c016:	e7e8      	b.n	800bfea <__lo0bits+0x2a>
 800c018:	2000      	movs	r0, #0
 800c01a:	4770      	bx	lr
 800c01c:	2020      	movs	r0, #32
 800c01e:	4770      	bx	lr

0800c020 <__i2b>:
 800c020:	b510      	push	{r4, lr}
 800c022:	460c      	mov	r4, r1
 800c024:	2101      	movs	r1, #1
 800c026:	f7ff feff 	bl	800be28 <_Balloc>
 800c02a:	4602      	mov	r2, r0
 800c02c:	b928      	cbnz	r0, 800c03a <__i2b+0x1a>
 800c02e:	4b05      	ldr	r3, [pc, #20]	; (800c044 <__i2b+0x24>)
 800c030:	4805      	ldr	r0, [pc, #20]	; (800c048 <__i2b+0x28>)
 800c032:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c036:	f000 fdaf 	bl	800cb98 <__assert_func>
 800c03a:	2301      	movs	r3, #1
 800c03c:	6144      	str	r4, [r0, #20]
 800c03e:	6103      	str	r3, [r0, #16]
 800c040:	bd10      	pop	{r4, pc}
 800c042:	bf00      	nop
 800c044:	0800d53f 	.word	0x0800d53f
 800c048:	0800d5b0 	.word	0x0800d5b0

0800c04c <__multiply>:
 800c04c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c050:	4614      	mov	r4, r2
 800c052:	690a      	ldr	r2, [r1, #16]
 800c054:	6923      	ldr	r3, [r4, #16]
 800c056:	429a      	cmp	r2, r3
 800c058:	bfb8      	it	lt
 800c05a:	460b      	movlt	r3, r1
 800c05c:	460d      	mov	r5, r1
 800c05e:	bfbc      	itt	lt
 800c060:	4625      	movlt	r5, r4
 800c062:	461c      	movlt	r4, r3
 800c064:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800c068:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c06c:	68ab      	ldr	r3, [r5, #8]
 800c06e:	6869      	ldr	r1, [r5, #4]
 800c070:	eb0a 0709 	add.w	r7, sl, r9
 800c074:	42bb      	cmp	r3, r7
 800c076:	b085      	sub	sp, #20
 800c078:	bfb8      	it	lt
 800c07a:	3101      	addlt	r1, #1
 800c07c:	f7ff fed4 	bl	800be28 <_Balloc>
 800c080:	b930      	cbnz	r0, 800c090 <__multiply+0x44>
 800c082:	4602      	mov	r2, r0
 800c084:	4b42      	ldr	r3, [pc, #264]	; (800c190 <__multiply+0x144>)
 800c086:	4843      	ldr	r0, [pc, #268]	; (800c194 <__multiply+0x148>)
 800c088:	f240 115d 	movw	r1, #349	; 0x15d
 800c08c:	f000 fd84 	bl	800cb98 <__assert_func>
 800c090:	f100 0614 	add.w	r6, r0, #20
 800c094:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800c098:	4633      	mov	r3, r6
 800c09a:	2200      	movs	r2, #0
 800c09c:	4543      	cmp	r3, r8
 800c09e:	d31e      	bcc.n	800c0de <__multiply+0x92>
 800c0a0:	f105 0c14 	add.w	ip, r5, #20
 800c0a4:	f104 0314 	add.w	r3, r4, #20
 800c0a8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800c0ac:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800c0b0:	9202      	str	r2, [sp, #8]
 800c0b2:	ebac 0205 	sub.w	r2, ip, r5
 800c0b6:	3a15      	subs	r2, #21
 800c0b8:	f022 0203 	bic.w	r2, r2, #3
 800c0bc:	3204      	adds	r2, #4
 800c0be:	f105 0115 	add.w	r1, r5, #21
 800c0c2:	458c      	cmp	ip, r1
 800c0c4:	bf38      	it	cc
 800c0c6:	2204      	movcc	r2, #4
 800c0c8:	9201      	str	r2, [sp, #4]
 800c0ca:	9a02      	ldr	r2, [sp, #8]
 800c0cc:	9303      	str	r3, [sp, #12]
 800c0ce:	429a      	cmp	r2, r3
 800c0d0:	d808      	bhi.n	800c0e4 <__multiply+0x98>
 800c0d2:	2f00      	cmp	r7, #0
 800c0d4:	dc55      	bgt.n	800c182 <__multiply+0x136>
 800c0d6:	6107      	str	r7, [r0, #16]
 800c0d8:	b005      	add	sp, #20
 800c0da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0de:	f843 2b04 	str.w	r2, [r3], #4
 800c0e2:	e7db      	b.n	800c09c <__multiply+0x50>
 800c0e4:	f8b3 a000 	ldrh.w	sl, [r3]
 800c0e8:	f1ba 0f00 	cmp.w	sl, #0
 800c0ec:	d020      	beq.n	800c130 <__multiply+0xe4>
 800c0ee:	f105 0e14 	add.w	lr, r5, #20
 800c0f2:	46b1      	mov	r9, r6
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	f85e 4b04 	ldr.w	r4, [lr], #4
 800c0fa:	f8d9 b000 	ldr.w	fp, [r9]
 800c0fe:	b2a1      	uxth	r1, r4
 800c100:	fa1f fb8b 	uxth.w	fp, fp
 800c104:	fb0a b101 	mla	r1, sl, r1, fp
 800c108:	4411      	add	r1, r2
 800c10a:	f8d9 2000 	ldr.w	r2, [r9]
 800c10e:	0c24      	lsrs	r4, r4, #16
 800c110:	0c12      	lsrs	r2, r2, #16
 800c112:	fb0a 2404 	mla	r4, sl, r4, r2
 800c116:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800c11a:	b289      	uxth	r1, r1
 800c11c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c120:	45f4      	cmp	ip, lr
 800c122:	f849 1b04 	str.w	r1, [r9], #4
 800c126:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800c12a:	d8e4      	bhi.n	800c0f6 <__multiply+0xaa>
 800c12c:	9901      	ldr	r1, [sp, #4]
 800c12e:	5072      	str	r2, [r6, r1]
 800c130:	9a03      	ldr	r2, [sp, #12]
 800c132:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c136:	3304      	adds	r3, #4
 800c138:	f1b9 0f00 	cmp.w	r9, #0
 800c13c:	d01f      	beq.n	800c17e <__multiply+0x132>
 800c13e:	6834      	ldr	r4, [r6, #0]
 800c140:	f105 0114 	add.w	r1, r5, #20
 800c144:	46b6      	mov	lr, r6
 800c146:	f04f 0a00 	mov.w	sl, #0
 800c14a:	880a      	ldrh	r2, [r1, #0]
 800c14c:	f8be b002 	ldrh.w	fp, [lr, #2]
 800c150:	fb09 b202 	mla	r2, r9, r2, fp
 800c154:	4492      	add	sl, r2
 800c156:	b2a4      	uxth	r4, r4
 800c158:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800c15c:	f84e 4b04 	str.w	r4, [lr], #4
 800c160:	f851 4b04 	ldr.w	r4, [r1], #4
 800c164:	f8be 2000 	ldrh.w	r2, [lr]
 800c168:	0c24      	lsrs	r4, r4, #16
 800c16a:	fb09 2404 	mla	r4, r9, r4, r2
 800c16e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800c172:	458c      	cmp	ip, r1
 800c174:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c178:	d8e7      	bhi.n	800c14a <__multiply+0xfe>
 800c17a:	9a01      	ldr	r2, [sp, #4]
 800c17c:	50b4      	str	r4, [r6, r2]
 800c17e:	3604      	adds	r6, #4
 800c180:	e7a3      	b.n	800c0ca <__multiply+0x7e>
 800c182:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c186:	2b00      	cmp	r3, #0
 800c188:	d1a5      	bne.n	800c0d6 <__multiply+0x8a>
 800c18a:	3f01      	subs	r7, #1
 800c18c:	e7a1      	b.n	800c0d2 <__multiply+0x86>
 800c18e:	bf00      	nop
 800c190:	0800d53f 	.word	0x0800d53f
 800c194:	0800d5b0 	.word	0x0800d5b0

0800c198 <__pow5mult>:
 800c198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c19c:	4615      	mov	r5, r2
 800c19e:	f012 0203 	ands.w	r2, r2, #3
 800c1a2:	4606      	mov	r6, r0
 800c1a4:	460f      	mov	r7, r1
 800c1a6:	d007      	beq.n	800c1b8 <__pow5mult+0x20>
 800c1a8:	4c25      	ldr	r4, [pc, #148]	; (800c240 <__pow5mult+0xa8>)
 800c1aa:	3a01      	subs	r2, #1
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c1b2:	f7ff fe9b 	bl	800beec <__multadd>
 800c1b6:	4607      	mov	r7, r0
 800c1b8:	10ad      	asrs	r5, r5, #2
 800c1ba:	d03d      	beq.n	800c238 <__pow5mult+0xa0>
 800c1bc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c1be:	b97c      	cbnz	r4, 800c1e0 <__pow5mult+0x48>
 800c1c0:	2010      	movs	r0, #16
 800c1c2:	f7ff fe1b 	bl	800bdfc <malloc>
 800c1c6:	4602      	mov	r2, r0
 800c1c8:	6270      	str	r0, [r6, #36]	; 0x24
 800c1ca:	b928      	cbnz	r0, 800c1d8 <__pow5mult+0x40>
 800c1cc:	4b1d      	ldr	r3, [pc, #116]	; (800c244 <__pow5mult+0xac>)
 800c1ce:	481e      	ldr	r0, [pc, #120]	; (800c248 <__pow5mult+0xb0>)
 800c1d0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c1d4:	f000 fce0 	bl	800cb98 <__assert_func>
 800c1d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c1dc:	6004      	str	r4, [r0, #0]
 800c1de:	60c4      	str	r4, [r0, #12]
 800c1e0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c1e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c1e8:	b94c      	cbnz	r4, 800c1fe <__pow5mult+0x66>
 800c1ea:	f240 2171 	movw	r1, #625	; 0x271
 800c1ee:	4630      	mov	r0, r6
 800c1f0:	f7ff ff16 	bl	800c020 <__i2b>
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	f8c8 0008 	str.w	r0, [r8, #8]
 800c1fa:	4604      	mov	r4, r0
 800c1fc:	6003      	str	r3, [r0, #0]
 800c1fe:	f04f 0900 	mov.w	r9, #0
 800c202:	07eb      	lsls	r3, r5, #31
 800c204:	d50a      	bpl.n	800c21c <__pow5mult+0x84>
 800c206:	4639      	mov	r1, r7
 800c208:	4622      	mov	r2, r4
 800c20a:	4630      	mov	r0, r6
 800c20c:	f7ff ff1e 	bl	800c04c <__multiply>
 800c210:	4639      	mov	r1, r7
 800c212:	4680      	mov	r8, r0
 800c214:	4630      	mov	r0, r6
 800c216:	f7ff fe47 	bl	800bea8 <_Bfree>
 800c21a:	4647      	mov	r7, r8
 800c21c:	106d      	asrs	r5, r5, #1
 800c21e:	d00b      	beq.n	800c238 <__pow5mult+0xa0>
 800c220:	6820      	ldr	r0, [r4, #0]
 800c222:	b938      	cbnz	r0, 800c234 <__pow5mult+0x9c>
 800c224:	4622      	mov	r2, r4
 800c226:	4621      	mov	r1, r4
 800c228:	4630      	mov	r0, r6
 800c22a:	f7ff ff0f 	bl	800c04c <__multiply>
 800c22e:	6020      	str	r0, [r4, #0]
 800c230:	f8c0 9000 	str.w	r9, [r0]
 800c234:	4604      	mov	r4, r0
 800c236:	e7e4      	b.n	800c202 <__pow5mult+0x6a>
 800c238:	4638      	mov	r0, r7
 800c23a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c23e:	bf00      	nop
 800c240:	0800d700 	.word	0x0800d700
 800c244:	0800d4c9 	.word	0x0800d4c9
 800c248:	0800d5b0 	.word	0x0800d5b0

0800c24c <__lshift>:
 800c24c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c250:	460c      	mov	r4, r1
 800c252:	6849      	ldr	r1, [r1, #4]
 800c254:	6923      	ldr	r3, [r4, #16]
 800c256:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c25a:	68a3      	ldr	r3, [r4, #8]
 800c25c:	4607      	mov	r7, r0
 800c25e:	4691      	mov	r9, r2
 800c260:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c264:	f108 0601 	add.w	r6, r8, #1
 800c268:	42b3      	cmp	r3, r6
 800c26a:	db0b      	blt.n	800c284 <__lshift+0x38>
 800c26c:	4638      	mov	r0, r7
 800c26e:	f7ff fddb 	bl	800be28 <_Balloc>
 800c272:	4605      	mov	r5, r0
 800c274:	b948      	cbnz	r0, 800c28a <__lshift+0x3e>
 800c276:	4602      	mov	r2, r0
 800c278:	4b28      	ldr	r3, [pc, #160]	; (800c31c <__lshift+0xd0>)
 800c27a:	4829      	ldr	r0, [pc, #164]	; (800c320 <__lshift+0xd4>)
 800c27c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c280:	f000 fc8a 	bl	800cb98 <__assert_func>
 800c284:	3101      	adds	r1, #1
 800c286:	005b      	lsls	r3, r3, #1
 800c288:	e7ee      	b.n	800c268 <__lshift+0x1c>
 800c28a:	2300      	movs	r3, #0
 800c28c:	f100 0114 	add.w	r1, r0, #20
 800c290:	f100 0210 	add.w	r2, r0, #16
 800c294:	4618      	mov	r0, r3
 800c296:	4553      	cmp	r3, sl
 800c298:	db33      	blt.n	800c302 <__lshift+0xb6>
 800c29a:	6920      	ldr	r0, [r4, #16]
 800c29c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c2a0:	f104 0314 	add.w	r3, r4, #20
 800c2a4:	f019 091f 	ands.w	r9, r9, #31
 800c2a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c2ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c2b0:	d02b      	beq.n	800c30a <__lshift+0xbe>
 800c2b2:	f1c9 0e20 	rsb	lr, r9, #32
 800c2b6:	468a      	mov	sl, r1
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	6818      	ldr	r0, [r3, #0]
 800c2bc:	fa00 f009 	lsl.w	r0, r0, r9
 800c2c0:	4302      	orrs	r2, r0
 800c2c2:	f84a 2b04 	str.w	r2, [sl], #4
 800c2c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c2ca:	459c      	cmp	ip, r3
 800c2cc:	fa22 f20e 	lsr.w	r2, r2, lr
 800c2d0:	d8f3      	bhi.n	800c2ba <__lshift+0x6e>
 800c2d2:	ebac 0304 	sub.w	r3, ip, r4
 800c2d6:	3b15      	subs	r3, #21
 800c2d8:	f023 0303 	bic.w	r3, r3, #3
 800c2dc:	3304      	adds	r3, #4
 800c2de:	f104 0015 	add.w	r0, r4, #21
 800c2e2:	4584      	cmp	ip, r0
 800c2e4:	bf38      	it	cc
 800c2e6:	2304      	movcc	r3, #4
 800c2e8:	50ca      	str	r2, [r1, r3]
 800c2ea:	b10a      	cbz	r2, 800c2f0 <__lshift+0xa4>
 800c2ec:	f108 0602 	add.w	r6, r8, #2
 800c2f0:	3e01      	subs	r6, #1
 800c2f2:	4638      	mov	r0, r7
 800c2f4:	612e      	str	r6, [r5, #16]
 800c2f6:	4621      	mov	r1, r4
 800c2f8:	f7ff fdd6 	bl	800bea8 <_Bfree>
 800c2fc:	4628      	mov	r0, r5
 800c2fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c302:	f842 0f04 	str.w	r0, [r2, #4]!
 800c306:	3301      	adds	r3, #1
 800c308:	e7c5      	b.n	800c296 <__lshift+0x4a>
 800c30a:	3904      	subs	r1, #4
 800c30c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c310:	f841 2f04 	str.w	r2, [r1, #4]!
 800c314:	459c      	cmp	ip, r3
 800c316:	d8f9      	bhi.n	800c30c <__lshift+0xc0>
 800c318:	e7ea      	b.n	800c2f0 <__lshift+0xa4>
 800c31a:	bf00      	nop
 800c31c:	0800d53f 	.word	0x0800d53f
 800c320:	0800d5b0 	.word	0x0800d5b0

0800c324 <__mcmp>:
 800c324:	b530      	push	{r4, r5, lr}
 800c326:	6902      	ldr	r2, [r0, #16]
 800c328:	690c      	ldr	r4, [r1, #16]
 800c32a:	1b12      	subs	r2, r2, r4
 800c32c:	d10e      	bne.n	800c34c <__mcmp+0x28>
 800c32e:	f100 0314 	add.w	r3, r0, #20
 800c332:	3114      	adds	r1, #20
 800c334:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c338:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c33c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c340:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c344:	42a5      	cmp	r5, r4
 800c346:	d003      	beq.n	800c350 <__mcmp+0x2c>
 800c348:	d305      	bcc.n	800c356 <__mcmp+0x32>
 800c34a:	2201      	movs	r2, #1
 800c34c:	4610      	mov	r0, r2
 800c34e:	bd30      	pop	{r4, r5, pc}
 800c350:	4283      	cmp	r3, r0
 800c352:	d3f3      	bcc.n	800c33c <__mcmp+0x18>
 800c354:	e7fa      	b.n	800c34c <__mcmp+0x28>
 800c356:	f04f 32ff 	mov.w	r2, #4294967295
 800c35a:	e7f7      	b.n	800c34c <__mcmp+0x28>

0800c35c <__mdiff>:
 800c35c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c360:	460c      	mov	r4, r1
 800c362:	4606      	mov	r6, r0
 800c364:	4611      	mov	r1, r2
 800c366:	4620      	mov	r0, r4
 800c368:	4617      	mov	r7, r2
 800c36a:	f7ff ffdb 	bl	800c324 <__mcmp>
 800c36e:	1e05      	subs	r5, r0, #0
 800c370:	d110      	bne.n	800c394 <__mdiff+0x38>
 800c372:	4629      	mov	r1, r5
 800c374:	4630      	mov	r0, r6
 800c376:	f7ff fd57 	bl	800be28 <_Balloc>
 800c37a:	b930      	cbnz	r0, 800c38a <__mdiff+0x2e>
 800c37c:	4b39      	ldr	r3, [pc, #228]	; (800c464 <__mdiff+0x108>)
 800c37e:	4602      	mov	r2, r0
 800c380:	f240 2132 	movw	r1, #562	; 0x232
 800c384:	4838      	ldr	r0, [pc, #224]	; (800c468 <__mdiff+0x10c>)
 800c386:	f000 fc07 	bl	800cb98 <__assert_func>
 800c38a:	2301      	movs	r3, #1
 800c38c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c390:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c394:	bfa4      	itt	ge
 800c396:	463b      	movge	r3, r7
 800c398:	4627      	movge	r7, r4
 800c39a:	4630      	mov	r0, r6
 800c39c:	6879      	ldr	r1, [r7, #4]
 800c39e:	bfa6      	itte	ge
 800c3a0:	461c      	movge	r4, r3
 800c3a2:	2500      	movge	r5, #0
 800c3a4:	2501      	movlt	r5, #1
 800c3a6:	f7ff fd3f 	bl	800be28 <_Balloc>
 800c3aa:	b920      	cbnz	r0, 800c3b6 <__mdiff+0x5a>
 800c3ac:	4b2d      	ldr	r3, [pc, #180]	; (800c464 <__mdiff+0x108>)
 800c3ae:	4602      	mov	r2, r0
 800c3b0:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c3b4:	e7e6      	b.n	800c384 <__mdiff+0x28>
 800c3b6:	693e      	ldr	r6, [r7, #16]
 800c3b8:	60c5      	str	r5, [r0, #12]
 800c3ba:	6925      	ldr	r5, [r4, #16]
 800c3bc:	f107 0114 	add.w	r1, r7, #20
 800c3c0:	f104 0914 	add.w	r9, r4, #20
 800c3c4:	f100 0e14 	add.w	lr, r0, #20
 800c3c8:	f107 0210 	add.w	r2, r7, #16
 800c3cc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800c3d0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800c3d4:	46f2      	mov	sl, lr
 800c3d6:	2700      	movs	r7, #0
 800c3d8:	f859 3b04 	ldr.w	r3, [r9], #4
 800c3dc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c3e0:	fa1f f883 	uxth.w	r8, r3
 800c3e4:	fa17 f78b 	uxtah	r7, r7, fp
 800c3e8:	0c1b      	lsrs	r3, r3, #16
 800c3ea:	eba7 0808 	sub.w	r8, r7, r8
 800c3ee:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c3f2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c3f6:	fa1f f888 	uxth.w	r8, r8
 800c3fa:	141f      	asrs	r7, r3, #16
 800c3fc:	454d      	cmp	r5, r9
 800c3fe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c402:	f84a 3b04 	str.w	r3, [sl], #4
 800c406:	d8e7      	bhi.n	800c3d8 <__mdiff+0x7c>
 800c408:	1b2b      	subs	r3, r5, r4
 800c40a:	3b15      	subs	r3, #21
 800c40c:	f023 0303 	bic.w	r3, r3, #3
 800c410:	3304      	adds	r3, #4
 800c412:	3415      	adds	r4, #21
 800c414:	42a5      	cmp	r5, r4
 800c416:	bf38      	it	cc
 800c418:	2304      	movcc	r3, #4
 800c41a:	4419      	add	r1, r3
 800c41c:	4473      	add	r3, lr
 800c41e:	469e      	mov	lr, r3
 800c420:	460d      	mov	r5, r1
 800c422:	4565      	cmp	r5, ip
 800c424:	d30e      	bcc.n	800c444 <__mdiff+0xe8>
 800c426:	f10c 0203 	add.w	r2, ip, #3
 800c42a:	1a52      	subs	r2, r2, r1
 800c42c:	f022 0203 	bic.w	r2, r2, #3
 800c430:	3903      	subs	r1, #3
 800c432:	458c      	cmp	ip, r1
 800c434:	bf38      	it	cc
 800c436:	2200      	movcc	r2, #0
 800c438:	441a      	add	r2, r3
 800c43a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c43e:	b17b      	cbz	r3, 800c460 <__mdiff+0x104>
 800c440:	6106      	str	r6, [r0, #16]
 800c442:	e7a5      	b.n	800c390 <__mdiff+0x34>
 800c444:	f855 8b04 	ldr.w	r8, [r5], #4
 800c448:	fa17 f488 	uxtah	r4, r7, r8
 800c44c:	1422      	asrs	r2, r4, #16
 800c44e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800c452:	b2a4      	uxth	r4, r4
 800c454:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800c458:	f84e 4b04 	str.w	r4, [lr], #4
 800c45c:	1417      	asrs	r7, r2, #16
 800c45e:	e7e0      	b.n	800c422 <__mdiff+0xc6>
 800c460:	3e01      	subs	r6, #1
 800c462:	e7ea      	b.n	800c43a <__mdiff+0xde>
 800c464:	0800d53f 	.word	0x0800d53f
 800c468:	0800d5b0 	.word	0x0800d5b0

0800c46c <__d2b>:
 800c46c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c470:	4689      	mov	r9, r1
 800c472:	2101      	movs	r1, #1
 800c474:	ec57 6b10 	vmov	r6, r7, d0
 800c478:	4690      	mov	r8, r2
 800c47a:	f7ff fcd5 	bl	800be28 <_Balloc>
 800c47e:	4604      	mov	r4, r0
 800c480:	b930      	cbnz	r0, 800c490 <__d2b+0x24>
 800c482:	4602      	mov	r2, r0
 800c484:	4b25      	ldr	r3, [pc, #148]	; (800c51c <__d2b+0xb0>)
 800c486:	4826      	ldr	r0, [pc, #152]	; (800c520 <__d2b+0xb4>)
 800c488:	f240 310a 	movw	r1, #778	; 0x30a
 800c48c:	f000 fb84 	bl	800cb98 <__assert_func>
 800c490:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c494:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c498:	bb35      	cbnz	r5, 800c4e8 <__d2b+0x7c>
 800c49a:	2e00      	cmp	r6, #0
 800c49c:	9301      	str	r3, [sp, #4]
 800c49e:	d028      	beq.n	800c4f2 <__d2b+0x86>
 800c4a0:	4668      	mov	r0, sp
 800c4a2:	9600      	str	r6, [sp, #0]
 800c4a4:	f7ff fd8c 	bl	800bfc0 <__lo0bits>
 800c4a8:	9900      	ldr	r1, [sp, #0]
 800c4aa:	b300      	cbz	r0, 800c4ee <__d2b+0x82>
 800c4ac:	9a01      	ldr	r2, [sp, #4]
 800c4ae:	f1c0 0320 	rsb	r3, r0, #32
 800c4b2:	fa02 f303 	lsl.w	r3, r2, r3
 800c4b6:	430b      	orrs	r3, r1
 800c4b8:	40c2      	lsrs	r2, r0
 800c4ba:	6163      	str	r3, [r4, #20]
 800c4bc:	9201      	str	r2, [sp, #4]
 800c4be:	9b01      	ldr	r3, [sp, #4]
 800c4c0:	61a3      	str	r3, [r4, #24]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	bf14      	ite	ne
 800c4c6:	2202      	movne	r2, #2
 800c4c8:	2201      	moveq	r2, #1
 800c4ca:	6122      	str	r2, [r4, #16]
 800c4cc:	b1d5      	cbz	r5, 800c504 <__d2b+0x98>
 800c4ce:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c4d2:	4405      	add	r5, r0
 800c4d4:	f8c9 5000 	str.w	r5, [r9]
 800c4d8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c4dc:	f8c8 0000 	str.w	r0, [r8]
 800c4e0:	4620      	mov	r0, r4
 800c4e2:	b003      	add	sp, #12
 800c4e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c4e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c4ec:	e7d5      	b.n	800c49a <__d2b+0x2e>
 800c4ee:	6161      	str	r1, [r4, #20]
 800c4f0:	e7e5      	b.n	800c4be <__d2b+0x52>
 800c4f2:	a801      	add	r0, sp, #4
 800c4f4:	f7ff fd64 	bl	800bfc0 <__lo0bits>
 800c4f8:	9b01      	ldr	r3, [sp, #4]
 800c4fa:	6163      	str	r3, [r4, #20]
 800c4fc:	2201      	movs	r2, #1
 800c4fe:	6122      	str	r2, [r4, #16]
 800c500:	3020      	adds	r0, #32
 800c502:	e7e3      	b.n	800c4cc <__d2b+0x60>
 800c504:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c508:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c50c:	f8c9 0000 	str.w	r0, [r9]
 800c510:	6918      	ldr	r0, [r3, #16]
 800c512:	f7ff fd35 	bl	800bf80 <__hi0bits>
 800c516:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c51a:	e7df      	b.n	800c4dc <__d2b+0x70>
 800c51c:	0800d53f 	.word	0x0800d53f
 800c520:	0800d5b0 	.word	0x0800d5b0

0800c524 <_calloc_r>:
 800c524:	b513      	push	{r0, r1, r4, lr}
 800c526:	434a      	muls	r2, r1
 800c528:	4611      	mov	r1, r2
 800c52a:	9201      	str	r2, [sp, #4]
 800c52c:	f000 f85a 	bl	800c5e4 <_malloc_r>
 800c530:	4604      	mov	r4, r0
 800c532:	b118      	cbz	r0, 800c53c <_calloc_r+0x18>
 800c534:	9a01      	ldr	r2, [sp, #4]
 800c536:	2100      	movs	r1, #0
 800c538:	f7fe f860 	bl	800a5fc <memset>
 800c53c:	4620      	mov	r0, r4
 800c53e:	b002      	add	sp, #8
 800c540:	bd10      	pop	{r4, pc}
	...

0800c544 <_free_r>:
 800c544:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c546:	2900      	cmp	r1, #0
 800c548:	d048      	beq.n	800c5dc <_free_r+0x98>
 800c54a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c54e:	9001      	str	r0, [sp, #4]
 800c550:	2b00      	cmp	r3, #0
 800c552:	f1a1 0404 	sub.w	r4, r1, #4
 800c556:	bfb8      	it	lt
 800c558:	18e4      	addlt	r4, r4, r3
 800c55a:	f000 fca7 	bl	800ceac <__malloc_lock>
 800c55e:	4a20      	ldr	r2, [pc, #128]	; (800c5e0 <_free_r+0x9c>)
 800c560:	9801      	ldr	r0, [sp, #4]
 800c562:	6813      	ldr	r3, [r2, #0]
 800c564:	4615      	mov	r5, r2
 800c566:	b933      	cbnz	r3, 800c576 <_free_r+0x32>
 800c568:	6063      	str	r3, [r4, #4]
 800c56a:	6014      	str	r4, [r2, #0]
 800c56c:	b003      	add	sp, #12
 800c56e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c572:	f000 bca1 	b.w	800ceb8 <__malloc_unlock>
 800c576:	42a3      	cmp	r3, r4
 800c578:	d90b      	bls.n	800c592 <_free_r+0x4e>
 800c57a:	6821      	ldr	r1, [r4, #0]
 800c57c:	1862      	adds	r2, r4, r1
 800c57e:	4293      	cmp	r3, r2
 800c580:	bf04      	itt	eq
 800c582:	681a      	ldreq	r2, [r3, #0]
 800c584:	685b      	ldreq	r3, [r3, #4]
 800c586:	6063      	str	r3, [r4, #4]
 800c588:	bf04      	itt	eq
 800c58a:	1852      	addeq	r2, r2, r1
 800c58c:	6022      	streq	r2, [r4, #0]
 800c58e:	602c      	str	r4, [r5, #0]
 800c590:	e7ec      	b.n	800c56c <_free_r+0x28>
 800c592:	461a      	mov	r2, r3
 800c594:	685b      	ldr	r3, [r3, #4]
 800c596:	b10b      	cbz	r3, 800c59c <_free_r+0x58>
 800c598:	42a3      	cmp	r3, r4
 800c59a:	d9fa      	bls.n	800c592 <_free_r+0x4e>
 800c59c:	6811      	ldr	r1, [r2, #0]
 800c59e:	1855      	adds	r5, r2, r1
 800c5a0:	42a5      	cmp	r5, r4
 800c5a2:	d10b      	bne.n	800c5bc <_free_r+0x78>
 800c5a4:	6824      	ldr	r4, [r4, #0]
 800c5a6:	4421      	add	r1, r4
 800c5a8:	1854      	adds	r4, r2, r1
 800c5aa:	42a3      	cmp	r3, r4
 800c5ac:	6011      	str	r1, [r2, #0]
 800c5ae:	d1dd      	bne.n	800c56c <_free_r+0x28>
 800c5b0:	681c      	ldr	r4, [r3, #0]
 800c5b2:	685b      	ldr	r3, [r3, #4]
 800c5b4:	6053      	str	r3, [r2, #4]
 800c5b6:	4421      	add	r1, r4
 800c5b8:	6011      	str	r1, [r2, #0]
 800c5ba:	e7d7      	b.n	800c56c <_free_r+0x28>
 800c5bc:	d902      	bls.n	800c5c4 <_free_r+0x80>
 800c5be:	230c      	movs	r3, #12
 800c5c0:	6003      	str	r3, [r0, #0]
 800c5c2:	e7d3      	b.n	800c56c <_free_r+0x28>
 800c5c4:	6825      	ldr	r5, [r4, #0]
 800c5c6:	1961      	adds	r1, r4, r5
 800c5c8:	428b      	cmp	r3, r1
 800c5ca:	bf04      	itt	eq
 800c5cc:	6819      	ldreq	r1, [r3, #0]
 800c5ce:	685b      	ldreq	r3, [r3, #4]
 800c5d0:	6063      	str	r3, [r4, #4]
 800c5d2:	bf04      	itt	eq
 800c5d4:	1949      	addeq	r1, r1, r5
 800c5d6:	6021      	streq	r1, [r4, #0]
 800c5d8:	6054      	str	r4, [r2, #4]
 800c5da:	e7c7      	b.n	800c56c <_free_r+0x28>
 800c5dc:	b003      	add	sp, #12
 800c5de:	bd30      	pop	{r4, r5, pc}
 800c5e0:	20000880 	.word	0x20000880

0800c5e4 <_malloc_r>:
 800c5e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5e6:	1ccd      	adds	r5, r1, #3
 800c5e8:	f025 0503 	bic.w	r5, r5, #3
 800c5ec:	3508      	adds	r5, #8
 800c5ee:	2d0c      	cmp	r5, #12
 800c5f0:	bf38      	it	cc
 800c5f2:	250c      	movcc	r5, #12
 800c5f4:	2d00      	cmp	r5, #0
 800c5f6:	4606      	mov	r6, r0
 800c5f8:	db01      	blt.n	800c5fe <_malloc_r+0x1a>
 800c5fa:	42a9      	cmp	r1, r5
 800c5fc:	d903      	bls.n	800c606 <_malloc_r+0x22>
 800c5fe:	230c      	movs	r3, #12
 800c600:	6033      	str	r3, [r6, #0]
 800c602:	2000      	movs	r0, #0
 800c604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c606:	f000 fc51 	bl	800ceac <__malloc_lock>
 800c60a:	4921      	ldr	r1, [pc, #132]	; (800c690 <_malloc_r+0xac>)
 800c60c:	680a      	ldr	r2, [r1, #0]
 800c60e:	4614      	mov	r4, r2
 800c610:	b99c      	cbnz	r4, 800c63a <_malloc_r+0x56>
 800c612:	4f20      	ldr	r7, [pc, #128]	; (800c694 <_malloc_r+0xb0>)
 800c614:	683b      	ldr	r3, [r7, #0]
 800c616:	b923      	cbnz	r3, 800c622 <_malloc_r+0x3e>
 800c618:	4621      	mov	r1, r4
 800c61a:	4630      	mov	r0, r6
 800c61c:	f000 f996 	bl	800c94c <_sbrk_r>
 800c620:	6038      	str	r0, [r7, #0]
 800c622:	4629      	mov	r1, r5
 800c624:	4630      	mov	r0, r6
 800c626:	f000 f991 	bl	800c94c <_sbrk_r>
 800c62a:	1c43      	adds	r3, r0, #1
 800c62c:	d123      	bne.n	800c676 <_malloc_r+0x92>
 800c62e:	230c      	movs	r3, #12
 800c630:	6033      	str	r3, [r6, #0]
 800c632:	4630      	mov	r0, r6
 800c634:	f000 fc40 	bl	800ceb8 <__malloc_unlock>
 800c638:	e7e3      	b.n	800c602 <_malloc_r+0x1e>
 800c63a:	6823      	ldr	r3, [r4, #0]
 800c63c:	1b5b      	subs	r3, r3, r5
 800c63e:	d417      	bmi.n	800c670 <_malloc_r+0x8c>
 800c640:	2b0b      	cmp	r3, #11
 800c642:	d903      	bls.n	800c64c <_malloc_r+0x68>
 800c644:	6023      	str	r3, [r4, #0]
 800c646:	441c      	add	r4, r3
 800c648:	6025      	str	r5, [r4, #0]
 800c64a:	e004      	b.n	800c656 <_malloc_r+0x72>
 800c64c:	6863      	ldr	r3, [r4, #4]
 800c64e:	42a2      	cmp	r2, r4
 800c650:	bf0c      	ite	eq
 800c652:	600b      	streq	r3, [r1, #0]
 800c654:	6053      	strne	r3, [r2, #4]
 800c656:	4630      	mov	r0, r6
 800c658:	f000 fc2e 	bl	800ceb8 <__malloc_unlock>
 800c65c:	f104 000b 	add.w	r0, r4, #11
 800c660:	1d23      	adds	r3, r4, #4
 800c662:	f020 0007 	bic.w	r0, r0, #7
 800c666:	1ac2      	subs	r2, r0, r3
 800c668:	d0cc      	beq.n	800c604 <_malloc_r+0x20>
 800c66a:	1a1b      	subs	r3, r3, r0
 800c66c:	50a3      	str	r3, [r4, r2]
 800c66e:	e7c9      	b.n	800c604 <_malloc_r+0x20>
 800c670:	4622      	mov	r2, r4
 800c672:	6864      	ldr	r4, [r4, #4]
 800c674:	e7cc      	b.n	800c610 <_malloc_r+0x2c>
 800c676:	1cc4      	adds	r4, r0, #3
 800c678:	f024 0403 	bic.w	r4, r4, #3
 800c67c:	42a0      	cmp	r0, r4
 800c67e:	d0e3      	beq.n	800c648 <_malloc_r+0x64>
 800c680:	1a21      	subs	r1, r4, r0
 800c682:	4630      	mov	r0, r6
 800c684:	f000 f962 	bl	800c94c <_sbrk_r>
 800c688:	3001      	adds	r0, #1
 800c68a:	d1dd      	bne.n	800c648 <_malloc_r+0x64>
 800c68c:	e7cf      	b.n	800c62e <_malloc_r+0x4a>
 800c68e:	bf00      	nop
 800c690:	20000880 	.word	0x20000880
 800c694:	20000884 	.word	0x20000884

0800c698 <__sfputc_r>:
 800c698:	6893      	ldr	r3, [r2, #8]
 800c69a:	3b01      	subs	r3, #1
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	b410      	push	{r4}
 800c6a0:	6093      	str	r3, [r2, #8]
 800c6a2:	da08      	bge.n	800c6b6 <__sfputc_r+0x1e>
 800c6a4:	6994      	ldr	r4, [r2, #24]
 800c6a6:	42a3      	cmp	r3, r4
 800c6a8:	db01      	blt.n	800c6ae <__sfputc_r+0x16>
 800c6aa:	290a      	cmp	r1, #10
 800c6ac:	d103      	bne.n	800c6b6 <__sfputc_r+0x1e>
 800c6ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c6b2:	f000 b99f 	b.w	800c9f4 <__swbuf_r>
 800c6b6:	6813      	ldr	r3, [r2, #0]
 800c6b8:	1c58      	adds	r0, r3, #1
 800c6ba:	6010      	str	r0, [r2, #0]
 800c6bc:	7019      	strb	r1, [r3, #0]
 800c6be:	4608      	mov	r0, r1
 800c6c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c6c4:	4770      	bx	lr

0800c6c6 <__sfputs_r>:
 800c6c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6c8:	4606      	mov	r6, r0
 800c6ca:	460f      	mov	r7, r1
 800c6cc:	4614      	mov	r4, r2
 800c6ce:	18d5      	adds	r5, r2, r3
 800c6d0:	42ac      	cmp	r4, r5
 800c6d2:	d101      	bne.n	800c6d8 <__sfputs_r+0x12>
 800c6d4:	2000      	movs	r0, #0
 800c6d6:	e007      	b.n	800c6e8 <__sfputs_r+0x22>
 800c6d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6dc:	463a      	mov	r2, r7
 800c6de:	4630      	mov	r0, r6
 800c6e0:	f7ff ffda 	bl	800c698 <__sfputc_r>
 800c6e4:	1c43      	adds	r3, r0, #1
 800c6e6:	d1f3      	bne.n	800c6d0 <__sfputs_r+0xa>
 800c6e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c6ec <_vfiprintf_r>:
 800c6ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6f0:	460d      	mov	r5, r1
 800c6f2:	b09d      	sub	sp, #116	; 0x74
 800c6f4:	4614      	mov	r4, r2
 800c6f6:	4698      	mov	r8, r3
 800c6f8:	4606      	mov	r6, r0
 800c6fa:	b118      	cbz	r0, 800c704 <_vfiprintf_r+0x18>
 800c6fc:	6983      	ldr	r3, [r0, #24]
 800c6fe:	b90b      	cbnz	r3, 800c704 <_vfiprintf_r+0x18>
 800c700:	f7ff fad6 	bl	800bcb0 <__sinit>
 800c704:	4b89      	ldr	r3, [pc, #548]	; (800c92c <_vfiprintf_r+0x240>)
 800c706:	429d      	cmp	r5, r3
 800c708:	d11b      	bne.n	800c742 <_vfiprintf_r+0x56>
 800c70a:	6875      	ldr	r5, [r6, #4]
 800c70c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c70e:	07d9      	lsls	r1, r3, #31
 800c710:	d405      	bmi.n	800c71e <_vfiprintf_r+0x32>
 800c712:	89ab      	ldrh	r3, [r5, #12]
 800c714:	059a      	lsls	r2, r3, #22
 800c716:	d402      	bmi.n	800c71e <_vfiprintf_r+0x32>
 800c718:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c71a:	f7ff fb6c 	bl	800bdf6 <__retarget_lock_acquire_recursive>
 800c71e:	89ab      	ldrh	r3, [r5, #12]
 800c720:	071b      	lsls	r3, r3, #28
 800c722:	d501      	bpl.n	800c728 <_vfiprintf_r+0x3c>
 800c724:	692b      	ldr	r3, [r5, #16]
 800c726:	b9eb      	cbnz	r3, 800c764 <_vfiprintf_r+0x78>
 800c728:	4629      	mov	r1, r5
 800c72a:	4630      	mov	r0, r6
 800c72c:	f000 f9c6 	bl	800cabc <__swsetup_r>
 800c730:	b1c0      	cbz	r0, 800c764 <_vfiprintf_r+0x78>
 800c732:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c734:	07dc      	lsls	r4, r3, #31
 800c736:	d50e      	bpl.n	800c756 <_vfiprintf_r+0x6a>
 800c738:	f04f 30ff 	mov.w	r0, #4294967295
 800c73c:	b01d      	add	sp, #116	; 0x74
 800c73e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c742:	4b7b      	ldr	r3, [pc, #492]	; (800c930 <_vfiprintf_r+0x244>)
 800c744:	429d      	cmp	r5, r3
 800c746:	d101      	bne.n	800c74c <_vfiprintf_r+0x60>
 800c748:	68b5      	ldr	r5, [r6, #8]
 800c74a:	e7df      	b.n	800c70c <_vfiprintf_r+0x20>
 800c74c:	4b79      	ldr	r3, [pc, #484]	; (800c934 <_vfiprintf_r+0x248>)
 800c74e:	429d      	cmp	r5, r3
 800c750:	bf08      	it	eq
 800c752:	68f5      	ldreq	r5, [r6, #12]
 800c754:	e7da      	b.n	800c70c <_vfiprintf_r+0x20>
 800c756:	89ab      	ldrh	r3, [r5, #12]
 800c758:	0598      	lsls	r0, r3, #22
 800c75a:	d4ed      	bmi.n	800c738 <_vfiprintf_r+0x4c>
 800c75c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c75e:	f7ff fb4b 	bl	800bdf8 <__retarget_lock_release_recursive>
 800c762:	e7e9      	b.n	800c738 <_vfiprintf_r+0x4c>
 800c764:	2300      	movs	r3, #0
 800c766:	9309      	str	r3, [sp, #36]	; 0x24
 800c768:	2320      	movs	r3, #32
 800c76a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c76e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c772:	2330      	movs	r3, #48	; 0x30
 800c774:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c938 <_vfiprintf_r+0x24c>
 800c778:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c77c:	f04f 0901 	mov.w	r9, #1
 800c780:	4623      	mov	r3, r4
 800c782:	469a      	mov	sl, r3
 800c784:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c788:	b10a      	cbz	r2, 800c78e <_vfiprintf_r+0xa2>
 800c78a:	2a25      	cmp	r2, #37	; 0x25
 800c78c:	d1f9      	bne.n	800c782 <_vfiprintf_r+0x96>
 800c78e:	ebba 0b04 	subs.w	fp, sl, r4
 800c792:	d00b      	beq.n	800c7ac <_vfiprintf_r+0xc0>
 800c794:	465b      	mov	r3, fp
 800c796:	4622      	mov	r2, r4
 800c798:	4629      	mov	r1, r5
 800c79a:	4630      	mov	r0, r6
 800c79c:	f7ff ff93 	bl	800c6c6 <__sfputs_r>
 800c7a0:	3001      	adds	r0, #1
 800c7a2:	f000 80aa 	beq.w	800c8fa <_vfiprintf_r+0x20e>
 800c7a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c7a8:	445a      	add	r2, fp
 800c7aa:	9209      	str	r2, [sp, #36]	; 0x24
 800c7ac:	f89a 3000 	ldrb.w	r3, [sl]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	f000 80a2 	beq.w	800c8fa <_vfiprintf_r+0x20e>
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	f04f 32ff 	mov.w	r2, #4294967295
 800c7bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c7c0:	f10a 0a01 	add.w	sl, sl, #1
 800c7c4:	9304      	str	r3, [sp, #16]
 800c7c6:	9307      	str	r3, [sp, #28]
 800c7c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c7cc:	931a      	str	r3, [sp, #104]	; 0x68
 800c7ce:	4654      	mov	r4, sl
 800c7d0:	2205      	movs	r2, #5
 800c7d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7d6:	4858      	ldr	r0, [pc, #352]	; (800c938 <_vfiprintf_r+0x24c>)
 800c7d8:	f7f3 fd02 	bl	80001e0 <memchr>
 800c7dc:	9a04      	ldr	r2, [sp, #16]
 800c7de:	b9d8      	cbnz	r0, 800c818 <_vfiprintf_r+0x12c>
 800c7e0:	06d1      	lsls	r1, r2, #27
 800c7e2:	bf44      	itt	mi
 800c7e4:	2320      	movmi	r3, #32
 800c7e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c7ea:	0713      	lsls	r3, r2, #28
 800c7ec:	bf44      	itt	mi
 800c7ee:	232b      	movmi	r3, #43	; 0x2b
 800c7f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c7f4:	f89a 3000 	ldrb.w	r3, [sl]
 800c7f8:	2b2a      	cmp	r3, #42	; 0x2a
 800c7fa:	d015      	beq.n	800c828 <_vfiprintf_r+0x13c>
 800c7fc:	9a07      	ldr	r2, [sp, #28]
 800c7fe:	4654      	mov	r4, sl
 800c800:	2000      	movs	r0, #0
 800c802:	f04f 0c0a 	mov.w	ip, #10
 800c806:	4621      	mov	r1, r4
 800c808:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c80c:	3b30      	subs	r3, #48	; 0x30
 800c80e:	2b09      	cmp	r3, #9
 800c810:	d94e      	bls.n	800c8b0 <_vfiprintf_r+0x1c4>
 800c812:	b1b0      	cbz	r0, 800c842 <_vfiprintf_r+0x156>
 800c814:	9207      	str	r2, [sp, #28]
 800c816:	e014      	b.n	800c842 <_vfiprintf_r+0x156>
 800c818:	eba0 0308 	sub.w	r3, r0, r8
 800c81c:	fa09 f303 	lsl.w	r3, r9, r3
 800c820:	4313      	orrs	r3, r2
 800c822:	9304      	str	r3, [sp, #16]
 800c824:	46a2      	mov	sl, r4
 800c826:	e7d2      	b.n	800c7ce <_vfiprintf_r+0xe2>
 800c828:	9b03      	ldr	r3, [sp, #12]
 800c82a:	1d19      	adds	r1, r3, #4
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	9103      	str	r1, [sp, #12]
 800c830:	2b00      	cmp	r3, #0
 800c832:	bfbb      	ittet	lt
 800c834:	425b      	neglt	r3, r3
 800c836:	f042 0202 	orrlt.w	r2, r2, #2
 800c83a:	9307      	strge	r3, [sp, #28]
 800c83c:	9307      	strlt	r3, [sp, #28]
 800c83e:	bfb8      	it	lt
 800c840:	9204      	strlt	r2, [sp, #16]
 800c842:	7823      	ldrb	r3, [r4, #0]
 800c844:	2b2e      	cmp	r3, #46	; 0x2e
 800c846:	d10c      	bne.n	800c862 <_vfiprintf_r+0x176>
 800c848:	7863      	ldrb	r3, [r4, #1]
 800c84a:	2b2a      	cmp	r3, #42	; 0x2a
 800c84c:	d135      	bne.n	800c8ba <_vfiprintf_r+0x1ce>
 800c84e:	9b03      	ldr	r3, [sp, #12]
 800c850:	1d1a      	adds	r2, r3, #4
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	9203      	str	r2, [sp, #12]
 800c856:	2b00      	cmp	r3, #0
 800c858:	bfb8      	it	lt
 800c85a:	f04f 33ff 	movlt.w	r3, #4294967295
 800c85e:	3402      	adds	r4, #2
 800c860:	9305      	str	r3, [sp, #20]
 800c862:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c948 <_vfiprintf_r+0x25c>
 800c866:	7821      	ldrb	r1, [r4, #0]
 800c868:	2203      	movs	r2, #3
 800c86a:	4650      	mov	r0, sl
 800c86c:	f7f3 fcb8 	bl	80001e0 <memchr>
 800c870:	b140      	cbz	r0, 800c884 <_vfiprintf_r+0x198>
 800c872:	2340      	movs	r3, #64	; 0x40
 800c874:	eba0 000a 	sub.w	r0, r0, sl
 800c878:	fa03 f000 	lsl.w	r0, r3, r0
 800c87c:	9b04      	ldr	r3, [sp, #16]
 800c87e:	4303      	orrs	r3, r0
 800c880:	3401      	adds	r4, #1
 800c882:	9304      	str	r3, [sp, #16]
 800c884:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c888:	482c      	ldr	r0, [pc, #176]	; (800c93c <_vfiprintf_r+0x250>)
 800c88a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c88e:	2206      	movs	r2, #6
 800c890:	f7f3 fca6 	bl	80001e0 <memchr>
 800c894:	2800      	cmp	r0, #0
 800c896:	d03f      	beq.n	800c918 <_vfiprintf_r+0x22c>
 800c898:	4b29      	ldr	r3, [pc, #164]	; (800c940 <_vfiprintf_r+0x254>)
 800c89a:	bb1b      	cbnz	r3, 800c8e4 <_vfiprintf_r+0x1f8>
 800c89c:	9b03      	ldr	r3, [sp, #12]
 800c89e:	3307      	adds	r3, #7
 800c8a0:	f023 0307 	bic.w	r3, r3, #7
 800c8a4:	3308      	adds	r3, #8
 800c8a6:	9303      	str	r3, [sp, #12]
 800c8a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8aa:	443b      	add	r3, r7
 800c8ac:	9309      	str	r3, [sp, #36]	; 0x24
 800c8ae:	e767      	b.n	800c780 <_vfiprintf_r+0x94>
 800c8b0:	fb0c 3202 	mla	r2, ip, r2, r3
 800c8b4:	460c      	mov	r4, r1
 800c8b6:	2001      	movs	r0, #1
 800c8b8:	e7a5      	b.n	800c806 <_vfiprintf_r+0x11a>
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	3401      	adds	r4, #1
 800c8be:	9305      	str	r3, [sp, #20]
 800c8c0:	4619      	mov	r1, r3
 800c8c2:	f04f 0c0a 	mov.w	ip, #10
 800c8c6:	4620      	mov	r0, r4
 800c8c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c8cc:	3a30      	subs	r2, #48	; 0x30
 800c8ce:	2a09      	cmp	r2, #9
 800c8d0:	d903      	bls.n	800c8da <_vfiprintf_r+0x1ee>
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d0c5      	beq.n	800c862 <_vfiprintf_r+0x176>
 800c8d6:	9105      	str	r1, [sp, #20]
 800c8d8:	e7c3      	b.n	800c862 <_vfiprintf_r+0x176>
 800c8da:	fb0c 2101 	mla	r1, ip, r1, r2
 800c8de:	4604      	mov	r4, r0
 800c8e0:	2301      	movs	r3, #1
 800c8e2:	e7f0      	b.n	800c8c6 <_vfiprintf_r+0x1da>
 800c8e4:	ab03      	add	r3, sp, #12
 800c8e6:	9300      	str	r3, [sp, #0]
 800c8e8:	462a      	mov	r2, r5
 800c8ea:	4b16      	ldr	r3, [pc, #88]	; (800c944 <_vfiprintf_r+0x258>)
 800c8ec:	a904      	add	r1, sp, #16
 800c8ee:	4630      	mov	r0, r6
 800c8f0:	f7fd ff2c 	bl	800a74c <_printf_float>
 800c8f4:	4607      	mov	r7, r0
 800c8f6:	1c78      	adds	r0, r7, #1
 800c8f8:	d1d6      	bne.n	800c8a8 <_vfiprintf_r+0x1bc>
 800c8fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c8fc:	07d9      	lsls	r1, r3, #31
 800c8fe:	d405      	bmi.n	800c90c <_vfiprintf_r+0x220>
 800c900:	89ab      	ldrh	r3, [r5, #12]
 800c902:	059a      	lsls	r2, r3, #22
 800c904:	d402      	bmi.n	800c90c <_vfiprintf_r+0x220>
 800c906:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c908:	f7ff fa76 	bl	800bdf8 <__retarget_lock_release_recursive>
 800c90c:	89ab      	ldrh	r3, [r5, #12]
 800c90e:	065b      	lsls	r3, r3, #25
 800c910:	f53f af12 	bmi.w	800c738 <_vfiprintf_r+0x4c>
 800c914:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c916:	e711      	b.n	800c73c <_vfiprintf_r+0x50>
 800c918:	ab03      	add	r3, sp, #12
 800c91a:	9300      	str	r3, [sp, #0]
 800c91c:	462a      	mov	r2, r5
 800c91e:	4b09      	ldr	r3, [pc, #36]	; (800c944 <_vfiprintf_r+0x258>)
 800c920:	a904      	add	r1, sp, #16
 800c922:	4630      	mov	r0, r6
 800c924:	f7fe f9b6 	bl	800ac94 <_printf_i>
 800c928:	e7e4      	b.n	800c8f4 <_vfiprintf_r+0x208>
 800c92a:	bf00      	nop
 800c92c:	0800d570 	.word	0x0800d570
 800c930:	0800d590 	.word	0x0800d590
 800c934:	0800d550 	.word	0x0800d550
 800c938:	0800d70c 	.word	0x0800d70c
 800c93c:	0800d716 	.word	0x0800d716
 800c940:	0800a74d 	.word	0x0800a74d
 800c944:	0800c6c7 	.word	0x0800c6c7
 800c948:	0800d712 	.word	0x0800d712

0800c94c <_sbrk_r>:
 800c94c:	b538      	push	{r3, r4, r5, lr}
 800c94e:	4d06      	ldr	r5, [pc, #24]	; (800c968 <_sbrk_r+0x1c>)
 800c950:	2300      	movs	r3, #0
 800c952:	4604      	mov	r4, r0
 800c954:	4608      	mov	r0, r1
 800c956:	602b      	str	r3, [r5, #0]
 800c958:	f7f6 f9f8 	bl	8002d4c <_sbrk>
 800c95c:	1c43      	adds	r3, r0, #1
 800c95e:	d102      	bne.n	800c966 <_sbrk_r+0x1a>
 800c960:	682b      	ldr	r3, [r5, #0]
 800c962:	b103      	cbz	r3, 800c966 <_sbrk_r+0x1a>
 800c964:	6023      	str	r3, [r4, #0]
 800c966:	bd38      	pop	{r3, r4, r5, pc}
 800c968:	20000ae4 	.word	0x20000ae4

0800c96c <__sread>:
 800c96c:	b510      	push	{r4, lr}
 800c96e:	460c      	mov	r4, r1
 800c970:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c974:	f000 faa6 	bl	800cec4 <_read_r>
 800c978:	2800      	cmp	r0, #0
 800c97a:	bfab      	itete	ge
 800c97c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c97e:	89a3      	ldrhlt	r3, [r4, #12]
 800c980:	181b      	addge	r3, r3, r0
 800c982:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c986:	bfac      	ite	ge
 800c988:	6563      	strge	r3, [r4, #84]	; 0x54
 800c98a:	81a3      	strhlt	r3, [r4, #12]
 800c98c:	bd10      	pop	{r4, pc}

0800c98e <__swrite>:
 800c98e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c992:	461f      	mov	r7, r3
 800c994:	898b      	ldrh	r3, [r1, #12]
 800c996:	05db      	lsls	r3, r3, #23
 800c998:	4605      	mov	r5, r0
 800c99a:	460c      	mov	r4, r1
 800c99c:	4616      	mov	r6, r2
 800c99e:	d505      	bpl.n	800c9ac <__swrite+0x1e>
 800c9a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9a4:	2302      	movs	r3, #2
 800c9a6:	2200      	movs	r2, #0
 800c9a8:	f000 f9f8 	bl	800cd9c <_lseek_r>
 800c9ac:	89a3      	ldrh	r3, [r4, #12]
 800c9ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c9b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c9b6:	81a3      	strh	r3, [r4, #12]
 800c9b8:	4632      	mov	r2, r6
 800c9ba:	463b      	mov	r3, r7
 800c9bc:	4628      	mov	r0, r5
 800c9be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c9c2:	f000 b869 	b.w	800ca98 <_write_r>

0800c9c6 <__sseek>:
 800c9c6:	b510      	push	{r4, lr}
 800c9c8:	460c      	mov	r4, r1
 800c9ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9ce:	f000 f9e5 	bl	800cd9c <_lseek_r>
 800c9d2:	1c43      	adds	r3, r0, #1
 800c9d4:	89a3      	ldrh	r3, [r4, #12]
 800c9d6:	bf15      	itete	ne
 800c9d8:	6560      	strne	r0, [r4, #84]	; 0x54
 800c9da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c9de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c9e2:	81a3      	strheq	r3, [r4, #12]
 800c9e4:	bf18      	it	ne
 800c9e6:	81a3      	strhne	r3, [r4, #12]
 800c9e8:	bd10      	pop	{r4, pc}

0800c9ea <__sclose>:
 800c9ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9ee:	f000 b8f1 	b.w	800cbd4 <_close_r>
	...

0800c9f4 <__swbuf_r>:
 800c9f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9f6:	460e      	mov	r6, r1
 800c9f8:	4614      	mov	r4, r2
 800c9fa:	4605      	mov	r5, r0
 800c9fc:	b118      	cbz	r0, 800ca06 <__swbuf_r+0x12>
 800c9fe:	6983      	ldr	r3, [r0, #24]
 800ca00:	b90b      	cbnz	r3, 800ca06 <__swbuf_r+0x12>
 800ca02:	f7ff f955 	bl	800bcb0 <__sinit>
 800ca06:	4b21      	ldr	r3, [pc, #132]	; (800ca8c <__swbuf_r+0x98>)
 800ca08:	429c      	cmp	r4, r3
 800ca0a:	d12b      	bne.n	800ca64 <__swbuf_r+0x70>
 800ca0c:	686c      	ldr	r4, [r5, #4]
 800ca0e:	69a3      	ldr	r3, [r4, #24]
 800ca10:	60a3      	str	r3, [r4, #8]
 800ca12:	89a3      	ldrh	r3, [r4, #12]
 800ca14:	071a      	lsls	r2, r3, #28
 800ca16:	d52f      	bpl.n	800ca78 <__swbuf_r+0x84>
 800ca18:	6923      	ldr	r3, [r4, #16]
 800ca1a:	b36b      	cbz	r3, 800ca78 <__swbuf_r+0x84>
 800ca1c:	6923      	ldr	r3, [r4, #16]
 800ca1e:	6820      	ldr	r0, [r4, #0]
 800ca20:	1ac0      	subs	r0, r0, r3
 800ca22:	6963      	ldr	r3, [r4, #20]
 800ca24:	b2f6      	uxtb	r6, r6
 800ca26:	4283      	cmp	r3, r0
 800ca28:	4637      	mov	r7, r6
 800ca2a:	dc04      	bgt.n	800ca36 <__swbuf_r+0x42>
 800ca2c:	4621      	mov	r1, r4
 800ca2e:	4628      	mov	r0, r5
 800ca30:	f000 f966 	bl	800cd00 <_fflush_r>
 800ca34:	bb30      	cbnz	r0, 800ca84 <__swbuf_r+0x90>
 800ca36:	68a3      	ldr	r3, [r4, #8]
 800ca38:	3b01      	subs	r3, #1
 800ca3a:	60a3      	str	r3, [r4, #8]
 800ca3c:	6823      	ldr	r3, [r4, #0]
 800ca3e:	1c5a      	adds	r2, r3, #1
 800ca40:	6022      	str	r2, [r4, #0]
 800ca42:	701e      	strb	r6, [r3, #0]
 800ca44:	6963      	ldr	r3, [r4, #20]
 800ca46:	3001      	adds	r0, #1
 800ca48:	4283      	cmp	r3, r0
 800ca4a:	d004      	beq.n	800ca56 <__swbuf_r+0x62>
 800ca4c:	89a3      	ldrh	r3, [r4, #12]
 800ca4e:	07db      	lsls	r3, r3, #31
 800ca50:	d506      	bpl.n	800ca60 <__swbuf_r+0x6c>
 800ca52:	2e0a      	cmp	r6, #10
 800ca54:	d104      	bne.n	800ca60 <__swbuf_r+0x6c>
 800ca56:	4621      	mov	r1, r4
 800ca58:	4628      	mov	r0, r5
 800ca5a:	f000 f951 	bl	800cd00 <_fflush_r>
 800ca5e:	b988      	cbnz	r0, 800ca84 <__swbuf_r+0x90>
 800ca60:	4638      	mov	r0, r7
 800ca62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca64:	4b0a      	ldr	r3, [pc, #40]	; (800ca90 <__swbuf_r+0x9c>)
 800ca66:	429c      	cmp	r4, r3
 800ca68:	d101      	bne.n	800ca6e <__swbuf_r+0x7a>
 800ca6a:	68ac      	ldr	r4, [r5, #8]
 800ca6c:	e7cf      	b.n	800ca0e <__swbuf_r+0x1a>
 800ca6e:	4b09      	ldr	r3, [pc, #36]	; (800ca94 <__swbuf_r+0xa0>)
 800ca70:	429c      	cmp	r4, r3
 800ca72:	bf08      	it	eq
 800ca74:	68ec      	ldreq	r4, [r5, #12]
 800ca76:	e7ca      	b.n	800ca0e <__swbuf_r+0x1a>
 800ca78:	4621      	mov	r1, r4
 800ca7a:	4628      	mov	r0, r5
 800ca7c:	f000 f81e 	bl	800cabc <__swsetup_r>
 800ca80:	2800      	cmp	r0, #0
 800ca82:	d0cb      	beq.n	800ca1c <__swbuf_r+0x28>
 800ca84:	f04f 37ff 	mov.w	r7, #4294967295
 800ca88:	e7ea      	b.n	800ca60 <__swbuf_r+0x6c>
 800ca8a:	bf00      	nop
 800ca8c:	0800d570 	.word	0x0800d570
 800ca90:	0800d590 	.word	0x0800d590
 800ca94:	0800d550 	.word	0x0800d550

0800ca98 <_write_r>:
 800ca98:	b538      	push	{r3, r4, r5, lr}
 800ca9a:	4d07      	ldr	r5, [pc, #28]	; (800cab8 <_write_r+0x20>)
 800ca9c:	4604      	mov	r4, r0
 800ca9e:	4608      	mov	r0, r1
 800caa0:	4611      	mov	r1, r2
 800caa2:	2200      	movs	r2, #0
 800caa4:	602a      	str	r2, [r5, #0]
 800caa6:	461a      	mov	r2, r3
 800caa8:	f7f6 f8ff 	bl	8002caa <_write>
 800caac:	1c43      	adds	r3, r0, #1
 800caae:	d102      	bne.n	800cab6 <_write_r+0x1e>
 800cab0:	682b      	ldr	r3, [r5, #0]
 800cab2:	b103      	cbz	r3, 800cab6 <_write_r+0x1e>
 800cab4:	6023      	str	r3, [r4, #0]
 800cab6:	bd38      	pop	{r3, r4, r5, pc}
 800cab8:	20000ae4 	.word	0x20000ae4

0800cabc <__swsetup_r>:
 800cabc:	4b32      	ldr	r3, [pc, #200]	; (800cb88 <__swsetup_r+0xcc>)
 800cabe:	b570      	push	{r4, r5, r6, lr}
 800cac0:	681d      	ldr	r5, [r3, #0]
 800cac2:	4606      	mov	r6, r0
 800cac4:	460c      	mov	r4, r1
 800cac6:	b125      	cbz	r5, 800cad2 <__swsetup_r+0x16>
 800cac8:	69ab      	ldr	r3, [r5, #24]
 800caca:	b913      	cbnz	r3, 800cad2 <__swsetup_r+0x16>
 800cacc:	4628      	mov	r0, r5
 800cace:	f7ff f8ef 	bl	800bcb0 <__sinit>
 800cad2:	4b2e      	ldr	r3, [pc, #184]	; (800cb8c <__swsetup_r+0xd0>)
 800cad4:	429c      	cmp	r4, r3
 800cad6:	d10f      	bne.n	800caf8 <__swsetup_r+0x3c>
 800cad8:	686c      	ldr	r4, [r5, #4]
 800cada:	89a3      	ldrh	r3, [r4, #12]
 800cadc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cae0:	0719      	lsls	r1, r3, #28
 800cae2:	d42c      	bmi.n	800cb3e <__swsetup_r+0x82>
 800cae4:	06dd      	lsls	r5, r3, #27
 800cae6:	d411      	bmi.n	800cb0c <__swsetup_r+0x50>
 800cae8:	2309      	movs	r3, #9
 800caea:	6033      	str	r3, [r6, #0]
 800caec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800caf0:	81a3      	strh	r3, [r4, #12]
 800caf2:	f04f 30ff 	mov.w	r0, #4294967295
 800caf6:	e03e      	b.n	800cb76 <__swsetup_r+0xba>
 800caf8:	4b25      	ldr	r3, [pc, #148]	; (800cb90 <__swsetup_r+0xd4>)
 800cafa:	429c      	cmp	r4, r3
 800cafc:	d101      	bne.n	800cb02 <__swsetup_r+0x46>
 800cafe:	68ac      	ldr	r4, [r5, #8]
 800cb00:	e7eb      	b.n	800cada <__swsetup_r+0x1e>
 800cb02:	4b24      	ldr	r3, [pc, #144]	; (800cb94 <__swsetup_r+0xd8>)
 800cb04:	429c      	cmp	r4, r3
 800cb06:	bf08      	it	eq
 800cb08:	68ec      	ldreq	r4, [r5, #12]
 800cb0a:	e7e6      	b.n	800cada <__swsetup_r+0x1e>
 800cb0c:	0758      	lsls	r0, r3, #29
 800cb0e:	d512      	bpl.n	800cb36 <__swsetup_r+0x7a>
 800cb10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb12:	b141      	cbz	r1, 800cb26 <__swsetup_r+0x6a>
 800cb14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb18:	4299      	cmp	r1, r3
 800cb1a:	d002      	beq.n	800cb22 <__swsetup_r+0x66>
 800cb1c:	4630      	mov	r0, r6
 800cb1e:	f7ff fd11 	bl	800c544 <_free_r>
 800cb22:	2300      	movs	r3, #0
 800cb24:	6363      	str	r3, [r4, #52]	; 0x34
 800cb26:	89a3      	ldrh	r3, [r4, #12]
 800cb28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cb2c:	81a3      	strh	r3, [r4, #12]
 800cb2e:	2300      	movs	r3, #0
 800cb30:	6063      	str	r3, [r4, #4]
 800cb32:	6923      	ldr	r3, [r4, #16]
 800cb34:	6023      	str	r3, [r4, #0]
 800cb36:	89a3      	ldrh	r3, [r4, #12]
 800cb38:	f043 0308 	orr.w	r3, r3, #8
 800cb3c:	81a3      	strh	r3, [r4, #12]
 800cb3e:	6923      	ldr	r3, [r4, #16]
 800cb40:	b94b      	cbnz	r3, 800cb56 <__swsetup_r+0x9a>
 800cb42:	89a3      	ldrh	r3, [r4, #12]
 800cb44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cb48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cb4c:	d003      	beq.n	800cb56 <__swsetup_r+0x9a>
 800cb4e:	4621      	mov	r1, r4
 800cb50:	4630      	mov	r0, r6
 800cb52:	f000 f959 	bl	800ce08 <__smakebuf_r>
 800cb56:	89a0      	ldrh	r0, [r4, #12]
 800cb58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cb5c:	f010 0301 	ands.w	r3, r0, #1
 800cb60:	d00a      	beq.n	800cb78 <__swsetup_r+0xbc>
 800cb62:	2300      	movs	r3, #0
 800cb64:	60a3      	str	r3, [r4, #8]
 800cb66:	6963      	ldr	r3, [r4, #20]
 800cb68:	425b      	negs	r3, r3
 800cb6a:	61a3      	str	r3, [r4, #24]
 800cb6c:	6923      	ldr	r3, [r4, #16]
 800cb6e:	b943      	cbnz	r3, 800cb82 <__swsetup_r+0xc6>
 800cb70:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cb74:	d1ba      	bne.n	800caec <__swsetup_r+0x30>
 800cb76:	bd70      	pop	{r4, r5, r6, pc}
 800cb78:	0781      	lsls	r1, r0, #30
 800cb7a:	bf58      	it	pl
 800cb7c:	6963      	ldrpl	r3, [r4, #20]
 800cb7e:	60a3      	str	r3, [r4, #8]
 800cb80:	e7f4      	b.n	800cb6c <__swsetup_r+0xb0>
 800cb82:	2000      	movs	r0, #0
 800cb84:	e7f7      	b.n	800cb76 <__swsetup_r+0xba>
 800cb86:	bf00      	nop
 800cb88:	20000090 	.word	0x20000090
 800cb8c:	0800d570 	.word	0x0800d570
 800cb90:	0800d590 	.word	0x0800d590
 800cb94:	0800d550 	.word	0x0800d550

0800cb98 <__assert_func>:
 800cb98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cb9a:	4614      	mov	r4, r2
 800cb9c:	461a      	mov	r2, r3
 800cb9e:	4b09      	ldr	r3, [pc, #36]	; (800cbc4 <__assert_func+0x2c>)
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	4605      	mov	r5, r0
 800cba4:	68d8      	ldr	r0, [r3, #12]
 800cba6:	b14c      	cbz	r4, 800cbbc <__assert_func+0x24>
 800cba8:	4b07      	ldr	r3, [pc, #28]	; (800cbc8 <__assert_func+0x30>)
 800cbaa:	9100      	str	r1, [sp, #0]
 800cbac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cbb0:	4906      	ldr	r1, [pc, #24]	; (800cbcc <__assert_func+0x34>)
 800cbb2:	462b      	mov	r3, r5
 800cbb4:	f000 f8e0 	bl	800cd78 <fiprintf>
 800cbb8:	f000 f9a3 	bl	800cf02 <abort>
 800cbbc:	4b04      	ldr	r3, [pc, #16]	; (800cbd0 <__assert_func+0x38>)
 800cbbe:	461c      	mov	r4, r3
 800cbc0:	e7f3      	b.n	800cbaa <__assert_func+0x12>
 800cbc2:	bf00      	nop
 800cbc4:	20000090 	.word	0x20000090
 800cbc8:	0800d71d 	.word	0x0800d71d
 800cbcc:	0800d72a 	.word	0x0800d72a
 800cbd0:	0800d758 	.word	0x0800d758

0800cbd4 <_close_r>:
 800cbd4:	b538      	push	{r3, r4, r5, lr}
 800cbd6:	4d06      	ldr	r5, [pc, #24]	; (800cbf0 <_close_r+0x1c>)
 800cbd8:	2300      	movs	r3, #0
 800cbda:	4604      	mov	r4, r0
 800cbdc:	4608      	mov	r0, r1
 800cbde:	602b      	str	r3, [r5, #0]
 800cbe0:	f7f6 f87f 	bl	8002ce2 <_close>
 800cbe4:	1c43      	adds	r3, r0, #1
 800cbe6:	d102      	bne.n	800cbee <_close_r+0x1a>
 800cbe8:	682b      	ldr	r3, [r5, #0]
 800cbea:	b103      	cbz	r3, 800cbee <_close_r+0x1a>
 800cbec:	6023      	str	r3, [r4, #0]
 800cbee:	bd38      	pop	{r3, r4, r5, pc}
 800cbf0:	20000ae4 	.word	0x20000ae4

0800cbf4 <__sflush_r>:
 800cbf4:	898a      	ldrh	r2, [r1, #12]
 800cbf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbfa:	4605      	mov	r5, r0
 800cbfc:	0710      	lsls	r0, r2, #28
 800cbfe:	460c      	mov	r4, r1
 800cc00:	d458      	bmi.n	800ccb4 <__sflush_r+0xc0>
 800cc02:	684b      	ldr	r3, [r1, #4]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	dc05      	bgt.n	800cc14 <__sflush_r+0x20>
 800cc08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	dc02      	bgt.n	800cc14 <__sflush_r+0x20>
 800cc0e:	2000      	movs	r0, #0
 800cc10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cc16:	2e00      	cmp	r6, #0
 800cc18:	d0f9      	beq.n	800cc0e <__sflush_r+0x1a>
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cc20:	682f      	ldr	r7, [r5, #0]
 800cc22:	602b      	str	r3, [r5, #0]
 800cc24:	d032      	beq.n	800cc8c <__sflush_r+0x98>
 800cc26:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cc28:	89a3      	ldrh	r3, [r4, #12]
 800cc2a:	075a      	lsls	r2, r3, #29
 800cc2c:	d505      	bpl.n	800cc3a <__sflush_r+0x46>
 800cc2e:	6863      	ldr	r3, [r4, #4]
 800cc30:	1ac0      	subs	r0, r0, r3
 800cc32:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cc34:	b10b      	cbz	r3, 800cc3a <__sflush_r+0x46>
 800cc36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cc38:	1ac0      	subs	r0, r0, r3
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	4602      	mov	r2, r0
 800cc3e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cc40:	6a21      	ldr	r1, [r4, #32]
 800cc42:	4628      	mov	r0, r5
 800cc44:	47b0      	blx	r6
 800cc46:	1c43      	adds	r3, r0, #1
 800cc48:	89a3      	ldrh	r3, [r4, #12]
 800cc4a:	d106      	bne.n	800cc5a <__sflush_r+0x66>
 800cc4c:	6829      	ldr	r1, [r5, #0]
 800cc4e:	291d      	cmp	r1, #29
 800cc50:	d82c      	bhi.n	800ccac <__sflush_r+0xb8>
 800cc52:	4a2a      	ldr	r2, [pc, #168]	; (800ccfc <__sflush_r+0x108>)
 800cc54:	40ca      	lsrs	r2, r1
 800cc56:	07d6      	lsls	r6, r2, #31
 800cc58:	d528      	bpl.n	800ccac <__sflush_r+0xb8>
 800cc5a:	2200      	movs	r2, #0
 800cc5c:	6062      	str	r2, [r4, #4]
 800cc5e:	04d9      	lsls	r1, r3, #19
 800cc60:	6922      	ldr	r2, [r4, #16]
 800cc62:	6022      	str	r2, [r4, #0]
 800cc64:	d504      	bpl.n	800cc70 <__sflush_r+0x7c>
 800cc66:	1c42      	adds	r2, r0, #1
 800cc68:	d101      	bne.n	800cc6e <__sflush_r+0x7a>
 800cc6a:	682b      	ldr	r3, [r5, #0]
 800cc6c:	b903      	cbnz	r3, 800cc70 <__sflush_r+0x7c>
 800cc6e:	6560      	str	r0, [r4, #84]	; 0x54
 800cc70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cc72:	602f      	str	r7, [r5, #0]
 800cc74:	2900      	cmp	r1, #0
 800cc76:	d0ca      	beq.n	800cc0e <__sflush_r+0x1a>
 800cc78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cc7c:	4299      	cmp	r1, r3
 800cc7e:	d002      	beq.n	800cc86 <__sflush_r+0x92>
 800cc80:	4628      	mov	r0, r5
 800cc82:	f7ff fc5f 	bl	800c544 <_free_r>
 800cc86:	2000      	movs	r0, #0
 800cc88:	6360      	str	r0, [r4, #52]	; 0x34
 800cc8a:	e7c1      	b.n	800cc10 <__sflush_r+0x1c>
 800cc8c:	6a21      	ldr	r1, [r4, #32]
 800cc8e:	2301      	movs	r3, #1
 800cc90:	4628      	mov	r0, r5
 800cc92:	47b0      	blx	r6
 800cc94:	1c41      	adds	r1, r0, #1
 800cc96:	d1c7      	bne.n	800cc28 <__sflush_r+0x34>
 800cc98:	682b      	ldr	r3, [r5, #0]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d0c4      	beq.n	800cc28 <__sflush_r+0x34>
 800cc9e:	2b1d      	cmp	r3, #29
 800cca0:	d001      	beq.n	800cca6 <__sflush_r+0xb2>
 800cca2:	2b16      	cmp	r3, #22
 800cca4:	d101      	bne.n	800ccaa <__sflush_r+0xb6>
 800cca6:	602f      	str	r7, [r5, #0]
 800cca8:	e7b1      	b.n	800cc0e <__sflush_r+0x1a>
 800ccaa:	89a3      	ldrh	r3, [r4, #12]
 800ccac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ccb0:	81a3      	strh	r3, [r4, #12]
 800ccb2:	e7ad      	b.n	800cc10 <__sflush_r+0x1c>
 800ccb4:	690f      	ldr	r7, [r1, #16]
 800ccb6:	2f00      	cmp	r7, #0
 800ccb8:	d0a9      	beq.n	800cc0e <__sflush_r+0x1a>
 800ccba:	0793      	lsls	r3, r2, #30
 800ccbc:	680e      	ldr	r6, [r1, #0]
 800ccbe:	bf08      	it	eq
 800ccc0:	694b      	ldreq	r3, [r1, #20]
 800ccc2:	600f      	str	r7, [r1, #0]
 800ccc4:	bf18      	it	ne
 800ccc6:	2300      	movne	r3, #0
 800ccc8:	eba6 0807 	sub.w	r8, r6, r7
 800cccc:	608b      	str	r3, [r1, #8]
 800ccce:	f1b8 0f00 	cmp.w	r8, #0
 800ccd2:	dd9c      	ble.n	800cc0e <__sflush_r+0x1a>
 800ccd4:	6a21      	ldr	r1, [r4, #32]
 800ccd6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ccd8:	4643      	mov	r3, r8
 800ccda:	463a      	mov	r2, r7
 800ccdc:	4628      	mov	r0, r5
 800ccde:	47b0      	blx	r6
 800cce0:	2800      	cmp	r0, #0
 800cce2:	dc06      	bgt.n	800ccf2 <__sflush_r+0xfe>
 800cce4:	89a3      	ldrh	r3, [r4, #12]
 800cce6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ccea:	81a3      	strh	r3, [r4, #12]
 800ccec:	f04f 30ff 	mov.w	r0, #4294967295
 800ccf0:	e78e      	b.n	800cc10 <__sflush_r+0x1c>
 800ccf2:	4407      	add	r7, r0
 800ccf4:	eba8 0800 	sub.w	r8, r8, r0
 800ccf8:	e7e9      	b.n	800ccce <__sflush_r+0xda>
 800ccfa:	bf00      	nop
 800ccfc:	20400001 	.word	0x20400001

0800cd00 <_fflush_r>:
 800cd00:	b538      	push	{r3, r4, r5, lr}
 800cd02:	690b      	ldr	r3, [r1, #16]
 800cd04:	4605      	mov	r5, r0
 800cd06:	460c      	mov	r4, r1
 800cd08:	b913      	cbnz	r3, 800cd10 <_fflush_r+0x10>
 800cd0a:	2500      	movs	r5, #0
 800cd0c:	4628      	mov	r0, r5
 800cd0e:	bd38      	pop	{r3, r4, r5, pc}
 800cd10:	b118      	cbz	r0, 800cd1a <_fflush_r+0x1a>
 800cd12:	6983      	ldr	r3, [r0, #24]
 800cd14:	b90b      	cbnz	r3, 800cd1a <_fflush_r+0x1a>
 800cd16:	f7fe ffcb 	bl	800bcb0 <__sinit>
 800cd1a:	4b14      	ldr	r3, [pc, #80]	; (800cd6c <_fflush_r+0x6c>)
 800cd1c:	429c      	cmp	r4, r3
 800cd1e:	d11b      	bne.n	800cd58 <_fflush_r+0x58>
 800cd20:	686c      	ldr	r4, [r5, #4]
 800cd22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d0ef      	beq.n	800cd0a <_fflush_r+0xa>
 800cd2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cd2c:	07d0      	lsls	r0, r2, #31
 800cd2e:	d404      	bmi.n	800cd3a <_fflush_r+0x3a>
 800cd30:	0599      	lsls	r1, r3, #22
 800cd32:	d402      	bmi.n	800cd3a <_fflush_r+0x3a>
 800cd34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd36:	f7ff f85e 	bl	800bdf6 <__retarget_lock_acquire_recursive>
 800cd3a:	4628      	mov	r0, r5
 800cd3c:	4621      	mov	r1, r4
 800cd3e:	f7ff ff59 	bl	800cbf4 <__sflush_r>
 800cd42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cd44:	07da      	lsls	r2, r3, #31
 800cd46:	4605      	mov	r5, r0
 800cd48:	d4e0      	bmi.n	800cd0c <_fflush_r+0xc>
 800cd4a:	89a3      	ldrh	r3, [r4, #12]
 800cd4c:	059b      	lsls	r3, r3, #22
 800cd4e:	d4dd      	bmi.n	800cd0c <_fflush_r+0xc>
 800cd50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd52:	f7ff f851 	bl	800bdf8 <__retarget_lock_release_recursive>
 800cd56:	e7d9      	b.n	800cd0c <_fflush_r+0xc>
 800cd58:	4b05      	ldr	r3, [pc, #20]	; (800cd70 <_fflush_r+0x70>)
 800cd5a:	429c      	cmp	r4, r3
 800cd5c:	d101      	bne.n	800cd62 <_fflush_r+0x62>
 800cd5e:	68ac      	ldr	r4, [r5, #8]
 800cd60:	e7df      	b.n	800cd22 <_fflush_r+0x22>
 800cd62:	4b04      	ldr	r3, [pc, #16]	; (800cd74 <_fflush_r+0x74>)
 800cd64:	429c      	cmp	r4, r3
 800cd66:	bf08      	it	eq
 800cd68:	68ec      	ldreq	r4, [r5, #12]
 800cd6a:	e7da      	b.n	800cd22 <_fflush_r+0x22>
 800cd6c:	0800d570 	.word	0x0800d570
 800cd70:	0800d590 	.word	0x0800d590
 800cd74:	0800d550 	.word	0x0800d550

0800cd78 <fiprintf>:
 800cd78:	b40e      	push	{r1, r2, r3}
 800cd7a:	b503      	push	{r0, r1, lr}
 800cd7c:	4601      	mov	r1, r0
 800cd7e:	ab03      	add	r3, sp, #12
 800cd80:	4805      	ldr	r0, [pc, #20]	; (800cd98 <fiprintf+0x20>)
 800cd82:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd86:	6800      	ldr	r0, [r0, #0]
 800cd88:	9301      	str	r3, [sp, #4]
 800cd8a:	f7ff fcaf 	bl	800c6ec <_vfiprintf_r>
 800cd8e:	b002      	add	sp, #8
 800cd90:	f85d eb04 	ldr.w	lr, [sp], #4
 800cd94:	b003      	add	sp, #12
 800cd96:	4770      	bx	lr
 800cd98:	20000090 	.word	0x20000090

0800cd9c <_lseek_r>:
 800cd9c:	b538      	push	{r3, r4, r5, lr}
 800cd9e:	4d07      	ldr	r5, [pc, #28]	; (800cdbc <_lseek_r+0x20>)
 800cda0:	4604      	mov	r4, r0
 800cda2:	4608      	mov	r0, r1
 800cda4:	4611      	mov	r1, r2
 800cda6:	2200      	movs	r2, #0
 800cda8:	602a      	str	r2, [r5, #0]
 800cdaa:	461a      	mov	r2, r3
 800cdac:	f7f5 ffc0 	bl	8002d30 <_lseek>
 800cdb0:	1c43      	adds	r3, r0, #1
 800cdb2:	d102      	bne.n	800cdba <_lseek_r+0x1e>
 800cdb4:	682b      	ldr	r3, [r5, #0]
 800cdb6:	b103      	cbz	r3, 800cdba <_lseek_r+0x1e>
 800cdb8:	6023      	str	r3, [r4, #0]
 800cdba:	bd38      	pop	{r3, r4, r5, pc}
 800cdbc:	20000ae4 	.word	0x20000ae4

0800cdc0 <__swhatbuf_r>:
 800cdc0:	b570      	push	{r4, r5, r6, lr}
 800cdc2:	460e      	mov	r6, r1
 800cdc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdc8:	2900      	cmp	r1, #0
 800cdca:	b096      	sub	sp, #88	; 0x58
 800cdcc:	4614      	mov	r4, r2
 800cdce:	461d      	mov	r5, r3
 800cdd0:	da07      	bge.n	800cde2 <__swhatbuf_r+0x22>
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	602b      	str	r3, [r5, #0]
 800cdd6:	89b3      	ldrh	r3, [r6, #12]
 800cdd8:	061a      	lsls	r2, r3, #24
 800cdda:	d410      	bmi.n	800cdfe <__swhatbuf_r+0x3e>
 800cddc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cde0:	e00e      	b.n	800ce00 <__swhatbuf_r+0x40>
 800cde2:	466a      	mov	r2, sp
 800cde4:	f000 f894 	bl	800cf10 <_fstat_r>
 800cde8:	2800      	cmp	r0, #0
 800cdea:	dbf2      	blt.n	800cdd2 <__swhatbuf_r+0x12>
 800cdec:	9a01      	ldr	r2, [sp, #4]
 800cdee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cdf2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cdf6:	425a      	negs	r2, r3
 800cdf8:	415a      	adcs	r2, r3
 800cdfa:	602a      	str	r2, [r5, #0]
 800cdfc:	e7ee      	b.n	800cddc <__swhatbuf_r+0x1c>
 800cdfe:	2340      	movs	r3, #64	; 0x40
 800ce00:	2000      	movs	r0, #0
 800ce02:	6023      	str	r3, [r4, #0]
 800ce04:	b016      	add	sp, #88	; 0x58
 800ce06:	bd70      	pop	{r4, r5, r6, pc}

0800ce08 <__smakebuf_r>:
 800ce08:	898b      	ldrh	r3, [r1, #12]
 800ce0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ce0c:	079d      	lsls	r5, r3, #30
 800ce0e:	4606      	mov	r6, r0
 800ce10:	460c      	mov	r4, r1
 800ce12:	d507      	bpl.n	800ce24 <__smakebuf_r+0x1c>
 800ce14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ce18:	6023      	str	r3, [r4, #0]
 800ce1a:	6123      	str	r3, [r4, #16]
 800ce1c:	2301      	movs	r3, #1
 800ce1e:	6163      	str	r3, [r4, #20]
 800ce20:	b002      	add	sp, #8
 800ce22:	bd70      	pop	{r4, r5, r6, pc}
 800ce24:	ab01      	add	r3, sp, #4
 800ce26:	466a      	mov	r2, sp
 800ce28:	f7ff ffca 	bl	800cdc0 <__swhatbuf_r>
 800ce2c:	9900      	ldr	r1, [sp, #0]
 800ce2e:	4605      	mov	r5, r0
 800ce30:	4630      	mov	r0, r6
 800ce32:	f7ff fbd7 	bl	800c5e4 <_malloc_r>
 800ce36:	b948      	cbnz	r0, 800ce4c <__smakebuf_r+0x44>
 800ce38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce3c:	059a      	lsls	r2, r3, #22
 800ce3e:	d4ef      	bmi.n	800ce20 <__smakebuf_r+0x18>
 800ce40:	f023 0303 	bic.w	r3, r3, #3
 800ce44:	f043 0302 	orr.w	r3, r3, #2
 800ce48:	81a3      	strh	r3, [r4, #12]
 800ce4a:	e7e3      	b.n	800ce14 <__smakebuf_r+0xc>
 800ce4c:	4b0d      	ldr	r3, [pc, #52]	; (800ce84 <__smakebuf_r+0x7c>)
 800ce4e:	62b3      	str	r3, [r6, #40]	; 0x28
 800ce50:	89a3      	ldrh	r3, [r4, #12]
 800ce52:	6020      	str	r0, [r4, #0]
 800ce54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce58:	81a3      	strh	r3, [r4, #12]
 800ce5a:	9b00      	ldr	r3, [sp, #0]
 800ce5c:	6163      	str	r3, [r4, #20]
 800ce5e:	9b01      	ldr	r3, [sp, #4]
 800ce60:	6120      	str	r0, [r4, #16]
 800ce62:	b15b      	cbz	r3, 800ce7c <__smakebuf_r+0x74>
 800ce64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce68:	4630      	mov	r0, r6
 800ce6a:	f000 f863 	bl	800cf34 <_isatty_r>
 800ce6e:	b128      	cbz	r0, 800ce7c <__smakebuf_r+0x74>
 800ce70:	89a3      	ldrh	r3, [r4, #12]
 800ce72:	f023 0303 	bic.w	r3, r3, #3
 800ce76:	f043 0301 	orr.w	r3, r3, #1
 800ce7a:	81a3      	strh	r3, [r4, #12]
 800ce7c:	89a0      	ldrh	r0, [r4, #12]
 800ce7e:	4305      	orrs	r5, r0
 800ce80:	81a5      	strh	r5, [r4, #12]
 800ce82:	e7cd      	b.n	800ce20 <__smakebuf_r+0x18>
 800ce84:	0800bc49 	.word	0x0800bc49

0800ce88 <__ascii_mbtowc>:
 800ce88:	b082      	sub	sp, #8
 800ce8a:	b901      	cbnz	r1, 800ce8e <__ascii_mbtowc+0x6>
 800ce8c:	a901      	add	r1, sp, #4
 800ce8e:	b142      	cbz	r2, 800cea2 <__ascii_mbtowc+0x1a>
 800ce90:	b14b      	cbz	r3, 800cea6 <__ascii_mbtowc+0x1e>
 800ce92:	7813      	ldrb	r3, [r2, #0]
 800ce94:	600b      	str	r3, [r1, #0]
 800ce96:	7812      	ldrb	r2, [r2, #0]
 800ce98:	1e10      	subs	r0, r2, #0
 800ce9a:	bf18      	it	ne
 800ce9c:	2001      	movne	r0, #1
 800ce9e:	b002      	add	sp, #8
 800cea0:	4770      	bx	lr
 800cea2:	4610      	mov	r0, r2
 800cea4:	e7fb      	b.n	800ce9e <__ascii_mbtowc+0x16>
 800cea6:	f06f 0001 	mvn.w	r0, #1
 800ceaa:	e7f8      	b.n	800ce9e <__ascii_mbtowc+0x16>

0800ceac <__malloc_lock>:
 800ceac:	4801      	ldr	r0, [pc, #4]	; (800ceb4 <__malloc_lock+0x8>)
 800ceae:	f7fe bfa2 	b.w	800bdf6 <__retarget_lock_acquire_recursive>
 800ceb2:	bf00      	nop
 800ceb4:	20000adc 	.word	0x20000adc

0800ceb8 <__malloc_unlock>:
 800ceb8:	4801      	ldr	r0, [pc, #4]	; (800cec0 <__malloc_unlock+0x8>)
 800ceba:	f7fe bf9d 	b.w	800bdf8 <__retarget_lock_release_recursive>
 800cebe:	bf00      	nop
 800cec0:	20000adc 	.word	0x20000adc

0800cec4 <_read_r>:
 800cec4:	b538      	push	{r3, r4, r5, lr}
 800cec6:	4d07      	ldr	r5, [pc, #28]	; (800cee4 <_read_r+0x20>)
 800cec8:	4604      	mov	r4, r0
 800ceca:	4608      	mov	r0, r1
 800cecc:	4611      	mov	r1, r2
 800cece:	2200      	movs	r2, #0
 800ced0:	602a      	str	r2, [r5, #0]
 800ced2:	461a      	mov	r2, r3
 800ced4:	f7f5 fecc 	bl	8002c70 <_read>
 800ced8:	1c43      	adds	r3, r0, #1
 800ceda:	d102      	bne.n	800cee2 <_read_r+0x1e>
 800cedc:	682b      	ldr	r3, [r5, #0]
 800cede:	b103      	cbz	r3, 800cee2 <_read_r+0x1e>
 800cee0:	6023      	str	r3, [r4, #0]
 800cee2:	bd38      	pop	{r3, r4, r5, pc}
 800cee4:	20000ae4 	.word	0x20000ae4

0800cee8 <__ascii_wctomb>:
 800cee8:	b149      	cbz	r1, 800cefe <__ascii_wctomb+0x16>
 800ceea:	2aff      	cmp	r2, #255	; 0xff
 800ceec:	bf85      	ittet	hi
 800ceee:	238a      	movhi	r3, #138	; 0x8a
 800cef0:	6003      	strhi	r3, [r0, #0]
 800cef2:	700a      	strbls	r2, [r1, #0]
 800cef4:	f04f 30ff 	movhi.w	r0, #4294967295
 800cef8:	bf98      	it	ls
 800cefa:	2001      	movls	r0, #1
 800cefc:	4770      	bx	lr
 800cefe:	4608      	mov	r0, r1
 800cf00:	4770      	bx	lr

0800cf02 <abort>:
 800cf02:	b508      	push	{r3, lr}
 800cf04:	2006      	movs	r0, #6
 800cf06:	f000 f84d 	bl	800cfa4 <raise>
 800cf0a:	2001      	movs	r0, #1
 800cf0c:	f7f5 fea6 	bl	8002c5c <_exit>

0800cf10 <_fstat_r>:
 800cf10:	b538      	push	{r3, r4, r5, lr}
 800cf12:	4d07      	ldr	r5, [pc, #28]	; (800cf30 <_fstat_r+0x20>)
 800cf14:	2300      	movs	r3, #0
 800cf16:	4604      	mov	r4, r0
 800cf18:	4608      	mov	r0, r1
 800cf1a:	4611      	mov	r1, r2
 800cf1c:	602b      	str	r3, [r5, #0]
 800cf1e:	f7f5 feec 	bl	8002cfa <_fstat>
 800cf22:	1c43      	adds	r3, r0, #1
 800cf24:	d102      	bne.n	800cf2c <_fstat_r+0x1c>
 800cf26:	682b      	ldr	r3, [r5, #0]
 800cf28:	b103      	cbz	r3, 800cf2c <_fstat_r+0x1c>
 800cf2a:	6023      	str	r3, [r4, #0]
 800cf2c:	bd38      	pop	{r3, r4, r5, pc}
 800cf2e:	bf00      	nop
 800cf30:	20000ae4 	.word	0x20000ae4

0800cf34 <_isatty_r>:
 800cf34:	b538      	push	{r3, r4, r5, lr}
 800cf36:	4d06      	ldr	r5, [pc, #24]	; (800cf50 <_isatty_r+0x1c>)
 800cf38:	2300      	movs	r3, #0
 800cf3a:	4604      	mov	r4, r0
 800cf3c:	4608      	mov	r0, r1
 800cf3e:	602b      	str	r3, [r5, #0]
 800cf40:	f7f5 feeb 	bl	8002d1a <_isatty>
 800cf44:	1c43      	adds	r3, r0, #1
 800cf46:	d102      	bne.n	800cf4e <_isatty_r+0x1a>
 800cf48:	682b      	ldr	r3, [r5, #0]
 800cf4a:	b103      	cbz	r3, 800cf4e <_isatty_r+0x1a>
 800cf4c:	6023      	str	r3, [r4, #0]
 800cf4e:	bd38      	pop	{r3, r4, r5, pc}
 800cf50:	20000ae4 	.word	0x20000ae4

0800cf54 <_raise_r>:
 800cf54:	291f      	cmp	r1, #31
 800cf56:	b538      	push	{r3, r4, r5, lr}
 800cf58:	4604      	mov	r4, r0
 800cf5a:	460d      	mov	r5, r1
 800cf5c:	d904      	bls.n	800cf68 <_raise_r+0x14>
 800cf5e:	2316      	movs	r3, #22
 800cf60:	6003      	str	r3, [r0, #0]
 800cf62:	f04f 30ff 	mov.w	r0, #4294967295
 800cf66:	bd38      	pop	{r3, r4, r5, pc}
 800cf68:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cf6a:	b112      	cbz	r2, 800cf72 <_raise_r+0x1e>
 800cf6c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cf70:	b94b      	cbnz	r3, 800cf86 <_raise_r+0x32>
 800cf72:	4620      	mov	r0, r4
 800cf74:	f000 f830 	bl	800cfd8 <_getpid_r>
 800cf78:	462a      	mov	r2, r5
 800cf7a:	4601      	mov	r1, r0
 800cf7c:	4620      	mov	r0, r4
 800cf7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cf82:	f000 b817 	b.w	800cfb4 <_kill_r>
 800cf86:	2b01      	cmp	r3, #1
 800cf88:	d00a      	beq.n	800cfa0 <_raise_r+0x4c>
 800cf8a:	1c59      	adds	r1, r3, #1
 800cf8c:	d103      	bne.n	800cf96 <_raise_r+0x42>
 800cf8e:	2316      	movs	r3, #22
 800cf90:	6003      	str	r3, [r0, #0]
 800cf92:	2001      	movs	r0, #1
 800cf94:	e7e7      	b.n	800cf66 <_raise_r+0x12>
 800cf96:	2400      	movs	r4, #0
 800cf98:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cf9c:	4628      	mov	r0, r5
 800cf9e:	4798      	blx	r3
 800cfa0:	2000      	movs	r0, #0
 800cfa2:	e7e0      	b.n	800cf66 <_raise_r+0x12>

0800cfa4 <raise>:
 800cfa4:	4b02      	ldr	r3, [pc, #8]	; (800cfb0 <raise+0xc>)
 800cfa6:	4601      	mov	r1, r0
 800cfa8:	6818      	ldr	r0, [r3, #0]
 800cfaa:	f7ff bfd3 	b.w	800cf54 <_raise_r>
 800cfae:	bf00      	nop
 800cfb0:	20000090 	.word	0x20000090

0800cfb4 <_kill_r>:
 800cfb4:	b538      	push	{r3, r4, r5, lr}
 800cfb6:	4d07      	ldr	r5, [pc, #28]	; (800cfd4 <_kill_r+0x20>)
 800cfb8:	2300      	movs	r3, #0
 800cfba:	4604      	mov	r4, r0
 800cfbc:	4608      	mov	r0, r1
 800cfbe:	4611      	mov	r1, r2
 800cfc0:	602b      	str	r3, [r5, #0]
 800cfc2:	f7f5 fe3b 	bl	8002c3c <_kill>
 800cfc6:	1c43      	adds	r3, r0, #1
 800cfc8:	d102      	bne.n	800cfd0 <_kill_r+0x1c>
 800cfca:	682b      	ldr	r3, [r5, #0]
 800cfcc:	b103      	cbz	r3, 800cfd0 <_kill_r+0x1c>
 800cfce:	6023      	str	r3, [r4, #0]
 800cfd0:	bd38      	pop	{r3, r4, r5, pc}
 800cfd2:	bf00      	nop
 800cfd4:	20000ae4 	.word	0x20000ae4

0800cfd8 <_getpid_r>:
 800cfd8:	f7f5 be28 	b.w	8002c2c <_getpid>
 800cfdc:	0000      	movs	r0, r0
	...

0800cfe0 <log>:
 800cfe0:	b538      	push	{r3, r4, r5, lr}
 800cfe2:	ed2d 8b02 	vpush	{d8}
 800cfe6:	ec55 4b10 	vmov	r4, r5, d0
 800cfea:	f000 f841 	bl	800d070 <__ieee754_log>
 800cfee:	4b1e      	ldr	r3, [pc, #120]	; (800d068 <log+0x88>)
 800cff0:	eeb0 8a40 	vmov.f32	s16, s0
 800cff4:	eef0 8a60 	vmov.f32	s17, s1
 800cff8:	f993 3000 	ldrsb.w	r3, [r3]
 800cffc:	3301      	adds	r3, #1
 800cffe:	d01a      	beq.n	800d036 <log+0x56>
 800d000:	4622      	mov	r2, r4
 800d002:	462b      	mov	r3, r5
 800d004:	4620      	mov	r0, r4
 800d006:	4629      	mov	r1, r5
 800d008:	f7f3 fd90 	bl	8000b2c <__aeabi_dcmpun>
 800d00c:	b998      	cbnz	r0, 800d036 <log+0x56>
 800d00e:	2200      	movs	r2, #0
 800d010:	2300      	movs	r3, #0
 800d012:	4620      	mov	r0, r4
 800d014:	4629      	mov	r1, r5
 800d016:	f7f3 fd7f 	bl	8000b18 <__aeabi_dcmpgt>
 800d01a:	b960      	cbnz	r0, 800d036 <log+0x56>
 800d01c:	2200      	movs	r2, #0
 800d01e:	2300      	movs	r3, #0
 800d020:	4620      	mov	r0, r4
 800d022:	4629      	mov	r1, r5
 800d024:	f7f3 fd50 	bl	8000ac8 <__aeabi_dcmpeq>
 800d028:	b160      	cbz	r0, 800d044 <log+0x64>
 800d02a:	f7fd fabd 	bl	800a5a8 <__errno>
 800d02e:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 800d060 <log+0x80>
 800d032:	2322      	movs	r3, #34	; 0x22
 800d034:	6003      	str	r3, [r0, #0]
 800d036:	eeb0 0a48 	vmov.f32	s0, s16
 800d03a:	eef0 0a68 	vmov.f32	s1, s17
 800d03e:	ecbd 8b02 	vpop	{d8}
 800d042:	bd38      	pop	{r3, r4, r5, pc}
 800d044:	f7fd fab0 	bl	800a5a8 <__errno>
 800d048:	ecbd 8b02 	vpop	{d8}
 800d04c:	2321      	movs	r3, #33	; 0x21
 800d04e:	6003      	str	r3, [r0, #0]
 800d050:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d054:	4805      	ldr	r0, [pc, #20]	; (800d06c <log+0x8c>)
 800d056:	f000 b9c7 	b.w	800d3e8 <nan>
 800d05a:	bf00      	nop
 800d05c:	f3af 8000 	nop.w
 800d060:	00000000 	.word	0x00000000
 800d064:	fff00000 	.word	0xfff00000
 800d068:	20000260 	.word	0x20000260
 800d06c:	0800d758 	.word	0x0800d758

0800d070 <__ieee754_log>:
 800d070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d074:	ec51 0b10 	vmov	r0, r1, d0
 800d078:	ed2d 8b04 	vpush	{d8-d9}
 800d07c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800d080:	b083      	sub	sp, #12
 800d082:	460d      	mov	r5, r1
 800d084:	da29      	bge.n	800d0da <__ieee754_log+0x6a>
 800d086:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d08a:	4303      	orrs	r3, r0
 800d08c:	ee10 2a10 	vmov	r2, s0
 800d090:	d10c      	bne.n	800d0ac <__ieee754_log+0x3c>
 800d092:	49cf      	ldr	r1, [pc, #828]	; (800d3d0 <__ieee754_log+0x360>)
 800d094:	2200      	movs	r2, #0
 800d096:	2300      	movs	r3, #0
 800d098:	2000      	movs	r0, #0
 800d09a:	f7f3 fbd7 	bl	800084c <__aeabi_ddiv>
 800d09e:	ec41 0b10 	vmov	d0, r0, r1
 800d0a2:	b003      	add	sp, #12
 800d0a4:	ecbd 8b04 	vpop	{d8-d9}
 800d0a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0ac:	2900      	cmp	r1, #0
 800d0ae:	da05      	bge.n	800d0bc <__ieee754_log+0x4c>
 800d0b0:	460b      	mov	r3, r1
 800d0b2:	f7f3 f8e9 	bl	8000288 <__aeabi_dsub>
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	e7ee      	b.n	800d09a <__ieee754_log+0x2a>
 800d0bc:	4bc5      	ldr	r3, [pc, #788]	; (800d3d4 <__ieee754_log+0x364>)
 800d0be:	2200      	movs	r2, #0
 800d0c0:	f7f3 fa9a 	bl	80005f8 <__aeabi_dmul>
 800d0c4:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800d0c8:	460d      	mov	r5, r1
 800d0ca:	4ac3      	ldr	r2, [pc, #780]	; (800d3d8 <__ieee754_log+0x368>)
 800d0cc:	4295      	cmp	r5, r2
 800d0ce:	dd06      	ble.n	800d0de <__ieee754_log+0x6e>
 800d0d0:	4602      	mov	r2, r0
 800d0d2:	460b      	mov	r3, r1
 800d0d4:	f7f3 f8da 	bl	800028c <__adddf3>
 800d0d8:	e7e1      	b.n	800d09e <__ieee754_log+0x2e>
 800d0da:	2300      	movs	r3, #0
 800d0dc:	e7f5      	b.n	800d0ca <__ieee754_log+0x5a>
 800d0de:	152c      	asrs	r4, r5, #20
 800d0e0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800d0e4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800d0e8:	441c      	add	r4, r3
 800d0ea:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800d0ee:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800d0f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d0f6:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800d0fa:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800d0fe:	ea42 0105 	orr.w	r1, r2, r5
 800d102:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800d106:	2200      	movs	r2, #0
 800d108:	4bb4      	ldr	r3, [pc, #720]	; (800d3dc <__ieee754_log+0x36c>)
 800d10a:	f7f3 f8bd 	bl	8000288 <__aeabi_dsub>
 800d10e:	1cab      	adds	r3, r5, #2
 800d110:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d114:	2b02      	cmp	r3, #2
 800d116:	4682      	mov	sl, r0
 800d118:	468b      	mov	fp, r1
 800d11a:	f04f 0200 	mov.w	r2, #0
 800d11e:	dc53      	bgt.n	800d1c8 <__ieee754_log+0x158>
 800d120:	2300      	movs	r3, #0
 800d122:	f7f3 fcd1 	bl	8000ac8 <__aeabi_dcmpeq>
 800d126:	b1d0      	cbz	r0, 800d15e <__ieee754_log+0xee>
 800d128:	2c00      	cmp	r4, #0
 800d12a:	f000 8122 	beq.w	800d372 <__ieee754_log+0x302>
 800d12e:	4620      	mov	r0, r4
 800d130:	f7f3 f9f8 	bl	8000524 <__aeabi_i2d>
 800d134:	a390      	add	r3, pc, #576	; (adr r3, 800d378 <__ieee754_log+0x308>)
 800d136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d13a:	4606      	mov	r6, r0
 800d13c:	460f      	mov	r7, r1
 800d13e:	f7f3 fa5b 	bl	80005f8 <__aeabi_dmul>
 800d142:	a38f      	add	r3, pc, #572	; (adr r3, 800d380 <__ieee754_log+0x310>)
 800d144:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d148:	4604      	mov	r4, r0
 800d14a:	460d      	mov	r5, r1
 800d14c:	4630      	mov	r0, r6
 800d14e:	4639      	mov	r1, r7
 800d150:	f7f3 fa52 	bl	80005f8 <__aeabi_dmul>
 800d154:	4602      	mov	r2, r0
 800d156:	460b      	mov	r3, r1
 800d158:	4620      	mov	r0, r4
 800d15a:	4629      	mov	r1, r5
 800d15c:	e7ba      	b.n	800d0d4 <__ieee754_log+0x64>
 800d15e:	a38a      	add	r3, pc, #552	; (adr r3, 800d388 <__ieee754_log+0x318>)
 800d160:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d164:	4650      	mov	r0, sl
 800d166:	4659      	mov	r1, fp
 800d168:	f7f3 fa46 	bl	80005f8 <__aeabi_dmul>
 800d16c:	4602      	mov	r2, r0
 800d16e:	460b      	mov	r3, r1
 800d170:	2000      	movs	r0, #0
 800d172:	499b      	ldr	r1, [pc, #620]	; (800d3e0 <__ieee754_log+0x370>)
 800d174:	f7f3 f888 	bl	8000288 <__aeabi_dsub>
 800d178:	4652      	mov	r2, sl
 800d17a:	4606      	mov	r6, r0
 800d17c:	460f      	mov	r7, r1
 800d17e:	465b      	mov	r3, fp
 800d180:	4650      	mov	r0, sl
 800d182:	4659      	mov	r1, fp
 800d184:	f7f3 fa38 	bl	80005f8 <__aeabi_dmul>
 800d188:	4602      	mov	r2, r0
 800d18a:	460b      	mov	r3, r1
 800d18c:	4630      	mov	r0, r6
 800d18e:	4639      	mov	r1, r7
 800d190:	f7f3 fa32 	bl	80005f8 <__aeabi_dmul>
 800d194:	4606      	mov	r6, r0
 800d196:	460f      	mov	r7, r1
 800d198:	b914      	cbnz	r4, 800d1a0 <__ieee754_log+0x130>
 800d19a:	4632      	mov	r2, r6
 800d19c:	463b      	mov	r3, r7
 800d19e:	e0a2      	b.n	800d2e6 <__ieee754_log+0x276>
 800d1a0:	4620      	mov	r0, r4
 800d1a2:	f7f3 f9bf 	bl	8000524 <__aeabi_i2d>
 800d1a6:	a374      	add	r3, pc, #464	; (adr r3, 800d378 <__ieee754_log+0x308>)
 800d1a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1ac:	4680      	mov	r8, r0
 800d1ae:	4689      	mov	r9, r1
 800d1b0:	f7f3 fa22 	bl	80005f8 <__aeabi_dmul>
 800d1b4:	a372      	add	r3, pc, #456	; (adr r3, 800d380 <__ieee754_log+0x310>)
 800d1b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1ba:	4604      	mov	r4, r0
 800d1bc:	460d      	mov	r5, r1
 800d1be:	4640      	mov	r0, r8
 800d1c0:	4649      	mov	r1, r9
 800d1c2:	f7f3 fa19 	bl	80005f8 <__aeabi_dmul>
 800d1c6:	e0a7      	b.n	800d318 <__ieee754_log+0x2a8>
 800d1c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d1cc:	f7f3 f85e 	bl	800028c <__adddf3>
 800d1d0:	4602      	mov	r2, r0
 800d1d2:	460b      	mov	r3, r1
 800d1d4:	4650      	mov	r0, sl
 800d1d6:	4659      	mov	r1, fp
 800d1d8:	f7f3 fb38 	bl	800084c <__aeabi_ddiv>
 800d1dc:	ec41 0b18 	vmov	d8, r0, r1
 800d1e0:	4620      	mov	r0, r4
 800d1e2:	f7f3 f99f 	bl	8000524 <__aeabi_i2d>
 800d1e6:	ec53 2b18 	vmov	r2, r3, d8
 800d1ea:	ec41 0b19 	vmov	d9, r0, r1
 800d1ee:	ec51 0b18 	vmov	r0, r1, d8
 800d1f2:	f7f3 fa01 	bl	80005f8 <__aeabi_dmul>
 800d1f6:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800d1fa:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800d1fe:	9301      	str	r3, [sp, #4]
 800d200:	4602      	mov	r2, r0
 800d202:	460b      	mov	r3, r1
 800d204:	4680      	mov	r8, r0
 800d206:	4689      	mov	r9, r1
 800d208:	f7f3 f9f6 	bl	80005f8 <__aeabi_dmul>
 800d20c:	a360      	add	r3, pc, #384	; (adr r3, 800d390 <__ieee754_log+0x320>)
 800d20e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d212:	4606      	mov	r6, r0
 800d214:	460f      	mov	r7, r1
 800d216:	f7f3 f9ef 	bl	80005f8 <__aeabi_dmul>
 800d21a:	a35f      	add	r3, pc, #380	; (adr r3, 800d398 <__ieee754_log+0x328>)
 800d21c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d220:	f7f3 f834 	bl	800028c <__adddf3>
 800d224:	4632      	mov	r2, r6
 800d226:	463b      	mov	r3, r7
 800d228:	f7f3 f9e6 	bl	80005f8 <__aeabi_dmul>
 800d22c:	a35c      	add	r3, pc, #368	; (adr r3, 800d3a0 <__ieee754_log+0x330>)
 800d22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d232:	f7f3 f82b 	bl	800028c <__adddf3>
 800d236:	4632      	mov	r2, r6
 800d238:	463b      	mov	r3, r7
 800d23a:	f7f3 f9dd 	bl	80005f8 <__aeabi_dmul>
 800d23e:	a35a      	add	r3, pc, #360	; (adr r3, 800d3a8 <__ieee754_log+0x338>)
 800d240:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d244:	f7f3 f822 	bl	800028c <__adddf3>
 800d248:	4642      	mov	r2, r8
 800d24a:	464b      	mov	r3, r9
 800d24c:	f7f3 f9d4 	bl	80005f8 <__aeabi_dmul>
 800d250:	a357      	add	r3, pc, #348	; (adr r3, 800d3b0 <__ieee754_log+0x340>)
 800d252:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d256:	4680      	mov	r8, r0
 800d258:	4689      	mov	r9, r1
 800d25a:	4630      	mov	r0, r6
 800d25c:	4639      	mov	r1, r7
 800d25e:	f7f3 f9cb 	bl	80005f8 <__aeabi_dmul>
 800d262:	a355      	add	r3, pc, #340	; (adr r3, 800d3b8 <__ieee754_log+0x348>)
 800d264:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d268:	f7f3 f810 	bl	800028c <__adddf3>
 800d26c:	4632      	mov	r2, r6
 800d26e:	463b      	mov	r3, r7
 800d270:	f7f3 f9c2 	bl	80005f8 <__aeabi_dmul>
 800d274:	a352      	add	r3, pc, #328	; (adr r3, 800d3c0 <__ieee754_log+0x350>)
 800d276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d27a:	f7f3 f807 	bl	800028c <__adddf3>
 800d27e:	4632      	mov	r2, r6
 800d280:	463b      	mov	r3, r7
 800d282:	f7f3 f9b9 	bl	80005f8 <__aeabi_dmul>
 800d286:	460b      	mov	r3, r1
 800d288:	4602      	mov	r2, r0
 800d28a:	4649      	mov	r1, r9
 800d28c:	4640      	mov	r0, r8
 800d28e:	f7f2 fffd 	bl	800028c <__adddf3>
 800d292:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800d296:	9b01      	ldr	r3, [sp, #4]
 800d298:	3551      	adds	r5, #81	; 0x51
 800d29a:	431d      	orrs	r5, r3
 800d29c:	2d00      	cmp	r5, #0
 800d29e:	4680      	mov	r8, r0
 800d2a0:	4689      	mov	r9, r1
 800d2a2:	dd48      	ble.n	800d336 <__ieee754_log+0x2c6>
 800d2a4:	4b4e      	ldr	r3, [pc, #312]	; (800d3e0 <__ieee754_log+0x370>)
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	4650      	mov	r0, sl
 800d2aa:	4659      	mov	r1, fp
 800d2ac:	f7f3 f9a4 	bl	80005f8 <__aeabi_dmul>
 800d2b0:	4652      	mov	r2, sl
 800d2b2:	465b      	mov	r3, fp
 800d2b4:	f7f3 f9a0 	bl	80005f8 <__aeabi_dmul>
 800d2b8:	4602      	mov	r2, r0
 800d2ba:	460b      	mov	r3, r1
 800d2bc:	4606      	mov	r6, r0
 800d2be:	460f      	mov	r7, r1
 800d2c0:	4640      	mov	r0, r8
 800d2c2:	4649      	mov	r1, r9
 800d2c4:	f7f2 ffe2 	bl	800028c <__adddf3>
 800d2c8:	ec53 2b18 	vmov	r2, r3, d8
 800d2cc:	f7f3 f994 	bl	80005f8 <__aeabi_dmul>
 800d2d0:	4680      	mov	r8, r0
 800d2d2:	4689      	mov	r9, r1
 800d2d4:	b964      	cbnz	r4, 800d2f0 <__ieee754_log+0x280>
 800d2d6:	4602      	mov	r2, r0
 800d2d8:	460b      	mov	r3, r1
 800d2da:	4630      	mov	r0, r6
 800d2dc:	4639      	mov	r1, r7
 800d2de:	f7f2 ffd3 	bl	8000288 <__aeabi_dsub>
 800d2e2:	4602      	mov	r2, r0
 800d2e4:	460b      	mov	r3, r1
 800d2e6:	4650      	mov	r0, sl
 800d2e8:	4659      	mov	r1, fp
 800d2ea:	f7f2 ffcd 	bl	8000288 <__aeabi_dsub>
 800d2ee:	e6d6      	b.n	800d09e <__ieee754_log+0x2e>
 800d2f0:	a321      	add	r3, pc, #132	; (adr r3, 800d378 <__ieee754_log+0x308>)
 800d2f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2f6:	ec51 0b19 	vmov	r0, r1, d9
 800d2fa:	f7f3 f97d 	bl	80005f8 <__aeabi_dmul>
 800d2fe:	a320      	add	r3, pc, #128	; (adr r3, 800d380 <__ieee754_log+0x310>)
 800d300:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d304:	4604      	mov	r4, r0
 800d306:	460d      	mov	r5, r1
 800d308:	ec51 0b19 	vmov	r0, r1, d9
 800d30c:	f7f3 f974 	bl	80005f8 <__aeabi_dmul>
 800d310:	4642      	mov	r2, r8
 800d312:	464b      	mov	r3, r9
 800d314:	f7f2 ffba 	bl	800028c <__adddf3>
 800d318:	4602      	mov	r2, r0
 800d31a:	460b      	mov	r3, r1
 800d31c:	4630      	mov	r0, r6
 800d31e:	4639      	mov	r1, r7
 800d320:	f7f2 ffb2 	bl	8000288 <__aeabi_dsub>
 800d324:	4652      	mov	r2, sl
 800d326:	465b      	mov	r3, fp
 800d328:	f7f2 ffae 	bl	8000288 <__aeabi_dsub>
 800d32c:	4602      	mov	r2, r0
 800d32e:	460b      	mov	r3, r1
 800d330:	4620      	mov	r0, r4
 800d332:	4629      	mov	r1, r5
 800d334:	e7d9      	b.n	800d2ea <__ieee754_log+0x27a>
 800d336:	4602      	mov	r2, r0
 800d338:	460b      	mov	r3, r1
 800d33a:	4650      	mov	r0, sl
 800d33c:	4659      	mov	r1, fp
 800d33e:	f7f2 ffa3 	bl	8000288 <__aeabi_dsub>
 800d342:	ec53 2b18 	vmov	r2, r3, d8
 800d346:	f7f3 f957 	bl	80005f8 <__aeabi_dmul>
 800d34a:	4606      	mov	r6, r0
 800d34c:	460f      	mov	r7, r1
 800d34e:	2c00      	cmp	r4, #0
 800d350:	f43f af23 	beq.w	800d19a <__ieee754_log+0x12a>
 800d354:	a308      	add	r3, pc, #32	; (adr r3, 800d378 <__ieee754_log+0x308>)
 800d356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d35a:	ec51 0b19 	vmov	r0, r1, d9
 800d35e:	f7f3 f94b 	bl	80005f8 <__aeabi_dmul>
 800d362:	a307      	add	r3, pc, #28	; (adr r3, 800d380 <__ieee754_log+0x310>)
 800d364:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d368:	4604      	mov	r4, r0
 800d36a:	460d      	mov	r5, r1
 800d36c:	ec51 0b19 	vmov	r0, r1, d9
 800d370:	e727      	b.n	800d1c2 <__ieee754_log+0x152>
 800d372:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800d3c8 <__ieee754_log+0x358>
 800d376:	e694      	b.n	800d0a2 <__ieee754_log+0x32>
 800d378:	fee00000 	.word	0xfee00000
 800d37c:	3fe62e42 	.word	0x3fe62e42
 800d380:	35793c76 	.word	0x35793c76
 800d384:	3dea39ef 	.word	0x3dea39ef
 800d388:	55555555 	.word	0x55555555
 800d38c:	3fd55555 	.word	0x3fd55555
 800d390:	df3e5244 	.word	0xdf3e5244
 800d394:	3fc2f112 	.word	0x3fc2f112
 800d398:	96cb03de 	.word	0x96cb03de
 800d39c:	3fc74664 	.word	0x3fc74664
 800d3a0:	94229359 	.word	0x94229359
 800d3a4:	3fd24924 	.word	0x3fd24924
 800d3a8:	55555593 	.word	0x55555593
 800d3ac:	3fe55555 	.word	0x3fe55555
 800d3b0:	d078c69f 	.word	0xd078c69f
 800d3b4:	3fc39a09 	.word	0x3fc39a09
 800d3b8:	1d8e78af 	.word	0x1d8e78af
 800d3bc:	3fcc71c5 	.word	0x3fcc71c5
 800d3c0:	9997fa04 	.word	0x9997fa04
 800d3c4:	3fd99999 	.word	0x3fd99999
	...
 800d3d0:	c3500000 	.word	0xc3500000
 800d3d4:	43500000 	.word	0x43500000
 800d3d8:	7fefffff 	.word	0x7fefffff
 800d3dc:	3ff00000 	.word	0x3ff00000
 800d3e0:	3fe00000 	.word	0x3fe00000
 800d3e4:	00000000 	.word	0x00000000

0800d3e8 <nan>:
 800d3e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d3f0 <nan+0x8>
 800d3ec:	4770      	bx	lr
 800d3ee:	bf00      	nop
 800d3f0:	00000000 	.word	0x00000000
 800d3f4:	7ff80000 	.word	0x7ff80000

0800d3f8 <_init>:
 800d3f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3fa:	bf00      	nop
 800d3fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3fe:	bc08      	pop	{r3}
 800d400:	469e      	mov	lr, r3
 800d402:	4770      	bx	lr

0800d404 <_fini>:
 800d404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d406:	bf00      	nop
 800d408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d40a:	bc08      	pop	{r3}
 800d40c:	469e      	mov	lr, r3
 800d40e:	4770      	bx	lr
