
LedDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d290  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  0800d420  0800d420  0001d420  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d874  0800d874  00020264  2**0
                  CONTENTS
  4 .ARM          00000008  0800d874  0800d874  0001d874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d87c  0800d87c  00020264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d87c  0800d87c  0001d87c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d880  0800d880  0001d880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000264  20000000  0800d884  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000878  20000264  0800dae8  00020264  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000adc  0800dae8  00020adc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020264  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002734b  00000000  00000000  00020294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004502  00000000  00000000  000475df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001970  00000000  00000000  0004bae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001798  00000000  00000000  0004d458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c85d  00000000  00000000  0004ebf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f266  00000000  00000000  0007b44d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00110d1b  00000000  00000000  0009a6b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001ab3ce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007af0  00000000  00000000  001ab424  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000264 	.word	0x20000264
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d408 	.word	0x0800d408

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000268 	.word	0x20000268
 80001cc:	0800d408 	.word	0x0800d408

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08a      	sub	sp, #40	; 0x28
 8000ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000ea6:	f107 031c 	add.w	r3, r7, #28
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	605a      	str	r2, [r3, #4]
 8000eb0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000eb2:	1d3b      	adds	r3, r7, #4
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
 8000ebe:	611a      	str	r2, [r3, #16]
 8000ec0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ec2:	4b35      	ldr	r3, [pc, #212]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000ec4:	4a35      	ldr	r2, [pc, #212]	; (8000f9c <MX_ADC1_Init+0xfc>)
 8000ec6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ec8:	4b33      	ldr	r3, [pc, #204]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ece:	4b32      	ldr	r3, [pc, #200]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ed4:	4b30      	ldr	r3, [pc, #192]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000eda:	4b2f      	ldr	r3, [pc, #188]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ee0:	4b2d      	ldr	r3, [pc, #180]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000ee2:	2204      	movs	r2, #4
 8000ee4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ee6:	4b2c      	ldr	r3, [pc, #176]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000eec:	4b2a      	ldr	r3, [pc, #168]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000ef2:	4b29      	ldr	r3, [pc, #164]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ef8:	4b27      	ldr	r3, [pc, #156]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f00:	4b25      	ldr	r3, [pc, #148]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f06:	4b24      	ldr	r3, [pc, #144]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f0c:	4b22      	ldr	r3, [pc, #136]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f14:	4b20      	ldr	r3, [pc, #128]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 8000f1a:	4b1f      	ldr	r3, [pc, #124]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_64;
 8000f22:	4b1d      	ldr	r3, [pc, #116]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000f24:	2214      	movs	r2, #20
 8000f26:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_6;
 8000f28:	4b1b      	ldr	r3, [pc, #108]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000f2a:	22c0      	movs	r2, #192	; 0xc0
 8000f2c:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000f2e:	4b1a      	ldr	r3, [pc, #104]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000f34:	4b18      	ldr	r3, [pc, #96]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000f36:	2201      	movs	r2, #1
 8000f38:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f3a:	4817      	ldr	r0, [pc, #92]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000f3c:	f002 fedc 	bl	8003cf8 <HAL_ADC_Init>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000f46:	f000 fb9b 	bl	8001680 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f4e:	f107 031c 	add.w	r3, r7, #28
 8000f52:	4619      	mov	r1, r3
 8000f54:	4810      	ldr	r0, [pc, #64]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000f56:	f003 ff29 	bl	8004dac <HAL_ADCEx_MultiModeConfigChannel>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8000f60:	f000 fb8e 	bl	8001680 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f64:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <MX_ADC1_Init+0x100>)
 8000f66:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f68:	2306      	movs	r3, #6
 8000f6a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000f6c:	2307      	movs	r3, #7
 8000f6e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f70:	237f      	movs	r3, #127	; 0x7f
 8000f72:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f74:	2304      	movs	r3, #4
 8000f76:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f7c:	1d3b      	adds	r3, r7, #4
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4805      	ldr	r0, [pc, #20]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000f82:	f003 f9af 	bl	80042e4 <HAL_ADC_ConfigChannel>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 8000f8c:	f000 fb78 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f90:	bf00      	nop
 8000f92:	3728      	adds	r7, #40	; 0x28
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	20000888 	.word	0x20000888
 8000f9c:	50040000 	.word	0x50040000
 8000fa0:	04300002 	.word	0x04300002

08000fa4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b0ac      	sub	sp, #176	; 0xb0
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fbc:	f107 0314 	add.w	r3, r7, #20
 8000fc0:	2288      	movs	r2, #136	; 0x88
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f009 fb21 	bl	800a60c <memset>
  if(adcHandle->Instance==ADC1)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a27      	ldr	r2, [pc, #156]	; (800106c <HAL_ADC_MspInit+0xc8>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d146      	bne.n	8001062 <HAL_ADC_MspInit+0xbe>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000fd4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000fd8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000fda:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fde:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000fea:	2310      	movs	r3, #16
 8000fec:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000fee:	2307      	movs	r3, #7
 8000ff0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000ffa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ffe:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001000:	f107 0314 	add.w	r3, r7, #20
 8001004:	4618      	mov	r0, r3
 8001006:	f005 fac7 	bl	8006598 <HAL_RCCEx_PeriphCLKConfig>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001010:	f000 fb36 	bl	8001680 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001014:	4b16      	ldr	r3, [pc, #88]	; (8001070 <HAL_ADC_MspInit+0xcc>)
 8001016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001018:	4a15      	ldr	r2, [pc, #84]	; (8001070 <HAL_ADC_MspInit+0xcc>)
 800101a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800101e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001020:	4b13      	ldr	r3, [pc, #76]	; (8001070 <HAL_ADC_MspInit+0xcc>)
 8001022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001024:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001028:	613b      	str	r3, [r7, #16]
 800102a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800102c:	4b10      	ldr	r3, [pc, #64]	; (8001070 <HAL_ADC_MspInit+0xcc>)
 800102e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001030:	4a0f      	ldr	r2, [pc, #60]	; (8001070 <HAL_ADC_MspInit+0xcc>)
 8001032:	f043 0304 	orr.w	r3, r3, #4
 8001036:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001038:	4b0d      	ldr	r3, [pc, #52]	; (8001070 <HAL_ADC_MspInit+0xcc>)
 800103a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800103c:	f003 0304 	and.w	r3, r3, #4
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001044:	2301      	movs	r3, #1
 8001046:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800104a:	230b      	movs	r3, #11
 800104c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001056:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800105a:	4619      	mov	r1, r3
 800105c:	4805      	ldr	r0, [pc, #20]	; (8001074 <HAL_ADC_MspInit+0xd0>)
 800105e:	f004 fa5f 	bl	8005520 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001062:	bf00      	nop
 8001064:	37b0      	adds	r7, #176	; 0xb0
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	50040000 	.word	0x50040000
 8001070:	40021000 	.word	0x40021000
 8001074:	48000800 	.word	0x48000800

08001078 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800107e:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <MX_DMA_Init+0x38>)
 8001080:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001082:	4a0b      	ldr	r2, [pc, #44]	; (80010b0 <MX_DMA_Init+0x38>)
 8001084:	f043 0301 	orr.w	r3, r3, #1
 8001088:	6493      	str	r3, [r2, #72]	; 0x48
 800108a:	4b09      	ldr	r3, [pc, #36]	; (80010b0 <MX_DMA_Init+0x38>)
 800108c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	607b      	str	r3, [r7, #4]
 8001094:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001096:	2200      	movs	r2, #0
 8001098:	2100      	movs	r1, #0
 800109a:	200b      	movs	r0, #11
 800109c:	f004 f811 	bl	80050c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80010a0:	200b      	movs	r0, #11
 80010a2:	f004 f82a 	bl	80050fa <HAL_NVIC_EnableIRQ>

}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40021000 	.word	0x40021000

080010b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b088      	sub	sp, #32
 80010b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ba:	f107 030c 	add.w	r3, r7, #12
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	605a      	str	r2, [r3, #4]
 80010c4:	609a      	str	r2, [r3, #8]
 80010c6:	60da      	str	r2, [r3, #12]
 80010c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ca:	4b1d      	ldr	r3, [pc, #116]	; (8001140 <MX_GPIO_Init+0x8c>)
 80010cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ce:	4a1c      	ldr	r2, [pc, #112]	; (8001140 <MX_GPIO_Init+0x8c>)
 80010d0:	f043 0304 	orr.w	r3, r3, #4
 80010d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010d6:	4b1a      	ldr	r3, [pc, #104]	; (8001140 <MX_GPIO_Init+0x8c>)
 80010d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010da:	f003 0304 	and.w	r3, r3, #4
 80010de:	60bb      	str	r3, [r7, #8]
 80010e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e2:	4b17      	ldr	r3, [pc, #92]	; (8001140 <MX_GPIO_Init+0x8c>)
 80010e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e6:	4a16      	ldr	r2, [pc, #88]	; (8001140 <MX_GPIO_Init+0x8c>)
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ee:	4b14      	ldr	r3, [pc, #80]	; (8001140 <MX_GPIO_Init+0x8c>)
 80010f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	607b      	str	r3, [r7, #4]
 80010f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010fa:	4b11      	ldr	r3, [pc, #68]	; (8001140 <MX_GPIO_Init+0x8c>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fe:	4a10      	ldr	r2, [pc, #64]	; (8001140 <MX_GPIO_Init+0x8c>)
 8001100:	f043 0302 	orr.w	r3, r3, #2
 8001104:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001106:	4b0e      	ldr	r3, [pc, #56]	; (8001140 <MX_GPIO_Init+0x8c>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110a:	f003 0302 	and.w	r3, r3, #2
 800110e:	603b      	str	r3, [r7, #0]
 8001110:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DS_GPIO_Port, DS_Pin, GPIO_PIN_SET);
 8001112:	2201      	movs	r2, #1
 8001114:	2110      	movs	r1, #16
 8001116:	480b      	ldr	r0, [pc, #44]	; (8001144 <MX_GPIO_Init+0x90>)
 8001118:	f004 fbac 	bl	8005874 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DS_Pin;
 800111c:	2310      	movs	r3, #16
 800111e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001120:	2311      	movs	r3, #17
 8001122:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001128:	2300      	movs	r3, #0
 800112a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DS_GPIO_Port, &GPIO_InitStruct);
 800112c:	f107 030c 	add.w	r3, r7, #12
 8001130:	4619      	mov	r1, r3
 8001132:	4804      	ldr	r0, [pc, #16]	; (8001144 <MX_GPIO_Init+0x90>)
 8001134:	f004 f9f4 	bl	8005520 <HAL_GPIO_Init>

}
 8001138:	bf00      	nop
 800113a:	3720      	adds	r7, #32
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	40021000 	.word	0x40021000
 8001144:	48000800 	.word	0x48000800

08001148 <calc_pulse>:
static volatile uint32_t received_value;
static int received_bits;


static pulse_t calc_pulse(uint32_t time)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
	if (time < 250)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2bf9      	cmp	r3, #249	; 0xf9
 8001154:	d801      	bhi.n	800115a <calc_pulse+0x12>
		return PULSE_ERROR;
 8001156:	2305      	movs	r3, #5
 8001158:	e021      	b.n	800119e <calc_pulse+0x56>
	else if (time < 1200)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8001160:	d201      	bcs.n	8001166 <calc_pulse+0x1e>
		return PULSE_SHORT;
 8001162:	2304      	movs	r3, #4
 8001164:	e01b      	b.n	800119e <calc_pulse+0x56>
	else if (time < 2000)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800116c:	d201      	bcs.n	8001172 <calc_pulse+0x2a>
		return PULSE_LONG;
 800116e:	2303      	movs	r3, #3
 8001170:	e015      	b.n	800119e <calc_pulse+0x56>
	else if (time < 3000)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001178:	4293      	cmp	r3, r2
 800117a:	d801      	bhi.n	8001180 <calc_pulse+0x38>
		return PULSE_2MS;
 800117c:	2302      	movs	r3, #2
 800117e:	e00e      	b.n	800119e <calc_pulse+0x56>
	else if (time < 6000)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f241 726f 	movw	r2, #5999	; 0x176f
 8001186:	4293      	cmp	r3, r2
 8001188:	d801      	bhi.n	800118e <calc_pulse+0x46>
		return PULSE_4MS;
 800118a:	2301      	movs	r3, #1
 800118c:	e007      	b.n	800119e <calc_pulse+0x56>
	else if (time < 12000)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	f642 62df 	movw	r2, #11999	; 0x2edf
 8001194:	4293      	cmp	r3, r2
 8001196:	d801      	bhi.n	800119c <calc_pulse+0x54>
		return PULSE_9MS;
 8001198:	2300      	movs	r3, #0
 800119a:	e000      	b.n	800119e <calc_pulse+0x56>
	else
		return PULSE_ERROR;
 800119c:	2305      	movs	r3, #5
}
 800119e:	4618      	mov	r0, r3
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
	...

080011ac <ir_tim_interrupt>:


void ir_tim_interrupt(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
	pulse_t pulse;

	if (received_bits >= 32)
 80011b2:	4b1f      	ldr	r3, [pc, #124]	; (8001230 <ir_tim_interrupt+0x84>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	2b1f      	cmp	r3, #31
 80011b8:	dc36      	bgt.n	8001228 <ir_tim_interrupt+0x7c>
		return;

	pulse = calc_pulse(HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1));
 80011ba:	2100      	movs	r1, #0
 80011bc:	481d      	ldr	r0, [pc, #116]	; (8001234 <ir_tim_interrupt+0x88>)
 80011be:	f007 fcc5 	bl	8008b4c <HAL_TIM_ReadCapturedValue>
 80011c2:	4603      	mov	r3, r0
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff ffbf 	bl	8001148 <calc_pulse>
 80011ca:	4603      	mov	r3, r0
 80011cc:	71fb      	strb	r3, [r7, #7]

	switch (pulse) {
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	2b04      	cmp	r3, #4
 80011d2:	d006      	beq.n	80011e2 <ir_tim_interrupt+0x36>
 80011d4:	2b04      	cmp	r3, #4
 80011d6:	dc23      	bgt.n	8001220 <ir_tim_interrupt+0x74>
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d01a      	beq.n	8001212 <ir_tim_interrupt+0x66>
 80011dc:	2b03      	cmp	r3, #3
 80011de:	d00b      	beq.n	80011f8 <ir_tim_interrupt+0x4c>
 80011e0:	e01e      	b.n	8001220 <ir_tim_interrupt+0x74>
	case PULSE_SHORT:
		received_value = received_value >> 1;
 80011e2:	4b15      	ldr	r3, [pc, #84]	; (8001238 <ir_tim_interrupt+0x8c>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	085b      	lsrs	r3, r3, #1
 80011e8:	4a13      	ldr	r2, [pc, #76]	; (8001238 <ir_tim_interrupt+0x8c>)
 80011ea:	6013      	str	r3, [r2, #0]
		received_bits++;
 80011ec:	4b10      	ldr	r3, [pc, #64]	; (8001230 <ir_tim_interrupt+0x84>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	3301      	adds	r3, #1
 80011f2:	4a0f      	ldr	r2, [pc, #60]	; (8001230 <ir_tim_interrupt+0x84>)
 80011f4:	6013      	str	r3, [r2, #0]
		break;
 80011f6:	e018      	b.n	800122a <ir_tim_interrupt+0x7e>
	case PULSE_LONG:
		received_value = (received_value >> 1) | 0x80000000;
 80011f8:	4b0f      	ldr	r3, [pc, #60]	; (8001238 <ir_tim_interrupt+0x8c>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	085b      	lsrs	r3, r3, #1
 80011fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001202:	4a0d      	ldr	r2, [pc, #52]	; (8001238 <ir_tim_interrupt+0x8c>)
 8001204:	6013      	str	r3, [r2, #0]
		received_bits++;
 8001206:	4b0a      	ldr	r3, [pc, #40]	; (8001230 <ir_tim_interrupt+0x84>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	3301      	adds	r3, #1
 800120c:	4a08      	ldr	r2, [pc, #32]	; (8001230 <ir_tim_interrupt+0x84>)
 800120e:	6013      	str	r3, [r2, #0]
		break;
 8001210:	e00b      	b.n	800122a <ir_tim_interrupt+0x7e>
	case PULSE_4MS:
		received_value = 0;
 8001212:	4b09      	ldr	r3, [pc, #36]	; (8001238 <ir_tim_interrupt+0x8c>)
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
		received_bits = 0;
 8001218:	4b05      	ldr	r3, [pc, #20]	; (8001230 <ir_tim_interrupt+0x84>)
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
		break;
 800121e:	e004      	b.n	800122a <ir_tim_interrupt+0x7e>
//	case PULSE_2MS:
//		if (received_bits == 0)
//			received_bits = 32;
//		break;
	default:
		received_bits = 0;
 8001220:	4b03      	ldr	r3, [pc, #12]	; (8001230 <ir_tim_interrupt+0x84>)
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
		break;
 8001226:	e000      	b.n	800122a <ir_tim_interrupt+0x7e>
		return;
 8001228:	bf00      	nop
	}
}
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	20000284 	.word	0x20000284
 8001234:	200009b0 	.word	0x200009b0
 8001238:	20000280 	.word	0x20000280

0800123c <ir_init>:


void ir_init(void){
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim2);
 8001240:	4804      	ldr	r0, [pc, #16]	; (8001254 <ir_init+0x18>)
 8001242:	f006 fba1 	bl	8007988 <HAL_TIM_Base_Start>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8001246:	2100      	movs	r1, #0
 8001248:	4802      	ldr	r0, [pc, #8]	; (8001254 <ir_init+0x18>)
 800124a:	f006 ff59 	bl	8008100 <HAL_TIM_IC_Start_IT>
}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	200009b0 	.word	0x200009b0

08001258 <ir_read>:


int ir_read(void){
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
	if(received_bits!=32){
 800125e:	4b0a      	ldr	r3, [pc, #40]	; (8001288 <ir_read+0x30>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2b20      	cmp	r3, #32
 8001264:	d002      	beq.n	800126c <ir_read+0x14>
		return -1;
 8001266:	f04f 33ff 	mov.w	r3, #4294967295
 800126a:	e007      	b.n	800127c <ir_read+0x24>
	}

	uint8_t value=received_value>>16;
 800126c:	4b07      	ldr	r3, [pc, #28]	; (800128c <ir_read+0x34>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	0c1b      	lsrs	r3, r3, #16
 8001272:	71fb      	strb	r3, [r7, #7]
	received_bits=0;
 8001274:	4b04      	ldr	r3, [pc, #16]	; (8001288 <ir_read+0x30>)
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
	return value;
 800127a:	79fb      	ldrb	r3, [r7, #7]
}
 800127c:	4618      	mov	r0, r3
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	20000284 	.word	0x20000284
 800128c:	20000280 	.word	0x20000280

08001290 <normalWorkStart>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// FUNTIONS:

void normalWorkStart(void) {
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
	if (flag_showCalendar_or_temperature < DATA_SHOW_DURATION) {
 8001294:	4b25      	ldr	r3, [pc, #148]	; (800132c <normalWorkStart+0x9c>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2b18      	cmp	r3, #24
 800129a:	dc11      	bgt.n	80012c0 <normalWorkStart+0x30>
		if (flag_showCalendar_or_temperature == 0) {
 800129c:	4b23      	ldr	r3, [pc, #140]	; (800132c <normalWorkStart+0x9c>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d10a      	bne.n	80012ba <normalWorkStart+0x2a>
			dotOff();
 80012a4:	f001 f9f4 	bl	8002690 <dotOff>
			backToColorinMemory();
 80012a8:	f000 ffb2 	bl	8002210 <backToColorinMemory>
			dwukropekTurnOn();
 80012ac:	f001 f9a0 	bl	80025f0 <dwukropekTurnOn>
			//Zapobieganie migotaniu
			flag_showCalendar_or_temperature += 1;
 80012b0:	4b1e      	ldr	r3, [pc, #120]	; (800132c <normalWorkStart+0x9c>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	3301      	adds	r3, #1
 80012b6:	4a1d      	ldr	r2, [pc, #116]	; (800132c <normalWorkStart+0x9c>)
 80012b8:	6013      	str	r3, [r2, #0]
		}
		normalDisplayStart();
 80012ba:	f001 fb89 	bl	80029d0 <normalDisplayStart>
		dotOn();
		temperatureOnDisplay(FALSE);
	}


}
 80012be:	e032      	b.n	8001326 <normalWorkStart+0x96>
	else if (flag_showCalendar_or_temperature < TEMPERATURE_SHOW_DURATION) {
 80012c0:	4b1a      	ldr	r3, [pc, #104]	; (800132c <normalWorkStart+0x9c>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2b1d      	cmp	r3, #29
 80012c6:	dc11      	bgt.n	80012ec <normalWorkStart+0x5c>
		if (flag_showCalendar_or_temperature == DATA_SHOW_DURATION) {
 80012c8:	4b18      	ldr	r3, [pc, #96]	; (800132c <normalWorkStart+0x9c>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2b19      	cmp	r3, #25
 80012ce:	d108      	bne.n	80012e2 <normalWorkStart+0x52>
			dwukropekTurnOff();
 80012d0:	f001 f9ae 	bl	8002630 <dwukropekTurnOff>
			flag_showCalendar_or_temperature +=1;
 80012d4:	4b15      	ldr	r3, [pc, #84]	; (800132c <normalWorkStart+0x9c>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	3301      	adds	r3, #1
 80012da:	4a14      	ldr	r2, [pc, #80]	; (800132c <normalWorkStart+0x9c>)
 80012dc:	6013      	str	r3, [r2, #0]
			mixColor();
 80012de:	f000 ff7d 	bl	80021dc <mixColor>
		dotOn();
 80012e2:	f001 f9bd 	bl	8002660 <dotOn>
		dateOnDisplay();
 80012e6:	f001 fbd3 	bl	8002a90 <dateOnDisplay>
}
 80012ea:	e01c      	b.n	8001326 <normalWorkStart+0x96>
	else if (flag_showCalendar_or_temperature <TEMPERATURE_SHOW_PERIOD) {
 80012ec:	4b0f      	ldr	r3, [pc, #60]	; (800132c <normalWorkStart+0x9c>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2b22      	cmp	r3, #34	; 0x22
 80012f2:	dc18      	bgt.n	8001326 <normalWorkStart+0x96>
		if (flag_showCalendar_or_temperature == TEMPERATURE_SHOW_DURATION) {
 80012f4:	4b0d      	ldr	r3, [pc, #52]	; (800132c <normalWorkStart+0x9c>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2b1e      	cmp	r3, #30
 80012fa:	d10f      	bne.n	800131c <normalWorkStart+0x8c>
			displayStop();
 80012fc:	f001 fc2e 	bl	8002b5c <displayStop>
			ws2811_wait();
 8001300:	f002 f9e8 	bl	80036d4 <ws2811_wait>
			mixColor();
 8001304:	f000 ff6a 	bl	80021dc <mixColor>
			dotOn();
 8001308:	f001 f9aa 	bl	8002660 <dotOn>
			temperatureOnDisplay(TRUE);
 800130c:	2001      	movs	r0, #1
 800130e:	f001 fbed 	bl	8002aec <temperatureOnDisplay>
			flag_showCalendar_or_temperature += 1;
 8001312:	4b06      	ldr	r3, [pc, #24]	; (800132c <normalWorkStart+0x9c>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	3301      	adds	r3, #1
 8001318:	4a04      	ldr	r2, [pc, #16]	; (800132c <normalWorkStart+0x9c>)
 800131a:	6013      	str	r3, [r2, #0]
		dotOn();
 800131c:	f001 f9a0 	bl	8002660 <dotOn>
		temperatureOnDisplay(FALSE);
 8001320:	2000      	movs	r0, #0
 8001322:	f001 fbe3 	bl	8002aec <temperatureOnDisplay>
}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	20000290 	.word	0x20000290

08001330 <__io_putchar>:


// Funtions rewrite;

// Printf function modifed to use with USART
int __io_putchar(int ch) {
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
	if (ch == '\n') {
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2b0a      	cmp	r3, #10
 800133c:	d102      	bne.n	8001344 <__io_putchar+0x14>
		__io_putchar('\r');
 800133e:	200d      	movs	r0, #13
 8001340:	f7ff fff6 	bl	8001330 <__io_putchar>
	}

	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 8001344:	1d39      	adds	r1, r7, #4
 8001346:	f04f 33ff 	mov.w	r3, #4294967295
 800134a:	2201      	movs	r2, #1
 800134c:	4803      	ldr	r0, [pc, #12]	; (800135c <__io_putchar+0x2c>)
 800134e:	f008 fc65 	bl	8009c1c <HAL_UART_Transmit>

	return 1;
 8001352:	2301      	movs	r3, #1
}
 8001354:	4618      	mov	r0, r3
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	20000a44 	.word	0x20000a44

08001360 <HAL_RTC_AlarmAEventCallback>:


// Callbacks from interrupts

// Interrupt from RTC after every one second
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]





}
 8001368:	bf00      	nop
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <HAL_TIM_IC_CaptureCallback>:




// Interrupt for remote controler
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]

	if (htim == &htim2) {
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	4a09      	ldr	r2, [pc, #36]	; (80013a4 <HAL_TIM_IC_CaptureCallback+0x30>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d108      	bne.n	8001396 <HAL_TIM_IC_CaptureCallback+0x22>
		switch (HAL_TIM_GetActiveChannel(&htim2)) {
 8001384:	4807      	ldr	r0, [pc, #28]	; (80013a4 <HAL_TIM_IC_CaptureCallback+0x30>)
 8001386:	f007 fc57 	bl	8008c38 <HAL_TIM_GetActiveChannel>
 800138a:	4603      	mov	r3, r0
 800138c:	2b01      	cmp	r3, #1
 800138e:	d104      	bne.n	800139a <HAL_TIM_IC_CaptureCallback+0x26>
		case HAL_TIM_ACTIVE_CHANNEL_1:
			ir_tim_interrupt();
 8001390:	f7ff ff0c 	bl	80011ac <ir_tim_interrupt>
			break;
 8001394:	e002      	b.n	800139c <HAL_TIM_IC_CaptureCallback+0x28>
		default:
			break;
		}
	}
 8001396:	bf00      	nop
 8001398:	e000      	b.n	800139c <HAL_TIM_IC_CaptureCallback+0x28>
			break;
 800139a:	bf00      	nop
}
 800139c:	bf00      	nop
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	200009b0 	.word	0x200009b0

080013a8 <HAL_TIM_PeriodElapsedCallback>:

// Interrupt from timer 6 after 0,3 seconds. It is run, when MENU is on.
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]

	if (htim == &htim6)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	4a4e      	ldr	r2, [pc, #312]	; (80014ec <HAL_TIM_PeriodElapsedCallback+0x144>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	f040 8094 	bne.w	80014e2 <HAL_TIM_PeriodElapsedCallback+0x13a>

	{
		// Hours blinking in hours menu mode:
		if (TurnOnMenuMode() == MENU_TIME_LEVEL
 80013ba:	f000 f967 	bl	800168c <TurnOnMenuMode>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d004      	beq.n	80013ce <HAL_TIM_PeriodElapsedCallback+0x26>
				|| TurnOnMenuMode() == MENU_TIME_HOUR_SECOND_DIGIT) {
 80013c4:	f000 f962 	bl	800168c <TurnOnMenuMode>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b03      	cmp	r3, #3
 80013cc:	d110      	bne.n	80013f0 <HAL_TIM_PeriodElapsedCallback+0x48>

			if (flag_blinker == 1) {
 80013ce:	4b48      	ldr	r3, [pc, #288]	; (80014f0 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d105      	bne.n	80013e2 <HAL_TIM_PeriodElapsedCallback+0x3a>
				ws2811_firstAndSecondSegmentsDisplayReset();
 80013d6:	f002 f8e7 	bl	80035a8 <ws2811_firstAndSecondSegmentsDisplayReset>
				flag_blinker = 0;
 80013da:	4b45      	ldr	r3, [pc, #276]	; (80014f0 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	e006      	b.n	80013f0 <HAL_TIM_PeriodElapsedCallback+0x48>
			} else {
				menuDisplayStart();
 80013e2:	f001 fb25 	bl	8002a30 <menuDisplayStart>
				dwukropekTurnOn();
 80013e6:	f001 f903 	bl	80025f0 <dwukropekTurnOn>
				flag_blinker = 1;
 80013ea:	4b41      	ldr	r3, [pc, #260]	; (80014f0 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80013ec:	2201      	movs	r2, #1
 80013ee:	601a      	str	r2, [r3, #0]
			}
		}

		// Minute blinking in minutes menu mode:
		if (TurnOnMenuMode() == MENU_TIME_MINUTE_LEVEL
 80013f0:	f000 f94c 	bl	800168c <TurnOnMenuMode>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d004      	beq.n	8001404 <HAL_TIM_PeriodElapsedCallback+0x5c>
				|| TurnOnMenuMode() == MENU_TIME_MINUTE_SECOND_DIGIT) {
 80013fa:	f000 f947 	bl	800168c <TurnOnMenuMode>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b04      	cmp	r3, #4
 8001402:	d110      	bne.n	8001426 <HAL_TIM_PeriodElapsedCallback+0x7e>

			if (flag_blinker == 1) {
 8001404:	4b3a      	ldr	r3, [pc, #232]	; (80014f0 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2b01      	cmp	r3, #1
 800140a:	d105      	bne.n	8001418 <HAL_TIM_PeriodElapsedCallback+0x70>
				ws2811_ThirdAndFourthSegmentsDisplayReset();
 800140c:	f002 f8f8 	bl	8003600 <ws2811_ThirdAndFourthSegmentsDisplayReset>
				flag_blinker = 0;
 8001410:	4b37      	ldr	r3, [pc, #220]	; (80014f0 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	e006      	b.n	8001426 <HAL_TIM_PeriodElapsedCallback+0x7e>
			} else {
				menuDisplayStart();
 8001418:	f001 fb0a 	bl	8002a30 <menuDisplayStart>
				dwukropekTurnOn();
 800141c:	f001 f8e8 	bl	80025f0 <dwukropekTurnOn>
				flag_blinker = 1;
 8001420:	4b33      	ldr	r3, [pc, #204]	; (80014f0 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001422:	2201      	movs	r2, #1
 8001424:	601a      	str	r2, [r3, #0]
			}
		}

		// Months blinking in months menu mode:
		if (TurnOnMenuMode() == MENU_DATE_LEVEL
 8001426:	f000 f931 	bl	800168c <TurnOnMenuMode>
 800142a:	4603      	mov	r3, r0
 800142c:	2b05      	cmp	r3, #5
 800142e:	d004      	beq.n	800143a <HAL_TIM_PeriodElapsedCallback+0x92>
				|| TurnOnMenuMode() == MENU_DATE_MONTH_SECOND_DIGIT) {
 8001430:	f000 f92c 	bl	800168c <TurnOnMenuMode>
 8001434:	4603      	mov	r3, r0
 8001436:	2b06      	cmp	r3, #6
 8001438:	d110      	bne.n	800145c <HAL_TIM_PeriodElapsedCallback+0xb4>

			if (flag_blinker == 1) {
 800143a:	4b2d      	ldr	r3, [pc, #180]	; (80014f0 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d105      	bne.n	800144e <HAL_TIM_PeriodElapsedCallback+0xa6>
				ws2811_ThirdAndFourthSegmentsDisplayReset();
 8001442:	f002 f8dd 	bl	8003600 <ws2811_ThirdAndFourthSegmentsDisplayReset>
				flag_blinker = 0;
 8001446:	4b2a      	ldr	r3, [pc, #168]	; (80014f0 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	e006      	b.n	800145c <HAL_TIM_PeriodElapsedCallback+0xb4>
			} else {
				dateOnDisplay();
 800144e:	f001 fb1f 	bl	8002a90 <dateOnDisplay>
				dotOn();
 8001452:	f001 f905 	bl	8002660 <dotOn>
				flag_blinker = 1;
 8001456:	4b26      	ldr	r3, [pc, #152]	; (80014f0 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001458:	2201      	movs	r2, #1
 800145a:	601a      	str	r2, [r3, #0]
			}
		}

		// Days blinking in days menu mode:
		if (TurnOnMenuMode() == MENU_DATE_DAY_FIRST_DIGIT
 800145c:	f000 f916 	bl	800168c <TurnOnMenuMode>
 8001460:	4603      	mov	r3, r0
 8001462:	2b07      	cmp	r3, #7
 8001464:	d004      	beq.n	8001470 <HAL_TIM_PeriodElapsedCallback+0xc8>
				|| TurnOnMenuMode() == MENU_DATE_DAY_SECOND_DIGIT) {
 8001466:	f000 f911 	bl	800168c <TurnOnMenuMode>
 800146a:	4603      	mov	r3, r0
 800146c:	2b08      	cmp	r3, #8
 800146e:	d110      	bne.n	8001492 <HAL_TIM_PeriodElapsedCallback+0xea>

			if (flag_blinker == 1) {
 8001470:	4b1f      	ldr	r3, [pc, #124]	; (80014f0 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d105      	bne.n	8001484 <HAL_TIM_PeriodElapsedCallback+0xdc>
				ws2811_firstAndSecondSegmentsDisplayReset();
 8001478:	f002 f896 	bl	80035a8 <ws2811_firstAndSecondSegmentsDisplayReset>
				flag_blinker = 0;
 800147c:	4b1c      	ldr	r3, [pc, #112]	; (80014f0 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	e006      	b.n	8001492 <HAL_TIM_PeriodElapsedCallback+0xea>
			} else {
				dateOnDisplay();
 8001484:	f001 fb04 	bl	8002a90 <dateOnDisplay>
				dotOn();
 8001488:	f001 f8ea 	bl	8002660 <dotOn>
				flag_blinker = 1;
 800148c:	4b18      	ldr	r3, [pc, #96]	; (80014f0 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800148e:	2201      	movs	r2, #1
 8001490:	601a      	str	r2, [r3, #0]
			}
		}

		// OKRES 1 skundy:
		if (TurnOnMenuMode() != MENU_TEST_LEVEL) {
 8001492:	f000 f8fb 	bl	800168c <TurnOnMenuMode>
 8001496:	4603      	mov	r3, r0
 8001498:	2b09      	cmp	r3, #9
 800149a:	d022      	beq.n	80014e2 <HAL_TIM_PeriodElapsedCallback+0x13a>
			one_second_flag += 1;
 800149c:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	3301      	adds	r3, #1
 80014a2:	4a14      	ldr	r2, [pc, #80]	; (80014f4 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80014a4:	6013      	str	r3, [r2, #0]

			if (one_second_flag == 4) {
 80014a6:	4b13      	ldr	r3, [pc, #76]	; (80014f4 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2b04      	cmp	r3, #4
 80014ac:	d119      	bne.n	80014e2 <HAL_TIM_PeriodElapsedCallback+0x13a>
				if (TurnOnMenuMode() == MENU_OFF
 80014ae:	f000 f8ed 	bl	800168c <TurnOnMenuMode>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d105      	bne.n	80014c4 <HAL_TIM_PeriodElapsedCallback+0x11c>
						&& flag_showCalendar_or_temperature < DATA_SHOW_DURATION) {
 80014b8:	4b0f      	ldr	r3, [pc, #60]	; (80014f8 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2b18      	cmp	r3, #24
 80014be:	dc01      	bgt.n	80014c4 <HAL_TIM_PeriodElapsedCallback+0x11c>
					dwukropekStart();
 80014c0:	f001 f916 	bl	80026f0 <dwukropekStart>
				} else {

				}

				// Obsluga flagi daty i temperatury
				flag_showCalendar_or_temperature += 1;
 80014c4:	4b0c      	ldr	r3, [pc, #48]	; (80014f8 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	3301      	adds	r3, #1
 80014ca:	4a0b      	ldr	r2, [pc, #44]	; (80014f8 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80014cc:	6013      	str	r3, [r2, #0]
				if (flag_showCalendar_or_temperature == TEMPERATURE_SHOW_PERIOD) {
 80014ce:	4b0a      	ldr	r3, [pc, #40]	; (80014f8 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2b23      	cmp	r3, #35	; 0x23
 80014d4:	d102      	bne.n	80014dc <HAL_TIM_PeriodElapsedCallback+0x134>
					flag_showCalendar_or_temperature = 0;
 80014d6:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
				}
				one_second_flag = 0;
 80014dc:	4b05      	ldr	r3, [pc, #20]	; (80014f4 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
			}
		}

	}
}
 80014e2:	bf00      	nop
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	20000964 	.word	0x20000964
 80014f0:	20000288 	.word	0x20000288
 80014f4:	2000028c 	.word	0x2000028c
 80014f8:	20000290 	.word	0x20000290

080014fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001502:	f002 f956 	bl	80037b2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001506:	f000 f83d 	bl	8001584 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800150a:	f7ff fdd3 	bl	80010b4 <MX_GPIO_Init>
  MX_DMA_Init();
 800150e:	f7ff fdb3 	bl	8001078 <MX_DMA_Init>
  MX_TIM4_Init();
 8001512:	f001 fde3 	bl	80030dc <MX_TIM4_Init>
  MX_RTC_Init();
 8001516:	f000 fcd7 	bl	8001ec8 <MX_RTC_Init>
  MX_TIM2_Init();
 800151a:	f001 fd53 	bl	8002fc4 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800151e:	f001 ff59 	bl	80033d4 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8001522:	f001 fe51 	bl	80031c8 <MX_TIM6_Init>
  MX_ADC1_Init();
 8001526:	f7ff fcbb 	bl	8000ea0 <MX_ADC1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800152a:	f000 f88d 	bl	8001648 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

	//Initalization od program
	ws2811_init();
 800152e:	f002 f809 	bl	8003544 <ws2811_init>
	HAL_TIM_Base_Start_IT(&htim6);
 8001532:	4813      	ldr	r0, [pc, #76]	; (8001580 <main+0x84>)
 8001534:	f006 fa90 	bl	8007a58 <HAL_TIM_Base_Start_IT>
	ir_init();
 8001538:	f7ff fe80 	bl	800123c <ir_init>
	HAL_PWR_EnableBkUpAccess();
 800153c:	f004 f9b2 	bl	80058a4 <HAL_PWR_EnableBkUpAccess>


	/*
	 * --------------------------------------> CHANGE STANDARD COLOR
	 */
	backToColorinMemory();
 8001540:	f000 fe66 	bl	8002210 <backToColorinMemory>

		// ZEGAR:

		// NORMAL WORK

		if (TurnOnMenuMode() == 0) {
 8001544:	f000 f8a2 	bl	800168c <TurnOnMenuMode>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d101      	bne.n	8001552 <main+0x56>
			normalWorkStart();
 800154e:	f7ff fe9f 	bl	8001290 <normalWorkStart>
		}

		// WAIT FOR SIGNAL FROM REMOTE CONTROLLER
		int value = ir_read();
 8001552:	f7ff fe81 	bl	8001258 <ir_read>
 8001556:	6078      	str	r0, [r7, #4]
		if (value != -1) {
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800155e:	d002      	beq.n	8001566 <main+0x6a>
			menu(value);
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f000 fa0f 	bl	8001984 <menu>
		}

		// Turn on StanbyMode when it is time for it
		TurnOnStanbyMode(STANDBY_HOUR, STANDBY_MINUTE, STANDBY_SECOND);
 8001566:	2200      	movs	r2, #0
 8001568:	2100      	movs	r1, #0
 800156a:	2011      	movs	r0, #17
 800156c:	f000 fdd4 	bl	8002118 <TurnOnStanbyMode>

		// Test segments:

		if(TurnOnMenuMode()==MENU_TEST_LEVEL){
 8001570:	f000 f88c 	bl	800168c <TurnOnMenuMode>
 8001574:	4603      	mov	r3, r0
 8001576:	2b09      	cmp	r3, #9
 8001578:	d1e4      	bne.n	8001544 <main+0x48>
			testSegments();
 800157a:	f001 fafb 	bl	8002b74 <testSegments>
	while (1) {
 800157e:	e7e1      	b.n	8001544 <main+0x48>
 8001580:	20000964 	.word	0x20000964

08001584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b096      	sub	sp, #88	; 0x58
 8001588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800158a:	f107 0314 	add.w	r3, r7, #20
 800158e:	2244      	movs	r2, #68	; 0x44
 8001590:	2100      	movs	r1, #0
 8001592:	4618      	mov	r0, r3
 8001594:	f009 f83a 	bl	800a60c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001598:	463b      	mov	r3, r7
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	605a      	str	r2, [r3, #4]
 80015a0:	609a      	str	r2, [r3, #8]
 80015a2:	60da      	str	r2, [r3, #12]
 80015a4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80015a6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80015aa:	f004 f9b3 	bl	8005914 <HAL_PWREx_ControlVoltageScaling>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80015b4:	f000 f864 	bl	8001680 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80015b8:	f004 f974 	bl	80058a4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80015bc:	4b21      	ldr	r3, [pc, #132]	; (8001644 <SystemClock_Config+0xc0>)
 80015be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015c2:	4a20      	ldr	r2, [pc, #128]	; (8001644 <SystemClock_Config+0xc0>)
 80015c4:	f023 0318 	bic.w	r3, r3, #24
 80015c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80015cc:	2314      	movs	r3, #20
 80015ce:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80015d0:	2301      	movs	r3, #1
 80015d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80015d4:	2301      	movs	r3, #1
 80015d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80015d8:	2300      	movs	r3, #0
 80015da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80015dc:	2360      	movs	r3, #96	; 0x60
 80015de:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015e0:	2302      	movs	r3, #2
 80015e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80015e4:	2301      	movs	r3, #1
 80015e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80015e8:	2301      	movs	r3, #1
 80015ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80015ec:	2328      	movs	r3, #40	; 0x28
 80015ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80015f0:	2307      	movs	r3, #7
 80015f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80015f4:	2302      	movs	r3, #2
 80015f6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015f8:	2302      	movs	r3, #2
 80015fa:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015fc:	f107 0314 	add.w	r3, r7, #20
 8001600:	4618      	mov	r0, r3
 8001602:	f004 f9dd 	bl	80059c0 <HAL_RCC_OscConfig>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800160c:	f000 f838 	bl	8001680 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001610:	230f      	movs	r3, #15
 8001612:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001614:	2303      	movs	r3, #3
 8001616:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001618:	2300      	movs	r3, #0
 800161a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800161c:	2300      	movs	r3, #0
 800161e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001620:	2300      	movs	r3, #0
 8001622:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001624:	463b      	mov	r3, r7
 8001626:	2104      	movs	r1, #4
 8001628:	4618      	mov	r0, r3
 800162a:	f004 fdaf 	bl	800618c <HAL_RCC_ClockConfig>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001634:	f000 f824 	bl	8001680 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001638:	f005 fa98 	bl	8006b6c <HAL_RCCEx_EnableMSIPLLMode>
}
 800163c:	bf00      	nop
 800163e:	3758      	adds	r7, #88	; 0x58
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40021000 	.word	0x40021000

08001648 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* RTC_Alarm_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 1, 0);
 800164c:	2200      	movs	r2, #0
 800164e:	2101      	movs	r1, #1
 8001650:	2029      	movs	r0, #41	; 0x29
 8001652:	f003 fd36 	bl	80050c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001656:	2029      	movs	r0, #41	; 0x29
 8001658:	f003 fd4f 	bl	80050fa <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 800165c:	2200      	movs	r2, #0
 800165e:	2102      	movs	r1, #2
 8001660:	201c      	movs	r0, #28
 8001662:	f003 fd2e 	bl	80050c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001666:	201c      	movs	r0, #28
 8001668:	f003 fd47 	bl	80050fa <HAL_NVIC_EnableIRQ>
  /* TIM6_DAC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 800166c:	2200      	movs	r2, #0
 800166e:	2103      	movs	r1, #3
 8001670:	2036      	movs	r0, #54	; 0x36
 8001672:	f003 fd26 	bl	80050c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001676:	2036      	movs	r0, #54	; 0x36
 8001678:	f003 fd3f 	bl	80050fa <HAL_NVIC_EnableIRQ>
}
 800167c:	bf00      	nop
 800167e:	bd80      	pop	{r7, pc}

08001680 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001684:	b672      	cpsid	i
}
 8001686:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001688:	e7fe      	b.n	8001688 <Error_Handler+0x8>
	...

0800168c <TurnOnMenuMode>:



// Funtions:

int TurnOnMenuMode(void){
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
	return flagMenu;
 8001690:	4b03      	ldr	r3, [pc, #12]	; (80016a0 <TurnOnMenuMode+0x14>)
 8001692:	681b      	ldr	r3, [r3, #0]
}
 8001694:	4618      	mov	r0, r3
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	20000298 	.word	0x20000298

080016a4 <isInRangeHours>:


// Tests:

int isInRangeHours(uint8_t entryData){
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	71fb      	strb	r3, [r7, #7]
	if(entryData>23){
 80016ae:	79fb      	ldrb	r3, [r7, #7]
 80016b0:	2b17      	cmp	r3, #23
 80016b2:	d901      	bls.n	80016b8 <isInRangeHours+0x14>
		return 1;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e000      	b.n	80016ba <isInRangeHours+0x16>
	}else{
		return 0;
 80016b8:	2300      	movs	r3, #0
	}
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <isInRangeMinute>:

int isInRangeMinute(uint8_t entryData){
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	4603      	mov	r3, r0
 80016ce:	71fb      	strb	r3, [r7, #7]
	if(entryData>60){
 80016d0:	79fb      	ldrb	r3, [r7, #7]
 80016d2:	2b3c      	cmp	r3, #60	; 0x3c
 80016d4:	d901      	bls.n	80016da <isInRangeMinute+0x14>
		return 1;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e000      	b.n	80016dc <isInRangeMinute+0x16>
	}else{
		return 0;
 80016da:	2300      	movs	r3, #0
	}
}
 80016dc:	4618      	mov	r0, r3
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <isInRangeMonth>:


int isInRangeMonth(uint8_t entryData){
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	71fb      	strb	r3, [r7, #7]
	if(entryData>12){
 80016f2:	79fb      	ldrb	r3, [r7, #7]
 80016f4:	2b0c      	cmp	r3, #12
 80016f6:	d901      	bls.n	80016fc <isInRangeMonth+0x14>
		return 1;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e000      	b.n	80016fe <isInRangeMonth+0x16>
	}else{
		return 0;
 80016fc:	2300      	movs	r3, #0
	}
}
 80016fe:	4618      	mov	r0, r3
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr

0800170a <isInRangeDay>:


int isInRangeDay(uint8_t entryData){
 800170a:	b480      	push	{r7}
 800170c:	b083      	sub	sp, #12
 800170e:	af00      	add	r7, sp, #0
 8001710:	4603      	mov	r3, r0
 8001712:	71fb      	strb	r3, [r7, #7]
	if(entryData>31){
 8001714:	79fb      	ldrb	r3, [r7, #7]
 8001716:	2b1f      	cmp	r3, #31
 8001718:	d901      	bls.n	800171e <isInRangeDay+0x14>
		return 1;
 800171a:	2301      	movs	r3, #1
 800171c:	e000      	b.n	8001720 <isInRangeDay+0x16>
	}else{
		return 0;
 800171e:	2300      	movs	r3, #0
	}
}
 8001720:	4618      	mov	r0, r3
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <colorMenu>:


void colorMenu(struct colorRgb color){
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
	if (flagColor == MENU_COLOR_LEVEL) {
 8001734:	4b06      	ldr	r3, [pc, #24]	; (8001750 <colorMenu+0x24>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d105      	bne.n	8001748 <colorMenu+0x1c>
				changeColor(color);
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f000 fd23 	bl	8002188 <changeColor>
				flagColor = MENU_OFF;
 8001742:	4b03      	ldr	r3, [pc, #12]	; (8001750 <colorMenu+0x24>)
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
			}
}
 8001748:	bf00      	nop
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	20000294 	.word	0x20000294

08001754 <firstDigitHour>:


// Funtions to chagne time in menu:


void firstDigitHour(uint8_t forAdd){
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	71fb      	strb	r3, [r7, #7]
	if (flagMenu == MENU_TIME_LEVEL) {
 800175e:	4b08      	ldr	r3, [pc, #32]	; (8001780 <firstDigitHour+0x2c>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2b01      	cmp	r3, #1
 8001764:	d105      	bne.n	8001772 <firstDigitHour+0x1e>
		hoursChange = forAdd;
 8001766:	4a07      	ldr	r2, [pc, #28]	; (8001784 <firstDigitHour+0x30>)
 8001768:	79fb      	ldrb	r3, [r7, #7]
 800176a:	7013      	strb	r3, [r2, #0]
		flagMenu = MENU_TIME_HOUR_SECOND_DIGIT;
 800176c:	4b04      	ldr	r3, [pc, #16]	; (8001780 <firstDigitHour+0x2c>)
 800176e:	2203      	movs	r2, #3
 8001770:	601a      	str	r2, [r3, #0]
	}
}
 8001772:	bf00      	nop
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	20000298 	.word	0x20000298
 8001784:	2000029d 	.word	0x2000029d

08001788 <secondDigitHour>:

void secondDigitHour(uint8_t forAdd){
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	71fb      	strb	r3, [r7, #7]
	if (flagMenu == MENU_TIME_HOUR_SECOND_DIGIT) {
 8001792:	4b11      	ldr	r3, [pc, #68]	; (80017d8 <secondDigitHour+0x50>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2b03      	cmp	r3, #3
 8001798:	d119      	bne.n	80017ce <secondDigitHour+0x46>

		hoursChange += forAdd;
 800179a:	4b10      	ldr	r3, [pc, #64]	; (80017dc <secondDigitHour+0x54>)
 800179c:	781a      	ldrb	r2, [r3, #0]
 800179e:	79fb      	ldrb	r3, [r7, #7]
 80017a0:	4413      	add	r3, r2
 80017a2:	b2da      	uxtb	r2, r3
 80017a4:	4b0d      	ldr	r3, [pc, #52]	; (80017dc <secondDigitHour+0x54>)
 80017a6:	701a      	strb	r2, [r3, #0]

		if (isInRangeHours(hoursChange)) {
 80017a8:	4b0c      	ldr	r3, [pc, #48]	; (80017dc <secondDigitHour+0x54>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff ff79 	bl	80016a4 <isInRangeHours>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d002      	beq.n	80017be <secondDigitHour+0x36>
			hoursChange = 0;
 80017b8:	4b08      	ldr	r3, [pc, #32]	; (80017dc <secondDigitHour+0x54>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	701a      	strb	r2, [r3, #0]
		}

		setHours(hoursChange);
 80017be:	4b07      	ldr	r3, [pc, #28]	; (80017dc <secondDigitHour+0x54>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f001 f86a 	bl	800289c <setHours>
		flagMenu = MENU_TIME_LEVEL;
 80017c8:	4b03      	ldr	r3, [pc, #12]	; (80017d8 <secondDigitHour+0x50>)
 80017ca:	2201      	movs	r2, #1
 80017cc:	601a      	str	r2, [r3, #0]
	}
}
 80017ce:	bf00      	nop
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20000298 	.word	0x20000298
 80017dc:	2000029d 	.word	0x2000029d

080017e0 <firstDigitMinute>:

void firstDigitMinute(uint8_t forAdd){
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	71fb      	strb	r3, [r7, #7]
	if (flagMenu == MENU_TIME_MINUTE_LEVEL) {
 80017ea:	4b08      	ldr	r3, [pc, #32]	; (800180c <firstDigitMinute+0x2c>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d105      	bne.n	80017fe <firstDigitMinute+0x1e>
		minutesChange = forAdd;
 80017f2:	4a07      	ldr	r2, [pc, #28]	; (8001810 <firstDigitMinute+0x30>)
 80017f4:	79fb      	ldrb	r3, [r7, #7]
 80017f6:	7013      	strb	r3, [r2, #0]
		flagMenu = MENU_TIME_MINUTE_SECOND_DIGIT;
 80017f8:	4b04      	ldr	r3, [pc, #16]	; (800180c <firstDigitMinute+0x2c>)
 80017fa:	2204      	movs	r2, #4
 80017fc:	601a      	str	r2, [r3, #0]

	}
}
 80017fe:	bf00      	nop
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	20000298 	.word	0x20000298
 8001810:	2000029c 	.word	0x2000029c

08001814 <secondDigitMinute>:

void secondDigitMinute(uint8_t forAdd){
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	71fb      	strb	r3, [r7, #7]
	if (flagMenu == MENU_TIME_MINUTE_SECOND_DIGIT) {
 800181e:	4b11      	ldr	r3, [pc, #68]	; (8001864 <secondDigitMinute+0x50>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	2b04      	cmp	r3, #4
 8001824:	d119      	bne.n	800185a <secondDigitMinute+0x46>
		minutesChange += forAdd;
 8001826:	4b10      	ldr	r3, [pc, #64]	; (8001868 <secondDigitMinute+0x54>)
 8001828:	781a      	ldrb	r2, [r3, #0]
 800182a:	79fb      	ldrb	r3, [r7, #7]
 800182c:	4413      	add	r3, r2
 800182e:	b2da      	uxtb	r2, r3
 8001830:	4b0d      	ldr	r3, [pc, #52]	; (8001868 <secondDigitMinute+0x54>)
 8001832:	701a      	strb	r2, [r3, #0]

		if (isInRangeMinute(minutesChange)) {
 8001834:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <secondDigitMinute+0x54>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff ff44 	bl	80016c6 <isInRangeMinute>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d002      	beq.n	800184a <secondDigitMinute+0x36>
			minutesChange = 0;
 8001844:	4b08      	ldr	r3, [pc, #32]	; (8001868 <secondDigitMinute+0x54>)
 8001846:	2200      	movs	r2, #0
 8001848:	701a      	strb	r2, [r3, #0]
		}
		setMinutes(minutesChange);
 800184a:	4b07      	ldr	r3, [pc, #28]	; (8001868 <secondDigitMinute+0x54>)
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	4618      	mov	r0, r3
 8001850:	f000 fff6 	bl	8002840 <setMinutes>
		flagMenu = MENU_TIME_MINUTE_LEVEL;
 8001854:	4b03      	ldr	r3, [pc, #12]	; (8001864 <secondDigitMinute+0x50>)
 8001856:	2202      	movs	r2, #2
 8001858:	601a      	str	r2, [r3, #0]
	}
}
 800185a:	bf00      	nop
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	20000298 	.word	0x20000298
 8001868:	2000029c 	.word	0x2000029c

0800186c <firstDigitMonth>:


// functions to change data in menu


void firstDigitMonth(uint8_t forAdd){
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	4603      	mov	r3, r0
 8001874:	71fb      	strb	r3, [r7, #7]
	if (flagMenu == MENU_DATE_LEVEL) {
 8001876:	4b08      	ldr	r3, [pc, #32]	; (8001898 <firstDigitMonth+0x2c>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2b05      	cmp	r3, #5
 800187c:	d105      	bne.n	800188a <firstDigitMonth+0x1e>
		monthChange = forAdd;
 800187e:	4a07      	ldr	r2, [pc, #28]	; (800189c <firstDigitMonth+0x30>)
 8001880:	79fb      	ldrb	r3, [r7, #7]
 8001882:	7013      	strb	r3, [r2, #0]
		flagMenu = MENU_DATE_MONTH_SECOND_DIGIT;
 8001884:	4b04      	ldr	r3, [pc, #16]	; (8001898 <firstDigitMonth+0x2c>)
 8001886:	2206      	movs	r2, #6
 8001888:	601a      	str	r2, [r3, #0]
	}
}
 800188a:	bf00      	nop
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	20000298 	.word	0x20000298
 800189c:	2000029f 	.word	0x2000029f

080018a0 <secondDigitMonth>:


void secondDigitMonth(uint8_t forAdd){
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	71fb      	strb	r3, [r7, #7]
	if (flagMenu == MENU_DATE_MONTH_SECOND_DIGIT) {
 80018aa:	4b11      	ldr	r3, [pc, #68]	; (80018f0 <secondDigitMonth+0x50>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	2b06      	cmp	r3, #6
 80018b0:	d119      	bne.n	80018e6 <secondDigitMonth+0x46>

		monthChange += forAdd;
 80018b2:	4b10      	ldr	r3, [pc, #64]	; (80018f4 <secondDigitMonth+0x54>)
 80018b4:	781a      	ldrb	r2, [r3, #0]
 80018b6:	79fb      	ldrb	r3, [r7, #7]
 80018b8:	4413      	add	r3, r2
 80018ba:	b2da      	uxtb	r2, r3
 80018bc:	4b0d      	ldr	r3, [pc, #52]	; (80018f4 <secondDigitMonth+0x54>)
 80018be:	701a      	strb	r2, [r3, #0]

		if (isInRangeMonth(monthChange)) {
 80018c0:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <secondDigitMonth+0x54>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff ff0f 	bl	80016e8 <isInRangeMonth>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d002      	beq.n	80018d6 <secondDigitMonth+0x36>
			monthChange = 0;
 80018d0:	4b08      	ldr	r3, [pc, #32]	; (80018f4 <secondDigitMonth+0x54>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	701a      	strb	r2, [r3, #0]
		}

		setMonth(monthChange);
 80018d6:	4b07      	ldr	r3, [pc, #28]	; (80018f4 <secondDigitMonth+0x54>)
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	4618      	mov	r0, r3
 80018dc:	f001 f810 	bl	8002900 <setMonth>
		flagMenu = MENU_DATE_LEVEL;
 80018e0:	4b03      	ldr	r3, [pc, #12]	; (80018f0 <secondDigitMonth+0x50>)
 80018e2:	2205      	movs	r2, #5
 80018e4:	601a      	str	r2, [r3, #0]
	}
}
 80018e6:	bf00      	nop
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	20000298 	.word	0x20000298
 80018f4:	2000029f 	.word	0x2000029f

080018f8 <firstDigitDay>:


void firstDigitDay(uint8_t forAdd){
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4603      	mov	r3, r0
 8001900:	71fb      	strb	r3, [r7, #7]
	if (flagMenu == MENU_DATE_DAY_FIRST_DIGIT) {
 8001902:	4b08      	ldr	r3, [pc, #32]	; (8001924 <firstDigitDay+0x2c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2b07      	cmp	r3, #7
 8001908:	d105      	bne.n	8001916 <firstDigitDay+0x1e>
		dayChange = forAdd;
 800190a:	4a07      	ldr	r2, [pc, #28]	; (8001928 <firstDigitDay+0x30>)
 800190c:	79fb      	ldrb	r3, [r7, #7]
 800190e:	7013      	strb	r3, [r2, #0]
		flagMenu = MENU_DATE_DAY_SECOND_DIGIT;
 8001910:	4b04      	ldr	r3, [pc, #16]	; (8001924 <firstDigitDay+0x2c>)
 8001912:	2208      	movs	r2, #8
 8001914:	601a      	str	r2, [r3, #0]

	}
}
 8001916:	bf00      	nop
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	20000298 	.word	0x20000298
 8001928:	2000029e 	.word	0x2000029e

0800192c <secondDigitDay>:


void secondDigitDay(uint8_t forAdd){
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	71fb      	strb	r3, [r7, #7]
	if (flagMenu == MENU_DATE_DAY_SECOND_DIGIT) {
 8001936:	4b11      	ldr	r3, [pc, #68]	; (800197c <secondDigitDay+0x50>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2b08      	cmp	r3, #8
 800193c:	d119      	bne.n	8001972 <secondDigitDay+0x46>
		dayChange += forAdd;
 800193e:	4b10      	ldr	r3, [pc, #64]	; (8001980 <secondDigitDay+0x54>)
 8001940:	781a      	ldrb	r2, [r3, #0]
 8001942:	79fb      	ldrb	r3, [r7, #7]
 8001944:	4413      	add	r3, r2
 8001946:	b2da      	uxtb	r2, r3
 8001948:	4b0d      	ldr	r3, [pc, #52]	; (8001980 <secondDigitDay+0x54>)
 800194a:	701a      	strb	r2, [r3, #0]

		if (isInRangeDay(dayChange)) {
 800194c:	4b0c      	ldr	r3, [pc, #48]	; (8001980 <secondDigitDay+0x54>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff feda 	bl	800170a <isInRangeDay>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d002      	beq.n	8001962 <secondDigitDay+0x36>
			dayChange = 0;
 800195c:	4b08      	ldr	r3, [pc, #32]	; (8001980 <secondDigitDay+0x54>)
 800195e:	2200      	movs	r2, #0
 8001960:	701a      	strb	r2, [r3, #0]
		}
		setDay(dayChange);
 8001962:	4b07      	ldr	r3, [pc, #28]	; (8001980 <secondDigitDay+0x54>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	4618      	mov	r0, r3
 8001968:	f001 f800 	bl	800296c <setDay>
		flagMenu = MENU_DATE_DAY_FIRST_DIGIT;
 800196c:	4b03      	ldr	r3, [pc, #12]	; (800197c <secondDigitDay+0x50>)
 800196e:	2207      	movs	r2, #7
 8001970:	601a      	str	r2, [r3, #0]
	}
}
 8001972:	bf00      	nop
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	20000298 	.word	0x20000298
 8001980:	2000029e 	.word	0x2000029e

08001984 <menu>:
/*
 *
 * REMOTE CONTROLLER MENU
 *
 */
void menu(int value) {
 8001984:	b580      	push	{r7, lr}
 8001986:	b088      	sub	sp, #32
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]

	// Display via USART
	printf("code=%02x\n", value);
 800198c:	6879      	ldr	r1, [r7, #4]
 800198e:	48cf      	ldr	r0, [pc, #828]	; (8001ccc <menu+0x348>)
 8001990:	f009 faae 	bl	800aef0 <iprintf>

	RTC_TimeTypeDef time = {0};
 8001994:	f107 030c 	add.w	r3, r7, #12
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	605a      	str	r2, [r3, #4]
 800199e:	609a      	str	r2, [r3, #8]
 80019a0:	60da      	str	r2, [r3, #12]
 80019a2:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef date = {0};
 80019a4:	2300      	movs	r3, #0
 80019a6:	60bb      	str	r3, [r7, #8]

	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 80019a8:	f107 030c 	add.w	r3, r7, #12
 80019ac:	2200      	movs	r2, #0
 80019ae:	4619      	mov	r1, r3
 80019b0:	48c7      	ldr	r0, [pc, #796]	; (8001cd0 <menu+0x34c>)
 80019b2:	f005 fbd5 	bl	8007160 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 80019b6:	f107 0308 	add.w	r3, r7, #8
 80019ba:	2200      	movs	r2, #0
 80019bc:	4619      	mov	r1, r3
 80019be:	48c4      	ldr	r0, [pc, #784]	; (8001cd0 <menu+0x34c>)
 80019c0:	f005 fcb1 	bl	8007326 <HAL_RTC_GetDate>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3b07      	subs	r3, #7
 80019c8:	2b57      	cmp	r3, #87	; 0x57
 80019ca:	f200 826b 	bhi.w	8001ea4 <menu+0x520>
 80019ce:	a201      	add	r2, pc, #4	; (adr r2, 80019d4 <menu+0x50>)
 80019d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019d4:	08001bc5 	.word	0x08001bc5
 80019d8:	08001ce9 	.word	0x08001ce9
 80019dc:	08001b95 	.word	0x08001b95
 80019e0:	08001ea5 	.word	0x08001ea5
 80019e4:	08001ea5 	.word	0x08001ea5
 80019e8:	08001bf5 	.word	0x08001bf5
 80019ec:	08001b4d 	.word	0x08001b4d
 80019f0:	08001ea5 	.word	0x08001ea5
 80019f4:	08001ea5 	.word	0x08001ea5
 80019f8:	08001ea5 	.word	0x08001ea5
 80019fc:	08001ea5 	.word	0x08001ea5
 8001a00:	08001ea5 	.word	0x08001ea5
 8001a04:	08001ea5 	.word	0x08001ea5
 8001a08:	08001ea5 	.word	0x08001ea5
 8001a0c:	08001b85 	.word	0x08001b85
 8001a10:	08001dc9 	.word	0x08001dc9
 8001a14:	08001ea5 	.word	0x08001ea5
 8001a18:	08001c43 	.word	0x08001c43
 8001a1c:	08001e9b 	.word	0x08001e9b
 8001a20:	08001ea5 	.word	0x08001ea5
 8001a24:	08001ea5 	.word	0x08001ea5
 8001a28:	08001d25 	.word	0x08001d25
 8001a2c:	08001ea5 	.word	0x08001ea5
 8001a30:	08001ea5 	.word	0x08001ea5
 8001a34:	08001ea5 	.word	0x08001ea5
 8001a38:	08001ea5 	.word	0x08001ea5
 8001a3c:	08001ea5 	.word	0x08001ea5
 8001a40:	08001ea5 	.word	0x08001ea5
 8001a44:	08001ea5 	.word	0x08001ea5
 8001a48:	08001ea5 	.word	0x08001ea5
 8001a4c:	08001ea5 	.word	0x08001ea5
 8001a50:	08001ea5 	.word	0x08001ea5
 8001a54:	08001ea5 	.word	0x08001ea5
 8001a58:	08001ea5 	.word	0x08001ea5
 8001a5c:	08001ea5 	.word	0x08001ea5
 8001a60:	08001ea5 	.word	0x08001ea5
 8001a64:	08001ea5 	.word	0x08001ea5
 8001a68:	08001ea5 	.word	0x08001ea5
 8001a6c:	08001ea5 	.word	0x08001ea5
 8001a70:	08001ea5 	.word	0x08001ea5
 8001a74:	08001ea5 	.word	0x08001ea5
 8001a78:	08001ea5 	.word	0x08001ea5
 8001a7c:	08001ea5 	.word	0x08001ea5
 8001a80:	08001ea5 	.word	0x08001ea5
 8001a84:	08001ea5 	.word	0x08001ea5
 8001a88:	08001ea5 	.word	0x08001ea5
 8001a8c:	08001ea5 	.word	0x08001ea5
 8001a90:	08001ea5 	.word	0x08001ea5
 8001a94:	08001ea5 	.word	0x08001ea5
 8001a98:	08001ea5 	.word	0x08001ea5
 8001a9c:	08001ea5 	.word	0x08001ea5
 8001aa0:	08001ea5 	.word	0x08001ea5
 8001aa4:	08001ea5 	.word	0x08001ea5
 8001aa8:	08001ea5 	.word	0x08001ea5
 8001aac:	08001ea5 	.word	0x08001ea5
 8001ab0:	08001ea5 	.word	0x08001ea5
 8001ab4:	08001ea5 	.word	0x08001ea5
 8001ab8:	08001e9b 	.word	0x08001e9b
 8001abc:	08001ea5 	.word	0x08001ea5
 8001ac0:	08001d7b 	.word	0x08001d7b
 8001ac4:	08001ea5 	.word	0x08001ea5
 8001ac8:	08001b35 	.word	0x08001b35
 8001acc:	08001ea5 	.word	0x08001ea5
 8001ad0:	08001ea5 	.word	0x08001ea5
 8001ad4:	08001b55 	.word	0x08001b55
 8001ad8:	08001ea5 	.word	0x08001ea5
 8001adc:	08001ea5 	.word	0x08001ea5
 8001ae0:	08001daf 	.word	0x08001daf
 8001ae4:	08001ea5 	.word	0x08001ea5
 8001ae8:	08001ea5 	.word	0x08001ea5
 8001aec:	08001ea5 	.word	0x08001ea5
 8001af0:	08001ea5 	.word	0x08001ea5
 8001af4:	08001ea5 	.word	0x08001ea5
 8001af8:	08001ea5 	.word	0x08001ea5
 8001afc:	08001ea5 	.word	0x08001ea5
 8001b00:	08001d95 	.word	0x08001d95
 8001b04:	08001ea5 	.word	0x08001ea5
 8001b08:	08001ea5 	.word	0x08001ea5
 8001b0c:	08001ea5 	.word	0x08001ea5
 8001b10:	08001ea5 	.word	0x08001ea5
 8001b14:	08001ea5 	.word	0x08001ea5
 8001b18:	08001ea5 	.word	0x08001ea5
 8001b1c:	08001ea5 	.word	0x08001ea5
 8001b20:	08001d61 	.word	0x08001d61
 8001b24:	08001ea5 	.word	0x08001ea5
 8001b28:	08001ea5 	.word	0x08001ea5
 8001b2c:	08001ea5 	.word	0x08001ea5
 8001b30:	08001c8b 	.word	0x08001c8b
		break;
	case IR_CODE_MINUS:
		break;

	case IR_CODE_TEST:
		if(flagMenu==MENU_TEST_LEVEL){
 8001b34:	4b67      	ldr	r3, [pc, #412]	; (8001cd4 <menu+0x350>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2b09      	cmp	r3, #9
 8001b3a:	d103      	bne.n	8001b44 <menu+0x1c0>
			flagMenu=MENU_OFF;
 8001b3c:	4b65      	ldr	r3, [pc, #404]	; (8001cd4 <menu+0x350>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]
		}else{
			flagMenu=MENU_TEST_LEVEL;
		}
		break;
 8001b42:	e1af      	b.n	8001ea4 <menu+0x520>
			flagMenu=MENU_TEST_LEVEL;
 8001b44:	4b63      	ldr	r3, [pc, #396]	; (8001cd4 <menu+0x350>)
 8001b46:	2209      	movs	r2, #9
 8001b48:	601a      	str	r2, [r3, #0]
		break;
 8001b4a:	e1ab      	b.n	8001ea4 <menu+0x520>

	case IR_CODE_CANCEL:
		flagColor = MENU_COLOR_LEVEL;
 8001b4c:	4b62      	ldr	r3, [pc, #392]	; (8001cd8 <menu+0x354>)
 8001b4e:	2201      	movs	r2, #1
 8001b50:	601a      	str	r2, [r3, #0]
		break;
 8001b52:	e1a7      	b.n	8001ea4 <menu+0x520>

	case IR_CODE_MENU:
		if (flagMenu == MENU_TIME_LEVEL || flagMenu == MENU_TIME_MINUTE_LEVEL
 8001b54:	4b5f      	ldr	r3, [pc, #380]	; (8001cd4 <menu+0x350>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d007      	beq.n	8001b6c <menu+0x1e8>
 8001b5c:	4b5d      	ldr	r3, [pc, #372]	; (8001cd4 <menu+0x350>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d003      	beq.n	8001b6c <menu+0x1e8>
				|| flagMenu == MENU_TIME_MINUTE_SECOND_DIGIT) {
 8001b64:	4b5b      	ldr	r3, [pc, #364]	; (8001cd4 <menu+0x350>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2b04      	cmp	r3, #4
 8001b6a:	d105      	bne.n	8001b78 <menu+0x1f4>
			mixColor();
 8001b6c:	f000 fb36 	bl	80021dc <mixColor>
			flagMenu = MENU_DATE_DAY_FIRST_DIGIT;
 8001b70:	4b58      	ldr	r3, [pc, #352]	; (8001cd4 <menu+0x350>)
 8001b72:	2207      	movs	r2, #7
 8001b74:	601a      	str	r2, [r3, #0]
		} else {
			backToColorinMemory();
			flagMenu = MENU_TIME_LEVEL;
		}

		break;
 8001b76:	e195      	b.n	8001ea4 <menu+0x520>
			backToColorinMemory();
 8001b78:	f000 fb4a 	bl	8002210 <backToColorinMemory>
			flagMenu = MENU_TIME_LEVEL;
 8001b7c:	4b55      	ldr	r3, [pc, #340]	; (8001cd4 <menu+0x350>)
 8001b7e:	2201      	movs	r2, #1
 8001b80:	601a      	str	r2, [r3, #0]
		break;
 8001b82:	e18f      	b.n	8001ea4 <menu+0x520>

	case IR_CODE_PLAY:
		dotOff();
 8001b84:	f000 fd84 	bl	8002690 <dotOff>
		backToColorinMemory();
 8001b88:	f000 fb42 	bl	8002210 <backToColorinMemory>
		flagMenu = MENU_OFF;
 8001b8c:	4b51      	ldr	r3, [pc, #324]	; (8001cd4 <menu+0x350>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]
		break;
 8001b92:	e187      	b.n	8001ea4 <menu+0x520>

	case IR_CODE_FORWARD:
		if (flagMenu == MENU_TIME_LEVEL
 8001b94:	4b4f      	ldr	r3, [pc, #316]	; (8001cd4 <menu+0x350>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d003      	beq.n	8001ba4 <menu+0x220>
				|| flagMenu == MENU_TIME_HOUR_SECOND_DIGIT) {
 8001b9c:	4b4d      	ldr	r3, [pc, #308]	; (8001cd4 <menu+0x350>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2b03      	cmp	r3, #3
 8001ba2:	d102      	bne.n	8001baa <menu+0x226>
			flagMenu = MENU_TIME_MINUTE_LEVEL;
 8001ba4:	4b4b      	ldr	r3, [pc, #300]	; (8001cd4 <menu+0x350>)
 8001ba6:	2202      	movs	r2, #2
 8001ba8:	601a      	str	r2, [r3, #0]
		}
		if (flagMenu == MENU_DATE_DAY_FIRST_DIGIT
 8001baa:	4b4a      	ldr	r3, [pc, #296]	; (8001cd4 <menu+0x350>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2b07      	cmp	r3, #7
 8001bb0:	d004      	beq.n	8001bbc <menu+0x238>
				|| flagMenu == MENU_DATE_DAY_SECOND_DIGIT) {
 8001bb2:	4b48      	ldr	r3, [pc, #288]	; (8001cd4 <menu+0x350>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2b08      	cmp	r3, #8
 8001bb8:	f040 8171 	bne.w	8001e9e <menu+0x51a>
			flagMenu = MENU_DATE_LEVEL;
 8001bbc:	4b45      	ldr	r3, [pc, #276]	; (8001cd4 <menu+0x350>)
 8001bbe:	2205      	movs	r2, #5
 8001bc0:	601a      	str	r2, [r3, #0]
		}
		break;
 8001bc2:	e16c      	b.n	8001e9e <menu+0x51a>

	case IR_CODE_REWIND:
		if (flagMenu == MENU_TIME_MINUTE_LEVEL
 8001bc4:	4b43      	ldr	r3, [pc, #268]	; (8001cd4 <menu+0x350>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d003      	beq.n	8001bd4 <menu+0x250>
				|| flagMenu == MENU_TIME_MINUTE_SECOND_DIGIT) {
 8001bcc:	4b41      	ldr	r3, [pc, #260]	; (8001cd4 <menu+0x350>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2b04      	cmp	r3, #4
 8001bd2:	d102      	bne.n	8001bda <menu+0x256>
			flagMenu = MENU_TIME_LEVEL;
 8001bd4:	4b3f      	ldr	r3, [pc, #252]	; (8001cd4 <menu+0x350>)
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	601a      	str	r2, [r3, #0]
		}
		if (flagMenu == MENU_DATE_LEVEL
 8001bda:	4b3e      	ldr	r3, [pc, #248]	; (8001cd4 <menu+0x350>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2b05      	cmp	r3, #5
 8001be0:	d004      	beq.n	8001bec <menu+0x268>
				|| flagMenu == MENU_DATE_MONTH_SECOND_DIGIT) {
 8001be2:	4b3c      	ldr	r3, [pc, #240]	; (8001cd4 <menu+0x350>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2b06      	cmp	r3, #6
 8001be8:	f040 815b 	bne.w	8001ea2 <menu+0x51e>
			flagMenu = MENU_DATE_DAY_FIRST_DIGIT;
 8001bec:	4b39      	ldr	r3, [pc, #228]	; (8001cd4 <menu+0x350>)
 8001bee:	2207      	movs	r2, #7
 8001bf0:	601a      	str	r2, [r3, #0]
		}
		break;
 8001bf2:	e156      	b.n	8001ea2 <menu+0x51e>

	case IR_CODE_1:
		// COLOR
		colorMenu(BLUE);
 8001bf4:	4b39      	ldr	r3, [pc, #228]	; (8001cdc <menu+0x358>)
 8001bf6:	781a      	ldrb	r2, [r3, #0]
 8001bf8:	7859      	ldrb	r1, [r3, #1]
 8001bfa:	0209      	lsls	r1, r1, #8
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	789b      	ldrb	r3, [r3, #2]
 8001c00:	041b      	lsls	r3, r3, #16
 8001c02:	431a      	orrs	r2, r3
 8001c04:	2300      	movs	r3, #0
 8001c06:	f362 0317 	bfi	r3, r2, #0, #24
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff fd8e 	bl	800172c <colorMenu>

		// FUNCTIONS MUST BE IN THIS ORDER

		// SECOND DIGIT_HOUR
		secondDigitHour(1);
 8001c10:	2001      	movs	r0, #1
 8001c12:	f7ff fdb9 	bl	8001788 <secondDigitHour>

		// FIRST DIGIT HOUR

		firstDigitHour(10);
 8001c16:	200a      	movs	r0, #10
 8001c18:	f7ff fd9c 	bl	8001754 <firstDigitHour>

		// SECOND DIGIT MINUTE
		secondDigitMinute(1);
 8001c1c:	2001      	movs	r0, #1
 8001c1e:	f7ff fdf9 	bl	8001814 <secondDigitMinute>

		// FIRST DIGIT MINUTE
		firstDigitMinute(10);
 8001c22:	200a      	movs	r0, #10
 8001c24:	f7ff fddc 	bl	80017e0 <firstDigitMinute>

		// SECOND DIGIT MONTH
		secondDigitMonth(1);
 8001c28:	2001      	movs	r0, #1
 8001c2a:	f7ff fe39 	bl	80018a0 <secondDigitMonth>
		// FIRST DIGIT MONTH
		firstDigitMonth(10);
 8001c2e:	200a      	movs	r0, #10
 8001c30:	f7ff fe1c 	bl	800186c <firstDigitMonth>
		// SECOND DIGIT DAY
		secondDigitDay(1);
 8001c34:	2001      	movs	r0, #1
 8001c36:	f7ff fe79 	bl	800192c <secondDigitDay>
		// FIRST DIGIT DAY
		firstDigitDay(10);
 8001c3a:	200a      	movs	r0, #10
 8001c3c:	f7ff fe5c 	bl	80018f8 <firstDigitDay>

		break;
 8001c40:	e130      	b.n	8001ea4 <menu+0x520>

	case IR_CODE_2:
		//COLOR
		colorMenu(RED);
 8001c42:	4b27      	ldr	r3, [pc, #156]	; (8001ce0 <menu+0x35c>)
 8001c44:	781a      	ldrb	r2, [r3, #0]
 8001c46:	7859      	ldrb	r1, [r3, #1]
 8001c48:	0209      	lsls	r1, r1, #8
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	789b      	ldrb	r3, [r3, #2]
 8001c4e:	041b      	lsls	r3, r3, #16
 8001c50:	431a      	orrs	r2, r3
 8001c52:	2300      	movs	r3, #0
 8001c54:	f362 0317 	bfi	r3, r2, #0, #24
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff fd67 	bl	800172c <colorMenu>

		// FUNCTIONS MUST BE IN THIS ORDER

		// SECOND DIGIT_HOUR
		secondDigitHour(2);
 8001c5e:	2002      	movs	r0, #2
 8001c60:	f7ff fd92 	bl	8001788 <secondDigitHour>

		// FIRST DIGIT HOUR

		firstDigitHour(20);
 8001c64:	2014      	movs	r0, #20
 8001c66:	f7ff fd75 	bl	8001754 <firstDigitHour>

		// SECOND DIGIT MINUTE
		secondDigitMinute(2);
 8001c6a:	2002      	movs	r0, #2
 8001c6c:	f7ff fdd2 	bl	8001814 <secondDigitMinute>

		// FIRST DIGIT MINUTE
		firstDigitMinute(20);
 8001c70:	2014      	movs	r0, #20
 8001c72:	f7ff fdb5 	bl	80017e0 <firstDigitMinute>

		// SECOND DIGIT MONTH
		secondDigitMonth(2);
 8001c76:	2002      	movs	r0, #2
 8001c78:	f7ff fe12 	bl	80018a0 <secondDigitMonth>
		// FIRST DIGIT MONTH
		// NULL
		// SECOND DIGIT DAY
		secondDigitDay(2);
 8001c7c:	2002      	movs	r0, #2
 8001c7e:	f7ff fe55 	bl	800192c <secondDigitDay>
		// FIRST DIGIT DAY
		firstDigitDay(20);
 8001c82:	2014      	movs	r0, #20
 8001c84:	f7ff fe38 	bl	80018f8 <firstDigitDay>

		break;
 8001c88:	e10c      	b.n	8001ea4 <menu+0x520>

	case IR_CODE_3:
		// COLOR
		colorMenu(GREEN);
 8001c8a:	4b16      	ldr	r3, [pc, #88]	; (8001ce4 <menu+0x360>)
 8001c8c:	781a      	ldrb	r2, [r3, #0]
 8001c8e:	7859      	ldrb	r1, [r3, #1]
 8001c90:	0209      	lsls	r1, r1, #8
 8001c92:	430a      	orrs	r2, r1
 8001c94:	789b      	ldrb	r3, [r3, #2]
 8001c96:	041b      	lsls	r3, r3, #16
 8001c98:	431a      	orrs	r2, r3
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	f362 0317 	bfi	r3, r2, #0, #24
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff fd43 	bl	800172c <colorMenu>

		// FUNCTIONS MUST BE IN THIS ORDER

		// SECOND DIGIT_HOUR
		secondDigitHour(3);
 8001ca6:	2003      	movs	r0, #3
 8001ca8:	f7ff fd6e 	bl	8001788 <secondDigitHour>
		// FIRST DIGIT HOUR

		// NULL

		// SECOND DIGIT MINUTE
		secondDigitMinute(3);
 8001cac:	2003      	movs	r0, #3
 8001cae:	f7ff fdb1 	bl	8001814 <secondDigitMinute>

		// FIRST DIGIT MINUTE
		firstDigitMinute(30);
 8001cb2:	201e      	movs	r0, #30
 8001cb4:	f7ff fd94 	bl	80017e0 <firstDigitMinute>

		// SECOND DIGIT MONTH
		secondDigitMonth(3);
 8001cb8:	2003      	movs	r0, #3
 8001cba:	f7ff fdf1 	bl	80018a0 <secondDigitMonth>
		// FIRST DIGIT MONTH
		// NULL
		// SECOND DIGIT DAY
		secondDigitDay(3);
 8001cbe:	2003      	movs	r0, #3
 8001cc0:	f7ff fe34 	bl	800192c <secondDigitDay>
		// FIRST DIGIT DAY
		firstDigitDay(30);
 8001cc4:	201e      	movs	r0, #30
 8001cc6:	f7ff fe17 	bl	80018f8 <firstDigitDay>

		break;
 8001cca:	e0eb      	b.n	8001ea4 <menu+0x520>
 8001ccc:	0800d420 	.word	0x0800d420
 8001cd0:	200008f0 	.word	0x200008f0
 8001cd4:	20000298 	.word	0x20000298
 8001cd8:	20000294 	.word	0x20000294
 8001cdc:	20000078 	.word	0x20000078
 8001ce0:	20000070 	.word	0x20000070
 8001ce4:	20000074 	.word	0x20000074

	case IR_CODE_4:

		//COLOR
		colorMenu(YELLOW);
 8001ce8:	4b70      	ldr	r3, [pc, #448]	; (8001eac <menu+0x528>)
 8001cea:	781a      	ldrb	r2, [r3, #0]
 8001cec:	7859      	ldrb	r1, [r3, #1]
 8001cee:	0209      	lsls	r1, r1, #8
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	789b      	ldrb	r3, [r3, #2]
 8001cf4:	041b      	lsls	r3, r3, #16
 8001cf6:	431a      	orrs	r2, r3
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	f362 0317 	bfi	r3, r2, #0, #24
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7ff fd14 	bl	800172c <colorMenu>

		// FUNCTIONS MUST BE IN THIS ORDER

		// SECOND DIGIT_HOUR
		secondDigitHour(4);
 8001d04:	2004      	movs	r0, #4
 8001d06:	f7ff fd3f 	bl	8001788 <secondDigitHour>
		// FIRST DIGIT HOUR

		// NULL

		// SECOND DIGIT MINUTE
		secondDigitMinute(4);
 8001d0a:	2004      	movs	r0, #4
 8001d0c:	f7ff fd82 	bl	8001814 <secondDigitMinute>

		// FIRST DIGIT MINUTE
		firstDigitMinute(40);
 8001d10:	2028      	movs	r0, #40	; 0x28
 8001d12:	f7ff fd65 	bl	80017e0 <firstDigitMinute>

		// SECOND DIGIT MONTH
		secondDigitMonth(4);
 8001d16:	2004      	movs	r0, #4
 8001d18:	f7ff fdc2 	bl	80018a0 <secondDigitMonth>
		// FIRST DIGIT MONTH
		// NULL
		// SECOND DIGIT DAY
		secondDigitDay(4);
 8001d1c:	2004      	movs	r0, #4
 8001d1e:	f7ff fe05 	bl	800192c <secondDigitDay>
		// FIRST DIGIT DAY
		// NULL

		break;
 8001d22:	e0bf      	b.n	8001ea4 <menu+0x520>

	case IR_CODE_5:
		//COLOR
		colorMenu(PINK);
 8001d24:	4b62      	ldr	r3, [pc, #392]	; (8001eb0 <menu+0x52c>)
 8001d26:	781a      	ldrb	r2, [r3, #0]
 8001d28:	7859      	ldrb	r1, [r3, #1]
 8001d2a:	0209      	lsls	r1, r1, #8
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	789b      	ldrb	r3, [r3, #2]
 8001d30:	041b      	lsls	r3, r3, #16
 8001d32:	431a      	orrs	r2, r3
 8001d34:	2300      	movs	r3, #0
 8001d36:	f362 0317 	bfi	r3, r2, #0, #24
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff fcf6 	bl	800172c <colorMenu>

		// FUNCTIONS MUST BE IN THIS ORDER

		// SECOND DIGIT_HOUR
		secondDigitHour(5);
 8001d40:	2005      	movs	r0, #5
 8001d42:	f7ff fd21 	bl	8001788 <secondDigitHour>
		// FIRST DIGIT HOUR

		// NULL

		// SECOND DIGIT MINUTE
		secondDigitMinute(5);
 8001d46:	2005      	movs	r0, #5
 8001d48:	f7ff fd64 	bl	8001814 <secondDigitMinute>

		// FIRST DIGIT MINUTE
		firstDigitMinute(50);
 8001d4c:	2032      	movs	r0, #50	; 0x32
 8001d4e:	f7ff fd47 	bl	80017e0 <firstDigitMinute>

		// SECOND DIGIT MONTH
		secondDigitMonth(5);
 8001d52:	2005      	movs	r0, #5
 8001d54:	f7ff fda4 	bl	80018a0 <secondDigitMonth>
		// FIRST DIGIT MONTH
		// NULL
		// SECOND DIGIT DAY
		secondDigitDay(5);
 8001d58:	2005      	movs	r0, #5
 8001d5a:	f7ff fde7 	bl	800192c <secondDigitDay>
		// FIRST DIGIT DAY
		// NULL

		break;
 8001d5e:	e0a1      	b.n	8001ea4 <menu+0x520>
		//COLOR

		// FUNCTIONS MUST BE IN THIS ORDER

		// SECOND DIGIT_HOUR
		secondDigitHour(6);
 8001d60:	2006      	movs	r0, #6
 8001d62:	f7ff fd11 	bl	8001788 <secondDigitHour>
		// FIRST DIGIT HOUR

		// NULL

		// SECOND DIGIT MINUTE
		secondDigitMinute(6);
 8001d66:	2006      	movs	r0, #6
 8001d68:	f7ff fd54 	bl	8001814 <secondDigitMinute>
		// FIRST DIGIT MINUTE

		// NULL

		// SECOND DIGIT MONTH
		secondDigitMonth(6);
 8001d6c:	2006      	movs	r0, #6
 8001d6e:	f7ff fd97 	bl	80018a0 <secondDigitMonth>
		// FIRST DIGIT MONTH
		// NULL
		// SECOND DIGIT DAY
		secondDigitDay(6);
 8001d72:	2006      	movs	r0, #6
 8001d74:	f7ff fdda 	bl	800192c <secondDigitDay>
		// FIRST DIGIT DAY
		// NULL

		break;
 8001d78:	e094      	b.n	8001ea4 <menu+0x520>
		//COLOR

		// FUNCTIONS MUST BE IN THIS ORDER

		// SECOND DIGIT_HOUR
		secondDigitHour(7);
 8001d7a:	2007      	movs	r0, #7
 8001d7c:	f7ff fd04 	bl	8001788 <secondDigitHour>
		// FIRST DIGIT HOUR

		// NULL

		// SECOND DIGIT MINUTE
		secondDigitMinute(7);
 8001d80:	2007      	movs	r0, #7
 8001d82:	f7ff fd47 	bl	8001814 <secondDigitMinute>
		// FIRST DIGIT MINUTE

		// NULL

		// SECOND DIGIT MONTH
		secondDigitMonth(7);
 8001d86:	2007      	movs	r0, #7
 8001d88:	f7ff fd8a 	bl	80018a0 <secondDigitMonth>
		// FIRST DIGIT MONTH
		// NULL
		// SECOND DIGIT DAY
		secondDigitDay(7);
 8001d8c:	2007      	movs	r0, #7
 8001d8e:	f7ff fdcd 	bl	800192c <secondDigitDay>
		// FIRST DIGIT DAY
		// NULL

		break;
 8001d92:	e087      	b.n	8001ea4 <menu+0x520>
		//COLOR

		// FUNCTIONS MUST BE IN THIS ORDER

		// SECOND DIGIT_HOUR
		secondDigitHour(8);
 8001d94:	2008      	movs	r0, #8
 8001d96:	f7ff fcf7 	bl	8001788 <secondDigitHour>
		// FIRST DIGIT HOUR

		// NULL

		// SECOND DIGIT MINUTE
		secondDigitMinute(8);
 8001d9a:	2008      	movs	r0, #8
 8001d9c:	f7ff fd3a 	bl	8001814 <secondDigitMinute>
		// FIRST DIGIT MINUTE

		// NULL

		// SECOND DIGIT MONTH
		secondDigitMonth(8);
 8001da0:	2008      	movs	r0, #8
 8001da2:	f7ff fd7d 	bl	80018a0 <secondDigitMonth>
		// FIRST DIGIT MONTH
		// NULL
		// SECOND DIGIT DAY
		secondDigitDay(8);
 8001da6:	2008      	movs	r0, #8
 8001da8:	f7ff fdc0 	bl	800192c <secondDigitDay>
		// FIRST DIGIT DAY
		// NULL

		break;
 8001dac:	e07a      	b.n	8001ea4 <menu+0x520>
		//COLOR

		// FUNCTIONS MUST BE IN THIS ORDER

		// SECOND DIGIT_HOUR
		secondDigitHour(9);
 8001dae:	2009      	movs	r0, #9
 8001db0:	f7ff fcea 	bl	8001788 <secondDigitHour>
		// FIRST DIGIT HOUR

		// NULL

		// SECOND DIGIT MINUTE
		secondDigitMinute(9);
 8001db4:	2009      	movs	r0, #9
 8001db6:	f7ff fd2d 	bl	8001814 <secondDigitMinute>
		// FIRST DIGIT MINUTE

		// NULL

		// SECOND DIGIT MONTH
		secondDigitMonth(9);
 8001dba:	2009      	movs	r0, #9
 8001dbc:	f7ff fd70 	bl	80018a0 <secondDigitMonth>
		// FIRST DIGIT MONTH
		// NULL
		// SECOND DIGIT DAY
		secondDigitDay(9);
 8001dc0:	2009      	movs	r0, #9
 8001dc2:	f7ff fdb3 	bl	800192c <secondDigitDay>
		// FIRST DIGIT DAY
		// NULL

		break;
 8001dc6:	e06d      	b.n	8001ea4 <menu+0x520>

		// NULL

		// SECOND DIGIT_HOUR

		if (flagMenu == MENU_TIME_HOUR_SECOND_DIGIT) {
 8001dc8:	4b3a      	ldr	r3, [pc, #232]	; (8001eb4 <menu+0x530>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2b03      	cmp	r3, #3
 8001dce:	d112      	bne.n	8001df6 <menu+0x472>

			if (isInRangeHours(hoursChange)) {
 8001dd0:	4b39      	ldr	r3, [pc, #228]	; (8001eb8 <menu+0x534>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff fc65 	bl	80016a4 <isInRangeHours>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d002      	beq.n	8001de6 <menu+0x462>
				hoursChange = 0;
 8001de0:	4b35      	ldr	r3, [pc, #212]	; (8001eb8 <menu+0x534>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	701a      	strb	r2, [r3, #0]
			}

			setHours(hoursChange);
 8001de6:	4b34      	ldr	r3, [pc, #208]	; (8001eb8 <menu+0x534>)
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f000 fd56 	bl	800289c <setHours>
			flagMenu = MENU_TIME_LEVEL;
 8001df0:	4b30      	ldr	r3, [pc, #192]	; (8001eb4 <menu+0x530>)
 8001df2:	2201      	movs	r2, #1
 8001df4:	601a      	str	r2, [r3, #0]
		}

		// FIRST DIGIT HOUR

		firstDigitHour(0);
 8001df6:	2000      	movs	r0, #0
 8001df8:	f7ff fcac 	bl	8001754 <firstDigitHour>

		// SECOND DIGIT MINUTE
		if (flagMenu == MENU_TIME_MINUTE_SECOND_DIGIT) {
 8001dfc:	4b2d      	ldr	r3, [pc, #180]	; (8001eb4 <menu+0x530>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2b04      	cmp	r3, #4
 8001e02:	d112      	bne.n	8001e2a <menu+0x4a6>

			if (isInRangeMinute(minutesChange)) {
 8001e04:	4b2d      	ldr	r3, [pc, #180]	; (8001ebc <menu+0x538>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff fc5c 	bl	80016c6 <isInRangeMinute>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d002      	beq.n	8001e1a <menu+0x496>
				minutesChange = 0;
 8001e14:	4b29      	ldr	r3, [pc, #164]	; (8001ebc <menu+0x538>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	701a      	strb	r2, [r3, #0]
			}
			setMinutes(minutesChange);
 8001e1a:	4b28      	ldr	r3, [pc, #160]	; (8001ebc <menu+0x538>)
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f000 fd0e 	bl	8002840 <setMinutes>
			flagMenu = MENU_TIME_MINUTE_LEVEL;
 8001e24:	4b23      	ldr	r3, [pc, #140]	; (8001eb4 <menu+0x530>)
 8001e26:	2202      	movs	r2, #2
 8001e28:	601a      	str	r2, [r3, #0]
		}

		// FIRST DIGIT MINUTE

		firstDigitMinute(0);
 8001e2a:	2000      	movs	r0, #0
 8001e2c:	f7ff fcd8 	bl	80017e0 <firstDigitMinute>

		// SECOND DIGIT MONTH

		if (flagMenu == MENU_DATE_MONTH_SECOND_DIGIT) {
 8001e30:	4b20      	ldr	r3, [pc, #128]	; (8001eb4 <menu+0x530>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2b06      	cmp	r3, #6
 8001e36:	d112      	bne.n	8001e5e <menu+0x4da>

			if (isInRangeMonth(monthChange)) {
 8001e38:	4b21      	ldr	r3, [pc, #132]	; (8001ec0 <menu+0x53c>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff fc53 	bl	80016e8 <isInRangeMonth>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d002      	beq.n	8001e4e <menu+0x4ca>
				monthChange = 0;
 8001e48:	4b1d      	ldr	r3, [pc, #116]	; (8001ec0 <menu+0x53c>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	701a      	strb	r2, [r3, #0]
			}

			setMonth(monthChange);
 8001e4e:	4b1c      	ldr	r3, [pc, #112]	; (8001ec0 <menu+0x53c>)
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f000 fd54 	bl	8002900 <setMonth>
			flagMenu = MENU_DATE_LEVEL;
 8001e58:	4b16      	ldr	r3, [pc, #88]	; (8001eb4 <menu+0x530>)
 8001e5a:	2205      	movs	r2, #5
 8001e5c:	601a      	str	r2, [r3, #0]
		}

		// FIRST DIGIT MONTH

		firstDigitMonth(0);
 8001e5e:	2000      	movs	r0, #0
 8001e60:	f7ff fd04 	bl	800186c <firstDigitMonth>

		// SECOND DIGIT DAY
		if (flagMenu == MENU_DATE_DAY_SECOND_DIGIT) {
 8001e64:	4b13      	ldr	r3, [pc, #76]	; (8001eb4 <menu+0x530>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2b08      	cmp	r3, #8
 8001e6a:	d112      	bne.n	8001e92 <menu+0x50e>

			if (isInRangeDay(dayChange)) {
 8001e6c:	4b15      	ldr	r3, [pc, #84]	; (8001ec4 <menu+0x540>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff fc4a 	bl	800170a <isInRangeDay>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d002      	beq.n	8001e82 <menu+0x4fe>
				dayChange = 0;
 8001e7c:	4b11      	ldr	r3, [pc, #68]	; (8001ec4 <menu+0x540>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	701a      	strb	r2, [r3, #0]
			}
			setDay(dayChange);
 8001e82:	4b10      	ldr	r3, [pc, #64]	; (8001ec4 <menu+0x540>)
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f000 fd70 	bl	800296c <setDay>
			flagMenu = MENU_DATE_DAY_FIRST_DIGIT;
 8001e8c:	4b09      	ldr	r3, [pc, #36]	; (8001eb4 <menu+0x530>)
 8001e8e:	2207      	movs	r2, #7
 8001e90:	601a      	str	r2, [r3, #0]
		}

		// FIRST DIGIT DAY

		firstDigitDay(0);
 8001e92:	2000      	movs	r0, #0
 8001e94:	f7ff fd30 	bl	80018f8 <firstDigitDay>

		break;
 8001e98:	e004      	b.n	8001ea4 <menu+0x520>
		break;
 8001e9a:	bf00      	nop
 8001e9c:	e002      	b.n	8001ea4 <menu+0x520>
		break;
 8001e9e:	bf00      	nop
 8001ea0:	e000      	b.n	8001ea4 <menu+0x520>
		break;
 8001ea2:	bf00      	nop

	}

}
 8001ea4:	bf00      	nop
 8001ea6:	3720      	adds	r7, #32
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	2000007c 	.word	0x2000007c
 8001eb0:	20000080 	.word	0x20000080
 8001eb4:	20000298 	.word	0x20000298
 8001eb8:	2000029d 	.word	0x2000029d
 8001ebc:	2000029c 	.word	0x2000029c
 8001ec0:	2000029f 	.word	0x2000029f
 8001ec4:	2000029e 	.word	0x2000029e

08001ec8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b098      	sub	sp, #96	; 0x60
 8001ecc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001ece:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	605a      	str	r2, [r3, #4]
 8001ed8:	609a      	str	r2, [r3, #8]
 8001eda:	60da      	str	r2, [r3, #12]
 8001edc:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001ede:	2300      	movs	r3, #0
 8001ee0:	64bb      	str	r3, [r7, #72]	; 0x48
  RTC_AlarmTypeDef sAlarm = {0};
 8001ee2:	f107 031c 	add.w	r3, r7, #28
 8001ee6:	222c      	movs	r2, #44	; 0x2c
 8001ee8:	2100      	movs	r1, #0
 8001eea:	4618      	mov	r0, r3
 8001eec:	f008 fb8e 	bl	800a60c <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001ef0:	4b6e      	ldr	r3, [pc, #440]	; (80020ac <MX_RTC_Init+0x1e4>)
 8001ef2:	4a6f      	ldr	r2, [pc, #444]	; (80020b0 <MX_RTC_Init+0x1e8>)
 8001ef4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001ef6:	4b6d      	ldr	r3, [pc, #436]	; (80020ac <MX_RTC_Init+0x1e4>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001efc:	4b6b      	ldr	r3, [pc, #428]	; (80020ac <MX_RTC_Init+0x1e4>)
 8001efe:	227f      	movs	r2, #127	; 0x7f
 8001f00:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001f02:	4b6a      	ldr	r3, [pc, #424]	; (80020ac <MX_RTC_Init+0x1e4>)
 8001f04:	22ff      	movs	r2, #255	; 0xff
 8001f06:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001f08:	4b68      	ldr	r3, [pc, #416]	; (80020ac <MX_RTC_Init+0x1e4>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001f0e:	4b67      	ldr	r3, [pc, #412]	; (80020ac <MX_RTC_Init+0x1e4>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001f14:	4b65      	ldr	r3, [pc, #404]	; (80020ac <MX_RTC_Init+0x1e4>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001f1a:	4b64      	ldr	r3, [pc, #400]	; (80020ac <MX_RTC_Init+0x1e4>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001f20:	4862      	ldr	r0, [pc, #392]	; (80020ac <MX_RTC_Init+0x1e4>)
 8001f22:	f005 f805 	bl	8006f30 <HAL_RTC_Init>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <MX_RTC_Init+0x68>
  {
    Error_Handler();
 8001f2c:	f7ff fba8 	bl	8001680 <Error_Handler>

  /* USER CODE BEGIN Check_RTC_BKUP */

	// After reset- download backup:

  	RTC_TimeTypeDef time = { 0 };
 8001f30:	f107 0308 	add.w	r3, r7, #8
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	605a      	str	r2, [r3, #4]
 8001f3a:	609a      	str	r2, [r3, #8]
 8001f3c:	60da      	str	r2, [r3, #12]
 8001f3e:	611a      	str	r2, [r3, #16]
  	RTC_DateTypeDef date = { 0 };
 8001f40:	2300      	movs	r3, #0
 8001f42:	607b      	str	r3, [r7, #4]

  	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8001f44:	f107 0308 	add.w	r3, r7, #8
 8001f48:	2200      	movs	r2, #0
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	4857      	ldr	r0, [pc, #348]	; (80020ac <MX_RTC_Init+0x1e4>)
 8001f4e:	f005 f907 	bl	8007160 <HAL_RTC_GetTime>
  	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8001f52:	1d3b      	adds	r3, r7, #4
 8001f54:	2200      	movs	r2, #0
 8001f56:	4619      	mov	r1, r3
 8001f58:	4854      	ldr	r0, [pc, #336]	; (80020ac <MX_RTC_Init+0x1e4>)
 8001f5a:	f005 f9e4 	bl	8007326 <HAL_RTC_GetDate>

  	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR5, ((date.Month << 8) | (date.Year)));
 8001f5e:	797b      	ldrb	r3, [r7, #5]
 8001f60:	021b      	lsls	r3, r3, #8
 8001f62:	79fa      	ldrb	r2, [r7, #7]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	461a      	mov	r2, r3
 8001f68:	2105      	movs	r1, #5
 8001f6a:	4850      	ldr	r0, [pc, #320]	; (80020ac <MX_RTC_Init+0x1e4>)
 8001f6c:	f005 fc86 	bl	800787c <HAL_RTCEx_BKUPWrite>
  	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR6, date.Date);
 8001f70:	79bb      	ldrb	r3, [r7, #6]
 8001f72:	461a      	mov	r2, r3
 8001f74:	2106      	movs	r1, #6
 8001f76:	484d      	ldr	r0, [pc, #308]	; (80020ac <MX_RTC_Init+0x1e4>)
 8001f78:	f005 fc80 	bl	800787c <HAL_RTCEx_BKUPWrite>
  	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR7, ((time.Hours << 8) | (time.Minutes)));
 8001f7c:	7a3b      	ldrb	r3, [r7, #8]
 8001f7e:	021b      	lsls	r3, r3, #8
 8001f80:	7a7a      	ldrb	r2, [r7, #9]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	461a      	mov	r2, r3
 8001f86:	2107      	movs	r1, #7
 8001f88:	4848      	ldr	r0, [pc, #288]	; (80020ac <MX_RTC_Init+0x1e4>)
 8001f8a:	f005 fc77 	bl	800787c <HAL_RTCEx_BKUPWrite>
  	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR8, time.Seconds);
 8001f8e:	7abb      	ldrb	r3, [r7, #10]
 8001f90:	461a      	mov	r2, r3
 8001f92:	2108      	movs	r1, #8
 8001f94:	4845      	ldr	r0, [pc, #276]	; (80020ac <MX_RTC_Init+0x1e4>)
 8001f96:	f005 fc71 	bl	800787c <HAL_RTCEx_BKUPWrite>


	sDate.Month = (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR5) >> 8);
 8001f9a:	2105      	movs	r1, #5
 8001f9c:	4843      	ldr	r0, [pc, #268]	; (80020ac <MX_RTC_Init+0x1e4>)
 8001f9e:	f005 fc86 	bl	80078ae <HAL_RTCEx_BKUPRead>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	0a1b      	lsrs	r3, r3, #8
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	sDate.Year = (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR5));
 8001fac:	2105      	movs	r1, #5
 8001fae:	483f      	ldr	r0, [pc, #252]	; (80020ac <MX_RTC_Init+0x1e4>)
 8001fb0:	f005 fc7d 	bl	80078ae <HAL_RTCEx_BKUPRead>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	sDate.Date = (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR6));
 8001fbc:	2106      	movs	r1, #6
 8001fbe:	483b      	ldr	r0, [pc, #236]	; (80020ac <MX_RTC_Init+0x1e4>)
 8001fc0:	f005 fc75 	bl	80078ae <HAL_RTCEx_BKUPRead>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a

	sTime.Hours =(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR7) >> 8);
 8001fcc:	2107      	movs	r1, #7
 8001fce:	4837      	ldr	r0, [pc, #220]	; (80020ac <MX_RTC_Init+0x1e4>)
 8001fd0:	f005 fc6d 	bl	80078ae <HAL_RTCEx_BKUPRead>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	0a1b      	lsrs	r3, r3, #8
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	sTime.Minutes = (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR7));
 8001fde:	2107      	movs	r1, #7
 8001fe0:	4832      	ldr	r0, [pc, #200]	; (80020ac <MX_RTC_Init+0x1e4>)
 8001fe2:	f005 fc64 	bl	80078ae <HAL_RTCEx_BKUPRead>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	sTime.Seconds = (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR8));
 8001fee:	2108      	movs	r1, #8
 8001ff0:	482e      	ldr	r0, [pc, #184]	; (80020ac <MX_RTC_Init+0x1e4>)
 8001ff2:	f005 fc5c 	bl	80078ae <HAL_RTCEx_BKUPRead>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001ffe:	2300      	movs	r3, #0
 8002000:	65bb      	str	r3, [r7, #88]	; 0x58
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002002:	2300      	movs	r3, #0
 8002004:	65fb      	str	r3, [r7, #92]	; 0x5c

	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) {
 8002006:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800200a:	2200      	movs	r2, #0
 800200c:	4619      	mov	r1, r3
 800200e:	4827      	ldr	r0, [pc, #156]	; (80020ac <MX_RTC_Init+0x1e4>)
 8002010:	f005 f809 	bl	8007026 <HAL_RTC_SetTime>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <MX_RTC_Init+0x156>
		Error_Handler();
 800201a:	f7ff fb31 	bl	8001680 <Error_Handler>
	}

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) {
 800201e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002022:	2200      	movs	r2, #0
 8002024:	4619      	mov	r1, r3
 8002026:	4821      	ldr	r0, [pc, #132]	; (80020ac <MX_RTC_Init+0x1e4>)
 8002028:	f005 f8f6 	bl	8007218 <HAL_RTC_SetDate>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <MX_RTC_Init+0x16e>
		Error_Handler();
 8002032:	f7ff fb25 	bl	8001680 <Error_Handler>
	}

	/** Enable the Alarm A
	 */
	sAlarm.AlarmTime.Hours = 17;
 8002036:	2311      	movs	r3, #17
 8002038:	773b      	strb	r3, [r7, #28]
	sAlarm.AlarmTime.Minutes = 1;
 800203a:	2301      	movs	r3, #1
 800203c:	777b      	strb	r3, [r7, #29]
	sAlarm.AlarmTime.Seconds = 0;
 800203e:	2300      	movs	r3, #0
 8002040:	77bb      	strb	r3, [r7, #30]
	sAlarm.AlarmTime.SubSeconds = 0;
 8002042:	2300      	movs	r3, #0
 8002044:	623b      	str	r3, [r7, #32]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002046:	2300      	movs	r3, #0
 8002048:	62bb      	str	r3, [r7, #40]	; 0x28
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800204a:	2300      	movs	r3, #0
 800204c:	62fb      	str	r3, [r7, #44]	; 0x2c
	sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;
 800204e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002052:	633b      	str	r3, [r7, #48]	; 0x30
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002054:	2300      	movs	r3, #0
 8002056:	63bb      	str	r3, [r7, #56]	; 0x38
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002058:	2300      	movs	r3, #0
 800205a:	63fb      	str	r3, [r7, #60]	; 0x3c
	sAlarm.AlarmDateWeekDay = 1;
 800205c:	2301      	movs	r3, #1
 800205e:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	sAlarm.Alarm = RTC_ALARM_A;
 8002062:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002066:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK) {
 8002068:	f107 031c 	add.w	r3, r7, #28
 800206c:	2200      	movs	r2, #0
 800206e:	4619      	mov	r1, r3
 8002070:	480e      	ldr	r0, [pc, #56]	; (80020ac <MX_RTC_Init+0x1e4>)
 8002072:	f005 f9a5 	bl	80073c0 <HAL_RTC_SetAlarm_IT>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <MX_RTC_Init+0x1b8>
		Error_Handler();
 800207c:	f7ff fb00 	bl	8001680 <Error_Handler>
	}

	/** Enable the Alarm B
	 */
	sAlarm.AlarmTime.Minutes = 16;
 8002080:	2310      	movs	r3, #16
 8002082:	777b      	strb	r3, [r7, #29]
	sAlarm.AlarmTime.Seconds = 15;
 8002084:	230f      	movs	r3, #15
 8002086:	77bb      	strb	r3, [r7, #30]
	sAlarm.Alarm = RTC_ALARM_B;
 8002088:	f44f 7300 	mov.w	r3, #512	; 0x200
 800208c:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK) {
 800208e:	f107 031c 	add.w	r3, r7, #28
 8002092:	2200      	movs	r2, #0
 8002094:	4619      	mov	r1, r3
 8002096:	4805      	ldr	r0, [pc, #20]	; (80020ac <MX_RTC_Init+0x1e4>)
 8002098:	f005 f992 	bl	80073c0 <HAL_RTC_SetAlarm_IT>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <MX_RTC_Init+0x1de>
		Error_Handler();
 80020a2:	f7ff faed 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80020a6:	3760      	adds	r7, #96	; 0x60
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	200008f0 	.word	0x200008f0
 80020b0:	40002800 	.word	0x40002800

080020b4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b0a4      	sub	sp, #144	; 0x90
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020bc:	f107 0308 	add.w	r3, r7, #8
 80020c0:	2288      	movs	r2, #136	; 0x88
 80020c2:	2100      	movs	r1, #0
 80020c4:	4618      	mov	r0, r3
 80020c6:	f008 faa1 	bl	800a60c <memset>
  if(rtcHandle->Instance==RTC)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a10      	ldr	r2, [pc, #64]	; (8002110 <HAL_RTC_MspInit+0x5c>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d118      	bne.n	8002106 <HAL_RTC_MspInit+0x52>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80020d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020d8:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80020da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020e2:	f107 0308 	add.w	r3, r7, #8
 80020e6:	4618      	mov	r0, r3
 80020e8:	f004 fa56 	bl	8006598 <HAL_RCCEx_PeriphCLKConfig>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80020f2:	f7ff fac5 	bl	8001680 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80020f6:	4b07      	ldr	r3, [pc, #28]	; (8002114 <HAL_RTC_MspInit+0x60>)
 80020f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020fc:	4a05      	ldr	r2, [pc, #20]	; (8002114 <HAL_RTC_MspInit+0x60>)
 80020fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002102:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002106:	bf00      	nop
 8002108:	3790      	adds	r7, #144	; 0x90
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	40002800 	.word	0x40002800
 8002114:	40021000 	.word	0x40021000

08002118 <TurnOnStanbyMode>:
}

/* USER CODE BEGIN 1 */


void TurnOnStanbyMode(uint8_t hour, uint8_t minute, uint8_t second){
 8002118:	b580      	push	{r7, lr}
 800211a:	b088      	sub	sp, #32
 800211c:	af00      	add	r7, sp, #0
 800211e:	4603      	mov	r3, r0
 8002120:	71fb      	strb	r3, [r7, #7]
 8002122:	460b      	mov	r3, r1
 8002124:	71bb      	strb	r3, [r7, #6]
 8002126:	4613      	mov	r3, r2
 8002128:	717b      	strb	r3, [r7, #5]
	RTC_TimeTypeDef time = { 0 };
 800212a:	f107 030c 	add.w	r3, r7, #12
 800212e:	2200      	movs	r2, #0
 8002130:	601a      	str	r2, [r3, #0]
 8002132:	605a      	str	r2, [r3, #4]
 8002134:	609a      	str	r2, [r3, #8]
 8002136:	60da      	str	r2, [r3, #12]
 8002138:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef date = { 0 };
 800213a:	2300      	movs	r3, #0
 800213c:	60bb      	str	r3, [r7, #8]


	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 800213e:	f107 030c 	add.w	r3, r7, #12
 8002142:	2200      	movs	r2, #0
 8002144:	4619      	mov	r1, r3
 8002146:	480f      	ldr	r0, [pc, #60]	; (8002184 <TurnOnStanbyMode+0x6c>)
 8002148:	f005 f80a 	bl	8007160 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 800214c:	f107 0308 	add.w	r3, r7, #8
 8002150:	2200      	movs	r2, #0
 8002152:	4619      	mov	r1, r3
 8002154:	480b      	ldr	r0, [pc, #44]	; (8002184 <TurnOnStanbyMode+0x6c>)
 8002156:	f005 f8e6 	bl	8007326 <HAL_RTC_GetDate>



	if(time.Hours==hour && time.Minutes==minute && time.Seconds==second){
 800215a:	7b3b      	ldrb	r3, [r7, #12]
 800215c:	79fa      	ldrb	r2, [r7, #7]
 800215e:	429a      	cmp	r2, r3
 8002160:	d10b      	bne.n	800217a <TurnOnStanbyMode+0x62>
 8002162:	7b7b      	ldrb	r3, [r7, #13]
 8002164:	79ba      	ldrb	r2, [r7, #6]
 8002166:	429a      	cmp	r2, r3
 8002168:	d107      	bne.n	800217a <TurnOnStanbyMode+0x62>
 800216a:	7bbb      	ldrb	r3, [r7, #14]
 800216c:	797a      	ldrb	r2, [r7, #5]
 800216e:	429a      	cmp	r2, r3
 8002170:	d103      	bne.n	800217a <TurnOnStanbyMode+0x62>

		displayStop();
 8002172:	f000 fcf3 	bl	8002b5c <displayStop>
		HAL_PWR_EnterSTANDBYMode();
 8002176:	f003 fba5 	bl	80058c4 <HAL_PWR_EnterSTANDBYMode>





}
 800217a:	bf00      	nop
 800217c:	3720      	adds	r7, #32
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	200008f0 	.word	0x200008f0

08002188 <changeColor>:
 *  FUNCTIONS
 *
 */

// COLORS
void changeColor(struct colorRgb newColor) {
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
	displayStop();
 8002190:	f000 fce4 	bl	8002b5c <displayStop>
	actualColor=newColor;
 8002194:	4b0f      	ldr	r3, [pc, #60]	; (80021d4 <changeColor+0x4c>)
 8002196:	461a      	mov	r2, r3
 8002198:	1d3b      	adds	r3, r7, #4
 800219a:	8819      	ldrh	r1, [r3, #0]
 800219c:	789b      	ldrb	r3, [r3, #2]
 800219e:	8011      	strh	r1, [r2, #0]
 80021a0:	7093      	strb	r3, [r2, #2]
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR2, actualColor.blue);
 80021a2:	4b0c      	ldr	r3, [pc, #48]	; (80021d4 <changeColor+0x4c>)
 80021a4:	785b      	ldrb	r3, [r3, #1]
 80021a6:	461a      	mov	r2, r3
 80021a8:	2102      	movs	r1, #2
 80021aa:	480b      	ldr	r0, [pc, #44]	; (80021d8 <changeColor+0x50>)
 80021ac:	f005 fb66 	bl	800787c <HAL_RTCEx_BKUPWrite>
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR3, actualColor.red);
 80021b0:	4b08      	ldr	r3, [pc, #32]	; (80021d4 <changeColor+0x4c>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	461a      	mov	r2, r3
 80021b6:	2103      	movs	r1, #3
 80021b8:	4807      	ldr	r0, [pc, #28]	; (80021d8 <changeColor+0x50>)
 80021ba:	f005 fb5f 	bl	800787c <HAL_RTCEx_BKUPWrite>
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR4, actualColor.green);
 80021be:	4b05      	ldr	r3, [pc, #20]	; (80021d4 <changeColor+0x4c>)
 80021c0:	789b      	ldrb	r3, [r3, #2]
 80021c2:	461a      	mov	r2, r3
 80021c4:	2104      	movs	r1, #4
 80021c6:	4804      	ldr	r0, [pc, #16]	; (80021d8 <changeColor+0x50>)
 80021c8:	f005 fb58 	bl	800787c <HAL_RTCEx_BKUPWrite>
}
 80021cc:	bf00      	nop
 80021ce:	3708      	adds	r7, #8
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	20000914 	.word	0x20000914
 80021d8:	200008f0 	.word	0x200008f0

080021dc <mixColor>:

void mixColor() {
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
	uint8_t tempColor;

	tempColor = actualColor.blue;
 80021e2:	4b0a      	ldr	r3, [pc, #40]	; (800220c <mixColor+0x30>)
 80021e4:	785b      	ldrb	r3, [r3, #1]
 80021e6:	71fb      	strb	r3, [r7, #7]

	actualColor.blue = actualColor.red;
 80021e8:	4b08      	ldr	r3, [pc, #32]	; (800220c <mixColor+0x30>)
 80021ea:	781a      	ldrb	r2, [r3, #0]
 80021ec:	4b07      	ldr	r3, [pc, #28]	; (800220c <mixColor+0x30>)
 80021ee:	705a      	strb	r2, [r3, #1]
	actualColor.red = actualColor.green;
 80021f0:	4b06      	ldr	r3, [pc, #24]	; (800220c <mixColor+0x30>)
 80021f2:	789a      	ldrb	r2, [r3, #2]
 80021f4:	4b05      	ldr	r3, [pc, #20]	; (800220c <mixColor+0x30>)
 80021f6:	701a      	strb	r2, [r3, #0]
	actualColor.green = tempColor;
 80021f8:	4a04      	ldr	r2, [pc, #16]	; (800220c <mixColor+0x30>)
 80021fa:	79fb      	ldrb	r3, [r7, #7]
 80021fc:	7093      	strb	r3, [r2, #2]
}
 80021fe:	bf00      	nop
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	20000914 	.word	0x20000914

08002210 <backToColorinMemory>:


void backToColorinMemory() {
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
	actualColor.blue=HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR2);
 8002214:	2102      	movs	r1, #2
 8002216:	4819      	ldr	r0, [pc, #100]	; (800227c <backToColorinMemory+0x6c>)
 8002218:	f005 fb49 	bl	80078ae <HAL_RTCEx_BKUPRead>
 800221c:	4603      	mov	r3, r0
 800221e:	b2da      	uxtb	r2, r3
 8002220:	4b17      	ldr	r3, [pc, #92]	; (8002280 <backToColorinMemory+0x70>)
 8002222:	705a      	strb	r2, [r3, #1]
	actualColor.red=HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR3);
 8002224:	2103      	movs	r1, #3
 8002226:	4815      	ldr	r0, [pc, #84]	; (800227c <backToColorinMemory+0x6c>)
 8002228:	f005 fb41 	bl	80078ae <HAL_RTCEx_BKUPRead>
 800222c:	4603      	mov	r3, r0
 800222e:	b2da      	uxtb	r2, r3
 8002230:	4b13      	ldr	r3, [pc, #76]	; (8002280 <backToColorinMemory+0x70>)
 8002232:	701a      	strb	r2, [r3, #0]
	actualColor.green=HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR4);
 8002234:	2104      	movs	r1, #4
 8002236:	4811      	ldr	r0, [pc, #68]	; (800227c <backToColorinMemory+0x6c>)
 8002238:	f005 fb39 	bl	80078ae <HAL_RTCEx_BKUPRead>
 800223c:	4603      	mov	r3, r0
 800223e:	b2da      	uxtb	r2, r3
 8002240:	4b0f      	ldr	r3, [pc, #60]	; (8002280 <backToColorinMemory+0x70>)
 8002242:	709a      	strb	r2, [r3, #2]

	if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR2)==0 && HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR3)==0 && HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR4)==0){
 8002244:	2102      	movs	r1, #2
 8002246:	480d      	ldr	r0, [pc, #52]	; (800227c <backToColorinMemory+0x6c>)
 8002248:	f005 fb31 	bl	80078ae <HAL_RTCEx_BKUPRead>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d111      	bne.n	8002276 <backToColorinMemory+0x66>
 8002252:	2103      	movs	r1, #3
 8002254:	4809      	ldr	r0, [pc, #36]	; (800227c <backToColorinMemory+0x6c>)
 8002256:	f005 fb2a 	bl	80078ae <HAL_RTCEx_BKUPRead>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d10a      	bne.n	8002276 <backToColorinMemory+0x66>
 8002260:	2104      	movs	r1, #4
 8002262:	4806      	ldr	r0, [pc, #24]	; (800227c <backToColorinMemory+0x6c>)
 8002264:	f005 fb23 	bl	80078ae <HAL_RTCEx_BKUPRead>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d103      	bne.n	8002276 <backToColorinMemory+0x66>
		changeColor(RED);
 800226e:	4b05      	ldr	r3, [pc, #20]	; (8002284 <backToColorinMemory+0x74>)
 8002270:	6818      	ldr	r0, [r3, #0]
 8002272:	f7ff ff89 	bl	8002188 <changeColor>
	}

}
 8002276:	bf00      	nop
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	200008f0 	.word	0x200008f0
 8002280:	20000914 	.word	0x20000914
 8002284:	20000070 	.word	0x20000070

08002288 <numberToMatrix>:

// AUXILIARY FUNCTIONS:
uint8_t* numberToMatrix(int number) {
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2b09      	cmp	r3, #9
 8002294:	d82a      	bhi.n	80022ec <numberToMatrix+0x64>
 8002296:	a201      	add	r2, pc, #4	; (adr r2, 800229c <numberToMatrix+0x14>)
 8002298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800229c:	080022c5 	.word	0x080022c5
 80022a0:	080022c9 	.word	0x080022c9
 80022a4:	080022cd 	.word	0x080022cd
 80022a8:	080022d1 	.word	0x080022d1
 80022ac:	080022d5 	.word	0x080022d5
 80022b0:	080022d9 	.word	0x080022d9
 80022b4:	080022dd 	.word	0x080022dd
 80022b8:	080022e1 	.word	0x080022e1
 80022bc:	080022e5 	.word	0x080022e5
 80022c0:	080022e9 	.word	0x080022e9
	switch (number) {
	case 0:
		return zero;
 80022c4:	4b0d      	ldr	r3, [pc, #52]	; (80022fc <numberToMatrix+0x74>)
 80022c6:	e012      	b.n	80022ee <numberToMatrix+0x66>
		break;
	case 1:
		return one;
 80022c8:	4b0d      	ldr	r3, [pc, #52]	; (8002300 <numberToMatrix+0x78>)
 80022ca:	e010      	b.n	80022ee <numberToMatrix+0x66>
		break;
	case 2:
		return two;
 80022cc:	4b0d      	ldr	r3, [pc, #52]	; (8002304 <numberToMatrix+0x7c>)
 80022ce:	e00e      	b.n	80022ee <numberToMatrix+0x66>
		break;
	case 3:
		return three;
 80022d0:	4b0d      	ldr	r3, [pc, #52]	; (8002308 <numberToMatrix+0x80>)
 80022d2:	e00c      	b.n	80022ee <numberToMatrix+0x66>
		break;
	case 4:
		return four;
 80022d4:	4b0d      	ldr	r3, [pc, #52]	; (800230c <numberToMatrix+0x84>)
 80022d6:	e00a      	b.n	80022ee <numberToMatrix+0x66>
		break;
	case 5:
		return five;
 80022d8:	4b0d      	ldr	r3, [pc, #52]	; (8002310 <numberToMatrix+0x88>)
 80022da:	e008      	b.n	80022ee <numberToMatrix+0x66>
		break;
	case 6:
		return six;
 80022dc:	4b0d      	ldr	r3, [pc, #52]	; (8002314 <numberToMatrix+0x8c>)
 80022de:	e006      	b.n	80022ee <numberToMatrix+0x66>
		break;
	case 7:
		return seven;
 80022e0:	4b0d      	ldr	r3, [pc, #52]	; (8002318 <numberToMatrix+0x90>)
 80022e2:	e004      	b.n	80022ee <numberToMatrix+0x66>
		break;
	case 8:
		return eight;
 80022e4:	4b0d      	ldr	r3, [pc, #52]	; (800231c <numberToMatrix+0x94>)
 80022e6:	e002      	b.n	80022ee <numberToMatrix+0x66>
		break;
	case 9:
		return nine;
 80022e8:	4b0d      	ldr	r3, [pc, #52]	; (8002320 <numberToMatrix+0x98>)
 80022ea:	e000      	b.n	80022ee <numberToMatrix+0x66>
		break;
	default:
		return 0;
 80022ec:	2300      	movs	r3, #0
	}

}
 80022ee:	4618      	mov	r0, r3
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	20000004 	.word	0x20000004
 8002300:	20000010 	.word	0x20000010
 8002304:	20000014 	.word	0x20000014
 8002308:	20000020 	.word	0x20000020
 800230c:	2000002c 	.word	0x2000002c
 8002310:	20000034 	.word	0x20000034
 8002314:	20000040 	.word	0x20000040
 8002318:	2000004c 	.word	0x2000004c
 800231c:	20000054 	.word	0x20000054
 8002320:	20000064 	.word	0x20000064

08002324 <destroy>:

struct manyNumber destroy(uint8_t numberToDestroy) {
 8002324:	b480      	push	{r7}
 8002326:	b085      	sub	sp, #20
 8002328:	af00      	add	r7, sp, #0
 800232a:	4603      	mov	r3, r0
 800232c:	71fb      	strb	r3, [r7, #7]

	struct manyNumber temp;

	temp.firstNumber = numberToDestroy / 10;
 800232e:	79fb      	ldrb	r3, [r7, #7]
 8002330:	4a10      	ldr	r2, [pc, #64]	; (8002374 <destroy+0x50>)
 8002332:	fba2 2303 	umull	r2, r3, r2, r3
 8002336:	08db      	lsrs	r3, r3, #3
 8002338:	b2db      	uxtb	r3, r3
 800233a:	723b      	strb	r3, [r7, #8]
	temp.secondNumber = numberToDestroy % 10;
 800233c:	79fa      	ldrb	r2, [r7, #7]
 800233e:	4b0d      	ldr	r3, [pc, #52]	; (8002374 <destroy+0x50>)
 8002340:	fba3 1302 	umull	r1, r3, r3, r2
 8002344:	08d9      	lsrs	r1, r3, #3
 8002346:	460b      	mov	r3, r1
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	440b      	add	r3, r1
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	b2db      	uxtb	r3, r3
 8002352:	727b      	strb	r3, [r7, #9]
	return temp;
 8002354:	893b      	ldrh	r3, [r7, #8]
 8002356:	81bb      	strh	r3, [r7, #12]
 8002358:	2300      	movs	r3, #0
 800235a:	7b3a      	ldrb	r2, [r7, #12]
 800235c:	f362 0307 	bfi	r3, r2, #0, #8
 8002360:	7b7a      	ldrb	r2, [r7, #13]
 8002362:	f362 230f 	bfi	r3, r2, #8, #8
}
 8002366:	4618      	mov	r0, r3
 8002368:	3714      	adds	r7, #20
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	cccccccd 	.word	0xcccccccd

08002378 <destoryCelcius>:

struct manyNumberCelcius destoryCelcius() {
 8002378:	b580      	push	{r7, lr}
 800237a:	b088      	sub	sp, #32
 800237c:	af00      	add	r7, sp, #0
	struct manyNumberCelcius temp;
	double measureTemperature = temperatureMeasure();
 800237e:	f000 fdf3 	bl	8002f68 <temperatureMeasure>
 8002382:	ed87 0b06 	vstr	d0, [r7, #24]
	int tempTotalValueTemperature = (int) temperatureMeasure();
 8002386:	f000 fdef 	bl	8002f68 <temperatureMeasure>
 800238a:	ec53 2b10 	vmov	r2, r3, d0
 800238e:	4610      	mov	r0, r2
 8002390:	4619      	mov	r1, r3
 8002392:	f7fe fbe1 	bl	8000b58 <__aeabi_d2iz>
 8002396:	4603      	mov	r3, r0
 8002398:	617b      	str	r3, [r7, #20]
	double valueAfterPointTemperature;


	temp.firstNumber = tempTotalValueTemperature / 10;
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	4a2e      	ldr	r2, [pc, #184]	; (8002458 <destoryCelcius+0xe0>)
 800239e:	fb82 1203 	smull	r1, r2, r2, r3
 80023a2:	1092      	asrs	r2, r2, #2
 80023a4:	17db      	asrs	r3, r3, #31
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	703b      	strb	r3, [r7, #0]
	temp.secondNumber = tempTotalValueTemperature % 10;
 80023ac:	697a      	ldr	r2, [r7, #20]
 80023ae:	4b2a      	ldr	r3, [pc, #168]	; (8002458 <destoryCelcius+0xe0>)
 80023b0:	fb83 1302 	smull	r1, r3, r3, r2
 80023b4:	1099      	asrs	r1, r3, #2
 80023b6:	17d3      	asrs	r3, r2, #31
 80023b8:	1ac9      	subs	r1, r1, r3
 80023ba:	460b      	mov	r3, r1
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	440b      	add	r3, r1
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	1ad1      	subs	r1, r2, r3
 80023c4:	b2cb      	uxtb	r3, r1
 80023c6:	707b      	strb	r3, [r7, #1]
	valueAfterPointTemperature = measureTemperature - tempTotalValueTemperature;
 80023c8:	6978      	ldr	r0, [r7, #20]
 80023ca:	f7fe f8ab 	bl	8000524 <__aeabi_i2d>
 80023ce:	4602      	mov	r2, r0
 80023d0:	460b      	mov	r3, r1
 80023d2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80023d6:	f7fd ff57 	bl	8000288 <__aeabi_dsub>
 80023da:	4602      	mov	r2, r0
 80023dc:	460b      	mov	r3, r1
 80023de:	e9c7 2302 	strd	r2, r3, [r7, #8]
	valueAfterPointTemperature = valueAfterPointTemperature * 10;
 80023e2:	f04f 0200 	mov.w	r2, #0
 80023e6:	4b1d      	ldr	r3, [pc, #116]	; (800245c <destoryCelcius+0xe4>)
 80023e8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80023ec:	f7fe f904 	bl	80005f8 <__aeabi_dmul>
 80023f0:	4602      	mov	r2, r0
 80023f2:	460b      	mov	r3, r1
 80023f4:	e9c7 2302 	strd	r2, r3, [r7, #8]
	tempTotalValueTemperature = (int) valueAfterPointTemperature % 10;
 80023f8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80023fc:	f7fe fbac 	bl	8000b58 <__aeabi_d2iz>
 8002400:	4602      	mov	r2, r0
 8002402:	4b15      	ldr	r3, [pc, #84]	; (8002458 <destoryCelcius+0xe0>)
 8002404:	fb83 1302 	smull	r1, r3, r3, r2
 8002408:	1099      	asrs	r1, r3, #2
 800240a:	17d3      	asrs	r3, r2, #31
 800240c:	1ac9      	subs	r1, r1, r3
 800240e:	460b      	mov	r3, r1
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	440b      	add	r3, r1
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	617b      	str	r3, [r7, #20]
	
	
	/*
	 * ----------------------------------------------> ROUNDING
	 */
	if (tempTotalValueTemperature < 5) {
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	2b04      	cmp	r3, #4
 800241e:	dc02      	bgt.n	8002426 <destoryCelcius+0xae>
		temp.numberAfterPoint = 0;
 8002420:	2300      	movs	r3, #0
 8002422:	70bb      	strb	r3, [r7, #2]
 8002424:	e001      	b.n	800242a <destoryCelcius+0xb2>
	} else {
		temp.numberAfterPoint = 5;
 8002426:	2305      	movs	r3, #5
 8002428:	70bb      	strb	r3, [r7, #2]
	}

	return temp;
 800242a:	1d3b      	adds	r3, r7, #4
 800242c:	463a      	mov	r2, r7
 800242e:	6812      	ldr	r2, [r2, #0]
 8002430:	4611      	mov	r1, r2
 8002432:	8019      	strh	r1, [r3, #0]
 8002434:	3302      	adds	r3, #2
 8002436:	0c12      	lsrs	r2, r2, #16
 8002438:	701a      	strb	r2, [r3, #0]
 800243a:	2300      	movs	r3, #0
 800243c:	793a      	ldrb	r2, [r7, #4]
 800243e:	f362 0307 	bfi	r3, r2, #0, #8
 8002442:	797a      	ldrb	r2, [r7, #5]
 8002444:	f362 230f 	bfi	r3, r2, #8, #8
 8002448:	79ba      	ldrb	r2, [r7, #6]
 800244a:	f362 4317 	bfi	r3, r2, #16, #8
}
 800244e:	4618      	mov	r0, r3
 8002450:	3720      	adds	r7, #32
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	66666667 	.word	0x66666667
 800245c:	40240000 	.word	0x40240000

08002460 <firstSegment>:

// SEGMETNS
void firstSegment(uint8_t number[]) {
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
	uint8_t x = 0;
 8002468:	2300      	movs	r3, #0
 800246a:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i <= 13; i++) {
 800246c:	2300      	movs	r3, #0
 800246e:	60bb      	str	r3, [r7, #8]
 8002470:	e01d      	b.n	80024ae <firstSegment+0x4e>

		if (number[x] == i) {
 8002472:	7bfb      	ldrb	r3, [r7, #15]
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	4413      	add	r3, r2
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	461a      	mov	r2, r3
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	4293      	cmp	r3, r2
 8002480:	d10c      	bne.n	800249c <firstSegment+0x3c>
			ws2811_set_color(i, actualColor.red, actualColor.green,
 8002482:	68b8      	ldr	r0, [r7, #8]
 8002484:	4b0e      	ldr	r3, [pc, #56]	; (80024c0 <firstSegment+0x60>)
 8002486:	7819      	ldrb	r1, [r3, #0]
 8002488:	4b0d      	ldr	r3, [pc, #52]	; (80024c0 <firstSegment+0x60>)
 800248a:	789a      	ldrb	r2, [r3, #2]
 800248c:	4b0c      	ldr	r3, [pc, #48]	; (80024c0 <firstSegment+0x60>)
 800248e:	785b      	ldrb	r3, [r3, #1]
 8002490:	f001 f930 	bl	80036f4 <ws2811_set_color>
					actualColor.blue);
			x++;
 8002494:	7bfb      	ldrb	r3, [r7, #15]
 8002496:	3301      	adds	r3, #1
 8002498:	73fb      	strb	r3, [r7, #15]
 800249a:	e005      	b.n	80024a8 <firstSegment+0x48>
		} else {
			ws2811_set_color(i, 0, 0, 0);
 800249c:	68b8      	ldr	r0, [r7, #8]
 800249e:	2300      	movs	r3, #0
 80024a0:	2200      	movs	r2, #0
 80024a2:	2100      	movs	r1, #0
 80024a4:	f001 f926 	bl	80036f4 <ws2811_set_color>
	for (int i = 0; i <= 13; i++) {
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	3301      	adds	r3, #1
 80024ac:	60bb      	str	r3, [r7, #8]
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	2b0d      	cmp	r3, #13
 80024b2:	ddde      	ble.n	8002472 <firstSegment+0x12>
		}
	}
}
 80024b4:	bf00      	nop
 80024b6:	bf00      	nop
 80024b8:	3710      	adds	r7, #16
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	20000914 	.word	0x20000914

080024c4 <secondSegment>:

void secondSegment(uint8_t number[]) {
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
	uint8_t x = 0;
 80024cc:	2300      	movs	r3, #0
 80024ce:	73fb      	strb	r3, [r7, #15]
	for (int i = 14; i <= 27; i++) {
 80024d0:	230e      	movs	r3, #14
 80024d2:	60bb      	str	r3, [r7, #8]
 80024d4:	e01e      	b.n	8002514 <secondSegment+0x50>

		if (number[x] == i - 14) {
 80024d6:	7bfb      	ldrb	r3, [r7, #15]
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	4413      	add	r3, r2
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	461a      	mov	r2, r3
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	3b0e      	subs	r3, #14
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d10c      	bne.n	8002502 <secondSegment+0x3e>
			ws2811_set_color(i, actualColor.red, actualColor.green,
 80024e8:	68b8      	ldr	r0, [r7, #8]
 80024ea:	4b0e      	ldr	r3, [pc, #56]	; (8002524 <secondSegment+0x60>)
 80024ec:	7819      	ldrb	r1, [r3, #0]
 80024ee:	4b0d      	ldr	r3, [pc, #52]	; (8002524 <secondSegment+0x60>)
 80024f0:	789a      	ldrb	r2, [r3, #2]
 80024f2:	4b0c      	ldr	r3, [pc, #48]	; (8002524 <secondSegment+0x60>)
 80024f4:	785b      	ldrb	r3, [r3, #1]
 80024f6:	f001 f8fd 	bl	80036f4 <ws2811_set_color>
					actualColor.blue);
			x++;
 80024fa:	7bfb      	ldrb	r3, [r7, #15]
 80024fc:	3301      	adds	r3, #1
 80024fe:	73fb      	strb	r3, [r7, #15]
 8002500:	e005      	b.n	800250e <secondSegment+0x4a>
		} else {
			ws2811_set_color(i, 0, 0, 0);
 8002502:	68b8      	ldr	r0, [r7, #8]
 8002504:	2300      	movs	r3, #0
 8002506:	2200      	movs	r2, #0
 8002508:	2100      	movs	r1, #0
 800250a:	f001 f8f3 	bl	80036f4 <ws2811_set_color>
	for (int i = 14; i <= 27; i++) {
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	3301      	adds	r3, #1
 8002512:	60bb      	str	r3, [r7, #8]
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	2b1b      	cmp	r3, #27
 8002518:	dddd      	ble.n	80024d6 <secondSegment+0x12>
		}
	}
}
 800251a:	bf00      	nop
 800251c:	bf00      	nop
 800251e:	3710      	adds	r7, #16
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	20000914 	.word	0x20000914

08002528 <thirdSegment>:

void thirdSegment(uint8_t number[]) {
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
	uint8_t x = 0;
 8002530:	2300      	movs	r3, #0
 8002532:	73fb      	strb	r3, [r7, #15]
	for (int i = 30; i <= 43; i++) {
 8002534:	231e      	movs	r3, #30
 8002536:	60bb      	str	r3, [r7, #8]
 8002538:	e01e      	b.n	8002578 <thirdSegment+0x50>

		if (number[x] == i - 30) {
 800253a:	7bfb      	ldrb	r3, [r7, #15]
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	4413      	add	r3, r2
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	461a      	mov	r2, r3
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	3b1e      	subs	r3, #30
 8002548:	429a      	cmp	r2, r3
 800254a:	d10c      	bne.n	8002566 <thirdSegment+0x3e>
			ws2811_set_color(i, actualColor.red, actualColor.green,
 800254c:	68b8      	ldr	r0, [r7, #8]
 800254e:	4b0e      	ldr	r3, [pc, #56]	; (8002588 <thirdSegment+0x60>)
 8002550:	7819      	ldrb	r1, [r3, #0]
 8002552:	4b0d      	ldr	r3, [pc, #52]	; (8002588 <thirdSegment+0x60>)
 8002554:	789a      	ldrb	r2, [r3, #2]
 8002556:	4b0c      	ldr	r3, [pc, #48]	; (8002588 <thirdSegment+0x60>)
 8002558:	785b      	ldrb	r3, [r3, #1]
 800255a:	f001 f8cb 	bl	80036f4 <ws2811_set_color>
					actualColor.blue);
			x++;
 800255e:	7bfb      	ldrb	r3, [r7, #15]
 8002560:	3301      	adds	r3, #1
 8002562:	73fb      	strb	r3, [r7, #15]
 8002564:	e005      	b.n	8002572 <thirdSegment+0x4a>
		} else {
			ws2811_set_color(i, 0, 0, 0);
 8002566:	68b8      	ldr	r0, [r7, #8]
 8002568:	2300      	movs	r3, #0
 800256a:	2200      	movs	r2, #0
 800256c:	2100      	movs	r1, #0
 800256e:	f001 f8c1 	bl	80036f4 <ws2811_set_color>
	for (int i = 30; i <= 43; i++) {
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	3301      	adds	r3, #1
 8002576:	60bb      	str	r3, [r7, #8]
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	2b2b      	cmp	r3, #43	; 0x2b
 800257c:	dddd      	ble.n	800253a <thirdSegment+0x12>
		}
	}
}
 800257e:	bf00      	nop
 8002580:	bf00      	nop
 8002582:	3710      	adds	r7, #16
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	20000914 	.word	0x20000914

0800258c <fourthSegment>:

void fourthSegment(uint8_t number[]) {
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
	uint8_t x = 0;
 8002594:	2300      	movs	r3, #0
 8002596:	73fb      	strb	r3, [r7, #15]
	for (int i = 44; i <= 57; i++) {
 8002598:	232c      	movs	r3, #44	; 0x2c
 800259a:	60bb      	str	r3, [r7, #8]
 800259c:	e01e      	b.n	80025dc <fourthSegment+0x50>

		if (number[x] == i - 44) {
 800259e:	7bfb      	ldrb	r3, [r7, #15]
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	4413      	add	r3, r2
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	461a      	mov	r2, r3
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	3b2c      	subs	r3, #44	; 0x2c
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d10c      	bne.n	80025ca <fourthSegment+0x3e>
			ws2811_set_color(i, actualColor.red, actualColor.green,
 80025b0:	68b8      	ldr	r0, [r7, #8]
 80025b2:	4b0e      	ldr	r3, [pc, #56]	; (80025ec <fourthSegment+0x60>)
 80025b4:	7819      	ldrb	r1, [r3, #0]
 80025b6:	4b0d      	ldr	r3, [pc, #52]	; (80025ec <fourthSegment+0x60>)
 80025b8:	789a      	ldrb	r2, [r3, #2]
 80025ba:	4b0c      	ldr	r3, [pc, #48]	; (80025ec <fourthSegment+0x60>)
 80025bc:	785b      	ldrb	r3, [r3, #1]
 80025be:	f001 f899 	bl	80036f4 <ws2811_set_color>
					actualColor.blue);
			x++;
 80025c2:	7bfb      	ldrb	r3, [r7, #15]
 80025c4:	3301      	adds	r3, #1
 80025c6:	73fb      	strb	r3, [r7, #15]
 80025c8:	e005      	b.n	80025d6 <fourthSegment+0x4a>
		} else {
			ws2811_set_color(i, 0, 0, 0);
 80025ca:	68b8      	ldr	r0, [r7, #8]
 80025cc:	2300      	movs	r3, #0
 80025ce:	2200      	movs	r2, #0
 80025d0:	2100      	movs	r1, #0
 80025d2:	f001 f88f 	bl	80036f4 <ws2811_set_color>
	for (int i = 44; i <= 57; i++) {
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	3301      	adds	r3, #1
 80025da:	60bb      	str	r3, [r7, #8]
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	2b39      	cmp	r3, #57	; 0x39
 80025e0:	dddd      	ble.n	800259e <fourthSegment+0x12>
		}
	}
}
 80025e2:	bf00      	nop
 80025e4:	bf00      	nop
 80025e6:	3710      	adds	r7, #16
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	20000914 	.word	0x20000914

080025f0 <dwukropekTurnOn>:

void dwukropekTurnOn() {
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0

	ws2811_set_color(28, actualColor.red, actualColor.green, actualColor.blue);
 80025f4:	4b0c      	ldr	r3, [pc, #48]	; (8002628 <dwukropekTurnOn+0x38>)
 80025f6:	7819      	ldrb	r1, [r3, #0]
 80025f8:	4b0b      	ldr	r3, [pc, #44]	; (8002628 <dwukropekTurnOn+0x38>)
 80025fa:	789a      	ldrb	r2, [r3, #2]
 80025fc:	4b0a      	ldr	r3, [pc, #40]	; (8002628 <dwukropekTurnOn+0x38>)
 80025fe:	785b      	ldrb	r3, [r3, #1]
 8002600:	201c      	movs	r0, #28
 8002602:	f001 f877 	bl	80036f4 <ws2811_set_color>
	ws2811_set_color(29, actualColor.red, actualColor.green, actualColor.blue);
 8002606:	4b08      	ldr	r3, [pc, #32]	; (8002628 <dwukropekTurnOn+0x38>)
 8002608:	7819      	ldrb	r1, [r3, #0]
 800260a:	4b07      	ldr	r3, [pc, #28]	; (8002628 <dwukropekTurnOn+0x38>)
 800260c:	789a      	ldrb	r2, [r3, #2]
 800260e:	4b06      	ldr	r3, [pc, #24]	; (8002628 <dwukropekTurnOn+0x38>)
 8002610:	785b      	ldrb	r3, [r3, #1]
 8002612:	201d      	movs	r0, #29
 8002614:	f001 f86e 	bl	80036f4 <ws2811_set_color>
	ws2811_update();
 8002618:	f001 f84c 	bl	80036b4 <ws2811_update>
	doubleDot = 0;
 800261c:	4b03      	ldr	r3, [pc, #12]	; (800262c <dwukropekTurnOn+0x3c>)
 800261e:	2200      	movs	r2, #0
 8002620:	601a      	str	r2, [r3, #0]

}
 8002622:	bf00      	nop
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	20000914 	.word	0x20000914
 800262c:	200002a0 	.word	0x200002a0

08002630 <dwukropekTurnOff>:

void dwukropekTurnOff() {
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0

	ws2811_set_color(28, 0, 0, 0);
 8002634:	2300      	movs	r3, #0
 8002636:	2200      	movs	r2, #0
 8002638:	2100      	movs	r1, #0
 800263a:	201c      	movs	r0, #28
 800263c:	f001 f85a 	bl	80036f4 <ws2811_set_color>
	ws2811_set_color(29, 0, 0, 0);
 8002640:	2300      	movs	r3, #0
 8002642:	2200      	movs	r2, #0
 8002644:	2100      	movs	r1, #0
 8002646:	201d      	movs	r0, #29
 8002648:	f001 f854 	bl	80036f4 <ws2811_set_color>
	ws2811_update();
 800264c:	f001 f832 	bl	80036b4 <ws2811_update>
	doubleDot = 1;
 8002650:	4b02      	ldr	r3, [pc, #8]	; (800265c <dwukropekTurnOff+0x2c>)
 8002652:	2201      	movs	r2, #1
 8002654:	601a      	str	r2, [r3, #0]
}
 8002656:	bf00      	nop
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	200002a0 	.word	0x200002a0

08002660 <dotOn>:

void dotOn() {
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
	ws2811_set_color(28, 0, 0, 0);
 8002664:	2300      	movs	r3, #0
 8002666:	2200      	movs	r2, #0
 8002668:	2100      	movs	r1, #0
 800266a:	201c      	movs	r0, #28
 800266c:	f001 f842 	bl	80036f4 <ws2811_set_color>
	ws2811_set_color(29, actualColor.red, actualColor.green, actualColor.blue);
 8002670:	4b06      	ldr	r3, [pc, #24]	; (800268c <dotOn+0x2c>)
 8002672:	7819      	ldrb	r1, [r3, #0]
 8002674:	4b05      	ldr	r3, [pc, #20]	; (800268c <dotOn+0x2c>)
 8002676:	789a      	ldrb	r2, [r3, #2]
 8002678:	4b04      	ldr	r3, [pc, #16]	; (800268c <dotOn+0x2c>)
 800267a:	785b      	ldrb	r3, [r3, #1]
 800267c:	201d      	movs	r0, #29
 800267e:	f001 f839 	bl	80036f4 <ws2811_set_color>
	ws2811_update();
 8002682:	f001 f817 	bl	80036b4 <ws2811_update>
}
 8002686:	bf00      	nop
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	20000914 	.word	0x20000914

08002690 <dotOff>:

void dotOff(){
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
	ws2811_set_color(28, 0, 0, 0);
 8002694:	2300      	movs	r3, #0
 8002696:	2200      	movs	r2, #0
 8002698:	2100      	movs	r1, #0
 800269a:	201c      	movs	r0, #28
 800269c:	f001 f82a 	bl	80036f4 <ws2811_set_color>
	ws2811_set_color(29, 0, 0, 0);
 80026a0:	2300      	movs	r3, #0
 80026a2:	2200      	movs	r2, #0
 80026a4:	2100      	movs	r1, #0
 80026a6:	201d      	movs	r0, #29
 80026a8:	f001 f824 	bl	80036f4 <ws2811_set_color>
	ws2811_update();
 80026ac:	f001 f802 	bl	80036b4 <ws2811_update>
}
 80026b0:	bf00      	nop
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <celsiusMark>:

void celsiusMark() {
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
	uint32_t i;
	for (i = 50; i <= 55; i++) {
 80026ba:	2332      	movs	r3, #50	; 0x32
 80026bc:	607b      	str	r3, [r7, #4]
 80026be:	e00b      	b.n	80026d8 <celsiusMark+0x24>
		ws2811_set_color(i, actualColor.red, actualColor.green,actualColor.blue);
 80026c0:	4b0a      	ldr	r3, [pc, #40]	; (80026ec <celsiusMark+0x38>)
 80026c2:	7819      	ldrb	r1, [r3, #0]
 80026c4:	4b09      	ldr	r3, [pc, #36]	; (80026ec <celsiusMark+0x38>)
 80026c6:	789a      	ldrb	r2, [r3, #2]
 80026c8:	4b08      	ldr	r3, [pc, #32]	; (80026ec <celsiusMark+0x38>)
 80026ca:	785b      	ldrb	r3, [r3, #1]
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f001 f811 	bl	80036f4 <ws2811_set_color>
	for (i = 50; i <= 55; i++) {
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	3301      	adds	r3, #1
 80026d6:	607b      	str	r3, [r7, #4]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2b37      	cmp	r3, #55	; 0x37
 80026dc:	d9f0      	bls.n	80026c0 <celsiusMark+0xc>
	}
	ws2811_update();
 80026de:	f000 ffe9 	bl	80036b4 <ws2811_update>
}
 80026e2:	bf00      	nop
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	20000914 	.word	0x20000914

080026f0 <dwukropekStart>:

void dwukropekStart(void) {
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
	if (doubleDot == 1) {
 80026f4:	4b05      	ldr	r3, [pc, #20]	; (800270c <dwukropekStart+0x1c>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d102      	bne.n	8002702 <dwukropekStart+0x12>
		dwukropekTurnOn();
 80026fc:	f7ff ff78 	bl	80025f0 <dwukropekTurnOn>
	} else {
		dwukropekTurnOff();
	}
}
 8002700:	e001      	b.n	8002706 <dwukropekStart+0x16>
		dwukropekTurnOff();
 8002702:	f7ff ff95 	bl	8002630 <dwukropekTurnOff>
}
 8002706:	bf00      	nop
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	200002a0 	.word	0x200002a0

08002710 <putMinutes>:


// SETTERS
void putMinutes(uint8_t minutes) {
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	4603      	mov	r3, r0
 8002718:	71fb      	strb	r3, [r7, #7]
	if (minutes <= 9) {
 800271a:	79fb      	ldrb	r3, [r7, #7]
 800271c:	2b09      	cmp	r3, #9
 800271e:	d812      	bhi.n	8002746 <putMinutes+0x36>
		thirdSegment(zero);
 8002720:	4816      	ldr	r0, [pc, #88]	; (800277c <putMinutes+0x6c>)
 8002722:	f7ff ff01 	bl	8002528 <thirdSegment>
		if (minutes == 0) {
 8002726:	79fb      	ldrb	r3, [r7, #7]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d103      	bne.n	8002734 <putMinutes+0x24>
			fourthSegment(zero);
 800272c:	4813      	ldr	r0, [pc, #76]	; (800277c <putMinutes+0x6c>)
 800272e:	f7ff ff2d 	bl	800258c <fourthSegment>
	} else {
		struct manyNumber temp = destroy(minutes);
		thirdSegment(numberToMatrix(temp.firstNumber));
		fourthSegment(numberToMatrix(temp.secondNumber));
	}
}
 8002732:	e01e      	b.n	8002772 <putMinutes+0x62>
			fourthSegment(numberToMatrix(minutes));
 8002734:	79fb      	ldrb	r3, [r7, #7]
 8002736:	4618      	mov	r0, r3
 8002738:	f7ff fda6 	bl	8002288 <numberToMatrix>
 800273c:	4603      	mov	r3, r0
 800273e:	4618      	mov	r0, r3
 8002740:	f7ff ff24 	bl	800258c <fourthSegment>
}
 8002744:	e015      	b.n	8002772 <putMinutes+0x62>
		struct manyNumber temp = destroy(minutes);
 8002746:	79fb      	ldrb	r3, [r7, #7]
 8002748:	4618      	mov	r0, r3
 800274a:	f7ff fdeb 	bl	8002324 <destroy>
 800274e:	4603      	mov	r3, r0
 8002750:	81bb      	strh	r3, [r7, #12]
		thirdSegment(numberToMatrix(temp.firstNumber));
 8002752:	7b3b      	ldrb	r3, [r7, #12]
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff fd97 	bl	8002288 <numberToMatrix>
 800275a:	4603      	mov	r3, r0
 800275c:	4618      	mov	r0, r3
 800275e:	f7ff fee3 	bl	8002528 <thirdSegment>
		fourthSegment(numberToMatrix(temp.secondNumber));
 8002762:	7b7b      	ldrb	r3, [r7, #13]
 8002764:	4618      	mov	r0, r3
 8002766:	f7ff fd8f 	bl	8002288 <numberToMatrix>
 800276a:	4603      	mov	r3, r0
 800276c:	4618      	mov	r0, r3
 800276e:	f7ff ff0d 	bl	800258c <fourthSegment>
}
 8002772:	bf00      	nop
 8002774:	3710      	adds	r7, #16
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	20000004 	.word	0x20000004

08002780 <putHours>:

void putHours(uint8_t hours, int isMenuOn) {
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	4603      	mov	r3, r0
 8002788:	6039      	str	r1, [r7, #0]
 800278a:	71fb      	strb	r3, [r7, #7]
	if (hours <= 9) {
 800278c:	79fb      	ldrb	r3, [r7, #7]
 800278e:	2b09      	cmp	r3, #9
 8002790:	d81c      	bhi.n	80027cc <putHours+0x4c>

		if (isMenuOn == MENU_ON) {
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	2b01      	cmp	r3, #1
 8002796:	d103      	bne.n	80027a0 <putHours+0x20>
			firstSegment(zero);
 8002798:	4819      	ldr	r0, [pc, #100]	; (8002800 <putHours+0x80>)
 800279a:	f7ff fe61 	bl	8002460 <firstSegment>
 800279e:	e005      	b.n	80027ac <putHours+0x2c>
		} else if (isMenuOn == MENU_OFF) {
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d102      	bne.n	80027ac <putHours+0x2c>
			firstSegment(noDigit);
 80027a6:	4817      	ldr	r0, [pc, #92]	; (8002804 <putHours+0x84>)
 80027a8:	f7ff fe5a 	bl	8002460 <firstSegment>
		}

		if (hours == 0) {
 80027ac:	79fb      	ldrb	r3, [r7, #7]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d103      	bne.n	80027ba <putHours+0x3a>
			secondSegment(zero);
 80027b2:	4813      	ldr	r0, [pc, #76]	; (8002800 <putHours+0x80>)
 80027b4:	f7ff fe86 	bl	80024c4 <secondSegment>
	} else {
		struct manyNumber temp = destroy(hours);
		firstSegment(numberToMatrix(temp.firstNumber));
		secondSegment(numberToMatrix(temp.secondNumber));
	}
}
 80027b8:	e01e      	b.n	80027f8 <putHours+0x78>
			secondSegment(numberToMatrix(hours));
 80027ba:	79fb      	ldrb	r3, [r7, #7]
 80027bc:	4618      	mov	r0, r3
 80027be:	f7ff fd63 	bl	8002288 <numberToMatrix>
 80027c2:	4603      	mov	r3, r0
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7ff fe7d 	bl	80024c4 <secondSegment>
}
 80027ca:	e015      	b.n	80027f8 <putHours+0x78>
		struct manyNumber temp = destroy(hours);
 80027cc:	79fb      	ldrb	r3, [r7, #7]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7ff fda8 	bl	8002324 <destroy>
 80027d4:	4603      	mov	r3, r0
 80027d6:	81bb      	strh	r3, [r7, #12]
		firstSegment(numberToMatrix(temp.firstNumber));
 80027d8:	7b3b      	ldrb	r3, [r7, #12]
 80027da:	4618      	mov	r0, r3
 80027dc:	f7ff fd54 	bl	8002288 <numberToMatrix>
 80027e0:	4603      	mov	r3, r0
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7ff fe3c 	bl	8002460 <firstSegment>
		secondSegment(numberToMatrix(temp.secondNumber));
 80027e8:	7b7b      	ldrb	r3, [r7, #13]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7ff fd4c 	bl	8002288 <numberToMatrix>
 80027f0:	4603      	mov	r3, r0
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7ff fe66 	bl	80024c4 <secondSegment>
}
 80027f8:	bf00      	nop
 80027fa:	3710      	adds	r7, #16
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	20000004 	.word	0x20000004
 8002804:	20000000 	.word	0x20000000

08002808 <putMonth>:

void putMonth(uint8_t month) {
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	4603      	mov	r3, r0
 8002810:	71fb      	strb	r3, [r7, #7]
	putMinutes(month);
 8002812:	79fb      	ldrb	r3, [r7, #7]
 8002814:	4618      	mov	r0, r3
 8002816:	f7ff ff7b 	bl	8002710 <putMinutes>
}
 800281a:	bf00      	nop
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <putDay>:

void putDay(uint8_t day) {
 8002822:	b580      	push	{r7, lr}
 8002824:	b082      	sub	sp, #8
 8002826:	af00      	add	r7, sp, #0
 8002828:	4603      	mov	r3, r0
 800282a:	71fb      	strb	r3, [r7, #7]
	putHours(day, MENU_ON);
 800282c:	79fb      	ldrb	r3, [r7, #7]
 800282e:	2101      	movs	r1, #1
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff ffa5 	bl	8002780 <putHours>
}
 8002836:	bf00      	nop
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
	...

08002840 <setMinutes>:

void setMinutes(uint8_t minute) {
 8002840:	b580      	push	{r7, lr}
 8002842:	b088      	sub	sp, #32
 8002844:	af00      	add	r7, sp, #0
 8002846:	4603      	mov	r3, r0
 8002848:	71fb      	strb	r3, [r7, #7]
	RTC_TimeTypeDef time = { 0 };
 800284a:	f107 030c 	add.w	r3, r7, #12
 800284e:	2200      	movs	r2, #0
 8002850:	601a      	str	r2, [r3, #0]
 8002852:	605a      	str	r2, [r3, #4]
 8002854:	609a      	str	r2, [r3, #8]
 8002856:	60da      	str	r2, [r3, #12]
 8002858:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef date = { 0 };
 800285a:	2300      	movs	r3, #0
 800285c:	60bb      	str	r3, [r7, #8]

	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 800285e:	f107 030c 	add.w	r3, r7, #12
 8002862:	2200      	movs	r2, #0
 8002864:	4619      	mov	r1, r3
 8002866:	480c      	ldr	r0, [pc, #48]	; (8002898 <setMinutes+0x58>)
 8002868:	f004 fc7a 	bl	8007160 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 800286c:	f107 0308 	add.w	r3, r7, #8
 8002870:	2200      	movs	r2, #0
 8002872:	4619      	mov	r1, r3
 8002874:	4808      	ldr	r0, [pc, #32]	; (8002898 <setMinutes+0x58>)
 8002876:	f004 fd56 	bl	8007326 <HAL_RTC_GetDate>

	time.Minutes = minute;
 800287a:	79fb      	ldrb	r3, [r7, #7]
 800287c:	737b      	strb	r3, [r7, #13]
	time.Seconds = 0;
 800287e:	2300      	movs	r3, #0
 8002880:	73bb      	strb	r3, [r7, #14]

	HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8002882:	f107 030c 	add.w	r3, r7, #12
 8002886:	2200      	movs	r2, #0
 8002888:	4619      	mov	r1, r3
 800288a:	4803      	ldr	r0, [pc, #12]	; (8002898 <setMinutes+0x58>)
 800288c:	f004 fbcb 	bl	8007026 <HAL_RTC_SetTime>
}
 8002890:	bf00      	nop
 8002892:	3720      	adds	r7, #32
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	200008f0 	.word	0x200008f0

0800289c <setHours>:

void setHours(uint8_t hours) {
 800289c:	b580      	push	{r7, lr}
 800289e:	b088      	sub	sp, #32
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	4603      	mov	r3, r0
 80028a4:	71fb      	strb	r3, [r7, #7]
	RTC_TimeTypeDef time = { 0 };
 80028a6:	f107 030c 	add.w	r3, r7, #12
 80028aa:	2200      	movs	r2, #0
 80028ac:	601a      	str	r2, [r3, #0]
 80028ae:	605a      	str	r2, [r3, #4]
 80028b0:	609a      	str	r2, [r3, #8]
 80028b2:	60da      	str	r2, [r3, #12]
 80028b4:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef date = { 0 };
 80028b6:	2300      	movs	r3, #0
 80028b8:	60bb      	str	r3, [r7, #8]

	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 80028ba:	f107 030c 	add.w	r3, r7, #12
 80028be:	2200      	movs	r2, #0
 80028c0:	4619      	mov	r1, r3
 80028c2:	480e      	ldr	r0, [pc, #56]	; (80028fc <setHours+0x60>)
 80028c4:	f004 fc4c 	bl	8007160 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 80028c8:	f107 0308 	add.w	r3, r7, #8
 80028cc:	2200      	movs	r2, #0
 80028ce:	4619      	mov	r1, r3
 80028d0:	480a      	ldr	r0, [pc, #40]	; (80028fc <setHours+0x60>)
 80028d2:	f004 fd28 	bl	8007326 <HAL_RTC_GetDate>

	HAL_Delay(100);
 80028d6:	2064      	movs	r0, #100	; 0x64
 80028d8:	f000 ffe0 	bl	800389c <HAL_Delay>

	time.Hours = hours;
 80028dc:	79fb      	ldrb	r3, [r7, #7]
 80028de:	733b      	strb	r3, [r7, #12]
	time.Seconds = 0;
 80028e0:	2300      	movs	r3, #0
 80028e2:	73bb      	strb	r3, [r7, #14]

	HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN);
 80028e4:	f107 030c 	add.w	r3, r7, #12
 80028e8:	2200      	movs	r2, #0
 80028ea:	4619      	mov	r1, r3
 80028ec:	4803      	ldr	r0, [pc, #12]	; (80028fc <setHours+0x60>)
 80028ee:	f004 fb9a 	bl	8007026 <HAL_RTC_SetTime>
}
 80028f2:	bf00      	nop
 80028f4:	3720      	adds	r7, #32
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	200008f0 	.word	0x200008f0

08002900 <setMonth>:

// DATA

void setMonth(uint8_t month) {
 8002900:	b580      	push	{r7, lr}
 8002902:	b088      	sub	sp, #32
 8002904:	af00      	add	r7, sp, #0
 8002906:	4603      	mov	r3, r0
 8002908:	71fb      	strb	r3, [r7, #7]
	RTC_TimeTypeDef time = { 0 };
 800290a:	f107 030c 	add.w	r3, r7, #12
 800290e:	2200      	movs	r2, #0
 8002910:	601a      	str	r2, [r3, #0]
 8002912:	605a      	str	r2, [r3, #4]
 8002914:	609a      	str	r2, [r3, #8]
 8002916:	60da      	str	r2, [r3, #12]
 8002918:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef date = { 0 };
 800291a:	2300      	movs	r3, #0
 800291c:	60bb      	str	r3, [r7, #8]

	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 800291e:	f107 030c 	add.w	r3, r7, #12
 8002922:	2200      	movs	r2, #0
 8002924:	4619      	mov	r1, r3
 8002926:	4810      	ldr	r0, [pc, #64]	; (8002968 <setMonth+0x68>)
 8002928:	f004 fc1a 	bl	8007160 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 800292c:	f107 0308 	add.w	r3, r7, #8
 8002930:	2200      	movs	r2, #0
 8002932:	4619      	mov	r1, r3
 8002934:	480c      	ldr	r0, [pc, #48]	; (8002968 <setMonth+0x68>)
 8002936:	f004 fcf6 	bl	8007326 <HAL_RTC_GetDate>

	date.Month=month;
 800293a:	79fb      	ldrb	r3, [r7, #7]
 800293c:	727b      	strb	r3, [r7, #9]
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR5, ((date.Month << 8) | (date.Year)));
 800293e:	7a7b      	ldrb	r3, [r7, #9]
 8002940:	021b      	lsls	r3, r3, #8
 8002942:	7afa      	ldrb	r2, [r7, #11]
 8002944:	4313      	orrs	r3, r2
 8002946:	461a      	mov	r2, r3
 8002948:	2105      	movs	r1, #5
 800294a:	4807      	ldr	r0, [pc, #28]	; (8002968 <setMonth+0x68>)
 800294c:	f004 ff96 	bl	800787c <HAL_RTCEx_BKUPWrite>


	HAL_RTC_SetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8002950:	f107 0308 	add.w	r3, r7, #8
 8002954:	2200      	movs	r2, #0
 8002956:	4619      	mov	r1, r3
 8002958:	4803      	ldr	r0, [pc, #12]	; (8002968 <setMonth+0x68>)
 800295a:	f004 fc5d 	bl	8007218 <HAL_RTC_SetDate>
}
 800295e:	bf00      	nop
 8002960:	3720      	adds	r7, #32
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	200008f0 	.word	0x200008f0

0800296c <setDay>:

void setDay(uint8_t day) {
 800296c:	b580      	push	{r7, lr}
 800296e:	b088      	sub	sp, #32
 8002970:	af00      	add	r7, sp, #0
 8002972:	4603      	mov	r3, r0
 8002974:	71fb      	strb	r3, [r7, #7]
	RTC_TimeTypeDef time = { 0 };
 8002976:	f107 030c 	add.w	r3, r7, #12
 800297a:	2200      	movs	r2, #0
 800297c:	601a      	str	r2, [r3, #0]
 800297e:	605a      	str	r2, [r3, #4]
 8002980:	609a      	str	r2, [r3, #8]
 8002982:	60da      	str	r2, [r3, #12]
 8002984:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef date = { 0 };
 8002986:	2300      	movs	r3, #0
 8002988:	60bb      	str	r3, [r7, #8]

	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 800298a:	f107 030c 	add.w	r3, r7, #12
 800298e:	2200      	movs	r2, #0
 8002990:	4619      	mov	r1, r3
 8002992:	480e      	ldr	r0, [pc, #56]	; (80029cc <setDay+0x60>)
 8002994:	f004 fbe4 	bl	8007160 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8002998:	f107 0308 	add.w	r3, r7, #8
 800299c:	2200      	movs	r2, #0
 800299e:	4619      	mov	r1, r3
 80029a0:	480a      	ldr	r0, [pc, #40]	; (80029cc <setDay+0x60>)
 80029a2:	f004 fcc0 	bl	8007326 <HAL_RTC_GetDate>

	date.Date=day;
 80029a6:	79fb      	ldrb	r3, [r7, #7]
 80029a8:	72bb      	strb	r3, [r7, #10]

	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR6, date.Date);
 80029aa:	7abb      	ldrb	r3, [r7, #10]
 80029ac:	461a      	mov	r2, r3
 80029ae:	2106      	movs	r1, #6
 80029b0:	4806      	ldr	r0, [pc, #24]	; (80029cc <setDay+0x60>)
 80029b2:	f004 ff63 	bl	800787c <HAL_RTCEx_BKUPWrite>

	HAL_RTC_SetDate(&hrtc, &date, RTC_FORMAT_BIN);
 80029b6:	f107 0308 	add.w	r3, r7, #8
 80029ba:	2200      	movs	r2, #0
 80029bc:	4619      	mov	r1, r3
 80029be:	4803      	ldr	r0, [pc, #12]	; (80029cc <setDay+0x60>)
 80029c0:	f004 fc2a 	bl	8007218 <HAL_RTC_SetDate>
}
 80029c4:	bf00      	nop
 80029c6:	3720      	adds	r7, #32
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	200008f0 	.word	0x200008f0

080029d0 <normalDisplayStart>:


/*
 *  DISPLAY MODES
 */
void normalDisplayStart() {
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b088      	sub	sp, #32
 80029d4:	af00      	add	r7, sp, #0

	RTC_TimeTypeDef time = { 0 };
 80029d6:	f107 0308 	add.w	r3, r7, #8
 80029da:	2200      	movs	r2, #0
 80029dc:	601a      	str	r2, [r3, #0]
 80029de:	605a      	str	r2, [r3, #4]
 80029e0:	609a      	str	r2, [r3, #8]
 80029e2:	60da      	str	r2, [r3, #12]
 80029e4:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef date = { 0 };
 80029e6:	2300      	movs	r3, #0
 80029e8:	607b      	str	r3, [r7, #4]

	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 80029ea:	f107 0308 	add.w	r3, r7, #8
 80029ee:	2200      	movs	r2, #0
 80029f0:	4619      	mov	r1, r3
 80029f2:	480e      	ldr	r0, [pc, #56]	; (8002a2c <normalDisplayStart+0x5c>)
 80029f4:	f004 fbb4 	bl	8007160 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 80029f8:	1d3b      	adds	r3, r7, #4
 80029fa:	2200      	movs	r2, #0
 80029fc:	4619      	mov	r1, r3
 80029fe:	480b      	ldr	r0, [pc, #44]	; (8002a2c <normalDisplayStart+0x5c>)
 8002a00:	f004 fc91 	bl	8007326 <HAL_RTC_GetDate>

	uint8_t hours = time.Hours;
 8002a04:	7a3b      	ldrb	r3, [r7, #8]
 8002a06:	77fb      	strb	r3, [r7, #31]
	uint8_t minutes = time.Minutes;
 8002a08:	7a7b      	ldrb	r3, [r7, #9]
 8002a0a:	77bb      	strb	r3, [r7, #30]



	putHours(hours, MENU_OFF);
 8002a0c:	7ffb      	ldrb	r3, [r7, #31]
 8002a0e:	2100      	movs	r1, #0
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7ff feb5 	bl	8002780 <putHours>
	putMinutes(minutes);
 8002a16:	7fbb      	ldrb	r3, [r7, #30]
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7ff fe79 	bl	8002710 <putMinutes>
	ws2811_update();
 8002a1e:	f000 fe49 	bl	80036b4 <ws2811_update>
}
 8002a22:	bf00      	nop
 8002a24:	3720      	adds	r7, #32
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	200008f0 	.word	0x200008f0

08002a30 <menuDisplayStart>:

// menu mode, first segment is always active
void menuDisplayStart() {
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b088      	sub	sp, #32
 8002a34:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef time = { 0 };
 8002a36:	f107 0308 	add.w	r3, r7, #8
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	601a      	str	r2, [r3, #0]
 8002a3e:	605a      	str	r2, [r3, #4]
 8002a40:	609a      	str	r2, [r3, #8]
 8002a42:	60da      	str	r2, [r3, #12]
 8002a44:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef date = { 0 };
 8002a46:	2300      	movs	r3, #0
 8002a48:	607b      	str	r3, [r7, #4]

	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8002a4a:	f107 0308 	add.w	r3, r7, #8
 8002a4e:	2200      	movs	r2, #0
 8002a50:	4619      	mov	r1, r3
 8002a52:	480e      	ldr	r0, [pc, #56]	; (8002a8c <menuDisplayStart+0x5c>)
 8002a54:	f004 fb84 	bl	8007160 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8002a58:	1d3b      	adds	r3, r7, #4
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	480b      	ldr	r0, [pc, #44]	; (8002a8c <menuDisplayStart+0x5c>)
 8002a60:	f004 fc61 	bl	8007326 <HAL_RTC_GetDate>

	uint8_t hours = time.Hours;
 8002a64:	7a3b      	ldrb	r3, [r7, #8]
 8002a66:	77fb      	strb	r3, [r7, #31]
	uint8_t minutes = time.Minutes;
 8002a68:	7a7b      	ldrb	r3, [r7, #9]
 8002a6a:	77bb      	strb	r3, [r7, #30]

	putHours(hours, MENU_ON);
 8002a6c:	7ffb      	ldrb	r3, [r7, #31]
 8002a6e:	2101      	movs	r1, #1
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7ff fe85 	bl	8002780 <putHours>
	putMinutes(minutes);
 8002a76:	7fbb      	ldrb	r3, [r7, #30]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7ff fe49 	bl	8002710 <putMinutes>
	ws2811_update();
 8002a7e:	f000 fe19 	bl	80036b4 <ws2811_update>
}
 8002a82:	bf00      	nop
 8002a84:	3720      	adds	r7, #32
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	200008f0 	.word	0x200008f0

08002a90 <dateOnDisplay>:

void dateOnDisplay() {
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b088      	sub	sp, #32
 8002a94:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef time = { 0 };
 8002a96:	f107 0308 	add.w	r3, r7, #8
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	601a      	str	r2, [r3, #0]
 8002a9e:	605a      	str	r2, [r3, #4]
 8002aa0:	609a      	str	r2, [r3, #8]
 8002aa2:	60da      	str	r2, [r3, #12]
 8002aa4:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef date = { 0 };
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	607b      	str	r3, [r7, #4]

	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8002aaa:	f107 0308 	add.w	r3, r7, #8
 8002aae:	2200      	movs	r2, #0
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	480d      	ldr	r0, [pc, #52]	; (8002ae8 <dateOnDisplay+0x58>)
 8002ab4:	f004 fb54 	bl	8007160 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8002ab8:	1d3b      	adds	r3, r7, #4
 8002aba:	2200      	movs	r2, #0
 8002abc:	4619      	mov	r1, r3
 8002abe:	480a      	ldr	r0, [pc, #40]	; (8002ae8 <dateOnDisplay+0x58>)
 8002ac0:	f004 fc31 	bl	8007326 <HAL_RTC_GetDate>

	uint8_t month = date.Month;
 8002ac4:	797b      	ldrb	r3, [r7, #5]
 8002ac6:	77fb      	strb	r3, [r7, #31]
	uint8_t day = date.Date;
 8002ac8:	79bb      	ldrb	r3, [r7, #6]
 8002aca:	77bb      	strb	r3, [r7, #30]

	putMonth(month);
 8002acc:	7ffb      	ldrb	r3, [r7, #31]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7ff fe9a 	bl	8002808 <putMonth>
	putDay(day);
 8002ad4:	7fbb      	ldrb	r3, [r7, #30]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7ff fea3 	bl	8002822 <putDay>
	ws2811_update();
 8002adc:	f000 fdea 	bl	80036b4 <ws2811_update>
}
 8002ae0:	bf00      	nop
 8002ae2:	3720      	adds	r7, #32
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	200008f0 	.word	0x200008f0

08002aec <temperatureOnDisplay>:

void temperatureOnDisplay(int firstMeasure) {
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
	if(firstMeasure==1){
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d10b      	bne.n	8002b12 <temperatureOnDisplay+0x26>
		temperatureResult = destoryCelcius();
 8002afa:	f7ff fc3d 	bl	8002378 <destoryCelcius>
 8002afe:	4602      	mov	r2, r0
 8002b00:	4b15      	ldr	r3, [pc, #84]	; (8002b58 <temperatureOnDisplay+0x6c>)
 8002b02:	4611      	mov	r1, r2
 8002b04:	7019      	strb	r1, [r3, #0]
 8002b06:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8002b0a:	7059      	strb	r1, [r3, #1]
 8002b0c:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8002b10:	709a      	strb	r2, [r3, #2]
	}
	firstSegment(numberToMatrix(temperatureResult.firstNumber));
 8002b12:	4b11      	ldr	r3, [pc, #68]	; (8002b58 <temperatureOnDisplay+0x6c>)
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7ff fbb6 	bl	8002288 <numberToMatrix>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7ff fc9e 	bl	8002460 <firstSegment>
	secondSegment(numberToMatrix(temperatureResult.secondNumber));
 8002b24:	4b0c      	ldr	r3, [pc, #48]	; (8002b58 <temperatureOnDisplay+0x6c>)
 8002b26:	785b      	ldrb	r3, [r3, #1]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7ff fbad 	bl	8002288 <numberToMatrix>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7ff fcc7 	bl	80024c4 <secondSegment>
	thirdSegment(numberToMatrix(temperatureResult.numberAfterPoint));
 8002b36:	4b08      	ldr	r3, [pc, #32]	; (8002b58 <temperatureOnDisplay+0x6c>)
 8002b38:	789b      	ldrb	r3, [r3, #2]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7ff fba4 	bl	8002288 <numberToMatrix>
 8002b40:	4603      	mov	r3, r0
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7ff fcf0 	bl	8002528 <thirdSegment>
	celsiusMark();
 8002b48:	f7ff fdb4 	bl	80026b4 <celsiusMark>
	ws2811_update();
 8002b4c:	f000 fdb2 	bl	80036b4 <ws2811_update>
}
 8002b50:	bf00      	nop
 8002b52:	3708      	adds	r7, #8
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	200008ec 	.word	0x200008ec

08002b5c <displayStop>:

void displayStop(void){
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
	ws2811_wait();
 8002b60:	f000 fdb8 	bl	80036d4 <ws2811_wait>
	ws2811_fullDisplayReset();
 8002b64:	f000 fd7a 	bl	800365c <ws2811_fullDisplayReset>
	ws2811_wait();
 8002b68:	f000 fdb4 	bl	80036d4 <ws2811_wait>
	ws2811_wait();
 8002b6c:	f000 fdb2 	bl	80036d4 <ws2811_wait>
}
 8002b70:	bf00      	nop
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <testSegments>:

void testSegments(void){
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
	firstSegment(eight);
 8002b78:	4807      	ldr	r0, [pc, #28]	; (8002b98 <testSegments+0x24>)
 8002b7a:	f7ff fc71 	bl	8002460 <firstSegment>
	secondSegment(eight);
 8002b7e:	4806      	ldr	r0, [pc, #24]	; (8002b98 <testSegments+0x24>)
 8002b80:	f7ff fca0 	bl	80024c4 <secondSegment>
	thirdSegment(eight);
 8002b84:	4804      	ldr	r0, [pc, #16]	; (8002b98 <testSegments+0x24>)
 8002b86:	f7ff fccf 	bl	8002528 <thirdSegment>
	fourthSegment(eight);
 8002b8a:	4803      	ldr	r0, [pc, #12]	; (8002b98 <testSegments+0x24>)
 8002b8c:	f7ff fcfe 	bl	800258c <fourthSegment>
	dwukropekTurnOn();
 8002b90:	f7ff fd2e 	bl	80025f0 <dwukropekTurnOn>
}
 8002b94:	bf00      	nop
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	20000054 	.word	0x20000054

08002b9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ba2:	4b0f      	ldr	r3, [pc, #60]	; (8002be0 <HAL_MspInit+0x44>)
 8002ba4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ba6:	4a0e      	ldr	r2, [pc, #56]	; (8002be0 <HAL_MspInit+0x44>)
 8002ba8:	f043 0301 	orr.w	r3, r3, #1
 8002bac:	6613      	str	r3, [r2, #96]	; 0x60
 8002bae:	4b0c      	ldr	r3, [pc, #48]	; (8002be0 <HAL_MspInit+0x44>)
 8002bb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	607b      	str	r3, [r7, #4]
 8002bb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bba:	4b09      	ldr	r3, [pc, #36]	; (8002be0 <HAL_MspInit+0x44>)
 8002bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bbe:	4a08      	ldr	r2, [pc, #32]	; (8002be0 <HAL_MspInit+0x44>)
 8002bc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bc4:	6593      	str	r3, [r2, #88]	; 0x58
 8002bc6:	4b06      	ldr	r3, [pc, #24]	; (8002be0 <HAL_MspInit+0x44>)
 8002bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bce:	603b      	str	r3, [r7, #0]
 8002bd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bd2:	bf00      	nop
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	40021000 	.word	0x40021000

08002be4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002be8:	e7fe      	b.n	8002be8 <NMI_Handler+0x4>

08002bea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bea:	b480      	push	{r7}
 8002bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bee:	e7fe      	b.n	8002bee <HardFault_Handler+0x4>

08002bf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bf4:	e7fe      	b.n	8002bf4 <MemManage_Handler+0x4>

08002bf6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bfa:	e7fe      	b.n	8002bfa <BusFault_Handler+0x4>

08002bfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c00:	e7fe      	b.n	8002c00 <UsageFault_Handler+0x4>

08002c02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c02:	b480      	push	{r7}
 8002c04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c06:	bf00      	nop
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c14:	bf00      	nop
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr

08002c1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c22:	bf00      	nop
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c30:	f000 fe14 	bl	800385c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c34:	bf00      	nop
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8002c3c:	4802      	ldr	r0, [pc, #8]	; (8002c48 <DMA1_Channel1_IRQHandler+0x10>)
 8002c3e:	f002 fb8f 	bl	8005360 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002c42:	bf00      	nop
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	200009fc 	.word	0x200009fc

08002c4c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002c50:	4802      	ldr	r0, [pc, #8]	; (8002c5c <TIM2_IRQHandler+0x10>)
 8002c52:	f005 fb9f 	bl	8008394 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002c56:	bf00      	nop
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	200009b0 	.word	0x200009b0

08002c60 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002c64:	4802      	ldr	r0, [pc, #8]	; (8002c70 <RTC_Alarm_IRQHandler+0x10>)
 8002c66:	f004 fce7 	bl	8007638 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8002c6a:	bf00      	nop
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	200008f0 	.word	0x200008f0

08002c74 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002c78:	4802      	ldr	r0, [pc, #8]	; (8002c84 <TIM6_DAC_IRQHandler+0x10>)
 8002c7a:	f005 fb8b 	bl	8008394 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002c7e:	bf00      	nop
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	20000964 	.word	0x20000964

08002c88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
	return 1;
 8002c8c:	2301      	movs	r3, #1
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <_kill>:

int _kill(int pid, int sig)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002ca2:	f007 fc89 	bl	800a5b8 <__errno>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2216      	movs	r2, #22
 8002caa:	601a      	str	r2, [r3, #0]
	return -1;
 8002cac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3708      	adds	r7, #8
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <_exit>:

void _exit (int status)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002cc0:	f04f 31ff 	mov.w	r1, #4294967295
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f7ff ffe7 	bl	8002c98 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002cca:	e7fe      	b.n	8002cca <_exit+0x12>

08002ccc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b086      	sub	sp, #24
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cd8:	2300      	movs	r3, #0
 8002cda:	617b      	str	r3, [r7, #20]
 8002cdc:	e00a      	b.n	8002cf4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002cde:	f3af 8000 	nop.w
 8002ce2:	4601      	mov	r1, r0
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	1c5a      	adds	r2, r3, #1
 8002ce8:	60ba      	str	r2, [r7, #8]
 8002cea:	b2ca      	uxtb	r2, r1
 8002cec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	617b      	str	r3, [r7, #20]
 8002cf4:	697a      	ldr	r2, [r7, #20]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	dbf0      	blt.n	8002cde <_read+0x12>
	}

return len;
 8002cfc:	687b      	ldr	r3, [r7, #4]
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3718      	adds	r7, #24
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b086      	sub	sp, #24
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	60f8      	str	r0, [r7, #12]
 8002d0e:	60b9      	str	r1, [r7, #8]
 8002d10:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d12:	2300      	movs	r3, #0
 8002d14:	617b      	str	r3, [r7, #20]
 8002d16:	e009      	b.n	8002d2c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	1c5a      	adds	r2, r3, #1
 8002d1c:	60ba      	str	r2, [r7, #8]
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7fe fb05 	bl	8001330 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	3301      	adds	r3, #1
 8002d2a:	617b      	str	r3, [r7, #20]
 8002d2c:	697a      	ldr	r2, [r7, #20]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	dbf1      	blt.n	8002d18 <_write+0x12>
	}
	return len;
 8002d34:	687b      	ldr	r3, [r7, #4]
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3718      	adds	r7, #24
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <_close>:

int _close(int file)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	b083      	sub	sp, #12
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
	return -1;
 8002d46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr

08002d56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d56:	b480      	push	{r7}
 8002d58:	b083      	sub	sp, #12
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
 8002d5e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d66:	605a      	str	r2, [r3, #4]
	return 0;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr

08002d76 <_isatty>:

int _isatty(int file)
{
 8002d76:	b480      	push	{r7}
 8002d78:	b083      	sub	sp, #12
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
	return 1;
 8002d7e:	2301      	movs	r3, #1
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	607a      	str	r2, [r7, #4]
	return 0;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3714      	adds	r7, #20
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
	...

08002da8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b086      	sub	sp, #24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002db0:	4a14      	ldr	r2, [pc, #80]	; (8002e04 <_sbrk+0x5c>)
 8002db2:	4b15      	ldr	r3, [pc, #84]	; (8002e08 <_sbrk+0x60>)
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002dbc:	4b13      	ldr	r3, [pc, #76]	; (8002e0c <_sbrk+0x64>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d102      	bne.n	8002dca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002dc4:	4b11      	ldr	r3, [pc, #68]	; (8002e0c <_sbrk+0x64>)
 8002dc6:	4a12      	ldr	r2, [pc, #72]	; (8002e10 <_sbrk+0x68>)
 8002dc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002dca:	4b10      	ldr	r3, [pc, #64]	; (8002e0c <_sbrk+0x64>)
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	693a      	ldr	r2, [r7, #16]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d207      	bcs.n	8002de8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002dd8:	f007 fbee 	bl	800a5b8 <__errno>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	220c      	movs	r2, #12
 8002de0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002de2:	f04f 33ff 	mov.w	r3, #4294967295
 8002de6:	e009      	b.n	8002dfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002de8:	4b08      	ldr	r3, [pc, #32]	; (8002e0c <_sbrk+0x64>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dee:	4b07      	ldr	r3, [pc, #28]	; (8002e0c <_sbrk+0x64>)
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4413      	add	r3, r2
 8002df6:	4a05      	ldr	r2, [pc, #20]	; (8002e0c <_sbrk+0x64>)
 8002df8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3718      	adds	r7, #24
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	20018000 	.word	0x20018000
 8002e08:	00000400 	.word	0x00000400
 8002e0c:	200002a4 	.word	0x200002a4
 8002e10:	20000ae0 	.word	0x20000ae0

08002e14 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002e18:	4b15      	ldr	r3, [pc, #84]	; (8002e70 <SystemInit+0x5c>)
 8002e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e1e:	4a14      	ldr	r2, [pc, #80]	; (8002e70 <SystemInit+0x5c>)
 8002e20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002e28:	4b12      	ldr	r3, [pc, #72]	; (8002e74 <SystemInit+0x60>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a11      	ldr	r2, [pc, #68]	; (8002e74 <SystemInit+0x60>)
 8002e2e:	f043 0301 	orr.w	r3, r3, #1
 8002e32:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002e34:	4b0f      	ldr	r3, [pc, #60]	; (8002e74 <SystemInit+0x60>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002e3a:	4b0e      	ldr	r3, [pc, #56]	; (8002e74 <SystemInit+0x60>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a0d      	ldr	r2, [pc, #52]	; (8002e74 <SystemInit+0x60>)
 8002e40:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002e44:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002e48:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002e4a:	4b0a      	ldr	r3, [pc, #40]	; (8002e74 <SystemInit+0x60>)
 8002e4c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e50:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002e52:	4b08      	ldr	r3, [pc, #32]	; (8002e74 <SystemInit+0x60>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a07      	ldr	r2, [pc, #28]	; (8002e74 <SystemInit+0x60>)
 8002e58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e5c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002e5e:	4b05      	ldr	r3, [pc, #20]	; (8002e74 <SystemInit+0x60>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	619a      	str	r2, [r3, #24]
}
 8002e64:	bf00      	nop
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	e000ed00 	.word	0xe000ed00
 8002e74:	40021000 	.word	0x40021000

08002e78 <Thermister>:

#include "temperature_sensor.h"
#include <stdio.h>

// FROM DATASHEET
double Thermister(uint32_t RawADC) {
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  double Temp;
    Temp = log(((10240000 / (1024-RawADC)) - 10000));
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8002e86:	4a36      	ldr	r2, [pc, #216]	; (8002f60 <Thermister+0xe8>)
 8002e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e8c:	f5a3 531c 	sub.w	r3, r3, #9984	; 0x2700
 8002e90:	3b10      	subs	r3, #16
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7fd fb36 	bl	8000504 <__aeabi_ui2d>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	460b      	mov	r3, r1
 8002e9c:	ec43 2b10 	vmov	d0, r2, r3
 8002ea0:	f00a f8a6 	bl	800cff0 <log>
 8002ea4:	ed87 0b02 	vstr	d0, [r7, #8]
    Temp = 1 / (0.001129148 + (0.000234125 + (0.0000000876741 * Temp * Temp )) * Temp );
 8002ea8:	a325      	add	r3, pc, #148	; (adr r3, 8002f40 <Thermister+0xc8>)
 8002eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002eb2:	f7fd fba1 	bl	80005f8 <__aeabi_dmul>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	460b      	mov	r3, r1
 8002eba:	4610      	mov	r0, r2
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ec2:	f7fd fb99 	bl	80005f8 <__aeabi_dmul>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	460b      	mov	r3, r1
 8002eca:	4610      	mov	r0, r2
 8002ecc:	4619      	mov	r1, r3
 8002ece:	a31e      	add	r3, pc, #120	; (adr r3, 8002f48 <Thermister+0xd0>)
 8002ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed4:	f7fd f9da 	bl	800028c <__adddf3>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	460b      	mov	r3, r1
 8002edc:	4610      	mov	r0, r2
 8002ede:	4619      	mov	r1, r3
 8002ee0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ee4:	f7fd fb88 	bl	80005f8 <__aeabi_dmul>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	460b      	mov	r3, r1
 8002eec:	4610      	mov	r0, r2
 8002eee:	4619      	mov	r1, r3
 8002ef0:	a317      	add	r3, pc, #92	; (adr r3, 8002f50 <Thermister+0xd8>)
 8002ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef6:	f7fd f9c9 	bl	800028c <__adddf3>
 8002efa:	4602      	mov	r2, r0
 8002efc:	460b      	mov	r3, r1
 8002efe:	f04f 0000 	mov.w	r0, #0
 8002f02:	4918      	ldr	r1, [pc, #96]	; (8002f64 <Thermister+0xec>)
 8002f04:	f7fd fca2 	bl	800084c <__aeabi_ddiv>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    Temp = Temp - 273.15;
 8002f10:	a311      	add	r3, pc, #68	; (adr r3, 8002f58 <Thermister+0xe0>)
 8002f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f16:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002f1a:	f7fd f9b5 	bl	8000288 <__aeabi_dsub>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	460b      	mov	r3, r1
 8002f22:	e9c7 2302 	strd	r2, r3, [r7, #8]
    return Temp;
 8002f26:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f2a:	ec43 2b17 	vmov	d7, r2, r3
  return Temp;
}
 8002f2e:	eeb0 0a47 	vmov.f32	s0, s14
 8002f32:	eef0 0a67 	vmov.f32	s1, s15
 8002f36:	3710      	adds	r7, #16
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	f3af 8000 	nop.w
 8002f40:	14170d19 	.word	0x14170d19
 8002f44:	3e7788eb 	.word	0x3e7788eb
 8002f48:	6fb4c3c2 	.word	0x6fb4c3c2
 8002f4c:	3f2eafee 	.word	0x3f2eafee
 8002f50:	6edeb890 	.word	0x6edeb890
 8002f54:	3f527ffd 	.word	0x3f527ffd
 8002f58:	66666666 	.word	0x66666666
 8002f5c:	40711266 	.word	0x40711266
 8002f60:	009c4000 	.word	0x009c4000
 8002f64:	3ff00000 	.word	0x3ff00000

08002f68 <temperatureMeasure>:



// TEMPERATURE MEASURE
double temperatureMeasure(){
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
	// Calibration
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8002f6e:	217f      	movs	r1, #127	; 0x7f
 8002f70:	4812      	ldr	r0, [pc, #72]	; (8002fbc <temperatureMeasure+0x54>)
 8002f72:	f001 febb 	bl	8004cec <HAL_ADCEx_Calibration_Start>

	// Measure start:
	HAL_ADC_Start(&hadc1);
 8002f76:	4811      	ldr	r0, [pc, #68]	; (8002fbc <temperatureMeasure+0x54>)
 8002f78:	f001 f814 	bl	8003fa4 <HAL_ADC_Start>
	// Wait for result:
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8002f7c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f80:	480e      	ldr	r0, [pc, #56]	; (8002fbc <temperatureMeasure+0x54>)
 8002f82:	f001 f8c9 	bl	8004118 <HAL_ADC_PollForConversion>

	// get resistance value
	uint32_t value=HAL_ADC_GetValue(&hadc1);
 8002f86:	480d      	ldr	r0, [pc, #52]	; (8002fbc <temperatureMeasure+0x54>)
 8002f88:	f001 f99e 	bl	80042c8 <HAL_ADC_GetValue>
 8002f8c:	60f8      	str	r0, [r7, #12]

	// Transform to temperature
	double temperature =Thermister(value);
 8002f8e:	68f8      	ldr	r0, [r7, #12]
 8002f90:	f7ff ff72 	bl	8002e78 <Thermister>
 8002f94:	ed87 0b00 	vstr	d0, [r7]

	// for USART comunnication
	printf("ADC= %lu temperature %lf \n, ", value, temperature);
 8002f98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f9c:	68f9      	ldr	r1, [r7, #12]
 8002f9e:	4808      	ldr	r0, [pc, #32]	; (8002fc0 <temperatureMeasure+0x58>)
 8002fa0:	f007 ffa6 	bl	800aef0 <iprintf>

	return temperature;
 8002fa4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002fa8:	ec43 2b17 	vmov	d7, r2, r3

	}
 8002fac:	eeb0 0a47 	vmov.f32	s0, s14
 8002fb0:	eef0 0a67 	vmov.f32	s1, s15
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	20000888 	.word	0x20000888
 8002fc0:	0800d42c 	.word	0x0800d42c

08002fc4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
DMA_HandleTypeDef hdma_tim4_ch1;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b090      	sub	sp, #64	; 0x40
 8002fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002fce:	2200      	movs	r2, #0
 8002fd0:	601a      	str	r2, [r3, #0]
 8002fd2:	605a      	str	r2, [r3, #4]
 8002fd4:	609a      	str	r2, [r3, #8]
 8002fd6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002fd8:	f107 031c 	add.w	r3, r7, #28
 8002fdc:	2200      	movs	r2, #0
 8002fde:	601a      	str	r2, [r3, #0]
 8002fe0:	605a      	str	r2, [r3, #4]
 8002fe2:	609a      	str	r2, [r3, #8]
 8002fe4:	60da      	str	r2, [r3, #12]
 8002fe6:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fe8:	f107 0310 	add.w	r3, r7, #16
 8002fec:	2200      	movs	r2, #0
 8002fee:	601a      	str	r2, [r3, #0]
 8002ff0:	605a      	str	r2, [r3, #4]
 8002ff2:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002ff4:	463b      	mov	r3, r7
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	601a      	str	r2, [r3, #0]
 8002ffa:	605a      	str	r2, [r3, #4]
 8002ffc:	609a      	str	r2, [r3, #8]
 8002ffe:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003000:	4b35      	ldr	r3, [pc, #212]	; (80030d8 <MX_TIM2_Init+0x114>)
 8003002:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003006:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8003008:	4b33      	ldr	r3, [pc, #204]	; (80030d8 <MX_TIM2_Init+0x114>)
 800300a:	224f      	movs	r2, #79	; 0x4f
 800300c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800300e:	4b32      	ldr	r3, [pc, #200]	; (80030d8 <MX_TIM2_Init+0x114>)
 8003010:	2200      	movs	r2, #0
 8003012:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003014:	4b30      	ldr	r3, [pc, #192]	; (80030d8 <MX_TIM2_Init+0x114>)
 8003016:	f04f 32ff 	mov.w	r2, #4294967295
 800301a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800301c:	4b2e      	ldr	r3, [pc, #184]	; (80030d8 <MX_TIM2_Init+0x114>)
 800301e:	2200      	movs	r2, #0
 8003020:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003022:	4b2d      	ldr	r3, [pc, #180]	; (80030d8 <MX_TIM2_Init+0x114>)
 8003024:	2200      	movs	r2, #0
 8003026:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003028:	482b      	ldr	r0, [pc, #172]	; (80030d8 <MX_TIM2_Init+0x114>)
 800302a:	f004 fc56 	bl	80078da <HAL_TIM_Base_Init>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d001      	beq.n	8003038 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8003034:	f7fe fb24 	bl	8001680 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003038:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800303c:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800303e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003042:	4619      	mov	r1, r3
 8003044:	4824      	ldr	r0, [pc, #144]	; (80030d8 <MX_TIM2_Init+0x114>)
 8003046:	f005 fc75 	bl	8008934 <HAL_TIM_ConfigClockSource>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d001      	beq.n	8003054 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8003050:	f7fe fb16 	bl	8001680 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8003054:	4820      	ldr	r0, [pc, #128]	; (80030d8 <MX_TIM2_Init+0x114>)
 8003056:	f004 fff1 	bl	800803c <HAL_TIM_IC_Init>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8003060:	f7fe fb0e 	bl	8001680 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8003064:	2304      	movs	r3, #4
 8003066:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 8003068:	2340      	movs	r3, #64	; 0x40
 800306a:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800306c:	2300      	movs	r3, #0
 800306e:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8003070:	2300      	movs	r3, #0
 8003072:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8003074:	f107 031c 	add.w	r3, r7, #28
 8003078:	4619      	mov	r1, r3
 800307a:	4817      	ldr	r0, [pc, #92]	; (80030d8 <MX_TIM2_Init+0x114>)
 800307c:	f005 fd23 	bl	8008ac6 <HAL_TIM_SlaveConfigSynchro>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 8003086:	f7fe fafb 	bl	8001680 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800308a:	2300      	movs	r3, #0
 800308c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800308e:	2300      	movs	r3, #0
 8003090:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003092:	f107 0310 	add.w	r3, r7, #16
 8003096:	4619      	mov	r1, r3
 8003098:	480f      	ldr	r0, [pc, #60]	; (80030d8 <MX_TIM2_Init+0x114>)
 800309a:	f006 fccb 	bl	8009a34 <HAL_TIMEx_MasterConfigSynchronization>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d001      	beq.n	80030a8 <MX_TIM2_Init+0xe4>
  {
    Error_Handler();
 80030a4:	f7fe faec 	bl	8001680 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80030a8:	2302      	movs	r3, #2
 80030aa:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80030ac:	2301      	movs	r3, #1
 80030ae:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80030b0:	2300      	movs	r3, #0
 80030b2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80030b4:	2300      	movs	r3, #0
 80030b6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80030b8:	463b      	mov	r3, r7
 80030ba:	2200      	movs	r2, #0
 80030bc:	4619      	mov	r1, r3
 80030be:	4806      	ldr	r0, [pc, #24]	; (80030d8 <MX_TIM2_Init+0x114>)
 80030c0:	f005 fa87 	bl	80085d2 <HAL_TIM_IC_ConfigChannel>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <MX_TIM2_Init+0x10a>
  {
    Error_Handler();
 80030ca:	f7fe fad9 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80030ce:	bf00      	nop
 80030d0:	3740      	adds	r7, #64	; 0x40
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	200009b0 	.word	0x200009b0

080030dc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b08e      	sub	sp, #56	; 0x38
 80030e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80030e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80030e6:	2200      	movs	r2, #0
 80030e8:	601a      	str	r2, [r3, #0]
 80030ea:	605a      	str	r2, [r3, #4]
 80030ec:	609a      	str	r2, [r3, #8]
 80030ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030f0:	f107 031c 	add.w	r3, r7, #28
 80030f4:	2200      	movs	r2, #0
 80030f6:	601a      	str	r2, [r3, #0]
 80030f8:	605a      	str	r2, [r3, #4]
 80030fa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80030fc:	463b      	mov	r3, r7
 80030fe:	2200      	movs	r2, #0
 8003100:	601a      	str	r2, [r3, #0]
 8003102:	605a      	str	r2, [r3, #4]
 8003104:	609a      	str	r2, [r3, #8]
 8003106:	60da      	str	r2, [r3, #12]
 8003108:	611a      	str	r2, [r3, #16]
 800310a:	615a      	str	r2, [r3, #20]
 800310c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800310e:	4b2c      	ldr	r3, [pc, #176]	; (80031c0 <MX_TIM4_Init+0xe4>)
 8003110:	4a2c      	ldr	r2, [pc, #176]	; (80031c4 <MX_TIM4_Init+0xe8>)
 8003112:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003114:	4b2a      	ldr	r3, [pc, #168]	; (80031c0 <MX_TIM4_Init+0xe4>)
 8003116:	2200      	movs	r2, #0
 8003118:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800311a:	4b29      	ldr	r3, [pc, #164]	; (80031c0 <MX_TIM4_Init+0xe4>)
 800311c:	2200      	movs	r2, #0
 800311e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 199;
 8003120:	4b27      	ldr	r3, [pc, #156]	; (80031c0 <MX_TIM4_Init+0xe4>)
 8003122:	22c7      	movs	r2, #199	; 0xc7
 8003124:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003126:	4b26      	ldr	r3, [pc, #152]	; (80031c0 <MX_TIM4_Init+0xe4>)
 8003128:	2200      	movs	r2, #0
 800312a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800312c:	4b24      	ldr	r3, [pc, #144]	; (80031c0 <MX_TIM4_Init+0xe4>)
 800312e:	2200      	movs	r2, #0
 8003130:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003132:	4823      	ldr	r0, [pc, #140]	; (80031c0 <MX_TIM4_Init+0xe4>)
 8003134:	f004 fbd1 	bl	80078da <HAL_TIM_Base_Init>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d001      	beq.n	8003142 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800313e:	f7fe fa9f 	bl	8001680 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003142:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003146:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003148:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800314c:	4619      	mov	r1, r3
 800314e:	481c      	ldr	r0, [pc, #112]	; (80031c0 <MX_TIM4_Init+0xe4>)
 8003150:	f005 fbf0 	bl	8008934 <HAL_TIM_ConfigClockSource>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800315a:	f7fe fa91 	bl	8001680 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800315e:	4818      	ldr	r0, [pc, #96]	; (80031c0 <MX_TIM4_Init+0xe4>)
 8003160:	f004 fcea 	bl	8007b38 <HAL_TIM_PWM_Init>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d001      	beq.n	800316e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800316a:	f7fe fa89 	bl	8001680 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800316e:	2300      	movs	r3, #0
 8003170:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003172:	2300      	movs	r3, #0
 8003174:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003176:	f107 031c 	add.w	r3, r7, #28
 800317a:	4619      	mov	r1, r3
 800317c:	4810      	ldr	r0, [pc, #64]	; (80031c0 <MX_TIM4_Init+0xe4>)
 800317e:	f006 fc59 	bl	8009a34 <HAL_TIMEx_MasterConfigSynchronization>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d001      	beq.n	800318c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8003188:	f7fe fa7a 	bl	8001680 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800318c:	2360      	movs	r3, #96	; 0x60
 800318e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003190:	2300      	movs	r3, #0
 8003192:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003194:	2300      	movs	r3, #0
 8003196:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003198:	2300      	movs	r3, #0
 800319a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800319c:	463b      	mov	r3, r7
 800319e:	2200      	movs	r2, #0
 80031a0:	4619      	mov	r1, r3
 80031a2:	4807      	ldr	r0, [pc, #28]	; (80031c0 <MX_TIM4_Init+0xe4>)
 80031a4:	f005 fab2 	bl	800870c <HAL_TIM_PWM_ConfigChannel>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d001      	beq.n	80031b2 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80031ae:	f7fe fa67 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80031b2:	4803      	ldr	r0, [pc, #12]	; (80031c0 <MX_TIM4_Init+0xe4>)
 80031b4:	f000 f8d6 	bl	8003364 <HAL_TIM_MspPostInit>

}
 80031b8:	bf00      	nop
 80031ba:	3738      	adds	r7, #56	; 0x38
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	20000918 	.word	0x20000918
 80031c4:	40000800 	.word	0x40000800

080031c8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031ce:	1d3b      	adds	r3, r7, #4
 80031d0:	2200      	movs	r2, #0
 80031d2:	601a      	str	r2, [r3, #0]
 80031d4:	605a      	str	r2, [r3, #4]
 80031d6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80031d8:	4b15      	ldr	r3, [pc, #84]	; (8003230 <MX_TIM6_Init+0x68>)
 80031da:	4a16      	ldr	r2, [pc, #88]	; (8003234 <MX_TIM6_Init+0x6c>)
 80031dc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 80031de:	4b14      	ldr	r3, [pc, #80]	; (8003230 <MX_TIM6_Init+0x68>)
 80031e0:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80031e4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031e6:	4b12      	ldr	r3, [pc, #72]	; (8003230 <MX_TIM6_Init+0x68>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 2499;
 80031ec:	4b10      	ldr	r3, [pc, #64]	; (8003230 <MX_TIM6_Init+0x68>)
 80031ee:	f640 12c3 	movw	r2, #2499	; 0x9c3
 80031f2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031f4:	4b0e      	ldr	r3, [pc, #56]	; (8003230 <MX_TIM6_Init+0x68>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80031fa:	480d      	ldr	r0, [pc, #52]	; (8003230 <MX_TIM6_Init+0x68>)
 80031fc:	f004 fb6d 	bl	80078da <HAL_TIM_Base_Init>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8003206:	f7fe fa3b 	bl	8001680 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800320a:	2300      	movs	r3, #0
 800320c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800320e:	2300      	movs	r3, #0
 8003210:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003212:	1d3b      	adds	r3, r7, #4
 8003214:	4619      	mov	r1, r3
 8003216:	4806      	ldr	r0, [pc, #24]	; (8003230 <MX_TIM6_Init+0x68>)
 8003218:	f006 fc0c 	bl	8009a34 <HAL_TIMEx_MasterConfigSynchronization>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d001      	beq.n	8003226 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8003222:	f7fe fa2d 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003226:	bf00      	nop
 8003228:	3710      	adds	r7, #16
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	20000964 	.word	0x20000964
 8003234:	40001000 	.word	0x40001000

08003238 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b08c      	sub	sp, #48	; 0x30
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003240:	f107 031c 	add.w	r3, r7, #28
 8003244:	2200      	movs	r2, #0
 8003246:	601a      	str	r2, [r3, #0]
 8003248:	605a      	str	r2, [r3, #4]
 800324a:	609a      	str	r2, [r3, #8]
 800324c:	60da      	str	r2, [r3, #12]
 800324e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003258:	d129      	bne.n	80032ae <HAL_TIM_Base_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800325a:	4b3d      	ldr	r3, [pc, #244]	; (8003350 <HAL_TIM_Base_MspInit+0x118>)
 800325c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800325e:	4a3c      	ldr	r2, [pc, #240]	; (8003350 <HAL_TIM_Base_MspInit+0x118>)
 8003260:	f043 0301 	orr.w	r3, r3, #1
 8003264:	6593      	str	r3, [r2, #88]	; 0x58
 8003266:	4b3a      	ldr	r3, [pc, #232]	; (8003350 <HAL_TIM_Base_MspInit+0x118>)
 8003268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	61bb      	str	r3, [r7, #24]
 8003270:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003272:	4b37      	ldr	r3, [pc, #220]	; (8003350 <HAL_TIM_Base_MspInit+0x118>)
 8003274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003276:	4a36      	ldr	r2, [pc, #216]	; (8003350 <HAL_TIM_Base_MspInit+0x118>)
 8003278:	f043 0301 	orr.w	r3, r3, #1
 800327c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800327e:	4b34      	ldr	r3, [pc, #208]	; (8003350 <HAL_TIM_Base_MspInit+0x118>)
 8003280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	617b      	str	r3, [r7, #20]
 8003288:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800328a:	2301      	movs	r3, #1
 800328c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800328e:	2302      	movs	r3, #2
 8003290:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003292:	2300      	movs	r3, #0
 8003294:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003296:	2300      	movs	r3, #0
 8003298:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800329a:	2301      	movs	r3, #1
 800329c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800329e:	f107 031c 	add.w	r3, r7, #28
 80032a2:	4619      	mov	r1, r3
 80032a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032a8:	f002 f93a 	bl	8005520 <HAL_GPIO_Init>
    __HAL_RCC_TIM6_CLK_ENABLE();
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80032ac:	e04c      	b.n	8003348 <HAL_TIM_Base_MspInit+0x110>
  else if(tim_baseHandle->Instance==TIM4)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a28      	ldr	r2, [pc, #160]	; (8003354 <HAL_TIM_Base_MspInit+0x11c>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d136      	bne.n	8003326 <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80032b8:	4b25      	ldr	r3, [pc, #148]	; (8003350 <HAL_TIM_Base_MspInit+0x118>)
 80032ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032bc:	4a24      	ldr	r2, [pc, #144]	; (8003350 <HAL_TIM_Base_MspInit+0x118>)
 80032be:	f043 0304 	orr.w	r3, r3, #4
 80032c2:	6593      	str	r3, [r2, #88]	; 0x58
 80032c4:	4b22      	ldr	r3, [pc, #136]	; (8003350 <HAL_TIM_Base_MspInit+0x118>)
 80032c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032c8:	f003 0304 	and.w	r3, r3, #4
 80032cc:	613b      	str	r3, [r7, #16]
 80032ce:	693b      	ldr	r3, [r7, #16]
    hdma_tim4_ch1.Instance = DMA1_Channel1;
 80032d0:	4b21      	ldr	r3, [pc, #132]	; (8003358 <HAL_TIM_Base_MspInit+0x120>)
 80032d2:	4a22      	ldr	r2, [pc, #136]	; (800335c <HAL_TIM_Base_MspInit+0x124>)
 80032d4:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Request = DMA_REQUEST_6;
 80032d6:	4b20      	ldr	r3, [pc, #128]	; (8003358 <HAL_TIM_Base_MspInit+0x120>)
 80032d8:	2206      	movs	r2, #6
 80032da:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80032dc:	4b1e      	ldr	r3, [pc, #120]	; (8003358 <HAL_TIM_Base_MspInit+0x120>)
 80032de:	2210      	movs	r2, #16
 80032e0:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80032e2:	4b1d      	ldr	r3, [pc, #116]	; (8003358 <HAL_TIM_Base_MspInit+0x120>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80032e8:	4b1b      	ldr	r3, [pc, #108]	; (8003358 <HAL_TIM_Base_MspInit+0x120>)
 80032ea:	2280      	movs	r2, #128	; 0x80
 80032ec:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80032ee:	4b1a      	ldr	r3, [pc, #104]	; (8003358 <HAL_TIM_Base_MspInit+0x120>)
 80032f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032f4:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80032f6:	4b18      	ldr	r3, [pc, #96]	; (8003358 <HAL_TIM_Base_MspInit+0x120>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_NORMAL;
 80032fc:	4b16      	ldr	r3, [pc, #88]	; (8003358 <HAL_TIM_Base_MspInit+0x120>)
 80032fe:	2200      	movs	r2, #0
 8003300:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003302:	4b15      	ldr	r3, [pc, #84]	; (8003358 <HAL_TIM_Base_MspInit+0x120>)
 8003304:	2200      	movs	r2, #0
 8003306:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 8003308:	4813      	ldr	r0, [pc, #76]	; (8003358 <HAL_TIM_Base_MspInit+0x120>)
 800330a:	f001 ff11 	bl	8005130 <HAL_DMA_Init>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d001      	beq.n	8003318 <HAL_TIM_Base_MspInit+0xe0>
      Error_Handler();
 8003314:	f7fe f9b4 	bl	8001680 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a0f      	ldr	r2, [pc, #60]	; (8003358 <HAL_TIM_Base_MspInit+0x120>)
 800331c:	625a      	str	r2, [r3, #36]	; 0x24
 800331e:	4a0e      	ldr	r2, [pc, #56]	; (8003358 <HAL_TIM_Base_MspInit+0x120>)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6293      	str	r3, [r2, #40]	; 0x28
}
 8003324:	e010      	b.n	8003348 <HAL_TIM_Base_MspInit+0x110>
  else if(tim_baseHandle->Instance==TIM6)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a0d      	ldr	r2, [pc, #52]	; (8003360 <HAL_TIM_Base_MspInit+0x128>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d10b      	bne.n	8003348 <HAL_TIM_Base_MspInit+0x110>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003330:	4b07      	ldr	r3, [pc, #28]	; (8003350 <HAL_TIM_Base_MspInit+0x118>)
 8003332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003334:	4a06      	ldr	r2, [pc, #24]	; (8003350 <HAL_TIM_Base_MspInit+0x118>)
 8003336:	f043 0310 	orr.w	r3, r3, #16
 800333a:	6593      	str	r3, [r2, #88]	; 0x58
 800333c:	4b04      	ldr	r3, [pc, #16]	; (8003350 <HAL_TIM_Base_MspInit+0x118>)
 800333e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003340:	f003 0310 	and.w	r3, r3, #16
 8003344:	60fb      	str	r3, [r7, #12]
 8003346:	68fb      	ldr	r3, [r7, #12]
}
 8003348:	bf00      	nop
 800334a:	3730      	adds	r7, #48	; 0x30
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	40021000 	.word	0x40021000
 8003354:	40000800 	.word	0x40000800
 8003358:	200009fc 	.word	0x200009fc
 800335c:	40020008 	.word	0x40020008
 8003360:	40001000 	.word	0x40001000

08003364 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b088      	sub	sp, #32
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800336c:	f107 030c 	add.w	r3, r7, #12
 8003370:	2200      	movs	r2, #0
 8003372:	601a      	str	r2, [r3, #0]
 8003374:	605a      	str	r2, [r3, #4]
 8003376:	609a      	str	r2, [r3, #8]
 8003378:	60da      	str	r2, [r3, #12]
 800337a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a11      	ldr	r2, [pc, #68]	; (80033c8 <HAL_TIM_MspPostInit+0x64>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d11b      	bne.n	80033be <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003386:	4b11      	ldr	r3, [pc, #68]	; (80033cc <HAL_TIM_MspPostInit+0x68>)
 8003388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800338a:	4a10      	ldr	r2, [pc, #64]	; (80033cc <HAL_TIM_MspPostInit+0x68>)
 800338c:	f043 0302 	orr.w	r3, r3, #2
 8003390:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003392:	4b0e      	ldr	r3, [pc, #56]	; (80033cc <HAL_TIM_MspPostInit+0x68>)
 8003394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	60bb      	str	r3, [r7, #8]
 800339c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800339e:	2340      	movs	r3, #64	; 0x40
 80033a0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033a2:	2302      	movs	r3, #2
 80033a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a6:	2300      	movs	r3, #0
 80033a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033aa:	2300      	movs	r3, #0
 80033ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80033ae:	2302      	movs	r3, #2
 80033b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033b2:	f107 030c 	add.w	r3, r7, #12
 80033b6:	4619      	mov	r1, r3
 80033b8:	4805      	ldr	r0, [pc, #20]	; (80033d0 <HAL_TIM_MspPostInit+0x6c>)
 80033ba:	f002 f8b1 	bl	8005520 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80033be:	bf00      	nop
 80033c0:	3720      	adds	r7, #32
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	40000800 	.word	0x40000800
 80033cc:	40021000 	.word	0x40021000
 80033d0:	48000400 	.word	0x48000400

080033d4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80033d8:	4b14      	ldr	r3, [pc, #80]	; (800342c <MX_USART2_UART_Init+0x58>)
 80033da:	4a15      	ldr	r2, [pc, #84]	; (8003430 <MX_USART2_UART_Init+0x5c>)
 80033dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80033de:	4b13      	ldr	r3, [pc, #76]	; (800342c <MX_USART2_UART_Init+0x58>)
 80033e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80033e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80033e6:	4b11      	ldr	r3, [pc, #68]	; (800342c <MX_USART2_UART_Init+0x58>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80033ec:	4b0f      	ldr	r3, [pc, #60]	; (800342c <MX_USART2_UART_Init+0x58>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80033f2:	4b0e      	ldr	r3, [pc, #56]	; (800342c <MX_USART2_UART_Init+0x58>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80033f8:	4b0c      	ldr	r3, [pc, #48]	; (800342c <MX_USART2_UART_Init+0x58>)
 80033fa:	220c      	movs	r2, #12
 80033fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033fe:	4b0b      	ldr	r3, [pc, #44]	; (800342c <MX_USART2_UART_Init+0x58>)
 8003400:	2200      	movs	r2, #0
 8003402:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003404:	4b09      	ldr	r3, [pc, #36]	; (800342c <MX_USART2_UART_Init+0x58>)
 8003406:	2200      	movs	r2, #0
 8003408:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800340a:	4b08      	ldr	r3, [pc, #32]	; (800342c <MX_USART2_UART_Init+0x58>)
 800340c:	2200      	movs	r2, #0
 800340e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003410:	4b06      	ldr	r3, [pc, #24]	; (800342c <MX_USART2_UART_Init+0x58>)
 8003412:	2200      	movs	r2, #0
 8003414:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003416:	4805      	ldr	r0, [pc, #20]	; (800342c <MX_USART2_UART_Init+0x58>)
 8003418:	f006 fbb2 	bl	8009b80 <HAL_UART_Init>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003422:	f7fe f92d 	bl	8001680 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003426:	bf00      	nop
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	20000a44 	.word	0x20000a44
 8003430:	40004400 	.word	0x40004400

08003434 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b0ac      	sub	sp, #176	; 0xb0
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800343c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003440:	2200      	movs	r2, #0
 8003442:	601a      	str	r2, [r3, #0]
 8003444:	605a      	str	r2, [r3, #4]
 8003446:	609a      	str	r2, [r3, #8]
 8003448:	60da      	str	r2, [r3, #12]
 800344a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800344c:	f107 0314 	add.w	r3, r7, #20
 8003450:	2288      	movs	r2, #136	; 0x88
 8003452:	2100      	movs	r1, #0
 8003454:	4618      	mov	r0, r3
 8003456:	f007 f8d9 	bl	800a60c <memset>
  if(uartHandle->Instance==USART2)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a21      	ldr	r2, [pc, #132]	; (80034e4 <HAL_UART_MspInit+0xb0>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d13b      	bne.n	80034dc <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003464:	2302      	movs	r3, #2
 8003466:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003468:	2300      	movs	r3, #0
 800346a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800346c:	f107 0314 	add.w	r3, r7, #20
 8003470:	4618      	mov	r0, r3
 8003472:	f003 f891 	bl	8006598 <HAL_RCCEx_PeriphCLKConfig>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d001      	beq.n	8003480 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800347c:	f7fe f900 	bl	8001680 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003480:	4b19      	ldr	r3, [pc, #100]	; (80034e8 <HAL_UART_MspInit+0xb4>)
 8003482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003484:	4a18      	ldr	r2, [pc, #96]	; (80034e8 <HAL_UART_MspInit+0xb4>)
 8003486:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800348a:	6593      	str	r3, [r2, #88]	; 0x58
 800348c:	4b16      	ldr	r3, [pc, #88]	; (80034e8 <HAL_UART_MspInit+0xb4>)
 800348e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003494:	613b      	str	r3, [r7, #16]
 8003496:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003498:	4b13      	ldr	r3, [pc, #76]	; (80034e8 <HAL_UART_MspInit+0xb4>)
 800349a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800349c:	4a12      	ldr	r2, [pc, #72]	; (80034e8 <HAL_UART_MspInit+0xb4>)
 800349e:	f043 0301 	orr.w	r3, r3, #1
 80034a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80034a4:	4b10      	ldr	r3, [pc, #64]	; (80034e8 <HAL_UART_MspInit+0xb4>)
 80034a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034a8:	f003 0301 	and.w	r3, r3, #1
 80034ac:	60fb      	str	r3, [r7, #12]
 80034ae:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80034b0:	230c      	movs	r3, #12
 80034b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b6:	2302      	movs	r3, #2
 80034b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034bc:	2300      	movs	r3, #0
 80034be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034c2:	2303      	movs	r3, #3
 80034c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80034c8:	2307      	movs	r3, #7
 80034ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034ce:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80034d2:	4619      	mov	r1, r3
 80034d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034d8:	f002 f822 	bl	8005520 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80034dc:	bf00      	nop
 80034de:	37b0      	adds	r7, #176	; 0xb0
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	40004400 	.word	0x40004400
 80034e8:	40021000 	.word	0x40021000

080034ec <set_byte>:

static uint8_t led_buffer[RESET_LEN+24*LED_N+1];

// Konwertowanie 8 bitowej liczby na 8 bajtow;

static void set_byte(uint32_t pos, uint8_t value){
 80034ec:	b480      	push	{r7}
 80034ee:	b085      	sub	sp, #20
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	460b      	mov	r3, r1
 80034f6:	70fb      	strb	r3, [r7, #3]
	int i;
	for(i=0; i<8;i++){
 80034f8:	2300      	movs	r3, #0
 80034fa:	60fb      	str	r3, [r7, #12]
 80034fc:	e016      	b.n	800352c <set_byte+0x40>
		if(value & 0x80){
 80034fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003502:	2b00      	cmp	r3, #0
 8003504:	da06      	bge.n	8003514 <set_byte+0x28>
			led_buffer[pos+i]=BIT_1_TIME;
 8003506:	68fa      	ldr	r2, [r7, #12]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4413      	add	r3, r2
 800350c:	4a0c      	ldr	r2, [pc, #48]	; (8003540 <set_byte+0x54>)
 800350e:	2140      	movs	r1, #64	; 0x40
 8003510:	54d1      	strb	r1, [r2, r3]
 8003512:	e005      	b.n	8003520 <set_byte+0x34>
		}else{
			led_buffer[pos+i]=BIT_0_TIME;
 8003514:	68fa      	ldr	r2, [r7, #12]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4413      	add	r3, r2
 800351a:	4a09      	ldr	r2, [pc, #36]	; (8003540 <set_byte+0x54>)
 800351c:	2120      	movs	r1, #32
 800351e:	54d1      	strb	r1, [r2, r3]
		}
		value<<=1;
 8003520:	78fb      	ldrb	r3, [r7, #3]
 8003522:	005b      	lsls	r3, r3, #1
 8003524:	70fb      	strb	r3, [r7, #3]
	for(i=0; i<8;i++){
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	3301      	adds	r3, #1
 800352a:	60fb      	str	r3, [r7, #12]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2b07      	cmp	r3, #7
 8003530:	dde5      	ble.n	80034fe <set_byte+0x12>
	}
}
 8003532:	bf00      	nop
 8003534:	bf00      	nop
 8003536:	3714      	adds	r7, #20
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr
 8003540:	200002a8 	.word	0x200002a8

08003544 <ws2811_init>:


// DEFINICJE FUNKCJI

void ws2811_init(void){
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
	int i;

	// Wysłanie resetu:
	for(i=0;i<RESET_LEN;i++){
 800354a:	2300      	movs	r3, #0
 800354c:	607b      	str	r3, [r7, #4]
 800354e:	e007      	b.n	8003560 <ws2811_init+0x1c>
		led_buffer[i]=0;
 8003550:	4a13      	ldr	r2, [pc, #76]	; (80035a0 <ws2811_init+0x5c>)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4413      	add	r3, r2
 8003556:	2200      	movs	r2, #0
 8003558:	701a      	strb	r2, [r3, #0]
	for(i=0;i<RESET_LEN;i++){
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	3301      	adds	r3, #1
 800355e:	607b      	str	r3, [r7, #4]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2b63      	cmp	r3, #99	; 0x63
 8003564:	ddf4      	ble.n	8003550 <ws2811_init+0xc>
	}

	// Zgaszenie wszystkich diod:
	for(i=0; i<24*LED_N;i++){
 8003566:	2300      	movs	r3, #0
 8003568:	607b      	str	r3, [r7, #4]
 800356a:	e007      	b.n	800357c <ws2811_init+0x38>
		led_buffer[RESET_LEN+i]=BIT_0_TIME;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	3364      	adds	r3, #100	; 0x64
 8003570:	4a0b      	ldr	r2, [pc, #44]	; (80035a0 <ws2811_init+0x5c>)
 8003572:	2120      	movs	r1, #32
 8003574:	54d1      	strb	r1, [r2, r3]
	for(i=0; i<24*LED_N;i++){
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	3301      	adds	r3, #1
 800357a:	607b      	str	r3, [r7, #4]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f5b3 6fae 	cmp.w	r3, #1392	; 0x570
 8003582:	dbf3      	blt.n	800356c <ws2811_init+0x28>
	}

	// Wypełnienie na koniec:

	led_buffer[RESET_LEN+24*LED_N]=100;
 8003584:	4b06      	ldr	r3, [pc, #24]	; (80035a0 <ws2811_init+0x5c>)
 8003586:	2264      	movs	r2, #100	; 0x64
 8003588:	f883 25d4 	strb.w	r2, [r3, #1492]	; 0x5d4

	// Wlączenie timera:
	HAL_TIM_Base_Start(&htim4);
 800358c:	4805      	ldr	r0, [pc, #20]	; (80035a4 <ws2811_init+0x60>)
 800358e:	f004 f9fb 	bl	8007988 <HAL_TIM_Base_Start>
	// Zacznij odswiezanie:
	ws2811_update();
 8003592:	f000 f88f 	bl	80036b4 <ws2811_update>

}
 8003596:	bf00      	nop
 8003598:	3708      	adds	r7, #8
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	200002a8 	.word	0x200002a8
 80035a4:	20000918 	.word	0x20000918

080035a8 <ws2811_firstAndSecondSegmentsDisplayReset>:

void ws2811_firstAndSecondSegmentsDisplayReset(void){
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
	int i;

		// Wysłanie resetu:
		for(i=0;i<RESET_LEN;i++){
 80035ae:	2300      	movs	r3, #0
 80035b0:	607b      	str	r3, [r7, #4]
 80035b2:	e007      	b.n	80035c4 <ws2811_firstAndSecondSegmentsDisplayReset+0x1c>
			led_buffer[i]=0;
 80035b4:	4a11      	ldr	r2, [pc, #68]	; (80035fc <ws2811_firstAndSecondSegmentsDisplayReset+0x54>)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4413      	add	r3, r2
 80035ba:	2200      	movs	r2, #0
 80035bc:	701a      	strb	r2, [r3, #0]
		for(i=0;i<RESET_LEN;i++){
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	3301      	adds	r3, #1
 80035c2:	607b      	str	r3, [r7, #4]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2b63      	cmp	r3, #99	; 0x63
 80035c8:	ddf4      	ble.n	80035b4 <ws2811_firstAndSecondSegmentsDisplayReset+0xc>
		}

		// Zgaszenie wszystkich diod:
		for(i=0; i<24*LED_N_HOURS_FOR_SECTOR;i++){
 80035ca:	2300      	movs	r3, #0
 80035cc:	607b      	str	r3, [r7, #4]
 80035ce:	e007      	b.n	80035e0 <ws2811_firstAndSecondSegmentsDisplayReset+0x38>
			led_buffer[RESET_LEN+i]=BIT_0_TIME;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	3364      	adds	r3, #100	; 0x64
 80035d4:	4a09      	ldr	r2, [pc, #36]	; (80035fc <ws2811_firstAndSecondSegmentsDisplayReset+0x54>)
 80035d6:	2120      	movs	r1, #32
 80035d8:	54d1      	strb	r1, [r2, r3]
		for(i=0; i<24*LED_N_HOURS_FOR_SECTOR;i++){
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	3301      	adds	r3, #1
 80035de:	607b      	str	r3, [r7, #4]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f5b3 7f28 	cmp.w	r3, #672	; 0x2a0
 80035e6:	dbf3      	blt.n	80035d0 <ws2811_firstAndSecondSegmentsDisplayReset+0x28>
		}

		// Wypełnienie na koniec:

		led_buffer[RESET_LEN+24*LED_N]=100;
 80035e8:	4b04      	ldr	r3, [pc, #16]	; (80035fc <ws2811_firstAndSecondSegmentsDisplayReset+0x54>)
 80035ea:	2264      	movs	r2, #100	; 0x64
 80035ec:	f883 25d4 	strb.w	r2, [r3, #1492]	; 0x5d4

		// Zacznij odswiezanie:
		ws2811_update();
 80035f0:	f000 f860 	bl	80036b4 <ws2811_update>
}
 80035f4:	bf00      	nop
 80035f6:	3708      	adds	r7, #8
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	200002a8 	.word	0x200002a8

08003600 <ws2811_ThirdAndFourthSegmentsDisplayReset>:

void ws2811_ThirdAndFourthSegmentsDisplayReset(void){
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
	int i;

		// Wysłanie resetu:
		for(i=0;i<RESET_LEN;i++){
 8003606:	2300      	movs	r3, #0
 8003608:	607b      	str	r3, [r7, #4]
 800360a:	e007      	b.n	800361c <ws2811_ThirdAndFourthSegmentsDisplayReset+0x1c>
			led_buffer[i]=0;
 800360c:	4a12      	ldr	r2, [pc, #72]	; (8003658 <ws2811_ThirdAndFourthSegmentsDisplayReset+0x58>)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4413      	add	r3, r2
 8003612:	2200      	movs	r2, #0
 8003614:	701a      	strb	r2, [r3, #0]
		for(i=0;i<RESET_LEN;i++){
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	3301      	adds	r3, #1
 800361a:	607b      	str	r3, [r7, #4]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2b63      	cmp	r3, #99	; 0x63
 8003620:	ddf4      	ble.n	800360c <ws2811_ThirdAndFourthSegmentsDisplayReset+0xc>
		}

		// Zgaszenie wszystkich diod:
		for(i=0; i<24*LED_N_MINUTES_FOR_SECTOR;i++){
 8003622:	2300      	movs	r3, #0
 8003624:	607b      	str	r3, [r7, #4]
 8003626:	e008      	b.n	800363a <ws2811_ThirdAndFourthSegmentsDisplayReset+0x3a>
			led_buffer[RESET_LEN+24*LED_N_HOURS_FOR_SECTOR+24*2+i]=BIT_0_TIME;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800362e:	4a0a      	ldr	r2, [pc, #40]	; (8003658 <ws2811_ThirdAndFourthSegmentsDisplayReset+0x58>)
 8003630:	2120      	movs	r1, #32
 8003632:	54d1      	strb	r1, [r2, r3]
		for(i=0; i<24*LED_N_MINUTES_FOR_SECTOR;i++){
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	3301      	adds	r3, #1
 8003638:	607b      	str	r3, [r7, #4]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f5b3 7f28 	cmp.w	r3, #672	; 0x2a0
 8003640:	dbf2      	blt.n	8003628 <ws2811_ThirdAndFourthSegmentsDisplayReset+0x28>
		}

		// Wypełnienie na koniec:

		led_buffer[RESET_LEN+24*LED_N]=100;
 8003642:	4b05      	ldr	r3, [pc, #20]	; (8003658 <ws2811_ThirdAndFourthSegmentsDisplayReset+0x58>)
 8003644:	2264      	movs	r2, #100	; 0x64
 8003646:	f883 25d4 	strb.w	r2, [r3, #1492]	; 0x5d4

		// Zacznij odswiezanie:
		ws2811_update();
 800364a:	f000 f833 	bl	80036b4 <ws2811_update>
}
 800364e:	bf00      	nop
 8003650:	3708      	adds	r7, #8
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	200002a8 	.word	0x200002a8

0800365c <ws2811_fullDisplayReset>:

void ws2811_fullDisplayReset(void){
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
	int i;

			// Wysłanie resetu:
			for(i=0;i<RESET_LEN;i++){
 8003662:	2300      	movs	r3, #0
 8003664:	607b      	str	r3, [r7, #4]
 8003666:	e007      	b.n	8003678 <ws2811_fullDisplayReset+0x1c>
				led_buffer[i]=0;
 8003668:	4a11      	ldr	r2, [pc, #68]	; (80036b0 <ws2811_fullDisplayReset+0x54>)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4413      	add	r3, r2
 800366e:	2200      	movs	r2, #0
 8003670:	701a      	strb	r2, [r3, #0]
			for(i=0;i<RESET_LEN;i++){
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	3301      	adds	r3, #1
 8003676:	607b      	str	r3, [r7, #4]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2b63      	cmp	r3, #99	; 0x63
 800367c:	ddf4      	ble.n	8003668 <ws2811_fullDisplayReset+0xc>
			}

			// Zgaszenie wszystkich diod:
			for(i=0; i<24*LED_N;i++){
 800367e:	2300      	movs	r3, #0
 8003680:	607b      	str	r3, [r7, #4]
 8003682:	e007      	b.n	8003694 <ws2811_fullDisplayReset+0x38>
				led_buffer[RESET_LEN+i]=BIT_0_TIME;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	3364      	adds	r3, #100	; 0x64
 8003688:	4a09      	ldr	r2, [pc, #36]	; (80036b0 <ws2811_fullDisplayReset+0x54>)
 800368a:	2120      	movs	r1, #32
 800368c:	54d1      	strb	r1, [r2, r3]
			for(i=0; i<24*LED_N;i++){
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	3301      	adds	r3, #1
 8003692:	607b      	str	r3, [r7, #4]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f5b3 6fae 	cmp.w	r3, #1392	; 0x570
 800369a:	dbf3      	blt.n	8003684 <ws2811_fullDisplayReset+0x28>
			}

			// Wypełnienie na koniec:

			led_buffer[RESET_LEN+24*LED_N]=100;
 800369c:	4b04      	ldr	r3, [pc, #16]	; (80036b0 <ws2811_fullDisplayReset+0x54>)
 800369e:	2264      	movs	r2, #100	; 0x64
 80036a0:	f883 25d4 	strb.w	r2, [r3, #1492]	; 0x5d4

			// Zacznij odswiezanie:
			ws2811_update();
 80036a4:	f000 f806 	bl	80036b4 <ws2811_update>
	}
 80036a8:	bf00      	nop
 80036aa:	3708      	adds	r7, #8
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	200002a8 	.word	0x200002a8

080036b4 <ws2811_update>:



void ws2811_update(void){
 80036b4:	b580      	push	{r7, lr}
 80036b6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start_DMA(&htim4, TIM_CHANNEL_1, (uint32_t*)led_buffer, sizeof(led_buffer));
 80036b8:	f240 53d5 	movw	r3, #1493	; 0x5d5
 80036bc:	4a03      	ldr	r2, [pc, #12]	; (80036cc <ws2811_update+0x18>)
 80036be:	2100      	movs	r1, #0
 80036c0:	4803      	ldr	r0, [pc, #12]	; (80036d0 <ws2811_update+0x1c>)
 80036c2:	f004 fa9b 	bl	8007bfc <HAL_TIM_PWM_Start_DMA>
}
 80036c6:	bf00      	nop
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	200002a8 	.word	0x200002a8
 80036d0:	20000918 	.word	0x20000918

080036d4 <ws2811_wait>:


void ws2811_wait(void){
 80036d4:	b580      	push	{r7, lr}
 80036d6:	af00      	add	r7, sp, #0
	while(HAL_TIM_GetChannelState(&htim4, TIM_CHANNEL_1)== HAL_TIM_CHANNEL_STATE_BUSY){
 80036d8:	bf00      	nop
 80036da:	2100      	movs	r1, #0
 80036dc:	4804      	ldr	r0, [pc, #16]	; (80036f0 <ws2811_wait+0x1c>)
 80036de:	f005 fab7 	bl	8008c50 <HAL_TIM_GetChannelState>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d0f8      	beq.n	80036da <ws2811_wait+0x6>

	}
}
 80036e8:	bf00      	nop
 80036ea:	bf00      	nop
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	20000918 	.word	0x20000918

080036f4 <ws2811_set_color>:


void ws2811_set_color(uint32_t led, uint8_t red, uint8_t green, uint8_t blue){
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	4608      	mov	r0, r1
 80036fe:	4611      	mov	r1, r2
 8003700:	461a      	mov	r2, r3
 8003702:	4603      	mov	r3, r0
 8003704:	70fb      	strb	r3, [r7, #3]
 8003706:	460b      	mov	r3, r1
 8003708:	70bb      	strb	r3, [r7, #2]
 800370a:	4613      	mov	r3, r2
 800370c:	707b      	strb	r3, [r7, #1]
	if(led<LED_N){
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2b39      	cmp	r3, #57	; 0x39
 8003712:	d820      	bhi.n	8003756 <ws2811_set_color+0x62>
		set_byte(RESET_LEN+24*led, green);
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	4613      	mov	r3, r2
 8003718:	005b      	lsls	r3, r3, #1
 800371a:	4413      	add	r3, r2
 800371c:	00db      	lsls	r3, r3, #3
 800371e:	3364      	adds	r3, #100	; 0x64
 8003720:	78ba      	ldrb	r2, [r7, #2]
 8003722:	4611      	mov	r1, r2
 8003724:	4618      	mov	r0, r3
 8003726:	f7ff fee1 	bl	80034ec <set_byte>
		set_byte(RESET_LEN+24*led+8, red);
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	4613      	mov	r3, r2
 800372e:	005b      	lsls	r3, r3, #1
 8003730:	4413      	add	r3, r2
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	336c      	adds	r3, #108	; 0x6c
 8003736:	78fa      	ldrb	r2, [r7, #3]
 8003738:	4611      	mov	r1, r2
 800373a:	4618      	mov	r0, r3
 800373c:	f7ff fed6 	bl	80034ec <set_byte>
		set_byte(RESET_LEN+24*led+16, blue);
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	4613      	mov	r3, r2
 8003744:	005b      	lsls	r3, r3, #1
 8003746:	4413      	add	r3, r2
 8003748:	00db      	lsls	r3, r3, #3
 800374a:	3374      	adds	r3, #116	; 0x74
 800374c:	787a      	ldrb	r2, [r7, #1]
 800374e:	4611      	mov	r1, r2
 8003750:	4618      	mov	r0, r3
 8003752:	f7ff fecb 	bl	80034ec <set_byte>
	}
}
 8003756:	bf00      	nop
 8003758:	3708      	adds	r7, #8
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
	...

08003760 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003760:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003798 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003764:	f7ff fb56 	bl	8002e14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003768:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800376a:	e003      	b.n	8003774 <LoopCopyDataInit>

0800376c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800376c:	4b0b      	ldr	r3, [pc, #44]	; (800379c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800376e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003770:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003772:	3104      	adds	r1, #4

08003774 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003774:	480a      	ldr	r0, [pc, #40]	; (80037a0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003776:	4b0b      	ldr	r3, [pc, #44]	; (80037a4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003778:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800377a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800377c:	d3f6      	bcc.n	800376c <CopyDataInit>
	ldr	r2, =_sbss
 800377e:	4a0a      	ldr	r2, [pc, #40]	; (80037a8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003780:	e002      	b.n	8003788 <LoopFillZerobss>

08003782 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003782:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003784:	f842 3b04 	str.w	r3, [r2], #4

08003788 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003788:	4b08      	ldr	r3, [pc, #32]	; (80037ac <LoopForever+0x16>)
	cmp	r2, r3
 800378a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800378c:	d3f9      	bcc.n	8003782 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800378e:	f006 ff19 	bl	800a5c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003792:	f7fd feb3 	bl	80014fc <main>

08003796 <LoopForever>:

LoopForever:
    b LoopForever
 8003796:	e7fe      	b.n	8003796 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003798:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800379c:	0800d884 	.word	0x0800d884
	ldr	r0, =_sdata
 80037a0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80037a4:	20000264 	.word	0x20000264
	ldr	r2, =_sbss
 80037a8:	20000264 	.word	0x20000264
	ldr	r3, = _ebss
 80037ac:	20000adc 	.word	0x20000adc

080037b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80037b0:	e7fe      	b.n	80037b0 <ADC1_2_IRQHandler>

080037b2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037b2:	b580      	push	{r7, lr}
 80037b4:	b082      	sub	sp, #8
 80037b6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80037b8:	2300      	movs	r3, #0
 80037ba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037bc:	2003      	movs	r0, #3
 80037be:	f001 fc75 	bl	80050ac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80037c2:	2000      	movs	r0, #0
 80037c4:	f000 f80e 	bl	80037e4 <HAL_InitTick>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d002      	beq.n	80037d4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	71fb      	strb	r3, [r7, #7]
 80037d2:	e001      	b.n	80037d8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80037d4:	f7ff f9e2 	bl	8002b9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80037d8:	79fb      	ldrb	r3, [r7, #7]
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3708      	adds	r7, #8
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
	...

080037e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80037ec:	2300      	movs	r3, #0
 80037ee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80037f0:	4b17      	ldr	r3, [pc, #92]	; (8003850 <HAL_InitTick+0x6c>)
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d023      	beq.n	8003840 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80037f8:	4b16      	ldr	r3, [pc, #88]	; (8003854 <HAL_InitTick+0x70>)
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	4b14      	ldr	r3, [pc, #80]	; (8003850 <HAL_InitTick+0x6c>)
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	4619      	mov	r1, r3
 8003802:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003806:	fbb3 f3f1 	udiv	r3, r3, r1
 800380a:	fbb2 f3f3 	udiv	r3, r2, r3
 800380e:	4618      	mov	r0, r3
 8003810:	f001 fc81 	bl	8005116 <HAL_SYSTICK_Config>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d10f      	bne.n	800383a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2b0f      	cmp	r3, #15
 800381e:	d809      	bhi.n	8003834 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003820:	2200      	movs	r2, #0
 8003822:	6879      	ldr	r1, [r7, #4]
 8003824:	f04f 30ff 	mov.w	r0, #4294967295
 8003828:	f001 fc4b 	bl	80050c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800382c:	4a0a      	ldr	r2, [pc, #40]	; (8003858 <HAL_InitTick+0x74>)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6013      	str	r3, [r2, #0]
 8003832:	e007      	b.n	8003844 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	73fb      	strb	r3, [r7, #15]
 8003838:	e004      	b.n	8003844 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	73fb      	strb	r3, [r7, #15]
 800383e:	e001      	b.n	8003844 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003844:	7bfb      	ldrb	r3, [r7, #15]
}
 8003846:	4618      	mov	r0, r3
 8003848:	3710      	adds	r7, #16
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	2000008c 	.word	0x2000008c
 8003854:	20000084 	.word	0x20000084
 8003858:	20000088 	.word	0x20000088

0800385c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800385c:	b480      	push	{r7}
 800385e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003860:	4b06      	ldr	r3, [pc, #24]	; (800387c <HAL_IncTick+0x20>)
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	461a      	mov	r2, r3
 8003866:	4b06      	ldr	r3, [pc, #24]	; (8003880 <HAL_IncTick+0x24>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4413      	add	r3, r2
 800386c:	4a04      	ldr	r2, [pc, #16]	; (8003880 <HAL_IncTick+0x24>)
 800386e:	6013      	str	r3, [r2, #0]
}
 8003870:	bf00      	nop
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	2000008c 	.word	0x2000008c
 8003880:	20000ac8 	.word	0x20000ac8

08003884 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003884:	b480      	push	{r7}
 8003886:	af00      	add	r7, sp, #0
  return uwTick;
 8003888:	4b03      	ldr	r3, [pc, #12]	; (8003898 <HAL_GetTick+0x14>)
 800388a:	681b      	ldr	r3, [r3, #0]
}
 800388c:	4618      	mov	r0, r3
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	20000ac8 	.word	0x20000ac8

0800389c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038a4:	f7ff ffee 	bl	8003884 <HAL_GetTick>
 80038a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038b4:	d005      	beq.n	80038c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80038b6:	4b0a      	ldr	r3, [pc, #40]	; (80038e0 <HAL_Delay+0x44>)
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	461a      	mov	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	4413      	add	r3, r2
 80038c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80038c2:	bf00      	nop
 80038c4:	f7ff ffde 	bl	8003884 <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	68fa      	ldr	r2, [r7, #12]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d8f7      	bhi.n	80038c4 <HAL_Delay+0x28>
  {
  }
}
 80038d4:	bf00      	nop
 80038d6:	bf00      	nop
 80038d8:	3710      	adds	r7, #16
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	2000008c 	.word	0x2000008c

080038e4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	431a      	orrs	r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	609a      	str	r2, [r3, #8]
}
 80038fe:	bf00      	nop
 8003900:	370c      	adds	r7, #12
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr

0800390a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800390a:	b480      	push	{r7}
 800390c:	b083      	sub	sp, #12
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
 8003912:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	431a      	orrs	r2, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	609a      	str	r2, [r3, #8]
}
 8003924:	bf00      	nop
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003940:	4618      	mov	r0, r3
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800394c:	b480      	push	{r7}
 800394e:	b087      	sub	sp, #28
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	607a      	str	r2, [r7, #4]
 8003958:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	3360      	adds	r3, #96	; 0x60
 800395e:	461a      	mov	r2, r3
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	4413      	add	r3, r2
 8003966:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	4b08      	ldr	r3, [pc, #32]	; (8003990 <LL_ADC_SetOffset+0x44>)
 800396e:	4013      	ands	r3, r2
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003976:	683a      	ldr	r2, [r7, #0]
 8003978:	430a      	orrs	r2, r1
 800397a:	4313      	orrs	r3, r2
 800397c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003984:	bf00      	nop
 8003986:	371c      	adds	r7, #28
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr
 8003990:	03fff000 	.word	0x03fff000

08003994 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003994:	b480      	push	{r7}
 8003996:	b085      	sub	sp, #20
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	3360      	adds	r3, #96	; 0x60
 80039a2:	461a      	mov	r2, r3
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	4413      	add	r3, r2
 80039aa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3714      	adds	r7, #20
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b087      	sub	sp, #28
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	3360      	adds	r3, #96	; 0x60
 80039d0:	461a      	mov	r2, r3
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	4413      	add	r3, r2
 80039d8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	431a      	orrs	r2, r3
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80039ea:	bf00      	nop
 80039ec:	371c      	adds	r7, #28
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr

080039f6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80039f6:	b480      	push	{r7}
 80039f8:	b083      	sub	sp, #12
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d101      	bne.n	8003a0e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e000      	b.n	8003a10 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003a0e:	2300      	movs	r3, #0
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b087      	sub	sp, #28
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	3330      	adds	r3, #48	; 0x30
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	0a1b      	lsrs	r3, r3, #8
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	f003 030c 	and.w	r3, r3, #12
 8003a38:	4413      	add	r3, r2
 8003a3a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	f003 031f 	and.w	r3, r3, #31
 8003a46:	211f      	movs	r1, #31
 8003a48:	fa01 f303 	lsl.w	r3, r1, r3
 8003a4c:	43db      	mvns	r3, r3
 8003a4e:	401a      	ands	r2, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	0e9b      	lsrs	r3, r3, #26
 8003a54:	f003 011f 	and.w	r1, r3, #31
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	f003 031f 	and.w	r3, r3, #31
 8003a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a62:	431a      	orrs	r2, r3
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003a68:	bf00      	nop
 8003a6a:	371c      	adds	r7, #28
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b087      	sub	sp, #28
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	3314      	adds	r3, #20
 8003a84:	461a      	mov	r2, r3
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	0e5b      	lsrs	r3, r3, #25
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	f003 0304 	and.w	r3, r3, #4
 8003a90:	4413      	add	r3, r2
 8003a92:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	0d1b      	lsrs	r3, r3, #20
 8003a9c:	f003 031f 	and.w	r3, r3, #31
 8003aa0:	2107      	movs	r1, #7
 8003aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8003aa6:	43db      	mvns	r3, r3
 8003aa8:	401a      	ands	r2, r3
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	0d1b      	lsrs	r3, r3, #20
 8003aae:	f003 031f 	and.w	r3, r3, #31
 8003ab2:	6879      	ldr	r1, [r7, #4]
 8003ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ab8:	431a      	orrs	r2, r3
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003abe:	bf00      	nop
 8003ac0:	371c      	adds	r7, #28
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
	...

08003acc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b085      	sub	sp, #20
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ae4:	43db      	mvns	r3, r3
 8003ae6:	401a      	ands	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f003 0318 	and.w	r3, r3, #24
 8003aee:	4908      	ldr	r1, [pc, #32]	; (8003b10 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003af0:	40d9      	lsrs	r1, r3
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	400b      	ands	r3, r1
 8003af6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003afa:	431a      	orrs	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003b02:	bf00      	nop
 8003b04:	3714      	adds	r7, #20
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	0007ffff 	.word	0x0007ffff

08003b14 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f003 031f 	and.w	r3, r3, #31
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	370c      	adds	r7, #12
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003b5c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	6093      	str	r3, [r2, #8]
}
 8003b64:	bf00      	nop
 8003b66:	370c      	adds	r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b84:	d101      	bne.n	8003b8a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003b86:	2301      	movs	r3, #1
 8003b88:	e000      	b.n	8003b8c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003b8a:	2300      	movs	r3, #0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003ba8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003bac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003bb4:	bf00      	nop
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bd0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bd4:	d101      	bne.n	8003bda <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e000      	b.n	8003bdc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003bda:	2300      	movs	r3, #0
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003bf8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003bfc:	f043 0201 	orr.w	r2, r3, #1
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003c20:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003c24:	f043 0202 	orr.w	r2, r3, #2
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003c2c:	bf00      	nop
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f003 0301 	and.w	r3, r3, #1
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d101      	bne.n	8003c50 <LL_ADC_IsEnabled+0x18>
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e000      	b.n	8003c52 <LL_ADC_IsEnabled+0x1a>
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	370c      	adds	r7, #12
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr

08003c5e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003c5e:	b480      	push	{r7}
 8003c60:	b083      	sub	sp, #12
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d101      	bne.n	8003c76 <LL_ADC_IsDisableOngoing+0x18>
 8003c72:	2301      	movs	r3, #1
 8003c74:	e000      	b.n	8003c78 <LL_ADC_IsDisableOngoing+0x1a>
 8003c76:	2300      	movs	r3, #0
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003c94:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003c98:	f043 0204 	orr.w	r2, r3, #4
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003ca0:	bf00      	nop
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	f003 0304 	and.w	r3, r3, #4
 8003cbc:	2b04      	cmp	r3, #4
 8003cbe:	d101      	bne.n	8003cc4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e000      	b.n	8003cc6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	370c      	adds	r7, #12
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr

08003cd2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003cd2:	b480      	push	{r7}
 8003cd4:	b083      	sub	sp, #12
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f003 0308 	and.w	r3, r3, #8
 8003ce2:	2b08      	cmp	r3, #8
 8003ce4:	d101      	bne.n	8003cea <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e000      	b.n	8003cec <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003cf8:	b590      	push	{r4, r7, lr}
 8003cfa:	b089      	sub	sp, #36	; 0x24
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d00:	2300      	movs	r3, #0
 8003d02:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003d04:	2300      	movs	r3, #0
 8003d06:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d101      	bne.n	8003d12 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e136      	b.n	8003f80 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d109      	bne.n	8003d34 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f7fd f93f 	bl	8000fa4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f7ff ff19 	bl	8003b70 <LL_ADC_IsDeepPowerDownEnabled>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d004      	beq.n	8003d4e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7ff feff 	bl	8003b4c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4618      	mov	r0, r3
 8003d54:	f7ff ff34 	bl	8003bc0 <LL_ADC_IsInternalRegulatorEnabled>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d115      	bne.n	8003d8a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4618      	mov	r0, r3
 8003d64:	f7ff ff18 	bl	8003b98 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d68:	4b87      	ldr	r3, [pc, #540]	; (8003f88 <HAL_ADC_Init+0x290>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	099b      	lsrs	r3, r3, #6
 8003d6e:	4a87      	ldr	r2, [pc, #540]	; (8003f8c <HAL_ADC_Init+0x294>)
 8003d70:	fba2 2303 	umull	r2, r3, r2, r3
 8003d74:	099b      	lsrs	r3, r3, #6
 8003d76:	3301      	adds	r3, #1
 8003d78:	005b      	lsls	r3, r3, #1
 8003d7a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003d7c:	e002      	b.n	8003d84 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	3b01      	subs	r3, #1
 8003d82:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1f9      	bne.n	8003d7e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7ff ff16 	bl	8003bc0 <LL_ADC_IsInternalRegulatorEnabled>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d10d      	bne.n	8003db6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d9e:	f043 0210 	orr.w	r2, r3, #16
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003daa:	f043 0201 	orr.w	r2, r3, #1
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7ff ff76 	bl	8003cac <LL_ADC_REG_IsConversionOngoing>
 8003dc0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc6:	f003 0310 	and.w	r3, r3, #16
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	f040 80cf 	bne.w	8003f6e <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	f040 80cb 	bne.w	8003f6e <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ddc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003de0:	f043 0202 	orr.w	r2, r3, #2
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7ff ff23 	bl	8003c38 <LL_ADC_IsEnabled>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d115      	bne.n	8003e24 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003df8:	4865      	ldr	r0, [pc, #404]	; (8003f90 <HAL_ADC_Init+0x298>)
 8003dfa:	f7ff ff1d 	bl	8003c38 <LL_ADC_IsEnabled>
 8003dfe:	4604      	mov	r4, r0
 8003e00:	4864      	ldr	r0, [pc, #400]	; (8003f94 <HAL_ADC_Init+0x29c>)
 8003e02:	f7ff ff19 	bl	8003c38 <LL_ADC_IsEnabled>
 8003e06:	4603      	mov	r3, r0
 8003e08:	431c      	orrs	r4, r3
 8003e0a:	4863      	ldr	r0, [pc, #396]	; (8003f98 <HAL_ADC_Init+0x2a0>)
 8003e0c:	f7ff ff14 	bl	8003c38 <LL_ADC_IsEnabled>
 8003e10:	4603      	mov	r3, r0
 8003e12:	4323      	orrs	r3, r4
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d105      	bne.n	8003e24 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	485f      	ldr	r0, [pc, #380]	; (8003f9c <HAL_ADC_Init+0x2a4>)
 8003e20:	f7ff fd60 	bl	80038e4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	7e5b      	ldrb	r3, [r3, #25]
 8003e28:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003e2e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003e34:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003e3a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e42:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003e44:	4313      	orrs	r3, r2
 8003e46:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d106      	bne.n	8003e60 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e56:	3b01      	subs	r3, #1
 8003e58:	045b      	lsls	r3, r3, #17
 8003e5a:	69ba      	ldr	r2, [r7, #24]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d009      	beq.n	8003e7c <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e6c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e74:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003e76:	69ba      	ldr	r2, [r7, #24]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68da      	ldr	r2, [r3, #12]
 8003e82:	4b47      	ldr	r3, [pc, #284]	; (8003fa0 <HAL_ADC_Init+0x2a8>)
 8003e84:	4013      	ands	r3, r2
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	6812      	ldr	r2, [r2, #0]
 8003e8a:	69b9      	ldr	r1, [r7, #24]
 8003e8c:	430b      	orrs	r3, r1
 8003e8e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4618      	mov	r0, r3
 8003e96:	f7ff ff09 	bl	8003cac <LL_ADC_REG_IsConversionOngoing>
 8003e9a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f7ff ff16 	bl	8003cd2 <LL_ADC_INJ_IsConversionOngoing>
 8003ea6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d13d      	bne.n	8003f2a <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d13a      	bne.n	8003f2a <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003eb8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003ec0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ed0:	f023 0302 	bic.w	r3, r3, #2
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	6812      	ldr	r2, [r2, #0]
 8003ed8:	69b9      	ldr	r1, [r7, #24]
 8003eda:	430b      	orrs	r3, r1
 8003edc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d118      	bne.n	8003f1a <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003ef2:	f023 0304 	bic.w	r3, r3, #4
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003efe:	4311      	orrs	r1, r2
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003f04:	4311      	orrs	r1, r2
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003f0a:	430a      	orrs	r2, r1
 8003f0c:	431a      	orrs	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f042 0201 	orr.w	r2, r2, #1
 8003f16:	611a      	str	r2, [r3, #16]
 8003f18:	e007      	b.n	8003f2a <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	691a      	ldr	r2, [r3, #16]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f022 0201 	bic.w	r2, r2, #1
 8003f28:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d10c      	bne.n	8003f4c <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f38:	f023 010f 	bic.w	r1, r3, #15
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	69db      	ldr	r3, [r3, #28]
 8003f40:	1e5a      	subs	r2, r3, #1
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	430a      	orrs	r2, r1
 8003f48:	631a      	str	r2, [r3, #48]	; 0x30
 8003f4a:	e007      	b.n	8003f5c <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f022 020f 	bic.w	r2, r2, #15
 8003f5a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f60:	f023 0303 	bic.w	r3, r3, #3
 8003f64:	f043 0201 	orr.w	r2, r3, #1
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	655a      	str	r2, [r3, #84]	; 0x54
 8003f6c:	e007      	b.n	8003f7e <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f72:	f043 0210 	orr.w	r2, r3, #16
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003f7e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3724      	adds	r7, #36	; 0x24
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd90      	pop	{r4, r7, pc}
 8003f88:	20000084 	.word	0x20000084
 8003f8c:	053e2d63 	.word	0x053e2d63
 8003f90:	50040000 	.word	0x50040000
 8003f94:	50040100 	.word	0x50040100
 8003f98:	50040200 	.word	0x50040200
 8003f9c:	50040300 	.word	0x50040300
 8003fa0:	fff0c007 	.word	0xfff0c007

08003fa4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b086      	sub	sp, #24
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003fac:	4857      	ldr	r0, [pc, #348]	; (800410c <HAL_ADC_Start+0x168>)
 8003fae:	f7ff fdb1 	bl	8003b14 <LL_ADC_GetMultimode>
 8003fb2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f7ff fe77 	bl	8003cac <LL_ADC_REG_IsConversionOngoing>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	f040 809c 	bne.w	80040fe <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d101      	bne.n	8003fd4 <HAL_ADC_Start+0x30>
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	e097      	b.n	8004104 <HAL_ADC_Start+0x160>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f000 fd71 	bl	8004ac4 <ADC_Enable>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003fe6:	7dfb      	ldrb	r3, [r7, #23]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	f040 8083 	bne.w	80040f4 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003ff6:	f023 0301 	bic.w	r3, r3, #1
 8003ffa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a42      	ldr	r2, [pc, #264]	; (8004110 <HAL_ADC_Start+0x16c>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d002      	beq.n	8004012 <HAL_ADC_Start+0x6e>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	e000      	b.n	8004014 <HAL_ADC_Start+0x70>
 8004012:	4b40      	ldr	r3, [pc, #256]	; (8004114 <HAL_ADC_Start+0x170>)
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	6812      	ldr	r2, [r2, #0]
 8004018:	4293      	cmp	r3, r2
 800401a:	d002      	beq.n	8004022 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d105      	bne.n	800402e <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004026:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004032:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004036:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800403a:	d106      	bne.n	800404a <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004040:	f023 0206 	bic.w	r2, r3, #6
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	659a      	str	r2, [r3, #88]	; 0x58
 8004048:	e002      	b.n	8004050 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	221c      	movs	r2, #28
 8004056:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a2a      	ldr	r2, [pc, #168]	; (8004110 <HAL_ADC_Start+0x16c>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d002      	beq.n	8004070 <HAL_ADC_Start+0xcc>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	e000      	b.n	8004072 <HAL_ADC_Start+0xce>
 8004070:	4b28      	ldr	r3, [pc, #160]	; (8004114 <HAL_ADC_Start+0x170>)
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	6812      	ldr	r2, [r2, #0]
 8004076:	4293      	cmp	r3, r2
 8004078:	d008      	beq.n	800408c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d005      	beq.n	800408c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	2b05      	cmp	r3, #5
 8004084:	d002      	beq.n	800408c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	2b09      	cmp	r3, #9
 800408a:	d114      	bne.n	80040b6 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d007      	beq.n	80040aa <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800409e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80040a2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4618      	mov	r0, r3
 80040b0:	f7ff fde8 	bl	8003c84 <LL_ADC_REG_StartConversion>
 80040b4:	e025      	b.n	8004102 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a12      	ldr	r2, [pc, #72]	; (8004110 <HAL_ADC_Start+0x16c>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d002      	beq.n	80040d2 <HAL_ADC_Start+0x12e>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	e000      	b.n	80040d4 <HAL_ADC_Start+0x130>
 80040d2:	4b10      	ldr	r3, [pc, #64]	; (8004114 <HAL_ADC_Start+0x170>)
 80040d4:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d00f      	beq.n	8004102 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040e6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80040ea:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	655a      	str	r2, [r3, #84]	; 0x54
 80040f2:	e006      	b.n	8004102 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80040fc:	e001      	b.n	8004102 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80040fe:	2302      	movs	r3, #2
 8004100:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004102:	7dfb      	ldrb	r3, [r7, #23]
}
 8004104:	4618      	mov	r0, r3
 8004106:	3718      	adds	r7, #24
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}
 800410c:	50040300 	.word	0x50040300
 8004110:	50040100 	.word	0x50040100
 8004114:	50040000 	.word	0x50040000

08004118 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b088      	sub	sp, #32
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004122:	4866      	ldr	r0, [pc, #408]	; (80042bc <HAL_ADC_PollForConversion+0x1a4>)
 8004124:	f7ff fcf6 	bl	8003b14 <LL_ADC_GetMultimode>
 8004128:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	2b08      	cmp	r3, #8
 8004130:	d102      	bne.n	8004138 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8004132:	2308      	movs	r3, #8
 8004134:	61fb      	str	r3, [r7, #28]
 8004136:	e02a      	b.n	800418e <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d005      	beq.n	800414a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	2b05      	cmp	r3, #5
 8004142:	d002      	beq.n	800414a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	2b09      	cmp	r3, #9
 8004148:	d111      	bne.n	800416e <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	f003 0301 	and.w	r3, r3, #1
 8004154:	2b00      	cmp	r3, #0
 8004156:	d007      	beq.n	8004168 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800415c:	f043 0220 	orr.w	r2, r3, #32
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e0a4      	b.n	80042b2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8004168:	2304      	movs	r3, #4
 800416a:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800416c:	e00f      	b.n	800418e <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800416e:	4853      	ldr	r0, [pc, #332]	; (80042bc <HAL_ADC_PollForConversion+0x1a4>)
 8004170:	f7ff fcde 	bl	8003b30 <LL_ADC_GetMultiDMATransfer>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d007      	beq.n	800418a <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800417e:	f043 0220 	orr.w	r2, r3, #32
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e093      	b.n	80042b2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800418a:	2304      	movs	r3, #4
 800418c:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800418e:	f7ff fb79 	bl	8003884 <HAL_GetTick>
 8004192:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004194:	e021      	b.n	80041da <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800419c:	d01d      	beq.n	80041da <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800419e:	f7ff fb71 	bl	8003884 <HAL_GetTick>
 80041a2:	4602      	mov	r2, r0
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	683a      	ldr	r2, [r7, #0]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d302      	bcc.n	80041b4 <HAL_ADC_PollForConversion+0x9c>
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d112      	bne.n	80041da <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	4013      	ands	r3, r2
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d10b      	bne.n	80041da <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041c6:	f043 0204 	orr.w	r2, r3, #4
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e06b      	b.n	80042b2 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	69fb      	ldr	r3, [r7, #28]
 80041e2:	4013      	ands	r3, r2
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d0d6      	beq.n	8004196 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ec:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4618      	mov	r0, r3
 80041fa:	f7ff fbfc 	bl	80039f6 <LL_ADC_REG_IsTriggerSourceSWStart>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d01c      	beq.n	800423e <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	7e5b      	ldrb	r3, [r3, #25]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d118      	bne.n	800423e <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0308 	and.w	r3, r3, #8
 8004216:	2b08      	cmp	r3, #8
 8004218:	d111      	bne.n	800423e <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800421e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800422a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d105      	bne.n	800423e <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004236:	f043 0201 	orr.w	r2, r3, #1
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a1f      	ldr	r2, [pc, #124]	; (80042c0 <HAL_ADC_PollForConversion+0x1a8>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d002      	beq.n	800424e <HAL_ADC_PollForConversion+0x136>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	e000      	b.n	8004250 <HAL_ADC_PollForConversion+0x138>
 800424e:	4b1d      	ldr	r3, [pc, #116]	; (80042c4 <HAL_ADC_PollForConversion+0x1ac>)
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	6812      	ldr	r2, [r2, #0]
 8004254:	4293      	cmp	r3, r2
 8004256:	d008      	beq.n	800426a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d005      	beq.n	800426a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	2b05      	cmp	r3, #5
 8004262:	d002      	beq.n	800426a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	2b09      	cmp	r3, #9
 8004268:	d104      	bne.n	8004274 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	61bb      	str	r3, [r7, #24]
 8004272:	e00c      	b.n	800428e <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a11      	ldr	r2, [pc, #68]	; (80042c0 <HAL_ADC_PollForConversion+0x1a8>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d002      	beq.n	8004284 <HAL_ADC_PollForConversion+0x16c>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	e000      	b.n	8004286 <HAL_ADC_PollForConversion+0x16e>
 8004284:	4b0f      	ldr	r3, [pc, #60]	; (80042c4 <HAL_ADC_PollForConversion+0x1ac>)
 8004286:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	2b08      	cmp	r3, #8
 8004292:	d104      	bne.n	800429e <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2208      	movs	r2, #8
 800429a:	601a      	str	r2, [r3, #0]
 800429c:	e008      	b.n	80042b0 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d103      	bne.n	80042b0 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	220c      	movs	r2, #12
 80042ae:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3720      	adds	r7, #32
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	50040300 	.word	0x50040300
 80042c0:	50040100 	.word	0x50040100
 80042c4:	50040000 	.word	0x50040000

080042c8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	370c      	adds	r7, #12
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
	...

080042e4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b0b6      	sub	sp, #216	; 0xd8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042ee:	2300      	movs	r3, #0
 80042f0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80042f4:	2300      	movs	r3, #0
 80042f6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d101      	bne.n	8004306 <HAL_ADC_ConfigChannel+0x22>
 8004302:	2302      	movs	r3, #2
 8004304:	e3c7      	b.n	8004a96 <HAL_ADC_ConfigChannel+0x7b2>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2201      	movs	r2, #1
 800430a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4618      	mov	r0, r3
 8004314:	f7ff fcca 	bl	8003cac <LL_ADC_REG_IsConversionOngoing>
 8004318:	4603      	mov	r3, r0
 800431a:	2b00      	cmp	r3, #0
 800431c:	f040 83a8 	bne.w	8004a70 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	2b05      	cmp	r3, #5
 8004326:	d824      	bhi.n	8004372 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	3b02      	subs	r3, #2
 800432e:	2b03      	cmp	r3, #3
 8004330:	d81b      	bhi.n	800436a <HAL_ADC_ConfigChannel+0x86>
 8004332:	a201      	add	r2, pc, #4	; (adr r2, 8004338 <HAL_ADC_ConfigChannel+0x54>)
 8004334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004338:	08004349 	.word	0x08004349
 800433c:	08004351 	.word	0x08004351
 8004340:	08004359 	.word	0x08004359
 8004344:	08004361 	.word	0x08004361
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	220c      	movs	r2, #12
 800434c:	605a      	str	r2, [r3, #4]
          break;
 800434e:	e011      	b.n	8004374 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	2212      	movs	r2, #18
 8004354:	605a      	str	r2, [r3, #4]
          break;
 8004356:	e00d      	b.n	8004374 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	2218      	movs	r2, #24
 800435c:	605a      	str	r2, [r3, #4]
          break;
 800435e:	e009      	b.n	8004374 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004366:	605a      	str	r2, [r3, #4]
          break;
 8004368:	e004      	b.n	8004374 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	2206      	movs	r2, #6
 800436e:	605a      	str	r2, [r3, #4]
          break;
 8004370:	e000      	b.n	8004374 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8004372:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6818      	ldr	r0, [r3, #0]
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	6859      	ldr	r1, [r3, #4]
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	461a      	mov	r2, r3
 8004382:	f7ff fb4b 	bl	8003a1c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4618      	mov	r0, r3
 800438c:	f7ff fc8e 	bl	8003cac <LL_ADC_REG_IsConversionOngoing>
 8004390:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4618      	mov	r0, r3
 800439a:	f7ff fc9a 	bl	8003cd2 <LL_ADC_INJ_IsConversionOngoing>
 800439e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80043a2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	f040 81a6 	bne.w	80046f8 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80043ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	f040 81a1 	bne.w	80046f8 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6818      	ldr	r0, [r3, #0]
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	6819      	ldr	r1, [r3, #0]
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	461a      	mov	r2, r3
 80043c4:	f7ff fb56 	bl	8003a74 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	695a      	ldr	r2, [r3, #20]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	08db      	lsrs	r3, r3, #3
 80043d4:	f003 0303 	and.w	r3, r3, #3
 80043d8:	005b      	lsls	r3, r3, #1
 80043da:	fa02 f303 	lsl.w	r3, r2, r3
 80043de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	2b04      	cmp	r3, #4
 80043e8:	d00a      	beq.n	8004400 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6818      	ldr	r0, [r3, #0]
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	6919      	ldr	r1, [r3, #16]
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80043fa:	f7ff faa7 	bl	800394c <LL_ADC_SetOffset>
 80043fe:	e17b      	b.n	80046f8 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2100      	movs	r1, #0
 8004406:	4618      	mov	r0, r3
 8004408:	f7ff fac4 	bl	8003994 <LL_ADC_GetOffsetChannel>
 800440c:	4603      	mov	r3, r0
 800440e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004412:	2b00      	cmp	r3, #0
 8004414:	d10a      	bne.n	800442c <HAL_ADC_ConfigChannel+0x148>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2100      	movs	r1, #0
 800441c:	4618      	mov	r0, r3
 800441e:	f7ff fab9 	bl	8003994 <LL_ADC_GetOffsetChannel>
 8004422:	4603      	mov	r3, r0
 8004424:	0e9b      	lsrs	r3, r3, #26
 8004426:	f003 021f 	and.w	r2, r3, #31
 800442a:	e01e      	b.n	800446a <HAL_ADC_ConfigChannel+0x186>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2100      	movs	r1, #0
 8004432:	4618      	mov	r0, r3
 8004434:	f7ff faae 	bl	8003994 <LL_ADC_GetOffsetChannel>
 8004438:	4603      	mov	r3, r0
 800443a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800443e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004442:	fa93 f3a3 	rbit	r3, r3
 8004446:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800444a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800444e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004452:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d101      	bne.n	800445e <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800445a:	2320      	movs	r3, #32
 800445c:	e004      	b.n	8004468 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800445e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004462:	fab3 f383 	clz	r3, r3
 8004466:	b2db      	uxtb	r3, r3
 8004468:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004472:	2b00      	cmp	r3, #0
 8004474:	d105      	bne.n	8004482 <HAL_ADC_ConfigChannel+0x19e>
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	0e9b      	lsrs	r3, r3, #26
 800447c:	f003 031f 	and.w	r3, r3, #31
 8004480:	e018      	b.n	80044b4 <HAL_ADC_ConfigChannel+0x1d0>
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800448a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800448e:	fa93 f3a3 	rbit	r3, r3
 8004492:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004496:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800449a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800449e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d101      	bne.n	80044aa <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80044a6:	2320      	movs	r3, #32
 80044a8:	e004      	b.n	80044b4 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80044aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80044ae:	fab3 f383 	clz	r3, r3
 80044b2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d106      	bne.n	80044c6 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2200      	movs	r2, #0
 80044be:	2100      	movs	r1, #0
 80044c0:	4618      	mov	r0, r3
 80044c2:	f7ff fa7d 	bl	80039c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2101      	movs	r1, #1
 80044cc:	4618      	mov	r0, r3
 80044ce:	f7ff fa61 	bl	8003994 <LL_ADC_GetOffsetChannel>
 80044d2:	4603      	mov	r3, r0
 80044d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d10a      	bne.n	80044f2 <HAL_ADC_ConfigChannel+0x20e>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2101      	movs	r1, #1
 80044e2:	4618      	mov	r0, r3
 80044e4:	f7ff fa56 	bl	8003994 <LL_ADC_GetOffsetChannel>
 80044e8:	4603      	mov	r3, r0
 80044ea:	0e9b      	lsrs	r3, r3, #26
 80044ec:	f003 021f 	and.w	r2, r3, #31
 80044f0:	e01e      	b.n	8004530 <HAL_ADC_ConfigChannel+0x24c>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2101      	movs	r1, #1
 80044f8:	4618      	mov	r0, r3
 80044fa:	f7ff fa4b 	bl	8003994 <LL_ADC_GetOffsetChannel>
 80044fe:	4603      	mov	r3, r0
 8004500:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004504:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004508:	fa93 f3a3 	rbit	r3, r3
 800450c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004510:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004514:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004518:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800451c:	2b00      	cmp	r3, #0
 800451e:	d101      	bne.n	8004524 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8004520:	2320      	movs	r3, #32
 8004522:	e004      	b.n	800452e <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8004524:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004528:	fab3 f383 	clz	r3, r3
 800452c:	b2db      	uxtb	r3, r3
 800452e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004538:	2b00      	cmp	r3, #0
 800453a:	d105      	bne.n	8004548 <HAL_ADC_ConfigChannel+0x264>
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	0e9b      	lsrs	r3, r3, #26
 8004542:	f003 031f 	and.w	r3, r3, #31
 8004546:	e018      	b.n	800457a <HAL_ADC_ConfigChannel+0x296>
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004550:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004554:	fa93 f3a3 	rbit	r3, r3
 8004558:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800455c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004560:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004564:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004568:	2b00      	cmp	r3, #0
 800456a:	d101      	bne.n	8004570 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 800456c:	2320      	movs	r3, #32
 800456e:	e004      	b.n	800457a <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8004570:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004574:	fab3 f383 	clz	r3, r3
 8004578:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800457a:	429a      	cmp	r2, r3
 800457c:	d106      	bne.n	800458c <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2200      	movs	r2, #0
 8004584:	2101      	movs	r1, #1
 8004586:	4618      	mov	r0, r3
 8004588:	f7ff fa1a 	bl	80039c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2102      	movs	r1, #2
 8004592:	4618      	mov	r0, r3
 8004594:	f7ff f9fe 	bl	8003994 <LL_ADC_GetOffsetChannel>
 8004598:	4603      	mov	r3, r0
 800459a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d10a      	bne.n	80045b8 <HAL_ADC_ConfigChannel+0x2d4>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2102      	movs	r1, #2
 80045a8:	4618      	mov	r0, r3
 80045aa:	f7ff f9f3 	bl	8003994 <LL_ADC_GetOffsetChannel>
 80045ae:	4603      	mov	r3, r0
 80045b0:	0e9b      	lsrs	r3, r3, #26
 80045b2:	f003 021f 	and.w	r2, r3, #31
 80045b6:	e01e      	b.n	80045f6 <HAL_ADC_ConfigChannel+0x312>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2102      	movs	r1, #2
 80045be:	4618      	mov	r0, r3
 80045c0:	f7ff f9e8 	bl	8003994 <LL_ADC_GetOffsetChannel>
 80045c4:	4603      	mov	r3, r0
 80045c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80045ce:	fa93 f3a3 	rbit	r3, r3
 80045d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80045d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80045da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80045de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d101      	bne.n	80045ea <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80045e6:	2320      	movs	r3, #32
 80045e8:	e004      	b.n	80045f4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80045ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80045ee:	fab3 f383 	clz	r3, r3
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d105      	bne.n	800460e <HAL_ADC_ConfigChannel+0x32a>
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	0e9b      	lsrs	r3, r3, #26
 8004608:	f003 031f 	and.w	r3, r3, #31
 800460c:	e016      	b.n	800463c <HAL_ADC_ConfigChannel+0x358>
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004616:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800461a:	fa93 f3a3 	rbit	r3, r3
 800461e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004620:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004622:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004626:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800462a:	2b00      	cmp	r3, #0
 800462c:	d101      	bne.n	8004632 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800462e:	2320      	movs	r3, #32
 8004630:	e004      	b.n	800463c <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8004632:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004636:	fab3 f383 	clz	r3, r3
 800463a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800463c:	429a      	cmp	r2, r3
 800463e:	d106      	bne.n	800464e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2200      	movs	r2, #0
 8004646:	2102      	movs	r1, #2
 8004648:	4618      	mov	r0, r3
 800464a:	f7ff f9b9 	bl	80039c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2103      	movs	r1, #3
 8004654:	4618      	mov	r0, r3
 8004656:	f7ff f99d 	bl	8003994 <LL_ADC_GetOffsetChannel>
 800465a:	4603      	mov	r3, r0
 800465c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004660:	2b00      	cmp	r3, #0
 8004662:	d10a      	bne.n	800467a <HAL_ADC_ConfigChannel+0x396>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2103      	movs	r1, #3
 800466a:	4618      	mov	r0, r3
 800466c:	f7ff f992 	bl	8003994 <LL_ADC_GetOffsetChannel>
 8004670:	4603      	mov	r3, r0
 8004672:	0e9b      	lsrs	r3, r3, #26
 8004674:	f003 021f 	and.w	r2, r3, #31
 8004678:	e017      	b.n	80046aa <HAL_ADC_ConfigChannel+0x3c6>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2103      	movs	r1, #3
 8004680:	4618      	mov	r0, r3
 8004682:	f7ff f987 	bl	8003994 <LL_ADC_GetOffsetChannel>
 8004686:	4603      	mov	r3, r0
 8004688:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800468a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800468c:	fa93 f3a3 	rbit	r3, r3
 8004690:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004692:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004694:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004696:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004698:	2b00      	cmp	r3, #0
 800469a:	d101      	bne.n	80046a0 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 800469c:	2320      	movs	r3, #32
 800469e:	e003      	b.n	80046a8 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80046a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046a2:	fab3 f383 	clz	r3, r3
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d105      	bne.n	80046c2 <HAL_ADC_ConfigChannel+0x3de>
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	0e9b      	lsrs	r3, r3, #26
 80046bc:	f003 031f 	and.w	r3, r3, #31
 80046c0:	e011      	b.n	80046e6 <HAL_ADC_ConfigChannel+0x402>
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046ca:	fa93 f3a3 	rbit	r3, r3
 80046ce:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80046d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046d2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80046d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d101      	bne.n	80046de <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80046da:	2320      	movs	r3, #32
 80046dc:	e003      	b.n	80046e6 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80046de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046e0:	fab3 f383 	clz	r3, r3
 80046e4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d106      	bne.n	80046f8 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	2200      	movs	r2, #0
 80046f0:	2103      	movs	r1, #3
 80046f2:	4618      	mov	r0, r3
 80046f4:	f7ff f964 	bl	80039c0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4618      	mov	r0, r3
 80046fe:	f7ff fa9b 	bl	8003c38 <LL_ADC_IsEnabled>
 8004702:	4603      	mov	r3, r0
 8004704:	2b00      	cmp	r3, #0
 8004706:	f040 813f 	bne.w	8004988 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6818      	ldr	r0, [r3, #0]
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	6819      	ldr	r1, [r3, #0]
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	461a      	mov	r2, r3
 8004718:	f7ff f9d8 	bl	8003acc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	4a8e      	ldr	r2, [pc, #568]	; (800495c <HAL_ADC_ConfigChannel+0x678>)
 8004722:	4293      	cmp	r3, r2
 8004724:	f040 8130 	bne.w	8004988 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004734:	2b00      	cmp	r3, #0
 8004736:	d10b      	bne.n	8004750 <HAL_ADC_ConfigChannel+0x46c>
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	0e9b      	lsrs	r3, r3, #26
 800473e:	3301      	adds	r3, #1
 8004740:	f003 031f 	and.w	r3, r3, #31
 8004744:	2b09      	cmp	r3, #9
 8004746:	bf94      	ite	ls
 8004748:	2301      	movls	r3, #1
 800474a:	2300      	movhi	r3, #0
 800474c:	b2db      	uxtb	r3, r3
 800474e:	e019      	b.n	8004784 <HAL_ADC_ConfigChannel+0x4a0>
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004756:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004758:	fa93 f3a3 	rbit	r3, r3
 800475c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800475e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004760:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004762:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004764:	2b00      	cmp	r3, #0
 8004766:	d101      	bne.n	800476c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8004768:	2320      	movs	r3, #32
 800476a:	e003      	b.n	8004774 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 800476c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800476e:	fab3 f383 	clz	r3, r3
 8004772:	b2db      	uxtb	r3, r3
 8004774:	3301      	adds	r3, #1
 8004776:	f003 031f 	and.w	r3, r3, #31
 800477a:	2b09      	cmp	r3, #9
 800477c:	bf94      	ite	ls
 800477e:	2301      	movls	r3, #1
 8004780:	2300      	movhi	r3, #0
 8004782:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004784:	2b00      	cmp	r3, #0
 8004786:	d079      	beq.n	800487c <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004790:	2b00      	cmp	r3, #0
 8004792:	d107      	bne.n	80047a4 <HAL_ADC_ConfigChannel+0x4c0>
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	0e9b      	lsrs	r3, r3, #26
 800479a:	3301      	adds	r3, #1
 800479c:	069b      	lsls	r3, r3, #26
 800479e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80047a2:	e015      	b.n	80047d0 <HAL_ADC_ConfigChannel+0x4ec>
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047ac:	fa93 f3a3 	rbit	r3, r3
 80047b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80047b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047b4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80047b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d101      	bne.n	80047c0 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80047bc:	2320      	movs	r3, #32
 80047be:	e003      	b.n	80047c8 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80047c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047c2:	fab3 f383 	clz	r3, r3
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	3301      	adds	r3, #1
 80047ca:	069b      	lsls	r3, r3, #26
 80047cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d109      	bne.n	80047f0 <HAL_ADC_ConfigChannel+0x50c>
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	0e9b      	lsrs	r3, r3, #26
 80047e2:	3301      	adds	r3, #1
 80047e4:	f003 031f 	and.w	r3, r3, #31
 80047e8:	2101      	movs	r1, #1
 80047ea:	fa01 f303 	lsl.w	r3, r1, r3
 80047ee:	e017      	b.n	8004820 <HAL_ADC_ConfigChannel+0x53c>
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047f8:	fa93 f3a3 	rbit	r3, r3
 80047fc:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80047fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004800:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004802:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004804:	2b00      	cmp	r3, #0
 8004806:	d101      	bne.n	800480c <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8004808:	2320      	movs	r3, #32
 800480a:	e003      	b.n	8004814 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 800480c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800480e:	fab3 f383 	clz	r3, r3
 8004812:	b2db      	uxtb	r3, r3
 8004814:	3301      	adds	r3, #1
 8004816:	f003 031f 	and.w	r3, r3, #31
 800481a:	2101      	movs	r1, #1
 800481c:	fa01 f303 	lsl.w	r3, r1, r3
 8004820:	ea42 0103 	orr.w	r1, r2, r3
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800482c:	2b00      	cmp	r3, #0
 800482e:	d10a      	bne.n	8004846 <HAL_ADC_ConfigChannel+0x562>
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	0e9b      	lsrs	r3, r3, #26
 8004836:	3301      	adds	r3, #1
 8004838:	f003 021f 	and.w	r2, r3, #31
 800483c:	4613      	mov	r3, r2
 800483e:	005b      	lsls	r3, r3, #1
 8004840:	4413      	add	r3, r2
 8004842:	051b      	lsls	r3, r3, #20
 8004844:	e018      	b.n	8004878 <HAL_ADC_ConfigChannel+0x594>
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800484c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800484e:	fa93 f3a3 	rbit	r3, r3
 8004852:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004856:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800485a:	2b00      	cmp	r3, #0
 800485c:	d101      	bne.n	8004862 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800485e:	2320      	movs	r3, #32
 8004860:	e003      	b.n	800486a <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8004862:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004864:	fab3 f383 	clz	r3, r3
 8004868:	b2db      	uxtb	r3, r3
 800486a:	3301      	adds	r3, #1
 800486c:	f003 021f 	and.w	r2, r3, #31
 8004870:	4613      	mov	r3, r2
 8004872:	005b      	lsls	r3, r3, #1
 8004874:	4413      	add	r3, r2
 8004876:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004878:	430b      	orrs	r3, r1
 800487a:	e080      	b.n	800497e <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004884:	2b00      	cmp	r3, #0
 8004886:	d107      	bne.n	8004898 <HAL_ADC_ConfigChannel+0x5b4>
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	0e9b      	lsrs	r3, r3, #26
 800488e:	3301      	adds	r3, #1
 8004890:	069b      	lsls	r3, r3, #26
 8004892:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004896:	e015      	b.n	80048c4 <HAL_ADC_ConfigChannel+0x5e0>
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800489e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a0:	fa93 f3a3 	rbit	r3, r3
 80048a4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80048a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80048aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d101      	bne.n	80048b4 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80048b0:	2320      	movs	r3, #32
 80048b2:	e003      	b.n	80048bc <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80048b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b6:	fab3 f383 	clz	r3, r3
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	3301      	adds	r3, #1
 80048be:	069b      	lsls	r3, r3, #26
 80048c0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d109      	bne.n	80048e4 <HAL_ADC_ConfigChannel+0x600>
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	0e9b      	lsrs	r3, r3, #26
 80048d6:	3301      	adds	r3, #1
 80048d8:	f003 031f 	and.w	r3, r3, #31
 80048dc:	2101      	movs	r1, #1
 80048de:	fa01 f303 	lsl.w	r3, r1, r3
 80048e2:	e017      	b.n	8004914 <HAL_ADC_ConfigChannel+0x630>
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ea:	6a3b      	ldr	r3, [r7, #32]
 80048ec:	fa93 f3a3 	rbit	r3, r3
 80048f0:	61fb      	str	r3, [r7, #28]
  return result;
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80048f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d101      	bne.n	8004900 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80048fc:	2320      	movs	r3, #32
 80048fe:	e003      	b.n	8004908 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8004900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004902:	fab3 f383 	clz	r3, r3
 8004906:	b2db      	uxtb	r3, r3
 8004908:	3301      	adds	r3, #1
 800490a:	f003 031f 	and.w	r3, r3, #31
 800490e:	2101      	movs	r1, #1
 8004910:	fa01 f303 	lsl.w	r3, r1, r3
 8004914:	ea42 0103 	orr.w	r1, r2, r3
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004920:	2b00      	cmp	r3, #0
 8004922:	d10d      	bne.n	8004940 <HAL_ADC_ConfigChannel+0x65c>
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	0e9b      	lsrs	r3, r3, #26
 800492a:	3301      	adds	r3, #1
 800492c:	f003 021f 	and.w	r2, r3, #31
 8004930:	4613      	mov	r3, r2
 8004932:	005b      	lsls	r3, r3, #1
 8004934:	4413      	add	r3, r2
 8004936:	3b1e      	subs	r3, #30
 8004938:	051b      	lsls	r3, r3, #20
 800493a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800493e:	e01d      	b.n	800497c <HAL_ADC_ConfigChannel+0x698>
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	fa93 f3a3 	rbit	r3, r3
 800494c:	613b      	str	r3, [r7, #16]
  return result;
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d103      	bne.n	8004960 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8004958:	2320      	movs	r3, #32
 800495a:	e005      	b.n	8004968 <HAL_ADC_ConfigChannel+0x684>
 800495c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004960:	69bb      	ldr	r3, [r7, #24]
 8004962:	fab3 f383 	clz	r3, r3
 8004966:	b2db      	uxtb	r3, r3
 8004968:	3301      	adds	r3, #1
 800496a:	f003 021f 	and.w	r2, r3, #31
 800496e:	4613      	mov	r3, r2
 8004970:	005b      	lsls	r3, r3, #1
 8004972:	4413      	add	r3, r2
 8004974:	3b1e      	subs	r3, #30
 8004976:	051b      	lsls	r3, r3, #20
 8004978:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800497c:	430b      	orrs	r3, r1
 800497e:	683a      	ldr	r2, [r7, #0]
 8004980:	6892      	ldr	r2, [r2, #8]
 8004982:	4619      	mov	r1, r3
 8004984:	f7ff f876 	bl	8003a74 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	4b44      	ldr	r3, [pc, #272]	; (8004aa0 <HAL_ADC_ConfigChannel+0x7bc>)
 800498e:	4013      	ands	r3, r2
 8004990:	2b00      	cmp	r3, #0
 8004992:	d07a      	beq.n	8004a8a <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004994:	4843      	ldr	r0, [pc, #268]	; (8004aa4 <HAL_ADC_ConfigChannel+0x7c0>)
 8004996:	f7fe ffcb 	bl	8003930 <LL_ADC_GetCommonPathInternalCh>
 800499a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a41      	ldr	r2, [pc, #260]	; (8004aa8 <HAL_ADC_ConfigChannel+0x7c4>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d12c      	bne.n	8004a02 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80049a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80049ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d126      	bne.n	8004a02 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a3c      	ldr	r2, [pc, #240]	; (8004aac <HAL_ADC_ConfigChannel+0x7c8>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d004      	beq.n	80049c8 <HAL_ADC_ConfigChannel+0x6e4>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a3b      	ldr	r2, [pc, #236]	; (8004ab0 <HAL_ADC_ConfigChannel+0x7cc>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d15d      	bne.n	8004a84 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80049c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80049cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80049d0:	4619      	mov	r1, r3
 80049d2:	4834      	ldr	r0, [pc, #208]	; (8004aa4 <HAL_ADC_ConfigChannel+0x7c0>)
 80049d4:	f7fe ff99 	bl	800390a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80049d8:	4b36      	ldr	r3, [pc, #216]	; (8004ab4 <HAL_ADC_ConfigChannel+0x7d0>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	099b      	lsrs	r3, r3, #6
 80049de:	4a36      	ldr	r2, [pc, #216]	; (8004ab8 <HAL_ADC_ConfigChannel+0x7d4>)
 80049e0:	fba2 2303 	umull	r2, r3, r2, r3
 80049e4:	099b      	lsrs	r3, r3, #6
 80049e6:	1c5a      	adds	r2, r3, #1
 80049e8:	4613      	mov	r3, r2
 80049ea:	005b      	lsls	r3, r3, #1
 80049ec:	4413      	add	r3, r2
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80049f2:	e002      	b.n	80049fa <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	3b01      	subs	r3, #1
 80049f8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d1f9      	bne.n	80049f4 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004a00:	e040      	b.n	8004a84 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a2d      	ldr	r2, [pc, #180]	; (8004abc <HAL_ADC_ConfigChannel+0x7d8>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d118      	bne.n	8004a3e <HAL_ADC_ConfigChannel+0x75a>
 8004a0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004a10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d112      	bne.n	8004a3e <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a23      	ldr	r2, [pc, #140]	; (8004aac <HAL_ADC_ConfigChannel+0x7c8>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d004      	beq.n	8004a2c <HAL_ADC_ConfigChannel+0x748>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a22      	ldr	r2, [pc, #136]	; (8004ab0 <HAL_ADC_ConfigChannel+0x7cc>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d12d      	bne.n	8004a88 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004a30:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a34:	4619      	mov	r1, r3
 8004a36:	481b      	ldr	r0, [pc, #108]	; (8004aa4 <HAL_ADC_ConfigChannel+0x7c0>)
 8004a38:	f7fe ff67 	bl	800390a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004a3c:	e024      	b.n	8004a88 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a1f      	ldr	r2, [pc, #124]	; (8004ac0 <HAL_ADC_ConfigChannel+0x7dc>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d120      	bne.n	8004a8a <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004a48:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004a4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d11a      	bne.n	8004a8a <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a14      	ldr	r2, [pc, #80]	; (8004aac <HAL_ADC_ConfigChannel+0x7c8>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d115      	bne.n	8004a8a <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a5e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004a62:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004a66:	4619      	mov	r1, r3
 8004a68:	480e      	ldr	r0, [pc, #56]	; (8004aa4 <HAL_ADC_ConfigChannel+0x7c0>)
 8004a6a:	f7fe ff4e 	bl	800390a <LL_ADC_SetCommonPathInternalCh>
 8004a6e:	e00c      	b.n	8004a8a <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a74:	f043 0220 	orr.w	r2, r3, #32
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8004a82:	e002      	b.n	8004a8a <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004a84:	bf00      	nop
 8004a86:	e000      	b.n	8004a8a <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004a88:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004a92:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	37d8      	adds	r7, #216	; 0xd8
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	80080000 	.word	0x80080000
 8004aa4:	50040300 	.word	0x50040300
 8004aa8:	c7520000 	.word	0xc7520000
 8004aac:	50040000 	.word	0x50040000
 8004ab0:	50040200 	.word	0x50040200
 8004ab4:	20000084 	.word	0x20000084
 8004ab8:	053e2d63 	.word	0x053e2d63
 8004abc:	cb840000 	.word	0xcb840000
 8004ac0:	80000001 	.word	0x80000001

08004ac4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f7ff f8b1 	bl	8003c38 <LL_ADC_IsEnabled>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d14d      	bne.n	8004b78 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	689a      	ldr	r2, [r3, #8]
 8004ae2:	4b28      	ldr	r3, [pc, #160]	; (8004b84 <ADC_Enable+0xc0>)
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d00d      	beq.n	8004b06 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aee:	f043 0210 	orr.w	r2, r3, #16
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004afa:	f043 0201 	orr.w	r2, r3, #1
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e039      	b.n	8004b7a <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f7ff f86c 	bl	8003be8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004b10:	f7fe feb8 	bl	8003884 <HAL_GetTick>
 8004b14:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004b16:	e028      	b.n	8004b6a <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f7ff f88b 	bl	8003c38 <LL_ADC_IsEnabled>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d104      	bne.n	8004b32 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f7ff f85b 	bl	8003be8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004b32:	f7fe fea7 	bl	8003884 <HAL_GetTick>
 8004b36:	4602      	mov	r2, r0
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	d914      	bls.n	8004b6a <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 0301 	and.w	r3, r3, #1
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d00d      	beq.n	8004b6a <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b52:	f043 0210 	orr.w	r2, r3, #16
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b5e:	f043 0201 	orr.w	r2, r3, #1
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e007      	b.n	8004b7a <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0301 	and.w	r3, r3, #1
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d1cf      	bne.n	8004b18 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3710      	adds	r7, #16
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	8000003f 	.word	0x8000003f

08004b88 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4618      	mov	r0, r3
 8004b96:	f7ff f862 	bl	8003c5e <LL_ADC_IsDisableOngoing>
 8004b9a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f7ff f849 	bl	8003c38 <LL_ADC_IsEnabled>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d047      	beq.n	8004c3c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d144      	bne.n	8004c3c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	f003 030d 	and.w	r3, r3, #13
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d10c      	bne.n	8004bda <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f7ff f823 	bl	8003c10 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	2203      	movs	r2, #3
 8004bd0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004bd2:	f7fe fe57 	bl	8003884 <HAL_GetTick>
 8004bd6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004bd8:	e029      	b.n	8004c2e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bde:	f043 0210 	orr.w	r2, r3, #16
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bea:	f043 0201 	orr.w	r2, r3, #1
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e023      	b.n	8004c3e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004bf6:	f7fe fe45 	bl	8003884 <HAL_GetTick>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	d914      	bls.n	8004c2e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	f003 0301 	and.w	r3, r3, #1
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d00d      	beq.n	8004c2e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c16:	f043 0210 	orr.w	r2, r3, #16
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c22:	f043 0201 	orr.w	r2, r3, #1
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e007      	b.n	8004c3e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	f003 0301 	and.w	r3, r3, #1
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d1dc      	bne.n	8004bf6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3710      	adds	r7, #16
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}

08004c46 <LL_ADC_IsEnabled>:
{
 8004c46:	b480      	push	{r7}
 8004c48:	b083      	sub	sp, #12
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	f003 0301 	and.w	r3, r3, #1
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d101      	bne.n	8004c5e <LL_ADC_IsEnabled+0x18>
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e000      	b.n	8004c60 <LL_ADC_IsEnabled+0x1a>
 8004c5e:	2300      	movs	r3, #0
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <LL_ADC_StartCalibration>:
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004c7e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004c82:	683a      	ldr	r2, [r7, #0]
 8004c84:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	609a      	str	r2, [r3, #8]
}
 8004c92:	bf00      	nop
 8004c94:	370c      	adds	r7, #12
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr

08004c9e <LL_ADC_IsCalibrationOnGoing>:
{
 8004c9e:	b480      	push	{r7}
 8004ca0:	b083      	sub	sp, #12
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004cae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004cb2:	d101      	bne.n	8004cb8 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e000      	b.n	8004cba <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	370c      	adds	r7, #12
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr

08004cc6 <LL_ADC_REG_IsConversionOngoing>:
{
 8004cc6:	b480      	push	{r7}
 8004cc8:	b083      	sub	sp, #12
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	f003 0304 	and.w	r3, r3, #4
 8004cd6:	2b04      	cmp	r3, #4
 8004cd8:	d101      	bne.n	8004cde <LL_ADC_REG_IsConversionOngoing+0x18>
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e000      	b.n	8004ce0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004cde:	2300      	movs	r3, #0
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	370c      	adds	r7, #12
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d101      	bne.n	8004d08 <HAL_ADCEx_Calibration_Start+0x1c>
 8004d04:	2302      	movs	r3, #2
 8004d06:	e04d      	b.n	8004da4 <HAL_ADCEx_Calibration_Start+0xb8>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f7ff ff39 	bl	8004b88 <ADC_Disable>
 8004d16:	4603      	mov	r3, r0
 8004d18:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004d1a:	7bfb      	ldrb	r3, [r7, #15]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d136      	bne.n	8004d8e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d24:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004d28:	f023 0302 	bic.w	r3, r3, #2
 8004d2c:	f043 0202 	orr.w	r2, r3, #2
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	6839      	ldr	r1, [r7, #0]
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f7ff ff96 	bl	8004c6c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004d40:	e014      	b.n	8004d6c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	3301      	adds	r3, #1
 8004d46:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8004d4e:	d30d      	bcc.n	8004d6c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d54:	f023 0312 	bic.w	r3, r3, #18
 8004d58:	f043 0210 	orr.w	r2, r3, #16
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e01b      	b.n	8004da4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4618      	mov	r0, r3
 8004d72:	f7ff ff94 	bl	8004c9e <LL_ADC_IsCalibrationOnGoing>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d1e2      	bne.n	8004d42 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d80:	f023 0303 	bic.w	r3, r3, #3
 8004d84:	f043 0201 	orr.w	r2, r3, #1
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	655a      	str	r2, [r3, #84]	; 0x54
 8004d8c:	e005      	b.n	8004d9a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d92:	f043 0210 	orr.w	r2, r3, #16
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3710      	adds	r7, #16
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004dac:	b590      	push	{r4, r7, lr}
 8004dae:	b09f      	sub	sp, #124	; 0x7c
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004db6:	2300      	movs	r3, #0
 8004db8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d101      	bne.n	8004dca <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004dc6:	2302      	movs	r3, #2
 8004dc8:	e093      	b.n	8004ef2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a47      	ldr	r2, [pc, #284]	; (8004efc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d102      	bne.n	8004dea <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004de4:	4b46      	ldr	r3, [pc, #280]	; (8004f00 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004de6:	60bb      	str	r3, [r7, #8]
 8004de8:	e001      	b.n	8004dee <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004dea:	2300      	movs	r3, #0
 8004dec:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d10b      	bne.n	8004e0c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004df8:	f043 0220 	orr.w	r2, r3, #32
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e072      	b.n	8004ef2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f7ff ff59 	bl	8004cc6 <LL_ADC_REG_IsConversionOngoing>
 8004e14:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f7ff ff53 	bl	8004cc6 <LL_ADC_REG_IsConversionOngoing>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d154      	bne.n	8004ed0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004e26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d151      	bne.n	8004ed0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004e2c:	4b35      	ldr	r3, [pc, #212]	; (8004f04 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8004e2e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d02c      	beq.n	8004e92 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004e38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	6859      	ldr	r1, [r3, #4]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004e4a:	035b      	lsls	r3, r3, #13
 8004e4c:	430b      	orrs	r3, r1
 8004e4e:	431a      	orrs	r2, r3
 8004e50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e52:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004e54:	4829      	ldr	r0, [pc, #164]	; (8004efc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004e56:	f7ff fef6 	bl	8004c46 <LL_ADC_IsEnabled>
 8004e5a:	4604      	mov	r4, r0
 8004e5c:	4828      	ldr	r0, [pc, #160]	; (8004f00 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004e5e:	f7ff fef2 	bl	8004c46 <LL_ADC_IsEnabled>
 8004e62:	4603      	mov	r3, r0
 8004e64:	431c      	orrs	r4, r3
 8004e66:	4828      	ldr	r0, [pc, #160]	; (8004f08 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8004e68:	f7ff feed 	bl	8004c46 <LL_ADC_IsEnabled>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	4323      	orrs	r3, r4
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d137      	bne.n	8004ee4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004e74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004e7c:	f023 030f 	bic.w	r3, r3, #15
 8004e80:	683a      	ldr	r2, [r7, #0]
 8004e82:	6811      	ldr	r1, [r2, #0]
 8004e84:	683a      	ldr	r2, [r7, #0]
 8004e86:	6892      	ldr	r2, [r2, #8]
 8004e88:	430a      	orrs	r2, r1
 8004e8a:	431a      	orrs	r2, r3
 8004e8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e8e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004e90:	e028      	b.n	8004ee4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004e92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e9c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004e9e:	4817      	ldr	r0, [pc, #92]	; (8004efc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004ea0:	f7ff fed1 	bl	8004c46 <LL_ADC_IsEnabled>
 8004ea4:	4604      	mov	r4, r0
 8004ea6:	4816      	ldr	r0, [pc, #88]	; (8004f00 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004ea8:	f7ff fecd 	bl	8004c46 <LL_ADC_IsEnabled>
 8004eac:	4603      	mov	r3, r0
 8004eae:	431c      	orrs	r4, r3
 8004eb0:	4815      	ldr	r0, [pc, #84]	; (8004f08 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8004eb2:	f7ff fec8 	bl	8004c46 <LL_ADC_IsEnabled>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	4323      	orrs	r3, r4
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d112      	bne.n	8004ee4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004ebe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004ec6:	f023 030f 	bic.w	r3, r3, #15
 8004eca:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004ecc:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004ece:	e009      	b.n	8004ee4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ed4:	f043 0220 	orr.w	r2, r3, #32
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004ee2:	e000      	b.n	8004ee6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004ee4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004eee:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	377c      	adds	r7, #124	; 0x7c
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd90      	pop	{r4, r7, pc}
 8004efa:	bf00      	nop
 8004efc:	50040000 	.word	0x50040000
 8004f00:	50040100 	.word	0x50040100
 8004f04:	50040300 	.word	0x50040300
 8004f08:	50040200 	.word	0x50040200

08004f0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b085      	sub	sp, #20
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f003 0307 	and.w	r3, r3, #7
 8004f1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f1c:	4b0c      	ldr	r3, [pc, #48]	; (8004f50 <__NVIC_SetPriorityGrouping+0x44>)
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f22:	68ba      	ldr	r2, [r7, #8]
 8004f24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004f28:	4013      	ands	r3, r2
 8004f2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004f38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f3e:	4a04      	ldr	r2, [pc, #16]	; (8004f50 <__NVIC_SetPriorityGrouping+0x44>)
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	60d3      	str	r3, [r2, #12]
}
 8004f44:	bf00      	nop
 8004f46:	3714      	adds	r7, #20
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr
 8004f50:	e000ed00 	.word	0xe000ed00

08004f54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f54:	b480      	push	{r7}
 8004f56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f58:	4b04      	ldr	r3, [pc, #16]	; (8004f6c <__NVIC_GetPriorityGrouping+0x18>)
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	0a1b      	lsrs	r3, r3, #8
 8004f5e:	f003 0307 	and.w	r3, r3, #7
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr
 8004f6c:	e000ed00 	.word	0xe000ed00

08004f70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b083      	sub	sp, #12
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	4603      	mov	r3, r0
 8004f78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	db0b      	blt.n	8004f9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f82:	79fb      	ldrb	r3, [r7, #7]
 8004f84:	f003 021f 	and.w	r2, r3, #31
 8004f88:	4907      	ldr	r1, [pc, #28]	; (8004fa8 <__NVIC_EnableIRQ+0x38>)
 8004f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f8e:	095b      	lsrs	r3, r3, #5
 8004f90:	2001      	movs	r0, #1
 8004f92:	fa00 f202 	lsl.w	r2, r0, r2
 8004f96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004f9a:	bf00      	nop
 8004f9c:	370c      	adds	r7, #12
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr
 8004fa6:	bf00      	nop
 8004fa8:	e000e100 	.word	0xe000e100

08004fac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b083      	sub	sp, #12
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	6039      	str	r1, [r7, #0]
 8004fb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	db0a      	blt.n	8004fd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	b2da      	uxtb	r2, r3
 8004fc4:	490c      	ldr	r1, [pc, #48]	; (8004ff8 <__NVIC_SetPriority+0x4c>)
 8004fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fca:	0112      	lsls	r2, r2, #4
 8004fcc:	b2d2      	uxtb	r2, r2
 8004fce:	440b      	add	r3, r1
 8004fd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004fd4:	e00a      	b.n	8004fec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	b2da      	uxtb	r2, r3
 8004fda:	4908      	ldr	r1, [pc, #32]	; (8004ffc <__NVIC_SetPriority+0x50>)
 8004fdc:	79fb      	ldrb	r3, [r7, #7]
 8004fde:	f003 030f 	and.w	r3, r3, #15
 8004fe2:	3b04      	subs	r3, #4
 8004fe4:	0112      	lsls	r2, r2, #4
 8004fe6:	b2d2      	uxtb	r2, r2
 8004fe8:	440b      	add	r3, r1
 8004fea:	761a      	strb	r2, [r3, #24]
}
 8004fec:	bf00      	nop
 8004fee:	370c      	adds	r7, #12
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr
 8004ff8:	e000e100 	.word	0xe000e100
 8004ffc:	e000ed00 	.word	0xe000ed00

08005000 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005000:	b480      	push	{r7}
 8005002:	b089      	sub	sp, #36	; 0x24
 8005004:	af00      	add	r7, sp, #0
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	60b9      	str	r1, [r7, #8]
 800500a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f003 0307 	and.w	r3, r3, #7
 8005012:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	f1c3 0307 	rsb	r3, r3, #7
 800501a:	2b04      	cmp	r3, #4
 800501c:	bf28      	it	cs
 800501e:	2304      	movcs	r3, #4
 8005020:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	3304      	adds	r3, #4
 8005026:	2b06      	cmp	r3, #6
 8005028:	d902      	bls.n	8005030 <NVIC_EncodePriority+0x30>
 800502a:	69fb      	ldr	r3, [r7, #28]
 800502c:	3b03      	subs	r3, #3
 800502e:	e000      	b.n	8005032 <NVIC_EncodePriority+0x32>
 8005030:	2300      	movs	r3, #0
 8005032:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005034:	f04f 32ff 	mov.w	r2, #4294967295
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	fa02 f303 	lsl.w	r3, r2, r3
 800503e:	43da      	mvns	r2, r3
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	401a      	ands	r2, r3
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005048:	f04f 31ff 	mov.w	r1, #4294967295
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	fa01 f303 	lsl.w	r3, r1, r3
 8005052:	43d9      	mvns	r1, r3
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005058:	4313      	orrs	r3, r2
         );
}
 800505a:	4618      	mov	r0, r3
 800505c:	3724      	adds	r7, #36	; 0x24
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr
	...

08005068 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	3b01      	subs	r3, #1
 8005074:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005078:	d301      	bcc.n	800507e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800507a:	2301      	movs	r3, #1
 800507c:	e00f      	b.n	800509e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800507e:	4a0a      	ldr	r2, [pc, #40]	; (80050a8 <SysTick_Config+0x40>)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	3b01      	subs	r3, #1
 8005084:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005086:	210f      	movs	r1, #15
 8005088:	f04f 30ff 	mov.w	r0, #4294967295
 800508c:	f7ff ff8e 	bl	8004fac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005090:	4b05      	ldr	r3, [pc, #20]	; (80050a8 <SysTick_Config+0x40>)
 8005092:	2200      	movs	r2, #0
 8005094:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005096:	4b04      	ldr	r3, [pc, #16]	; (80050a8 <SysTick_Config+0x40>)
 8005098:	2207      	movs	r2, #7
 800509a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3708      	adds	r7, #8
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	e000e010 	.word	0xe000e010

080050ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b082      	sub	sp, #8
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f7ff ff29 	bl	8004f0c <__NVIC_SetPriorityGrouping>
}
 80050ba:	bf00      	nop
 80050bc:	3708      	adds	r7, #8
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}

080050c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050c2:	b580      	push	{r7, lr}
 80050c4:	b086      	sub	sp, #24
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	4603      	mov	r3, r0
 80050ca:	60b9      	str	r1, [r7, #8]
 80050cc:	607a      	str	r2, [r7, #4]
 80050ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80050d0:	2300      	movs	r3, #0
 80050d2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80050d4:	f7ff ff3e 	bl	8004f54 <__NVIC_GetPriorityGrouping>
 80050d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	68b9      	ldr	r1, [r7, #8]
 80050de:	6978      	ldr	r0, [r7, #20]
 80050e0:	f7ff ff8e 	bl	8005000 <NVIC_EncodePriority>
 80050e4:	4602      	mov	r2, r0
 80050e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050ea:	4611      	mov	r1, r2
 80050ec:	4618      	mov	r0, r3
 80050ee:	f7ff ff5d 	bl	8004fac <__NVIC_SetPriority>
}
 80050f2:	bf00      	nop
 80050f4:	3718      	adds	r7, #24
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}

080050fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050fa:	b580      	push	{r7, lr}
 80050fc:	b082      	sub	sp, #8
 80050fe:	af00      	add	r7, sp, #0
 8005100:	4603      	mov	r3, r0
 8005102:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005104:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005108:	4618      	mov	r0, r3
 800510a:	f7ff ff31 	bl	8004f70 <__NVIC_EnableIRQ>
}
 800510e:	bf00      	nop
 8005110:	3708      	adds	r7, #8
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}

08005116 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005116:	b580      	push	{r7, lr}
 8005118:	b082      	sub	sp, #8
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f7ff ffa2 	bl	8005068 <SysTick_Config>
 8005124:	4603      	mov	r3, r0
}
 8005126:	4618      	mov	r0, r3
 8005128:	3708      	adds	r7, #8
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
	...

08005130 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005130:	b480      	push	{r7}
 8005132:	b085      	sub	sp, #20
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d101      	bne.n	8005142 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e098      	b.n	8005274 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	461a      	mov	r2, r3
 8005148:	4b4d      	ldr	r3, [pc, #308]	; (8005280 <HAL_DMA_Init+0x150>)
 800514a:	429a      	cmp	r2, r3
 800514c:	d80f      	bhi.n	800516e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	461a      	mov	r2, r3
 8005154:	4b4b      	ldr	r3, [pc, #300]	; (8005284 <HAL_DMA_Init+0x154>)
 8005156:	4413      	add	r3, r2
 8005158:	4a4b      	ldr	r2, [pc, #300]	; (8005288 <HAL_DMA_Init+0x158>)
 800515a:	fba2 2303 	umull	r2, r3, r2, r3
 800515e:	091b      	lsrs	r3, r3, #4
 8005160:	009a      	lsls	r2, r3, #2
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a48      	ldr	r2, [pc, #288]	; (800528c <HAL_DMA_Init+0x15c>)
 800516a:	641a      	str	r2, [r3, #64]	; 0x40
 800516c:	e00e      	b.n	800518c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	461a      	mov	r2, r3
 8005174:	4b46      	ldr	r3, [pc, #280]	; (8005290 <HAL_DMA_Init+0x160>)
 8005176:	4413      	add	r3, r2
 8005178:	4a43      	ldr	r2, [pc, #268]	; (8005288 <HAL_DMA_Init+0x158>)
 800517a:	fba2 2303 	umull	r2, r3, r2, r3
 800517e:	091b      	lsrs	r3, r3, #4
 8005180:	009a      	lsls	r2, r3, #2
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a42      	ldr	r2, [pc, #264]	; (8005294 <HAL_DMA_Init+0x164>)
 800518a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2202      	movs	r2, #2
 8005190:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80051a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051a6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80051b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	699b      	ldr	r3, [r3, #24]
 80051c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a1b      	ldr	r3, [r3, #32]
 80051ce:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051e6:	d039      	beq.n	800525c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ec:	4a27      	ldr	r2, [pc, #156]	; (800528c <HAL_DMA_Init+0x15c>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d11a      	bne.n	8005228 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80051f2:	4b29      	ldr	r3, [pc, #164]	; (8005298 <HAL_DMA_Init+0x168>)
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051fa:	f003 031c 	and.w	r3, r3, #28
 80051fe:	210f      	movs	r1, #15
 8005200:	fa01 f303 	lsl.w	r3, r1, r3
 8005204:	43db      	mvns	r3, r3
 8005206:	4924      	ldr	r1, [pc, #144]	; (8005298 <HAL_DMA_Init+0x168>)
 8005208:	4013      	ands	r3, r2
 800520a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800520c:	4b22      	ldr	r3, [pc, #136]	; (8005298 <HAL_DMA_Init+0x168>)
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6859      	ldr	r1, [r3, #4]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005218:	f003 031c 	and.w	r3, r3, #28
 800521c:	fa01 f303 	lsl.w	r3, r1, r3
 8005220:	491d      	ldr	r1, [pc, #116]	; (8005298 <HAL_DMA_Init+0x168>)
 8005222:	4313      	orrs	r3, r2
 8005224:	600b      	str	r3, [r1, #0]
 8005226:	e019      	b.n	800525c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005228:	4b1c      	ldr	r3, [pc, #112]	; (800529c <HAL_DMA_Init+0x16c>)
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005230:	f003 031c 	and.w	r3, r3, #28
 8005234:	210f      	movs	r1, #15
 8005236:	fa01 f303 	lsl.w	r3, r1, r3
 800523a:	43db      	mvns	r3, r3
 800523c:	4917      	ldr	r1, [pc, #92]	; (800529c <HAL_DMA_Init+0x16c>)
 800523e:	4013      	ands	r3, r2
 8005240:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005242:	4b16      	ldr	r3, [pc, #88]	; (800529c <HAL_DMA_Init+0x16c>)
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6859      	ldr	r1, [r3, #4]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800524e:	f003 031c 	and.w	r3, r3, #28
 8005252:	fa01 f303 	lsl.w	r3, r1, r3
 8005256:	4911      	ldr	r1, [pc, #68]	; (800529c <HAL_DMA_Init+0x16c>)
 8005258:	4313      	orrs	r3, r2
 800525a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2201      	movs	r2, #1
 8005266:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005272:	2300      	movs	r3, #0
}
 8005274:	4618      	mov	r0, r3
 8005276:	3714      	adds	r7, #20
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr
 8005280:	40020407 	.word	0x40020407
 8005284:	bffdfff8 	.word	0xbffdfff8
 8005288:	cccccccd 	.word	0xcccccccd
 800528c:	40020000 	.word	0x40020000
 8005290:	bffdfbf8 	.word	0xbffdfbf8
 8005294:	40020400 	.word	0x40020400
 8005298:	400200a8 	.word	0x400200a8
 800529c:	400204a8 	.word	0x400204a8

080052a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b086      	sub	sp, #24
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	607a      	str	r2, [r7, #4]
 80052ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052ae:	2300      	movs	r3, #0
 80052b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d101      	bne.n	80052c0 <HAL_DMA_Start_IT+0x20>
 80052bc:	2302      	movs	r3, #2
 80052be:	e04b      	b.n	8005358 <HAL_DMA_Start_IT+0xb8>
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2201      	movs	r2, #1
 80052c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d13a      	bne.n	800534a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2202      	movs	r2, #2
 80052d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2200      	movs	r2, #0
 80052e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f022 0201 	bic.w	r2, r2, #1
 80052f0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	68b9      	ldr	r1, [r7, #8]
 80052f8:	68f8      	ldr	r0, [r7, #12]
 80052fa:	f000 f8e0 	bl	80054be <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005302:	2b00      	cmp	r3, #0
 8005304:	d008      	beq.n	8005318 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f042 020e 	orr.w	r2, r2, #14
 8005314:	601a      	str	r2, [r3, #0]
 8005316:	e00f      	b.n	8005338 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f022 0204 	bic.w	r2, r2, #4
 8005326:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f042 020a 	orr.w	r2, r2, #10
 8005336:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f042 0201 	orr.w	r2, r2, #1
 8005346:	601a      	str	r2, [r3, #0]
 8005348:	e005      	b.n	8005356 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2200      	movs	r2, #0
 800534e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005352:	2302      	movs	r3, #2
 8005354:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005356:	7dfb      	ldrb	r3, [r7, #23]
}
 8005358:	4618      	mov	r0, r3
 800535a:	3718      	adds	r7, #24
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}

08005360 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800537c:	f003 031c 	and.w	r3, r3, #28
 8005380:	2204      	movs	r2, #4
 8005382:	409a      	lsls	r2, r3
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	4013      	ands	r3, r2
 8005388:	2b00      	cmp	r3, #0
 800538a:	d026      	beq.n	80053da <HAL_DMA_IRQHandler+0x7a>
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	f003 0304 	and.w	r3, r3, #4
 8005392:	2b00      	cmp	r3, #0
 8005394:	d021      	beq.n	80053da <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 0320 	and.w	r3, r3, #32
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d107      	bne.n	80053b4 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f022 0204 	bic.w	r2, r2, #4
 80053b2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053b8:	f003 021c 	and.w	r2, r3, #28
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c0:	2104      	movs	r1, #4
 80053c2:	fa01 f202 	lsl.w	r2, r1, r2
 80053c6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d071      	beq.n	80054b4 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80053d8:	e06c      	b.n	80054b4 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053de:	f003 031c 	and.w	r3, r3, #28
 80053e2:	2202      	movs	r2, #2
 80053e4:	409a      	lsls	r2, r3
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	4013      	ands	r3, r2
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d02e      	beq.n	800544c <HAL_DMA_IRQHandler+0xec>
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	f003 0302 	and.w	r3, r3, #2
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d029      	beq.n	800544c <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 0320 	and.w	r3, r3, #32
 8005402:	2b00      	cmp	r3, #0
 8005404:	d10b      	bne.n	800541e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f022 020a 	bic.w	r2, r2, #10
 8005414:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2201      	movs	r2, #1
 800541a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005422:	f003 021c 	and.w	r2, r3, #28
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542a:	2102      	movs	r1, #2
 800542c:	fa01 f202 	lsl.w	r2, r1, r2
 8005430:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800543e:	2b00      	cmp	r3, #0
 8005440:	d038      	beq.n	80054b4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800544a:	e033      	b.n	80054b4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005450:	f003 031c 	and.w	r3, r3, #28
 8005454:	2208      	movs	r2, #8
 8005456:	409a      	lsls	r2, r3
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	4013      	ands	r3, r2
 800545c:	2b00      	cmp	r3, #0
 800545e:	d02a      	beq.n	80054b6 <HAL_DMA_IRQHandler+0x156>
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	f003 0308 	and.w	r3, r3, #8
 8005466:	2b00      	cmp	r3, #0
 8005468:	d025      	beq.n	80054b6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f022 020e 	bic.w	r2, r2, #14
 8005478:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800547e:	f003 021c 	and.w	r2, r3, #28
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005486:	2101      	movs	r1, #1
 8005488:	fa01 f202 	lsl.w	r2, r1, r2
 800548c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2201      	movs	r2, #1
 8005492:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2200      	movs	r2, #0
 80054a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d004      	beq.n	80054b6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80054b4:	bf00      	nop
 80054b6:	bf00      	nop
}
 80054b8:	3710      	adds	r7, #16
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}

080054be <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80054be:	b480      	push	{r7}
 80054c0:	b085      	sub	sp, #20
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	60f8      	str	r0, [r7, #12]
 80054c6:	60b9      	str	r1, [r7, #8]
 80054c8:	607a      	str	r2, [r7, #4]
 80054ca:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054d0:	f003 021c 	and.w	r2, r3, #28
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d8:	2101      	movs	r1, #1
 80054da:	fa01 f202 	lsl.w	r2, r1, r2
 80054de:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	683a      	ldr	r2, [r7, #0]
 80054e6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	2b10      	cmp	r3, #16
 80054ee:	d108      	bne.n	8005502 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	68ba      	ldr	r2, [r7, #8]
 80054fe:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005500:	e007      	b.n	8005512 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68ba      	ldr	r2, [r7, #8]
 8005508:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	60da      	str	r2, [r3, #12]
}
 8005512:	bf00      	nop
 8005514:	3714      	adds	r7, #20
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr
	...

08005520 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005520:	b480      	push	{r7}
 8005522:	b087      	sub	sp, #28
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800552a:	2300      	movs	r3, #0
 800552c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800552e:	e17f      	b.n	8005830 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	2101      	movs	r1, #1
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	fa01 f303 	lsl.w	r3, r1, r3
 800553c:	4013      	ands	r3, r2
 800553e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2b00      	cmp	r3, #0
 8005544:	f000 8171 	beq.w	800582a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	f003 0303 	and.w	r3, r3, #3
 8005550:	2b01      	cmp	r3, #1
 8005552:	d005      	beq.n	8005560 <HAL_GPIO_Init+0x40>
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	f003 0303 	and.w	r3, r3, #3
 800555c:	2b02      	cmp	r3, #2
 800555e:	d130      	bne.n	80055c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	005b      	lsls	r3, r3, #1
 800556a:	2203      	movs	r2, #3
 800556c:	fa02 f303 	lsl.w	r3, r2, r3
 8005570:	43db      	mvns	r3, r3
 8005572:	693a      	ldr	r2, [r7, #16]
 8005574:	4013      	ands	r3, r2
 8005576:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	68da      	ldr	r2, [r3, #12]
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	005b      	lsls	r3, r3, #1
 8005580:	fa02 f303 	lsl.w	r3, r2, r3
 8005584:	693a      	ldr	r2, [r7, #16]
 8005586:	4313      	orrs	r3, r2
 8005588:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	693a      	ldr	r2, [r7, #16]
 800558e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005596:	2201      	movs	r2, #1
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	fa02 f303 	lsl.w	r3, r2, r3
 800559e:	43db      	mvns	r3, r3
 80055a0:	693a      	ldr	r2, [r7, #16]
 80055a2:	4013      	ands	r3, r2
 80055a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	091b      	lsrs	r3, r3, #4
 80055ac:	f003 0201 	and.w	r2, r3, #1
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	fa02 f303 	lsl.w	r3, r2, r3
 80055b6:	693a      	ldr	r2, [r7, #16]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	693a      	ldr	r2, [r7, #16]
 80055c0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	f003 0303 	and.w	r3, r3, #3
 80055ca:	2b03      	cmp	r3, #3
 80055cc:	d118      	bne.n	8005600 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80055d4:	2201      	movs	r2, #1
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	fa02 f303 	lsl.w	r3, r2, r3
 80055dc:	43db      	mvns	r3, r3
 80055de:	693a      	ldr	r2, [r7, #16]
 80055e0:	4013      	ands	r3, r2
 80055e2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	08db      	lsrs	r3, r3, #3
 80055ea:	f003 0201 	and.w	r2, r3, #1
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	fa02 f303 	lsl.w	r3, r2, r3
 80055f4:	693a      	ldr	r2, [r7, #16]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	693a      	ldr	r2, [r7, #16]
 80055fe:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	f003 0303 	and.w	r3, r3, #3
 8005608:	2b03      	cmp	r3, #3
 800560a:	d017      	beq.n	800563c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	005b      	lsls	r3, r3, #1
 8005616:	2203      	movs	r2, #3
 8005618:	fa02 f303 	lsl.w	r3, r2, r3
 800561c:	43db      	mvns	r3, r3
 800561e:	693a      	ldr	r2, [r7, #16]
 8005620:	4013      	ands	r3, r2
 8005622:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	689a      	ldr	r2, [r3, #8]
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	005b      	lsls	r3, r3, #1
 800562c:	fa02 f303 	lsl.w	r3, r2, r3
 8005630:	693a      	ldr	r2, [r7, #16]
 8005632:	4313      	orrs	r3, r2
 8005634:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	693a      	ldr	r2, [r7, #16]
 800563a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	f003 0303 	and.w	r3, r3, #3
 8005644:	2b02      	cmp	r3, #2
 8005646:	d123      	bne.n	8005690 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	08da      	lsrs	r2, r3, #3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	3208      	adds	r2, #8
 8005650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005654:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	f003 0307 	and.w	r3, r3, #7
 800565c:	009b      	lsls	r3, r3, #2
 800565e:	220f      	movs	r2, #15
 8005660:	fa02 f303 	lsl.w	r3, r2, r3
 8005664:	43db      	mvns	r3, r3
 8005666:	693a      	ldr	r2, [r7, #16]
 8005668:	4013      	ands	r3, r2
 800566a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	691a      	ldr	r2, [r3, #16]
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	f003 0307 	and.w	r3, r3, #7
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	fa02 f303 	lsl.w	r3, r2, r3
 800567c:	693a      	ldr	r2, [r7, #16]
 800567e:	4313      	orrs	r3, r2
 8005680:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	08da      	lsrs	r2, r3, #3
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	3208      	adds	r2, #8
 800568a:	6939      	ldr	r1, [r7, #16]
 800568c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	005b      	lsls	r3, r3, #1
 800569a:	2203      	movs	r2, #3
 800569c:	fa02 f303 	lsl.w	r3, r2, r3
 80056a0:	43db      	mvns	r3, r3
 80056a2:	693a      	ldr	r2, [r7, #16]
 80056a4:	4013      	ands	r3, r2
 80056a6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	f003 0203 	and.w	r2, r3, #3
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	005b      	lsls	r3, r3, #1
 80056b4:	fa02 f303 	lsl.w	r3, r2, r3
 80056b8:	693a      	ldr	r2, [r7, #16]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	693a      	ldr	r2, [r7, #16]
 80056c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	f000 80ac 	beq.w	800582a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056d2:	4b5f      	ldr	r3, [pc, #380]	; (8005850 <HAL_GPIO_Init+0x330>)
 80056d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056d6:	4a5e      	ldr	r2, [pc, #376]	; (8005850 <HAL_GPIO_Init+0x330>)
 80056d8:	f043 0301 	orr.w	r3, r3, #1
 80056dc:	6613      	str	r3, [r2, #96]	; 0x60
 80056de:	4b5c      	ldr	r3, [pc, #368]	; (8005850 <HAL_GPIO_Init+0x330>)
 80056e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056e2:	f003 0301 	and.w	r3, r3, #1
 80056e6:	60bb      	str	r3, [r7, #8]
 80056e8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80056ea:	4a5a      	ldr	r2, [pc, #360]	; (8005854 <HAL_GPIO_Init+0x334>)
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	089b      	lsrs	r3, r3, #2
 80056f0:	3302      	adds	r3, #2
 80056f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	f003 0303 	and.w	r3, r3, #3
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	220f      	movs	r2, #15
 8005702:	fa02 f303 	lsl.w	r3, r2, r3
 8005706:	43db      	mvns	r3, r3
 8005708:	693a      	ldr	r2, [r7, #16]
 800570a:	4013      	ands	r3, r2
 800570c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005714:	d025      	beq.n	8005762 <HAL_GPIO_Init+0x242>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a4f      	ldr	r2, [pc, #316]	; (8005858 <HAL_GPIO_Init+0x338>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d01f      	beq.n	800575e <HAL_GPIO_Init+0x23e>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a4e      	ldr	r2, [pc, #312]	; (800585c <HAL_GPIO_Init+0x33c>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d019      	beq.n	800575a <HAL_GPIO_Init+0x23a>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a4d      	ldr	r2, [pc, #308]	; (8005860 <HAL_GPIO_Init+0x340>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d013      	beq.n	8005756 <HAL_GPIO_Init+0x236>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a4c      	ldr	r2, [pc, #304]	; (8005864 <HAL_GPIO_Init+0x344>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d00d      	beq.n	8005752 <HAL_GPIO_Init+0x232>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a4b      	ldr	r2, [pc, #300]	; (8005868 <HAL_GPIO_Init+0x348>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d007      	beq.n	800574e <HAL_GPIO_Init+0x22e>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a4a      	ldr	r2, [pc, #296]	; (800586c <HAL_GPIO_Init+0x34c>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d101      	bne.n	800574a <HAL_GPIO_Init+0x22a>
 8005746:	2306      	movs	r3, #6
 8005748:	e00c      	b.n	8005764 <HAL_GPIO_Init+0x244>
 800574a:	2307      	movs	r3, #7
 800574c:	e00a      	b.n	8005764 <HAL_GPIO_Init+0x244>
 800574e:	2305      	movs	r3, #5
 8005750:	e008      	b.n	8005764 <HAL_GPIO_Init+0x244>
 8005752:	2304      	movs	r3, #4
 8005754:	e006      	b.n	8005764 <HAL_GPIO_Init+0x244>
 8005756:	2303      	movs	r3, #3
 8005758:	e004      	b.n	8005764 <HAL_GPIO_Init+0x244>
 800575a:	2302      	movs	r3, #2
 800575c:	e002      	b.n	8005764 <HAL_GPIO_Init+0x244>
 800575e:	2301      	movs	r3, #1
 8005760:	e000      	b.n	8005764 <HAL_GPIO_Init+0x244>
 8005762:	2300      	movs	r3, #0
 8005764:	697a      	ldr	r2, [r7, #20]
 8005766:	f002 0203 	and.w	r2, r2, #3
 800576a:	0092      	lsls	r2, r2, #2
 800576c:	4093      	lsls	r3, r2
 800576e:	693a      	ldr	r2, [r7, #16]
 8005770:	4313      	orrs	r3, r2
 8005772:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005774:	4937      	ldr	r1, [pc, #220]	; (8005854 <HAL_GPIO_Init+0x334>)
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	089b      	lsrs	r3, r3, #2
 800577a:	3302      	adds	r3, #2
 800577c:	693a      	ldr	r2, [r7, #16]
 800577e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005782:	4b3b      	ldr	r3, [pc, #236]	; (8005870 <HAL_GPIO_Init+0x350>)
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	43db      	mvns	r3, r3
 800578c:	693a      	ldr	r2, [r7, #16]
 800578e:	4013      	ands	r3, r2
 8005790:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800579a:	2b00      	cmp	r3, #0
 800579c:	d003      	beq.n	80057a6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800579e:	693a      	ldr	r2, [r7, #16]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80057a6:	4a32      	ldr	r2, [pc, #200]	; (8005870 <HAL_GPIO_Init+0x350>)
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80057ac:	4b30      	ldr	r3, [pc, #192]	; (8005870 <HAL_GPIO_Init+0x350>)
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	43db      	mvns	r3, r3
 80057b6:	693a      	ldr	r2, [r7, #16]
 80057b8:	4013      	ands	r3, r2
 80057ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d003      	beq.n	80057d0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80057c8:	693a      	ldr	r2, [r7, #16]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80057d0:	4a27      	ldr	r2, [pc, #156]	; (8005870 <HAL_GPIO_Init+0x350>)
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80057d6:	4b26      	ldr	r3, [pc, #152]	; (8005870 <HAL_GPIO_Init+0x350>)
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	43db      	mvns	r3, r3
 80057e0:	693a      	ldr	r2, [r7, #16]
 80057e2:	4013      	ands	r3, r2
 80057e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d003      	beq.n	80057fa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80057f2:	693a      	ldr	r2, [r7, #16]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80057fa:	4a1d      	ldr	r2, [pc, #116]	; (8005870 <HAL_GPIO_Init+0x350>)
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005800:	4b1b      	ldr	r3, [pc, #108]	; (8005870 <HAL_GPIO_Init+0x350>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	43db      	mvns	r3, r3
 800580a:	693a      	ldr	r2, [r7, #16]
 800580c:	4013      	ands	r3, r2
 800580e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005818:	2b00      	cmp	r3, #0
 800581a:	d003      	beq.n	8005824 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800581c:	693a      	ldr	r2, [r7, #16]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	4313      	orrs	r3, r2
 8005822:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005824:	4a12      	ldr	r2, [pc, #72]	; (8005870 <HAL_GPIO_Init+0x350>)
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	3301      	adds	r3, #1
 800582e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	fa22 f303 	lsr.w	r3, r2, r3
 800583a:	2b00      	cmp	r3, #0
 800583c:	f47f ae78 	bne.w	8005530 <HAL_GPIO_Init+0x10>
  }
}
 8005840:	bf00      	nop
 8005842:	bf00      	nop
 8005844:	371c      	adds	r7, #28
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr
 800584e:	bf00      	nop
 8005850:	40021000 	.word	0x40021000
 8005854:	40010000 	.word	0x40010000
 8005858:	48000400 	.word	0x48000400
 800585c:	48000800 	.word	0x48000800
 8005860:	48000c00 	.word	0x48000c00
 8005864:	48001000 	.word	0x48001000
 8005868:	48001400 	.word	0x48001400
 800586c:	48001800 	.word	0x48001800
 8005870:	40010400 	.word	0x40010400

08005874 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005874:	b480      	push	{r7}
 8005876:	b083      	sub	sp, #12
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	460b      	mov	r3, r1
 800587e:	807b      	strh	r3, [r7, #2]
 8005880:	4613      	mov	r3, r2
 8005882:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005884:	787b      	ldrb	r3, [r7, #1]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d003      	beq.n	8005892 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800588a:	887a      	ldrh	r2, [r7, #2]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005890:	e002      	b.n	8005898 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005892:	887a      	ldrh	r2, [r7, #2]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005898:	bf00      	nop
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80058a4:	b480      	push	{r7}
 80058a6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80058a8:	4b05      	ldr	r3, [pc, #20]	; (80058c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a04      	ldr	r2, [pc, #16]	; (80058c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80058ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058b2:	6013      	str	r3, [r2, #0]
}
 80058b4:	bf00      	nop
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr
 80058be:	bf00      	nop
 80058c0:	40007000 	.word	0x40007000

080058c4 <HAL_PWR_EnterSTANDBYMode>:
  *        These states are effective in Standby mode only if APC bit is set through
  *        HAL_PWREx_EnablePullUpPullDownConfig() API.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 80058c4:	b480      	push	{r7}
 80058c6:	af00      	add	r7, sp, #0
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STANDBY);
 80058c8:	4b09      	ldr	r3, [pc, #36]	; (80058f0 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f023 0307 	bic.w	r3, r3, #7
 80058d0:	4a07      	ldr	r2, [pc, #28]	; (80058f0 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80058d2:	f043 0303 	orr.w	r3, r3, #3
 80058d6:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80058d8:	4b06      	ldr	r3, [pc, #24]	; (80058f4 <HAL_PWR_EnterSTANDBYMode+0x30>)
 80058da:	691b      	ldr	r3, [r3, #16]
 80058dc:	4a05      	ldr	r2, [pc, #20]	; (80058f4 <HAL_PWR_EnterSTANDBYMode+0x30>)
 80058de:	f043 0304 	orr.w	r3, r3, #4
 80058e2:	6113      	str	r3, [r2, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 80058e4:	bf30      	wfi
}
 80058e6:	bf00      	nop
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr
 80058f0:	40007000 	.word	0x40007000
 80058f4:	e000ed00 	.word	0xe000ed00

080058f8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80058f8:	b480      	push	{r7}
 80058fa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80058fc:	4b04      	ldr	r3, [pc, #16]	; (8005910 <HAL_PWREx_GetVoltageRange+0x18>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005904:	4618      	mov	r0, r3
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr
 800590e:	bf00      	nop
 8005910:	40007000 	.word	0x40007000

08005914 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005914:	b480      	push	{r7}
 8005916:	b085      	sub	sp, #20
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005922:	d130      	bne.n	8005986 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005924:	4b23      	ldr	r3, [pc, #140]	; (80059b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800592c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005930:	d038      	beq.n	80059a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005932:	4b20      	ldr	r3, [pc, #128]	; (80059b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800593a:	4a1e      	ldr	r2, [pc, #120]	; (80059b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800593c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005940:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005942:	4b1d      	ldr	r3, [pc, #116]	; (80059b8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	2232      	movs	r2, #50	; 0x32
 8005948:	fb02 f303 	mul.w	r3, r2, r3
 800594c:	4a1b      	ldr	r2, [pc, #108]	; (80059bc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800594e:	fba2 2303 	umull	r2, r3, r2, r3
 8005952:	0c9b      	lsrs	r3, r3, #18
 8005954:	3301      	adds	r3, #1
 8005956:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005958:	e002      	b.n	8005960 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	3b01      	subs	r3, #1
 800595e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005960:	4b14      	ldr	r3, [pc, #80]	; (80059b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005962:	695b      	ldr	r3, [r3, #20]
 8005964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005968:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800596c:	d102      	bne.n	8005974 <HAL_PWREx_ControlVoltageScaling+0x60>
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d1f2      	bne.n	800595a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005974:	4b0f      	ldr	r3, [pc, #60]	; (80059b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005976:	695b      	ldr	r3, [r3, #20]
 8005978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800597c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005980:	d110      	bne.n	80059a4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005982:	2303      	movs	r3, #3
 8005984:	e00f      	b.n	80059a6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005986:	4b0b      	ldr	r3, [pc, #44]	; (80059b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800598e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005992:	d007      	beq.n	80059a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005994:	4b07      	ldr	r3, [pc, #28]	; (80059b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800599c:	4a05      	ldr	r2, [pc, #20]	; (80059b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800599e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80059a2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80059a4:	2300      	movs	r3, #0
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3714      	adds	r7, #20
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr
 80059b2:	bf00      	nop
 80059b4:	40007000 	.word	0x40007000
 80059b8:	20000084 	.word	0x20000084
 80059bc:	431bde83 	.word	0x431bde83

080059c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b088      	sub	sp, #32
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d101      	bne.n	80059d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	e3d4      	b.n	800617c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059d2:	4ba1      	ldr	r3, [pc, #644]	; (8005c58 <HAL_RCC_OscConfig+0x298>)
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	f003 030c 	and.w	r3, r3, #12
 80059da:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80059dc:	4b9e      	ldr	r3, [pc, #632]	; (8005c58 <HAL_RCC_OscConfig+0x298>)
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	f003 0303 	and.w	r3, r3, #3
 80059e4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 0310 	and.w	r3, r3, #16
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	f000 80e4 	beq.w	8005bbc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80059f4:	69bb      	ldr	r3, [r7, #24]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d007      	beq.n	8005a0a <HAL_RCC_OscConfig+0x4a>
 80059fa:	69bb      	ldr	r3, [r7, #24]
 80059fc:	2b0c      	cmp	r3, #12
 80059fe:	f040 808b 	bne.w	8005b18 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	f040 8087 	bne.w	8005b18 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005a0a:	4b93      	ldr	r3, [pc, #588]	; (8005c58 <HAL_RCC_OscConfig+0x298>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 0302 	and.w	r3, r3, #2
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d005      	beq.n	8005a22 <HAL_RCC_OscConfig+0x62>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	699b      	ldr	r3, [r3, #24]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d101      	bne.n	8005a22 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e3ac      	b.n	800617c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a1a      	ldr	r2, [r3, #32]
 8005a26:	4b8c      	ldr	r3, [pc, #560]	; (8005c58 <HAL_RCC_OscConfig+0x298>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f003 0308 	and.w	r3, r3, #8
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d004      	beq.n	8005a3c <HAL_RCC_OscConfig+0x7c>
 8005a32:	4b89      	ldr	r3, [pc, #548]	; (8005c58 <HAL_RCC_OscConfig+0x298>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a3a:	e005      	b.n	8005a48 <HAL_RCC_OscConfig+0x88>
 8005a3c:	4b86      	ldr	r3, [pc, #536]	; (8005c58 <HAL_RCC_OscConfig+0x298>)
 8005a3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a42:	091b      	lsrs	r3, r3, #4
 8005a44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d223      	bcs.n	8005a94 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6a1b      	ldr	r3, [r3, #32]
 8005a50:	4618      	mov	r0, r3
 8005a52:	f000 fd41 	bl	80064d8 <RCC_SetFlashLatencyFromMSIRange>
 8005a56:	4603      	mov	r3, r0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d001      	beq.n	8005a60 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e38d      	b.n	800617c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005a60:	4b7d      	ldr	r3, [pc, #500]	; (8005c58 <HAL_RCC_OscConfig+0x298>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a7c      	ldr	r2, [pc, #496]	; (8005c58 <HAL_RCC_OscConfig+0x298>)
 8005a66:	f043 0308 	orr.w	r3, r3, #8
 8005a6a:	6013      	str	r3, [r2, #0]
 8005a6c:	4b7a      	ldr	r3, [pc, #488]	; (8005c58 <HAL_RCC_OscConfig+0x298>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6a1b      	ldr	r3, [r3, #32]
 8005a78:	4977      	ldr	r1, [pc, #476]	; (8005c58 <HAL_RCC_OscConfig+0x298>)
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005a7e:	4b76      	ldr	r3, [pc, #472]	; (8005c58 <HAL_RCC_OscConfig+0x298>)
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	69db      	ldr	r3, [r3, #28]
 8005a8a:	021b      	lsls	r3, r3, #8
 8005a8c:	4972      	ldr	r1, [pc, #456]	; (8005c58 <HAL_RCC_OscConfig+0x298>)
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	604b      	str	r3, [r1, #4]
 8005a92:	e025      	b.n	8005ae0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005a94:	4b70      	ldr	r3, [pc, #448]	; (8005c58 <HAL_RCC_OscConfig+0x298>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a6f      	ldr	r2, [pc, #444]	; (8005c58 <HAL_RCC_OscConfig+0x298>)
 8005a9a:	f043 0308 	orr.w	r3, r3, #8
 8005a9e:	6013      	str	r3, [r2, #0]
 8005aa0:	4b6d      	ldr	r3, [pc, #436]	; (8005c58 <HAL_RCC_OscConfig+0x298>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6a1b      	ldr	r3, [r3, #32]
 8005aac:	496a      	ldr	r1, [pc, #424]	; (8005c58 <HAL_RCC_OscConfig+0x298>)
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005ab2:	4b69      	ldr	r3, [pc, #420]	; (8005c58 <HAL_RCC_OscConfig+0x298>)
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	69db      	ldr	r3, [r3, #28]
 8005abe:	021b      	lsls	r3, r3, #8
 8005ac0:	4965      	ldr	r1, [pc, #404]	; (8005c58 <HAL_RCC_OscConfig+0x298>)
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005ac6:	69bb      	ldr	r3, [r7, #24]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d109      	bne.n	8005ae0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6a1b      	ldr	r3, [r3, #32]
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f000 fd01 	bl	80064d8 <RCC_SetFlashLatencyFromMSIRange>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d001      	beq.n	8005ae0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	e34d      	b.n	800617c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005ae0:	f000 fc36 	bl	8006350 <HAL_RCC_GetSysClockFreq>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	4b5c      	ldr	r3, [pc, #368]	; (8005c58 <HAL_RCC_OscConfig+0x298>)
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	091b      	lsrs	r3, r3, #4
 8005aec:	f003 030f 	and.w	r3, r3, #15
 8005af0:	495a      	ldr	r1, [pc, #360]	; (8005c5c <HAL_RCC_OscConfig+0x29c>)
 8005af2:	5ccb      	ldrb	r3, [r1, r3]
 8005af4:	f003 031f 	and.w	r3, r3, #31
 8005af8:	fa22 f303 	lsr.w	r3, r2, r3
 8005afc:	4a58      	ldr	r2, [pc, #352]	; (8005c60 <HAL_RCC_OscConfig+0x2a0>)
 8005afe:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005b00:	4b58      	ldr	r3, [pc, #352]	; (8005c64 <HAL_RCC_OscConfig+0x2a4>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4618      	mov	r0, r3
 8005b06:	f7fd fe6d 	bl	80037e4 <HAL_InitTick>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005b0e:	7bfb      	ldrb	r3, [r7, #15]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d052      	beq.n	8005bba <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005b14:	7bfb      	ldrb	r3, [r7, #15]
 8005b16:	e331      	b.n	800617c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	699b      	ldr	r3, [r3, #24]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d032      	beq.n	8005b86 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005b20:	4b4d      	ldr	r3, [pc, #308]	; (8005c58 <HAL_RCC_OscConfig+0x298>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a4c      	ldr	r2, [pc, #304]	; (8005c58 <HAL_RCC_OscConfig+0x298>)
 8005b26:	f043 0301 	orr.w	r3, r3, #1
 8005b2a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005b2c:	f7fd feaa 	bl	8003884 <HAL_GetTick>
 8005b30:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005b32:	e008      	b.n	8005b46 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005b34:	f7fd fea6 	bl	8003884 <HAL_GetTick>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	1ad3      	subs	r3, r2, r3
 8005b3e:	2b02      	cmp	r3, #2
 8005b40:	d901      	bls.n	8005b46 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8005b42:	2303      	movs	r3, #3
 8005b44:	e31a      	b.n	800617c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005b46:	4b44      	ldr	r3, [pc, #272]	; (8005c58 <HAL_RCC_OscConfig+0x298>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f003 0302 	and.w	r3, r3, #2
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d0f0      	beq.n	8005b34 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005b52:	4b41      	ldr	r3, [pc, #260]	; (8005c58 <HAL_RCC_OscConfig+0x298>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a40      	ldr	r2, [pc, #256]	; (8005c58 <HAL_RCC_OscConfig+0x298>)
 8005b58:	f043 0308 	orr.w	r3, r3, #8
 8005b5c:	6013      	str	r3, [r2, #0]
 8005b5e:	4b3e      	ldr	r3, [pc, #248]	; (8005c58 <HAL_RCC_OscConfig+0x298>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6a1b      	ldr	r3, [r3, #32]
 8005b6a:	493b      	ldr	r1, [pc, #236]	; (8005c58 <HAL_RCC_OscConfig+0x298>)
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005b70:	4b39      	ldr	r3, [pc, #228]	; (8005c58 <HAL_RCC_OscConfig+0x298>)
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	69db      	ldr	r3, [r3, #28]
 8005b7c:	021b      	lsls	r3, r3, #8
 8005b7e:	4936      	ldr	r1, [pc, #216]	; (8005c58 <HAL_RCC_OscConfig+0x298>)
 8005b80:	4313      	orrs	r3, r2
 8005b82:	604b      	str	r3, [r1, #4]
 8005b84:	e01a      	b.n	8005bbc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005b86:	4b34      	ldr	r3, [pc, #208]	; (8005c58 <HAL_RCC_OscConfig+0x298>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a33      	ldr	r2, [pc, #204]	; (8005c58 <HAL_RCC_OscConfig+0x298>)
 8005b8c:	f023 0301 	bic.w	r3, r3, #1
 8005b90:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005b92:	f7fd fe77 	bl	8003884 <HAL_GetTick>
 8005b96:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005b98:	e008      	b.n	8005bac <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005b9a:	f7fd fe73 	bl	8003884 <HAL_GetTick>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	1ad3      	subs	r3, r2, r3
 8005ba4:	2b02      	cmp	r3, #2
 8005ba6:	d901      	bls.n	8005bac <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005ba8:	2303      	movs	r3, #3
 8005baa:	e2e7      	b.n	800617c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005bac:	4b2a      	ldr	r3, [pc, #168]	; (8005c58 <HAL_RCC_OscConfig+0x298>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f003 0302 	and.w	r3, r3, #2
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d1f0      	bne.n	8005b9a <HAL_RCC_OscConfig+0x1da>
 8005bb8:	e000      	b.n	8005bbc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005bba:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 0301 	and.w	r3, r3, #1
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d074      	beq.n	8005cb2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005bc8:	69bb      	ldr	r3, [r7, #24]
 8005bca:	2b08      	cmp	r3, #8
 8005bcc:	d005      	beq.n	8005bda <HAL_RCC_OscConfig+0x21a>
 8005bce:	69bb      	ldr	r3, [r7, #24]
 8005bd0:	2b0c      	cmp	r3, #12
 8005bd2:	d10e      	bne.n	8005bf2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	2b03      	cmp	r3, #3
 8005bd8:	d10b      	bne.n	8005bf2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bda:	4b1f      	ldr	r3, [pc, #124]	; (8005c58 <HAL_RCC_OscConfig+0x298>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d064      	beq.n	8005cb0 <HAL_RCC_OscConfig+0x2f0>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d160      	bne.n	8005cb0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e2c4      	b.n	800617c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bfa:	d106      	bne.n	8005c0a <HAL_RCC_OscConfig+0x24a>
 8005bfc:	4b16      	ldr	r3, [pc, #88]	; (8005c58 <HAL_RCC_OscConfig+0x298>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a15      	ldr	r2, [pc, #84]	; (8005c58 <HAL_RCC_OscConfig+0x298>)
 8005c02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c06:	6013      	str	r3, [r2, #0]
 8005c08:	e01d      	b.n	8005c46 <HAL_RCC_OscConfig+0x286>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c12:	d10c      	bne.n	8005c2e <HAL_RCC_OscConfig+0x26e>
 8005c14:	4b10      	ldr	r3, [pc, #64]	; (8005c58 <HAL_RCC_OscConfig+0x298>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a0f      	ldr	r2, [pc, #60]	; (8005c58 <HAL_RCC_OscConfig+0x298>)
 8005c1a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c1e:	6013      	str	r3, [r2, #0]
 8005c20:	4b0d      	ldr	r3, [pc, #52]	; (8005c58 <HAL_RCC_OscConfig+0x298>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a0c      	ldr	r2, [pc, #48]	; (8005c58 <HAL_RCC_OscConfig+0x298>)
 8005c26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c2a:	6013      	str	r3, [r2, #0]
 8005c2c:	e00b      	b.n	8005c46 <HAL_RCC_OscConfig+0x286>
 8005c2e:	4b0a      	ldr	r3, [pc, #40]	; (8005c58 <HAL_RCC_OscConfig+0x298>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a09      	ldr	r2, [pc, #36]	; (8005c58 <HAL_RCC_OscConfig+0x298>)
 8005c34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c38:	6013      	str	r3, [r2, #0]
 8005c3a:	4b07      	ldr	r3, [pc, #28]	; (8005c58 <HAL_RCC_OscConfig+0x298>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a06      	ldr	r2, [pc, #24]	; (8005c58 <HAL_RCC_OscConfig+0x298>)
 8005c40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c44:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d01c      	beq.n	8005c88 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c4e:	f7fd fe19 	bl	8003884 <HAL_GetTick>
 8005c52:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c54:	e011      	b.n	8005c7a <HAL_RCC_OscConfig+0x2ba>
 8005c56:	bf00      	nop
 8005c58:	40021000 	.word	0x40021000
 8005c5c:	0800d44c 	.word	0x0800d44c
 8005c60:	20000084 	.word	0x20000084
 8005c64:	20000088 	.word	0x20000088
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c68:	f7fd fe0c 	bl	8003884 <HAL_GetTick>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	1ad3      	subs	r3, r2, r3
 8005c72:	2b64      	cmp	r3, #100	; 0x64
 8005c74:	d901      	bls.n	8005c7a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005c76:	2303      	movs	r3, #3
 8005c78:	e280      	b.n	800617c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c7a:	4baf      	ldr	r3, [pc, #700]	; (8005f38 <HAL_RCC_OscConfig+0x578>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d0f0      	beq.n	8005c68 <HAL_RCC_OscConfig+0x2a8>
 8005c86:	e014      	b.n	8005cb2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c88:	f7fd fdfc 	bl	8003884 <HAL_GetTick>
 8005c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005c8e:	e008      	b.n	8005ca2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c90:	f7fd fdf8 	bl	8003884 <HAL_GetTick>
 8005c94:	4602      	mov	r2, r0
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	1ad3      	subs	r3, r2, r3
 8005c9a:	2b64      	cmp	r3, #100	; 0x64
 8005c9c:	d901      	bls.n	8005ca2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005c9e:	2303      	movs	r3, #3
 8005ca0:	e26c      	b.n	800617c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005ca2:	4ba5      	ldr	r3, [pc, #660]	; (8005f38 <HAL_RCC_OscConfig+0x578>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d1f0      	bne.n	8005c90 <HAL_RCC_OscConfig+0x2d0>
 8005cae:	e000      	b.n	8005cb2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f003 0302 	and.w	r3, r3, #2
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d060      	beq.n	8005d80 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005cbe:	69bb      	ldr	r3, [r7, #24]
 8005cc0:	2b04      	cmp	r3, #4
 8005cc2:	d005      	beq.n	8005cd0 <HAL_RCC_OscConfig+0x310>
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	2b0c      	cmp	r3, #12
 8005cc8:	d119      	bne.n	8005cfe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	2b02      	cmp	r3, #2
 8005cce:	d116      	bne.n	8005cfe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005cd0:	4b99      	ldr	r3, [pc, #612]	; (8005f38 <HAL_RCC_OscConfig+0x578>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d005      	beq.n	8005ce8 <HAL_RCC_OscConfig+0x328>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d101      	bne.n	8005ce8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e249      	b.n	800617c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ce8:	4b93      	ldr	r3, [pc, #588]	; (8005f38 <HAL_RCC_OscConfig+0x578>)
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	691b      	ldr	r3, [r3, #16]
 8005cf4:	061b      	lsls	r3, r3, #24
 8005cf6:	4990      	ldr	r1, [pc, #576]	; (8005f38 <HAL_RCC_OscConfig+0x578>)
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005cfc:	e040      	b.n	8005d80 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d023      	beq.n	8005d4e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d06:	4b8c      	ldr	r3, [pc, #560]	; (8005f38 <HAL_RCC_OscConfig+0x578>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a8b      	ldr	r2, [pc, #556]	; (8005f38 <HAL_RCC_OscConfig+0x578>)
 8005d0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d12:	f7fd fdb7 	bl	8003884 <HAL_GetTick>
 8005d16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d18:	e008      	b.n	8005d2c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d1a:	f7fd fdb3 	bl	8003884 <HAL_GetTick>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	1ad3      	subs	r3, r2, r3
 8005d24:	2b02      	cmp	r3, #2
 8005d26:	d901      	bls.n	8005d2c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005d28:	2303      	movs	r3, #3
 8005d2a:	e227      	b.n	800617c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d2c:	4b82      	ldr	r3, [pc, #520]	; (8005f38 <HAL_RCC_OscConfig+0x578>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d0f0      	beq.n	8005d1a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d38:	4b7f      	ldr	r3, [pc, #508]	; (8005f38 <HAL_RCC_OscConfig+0x578>)
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	691b      	ldr	r3, [r3, #16]
 8005d44:	061b      	lsls	r3, r3, #24
 8005d46:	497c      	ldr	r1, [pc, #496]	; (8005f38 <HAL_RCC_OscConfig+0x578>)
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	604b      	str	r3, [r1, #4]
 8005d4c:	e018      	b.n	8005d80 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d4e:	4b7a      	ldr	r3, [pc, #488]	; (8005f38 <HAL_RCC_OscConfig+0x578>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a79      	ldr	r2, [pc, #484]	; (8005f38 <HAL_RCC_OscConfig+0x578>)
 8005d54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d5a:	f7fd fd93 	bl	8003884 <HAL_GetTick>
 8005d5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005d60:	e008      	b.n	8005d74 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d62:	f7fd fd8f 	bl	8003884 <HAL_GetTick>
 8005d66:	4602      	mov	r2, r0
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	1ad3      	subs	r3, r2, r3
 8005d6c:	2b02      	cmp	r3, #2
 8005d6e:	d901      	bls.n	8005d74 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005d70:	2303      	movs	r3, #3
 8005d72:	e203      	b.n	800617c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005d74:	4b70      	ldr	r3, [pc, #448]	; (8005f38 <HAL_RCC_OscConfig+0x578>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d1f0      	bne.n	8005d62 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f003 0308 	and.w	r3, r3, #8
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d03c      	beq.n	8005e06 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	695b      	ldr	r3, [r3, #20]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d01c      	beq.n	8005dce <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d94:	4b68      	ldr	r3, [pc, #416]	; (8005f38 <HAL_RCC_OscConfig+0x578>)
 8005d96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d9a:	4a67      	ldr	r2, [pc, #412]	; (8005f38 <HAL_RCC_OscConfig+0x578>)
 8005d9c:	f043 0301 	orr.w	r3, r3, #1
 8005da0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005da4:	f7fd fd6e 	bl	8003884 <HAL_GetTick>
 8005da8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005daa:	e008      	b.n	8005dbe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005dac:	f7fd fd6a 	bl	8003884 <HAL_GetTick>
 8005db0:	4602      	mov	r2, r0
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	1ad3      	subs	r3, r2, r3
 8005db6:	2b02      	cmp	r3, #2
 8005db8:	d901      	bls.n	8005dbe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005dba:	2303      	movs	r3, #3
 8005dbc:	e1de      	b.n	800617c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005dbe:	4b5e      	ldr	r3, [pc, #376]	; (8005f38 <HAL_RCC_OscConfig+0x578>)
 8005dc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005dc4:	f003 0302 	and.w	r3, r3, #2
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d0ef      	beq.n	8005dac <HAL_RCC_OscConfig+0x3ec>
 8005dcc:	e01b      	b.n	8005e06 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005dce:	4b5a      	ldr	r3, [pc, #360]	; (8005f38 <HAL_RCC_OscConfig+0x578>)
 8005dd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005dd4:	4a58      	ldr	r2, [pc, #352]	; (8005f38 <HAL_RCC_OscConfig+0x578>)
 8005dd6:	f023 0301 	bic.w	r3, r3, #1
 8005dda:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dde:	f7fd fd51 	bl	8003884 <HAL_GetTick>
 8005de2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005de4:	e008      	b.n	8005df8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005de6:	f7fd fd4d 	bl	8003884 <HAL_GetTick>
 8005dea:	4602      	mov	r2, r0
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	1ad3      	subs	r3, r2, r3
 8005df0:	2b02      	cmp	r3, #2
 8005df2:	d901      	bls.n	8005df8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005df4:	2303      	movs	r3, #3
 8005df6:	e1c1      	b.n	800617c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005df8:	4b4f      	ldr	r3, [pc, #316]	; (8005f38 <HAL_RCC_OscConfig+0x578>)
 8005dfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005dfe:	f003 0302 	and.w	r3, r3, #2
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d1ef      	bne.n	8005de6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f003 0304 	and.w	r3, r3, #4
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	f000 80a6 	beq.w	8005f60 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e14:	2300      	movs	r3, #0
 8005e16:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005e18:	4b47      	ldr	r3, [pc, #284]	; (8005f38 <HAL_RCC_OscConfig+0x578>)
 8005e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d10d      	bne.n	8005e40 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e24:	4b44      	ldr	r3, [pc, #272]	; (8005f38 <HAL_RCC_OscConfig+0x578>)
 8005e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e28:	4a43      	ldr	r2, [pc, #268]	; (8005f38 <HAL_RCC_OscConfig+0x578>)
 8005e2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e2e:	6593      	str	r3, [r2, #88]	; 0x58
 8005e30:	4b41      	ldr	r3, [pc, #260]	; (8005f38 <HAL_RCC_OscConfig+0x578>)
 8005e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e38:	60bb      	str	r3, [r7, #8]
 8005e3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e40:	4b3e      	ldr	r3, [pc, #248]	; (8005f3c <HAL_RCC_OscConfig+0x57c>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d118      	bne.n	8005e7e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e4c:	4b3b      	ldr	r3, [pc, #236]	; (8005f3c <HAL_RCC_OscConfig+0x57c>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a3a      	ldr	r2, [pc, #232]	; (8005f3c <HAL_RCC_OscConfig+0x57c>)
 8005e52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e56:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e58:	f7fd fd14 	bl	8003884 <HAL_GetTick>
 8005e5c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e5e:	e008      	b.n	8005e72 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e60:	f7fd fd10 	bl	8003884 <HAL_GetTick>
 8005e64:	4602      	mov	r2, r0
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	2b02      	cmp	r3, #2
 8005e6c:	d901      	bls.n	8005e72 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	e184      	b.n	800617c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e72:	4b32      	ldr	r3, [pc, #200]	; (8005f3c <HAL_RCC_OscConfig+0x57c>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d0f0      	beq.n	8005e60 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d108      	bne.n	8005e98 <HAL_RCC_OscConfig+0x4d8>
 8005e86:	4b2c      	ldr	r3, [pc, #176]	; (8005f38 <HAL_RCC_OscConfig+0x578>)
 8005e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e8c:	4a2a      	ldr	r2, [pc, #168]	; (8005f38 <HAL_RCC_OscConfig+0x578>)
 8005e8e:	f043 0301 	orr.w	r3, r3, #1
 8005e92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005e96:	e024      	b.n	8005ee2 <HAL_RCC_OscConfig+0x522>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	2b05      	cmp	r3, #5
 8005e9e:	d110      	bne.n	8005ec2 <HAL_RCC_OscConfig+0x502>
 8005ea0:	4b25      	ldr	r3, [pc, #148]	; (8005f38 <HAL_RCC_OscConfig+0x578>)
 8005ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ea6:	4a24      	ldr	r2, [pc, #144]	; (8005f38 <HAL_RCC_OscConfig+0x578>)
 8005ea8:	f043 0304 	orr.w	r3, r3, #4
 8005eac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005eb0:	4b21      	ldr	r3, [pc, #132]	; (8005f38 <HAL_RCC_OscConfig+0x578>)
 8005eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eb6:	4a20      	ldr	r2, [pc, #128]	; (8005f38 <HAL_RCC_OscConfig+0x578>)
 8005eb8:	f043 0301 	orr.w	r3, r3, #1
 8005ebc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005ec0:	e00f      	b.n	8005ee2 <HAL_RCC_OscConfig+0x522>
 8005ec2:	4b1d      	ldr	r3, [pc, #116]	; (8005f38 <HAL_RCC_OscConfig+0x578>)
 8005ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ec8:	4a1b      	ldr	r2, [pc, #108]	; (8005f38 <HAL_RCC_OscConfig+0x578>)
 8005eca:	f023 0301 	bic.w	r3, r3, #1
 8005ece:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005ed2:	4b19      	ldr	r3, [pc, #100]	; (8005f38 <HAL_RCC_OscConfig+0x578>)
 8005ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ed8:	4a17      	ldr	r2, [pc, #92]	; (8005f38 <HAL_RCC_OscConfig+0x578>)
 8005eda:	f023 0304 	bic.w	r3, r3, #4
 8005ede:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d016      	beq.n	8005f18 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005eea:	f7fd fccb 	bl	8003884 <HAL_GetTick>
 8005eee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ef0:	e00a      	b.n	8005f08 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ef2:	f7fd fcc7 	bl	8003884 <HAL_GetTick>
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	1ad3      	subs	r3, r2, r3
 8005efc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d901      	bls.n	8005f08 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8005f04:	2303      	movs	r3, #3
 8005f06:	e139      	b.n	800617c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f08:	4b0b      	ldr	r3, [pc, #44]	; (8005f38 <HAL_RCC_OscConfig+0x578>)
 8005f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f0e:	f003 0302 	and.w	r3, r3, #2
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d0ed      	beq.n	8005ef2 <HAL_RCC_OscConfig+0x532>
 8005f16:	e01a      	b.n	8005f4e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f18:	f7fd fcb4 	bl	8003884 <HAL_GetTick>
 8005f1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005f1e:	e00f      	b.n	8005f40 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f20:	f7fd fcb0 	bl	8003884 <HAL_GetTick>
 8005f24:	4602      	mov	r2, r0
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	1ad3      	subs	r3, r2, r3
 8005f2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d906      	bls.n	8005f40 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005f32:	2303      	movs	r3, #3
 8005f34:	e122      	b.n	800617c <HAL_RCC_OscConfig+0x7bc>
 8005f36:	bf00      	nop
 8005f38:	40021000 	.word	0x40021000
 8005f3c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005f40:	4b90      	ldr	r3, [pc, #576]	; (8006184 <HAL_RCC_OscConfig+0x7c4>)
 8005f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f46:	f003 0302 	and.w	r3, r3, #2
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d1e8      	bne.n	8005f20 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005f4e:	7ffb      	ldrb	r3, [r7, #31]
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d105      	bne.n	8005f60 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f54:	4b8b      	ldr	r3, [pc, #556]	; (8006184 <HAL_RCC_OscConfig+0x7c4>)
 8005f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f58:	4a8a      	ldr	r2, [pc, #552]	; (8006184 <HAL_RCC_OscConfig+0x7c4>)
 8005f5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f5e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	f000 8108 	beq.w	800617a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f6e:	2b02      	cmp	r3, #2
 8005f70:	f040 80d0 	bne.w	8006114 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005f74:	4b83      	ldr	r3, [pc, #524]	; (8006184 <HAL_RCC_OscConfig+0x7c4>)
 8005f76:	68db      	ldr	r3, [r3, #12]
 8005f78:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	f003 0203 	and.w	r2, r3, #3
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d130      	bne.n	8005fea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f92:	3b01      	subs	r3, #1
 8005f94:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d127      	bne.n	8005fea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fa4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d11f      	bne.n	8005fea <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005fb4:	2a07      	cmp	r2, #7
 8005fb6:	bf14      	ite	ne
 8005fb8:	2201      	movne	r2, #1
 8005fba:	2200      	moveq	r2, #0
 8005fbc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d113      	bne.n	8005fea <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fcc:	085b      	lsrs	r3, r3, #1
 8005fce:	3b01      	subs	r3, #1
 8005fd0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d109      	bne.n	8005fea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe0:	085b      	lsrs	r3, r3, #1
 8005fe2:	3b01      	subs	r3, #1
 8005fe4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d06e      	beq.n	80060c8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005fea:	69bb      	ldr	r3, [r7, #24]
 8005fec:	2b0c      	cmp	r3, #12
 8005fee:	d069      	beq.n	80060c4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005ff0:	4b64      	ldr	r3, [pc, #400]	; (8006184 <HAL_RCC_OscConfig+0x7c4>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d105      	bne.n	8006008 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005ffc:	4b61      	ldr	r3, [pc, #388]	; (8006184 <HAL_RCC_OscConfig+0x7c4>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006004:	2b00      	cmp	r3, #0
 8006006:	d001      	beq.n	800600c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	e0b7      	b.n	800617c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800600c:	4b5d      	ldr	r3, [pc, #372]	; (8006184 <HAL_RCC_OscConfig+0x7c4>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a5c      	ldr	r2, [pc, #368]	; (8006184 <HAL_RCC_OscConfig+0x7c4>)
 8006012:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006016:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006018:	f7fd fc34 	bl	8003884 <HAL_GetTick>
 800601c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800601e:	e008      	b.n	8006032 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006020:	f7fd fc30 	bl	8003884 <HAL_GetTick>
 8006024:	4602      	mov	r2, r0
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	1ad3      	subs	r3, r2, r3
 800602a:	2b02      	cmp	r3, #2
 800602c:	d901      	bls.n	8006032 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800602e:	2303      	movs	r3, #3
 8006030:	e0a4      	b.n	800617c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006032:	4b54      	ldr	r3, [pc, #336]	; (8006184 <HAL_RCC_OscConfig+0x7c4>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800603a:	2b00      	cmp	r3, #0
 800603c:	d1f0      	bne.n	8006020 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800603e:	4b51      	ldr	r3, [pc, #324]	; (8006184 <HAL_RCC_OscConfig+0x7c4>)
 8006040:	68da      	ldr	r2, [r3, #12]
 8006042:	4b51      	ldr	r3, [pc, #324]	; (8006188 <HAL_RCC_OscConfig+0x7c8>)
 8006044:	4013      	ands	r3, r2
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800604e:	3a01      	subs	r2, #1
 8006050:	0112      	lsls	r2, r2, #4
 8006052:	4311      	orrs	r1, r2
 8006054:	687a      	ldr	r2, [r7, #4]
 8006056:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006058:	0212      	lsls	r2, r2, #8
 800605a:	4311      	orrs	r1, r2
 800605c:	687a      	ldr	r2, [r7, #4]
 800605e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006060:	0852      	lsrs	r2, r2, #1
 8006062:	3a01      	subs	r2, #1
 8006064:	0552      	lsls	r2, r2, #21
 8006066:	4311      	orrs	r1, r2
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800606c:	0852      	lsrs	r2, r2, #1
 800606e:	3a01      	subs	r2, #1
 8006070:	0652      	lsls	r2, r2, #25
 8006072:	4311      	orrs	r1, r2
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006078:	0912      	lsrs	r2, r2, #4
 800607a:	0452      	lsls	r2, r2, #17
 800607c:	430a      	orrs	r2, r1
 800607e:	4941      	ldr	r1, [pc, #260]	; (8006184 <HAL_RCC_OscConfig+0x7c4>)
 8006080:	4313      	orrs	r3, r2
 8006082:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006084:	4b3f      	ldr	r3, [pc, #252]	; (8006184 <HAL_RCC_OscConfig+0x7c4>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a3e      	ldr	r2, [pc, #248]	; (8006184 <HAL_RCC_OscConfig+0x7c4>)
 800608a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800608e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006090:	4b3c      	ldr	r3, [pc, #240]	; (8006184 <HAL_RCC_OscConfig+0x7c4>)
 8006092:	68db      	ldr	r3, [r3, #12]
 8006094:	4a3b      	ldr	r2, [pc, #236]	; (8006184 <HAL_RCC_OscConfig+0x7c4>)
 8006096:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800609a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800609c:	f7fd fbf2 	bl	8003884 <HAL_GetTick>
 80060a0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060a2:	e008      	b.n	80060b6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060a4:	f7fd fbee 	bl	8003884 <HAL_GetTick>
 80060a8:	4602      	mov	r2, r0
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	1ad3      	subs	r3, r2, r3
 80060ae:	2b02      	cmp	r3, #2
 80060b0:	d901      	bls.n	80060b6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80060b2:	2303      	movs	r3, #3
 80060b4:	e062      	b.n	800617c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060b6:	4b33      	ldr	r3, [pc, #204]	; (8006184 <HAL_RCC_OscConfig+0x7c4>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d0f0      	beq.n	80060a4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80060c2:	e05a      	b.n	800617a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80060c4:	2301      	movs	r3, #1
 80060c6:	e059      	b.n	800617c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060c8:	4b2e      	ldr	r3, [pc, #184]	; (8006184 <HAL_RCC_OscConfig+0x7c4>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d152      	bne.n	800617a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80060d4:	4b2b      	ldr	r3, [pc, #172]	; (8006184 <HAL_RCC_OscConfig+0x7c4>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a2a      	ldr	r2, [pc, #168]	; (8006184 <HAL_RCC_OscConfig+0x7c4>)
 80060da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80060de:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80060e0:	4b28      	ldr	r3, [pc, #160]	; (8006184 <HAL_RCC_OscConfig+0x7c4>)
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	4a27      	ldr	r2, [pc, #156]	; (8006184 <HAL_RCC_OscConfig+0x7c4>)
 80060e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80060ea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80060ec:	f7fd fbca 	bl	8003884 <HAL_GetTick>
 80060f0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060f2:	e008      	b.n	8006106 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060f4:	f7fd fbc6 	bl	8003884 <HAL_GetTick>
 80060f8:	4602      	mov	r2, r0
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	1ad3      	subs	r3, r2, r3
 80060fe:	2b02      	cmp	r3, #2
 8006100:	d901      	bls.n	8006106 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8006102:	2303      	movs	r3, #3
 8006104:	e03a      	b.n	800617c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006106:	4b1f      	ldr	r3, [pc, #124]	; (8006184 <HAL_RCC_OscConfig+0x7c4>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800610e:	2b00      	cmp	r3, #0
 8006110:	d0f0      	beq.n	80060f4 <HAL_RCC_OscConfig+0x734>
 8006112:	e032      	b.n	800617a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006114:	69bb      	ldr	r3, [r7, #24]
 8006116:	2b0c      	cmp	r3, #12
 8006118:	d02d      	beq.n	8006176 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800611a:	4b1a      	ldr	r3, [pc, #104]	; (8006184 <HAL_RCC_OscConfig+0x7c4>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a19      	ldr	r2, [pc, #100]	; (8006184 <HAL_RCC_OscConfig+0x7c4>)
 8006120:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006124:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8006126:	4b17      	ldr	r3, [pc, #92]	; (8006184 <HAL_RCC_OscConfig+0x7c4>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800612e:	2b00      	cmp	r3, #0
 8006130:	d105      	bne.n	800613e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006132:	4b14      	ldr	r3, [pc, #80]	; (8006184 <HAL_RCC_OscConfig+0x7c4>)
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	4a13      	ldr	r2, [pc, #76]	; (8006184 <HAL_RCC_OscConfig+0x7c4>)
 8006138:	f023 0303 	bic.w	r3, r3, #3
 800613c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800613e:	4b11      	ldr	r3, [pc, #68]	; (8006184 <HAL_RCC_OscConfig+0x7c4>)
 8006140:	68db      	ldr	r3, [r3, #12]
 8006142:	4a10      	ldr	r2, [pc, #64]	; (8006184 <HAL_RCC_OscConfig+0x7c4>)
 8006144:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006148:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800614c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800614e:	f7fd fb99 	bl	8003884 <HAL_GetTick>
 8006152:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006154:	e008      	b.n	8006168 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006156:	f7fd fb95 	bl	8003884 <HAL_GetTick>
 800615a:	4602      	mov	r2, r0
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	1ad3      	subs	r3, r2, r3
 8006160:	2b02      	cmp	r3, #2
 8006162:	d901      	bls.n	8006168 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8006164:	2303      	movs	r3, #3
 8006166:	e009      	b.n	800617c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006168:	4b06      	ldr	r3, [pc, #24]	; (8006184 <HAL_RCC_OscConfig+0x7c4>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006170:	2b00      	cmp	r3, #0
 8006172:	d1f0      	bne.n	8006156 <HAL_RCC_OscConfig+0x796>
 8006174:	e001      	b.n	800617a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	e000      	b.n	800617c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800617a:	2300      	movs	r3, #0
}
 800617c:	4618      	mov	r0, r3
 800617e:	3720      	adds	r7, #32
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}
 8006184:	40021000 	.word	0x40021000
 8006188:	f99d808c 	.word	0xf99d808c

0800618c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b084      	sub	sp, #16
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d101      	bne.n	80061a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800619c:	2301      	movs	r3, #1
 800619e:	e0c8      	b.n	8006332 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80061a0:	4b66      	ldr	r3, [pc, #408]	; (800633c <HAL_RCC_ClockConfig+0x1b0>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f003 0307 	and.w	r3, r3, #7
 80061a8:	683a      	ldr	r2, [r7, #0]
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d910      	bls.n	80061d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061ae:	4b63      	ldr	r3, [pc, #396]	; (800633c <HAL_RCC_ClockConfig+0x1b0>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f023 0207 	bic.w	r2, r3, #7
 80061b6:	4961      	ldr	r1, [pc, #388]	; (800633c <HAL_RCC_ClockConfig+0x1b0>)
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061be:	4b5f      	ldr	r3, [pc, #380]	; (800633c <HAL_RCC_ClockConfig+0x1b0>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f003 0307 	and.w	r3, r3, #7
 80061c6:	683a      	ldr	r2, [r7, #0]
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d001      	beq.n	80061d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	e0b0      	b.n	8006332 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 0301 	and.w	r3, r3, #1
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d04c      	beq.n	8006276 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	2b03      	cmp	r3, #3
 80061e2:	d107      	bne.n	80061f4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80061e4:	4b56      	ldr	r3, [pc, #344]	; (8006340 <HAL_RCC_ClockConfig+0x1b4>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d121      	bne.n	8006234 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	e09e      	b.n	8006332 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	2b02      	cmp	r3, #2
 80061fa:	d107      	bne.n	800620c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80061fc:	4b50      	ldr	r3, [pc, #320]	; (8006340 <HAL_RCC_ClockConfig+0x1b4>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006204:	2b00      	cmp	r3, #0
 8006206:	d115      	bne.n	8006234 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	e092      	b.n	8006332 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d107      	bne.n	8006224 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006214:	4b4a      	ldr	r3, [pc, #296]	; (8006340 <HAL_RCC_ClockConfig+0x1b4>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f003 0302 	and.w	r3, r3, #2
 800621c:	2b00      	cmp	r3, #0
 800621e:	d109      	bne.n	8006234 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	e086      	b.n	8006332 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006224:	4b46      	ldr	r3, [pc, #280]	; (8006340 <HAL_RCC_ClockConfig+0x1b4>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800622c:	2b00      	cmp	r3, #0
 800622e:	d101      	bne.n	8006234 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	e07e      	b.n	8006332 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006234:	4b42      	ldr	r3, [pc, #264]	; (8006340 <HAL_RCC_ClockConfig+0x1b4>)
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	f023 0203 	bic.w	r2, r3, #3
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	493f      	ldr	r1, [pc, #252]	; (8006340 <HAL_RCC_ClockConfig+0x1b4>)
 8006242:	4313      	orrs	r3, r2
 8006244:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006246:	f7fd fb1d 	bl	8003884 <HAL_GetTick>
 800624a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800624c:	e00a      	b.n	8006264 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800624e:	f7fd fb19 	bl	8003884 <HAL_GetTick>
 8006252:	4602      	mov	r2, r0
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	1ad3      	subs	r3, r2, r3
 8006258:	f241 3288 	movw	r2, #5000	; 0x1388
 800625c:	4293      	cmp	r3, r2
 800625e:	d901      	bls.n	8006264 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8006260:	2303      	movs	r3, #3
 8006262:	e066      	b.n	8006332 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006264:	4b36      	ldr	r3, [pc, #216]	; (8006340 <HAL_RCC_ClockConfig+0x1b4>)
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	f003 020c 	and.w	r2, r3, #12
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	429a      	cmp	r2, r3
 8006274:	d1eb      	bne.n	800624e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f003 0302 	and.w	r3, r3, #2
 800627e:	2b00      	cmp	r3, #0
 8006280:	d008      	beq.n	8006294 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006282:	4b2f      	ldr	r3, [pc, #188]	; (8006340 <HAL_RCC_ClockConfig+0x1b4>)
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	492c      	ldr	r1, [pc, #176]	; (8006340 <HAL_RCC_ClockConfig+0x1b4>)
 8006290:	4313      	orrs	r3, r2
 8006292:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006294:	4b29      	ldr	r3, [pc, #164]	; (800633c <HAL_RCC_ClockConfig+0x1b0>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f003 0307 	and.w	r3, r3, #7
 800629c:	683a      	ldr	r2, [r7, #0]
 800629e:	429a      	cmp	r2, r3
 80062a0:	d210      	bcs.n	80062c4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062a2:	4b26      	ldr	r3, [pc, #152]	; (800633c <HAL_RCC_ClockConfig+0x1b0>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f023 0207 	bic.w	r2, r3, #7
 80062aa:	4924      	ldr	r1, [pc, #144]	; (800633c <HAL_RCC_ClockConfig+0x1b0>)
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	4313      	orrs	r3, r2
 80062b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062b2:	4b22      	ldr	r3, [pc, #136]	; (800633c <HAL_RCC_ClockConfig+0x1b0>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f003 0307 	and.w	r3, r3, #7
 80062ba:	683a      	ldr	r2, [r7, #0]
 80062bc:	429a      	cmp	r2, r3
 80062be:	d001      	beq.n	80062c4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
 80062c2:	e036      	b.n	8006332 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f003 0304 	and.w	r3, r3, #4
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d008      	beq.n	80062e2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80062d0:	4b1b      	ldr	r3, [pc, #108]	; (8006340 <HAL_RCC_ClockConfig+0x1b4>)
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	4918      	ldr	r1, [pc, #96]	; (8006340 <HAL_RCC_ClockConfig+0x1b4>)
 80062de:	4313      	orrs	r3, r2
 80062e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f003 0308 	and.w	r3, r3, #8
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d009      	beq.n	8006302 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80062ee:	4b14      	ldr	r3, [pc, #80]	; (8006340 <HAL_RCC_ClockConfig+0x1b4>)
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	691b      	ldr	r3, [r3, #16]
 80062fa:	00db      	lsls	r3, r3, #3
 80062fc:	4910      	ldr	r1, [pc, #64]	; (8006340 <HAL_RCC_ClockConfig+0x1b4>)
 80062fe:	4313      	orrs	r3, r2
 8006300:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006302:	f000 f825 	bl	8006350 <HAL_RCC_GetSysClockFreq>
 8006306:	4602      	mov	r2, r0
 8006308:	4b0d      	ldr	r3, [pc, #52]	; (8006340 <HAL_RCC_ClockConfig+0x1b4>)
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	091b      	lsrs	r3, r3, #4
 800630e:	f003 030f 	and.w	r3, r3, #15
 8006312:	490c      	ldr	r1, [pc, #48]	; (8006344 <HAL_RCC_ClockConfig+0x1b8>)
 8006314:	5ccb      	ldrb	r3, [r1, r3]
 8006316:	f003 031f 	and.w	r3, r3, #31
 800631a:	fa22 f303 	lsr.w	r3, r2, r3
 800631e:	4a0a      	ldr	r2, [pc, #40]	; (8006348 <HAL_RCC_ClockConfig+0x1bc>)
 8006320:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006322:	4b0a      	ldr	r3, [pc, #40]	; (800634c <HAL_RCC_ClockConfig+0x1c0>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4618      	mov	r0, r3
 8006328:	f7fd fa5c 	bl	80037e4 <HAL_InitTick>
 800632c:	4603      	mov	r3, r0
 800632e:	72fb      	strb	r3, [r7, #11]

  return status;
 8006330:	7afb      	ldrb	r3, [r7, #11]
}
 8006332:	4618      	mov	r0, r3
 8006334:	3710      	adds	r7, #16
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
 800633a:	bf00      	nop
 800633c:	40022000 	.word	0x40022000
 8006340:	40021000 	.word	0x40021000
 8006344:	0800d44c 	.word	0x0800d44c
 8006348:	20000084 	.word	0x20000084
 800634c:	20000088 	.word	0x20000088

08006350 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006350:	b480      	push	{r7}
 8006352:	b089      	sub	sp, #36	; 0x24
 8006354:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006356:	2300      	movs	r3, #0
 8006358:	61fb      	str	r3, [r7, #28]
 800635a:	2300      	movs	r3, #0
 800635c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800635e:	4b3e      	ldr	r3, [pc, #248]	; (8006458 <HAL_RCC_GetSysClockFreq+0x108>)
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	f003 030c 	and.w	r3, r3, #12
 8006366:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006368:	4b3b      	ldr	r3, [pc, #236]	; (8006458 <HAL_RCC_GetSysClockFreq+0x108>)
 800636a:	68db      	ldr	r3, [r3, #12]
 800636c:	f003 0303 	and.w	r3, r3, #3
 8006370:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d005      	beq.n	8006384 <HAL_RCC_GetSysClockFreq+0x34>
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	2b0c      	cmp	r3, #12
 800637c:	d121      	bne.n	80063c2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2b01      	cmp	r3, #1
 8006382:	d11e      	bne.n	80063c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006384:	4b34      	ldr	r3, [pc, #208]	; (8006458 <HAL_RCC_GetSysClockFreq+0x108>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f003 0308 	and.w	r3, r3, #8
 800638c:	2b00      	cmp	r3, #0
 800638e:	d107      	bne.n	80063a0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006390:	4b31      	ldr	r3, [pc, #196]	; (8006458 <HAL_RCC_GetSysClockFreq+0x108>)
 8006392:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006396:	0a1b      	lsrs	r3, r3, #8
 8006398:	f003 030f 	and.w	r3, r3, #15
 800639c:	61fb      	str	r3, [r7, #28]
 800639e:	e005      	b.n	80063ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80063a0:	4b2d      	ldr	r3, [pc, #180]	; (8006458 <HAL_RCC_GetSysClockFreq+0x108>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	091b      	lsrs	r3, r3, #4
 80063a6:	f003 030f 	and.w	r3, r3, #15
 80063aa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80063ac:	4a2b      	ldr	r2, [pc, #172]	; (800645c <HAL_RCC_GetSysClockFreq+0x10c>)
 80063ae:	69fb      	ldr	r3, [r7, #28]
 80063b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063b4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d10d      	bne.n	80063d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80063bc:	69fb      	ldr	r3, [r7, #28]
 80063be:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80063c0:	e00a      	b.n	80063d8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	2b04      	cmp	r3, #4
 80063c6:	d102      	bne.n	80063ce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80063c8:	4b25      	ldr	r3, [pc, #148]	; (8006460 <HAL_RCC_GetSysClockFreq+0x110>)
 80063ca:	61bb      	str	r3, [r7, #24]
 80063cc:	e004      	b.n	80063d8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	2b08      	cmp	r3, #8
 80063d2:	d101      	bne.n	80063d8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80063d4:	4b23      	ldr	r3, [pc, #140]	; (8006464 <HAL_RCC_GetSysClockFreq+0x114>)
 80063d6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	2b0c      	cmp	r3, #12
 80063dc:	d134      	bne.n	8006448 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80063de:	4b1e      	ldr	r3, [pc, #120]	; (8006458 <HAL_RCC_GetSysClockFreq+0x108>)
 80063e0:	68db      	ldr	r3, [r3, #12]
 80063e2:	f003 0303 	and.w	r3, r3, #3
 80063e6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	2b02      	cmp	r3, #2
 80063ec:	d003      	beq.n	80063f6 <HAL_RCC_GetSysClockFreq+0xa6>
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	2b03      	cmp	r3, #3
 80063f2:	d003      	beq.n	80063fc <HAL_RCC_GetSysClockFreq+0xac>
 80063f4:	e005      	b.n	8006402 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80063f6:	4b1a      	ldr	r3, [pc, #104]	; (8006460 <HAL_RCC_GetSysClockFreq+0x110>)
 80063f8:	617b      	str	r3, [r7, #20]
      break;
 80063fa:	e005      	b.n	8006408 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80063fc:	4b19      	ldr	r3, [pc, #100]	; (8006464 <HAL_RCC_GetSysClockFreq+0x114>)
 80063fe:	617b      	str	r3, [r7, #20]
      break;
 8006400:	e002      	b.n	8006408 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006402:	69fb      	ldr	r3, [r7, #28]
 8006404:	617b      	str	r3, [r7, #20]
      break;
 8006406:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006408:	4b13      	ldr	r3, [pc, #76]	; (8006458 <HAL_RCC_GetSysClockFreq+0x108>)
 800640a:	68db      	ldr	r3, [r3, #12]
 800640c:	091b      	lsrs	r3, r3, #4
 800640e:	f003 0307 	and.w	r3, r3, #7
 8006412:	3301      	adds	r3, #1
 8006414:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006416:	4b10      	ldr	r3, [pc, #64]	; (8006458 <HAL_RCC_GetSysClockFreq+0x108>)
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	0a1b      	lsrs	r3, r3, #8
 800641c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006420:	697a      	ldr	r2, [r7, #20]
 8006422:	fb02 f203 	mul.w	r2, r2, r3
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	fbb2 f3f3 	udiv	r3, r2, r3
 800642c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800642e:	4b0a      	ldr	r3, [pc, #40]	; (8006458 <HAL_RCC_GetSysClockFreq+0x108>)
 8006430:	68db      	ldr	r3, [r3, #12]
 8006432:	0e5b      	lsrs	r3, r3, #25
 8006434:	f003 0303 	and.w	r3, r3, #3
 8006438:	3301      	adds	r3, #1
 800643a:	005b      	lsls	r3, r3, #1
 800643c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800643e:	697a      	ldr	r2, [r7, #20]
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	fbb2 f3f3 	udiv	r3, r2, r3
 8006446:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006448:	69bb      	ldr	r3, [r7, #24]
}
 800644a:	4618      	mov	r0, r3
 800644c:	3724      	adds	r7, #36	; 0x24
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr
 8006456:	bf00      	nop
 8006458:	40021000 	.word	0x40021000
 800645c:	0800d464 	.word	0x0800d464
 8006460:	00f42400 	.word	0x00f42400
 8006464:	007a1200 	.word	0x007a1200

08006468 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006468:	b480      	push	{r7}
 800646a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800646c:	4b03      	ldr	r3, [pc, #12]	; (800647c <HAL_RCC_GetHCLKFreq+0x14>)
 800646e:	681b      	ldr	r3, [r3, #0]
}
 8006470:	4618      	mov	r0, r3
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr
 800647a:	bf00      	nop
 800647c:	20000084 	.word	0x20000084

08006480 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006484:	f7ff fff0 	bl	8006468 <HAL_RCC_GetHCLKFreq>
 8006488:	4602      	mov	r2, r0
 800648a:	4b06      	ldr	r3, [pc, #24]	; (80064a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	0a1b      	lsrs	r3, r3, #8
 8006490:	f003 0307 	and.w	r3, r3, #7
 8006494:	4904      	ldr	r1, [pc, #16]	; (80064a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006496:	5ccb      	ldrb	r3, [r1, r3]
 8006498:	f003 031f 	and.w	r3, r3, #31
 800649c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	bd80      	pop	{r7, pc}
 80064a4:	40021000 	.word	0x40021000
 80064a8:	0800d45c 	.word	0x0800d45c

080064ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80064b0:	f7ff ffda 	bl	8006468 <HAL_RCC_GetHCLKFreq>
 80064b4:	4602      	mov	r2, r0
 80064b6:	4b06      	ldr	r3, [pc, #24]	; (80064d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	0adb      	lsrs	r3, r3, #11
 80064bc:	f003 0307 	and.w	r3, r3, #7
 80064c0:	4904      	ldr	r1, [pc, #16]	; (80064d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80064c2:	5ccb      	ldrb	r3, [r1, r3]
 80064c4:	f003 031f 	and.w	r3, r3, #31
 80064c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	bd80      	pop	{r7, pc}
 80064d0:	40021000 	.word	0x40021000
 80064d4:	0800d45c 	.word	0x0800d45c

080064d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b086      	sub	sp, #24
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80064e0:	2300      	movs	r3, #0
 80064e2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80064e4:	4b2a      	ldr	r3, [pc, #168]	; (8006590 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80064e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d003      	beq.n	80064f8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80064f0:	f7ff fa02 	bl	80058f8 <HAL_PWREx_GetVoltageRange>
 80064f4:	6178      	str	r0, [r7, #20]
 80064f6:	e014      	b.n	8006522 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80064f8:	4b25      	ldr	r3, [pc, #148]	; (8006590 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80064fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064fc:	4a24      	ldr	r2, [pc, #144]	; (8006590 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80064fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006502:	6593      	str	r3, [r2, #88]	; 0x58
 8006504:	4b22      	ldr	r3, [pc, #136]	; (8006590 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006508:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800650c:	60fb      	str	r3, [r7, #12]
 800650e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006510:	f7ff f9f2 	bl	80058f8 <HAL_PWREx_GetVoltageRange>
 8006514:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006516:	4b1e      	ldr	r3, [pc, #120]	; (8006590 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800651a:	4a1d      	ldr	r2, [pc, #116]	; (8006590 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800651c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006520:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006528:	d10b      	bne.n	8006542 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2b80      	cmp	r3, #128	; 0x80
 800652e:	d919      	bls.n	8006564 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2ba0      	cmp	r3, #160	; 0xa0
 8006534:	d902      	bls.n	800653c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006536:	2302      	movs	r3, #2
 8006538:	613b      	str	r3, [r7, #16]
 800653a:	e013      	b.n	8006564 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800653c:	2301      	movs	r3, #1
 800653e:	613b      	str	r3, [r7, #16]
 8006540:	e010      	b.n	8006564 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2b80      	cmp	r3, #128	; 0x80
 8006546:	d902      	bls.n	800654e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006548:	2303      	movs	r3, #3
 800654a:	613b      	str	r3, [r7, #16]
 800654c:	e00a      	b.n	8006564 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2b80      	cmp	r3, #128	; 0x80
 8006552:	d102      	bne.n	800655a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006554:	2302      	movs	r3, #2
 8006556:	613b      	str	r3, [r7, #16]
 8006558:	e004      	b.n	8006564 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2b70      	cmp	r3, #112	; 0x70
 800655e:	d101      	bne.n	8006564 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006560:	2301      	movs	r3, #1
 8006562:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006564:	4b0b      	ldr	r3, [pc, #44]	; (8006594 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f023 0207 	bic.w	r2, r3, #7
 800656c:	4909      	ldr	r1, [pc, #36]	; (8006594 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	4313      	orrs	r3, r2
 8006572:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006574:	4b07      	ldr	r3, [pc, #28]	; (8006594 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f003 0307 	and.w	r3, r3, #7
 800657c:	693a      	ldr	r2, [r7, #16]
 800657e:	429a      	cmp	r2, r3
 8006580:	d001      	beq.n	8006586 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	e000      	b.n	8006588 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006586:	2300      	movs	r3, #0
}
 8006588:	4618      	mov	r0, r3
 800658a:	3718      	adds	r7, #24
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}
 8006590:	40021000 	.word	0x40021000
 8006594:	40022000 	.word	0x40022000

08006598 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b086      	sub	sp, #24
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80065a0:	2300      	movs	r3, #0
 80065a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80065a4:	2300      	movs	r3, #0
 80065a6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d041      	beq.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065b8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80065bc:	d02a      	beq.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80065be:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80065c2:	d824      	bhi.n	800660e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80065c4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80065c8:	d008      	beq.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80065ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80065ce:	d81e      	bhi.n	800660e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d00a      	beq.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x52>
 80065d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065d8:	d010      	beq.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80065da:	e018      	b.n	800660e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80065dc:	4b86      	ldr	r3, [pc, #536]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80065de:	68db      	ldr	r3, [r3, #12]
 80065e0:	4a85      	ldr	r2, [pc, #532]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80065e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065e6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80065e8:	e015      	b.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	3304      	adds	r3, #4
 80065ee:	2100      	movs	r1, #0
 80065f0:	4618      	mov	r0, r3
 80065f2:	f000 facb 	bl	8006b8c <RCCEx_PLLSAI1_Config>
 80065f6:	4603      	mov	r3, r0
 80065f8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80065fa:	e00c      	b.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	3320      	adds	r3, #32
 8006600:	2100      	movs	r1, #0
 8006602:	4618      	mov	r0, r3
 8006604:	f000 fbb6 	bl	8006d74 <RCCEx_PLLSAI2_Config>
 8006608:	4603      	mov	r3, r0
 800660a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800660c:	e003      	b.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800660e:	2301      	movs	r3, #1
 8006610:	74fb      	strb	r3, [r7, #19]
      break;
 8006612:	e000      	b.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006614:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006616:	7cfb      	ldrb	r3, [r7, #19]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d10b      	bne.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800661c:	4b76      	ldr	r3, [pc, #472]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800661e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006622:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800662a:	4973      	ldr	r1, [pc, #460]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800662c:	4313      	orrs	r3, r2
 800662e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006632:	e001      	b.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006634:	7cfb      	ldrb	r3, [r7, #19]
 8006636:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006640:	2b00      	cmp	r3, #0
 8006642:	d041      	beq.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006648:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800664c:	d02a      	beq.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800664e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006652:	d824      	bhi.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006654:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006658:	d008      	beq.n	800666c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800665a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800665e:	d81e      	bhi.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006660:	2b00      	cmp	r3, #0
 8006662:	d00a      	beq.n	800667a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8006664:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006668:	d010      	beq.n	800668c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800666a:	e018      	b.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800666c:	4b62      	ldr	r3, [pc, #392]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	4a61      	ldr	r2, [pc, #388]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006672:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006676:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006678:	e015      	b.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	3304      	adds	r3, #4
 800667e:	2100      	movs	r1, #0
 8006680:	4618      	mov	r0, r3
 8006682:	f000 fa83 	bl	8006b8c <RCCEx_PLLSAI1_Config>
 8006686:	4603      	mov	r3, r0
 8006688:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800668a:	e00c      	b.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	3320      	adds	r3, #32
 8006690:	2100      	movs	r1, #0
 8006692:	4618      	mov	r0, r3
 8006694:	f000 fb6e 	bl	8006d74 <RCCEx_PLLSAI2_Config>
 8006698:	4603      	mov	r3, r0
 800669a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800669c:	e003      	b.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	74fb      	strb	r3, [r7, #19]
      break;
 80066a2:	e000      	b.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80066a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066a6:	7cfb      	ldrb	r3, [r7, #19]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d10b      	bne.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80066ac:	4b52      	ldr	r3, [pc, #328]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80066ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066b2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066ba:	494f      	ldr	r1, [pc, #316]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80066bc:	4313      	orrs	r3, r2
 80066be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80066c2:	e001      	b.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066c4:	7cfb      	ldrb	r3, [r7, #19]
 80066c6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	f000 80a0 	beq.w	8006816 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80066d6:	2300      	movs	r3, #0
 80066d8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80066da:	4b47      	ldr	r3, [pc, #284]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80066dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d101      	bne.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x152>
 80066e6:	2301      	movs	r3, #1
 80066e8:	e000      	b.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x154>
 80066ea:	2300      	movs	r3, #0
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d00d      	beq.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066f0:	4b41      	ldr	r3, [pc, #260]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80066f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066f4:	4a40      	ldr	r2, [pc, #256]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80066f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066fa:	6593      	str	r3, [r2, #88]	; 0x58
 80066fc:	4b3e      	ldr	r3, [pc, #248]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80066fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006704:	60bb      	str	r3, [r7, #8]
 8006706:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006708:	2301      	movs	r3, #1
 800670a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800670c:	4b3b      	ldr	r3, [pc, #236]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a3a      	ldr	r2, [pc, #232]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006712:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006716:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006718:	f7fd f8b4 	bl	8003884 <HAL_GetTick>
 800671c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800671e:	e009      	b.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006720:	f7fd f8b0 	bl	8003884 <HAL_GetTick>
 8006724:	4602      	mov	r2, r0
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	1ad3      	subs	r3, r2, r3
 800672a:	2b02      	cmp	r3, #2
 800672c:	d902      	bls.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800672e:	2303      	movs	r3, #3
 8006730:	74fb      	strb	r3, [r7, #19]
        break;
 8006732:	e005      	b.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006734:	4b31      	ldr	r3, [pc, #196]	; (80067fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800673c:	2b00      	cmp	r3, #0
 800673e:	d0ef      	beq.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8006740:	7cfb      	ldrb	r3, [r7, #19]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d15c      	bne.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006746:	4b2c      	ldr	r3, [pc, #176]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800674c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006750:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d01f      	beq.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800675e:	697a      	ldr	r2, [r7, #20]
 8006760:	429a      	cmp	r2, r3
 8006762:	d019      	beq.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006764:	4b24      	ldr	r3, [pc, #144]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800676a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800676e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006770:	4b21      	ldr	r3, [pc, #132]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006776:	4a20      	ldr	r2, [pc, #128]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006778:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800677c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006780:	4b1d      	ldr	r3, [pc, #116]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006786:	4a1c      	ldr	r2, [pc, #112]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006788:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800678c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006790:	4a19      	ldr	r2, [pc, #100]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	f003 0301 	and.w	r3, r3, #1
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d016      	beq.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067a2:	f7fd f86f 	bl	8003884 <HAL_GetTick>
 80067a6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80067a8:	e00b      	b.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067aa:	f7fd f86b 	bl	8003884 <HAL_GetTick>
 80067ae:	4602      	mov	r2, r0
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	1ad3      	subs	r3, r2, r3
 80067b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d902      	bls.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80067bc:	2303      	movs	r3, #3
 80067be:	74fb      	strb	r3, [r7, #19]
            break;
 80067c0:	e006      	b.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80067c2:	4b0d      	ldr	r3, [pc, #52]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80067c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067c8:	f003 0302 	and.w	r3, r3, #2
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d0ec      	beq.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80067d0:	7cfb      	ldrb	r3, [r7, #19]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d10c      	bne.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80067d6:	4b08      	ldr	r3, [pc, #32]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80067d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067e6:	4904      	ldr	r1, [pc, #16]	; (80067f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80067e8:	4313      	orrs	r3, r2
 80067ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80067ee:	e009      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80067f0:	7cfb      	ldrb	r3, [r7, #19]
 80067f2:	74bb      	strb	r3, [r7, #18]
 80067f4:	e006      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80067f6:	bf00      	nop
 80067f8:	40021000 	.word	0x40021000
 80067fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006800:	7cfb      	ldrb	r3, [r7, #19]
 8006802:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006804:	7c7b      	ldrb	r3, [r7, #17]
 8006806:	2b01      	cmp	r3, #1
 8006808:	d105      	bne.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800680a:	4b9e      	ldr	r3, [pc, #632]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800680c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800680e:	4a9d      	ldr	r2, [pc, #628]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006810:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006814:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f003 0301 	and.w	r3, r3, #1
 800681e:	2b00      	cmp	r3, #0
 8006820:	d00a      	beq.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006822:	4b98      	ldr	r3, [pc, #608]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006828:	f023 0203 	bic.w	r2, r3, #3
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006830:	4994      	ldr	r1, [pc, #592]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006832:	4313      	orrs	r3, r2
 8006834:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f003 0302 	and.w	r3, r3, #2
 8006840:	2b00      	cmp	r3, #0
 8006842:	d00a      	beq.n	800685a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006844:	4b8f      	ldr	r3, [pc, #572]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800684a:	f023 020c 	bic.w	r2, r3, #12
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006852:	498c      	ldr	r1, [pc, #560]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006854:	4313      	orrs	r3, r2
 8006856:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f003 0304 	and.w	r3, r3, #4
 8006862:	2b00      	cmp	r3, #0
 8006864:	d00a      	beq.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006866:	4b87      	ldr	r3, [pc, #540]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800686c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006874:	4983      	ldr	r1, [pc, #524]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006876:	4313      	orrs	r3, r2
 8006878:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f003 0308 	and.w	r3, r3, #8
 8006884:	2b00      	cmp	r3, #0
 8006886:	d00a      	beq.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006888:	4b7e      	ldr	r3, [pc, #504]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800688a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800688e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006896:	497b      	ldr	r1, [pc, #492]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006898:	4313      	orrs	r3, r2
 800689a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f003 0310 	and.w	r3, r3, #16
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d00a      	beq.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80068aa:	4b76      	ldr	r3, [pc, #472]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80068ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068b8:	4972      	ldr	r1, [pc, #456]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80068ba:	4313      	orrs	r3, r2
 80068bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f003 0320 	and.w	r3, r3, #32
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d00a      	beq.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80068cc:	4b6d      	ldr	r3, [pc, #436]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80068ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068da:	496a      	ldr	r1, [pc, #424]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80068dc:	4313      	orrs	r3, r2
 80068de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d00a      	beq.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80068ee:	4b65      	ldr	r3, [pc, #404]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80068f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068fc:	4961      	ldr	r1, [pc, #388]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80068fe:	4313      	orrs	r3, r2
 8006900:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800690c:	2b00      	cmp	r3, #0
 800690e:	d00a      	beq.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006910:	4b5c      	ldr	r3, [pc, #368]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006916:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800691e:	4959      	ldr	r1, [pc, #356]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006920:	4313      	orrs	r3, r2
 8006922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800692e:	2b00      	cmp	r3, #0
 8006930:	d00a      	beq.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006932:	4b54      	ldr	r3, [pc, #336]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006938:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006940:	4950      	ldr	r1, [pc, #320]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006942:	4313      	orrs	r3, r2
 8006944:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006950:	2b00      	cmp	r3, #0
 8006952:	d00a      	beq.n	800696a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006954:	4b4b      	ldr	r3, [pc, #300]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800695a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006962:	4948      	ldr	r1, [pc, #288]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006964:	4313      	orrs	r3, r2
 8006966:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006972:	2b00      	cmp	r3, #0
 8006974:	d00a      	beq.n	800698c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006976:	4b43      	ldr	r3, [pc, #268]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800697c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006984:	493f      	ldr	r1, [pc, #252]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006986:	4313      	orrs	r3, r2
 8006988:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006994:	2b00      	cmp	r3, #0
 8006996:	d028      	beq.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006998:	4b3a      	ldr	r3, [pc, #232]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800699a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800699e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069a6:	4937      	ldr	r1, [pc, #220]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069a8:	4313      	orrs	r3, r2
 80069aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069b6:	d106      	bne.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80069b8:	4b32      	ldr	r3, [pc, #200]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069ba:	68db      	ldr	r3, [r3, #12]
 80069bc:	4a31      	ldr	r2, [pc, #196]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80069c2:	60d3      	str	r3, [r2, #12]
 80069c4:	e011      	b.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80069ce:	d10c      	bne.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	3304      	adds	r3, #4
 80069d4:	2101      	movs	r1, #1
 80069d6:	4618      	mov	r0, r3
 80069d8:	f000 f8d8 	bl	8006b8c <RCCEx_PLLSAI1_Config>
 80069dc:	4603      	mov	r3, r0
 80069de:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80069e0:	7cfb      	ldrb	r3, [r7, #19]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d001      	beq.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80069e6:	7cfb      	ldrb	r3, [r7, #19]
 80069e8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d028      	beq.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80069f6:	4b23      	ldr	r3, [pc, #140]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069fc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a04:	491f      	ldr	r1, [pc, #124]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a06:	4313      	orrs	r3, r2
 8006a08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a14:	d106      	bne.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a16:	4b1b      	ldr	r3, [pc, #108]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a18:	68db      	ldr	r3, [r3, #12]
 8006a1a:	4a1a      	ldr	r2, [pc, #104]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a20:	60d3      	str	r3, [r2, #12]
 8006a22:	e011      	b.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006a2c:	d10c      	bne.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	3304      	adds	r3, #4
 8006a32:	2101      	movs	r1, #1
 8006a34:	4618      	mov	r0, r3
 8006a36:	f000 f8a9 	bl	8006b8c <RCCEx_PLLSAI1_Config>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006a3e:	7cfb      	ldrb	r3, [r7, #19]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d001      	beq.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8006a44:	7cfb      	ldrb	r3, [r7, #19]
 8006a46:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d02b      	beq.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006a54:	4b0b      	ldr	r3, [pc, #44]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a5a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a62:	4908      	ldr	r1, [pc, #32]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a64:	4313      	orrs	r3, r2
 8006a66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a72:	d109      	bne.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a74:	4b03      	ldr	r3, [pc, #12]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	4a02      	ldr	r2, [pc, #8]	; (8006a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a7e:	60d3      	str	r3, [r2, #12]
 8006a80:	e014      	b.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x514>
 8006a82:	bf00      	nop
 8006a84:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a8c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006a90:	d10c      	bne.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	3304      	adds	r3, #4
 8006a96:	2101      	movs	r1, #1
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f000 f877 	bl	8006b8c <RCCEx_PLLSAI1_Config>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006aa2:	7cfb      	ldrb	r3, [r7, #19]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d001      	beq.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8006aa8:	7cfb      	ldrb	r3, [r7, #19]
 8006aaa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d02f      	beq.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006ab8:	4b2b      	ldr	r3, [pc, #172]	; (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006abe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ac6:	4928      	ldr	r1, [pc, #160]	; (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ad2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ad6:	d10d      	bne.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	3304      	adds	r3, #4
 8006adc:	2102      	movs	r1, #2
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f000 f854 	bl	8006b8c <RCCEx_PLLSAI1_Config>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006ae8:	7cfb      	ldrb	r3, [r7, #19]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d014      	beq.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006aee:	7cfb      	ldrb	r3, [r7, #19]
 8006af0:	74bb      	strb	r3, [r7, #18]
 8006af2:	e011      	b.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006af8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006afc:	d10c      	bne.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	3320      	adds	r3, #32
 8006b02:	2102      	movs	r1, #2
 8006b04:	4618      	mov	r0, r3
 8006b06:	f000 f935 	bl	8006d74 <RCCEx_PLLSAI2_Config>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006b0e:	7cfb      	ldrb	r3, [r7, #19]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d001      	beq.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006b14:	7cfb      	ldrb	r3, [r7, #19]
 8006b16:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d00a      	beq.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006b24:	4b10      	ldr	r3, [pc, #64]	; (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b2a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b32:	490d      	ldr	r1, [pc, #52]	; (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006b34:	4313      	orrs	r3, r2
 8006b36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d00b      	beq.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006b46:	4b08      	ldr	r3, [pc, #32]	; (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b4c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b56:	4904      	ldr	r1, [pc, #16]	; (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006b5e:	7cbb      	ldrb	r3, [r7, #18]
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3718      	adds	r7, #24
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}
 8006b68:	40021000 	.word	0x40021000

08006b6c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006b70:	4b05      	ldr	r3, [pc, #20]	; (8006b88 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a04      	ldr	r2, [pc, #16]	; (8006b88 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006b76:	f043 0304 	orr.w	r3, r3, #4
 8006b7a:	6013      	str	r3, [r2, #0]
}
 8006b7c:	bf00      	nop
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b84:	4770      	bx	lr
 8006b86:	bf00      	nop
 8006b88:	40021000 	.word	0x40021000

08006b8c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b084      	sub	sp, #16
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006b96:	2300      	movs	r3, #0
 8006b98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006b9a:	4b75      	ldr	r3, [pc, #468]	; (8006d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b9c:	68db      	ldr	r3, [r3, #12]
 8006b9e:	f003 0303 	and.w	r3, r3, #3
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d018      	beq.n	8006bd8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006ba6:	4b72      	ldr	r3, [pc, #456]	; (8006d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ba8:	68db      	ldr	r3, [r3, #12]
 8006baa:	f003 0203 	and.w	r2, r3, #3
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d10d      	bne.n	8006bd2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
       ||
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d009      	beq.n	8006bd2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006bbe:	4b6c      	ldr	r3, [pc, #432]	; (8006d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006bc0:	68db      	ldr	r3, [r3, #12]
 8006bc2:	091b      	lsrs	r3, r3, #4
 8006bc4:	f003 0307 	and.w	r3, r3, #7
 8006bc8:	1c5a      	adds	r2, r3, #1
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	685b      	ldr	r3, [r3, #4]
       ||
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d047      	beq.n	8006c62 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	73fb      	strb	r3, [r7, #15]
 8006bd6:	e044      	b.n	8006c62 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	2b03      	cmp	r3, #3
 8006bde:	d018      	beq.n	8006c12 <RCCEx_PLLSAI1_Config+0x86>
 8006be0:	2b03      	cmp	r3, #3
 8006be2:	d825      	bhi.n	8006c30 <RCCEx_PLLSAI1_Config+0xa4>
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	d002      	beq.n	8006bee <RCCEx_PLLSAI1_Config+0x62>
 8006be8:	2b02      	cmp	r3, #2
 8006bea:	d009      	beq.n	8006c00 <RCCEx_PLLSAI1_Config+0x74>
 8006bec:	e020      	b.n	8006c30 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006bee:	4b60      	ldr	r3, [pc, #384]	; (8006d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f003 0302 	and.w	r3, r3, #2
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d11d      	bne.n	8006c36 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006bfe:	e01a      	b.n	8006c36 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006c00:	4b5b      	ldr	r3, [pc, #364]	; (8006d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d116      	bne.n	8006c3a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006c10:	e013      	b.n	8006c3a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006c12:	4b57      	ldr	r3, [pc, #348]	; (8006d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d10f      	bne.n	8006c3e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006c1e:	4b54      	ldr	r3, [pc, #336]	; (8006d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d109      	bne.n	8006c3e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006c2e:	e006      	b.n	8006c3e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006c30:	2301      	movs	r3, #1
 8006c32:	73fb      	strb	r3, [r7, #15]
      break;
 8006c34:	e004      	b.n	8006c40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006c36:	bf00      	nop
 8006c38:	e002      	b.n	8006c40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006c3a:	bf00      	nop
 8006c3c:	e000      	b.n	8006c40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006c3e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006c40:	7bfb      	ldrb	r3, [r7, #15]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d10d      	bne.n	8006c62 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006c46:	4b4a      	ldr	r3, [pc, #296]	; (8006d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c48:	68db      	ldr	r3, [r3, #12]
 8006c4a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6819      	ldr	r1, [r3, #0]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	3b01      	subs	r3, #1
 8006c58:	011b      	lsls	r3, r3, #4
 8006c5a:	430b      	orrs	r3, r1
 8006c5c:	4944      	ldr	r1, [pc, #272]	; (8006d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006c62:	7bfb      	ldrb	r3, [r7, #15]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d17d      	bne.n	8006d64 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006c68:	4b41      	ldr	r3, [pc, #260]	; (8006d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a40      	ldr	r2, [pc, #256]	; (8006d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c6e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006c72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c74:	f7fc fe06 	bl	8003884 <HAL_GetTick>
 8006c78:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006c7a:	e009      	b.n	8006c90 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006c7c:	f7fc fe02 	bl	8003884 <HAL_GetTick>
 8006c80:	4602      	mov	r2, r0
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	1ad3      	subs	r3, r2, r3
 8006c86:	2b02      	cmp	r3, #2
 8006c88:	d902      	bls.n	8006c90 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006c8a:	2303      	movs	r3, #3
 8006c8c:	73fb      	strb	r3, [r7, #15]
        break;
 8006c8e:	e005      	b.n	8006c9c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006c90:	4b37      	ldr	r3, [pc, #220]	; (8006d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d1ef      	bne.n	8006c7c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006c9c:	7bfb      	ldrb	r3, [r7, #15]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d160      	bne.n	8006d64 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d111      	bne.n	8006ccc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006ca8:	4b31      	ldr	r3, [pc, #196]	; (8006d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006caa:	691b      	ldr	r3, [r3, #16]
 8006cac:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006cb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cb4:	687a      	ldr	r2, [r7, #4]
 8006cb6:	6892      	ldr	r2, [r2, #8]
 8006cb8:	0211      	lsls	r1, r2, #8
 8006cba:	687a      	ldr	r2, [r7, #4]
 8006cbc:	68d2      	ldr	r2, [r2, #12]
 8006cbe:	0912      	lsrs	r2, r2, #4
 8006cc0:	0452      	lsls	r2, r2, #17
 8006cc2:	430a      	orrs	r2, r1
 8006cc4:	492a      	ldr	r1, [pc, #168]	; (8006d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	610b      	str	r3, [r1, #16]
 8006cca:	e027      	b.n	8006d1c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	2b01      	cmp	r3, #1
 8006cd0:	d112      	bne.n	8006cf8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006cd2:	4b27      	ldr	r3, [pc, #156]	; (8006d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006cd4:	691b      	ldr	r3, [r3, #16]
 8006cd6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006cda:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006cde:	687a      	ldr	r2, [r7, #4]
 8006ce0:	6892      	ldr	r2, [r2, #8]
 8006ce2:	0211      	lsls	r1, r2, #8
 8006ce4:	687a      	ldr	r2, [r7, #4]
 8006ce6:	6912      	ldr	r2, [r2, #16]
 8006ce8:	0852      	lsrs	r2, r2, #1
 8006cea:	3a01      	subs	r2, #1
 8006cec:	0552      	lsls	r2, r2, #21
 8006cee:	430a      	orrs	r2, r1
 8006cf0:	491f      	ldr	r1, [pc, #124]	; (8006d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	610b      	str	r3, [r1, #16]
 8006cf6:	e011      	b.n	8006d1c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006cf8:	4b1d      	ldr	r3, [pc, #116]	; (8006d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006cfa:	691b      	ldr	r3, [r3, #16]
 8006cfc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006d00:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006d04:	687a      	ldr	r2, [r7, #4]
 8006d06:	6892      	ldr	r2, [r2, #8]
 8006d08:	0211      	lsls	r1, r2, #8
 8006d0a:	687a      	ldr	r2, [r7, #4]
 8006d0c:	6952      	ldr	r2, [r2, #20]
 8006d0e:	0852      	lsrs	r2, r2, #1
 8006d10:	3a01      	subs	r2, #1
 8006d12:	0652      	lsls	r2, r2, #25
 8006d14:	430a      	orrs	r2, r1
 8006d16:	4916      	ldr	r1, [pc, #88]	; (8006d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006d1c:	4b14      	ldr	r3, [pc, #80]	; (8006d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a13      	ldr	r2, [pc, #76]	; (8006d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d22:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006d26:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d28:	f7fc fdac 	bl	8003884 <HAL_GetTick>
 8006d2c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006d2e:	e009      	b.n	8006d44 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006d30:	f7fc fda8 	bl	8003884 <HAL_GetTick>
 8006d34:	4602      	mov	r2, r0
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	1ad3      	subs	r3, r2, r3
 8006d3a:	2b02      	cmp	r3, #2
 8006d3c:	d902      	bls.n	8006d44 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8006d3e:	2303      	movs	r3, #3
 8006d40:	73fb      	strb	r3, [r7, #15]
          break;
 8006d42:	e005      	b.n	8006d50 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006d44:	4b0a      	ldr	r3, [pc, #40]	; (8006d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d0ef      	beq.n	8006d30 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006d50:	7bfb      	ldrb	r3, [r7, #15]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d106      	bne.n	8006d64 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006d56:	4b06      	ldr	r3, [pc, #24]	; (8006d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d58:	691a      	ldr	r2, [r3, #16]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	699b      	ldr	r3, [r3, #24]
 8006d5e:	4904      	ldr	r1, [pc, #16]	; (8006d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d60:	4313      	orrs	r3, r2
 8006d62:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3710      	adds	r7, #16
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}
 8006d6e:	bf00      	nop
 8006d70:	40021000 	.word	0x40021000

08006d74 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006d82:	4b6a      	ldr	r3, [pc, #424]	; (8006f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d84:	68db      	ldr	r3, [r3, #12]
 8006d86:	f003 0303 	and.w	r3, r3, #3
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d018      	beq.n	8006dc0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006d8e:	4b67      	ldr	r3, [pc, #412]	; (8006f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d90:	68db      	ldr	r3, [r3, #12]
 8006d92:	f003 0203 	and.w	r2, r3, #3
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d10d      	bne.n	8006dba <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
       ||
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d009      	beq.n	8006dba <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006da6:	4b61      	ldr	r3, [pc, #388]	; (8006f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006da8:	68db      	ldr	r3, [r3, #12]
 8006daa:	091b      	lsrs	r3, r3, #4
 8006dac:	f003 0307 	and.w	r3, r3, #7
 8006db0:	1c5a      	adds	r2, r3, #1
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	685b      	ldr	r3, [r3, #4]
       ||
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d047      	beq.n	8006e4a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	73fb      	strb	r3, [r7, #15]
 8006dbe:	e044      	b.n	8006e4a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	2b03      	cmp	r3, #3
 8006dc6:	d018      	beq.n	8006dfa <RCCEx_PLLSAI2_Config+0x86>
 8006dc8:	2b03      	cmp	r3, #3
 8006dca:	d825      	bhi.n	8006e18 <RCCEx_PLLSAI2_Config+0xa4>
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d002      	beq.n	8006dd6 <RCCEx_PLLSAI2_Config+0x62>
 8006dd0:	2b02      	cmp	r3, #2
 8006dd2:	d009      	beq.n	8006de8 <RCCEx_PLLSAI2_Config+0x74>
 8006dd4:	e020      	b.n	8006e18 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006dd6:	4b55      	ldr	r3, [pc, #340]	; (8006f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f003 0302 	and.w	r3, r3, #2
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d11d      	bne.n	8006e1e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006de2:	2301      	movs	r3, #1
 8006de4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006de6:	e01a      	b.n	8006e1e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006de8:	4b50      	ldr	r3, [pc, #320]	; (8006f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d116      	bne.n	8006e22 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006df4:	2301      	movs	r3, #1
 8006df6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006df8:	e013      	b.n	8006e22 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006dfa:	4b4c      	ldr	r3, [pc, #304]	; (8006f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d10f      	bne.n	8006e26 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006e06:	4b49      	ldr	r3, [pc, #292]	; (8006f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d109      	bne.n	8006e26 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006e16:	e006      	b.n	8006e26 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	73fb      	strb	r3, [r7, #15]
      break;
 8006e1c:	e004      	b.n	8006e28 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006e1e:	bf00      	nop
 8006e20:	e002      	b.n	8006e28 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006e22:	bf00      	nop
 8006e24:	e000      	b.n	8006e28 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006e26:	bf00      	nop
    }

    if(status == HAL_OK)
 8006e28:	7bfb      	ldrb	r3, [r7, #15]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d10d      	bne.n	8006e4a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006e2e:	4b3f      	ldr	r3, [pc, #252]	; (8006f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e30:	68db      	ldr	r3, [r3, #12]
 8006e32:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6819      	ldr	r1, [r3, #0]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	3b01      	subs	r3, #1
 8006e40:	011b      	lsls	r3, r3, #4
 8006e42:	430b      	orrs	r3, r1
 8006e44:	4939      	ldr	r1, [pc, #228]	; (8006f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e46:	4313      	orrs	r3, r2
 8006e48:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006e4a:	7bfb      	ldrb	r3, [r7, #15]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d167      	bne.n	8006f20 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006e50:	4b36      	ldr	r3, [pc, #216]	; (8006f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a35      	ldr	r2, [pc, #212]	; (8006f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e5c:	f7fc fd12 	bl	8003884 <HAL_GetTick>
 8006e60:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006e62:	e009      	b.n	8006e78 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006e64:	f7fc fd0e 	bl	8003884 <HAL_GetTick>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	1ad3      	subs	r3, r2, r3
 8006e6e:	2b02      	cmp	r3, #2
 8006e70:	d902      	bls.n	8006e78 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006e72:	2303      	movs	r3, #3
 8006e74:	73fb      	strb	r3, [r7, #15]
        break;
 8006e76:	e005      	b.n	8006e84 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006e78:	4b2c      	ldr	r3, [pc, #176]	; (8006f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d1ef      	bne.n	8006e64 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006e84:	7bfb      	ldrb	r3, [r7, #15]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d14a      	bne.n	8006f20 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d111      	bne.n	8006eb4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006e90:	4b26      	ldr	r3, [pc, #152]	; (8006f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e92:	695b      	ldr	r3, [r3, #20]
 8006e94:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006e98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e9c:	687a      	ldr	r2, [r7, #4]
 8006e9e:	6892      	ldr	r2, [r2, #8]
 8006ea0:	0211      	lsls	r1, r2, #8
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	68d2      	ldr	r2, [r2, #12]
 8006ea6:	0912      	lsrs	r2, r2, #4
 8006ea8:	0452      	lsls	r2, r2, #17
 8006eaa:	430a      	orrs	r2, r1
 8006eac:	491f      	ldr	r1, [pc, #124]	; (8006f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	614b      	str	r3, [r1, #20]
 8006eb2:	e011      	b.n	8006ed8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006eb4:	4b1d      	ldr	r3, [pc, #116]	; (8006f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006eb6:	695b      	ldr	r3, [r3, #20]
 8006eb8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006ebc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	6892      	ldr	r2, [r2, #8]
 8006ec4:	0211      	lsls	r1, r2, #8
 8006ec6:	687a      	ldr	r2, [r7, #4]
 8006ec8:	6912      	ldr	r2, [r2, #16]
 8006eca:	0852      	lsrs	r2, r2, #1
 8006ecc:	3a01      	subs	r2, #1
 8006ece:	0652      	lsls	r2, r2, #25
 8006ed0:	430a      	orrs	r2, r1
 8006ed2:	4916      	ldr	r1, [pc, #88]	; (8006f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006ed8:	4b14      	ldr	r3, [pc, #80]	; (8006f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a13      	ldr	r2, [pc, #76]	; (8006f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ede:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ee2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ee4:	f7fc fcce 	bl	8003884 <HAL_GetTick>
 8006ee8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006eea:	e009      	b.n	8006f00 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006eec:	f7fc fcca 	bl	8003884 <HAL_GetTick>
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	1ad3      	subs	r3, r2, r3
 8006ef6:	2b02      	cmp	r3, #2
 8006ef8:	d902      	bls.n	8006f00 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8006efa:	2303      	movs	r3, #3
 8006efc:	73fb      	strb	r3, [r7, #15]
          break;
 8006efe:	e005      	b.n	8006f0c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006f00:	4b0a      	ldr	r3, [pc, #40]	; (8006f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d0ef      	beq.n	8006eec <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006f0c:	7bfb      	ldrb	r3, [r7, #15]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d106      	bne.n	8006f20 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006f12:	4b06      	ldr	r3, [pc, #24]	; (8006f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f14:	695a      	ldr	r2, [r3, #20]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	695b      	ldr	r3, [r3, #20]
 8006f1a:	4904      	ldr	r1, [pc, #16]	; (8006f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3710      	adds	r7, #16
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}
 8006f2a:	bf00      	nop
 8006f2c:	40021000 	.word	0x40021000

08006f30 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b084      	sub	sp, #16
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d06c      	beq.n	800701c <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006f48:	b2db      	uxtb	r3, r3
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d106      	bne.n	8006f5c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2200      	movs	r2, #0
 8006f52:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f7fb f8ac 	bl	80020b4 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2202      	movs	r2, #2
 8006f60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	22ca      	movs	r2, #202	; 0xca
 8006f6a:	625a      	str	r2, [r3, #36]	; 0x24
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	2253      	movs	r2, #83	; 0x53
 8006f72:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f000 fbcb 	bl	8007710 <RTC_EnterInitMode>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8006f7e:	7bfb      	ldrb	r3, [r7, #15]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d14b      	bne.n	800701c <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	687a      	ldr	r2, [r7, #4]
 8006f8c:	6812      	ldr	r2, [r2, #0]
 8006f8e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006f92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f96:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	6899      	ldr	r1, [r3, #8]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	685a      	ldr	r2, [r3, #4]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	691b      	ldr	r3, [r3, #16]
 8006fa6:	431a      	orrs	r2, r3
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	699b      	ldr	r3, [r3, #24]
 8006fac:	431a      	orrs	r2, r3
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	430a      	orrs	r2, r1
 8006fb4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	687a      	ldr	r2, [r7, #4]
 8006fbc:	68d2      	ldr	r2, [r2, #12]
 8006fbe:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	6919      	ldr	r1, [r3, #16]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	041a      	lsls	r2, r3, #16
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	430a      	orrs	r2, r1
 8006fd2:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f000 fbcf 	bl	8007778 <RTC_ExitInitMode>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8006fde:	7bfb      	ldrb	r3, [r7, #15]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d11b      	bne.n	800701c <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f022 0203 	bic.w	r2, r2, #3
 8006ff2:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	69da      	ldr	r2, [r3, #28]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	695b      	ldr	r3, [r3, #20]
 8007002:	431a      	orrs	r2, r3
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	430a      	orrs	r2, r1
 800700a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	22ff      	movs	r2, #255	; 0xff
 8007012:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2201      	movs	r2, #1
 8007018:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 800701c:	7bfb      	ldrb	r3, [r7, #15]
}
 800701e:	4618      	mov	r0, r3
 8007020:	3710      	adds	r7, #16
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}

08007026 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007026:	b590      	push	{r4, r7, lr}
 8007028:	b087      	sub	sp, #28
 800702a:	af00      	add	r7, sp, #0
 800702c:	60f8      	str	r0, [r7, #12]
 800702e:	60b9      	str	r1, [r7, #8]
 8007030:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007038:	2b01      	cmp	r3, #1
 800703a:	d101      	bne.n	8007040 <HAL_RTC_SetTime+0x1a>
 800703c:	2302      	movs	r3, #2
 800703e:	e08b      	b.n	8007158 <HAL_RTC_SetTime+0x132>
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2201      	movs	r2, #1
 8007044:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2202      	movs	r2, #2
 800704c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	22ca      	movs	r2, #202	; 0xca
 8007056:	625a      	str	r2, [r3, #36]	; 0x24
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	2253      	movs	r2, #83	; 0x53
 800705e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007060:	68f8      	ldr	r0, [r7, #12]
 8007062:	f000 fb55 	bl	8007710 <RTC_EnterInitMode>
 8007066:	4603      	mov	r3, r0
 8007068:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800706a:	7cfb      	ldrb	r3, [r7, #19]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d163      	bne.n	8007138 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d126      	bne.n	80070c4 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	689b      	ldr	r3, [r3, #8]
 800707c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007080:	2b00      	cmp	r3, #0
 8007082:	d102      	bne.n	800708a <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	2200      	movs	r2, #0
 8007088:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	781b      	ldrb	r3, [r3, #0]
 800708e:	4618      	mov	r0, r3
 8007090:	f000 fbb0 	bl	80077f4 <RTC_ByteToBcd2>
 8007094:	4603      	mov	r3, r0
 8007096:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	785b      	ldrb	r3, [r3, #1]
 800709c:	4618      	mov	r0, r3
 800709e:	f000 fba9 	bl	80077f4 <RTC_ByteToBcd2>
 80070a2:	4603      	mov	r3, r0
 80070a4:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80070a6:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	789b      	ldrb	r3, [r3, #2]
 80070ac:	4618      	mov	r0, r3
 80070ae:	f000 fba1 	bl	80077f4 <RTC_ByteToBcd2>
 80070b2:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80070b4:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	78db      	ldrb	r3, [r3, #3]
 80070bc:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80070be:	4313      	orrs	r3, r2
 80070c0:	617b      	str	r3, [r7, #20]
 80070c2:	e018      	b.n	80070f6 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	689b      	ldr	r3, [r3, #8]
 80070ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d102      	bne.n	80070d8 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	2200      	movs	r2, #0
 80070d6:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	781b      	ldrb	r3, [r3, #0]
 80070dc:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	785b      	ldrb	r3, [r3, #1]
 80070e2:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80070e4:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80070e6:	68ba      	ldr	r2, [r7, #8]
 80070e8:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80070ea:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	78db      	ldrb	r3, [r3, #3]
 80070f0:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80070f2:	4313      	orrs	r3, r2
 80070f4:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007100:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007104:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	689a      	ldr	r2, [r3, #8]
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007114:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	6899      	ldr	r1, [r3, #8]
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	68da      	ldr	r2, [r3, #12]
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	691b      	ldr	r3, [r3, #16]
 8007124:	431a      	orrs	r2, r3
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	430a      	orrs	r2, r1
 800712c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800712e:	68f8      	ldr	r0, [r7, #12]
 8007130:	f000 fb22 	bl	8007778 <RTC_ExitInitMode>
 8007134:	4603      	mov	r3, r0
 8007136:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	22ff      	movs	r2, #255	; 0xff
 800713e:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8007140:	7cfb      	ldrb	r3, [r7, #19]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d103      	bne.n	800714e <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2201      	movs	r2, #1
 800714a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2200      	movs	r2, #0
 8007152:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8007156:	7cfb      	ldrb	r3, [r7, #19]
}
 8007158:	4618      	mov	r0, r3
 800715a:	371c      	adds	r7, #28
 800715c:	46bd      	mov	sp, r7
 800715e:	bd90      	pop	{r4, r7, pc}

08007160 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b086      	sub	sp, #24
 8007164:	af00      	add	r7, sp, #0
 8007166:	60f8      	str	r0, [r7, #12]
 8007168:	60b9      	str	r1, [r7, #8]
 800716a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	691b      	ldr	r3, [r3, #16]
 800717c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800718e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007192:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	0c1b      	lsrs	r3, r3, #16
 8007198:	b2db      	uxtb	r3, r3
 800719a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800719e:	b2da      	uxtb	r2, r3
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	0a1b      	lsrs	r3, r3, #8
 80071a8:	b2db      	uxtb	r3, r3
 80071aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071ae:	b2da      	uxtb	r2, r3
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	b2db      	uxtb	r3, r3
 80071b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071bc:	b2da      	uxtb	r2, r3
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	0d9b      	lsrs	r3, r3, #22
 80071c6:	b2db      	uxtb	r3, r3
 80071c8:	f003 0301 	and.w	r3, r3, #1
 80071cc:	b2da      	uxtb	r2, r3
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d11a      	bne.n	800720e <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	781b      	ldrb	r3, [r3, #0]
 80071dc:	4618      	mov	r0, r3
 80071de:	f000 fb29 	bl	8007834 <RTC_Bcd2ToByte>
 80071e2:	4603      	mov	r3, r0
 80071e4:	461a      	mov	r2, r3
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	785b      	ldrb	r3, [r3, #1]
 80071ee:	4618      	mov	r0, r3
 80071f0:	f000 fb20 	bl	8007834 <RTC_Bcd2ToByte>
 80071f4:	4603      	mov	r3, r0
 80071f6:	461a      	mov	r2, r3
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	789b      	ldrb	r3, [r3, #2]
 8007200:	4618      	mov	r0, r3
 8007202:	f000 fb17 	bl	8007834 <RTC_Bcd2ToByte>
 8007206:	4603      	mov	r3, r0
 8007208:	461a      	mov	r2, r3
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800720e:	2300      	movs	r3, #0
}
 8007210:	4618      	mov	r0, r3
 8007212:	3718      	adds	r7, #24
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}

08007218 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007218:	b590      	push	{r4, r7, lr}
 800721a:	b087      	sub	sp, #28
 800721c:	af00      	add	r7, sp, #0
 800721e:	60f8      	str	r0, [r7, #12]
 8007220:	60b9      	str	r1, [r7, #8]
 8007222:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f893 3020 	ldrb.w	r3, [r3, #32]
 800722a:	2b01      	cmp	r3, #1
 800722c:	d101      	bne.n	8007232 <HAL_RTC_SetDate+0x1a>
 800722e:	2302      	movs	r3, #2
 8007230:	e075      	b.n	800731e <HAL_RTC_SetDate+0x106>
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2201      	movs	r2, #1
 8007236:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2202      	movs	r2, #2
 800723e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d10e      	bne.n	8007266 <HAL_RTC_SetDate+0x4e>
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	785b      	ldrb	r3, [r3, #1]
 800724c:	f003 0310 	and.w	r3, r3, #16
 8007250:	2b00      	cmp	r3, #0
 8007252:	d008      	beq.n	8007266 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	785b      	ldrb	r3, [r3, #1]
 8007258:	f023 0310 	bic.w	r3, r3, #16
 800725c:	b2db      	uxtb	r3, r3
 800725e:	330a      	adds	r3, #10
 8007260:	b2da      	uxtb	r2, r3
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d11c      	bne.n	80072a6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	78db      	ldrb	r3, [r3, #3]
 8007270:	4618      	mov	r0, r3
 8007272:	f000 fabf 	bl	80077f4 <RTC_ByteToBcd2>
 8007276:	4603      	mov	r3, r0
 8007278:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	785b      	ldrb	r3, [r3, #1]
 800727e:	4618      	mov	r0, r3
 8007280:	f000 fab8 	bl	80077f4 <RTC_ByteToBcd2>
 8007284:	4603      	mov	r3, r0
 8007286:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8007288:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	789b      	ldrb	r3, [r3, #2]
 800728e:	4618      	mov	r0, r3
 8007290:	f000 fab0 	bl	80077f4 <RTC_ByteToBcd2>
 8007294:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007296:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	781b      	ldrb	r3, [r3, #0]
 800729e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80072a0:	4313      	orrs	r3, r2
 80072a2:	617b      	str	r3, [r7, #20]
 80072a4:	e00e      	b.n	80072c4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	78db      	ldrb	r3, [r3, #3]
 80072aa:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	785b      	ldrb	r3, [r3, #1]
 80072b0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80072b2:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80072b4:	68ba      	ldr	r2, [r7, #8]
 80072b6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80072b8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	781b      	ldrb	r3, [r3, #0]
 80072be:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80072c0:	4313      	orrs	r3, r2
 80072c2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	22ca      	movs	r2, #202	; 0xca
 80072ca:	625a      	str	r2, [r3, #36]	; 0x24
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	2253      	movs	r2, #83	; 0x53
 80072d2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80072d4:	68f8      	ldr	r0, [r7, #12]
 80072d6:	f000 fa1b 	bl	8007710 <RTC_EnterInitMode>
 80072da:	4603      	mov	r3, r0
 80072dc:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80072de:	7cfb      	ldrb	r3, [r7, #19]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d10c      	bne.n	80072fe <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80072ee:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80072f2:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80072f4:	68f8      	ldr	r0, [r7, #12]
 80072f6:	f000 fa3f 	bl	8007778 <RTC_ExitInitMode>
 80072fa:	4603      	mov	r3, r0
 80072fc:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	22ff      	movs	r2, #255	; 0xff
 8007304:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8007306:	7cfb      	ldrb	r3, [r7, #19]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d103      	bne.n	8007314 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2201      	movs	r2, #1
 8007310:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2200      	movs	r2, #0
 8007318:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800731c:	7cfb      	ldrb	r3, [r7, #19]
}
 800731e:	4618      	mov	r0, r3
 8007320:	371c      	adds	r7, #28
 8007322:	46bd      	mov	sp, r7
 8007324:	bd90      	pop	{r4, r7, pc}

08007326 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007326:	b580      	push	{r7, lr}
 8007328:	b086      	sub	sp, #24
 800732a:	af00      	add	r7, sp, #0
 800732c:	60f8      	str	r0, [r7, #12]
 800732e:	60b9      	str	r1, [r7, #8]
 8007330:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800733c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007340:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	0c1b      	lsrs	r3, r3, #16
 8007346:	b2da      	uxtb	r2, r3
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	0a1b      	lsrs	r3, r3, #8
 8007350:	b2db      	uxtb	r3, r3
 8007352:	f003 031f 	and.w	r3, r3, #31
 8007356:	b2da      	uxtb	r2, r3
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	b2db      	uxtb	r3, r3
 8007360:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007364:	b2da      	uxtb	r2, r3
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	0b5b      	lsrs	r3, r3, #13
 800736e:	b2db      	uxtb	r3, r3
 8007370:	f003 0307 	and.w	r3, r3, #7
 8007374:	b2da      	uxtb	r2, r3
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d11a      	bne.n	80073b6 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	78db      	ldrb	r3, [r3, #3]
 8007384:	4618      	mov	r0, r3
 8007386:	f000 fa55 	bl	8007834 <RTC_Bcd2ToByte>
 800738a:	4603      	mov	r3, r0
 800738c:	461a      	mov	r2, r3
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	785b      	ldrb	r3, [r3, #1]
 8007396:	4618      	mov	r0, r3
 8007398:	f000 fa4c 	bl	8007834 <RTC_Bcd2ToByte>
 800739c:	4603      	mov	r3, r0
 800739e:	461a      	mov	r2, r3
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	789b      	ldrb	r3, [r3, #2]
 80073a8:	4618      	mov	r0, r3
 80073aa:	f000 fa43 	bl	8007834 <RTC_Bcd2ToByte>
 80073ae:	4603      	mov	r3, r0
 80073b0:	461a      	mov	r2, r3
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80073b6:	2300      	movs	r3, #0
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3718      	adds	r7, #24
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}

080073c0 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80073c0:	b590      	push	{r4, r7, lr}
 80073c2:	b089      	sub	sp, #36	; 0x24
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	60f8      	str	r0, [r7, #12]
 80073c8:	60b9      	str	r1, [r7, #8]
 80073ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80073d2:	2b01      	cmp	r3, #1
 80073d4:	d101      	bne.n	80073da <HAL_RTC_SetAlarm_IT+0x1a>
 80073d6:	2302      	movs	r3, #2
 80073d8:	e127      	b.n	800762a <HAL_RTC_SetAlarm_IT+0x26a>
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	2201      	movs	r2, #1
 80073de:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2202      	movs	r2, #2
 80073e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d137      	bne.n	8007460 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	689b      	ldr	r3, [r3, #8]
 80073f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d102      	bne.n	8007404 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	2200      	movs	r2, #0
 8007402:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	781b      	ldrb	r3, [r3, #0]
 8007408:	4618      	mov	r0, r3
 800740a:	f000 f9f3 	bl	80077f4 <RTC_ByteToBcd2>
 800740e:	4603      	mov	r3, r0
 8007410:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	785b      	ldrb	r3, [r3, #1]
 8007416:	4618      	mov	r0, r3
 8007418:	f000 f9ec 	bl	80077f4 <RTC_ByteToBcd2>
 800741c:	4603      	mov	r3, r0
 800741e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007420:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	789b      	ldrb	r3, [r3, #2]
 8007426:	4618      	mov	r0, r3
 8007428:	f000 f9e4 	bl	80077f4 <RTC_ByteToBcd2>
 800742c:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800742e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	78db      	ldrb	r3, [r3, #3]
 8007436:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8007438:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007442:	4618      	mov	r0, r3
 8007444:	f000 f9d6 	bl	80077f4 <RTC_ByteToBcd2>
 8007448:	4603      	mov	r3, r0
 800744a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800744c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8007454:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800745a:	4313      	orrs	r3, r2
 800745c:	61fb      	str	r3, [r7, #28]
 800745e:	e023      	b.n	80074a8 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	689b      	ldr	r3, [r3, #8]
 8007466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800746a:	2b00      	cmp	r3, #0
 800746c:	d102      	bne.n	8007474 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	2200      	movs	r2, #0
 8007472:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	781b      	ldrb	r3, [r3, #0]
 8007478:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	785b      	ldrb	r3, [r3, #1]
 800747e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007480:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8007482:	68ba      	ldr	r2, [r7, #8]
 8007484:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007486:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	78db      	ldrb	r3, [r3, #3]
 800748c:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800748e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007496:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8007498:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800749e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80074a4:	4313      	orrs	r3, r2
 80074a6:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	685a      	ldr	r2, [r3, #4]
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	69db      	ldr	r3, [r3, #28]
 80074b0:	4313      	orrs	r3, r2
 80074b2:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	22ca      	movs	r2, #202	; 0xca
 80074ba:	625a      	str	r2, [r3, #36]	; 0x24
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	2253      	movs	r2, #83	; 0x53
 80074c2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074cc:	d14a      	bne.n	8007564 <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	689a      	ldr	r2, [r3, #8]
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80074dc:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	68db      	ldr	r3, [r3, #12]
 80074e4:	b2da      	uxtb	r2, r3
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80074ee:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 80074f0:	f7fc f9c8 	bl	8003884 <HAL_GetTick>
 80074f4:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80074f6:	e015      	b.n	8007524 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80074f8:	f7fc f9c4 	bl	8003884 <HAL_GetTick>
 80074fc:	4602      	mov	r2, r0
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	1ad3      	subs	r3, r2, r3
 8007502:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007506:	d90d      	bls.n	8007524 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	22ff      	movs	r2, #255	; 0xff
 800750e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2203      	movs	r2, #3
 8007514:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	2200      	movs	r2, #0
 800751c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8007520:	2303      	movs	r3, #3
 8007522:	e082      	b.n	800762a <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	68db      	ldr	r3, [r3, #12]
 800752a:	f003 0301 	and.w	r3, r3, #1
 800752e:	2b00      	cmp	r3, #0
 8007530:	d0e2      	beq.n	80074f8 <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	69fa      	ldr	r2, [r7, #28]
 8007538:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	69ba      	ldr	r2, [r7, #24]
 8007540:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	689a      	ldr	r2, [r3, #8]
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007550:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	689a      	ldr	r2, [r3, #8]
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007560:	609a      	str	r2, [r3, #8]
 8007562:	e049      	b.n	80075f8 <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	689a      	ldr	r2, [r3, #8]
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007572:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	68db      	ldr	r3, [r3, #12]
 800757a:	b2da      	uxtb	r2, r3
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f462 7220 	orn	r2, r2, #640	; 0x280
 8007584:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 8007586:	f7fc f97d 	bl	8003884 <HAL_GetTick>
 800758a:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800758c:	e015      	b.n	80075ba <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800758e:	f7fc f979 	bl	8003884 <HAL_GetTick>
 8007592:	4602      	mov	r2, r0
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	1ad3      	subs	r3, r2, r3
 8007598:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800759c:	d90d      	bls.n	80075ba <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	22ff      	movs	r2, #255	; 0xff
 80075a4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2203      	movs	r2, #3
 80075aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2200      	movs	r2, #0
 80075b2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80075b6:	2303      	movs	r3, #3
 80075b8:	e037      	b.n	800762a <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	68db      	ldr	r3, [r3, #12]
 80075c0:	f003 0302 	and.w	r3, r3, #2
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d0e2      	beq.n	800758e <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	69fa      	ldr	r2, [r7, #28]
 80075ce:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	69ba      	ldr	r2, [r7, #24]
 80075d6:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	689a      	ldr	r2, [r3, #8]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075e6:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	689a      	ldr	r2, [r3, #8]
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80075f6:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80075f8:	4b0e      	ldr	r3, [pc, #56]	; (8007634 <HAL_RTC_SetAlarm_IT+0x274>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a0d      	ldr	r2, [pc, #52]	; (8007634 <HAL_RTC_SetAlarm_IT+0x274>)
 80075fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007602:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8007604:	4b0b      	ldr	r3, [pc, #44]	; (8007634 <HAL_RTC_SetAlarm_IT+0x274>)
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	4a0a      	ldr	r2, [pc, #40]	; (8007634 <HAL_RTC_SetAlarm_IT+0x274>)
 800760a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800760e:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	22ff      	movs	r2, #255	; 0xff
 8007616:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2201      	movs	r2, #1
 800761c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2200      	movs	r2, #0
 8007624:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8007628:	2300      	movs	r3, #0
}
 800762a:	4618      	mov	r0, r3
 800762c:	3724      	adds	r7, #36	; 0x24
 800762e:	46bd      	mov	sp, r7
 8007630:	bd90      	pop	{r4, r7, pc}
 8007632:	bf00      	nop
 8007634:	40010400 	.word	0x40010400

08007638 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b082      	sub	sp, #8
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8007640:	4b1f      	ldr	r3, [pc, #124]	; (80076c0 <HAL_RTC_AlarmIRQHandler+0x88>)
 8007642:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8007646:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007652:	2b00      	cmp	r3, #0
 8007654:	d012      	beq.n	800767c <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	68db      	ldr	r3, [r3, #12]
 800765c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007660:	2b00      	cmp	r3, #0
 8007662:	d00b      	beq.n	800767c <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	68db      	ldr	r3, [r3, #12]
 800766a:	b2da      	uxtb	r2, r3
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8007674:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f7f9 fe72 	bl	8001360 <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	689b      	ldr	r3, [r3, #8]
 8007682:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007686:	2b00      	cmp	r3, #0
 8007688:	d012      	beq.n	80076b0 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	68db      	ldr	r3, [r3, #12]
 8007690:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007694:	2b00      	cmp	r3, #0
 8007696:	d00b      	beq.n	80076b0 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	68db      	ldr	r3, [r3, #12]
 800769e:	b2da      	uxtb	r2, r3
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f462 7220 	orn	r2, r2, #640	; 0x280
 80076a8:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f000 f8dc 	bl	8007868 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2201      	movs	r2, #1
 80076b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 80076b8:	bf00      	nop
 80076ba:	3708      	adds	r7, #8
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}
 80076c0:	40010400 	.word	0x40010400

080076c4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	68da      	ldr	r2, [r3, #12]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80076da:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80076dc:	f7fc f8d2 	bl	8003884 <HAL_GetTick>
 80076e0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80076e2:	e009      	b.n	80076f8 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80076e4:	f7fc f8ce 	bl	8003884 <HAL_GetTick>
 80076e8:	4602      	mov	r2, r0
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	1ad3      	subs	r3, r2, r3
 80076ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80076f2:	d901      	bls.n	80076f8 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80076f4:	2303      	movs	r3, #3
 80076f6:	e007      	b.n	8007708 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	68db      	ldr	r3, [r3, #12]
 80076fe:	f003 0320 	and.w	r3, r3, #32
 8007702:	2b00      	cmp	r3, #0
 8007704:	d0ee      	beq.n	80076e4 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8007706:	2300      	movs	r3, #0
}
 8007708:	4618      	mov	r0, r3
 800770a:	3710      	adds	r7, #16
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}

08007710 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b084      	sub	sp, #16
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007718:	2300      	movs	r3, #0
 800771a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	68db      	ldr	r3, [r3, #12]
 8007722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007726:	2b00      	cmp	r3, #0
 8007728:	d120      	bne.n	800776c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f04f 32ff 	mov.w	r2, #4294967295
 8007732:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007734:	f7fc f8a6 	bl	8003884 <HAL_GetTick>
 8007738:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800773a:	e00d      	b.n	8007758 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800773c:	f7fc f8a2 	bl	8003884 <HAL_GetTick>
 8007740:	4602      	mov	r2, r0
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	1ad3      	subs	r3, r2, r3
 8007746:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800774a:	d905      	bls.n	8007758 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800774c:	2303      	movs	r3, #3
 800774e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2203      	movs	r2, #3
 8007754:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	68db      	ldr	r3, [r3, #12]
 800775e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007762:	2b00      	cmp	r3, #0
 8007764:	d102      	bne.n	800776c <RTC_EnterInitMode+0x5c>
 8007766:	7bfb      	ldrb	r3, [r7, #15]
 8007768:	2b03      	cmp	r3, #3
 800776a:	d1e7      	bne.n	800773c <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800776c:	7bfb      	ldrb	r3, [r7, #15]
}
 800776e:	4618      	mov	r0, r3
 8007770:	3710      	adds	r7, #16
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}
	...

08007778 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b084      	sub	sp, #16
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007780:	2300      	movs	r3, #0
 8007782:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8007784:	4b1a      	ldr	r3, [pc, #104]	; (80077f0 <RTC_ExitInitMode+0x78>)
 8007786:	68db      	ldr	r3, [r3, #12]
 8007788:	4a19      	ldr	r2, [pc, #100]	; (80077f0 <RTC_ExitInitMode+0x78>)
 800778a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800778e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007790:	4b17      	ldr	r3, [pc, #92]	; (80077f0 <RTC_ExitInitMode+0x78>)
 8007792:	689b      	ldr	r3, [r3, #8]
 8007794:	f003 0320 	and.w	r3, r3, #32
 8007798:	2b00      	cmp	r3, #0
 800779a:	d10c      	bne.n	80077b6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f7ff ff91 	bl	80076c4 <HAL_RTC_WaitForSynchro>
 80077a2:	4603      	mov	r3, r0
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d01e      	beq.n	80077e6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2203      	movs	r2, #3
 80077ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80077b0:	2303      	movs	r3, #3
 80077b2:	73fb      	strb	r3, [r7, #15]
 80077b4:	e017      	b.n	80077e6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80077b6:	4b0e      	ldr	r3, [pc, #56]	; (80077f0 <RTC_ExitInitMode+0x78>)
 80077b8:	689b      	ldr	r3, [r3, #8]
 80077ba:	4a0d      	ldr	r2, [pc, #52]	; (80077f0 <RTC_ExitInitMode+0x78>)
 80077bc:	f023 0320 	bic.w	r3, r3, #32
 80077c0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f7ff ff7e 	bl	80076c4 <HAL_RTC_WaitForSynchro>
 80077c8:	4603      	mov	r3, r0
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d005      	beq.n	80077da <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2203      	movs	r2, #3
 80077d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80077d6:	2303      	movs	r3, #3
 80077d8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80077da:	4b05      	ldr	r3, [pc, #20]	; (80077f0 <RTC_ExitInitMode+0x78>)
 80077dc:	689b      	ldr	r3, [r3, #8]
 80077de:	4a04      	ldr	r2, [pc, #16]	; (80077f0 <RTC_ExitInitMode+0x78>)
 80077e0:	f043 0320 	orr.w	r3, r3, #32
 80077e4:	6093      	str	r3, [r2, #8]
  }

  return status;
 80077e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3710      	adds	r7, #16
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}
 80077f0:	40002800 	.word	0x40002800

080077f4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b085      	sub	sp, #20
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	4603      	mov	r3, r0
 80077fc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80077fe:	2300      	movs	r3, #0
 8007800:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8007802:	79fb      	ldrb	r3, [r7, #7]
 8007804:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8007806:	e005      	b.n	8007814 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	3301      	adds	r3, #1
 800780c:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800780e:	7afb      	ldrb	r3, [r7, #11]
 8007810:	3b0a      	subs	r3, #10
 8007812:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8007814:	7afb      	ldrb	r3, [r7, #11]
 8007816:	2b09      	cmp	r3, #9
 8007818:	d8f6      	bhi.n	8007808 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	b2db      	uxtb	r3, r3
 800781e:	011b      	lsls	r3, r3, #4
 8007820:	b2da      	uxtb	r2, r3
 8007822:	7afb      	ldrb	r3, [r7, #11]
 8007824:	4313      	orrs	r3, r2
 8007826:	b2db      	uxtb	r3, r3
}
 8007828:	4618      	mov	r0, r3
 800782a:	3714      	adds	r7, #20
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr

08007834 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8007834:	b480      	push	{r7}
 8007836:	b085      	sub	sp, #20
 8007838:	af00      	add	r7, sp, #0
 800783a:	4603      	mov	r3, r0
 800783c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800783e:	79fb      	ldrb	r3, [r7, #7]
 8007840:	091b      	lsrs	r3, r3, #4
 8007842:	b2db      	uxtb	r3, r3
 8007844:	461a      	mov	r2, r3
 8007846:	0092      	lsls	r2, r2, #2
 8007848:	4413      	add	r3, r2
 800784a:	005b      	lsls	r3, r3, #1
 800784c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800784e:	79fb      	ldrb	r3, [r7, #7]
 8007850:	f003 030f 	and.w	r3, r3, #15
 8007854:	b2da      	uxtb	r2, r3
 8007856:	7bfb      	ldrb	r3, [r7, #15]
 8007858:	4413      	add	r3, r2
 800785a:	b2db      	uxtb	r3, r3
}
 800785c:	4618      	mov	r0, r3
 800785e:	3714      	adds	r7, #20
 8007860:	46bd      	mov	sp, r7
 8007862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007866:	4770      	bx	lr

08007868 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8007868:	b480      	push	{r7}
 800786a:	b083      	sub	sp, #12
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8007870:	bf00      	nop
 8007872:	370c      	adds	r7, #12
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr

0800787c <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800787c:	b480      	push	{r7}
 800787e:	b087      	sub	sp, #28
 8007880:	af00      	add	r7, sp, #0
 8007882:	60f8      	str	r0, [r7, #12]
 8007884:	60b9      	str	r1, [r7, #8]
 8007886:	607a      	str	r2, [r7, #4]
  tmp = (uint32_t) & (tamp->BKP0R);
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	3350      	adds	r3, #80	; 0x50
 800788e:	617b      	str	r3, [r7, #20]
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  tmp += (BackupRegister * 4U);
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	009a      	lsls	r2, r3, #2
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	4413      	add	r3, r2
 8007898:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	461a      	mov	r2, r3
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6013      	str	r3, [r2, #0]
}
 80078a2:	bf00      	nop
 80078a4:	371c      	adds	r7, #28
 80078a6:	46bd      	mov	sp, r7
 80078a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ac:	4770      	bx	lr

080078ae <HAL_RTCEx_BKUPRead>:
  *         This parameter can be: RTC_BKP_DRx where x can be from 0 to 31 to
  *         specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80078ae:	b480      	push	{r7}
 80078b0:	b085      	sub	sp, #20
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	6078      	str	r0, [r7, #4]
 80078b6:	6039      	str	r1, [r7, #0]
  tmp = (uint32_t) & (tamp->BKP0R);
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	3350      	adds	r3, #80	; 0x50
 80078be:	60fb      	str	r3, [r7, #12]
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  tmp += (BackupRegister * 4U);
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	009b      	lsls	r3, r3, #2
 80078c4:	68fa      	ldr	r2, [r7, #12]
 80078c6:	4413      	add	r3, r2
 80078c8:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3714      	adds	r7, #20
 80078d2:	46bd      	mov	sp, r7
 80078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d8:	4770      	bx	lr

080078da <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80078da:	b580      	push	{r7, lr}
 80078dc:	b082      	sub	sp, #8
 80078de:	af00      	add	r7, sp, #0
 80078e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d101      	bne.n	80078ec <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80078e8:	2301      	movs	r3, #1
 80078ea:	e049      	b.n	8007980 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078f2:	b2db      	uxtb	r3, r3
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d106      	bne.n	8007906 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2200      	movs	r2, #0
 80078fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f7fb fc99 	bl	8003238 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2202      	movs	r2, #2
 800790a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681a      	ldr	r2, [r3, #0]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	3304      	adds	r3, #4
 8007916:	4619      	mov	r1, r3
 8007918:	4610      	mov	r0, r2
 800791a:	f001 faa3 	bl	8008e64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2201      	movs	r2, #1
 8007922:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2201      	movs	r2, #1
 800792a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2201      	movs	r2, #1
 8007932:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2201      	movs	r2, #1
 800793a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2201      	movs	r2, #1
 8007942:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2201      	movs	r2, #1
 800794a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2201      	movs	r2, #1
 8007952:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2201      	movs	r2, #1
 800795a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2201      	movs	r2, #1
 8007962:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2201      	movs	r2, #1
 800796a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2201      	movs	r2, #1
 8007972:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2201      	movs	r2, #1
 800797a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800797e:	2300      	movs	r3, #0
}
 8007980:	4618      	mov	r0, r3
 8007982:	3708      	adds	r7, #8
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}

08007988 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007988:	b480      	push	{r7}
 800798a:	b085      	sub	sp, #20
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007996:	b2db      	uxtb	r3, r3
 8007998:	2b01      	cmp	r3, #1
 800799a:	d001      	beq.n	80079a0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800799c:	2301      	movs	r3, #1
 800799e:	e047      	b.n	8007a30 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2202      	movs	r2, #2
 80079a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a23      	ldr	r2, [pc, #140]	; (8007a3c <HAL_TIM_Base_Start+0xb4>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d01d      	beq.n	80079ee <HAL_TIM_Base_Start+0x66>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079ba:	d018      	beq.n	80079ee <HAL_TIM_Base_Start+0x66>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a1f      	ldr	r2, [pc, #124]	; (8007a40 <HAL_TIM_Base_Start+0xb8>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d013      	beq.n	80079ee <HAL_TIM_Base_Start+0x66>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a1e      	ldr	r2, [pc, #120]	; (8007a44 <HAL_TIM_Base_Start+0xbc>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d00e      	beq.n	80079ee <HAL_TIM_Base_Start+0x66>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4a1c      	ldr	r2, [pc, #112]	; (8007a48 <HAL_TIM_Base_Start+0xc0>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d009      	beq.n	80079ee <HAL_TIM_Base_Start+0x66>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4a1b      	ldr	r2, [pc, #108]	; (8007a4c <HAL_TIM_Base_Start+0xc4>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d004      	beq.n	80079ee <HAL_TIM_Base_Start+0x66>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4a19      	ldr	r2, [pc, #100]	; (8007a50 <HAL_TIM_Base_Start+0xc8>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d115      	bne.n	8007a1a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	689a      	ldr	r2, [r3, #8]
 80079f4:	4b17      	ldr	r3, [pc, #92]	; (8007a54 <HAL_TIM_Base_Start+0xcc>)
 80079f6:	4013      	ands	r3, r2
 80079f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2b06      	cmp	r3, #6
 80079fe:	d015      	beq.n	8007a2c <HAL_TIM_Base_Start+0xa4>
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a06:	d011      	beq.n	8007a2c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	681a      	ldr	r2, [r3, #0]
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f042 0201 	orr.w	r2, r2, #1
 8007a16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a18:	e008      	b.n	8007a2c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	681a      	ldr	r2, [r3, #0]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f042 0201 	orr.w	r2, r2, #1
 8007a28:	601a      	str	r2, [r3, #0]
 8007a2a:	e000      	b.n	8007a2e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a2c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007a2e:	2300      	movs	r3, #0
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3714      	adds	r7, #20
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr
 8007a3c:	40012c00 	.word	0x40012c00
 8007a40:	40000400 	.word	0x40000400
 8007a44:	40000800 	.word	0x40000800
 8007a48:	40000c00 	.word	0x40000c00
 8007a4c:	40013400 	.word	0x40013400
 8007a50:	40014000 	.word	0x40014000
 8007a54:	00010007 	.word	0x00010007

08007a58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b085      	sub	sp, #20
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a66:	b2db      	uxtb	r3, r3
 8007a68:	2b01      	cmp	r3, #1
 8007a6a:	d001      	beq.n	8007a70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	e04f      	b.n	8007b10 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2202      	movs	r2, #2
 8007a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	68da      	ldr	r2, [r3, #12]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f042 0201 	orr.w	r2, r2, #1
 8007a86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a23      	ldr	r2, [pc, #140]	; (8007b1c <HAL_TIM_Base_Start_IT+0xc4>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d01d      	beq.n	8007ace <HAL_TIM_Base_Start_IT+0x76>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a9a:	d018      	beq.n	8007ace <HAL_TIM_Base_Start_IT+0x76>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a1f      	ldr	r2, [pc, #124]	; (8007b20 <HAL_TIM_Base_Start_IT+0xc8>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d013      	beq.n	8007ace <HAL_TIM_Base_Start_IT+0x76>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a1e      	ldr	r2, [pc, #120]	; (8007b24 <HAL_TIM_Base_Start_IT+0xcc>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d00e      	beq.n	8007ace <HAL_TIM_Base_Start_IT+0x76>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a1c      	ldr	r2, [pc, #112]	; (8007b28 <HAL_TIM_Base_Start_IT+0xd0>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d009      	beq.n	8007ace <HAL_TIM_Base_Start_IT+0x76>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a1b      	ldr	r2, [pc, #108]	; (8007b2c <HAL_TIM_Base_Start_IT+0xd4>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d004      	beq.n	8007ace <HAL_TIM_Base_Start_IT+0x76>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a19      	ldr	r2, [pc, #100]	; (8007b30 <HAL_TIM_Base_Start_IT+0xd8>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d115      	bne.n	8007afa <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	689a      	ldr	r2, [r3, #8]
 8007ad4:	4b17      	ldr	r3, [pc, #92]	; (8007b34 <HAL_TIM_Base_Start_IT+0xdc>)
 8007ad6:	4013      	ands	r3, r2
 8007ad8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	2b06      	cmp	r3, #6
 8007ade:	d015      	beq.n	8007b0c <HAL_TIM_Base_Start_IT+0xb4>
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ae6:	d011      	beq.n	8007b0c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	681a      	ldr	r2, [r3, #0]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f042 0201 	orr.w	r2, r2, #1
 8007af6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007af8:	e008      	b.n	8007b0c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	681a      	ldr	r2, [r3, #0]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f042 0201 	orr.w	r2, r2, #1
 8007b08:	601a      	str	r2, [r3, #0]
 8007b0a:	e000      	b.n	8007b0e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b0c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007b0e:	2300      	movs	r3, #0
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3714      	adds	r7, #20
 8007b14:	46bd      	mov	sp, r7
 8007b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1a:	4770      	bx	lr
 8007b1c:	40012c00 	.word	0x40012c00
 8007b20:	40000400 	.word	0x40000400
 8007b24:	40000800 	.word	0x40000800
 8007b28:	40000c00 	.word	0x40000c00
 8007b2c:	40013400 	.word	0x40013400
 8007b30:	40014000 	.word	0x40014000
 8007b34:	00010007 	.word	0x00010007

08007b38 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b082      	sub	sp, #8
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d101      	bne.n	8007b4a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007b46:	2301      	movs	r3, #1
 8007b48:	e049      	b.n	8007bde <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b50:	b2db      	uxtb	r3, r3
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d106      	bne.n	8007b64 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f000 f841 	bl	8007be6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2202      	movs	r2, #2
 8007b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681a      	ldr	r2, [r3, #0]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	3304      	adds	r3, #4
 8007b74:	4619      	mov	r1, r3
 8007b76:	4610      	mov	r0, r2
 8007b78:	f001 f974 	bl	8008e64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2201      	movs	r2, #1
 8007b80:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2201      	movs	r2, #1
 8007b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2201      	movs	r2, #1
 8007b90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2201      	movs	r2, #1
 8007b98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2201      	movs	r2, #1
 8007bb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007bdc:	2300      	movs	r3, #0
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3708      	adds	r7, #8
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}

08007be6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007be6:	b480      	push	{r7}
 8007be8:	b083      	sub	sp, #12
 8007bea:	af00      	add	r7, sp, #0
 8007bec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007bee:	bf00      	nop
 8007bf0:	370c      	adds	r7, #12
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf8:	4770      	bx	lr
	...

08007bfc <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b086      	sub	sp, #24
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	60f8      	str	r0, [r7, #12]
 8007c04:	60b9      	str	r1, [r7, #8]
 8007c06:	607a      	str	r2, [r7, #4]
 8007c08:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d109      	bne.n	8007c28 <HAL_TIM_PWM_Start_DMA+0x2c>
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c1a:	b2db      	uxtb	r3, r3
 8007c1c:	2b02      	cmp	r3, #2
 8007c1e:	bf0c      	ite	eq
 8007c20:	2301      	moveq	r3, #1
 8007c22:	2300      	movne	r3, #0
 8007c24:	b2db      	uxtb	r3, r3
 8007c26:	e03c      	b.n	8007ca2 <HAL_TIM_PWM_Start_DMA+0xa6>
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	2b04      	cmp	r3, #4
 8007c2c:	d109      	bne.n	8007c42 <HAL_TIM_PWM_Start_DMA+0x46>
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007c34:	b2db      	uxtb	r3, r3
 8007c36:	2b02      	cmp	r3, #2
 8007c38:	bf0c      	ite	eq
 8007c3a:	2301      	moveq	r3, #1
 8007c3c:	2300      	movne	r3, #0
 8007c3e:	b2db      	uxtb	r3, r3
 8007c40:	e02f      	b.n	8007ca2 <HAL_TIM_PWM_Start_DMA+0xa6>
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	2b08      	cmp	r3, #8
 8007c46:	d109      	bne.n	8007c5c <HAL_TIM_PWM_Start_DMA+0x60>
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007c4e:	b2db      	uxtb	r3, r3
 8007c50:	2b02      	cmp	r3, #2
 8007c52:	bf0c      	ite	eq
 8007c54:	2301      	moveq	r3, #1
 8007c56:	2300      	movne	r3, #0
 8007c58:	b2db      	uxtb	r3, r3
 8007c5a:	e022      	b.n	8007ca2 <HAL_TIM_PWM_Start_DMA+0xa6>
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	2b0c      	cmp	r3, #12
 8007c60:	d109      	bne.n	8007c76 <HAL_TIM_PWM_Start_DMA+0x7a>
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c68:	b2db      	uxtb	r3, r3
 8007c6a:	2b02      	cmp	r3, #2
 8007c6c:	bf0c      	ite	eq
 8007c6e:	2301      	moveq	r3, #1
 8007c70:	2300      	movne	r3, #0
 8007c72:	b2db      	uxtb	r3, r3
 8007c74:	e015      	b.n	8007ca2 <HAL_TIM_PWM_Start_DMA+0xa6>
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	2b10      	cmp	r3, #16
 8007c7a:	d109      	bne.n	8007c90 <HAL_TIM_PWM_Start_DMA+0x94>
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007c82:	b2db      	uxtb	r3, r3
 8007c84:	2b02      	cmp	r3, #2
 8007c86:	bf0c      	ite	eq
 8007c88:	2301      	moveq	r3, #1
 8007c8a:	2300      	movne	r3, #0
 8007c8c:	b2db      	uxtb	r3, r3
 8007c8e:	e008      	b.n	8007ca2 <HAL_TIM_PWM_Start_DMA+0xa6>
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007c96:	b2db      	uxtb	r3, r3
 8007c98:	2b02      	cmp	r3, #2
 8007c9a:	bf0c      	ite	eq
 8007c9c:	2301      	moveq	r3, #1
 8007c9e:	2300      	movne	r3, #0
 8007ca0:	b2db      	uxtb	r3, r3
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d001      	beq.n	8007caa <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8007ca6:	2302      	movs	r3, #2
 8007ca8:	e1ab      	b.n	8008002 <HAL_TIM_PWM_Start_DMA+0x406>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d109      	bne.n	8007cc4 <HAL_TIM_PWM_Start_DMA+0xc8>
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007cb6:	b2db      	uxtb	r3, r3
 8007cb8:	2b01      	cmp	r3, #1
 8007cba:	bf0c      	ite	eq
 8007cbc:	2301      	moveq	r3, #1
 8007cbe:	2300      	movne	r3, #0
 8007cc0:	b2db      	uxtb	r3, r3
 8007cc2:	e03c      	b.n	8007d3e <HAL_TIM_PWM_Start_DMA+0x142>
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	2b04      	cmp	r3, #4
 8007cc8:	d109      	bne.n	8007cde <HAL_TIM_PWM_Start_DMA+0xe2>
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007cd0:	b2db      	uxtb	r3, r3
 8007cd2:	2b01      	cmp	r3, #1
 8007cd4:	bf0c      	ite	eq
 8007cd6:	2301      	moveq	r3, #1
 8007cd8:	2300      	movne	r3, #0
 8007cda:	b2db      	uxtb	r3, r3
 8007cdc:	e02f      	b.n	8007d3e <HAL_TIM_PWM_Start_DMA+0x142>
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	2b08      	cmp	r3, #8
 8007ce2:	d109      	bne.n	8007cf8 <HAL_TIM_PWM_Start_DMA+0xfc>
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007cea:	b2db      	uxtb	r3, r3
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	bf0c      	ite	eq
 8007cf0:	2301      	moveq	r3, #1
 8007cf2:	2300      	movne	r3, #0
 8007cf4:	b2db      	uxtb	r3, r3
 8007cf6:	e022      	b.n	8007d3e <HAL_TIM_PWM_Start_DMA+0x142>
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	2b0c      	cmp	r3, #12
 8007cfc:	d109      	bne.n	8007d12 <HAL_TIM_PWM_Start_DMA+0x116>
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d04:	b2db      	uxtb	r3, r3
 8007d06:	2b01      	cmp	r3, #1
 8007d08:	bf0c      	ite	eq
 8007d0a:	2301      	moveq	r3, #1
 8007d0c:	2300      	movne	r3, #0
 8007d0e:	b2db      	uxtb	r3, r3
 8007d10:	e015      	b.n	8007d3e <HAL_TIM_PWM_Start_DMA+0x142>
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	2b10      	cmp	r3, #16
 8007d16:	d109      	bne.n	8007d2c <HAL_TIM_PWM_Start_DMA+0x130>
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007d1e:	b2db      	uxtb	r3, r3
 8007d20:	2b01      	cmp	r3, #1
 8007d22:	bf0c      	ite	eq
 8007d24:	2301      	moveq	r3, #1
 8007d26:	2300      	movne	r3, #0
 8007d28:	b2db      	uxtb	r3, r3
 8007d2a:	e008      	b.n	8007d3e <HAL_TIM_PWM_Start_DMA+0x142>
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007d32:	b2db      	uxtb	r3, r3
 8007d34:	2b01      	cmp	r3, #1
 8007d36:	bf0c      	ite	eq
 8007d38:	2301      	moveq	r3, #1
 8007d3a:	2300      	movne	r3, #0
 8007d3c:	b2db      	uxtb	r3, r3
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d034      	beq.n	8007dac <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) && (Length > 0U))
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d104      	bne.n	8007d52 <HAL_TIM_PWM_Start_DMA+0x156>
 8007d48:	887b      	ldrh	r3, [r7, #2]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d001      	beq.n	8007d52 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8007d4e:	2301      	movs	r3, #1
 8007d50:	e157      	b.n	8008002 <HAL_TIM_PWM_Start_DMA+0x406>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d104      	bne.n	8007d62 <HAL_TIM_PWM_Start_DMA+0x166>
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2202      	movs	r2, #2
 8007d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d60:	e026      	b.n	8007db0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	2b04      	cmp	r3, #4
 8007d66:	d104      	bne.n	8007d72 <HAL_TIM_PWM_Start_DMA+0x176>
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	2202      	movs	r2, #2
 8007d6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d70:	e01e      	b.n	8007db0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	2b08      	cmp	r3, #8
 8007d76:	d104      	bne.n	8007d82 <HAL_TIM_PWM_Start_DMA+0x186>
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2202      	movs	r2, #2
 8007d7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d80:	e016      	b.n	8007db0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	2b0c      	cmp	r3, #12
 8007d86:	d104      	bne.n	8007d92 <HAL_TIM_PWM_Start_DMA+0x196>
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2202      	movs	r2, #2
 8007d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007d90:	e00e      	b.n	8007db0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	2b10      	cmp	r3, #16
 8007d96:	d104      	bne.n	8007da2 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	2202      	movs	r2, #2
 8007d9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007da0:	e006      	b.n	8007db0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2202      	movs	r2, #2
 8007da6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007daa:	e001      	b.n	8007db0 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8007dac:	2301      	movs	r3, #1
 8007dae:	e128      	b.n	8008002 <HAL_TIM_PWM_Start_DMA+0x406>
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	2b0c      	cmp	r3, #12
 8007db4:	f200 80ae 	bhi.w	8007f14 <HAL_TIM_PWM_Start_DMA+0x318>
 8007db8:	a201      	add	r2, pc, #4	; (adr r2, 8007dc0 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8007dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dbe:	bf00      	nop
 8007dc0:	08007df5 	.word	0x08007df5
 8007dc4:	08007f15 	.word	0x08007f15
 8007dc8:	08007f15 	.word	0x08007f15
 8007dcc:	08007f15 	.word	0x08007f15
 8007dd0:	08007e3d 	.word	0x08007e3d
 8007dd4:	08007f15 	.word	0x08007f15
 8007dd8:	08007f15 	.word	0x08007f15
 8007ddc:	08007f15 	.word	0x08007f15
 8007de0:	08007e85 	.word	0x08007e85
 8007de4:	08007f15 	.word	0x08007f15
 8007de8:	08007f15 	.word	0x08007f15
 8007dec:	08007f15 	.word	0x08007f15
 8007df0:	08007ecd 	.word	0x08007ecd
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df8:	4a84      	ldr	r2, [pc, #528]	; (800800c <HAL_TIM_PWM_Start_DMA+0x410>)
 8007dfa:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e00:	4a83      	ldr	r2, [pc, #524]	; (8008010 <HAL_TIM_PWM_Start_DMA+0x414>)
 8007e02:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e08:	4a82      	ldr	r2, [pc, #520]	; (8008014 <HAL_TIM_PWM_Start_DMA+0x418>)
 8007e0a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8007e10:	6879      	ldr	r1, [r7, #4]
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	3334      	adds	r3, #52	; 0x34
 8007e18:	461a      	mov	r2, r3
 8007e1a:	887b      	ldrh	r3, [r7, #2]
 8007e1c:	f7fd fa40 	bl	80052a0 <HAL_DMA_Start_IT>
 8007e20:	4603      	mov	r3, r0
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d001      	beq.n	8007e2a <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007e26:	2301      	movs	r3, #1
 8007e28:	e0eb      	b.n	8008002 <HAL_TIM_PWM_Start_DMA+0x406>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	68da      	ldr	r2, [r3, #12]
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e38:	60da      	str	r2, [r3, #12]
      break;
 8007e3a:	e06e      	b.n	8007f1a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e40:	4a72      	ldr	r2, [pc, #456]	; (800800c <HAL_TIM_PWM_Start_DMA+0x410>)
 8007e42:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e48:	4a71      	ldr	r2, [pc, #452]	; (8008010 <HAL_TIM_PWM_Start_DMA+0x414>)
 8007e4a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e50:	4a70      	ldr	r2, [pc, #448]	; (8008014 <HAL_TIM_PWM_Start_DMA+0x418>)
 8007e52:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8007e58:	6879      	ldr	r1, [r7, #4]
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	3338      	adds	r3, #56	; 0x38
 8007e60:	461a      	mov	r2, r3
 8007e62:	887b      	ldrh	r3, [r7, #2]
 8007e64:	f7fd fa1c 	bl	80052a0 <HAL_DMA_Start_IT>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d001      	beq.n	8007e72 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007e6e:	2301      	movs	r3, #1
 8007e70:	e0c7      	b.n	8008002 <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	68da      	ldr	r2, [r3, #12]
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007e80:	60da      	str	r2, [r3, #12]
      break;
 8007e82:	e04a      	b.n	8007f1a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e88:	4a60      	ldr	r2, [pc, #384]	; (800800c <HAL_TIM_PWM_Start_DMA+0x410>)
 8007e8a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e90:	4a5f      	ldr	r2, [pc, #380]	; (8008010 <HAL_TIM_PWM_Start_DMA+0x414>)
 8007e92:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e98:	4a5e      	ldr	r2, [pc, #376]	; (8008014 <HAL_TIM_PWM_Start_DMA+0x418>)
 8007e9a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007ea0:	6879      	ldr	r1, [r7, #4]
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	333c      	adds	r3, #60	; 0x3c
 8007ea8:	461a      	mov	r2, r3
 8007eaa:	887b      	ldrh	r3, [r7, #2]
 8007eac:	f7fd f9f8 	bl	80052a0 <HAL_DMA_Start_IT>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d001      	beq.n	8007eba <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	e0a3      	b.n	8008002 <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	68da      	ldr	r2, [r3, #12]
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ec8:	60da      	str	r2, [r3, #12]
      break;
 8007eca:	e026      	b.n	8007f1a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ed0:	4a4e      	ldr	r2, [pc, #312]	; (800800c <HAL_TIM_PWM_Start_DMA+0x410>)
 8007ed2:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ed8:	4a4d      	ldr	r2, [pc, #308]	; (8008010 <HAL_TIM_PWM_Start_DMA+0x414>)
 8007eda:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ee0:	4a4c      	ldr	r2, [pc, #304]	; (8008014 <HAL_TIM_PWM_Start_DMA+0x418>)
 8007ee2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007ee8:	6879      	ldr	r1, [r7, #4]
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	3340      	adds	r3, #64	; 0x40
 8007ef0:	461a      	mov	r2, r3
 8007ef2:	887b      	ldrh	r3, [r7, #2]
 8007ef4:	f7fd f9d4 	bl	80052a0 <HAL_DMA_Start_IT>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d001      	beq.n	8007f02 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007efe:	2301      	movs	r3, #1
 8007f00:	e07f      	b.n	8008002 <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	68da      	ldr	r2, [r3, #12]
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007f10:	60da      	str	r2, [r3, #12]
      break;
 8007f12:	e002      	b.n	8007f1a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8007f14:	2301      	movs	r3, #1
 8007f16:	75fb      	strb	r3, [r7, #23]
      break;
 8007f18:	bf00      	nop
  }

  if (status == HAL_OK)
 8007f1a:	7dfb      	ldrb	r3, [r7, #23]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d16f      	bne.n	8008000 <HAL_TIM_PWM_Start_DMA+0x404>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	2201      	movs	r2, #1
 8007f26:	68b9      	ldr	r1, [r7, #8]
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f001 fd5d 	bl	80099e8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4a39      	ldr	r2, [pc, #228]	; (8008018 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d013      	beq.n	8007f60 <HAL_TIM_PWM_Start_DMA+0x364>
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4a37      	ldr	r2, [pc, #220]	; (800801c <HAL_TIM_PWM_Start_DMA+0x420>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d00e      	beq.n	8007f60 <HAL_TIM_PWM_Start_DMA+0x364>
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4a36      	ldr	r2, [pc, #216]	; (8008020 <HAL_TIM_PWM_Start_DMA+0x424>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d009      	beq.n	8007f60 <HAL_TIM_PWM_Start_DMA+0x364>
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a34      	ldr	r2, [pc, #208]	; (8008024 <HAL_TIM_PWM_Start_DMA+0x428>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d004      	beq.n	8007f60 <HAL_TIM_PWM_Start_DMA+0x364>
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4a33      	ldr	r2, [pc, #204]	; (8008028 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d101      	bne.n	8007f64 <HAL_TIM_PWM_Start_DMA+0x368>
 8007f60:	2301      	movs	r3, #1
 8007f62:	e000      	b.n	8007f66 <HAL_TIM_PWM_Start_DMA+0x36a>
 8007f64:	2300      	movs	r3, #0
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d007      	beq.n	8007f7a <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007f78:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4a26      	ldr	r2, [pc, #152]	; (8008018 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d01d      	beq.n	8007fc0 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f8c:	d018      	beq.n	8007fc0 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4a26      	ldr	r2, [pc, #152]	; (800802c <HAL_TIM_PWM_Start_DMA+0x430>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d013      	beq.n	8007fc0 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4a24      	ldr	r2, [pc, #144]	; (8008030 <HAL_TIM_PWM_Start_DMA+0x434>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d00e      	beq.n	8007fc0 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4a23      	ldr	r2, [pc, #140]	; (8008034 <HAL_TIM_PWM_Start_DMA+0x438>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d009      	beq.n	8007fc0 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4a1a      	ldr	r2, [pc, #104]	; (800801c <HAL_TIM_PWM_Start_DMA+0x420>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d004      	beq.n	8007fc0 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a19      	ldr	r2, [pc, #100]	; (8008020 <HAL_TIM_PWM_Start_DMA+0x424>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d115      	bne.n	8007fec <HAL_TIM_PWM_Start_DMA+0x3f0>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	689a      	ldr	r2, [r3, #8]
 8007fc6:	4b1c      	ldr	r3, [pc, #112]	; (8008038 <HAL_TIM_PWM_Start_DMA+0x43c>)
 8007fc8:	4013      	ands	r3, r2
 8007fca:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	2b06      	cmp	r3, #6
 8007fd0:	d015      	beq.n	8007ffe <HAL_TIM_PWM_Start_DMA+0x402>
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fd8:	d011      	beq.n	8007ffe <HAL_TIM_PWM_Start_DMA+0x402>
      {
        __HAL_TIM_ENABLE(htim);
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	681a      	ldr	r2, [r3, #0]
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f042 0201 	orr.w	r2, r2, #1
 8007fe8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fea:	e008      	b.n	8007ffe <HAL_TIM_PWM_Start_DMA+0x402>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	681a      	ldr	r2, [r3, #0]
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f042 0201 	orr.w	r2, r2, #1
 8007ffa:	601a      	str	r2, [r3, #0]
 8007ffc:	e000      	b.n	8008000 <HAL_TIM_PWM_Start_DMA+0x404>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ffe:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8008000:	7dfb      	ldrb	r3, [r7, #23]
}
 8008002:	4618      	mov	r0, r3
 8008004:	3718      	adds	r7, #24
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}
 800800a:	bf00      	nop
 800800c:	08008d55 	.word	0x08008d55
 8008010:	08008dfd 	.word	0x08008dfd
 8008014:	08008cc3 	.word	0x08008cc3
 8008018:	40012c00 	.word	0x40012c00
 800801c:	40013400 	.word	0x40013400
 8008020:	40014000 	.word	0x40014000
 8008024:	40014400 	.word	0x40014400
 8008028:	40014800 	.word	0x40014800
 800802c:	40000400 	.word	0x40000400
 8008030:	40000800 	.word	0x40000800
 8008034:	40000c00 	.word	0x40000c00
 8008038:	00010007 	.word	0x00010007

0800803c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b082      	sub	sp, #8
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d101      	bne.n	800804e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800804a:	2301      	movs	r3, #1
 800804c:	e049      	b.n	80080e2 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008054:	b2db      	uxtb	r3, r3
 8008056:	2b00      	cmp	r3, #0
 8008058:	d106      	bne.n	8008068 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2200      	movs	r2, #0
 800805e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f000 f841 	bl	80080ea <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2202      	movs	r2, #2
 800806c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681a      	ldr	r2, [r3, #0]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	3304      	adds	r3, #4
 8008078:	4619      	mov	r1, r3
 800807a:	4610      	mov	r0, r2
 800807c:	f000 fef2 	bl	8008e64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2201      	movs	r2, #1
 8008084:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2201      	movs	r2, #1
 800808c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2201      	movs	r2, #1
 8008094:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2201      	movs	r2, #1
 800809c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2201      	movs	r2, #1
 80080a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2201      	movs	r2, #1
 80080ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2201      	movs	r2, #1
 80080b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2201      	movs	r2, #1
 80080bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2201      	movs	r2, #1
 80080c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2201      	movs	r2, #1
 80080cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2201      	movs	r2, #1
 80080d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2201      	movs	r2, #1
 80080dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80080e0:	2300      	movs	r3, #0
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3708      	adds	r7, #8
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}

080080ea <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80080ea:	b480      	push	{r7}
 80080ec:	b083      	sub	sp, #12
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80080f2:	bf00      	nop
 80080f4:	370c      	adds	r7, #12
 80080f6:	46bd      	mov	sp, r7
 80080f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fc:	4770      	bx	lr
	...

08008100 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b084      	sub	sp, #16
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800810a:	2300      	movs	r3, #0
 800810c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d104      	bne.n	800811e <HAL_TIM_IC_Start_IT+0x1e>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800811a:	b2db      	uxtb	r3, r3
 800811c:	e023      	b.n	8008166 <HAL_TIM_IC_Start_IT+0x66>
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	2b04      	cmp	r3, #4
 8008122:	d104      	bne.n	800812e <HAL_TIM_IC_Start_IT+0x2e>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800812a:	b2db      	uxtb	r3, r3
 800812c:	e01b      	b.n	8008166 <HAL_TIM_IC_Start_IT+0x66>
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	2b08      	cmp	r3, #8
 8008132:	d104      	bne.n	800813e <HAL_TIM_IC_Start_IT+0x3e>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800813a:	b2db      	uxtb	r3, r3
 800813c:	e013      	b.n	8008166 <HAL_TIM_IC_Start_IT+0x66>
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	2b0c      	cmp	r3, #12
 8008142:	d104      	bne.n	800814e <HAL_TIM_IC_Start_IT+0x4e>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800814a:	b2db      	uxtb	r3, r3
 800814c:	e00b      	b.n	8008166 <HAL_TIM_IC_Start_IT+0x66>
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	2b10      	cmp	r3, #16
 8008152:	d104      	bne.n	800815e <HAL_TIM_IC_Start_IT+0x5e>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800815a:	b2db      	uxtb	r3, r3
 800815c:	e003      	b.n	8008166 <HAL_TIM_IC_Start_IT+0x66>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008164:	b2db      	uxtb	r3, r3
 8008166:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d104      	bne.n	8008178 <HAL_TIM_IC_Start_IT+0x78>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008174:	b2db      	uxtb	r3, r3
 8008176:	e013      	b.n	80081a0 <HAL_TIM_IC_Start_IT+0xa0>
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	2b04      	cmp	r3, #4
 800817c:	d104      	bne.n	8008188 <HAL_TIM_IC_Start_IT+0x88>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008184:	b2db      	uxtb	r3, r3
 8008186:	e00b      	b.n	80081a0 <HAL_TIM_IC_Start_IT+0xa0>
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	2b08      	cmp	r3, #8
 800818c:	d104      	bne.n	8008198 <HAL_TIM_IC_Start_IT+0x98>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008194:	b2db      	uxtb	r3, r3
 8008196:	e003      	b.n	80081a0 <HAL_TIM_IC_Start_IT+0xa0>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800819e:	b2db      	uxtb	r3, r3
 80081a0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80081a2:	7bbb      	ldrb	r3, [r7, #14]
 80081a4:	2b01      	cmp	r3, #1
 80081a6:	d102      	bne.n	80081ae <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80081a8:	7b7b      	ldrb	r3, [r7, #13]
 80081aa:	2b01      	cmp	r3, #1
 80081ac:	d001      	beq.n	80081b2 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80081ae:	2301      	movs	r3, #1
 80081b0:	e0dd      	b.n	800836e <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d104      	bne.n	80081c2 <HAL_TIM_IC_Start_IT+0xc2>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2202      	movs	r2, #2
 80081bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80081c0:	e023      	b.n	800820a <HAL_TIM_IC_Start_IT+0x10a>
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	2b04      	cmp	r3, #4
 80081c6:	d104      	bne.n	80081d2 <HAL_TIM_IC_Start_IT+0xd2>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2202      	movs	r2, #2
 80081cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80081d0:	e01b      	b.n	800820a <HAL_TIM_IC_Start_IT+0x10a>
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	2b08      	cmp	r3, #8
 80081d6:	d104      	bne.n	80081e2 <HAL_TIM_IC_Start_IT+0xe2>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2202      	movs	r2, #2
 80081dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80081e0:	e013      	b.n	800820a <HAL_TIM_IC_Start_IT+0x10a>
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	2b0c      	cmp	r3, #12
 80081e6:	d104      	bne.n	80081f2 <HAL_TIM_IC_Start_IT+0xf2>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2202      	movs	r2, #2
 80081ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80081f0:	e00b      	b.n	800820a <HAL_TIM_IC_Start_IT+0x10a>
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	2b10      	cmp	r3, #16
 80081f6:	d104      	bne.n	8008202 <HAL_TIM_IC_Start_IT+0x102>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2202      	movs	r2, #2
 80081fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008200:	e003      	b.n	800820a <HAL_TIM_IC_Start_IT+0x10a>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2202      	movs	r2, #2
 8008206:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d104      	bne.n	800821a <HAL_TIM_IC_Start_IT+0x11a>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2202      	movs	r2, #2
 8008214:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008218:	e013      	b.n	8008242 <HAL_TIM_IC_Start_IT+0x142>
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	2b04      	cmp	r3, #4
 800821e:	d104      	bne.n	800822a <HAL_TIM_IC_Start_IT+0x12a>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2202      	movs	r2, #2
 8008224:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008228:	e00b      	b.n	8008242 <HAL_TIM_IC_Start_IT+0x142>
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	2b08      	cmp	r3, #8
 800822e:	d104      	bne.n	800823a <HAL_TIM_IC_Start_IT+0x13a>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2202      	movs	r2, #2
 8008234:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008238:	e003      	b.n	8008242 <HAL_TIM_IC_Start_IT+0x142>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2202      	movs	r2, #2
 800823e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	2b0c      	cmp	r3, #12
 8008246:	d841      	bhi.n	80082cc <HAL_TIM_IC_Start_IT+0x1cc>
 8008248:	a201      	add	r2, pc, #4	; (adr r2, 8008250 <HAL_TIM_IC_Start_IT+0x150>)
 800824a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800824e:	bf00      	nop
 8008250:	08008285 	.word	0x08008285
 8008254:	080082cd 	.word	0x080082cd
 8008258:	080082cd 	.word	0x080082cd
 800825c:	080082cd 	.word	0x080082cd
 8008260:	08008297 	.word	0x08008297
 8008264:	080082cd 	.word	0x080082cd
 8008268:	080082cd 	.word	0x080082cd
 800826c:	080082cd 	.word	0x080082cd
 8008270:	080082a9 	.word	0x080082a9
 8008274:	080082cd 	.word	0x080082cd
 8008278:	080082cd 	.word	0x080082cd
 800827c:	080082cd 	.word	0x080082cd
 8008280:	080082bb 	.word	0x080082bb
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	68da      	ldr	r2, [r3, #12]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f042 0202 	orr.w	r2, r2, #2
 8008292:	60da      	str	r2, [r3, #12]
      break;
 8008294:	e01d      	b.n	80082d2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	68da      	ldr	r2, [r3, #12]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f042 0204 	orr.w	r2, r2, #4
 80082a4:	60da      	str	r2, [r3, #12]
      break;
 80082a6:	e014      	b.n	80082d2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	68da      	ldr	r2, [r3, #12]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f042 0208 	orr.w	r2, r2, #8
 80082b6:	60da      	str	r2, [r3, #12]
      break;
 80082b8:	e00b      	b.n	80082d2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	68da      	ldr	r2, [r3, #12]
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f042 0210 	orr.w	r2, r2, #16
 80082c8:	60da      	str	r2, [r3, #12]
      break;
 80082ca:	e002      	b.n	80082d2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80082cc:	2301      	movs	r3, #1
 80082ce:	73fb      	strb	r3, [r7, #15]
      break;
 80082d0:	bf00      	nop
  }

  if (status == HAL_OK)
 80082d2:	7bfb      	ldrb	r3, [r7, #15]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d149      	bne.n	800836c <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	2201      	movs	r2, #1
 80082de:	6839      	ldr	r1, [r7, #0]
 80082e0:	4618      	mov	r0, r3
 80082e2:	f001 fb81 	bl	80099e8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a23      	ldr	r2, [pc, #140]	; (8008378 <HAL_TIM_IC_Start_IT+0x278>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d01d      	beq.n	800832c <HAL_TIM_IC_Start_IT+0x22c>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082f8:	d018      	beq.n	800832c <HAL_TIM_IC_Start_IT+0x22c>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a1f      	ldr	r2, [pc, #124]	; (800837c <HAL_TIM_IC_Start_IT+0x27c>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d013      	beq.n	800832c <HAL_TIM_IC_Start_IT+0x22c>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a1d      	ldr	r2, [pc, #116]	; (8008380 <HAL_TIM_IC_Start_IT+0x280>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d00e      	beq.n	800832c <HAL_TIM_IC_Start_IT+0x22c>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4a1c      	ldr	r2, [pc, #112]	; (8008384 <HAL_TIM_IC_Start_IT+0x284>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d009      	beq.n	800832c <HAL_TIM_IC_Start_IT+0x22c>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	4a1a      	ldr	r2, [pc, #104]	; (8008388 <HAL_TIM_IC_Start_IT+0x288>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d004      	beq.n	800832c <HAL_TIM_IC_Start_IT+0x22c>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	4a19      	ldr	r2, [pc, #100]	; (800838c <HAL_TIM_IC_Start_IT+0x28c>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d115      	bne.n	8008358 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	689a      	ldr	r2, [r3, #8]
 8008332:	4b17      	ldr	r3, [pc, #92]	; (8008390 <HAL_TIM_IC_Start_IT+0x290>)
 8008334:	4013      	ands	r3, r2
 8008336:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	2b06      	cmp	r3, #6
 800833c:	d015      	beq.n	800836a <HAL_TIM_IC_Start_IT+0x26a>
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008344:	d011      	beq.n	800836a <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	681a      	ldr	r2, [r3, #0]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f042 0201 	orr.w	r2, r2, #1
 8008354:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008356:	e008      	b.n	800836a <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	681a      	ldr	r2, [r3, #0]
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f042 0201 	orr.w	r2, r2, #1
 8008366:	601a      	str	r2, [r3, #0]
 8008368:	e000      	b.n	800836c <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800836a:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800836c:	7bfb      	ldrb	r3, [r7, #15]
}
 800836e:	4618      	mov	r0, r3
 8008370:	3710      	adds	r7, #16
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}
 8008376:	bf00      	nop
 8008378:	40012c00 	.word	0x40012c00
 800837c:	40000400 	.word	0x40000400
 8008380:	40000800 	.word	0x40000800
 8008384:	40000c00 	.word	0x40000c00
 8008388:	40013400 	.word	0x40013400
 800838c:	40014000 	.word	0x40014000
 8008390:	00010007 	.word	0x00010007

08008394 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b082      	sub	sp, #8
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	691b      	ldr	r3, [r3, #16]
 80083a2:	f003 0302 	and.w	r3, r3, #2
 80083a6:	2b02      	cmp	r3, #2
 80083a8:	d122      	bne.n	80083f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	68db      	ldr	r3, [r3, #12]
 80083b0:	f003 0302 	and.w	r3, r3, #2
 80083b4:	2b02      	cmp	r3, #2
 80083b6:	d11b      	bne.n	80083f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f06f 0202 	mvn.w	r2, #2
 80083c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2201      	movs	r2, #1
 80083c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	699b      	ldr	r3, [r3, #24]
 80083ce:	f003 0303 	and.w	r3, r3, #3
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d003      	beq.n	80083de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f7f8 ffcc 	bl	8001374 <HAL_TIM_IC_CaptureCallback>
 80083dc:	e005      	b.n	80083ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f000 fbf8 	bl	8008bd4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f000 fbff 	bl	8008be8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2200      	movs	r2, #0
 80083ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	691b      	ldr	r3, [r3, #16]
 80083f6:	f003 0304 	and.w	r3, r3, #4
 80083fa:	2b04      	cmp	r3, #4
 80083fc:	d122      	bne.n	8008444 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	68db      	ldr	r3, [r3, #12]
 8008404:	f003 0304 	and.w	r3, r3, #4
 8008408:	2b04      	cmp	r3, #4
 800840a:	d11b      	bne.n	8008444 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f06f 0204 	mvn.w	r2, #4
 8008414:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2202      	movs	r2, #2
 800841a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	699b      	ldr	r3, [r3, #24]
 8008422:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008426:	2b00      	cmp	r3, #0
 8008428:	d003      	beq.n	8008432 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f7f8 ffa2 	bl	8001374 <HAL_TIM_IC_CaptureCallback>
 8008430:	e005      	b.n	800843e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f000 fbce 	bl	8008bd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f000 fbd5 	bl	8008be8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2200      	movs	r2, #0
 8008442:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	691b      	ldr	r3, [r3, #16]
 800844a:	f003 0308 	and.w	r3, r3, #8
 800844e:	2b08      	cmp	r3, #8
 8008450:	d122      	bne.n	8008498 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	68db      	ldr	r3, [r3, #12]
 8008458:	f003 0308 	and.w	r3, r3, #8
 800845c:	2b08      	cmp	r3, #8
 800845e:	d11b      	bne.n	8008498 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f06f 0208 	mvn.w	r2, #8
 8008468:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2204      	movs	r2, #4
 800846e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	69db      	ldr	r3, [r3, #28]
 8008476:	f003 0303 	and.w	r3, r3, #3
 800847a:	2b00      	cmp	r3, #0
 800847c:	d003      	beq.n	8008486 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f7f8 ff78 	bl	8001374 <HAL_TIM_IC_CaptureCallback>
 8008484:	e005      	b.n	8008492 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f000 fba4 	bl	8008bd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f000 fbab 	bl	8008be8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2200      	movs	r2, #0
 8008496:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	691b      	ldr	r3, [r3, #16]
 800849e:	f003 0310 	and.w	r3, r3, #16
 80084a2:	2b10      	cmp	r3, #16
 80084a4:	d122      	bne.n	80084ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	68db      	ldr	r3, [r3, #12]
 80084ac:	f003 0310 	and.w	r3, r3, #16
 80084b0:	2b10      	cmp	r3, #16
 80084b2:	d11b      	bne.n	80084ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f06f 0210 	mvn.w	r2, #16
 80084bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2208      	movs	r2, #8
 80084c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	69db      	ldr	r3, [r3, #28]
 80084ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d003      	beq.n	80084da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f7f8 ff4e 	bl	8001374 <HAL_TIM_IC_CaptureCallback>
 80084d8:	e005      	b.n	80084e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f000 fb7a 	bl	8008bd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f000 fb81 	bl	8008be8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2200      	movs	r2, #0
 80084ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	691b      	ldr	r3, [r3, #16]
 80084f2:	f003 0301 	and.w	r3, r3, #1
 80084f6:	2b01      	cmp	r3, #1
 80084f8:	d10e      	bne.n	8008518 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	68db      	ldr	r3, [r3, #12]
 8008500:	f003 0301 	and.w	r3, r3, #1
 8008504:	2b01      	cmp	r3, #1
 8008506:	d107      	bne.n	8008518 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f06f 0201 	mvn.w	r2, #1
 8008510:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f7f8 ff48 	bl	80013a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	691b      	ldr	r3, [r3, #16]
 800851e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008522:	2b80      	cmp	r3, #128	; 0x80
 8008524:	d10e      	bne.n	8008544 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	68db      	ldr	r3, [r3, #12]
 800852c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008530:	2b80      	cmp	r3, #128	; 0x80
 8008532:	d107      	bne.n	8008544 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800853c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f001 fb0a 	bl	8009b58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	691b      	ldr	r3, [r3, #16]
 800854a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800854e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008552:	d10e      	bne.n	8008572 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	68db      	ldr	r3, [r3, #12]
 800855a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800855e:	2b80      	cmp	r3, #128	; 0x80
 8008560:	d107      	bne.n	8008572 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800856a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f001 fafd 	bl	8009b6c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	691b      	ldr	r3, [r3, #16]
 8008578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800857c:	2b40      	cmp	r3, #64	; 0x40
 800857e:	d10e      	bne.n	800859e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	68db      	ldr	r3, [r3, #12]
 8008586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800858a:	2b40      	cmp	r3, #64	; 0x40
 800858c:	d107      	bne.n	800859e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008596:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f000 fb39 	bl	8008c10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	691b      	ldr	r3, [r3, #16]
 80085a4:	f003 0320 	and.w	r3, r3, #32
 80085a8:	2b20      	cmp	r3, #32
 80085aa:	d10e      	bne.n	80085ca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	68db      	ldr	r3, [r3, #12]
 80085b2:	f003 0320 	and.w	r3, r3, #32
 80085b6:	2b20      	cmp	r3, #32
 80085b8:	d107      	bne.n	80085ca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f06f 0220 	mvn.w	r2, #32
 80085c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f001 fabd 	bl	8009b44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80085ca:	bf00      	nop
 80085cc:	3708      	adds	r7, #8
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}

080085d2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80085d2:	b580      	push	{r7, lr}
 80085d4:	b086      	sub	sp, #24
 80085d6:	af00      	add	r7, sp, #0
 80085d8:	60f8      	str	r0, [r7, #12]
 80085da:	60b9      	str	r1, [r7, #8]
 80085dc:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80085de:	2300      	movs	r3, #0
 80085e0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085e8:	2b01      	cmp	r3, #1
 80085ea:	d101      	bne.n	80085f0 <HAL_TIM_IC_ConfigChannel+0x1e>
 80085ec:	2302      	movs	r3, #2
 80085ee:	e088      	b.n	8008702 <HAL_TIM_IC_ConfigChannel+0x130>
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2201      	movs	r2, #1
 80085f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d11b      	bne.n	8008636 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	6818      	ldr	r0, [r3, #0]
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	6819      	ldr	r1, [r3, #0]
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	685a      	ldr	r2, [r3, #4]
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	68db      	ldr	r3, [r3, #12]
 800860e:	f001 f82d 	bl	800966c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	699a      	ldr	r2, [r3, #24]
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f022 020c 	bic.w	r2, r2, #12
 8008620:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	6999      	ldr	r1, [r3, #24]
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	689a      	ldr	r2, [r3, #8]
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	430a      	orrs	r2, r1
 8008632:	619a      	str	r2, [r3, #24]
 8008634:	e060      	b.n	80086f8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2b04      	cmp	r3, #4
 800863a:	d11c      	bne.n	8008676 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	6818      	ldr	r0, [r3, #0]
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	6819      	ldr	r1, [r3, #0]
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	685a      	ldr	r2, [r3, #4]
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	68db      	ldr	r3, [r3, #12]
 800864c:	f001 f8ab 	bl	80097a6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	699a      	ldr	r2, [r3, #24]
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800865e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	6999      	ldr	r1, [r3, #24]
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	689b      	ldr	r3, [r3, #8]
 800866a:	021a      	lsls	r2, r3, #8
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	430a      	orrs	r2, r1
 8008672:	619a      	str	r2, [r3, #24]
 8008674:	e040      	b.n	80086f8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2b08      	cmp	r3, #8
 800867a:	d11b      	bne.n	80086b4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	6818      	ldr	r0, [r3, #0]
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	6819      	ldr	r1, [r3, #0]
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	685a      	ldr	r2, [r3, #4]
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	68db      	ldr	r3, [r3, #12]
 800868c:	f001 f8f8 	bl	8009880 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	69da      	ldr	r2, [r3, #28]
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f022 020c 	bic.w	r2, r2, #12
 800869e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	69d9      	ldr	r1, [r3, #28]
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	689a      	ldr	r2, [r3, #8]
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	430a      	orrs	r2, r1
 80086b0:	61da      	str	r2, [r3, #28]
 80086b2:	e021      	b.n	80086f8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2b0c      	cmp	r3, #12
 80086b8:	d11c      	bne.n	80086f4 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	6818      	ldr	r0, [r3, #0]
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	6819      	ldr	r1, [r3, #0]
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	685a      	ldr	r2, [r3, #4]
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	68db      	ldr	r3, [r3, #12]
 80086ca:	f001 f915 	bl	80098f8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	69da      	ldr	r2, [r3, #28]
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80086dc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	69d9      	ldr	r1, [r3, #28]
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	689b      	ldr	r3, [r3, #8]
 80086e8:	021a      	lsls	r2, r3, #8
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	430a      	orrs	r2, r1
 80086f0:	61da      	str	r2, [r3, #28]
 80086f2:	e001      	b.n	80086f8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80086f4:	2301      	movs	r3, #1
 80086f6:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2200      	movs	r2, #0
 80086fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008700:	7dfb      	ldrb	r3, [r7, #23]
}
 8008702:	4618      	mov	r0, r3
 8008704:	3718      	adds	r7, #24
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}
	...

0800870c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b086      	sub	sp, #24
 8008710:	af00      	add	r7, sp, #0
 8008712:	60f8      	str	r0, [r7, #12]
 8008714:	60b9      	str	r1, [r7, #8]
 8008716:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008718:	2300      	movs	r3, #0
 800871a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008722:	2b01      	cmp	r3, #1
 8008724:	d101      	bne.n	800872a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008726:	2302      	movs	r3, #2
 8008728:	e0ff      	b.n	800892a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	2201      	movs	r2, #1
 800872e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2b14      	cmp	r3, #20
 8008736:	f200 80f0 	bhi.w	800891a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800873a:	a201      	add	r2, pc, #4	; (adr r2, 8008740 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800873c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008740:	08008795 	.word	0x08008795
 8008744:	0800891b 	.word	0x0800891b
 8008748:	0800891b 	.word	0x0800891b
 800874c:	0800891b 	.word	0x0800891b
 8008750:	080087d5 	.word	0x080087d5
 8008754:	0800891b 	.word	0x0800891b
 8008758:	0800891b 	.word	0x0800891b
 800875c:	0800891b 	.word	0x0800891b
 8008760:	08008817 	.word	0x08008817
 8008764:	0800891b 	.word	0x0800891b
 8008768:	0800891b 	.word	0x0800891b
 800876c:	0800891b 	.word	0x0800891b
 8008770:	08008857 	.word	0x08008857
 8008774:	0800891b 	.word	0x0800891b
 8008778:	0800891b 	.word	0x0800891b
 800877c:	0800891b 	.word	0x0800891b
 8008780:	08008899 	.word	0x08008899
 8008784:	0800891b 	.word	0x0800891b
 8008788:	0800891b 	.word	0x0800891b
 800878c:	0800891b 	.word	0x0800891b
 8008790:	080088d9 	.word	0x080088d9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	68b9      	ldr	r1, [r7, #8]
 800879a:	4618      	mov	r0, r3
 800879c:	f000 fbfc 	bl	8008f98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	699a      	ldr	r2, [r3, #24]
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f042 0208 	orr.w	r2, r2, #8
 80087ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	699a      	ldr	r2, [r3, #24]
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f022 0204 	bic.w	r2, r2, #4
 80087be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	6999      	ldr	r1, [r3, #24]
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	691a      	ldr	r2, [r3, #16]
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	430a      	orrs	r2, r1
 80087d0:	619a      	str	r2, [r3, #24]
      break;
 80087d2:	e0a5      	b.n	8008920 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	68b9      	ldr	r1, [r7, #8]
 80087da:	4618      	mov	r0, r3
 80087dc:	f000 fc6c 	bl	80090b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	699a      	ldr	r2, [r3, #24]
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80087ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	699a      	ldr	r2, [r3, #24]
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80087fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	6999      	ldr	r1, [r3, #24]
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	691b      	ldr	r3, [r3, #16]
 800880a:	021a      	lsls	r2, r3, #8
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	430a      	orrs	r2, r1
 8008812:	619a      	str	r2, [r3, #24]
      break;
 8008814:	e084      	b.n	8008920 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	68b9      	ldr	r1, [r7, #8]
 800881c:	4618      	mov	r0, r3
 800881e:	f000 fcd5 	bl	80091cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	69da      	ldr	r2, [r3, #28]
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f042 0208 	orr.w	r2, r2, #8
 8008830:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	69da      	ldr	r2, [r3, #28]
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f022 0204 	bic.w	r2, r2, #4
 8008840:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	69d9      	ldr	r1, [r3, #28]
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	691a      	ldr	r2, [r3, #16]
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	430a      	orrs	r2, r1
 8008852:	61da      	str	r2, [r3, #28]
      break;
 8008854:	e064      	b.n	8008920 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	68b9      	ldr	r1, [r7, #8]
 800885c:	4618      	mov	r0, r3
 800885e:	f000 fd3d 	bl	80092dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	69da      	ldr	r2, [r3, #28]
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008870:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	69da      	ldr	r2, [r3, #28]
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008880:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	69d9      	ldr	r1, [r3, #28]
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	691b      	ldr	r3, [r3, #16]
 800888c:	021a      	lsls	r2, r3, #8
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	430a      	orrs	r2, r1
 8008894:	61da      	str	r2, [r3, #28]
      break;
 8008896:	e043      	b.n	8008920 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	68b9      	ldr	r1, [r7, #8]
 800889e:	4618      	mov	r0, r3
 80088a0:	f000 fd86 	bl	80093b0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f042 0208 	orr.w	r2, r2, #8
 80088b2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f022 0204 	bic.w	r2, r2, #4
 80088c2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	691a      	ldr	r2, [r3, #16]
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	430a      	orrs	r2, r1
 80088d4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80088d6:	e023      	b.n	8008920 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	68b9      	ldr	r1, [r7, #8]
 80088de:	4618      	mov	r0, r3
 80088e0:	f000 fdca 	bl	8009478 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80088f2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008902:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	691b      	ldr	r3, [r3, #16]
 800890e:	021a      	lsls	r2, r3, #8
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	430a      	orrs	r2, r1
 8008916:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008918:	e002      	b.n	8008920 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800891a:	2301      	movs	r3, #1
 800891c:	75fb      	strb	r3, [r7, #23]
      break;
 800891e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	2200      	movs	r2, #0
 8008924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008928:	7dfb      	ldrb	r3, [r7, #23]
}
 800892a:	4618      	mov	r0, r3
 800892c:	3718      	adds	r7, #24
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}
 8008932:	bf00      	nop

08008934 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b084      	sub	sp, #16
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
 800893c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800893e:	2300      	movs	r3, #0
 8008940:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008948:	2b01      	cmp	r3, #1
 800894a:	d101      	bne.n	8008950 <HAL_TIM_ConfigClockSource+0x1c>
 800894c:	2302      	movs	r3, #2
 800894e:	e0b6      	b.n	8008abe <HAL_TIM_ConfigClockSource+0x18a>
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2201      	movs	r2, #1
 8008954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2202      	movs	r2, #2
 800895c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	689b      	ldr	r3, [r3, #8]
 8008966:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800896e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008972:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800897a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	68ba      	ldr	r2, [r7, #8]
 8008982:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800898c:	d03e      	beq.n	8008a0c <HAL_TIM_ConfigClockSource+0xd8>
 800898e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008992:	f200 8087 	bhi.w	8008aa4 <HAL_TIM_ConfigClockSource+0x170>
 8008996:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800899a:	f000 8086 	beq.w	8008aaa <HAL_TIM_ConfigClockSource+0x176>
 800899e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089a2:	d87f      	bhi.n	8008aa4 <HAL_TIM_ConfigClockSource+0x170>
 80089a4:	2b70      	cmp	r3, #112	; 0x70
 80089a6:	d01a      	beq.n	80089de <HAL_TIM_ConfigClockSource+0xaa>
 80089a8:	2b70      	cmp	r3, #112	; 0x70
 80089aa:	d87b      	bhi.n	8008aa4 <HAL_TIM_ConfigClockSource+0x170>
 80089ac:	2b60      	cmp	r3, #96	; 0x60
 80089ae:	d050      	beq.n	8008a52 <HAL_TIM_ConfigClockSource+0x11e>
 80089b0:	2b60      	cmp	r3, #96	; 0x60
 80089b2:	d877      	bhi.n	8008aa4 <HAL_TIM_ConfigClockSource+0x170>
 80089b4:	2b50      	cmp	r3, #80	; 0x50
 80089b6:	d03c      	beq.n	8008a32 <HAL_TIM_ConfigClockSource+0xfe>
 80089b8:	2b50      	cmp	r3, #80	; 0x50
 80089ba:	d873      	bhi.n	8008aa4 <HAL_TIM_ConfigClockSource+0x170>
 80089bc:	2b40      	cmp	r3, #64	; 0x40
 80089be:	d058      	beq.n	8008a72 <HAL_TIM_ConfigClockSource+0x13e>
 80089c0:	2b40      	cmp	r3, #64	; 0x40
 80089c2:	d86f      	bhi.n	8008aa4 <HAL_TIM_ConfigClockSource+0x170>
 80089c4:	2b30      	cmp	r3, #48	; 0x30
 80089c6:	d064      	beq.n	8008a92 <HAL_TIM_ConfigClockSource+0x15e>
 80089c8:	2b30      	cmp	r3, #48	; 0x30
 80089ca:	d86b      	bhi.n	8008aa4 <HAL_TIM_ConfigClockSource+0x170>
 80089cc:	2b20      	cmp	r3, #32
 80089ce:	d060      	beq.n	8008a92 <HAL_TIM_ConfigClockSource+0x15e>
 80089d0:	2b20      	cmp	r3, #32
 80089d2:	d867      	bhi.n	8008aa4 <HAL_TIM_ConfigClockSource+0x170>
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d05c      	beq.n	8008a92 <HAL_TIM_ConfigClockSource+0x15e>
 80089d8:	2b10      	cmp	r3, #16
 80089da:	d05a      	beq.n	8008a92 <HAL_TIM_ConfigClockSource+0x15e>
 80089dc:	e062      	b.n	8008aa4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6818      	ldr	r0, [r3, #0]
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	6899      	ldr	r1, [r3, #8]
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	685a      	ldr	r2, [r3, #4]
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	68db      	ldr	r3, [r3, #12]
 80089ee:	f000 ffdb 	bl	80099a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	689b      	ldr	r3, [r3, #8]
 80089f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008a00:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	68ba      	ldr	r2, [r7, #8]
 8008a08:	609a      	str	r2, [r3, #8]
      break;
 8008a0a:	e04f      	b.n	8008aac <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6818      	ldr	r0, [r3, #0]
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	6899      	ldr	r1, [r3, #8]
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	685a      	ldr	r2, [r3, #4]
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	68db      	ldr	r3, [r3, #12]
 8008a1c:	f000 ffc4 	bl	80099a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	689a      	ldr	r2, [r3, #8]
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008a2e:	609a      	str	r2, [r3, #8]
      break;
 8008a30:	e03c      	b.n	8008aac <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6818      	ldr	r0, [r3, #0]
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	6859      	ldr	r1, [r3, #4]
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	68db      	ldr	r3, [r3, #12]
 8008a3e:	461a      	mov	r2, r3
 8008a40:	f000 fe82 	bl	8009748 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	2150      	movs	r1, #80	; 0x50
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f000 ff91 	bl	8009972 <TIM_ITRx_SetConfig>
      break;
 8008a50:	e02c      	b.n	8008aac <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6818      	ldr	r0, [r3, #0]
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	6859      	ldr	r1, [r3, #4]
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	68db      	ldr	r3, [r3, #12]
 8008a5e:	461a      	mov	r2, r3
 8008a60:	f000 fede 	bl	8009820 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	2160      	movs	r1, #96	; 0x60
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f000 ff81 	bl	8009972 <TIM_ITRx_SetConfig>
      break;
 8008a70:	e01c      	b.n	8008aac <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6818      	ldr	r0, [r3, #0]
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	6859      	ldr	r1, [r3, #4]
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	68db      	ldr	r3, [r3, #12]
 8008a7e:	461a      	mov	r2, r3
 8008a80:	f000 fe62 	bl	8009748 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	2140      	movs	r1, #64	; 0x40
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f000 ff71 	bl	8009972 <TIM_ITRx_SetConfig>
      break;
 8008a90:	e00c      	b.n	8008aac <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681a      	ldr	r2, [r3, #0]
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	4619      	mov	r1, r3
 8008a9c:	4610      	mov	r0, r2
 8008a9e:	f000 ff68 	bl	8009972 <TIM_ITRx_SetConfig>
      break;
 8008aa2:	e003      	b.n	8008aac <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	73fb      	strb	r3, [r7, #15]
      break;
 8008aa8:	e000      	b.n	8008aac <HAL_TIM_ConfigClockSource+0x178>
      break;
 8008aaa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2201      	movs	r2, #1
 8008ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3710      	adds	r7, #16
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}

08008ac6 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008ac6:	b580      	push	{r7, lr}
 8008ac8:	b082      	sub	sp, #8
 8008aca:	af00      	add	r7, sp, #0
 8008acc:	6078      	str	r0, [r7, #4]
 8008ace:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ad6:	2b01      	cmp	r3, #1
 8008ad8:	d101      	bne.n	8008ade <HAL_TIM_SlaveConfigSynchro+0x18>
 8008ada:	2302      	movs	r3, #2
 8008adc:	e031      	b.n	8008b42 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2201      	movs	r2, #1
 8008ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2202      	movs	r2, #2
 8008aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8008aee:	6839      	ldr	r1, [r7, #0]
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f000 fd27 	bl	8009544 <TIM_SlaveTimer_SetConfig>
 8008af6:	4603      	mov	r3, r0
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d009      	beq.n	8008b10 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2201      	movs	r2, #1
 8008b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2200      	movs	r2, #0
 8008b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	e018      	b.n	8008b42 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	68da      	ldr	r2, [r3, #12]
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b1e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	68da      	ldr	r2, [r3, #12]
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008b2e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2201      	movs	r2, #1
 8008b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008b40:	2300      	movs	r3, #0
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3708      	adds	r7, #8
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}
	...

08008b4c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b085      	sub	sp, #20
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
 8008b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8008b56:	2300      	movs	r3, #0
 8008b58:	60fb      	str	r3, [r7, #12]
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	2b0c      	cmp	r3, #12
 8008b5e:	d831      	bhi.n	8008bc4 <HAL_TIM_ReadCapturedValue+0x78>
 8008b60:	a201      	add	r2, pc, #4	; (adr r2, 8008b68 <HAL_TIM_ReadCapturedValue+0x1c>)
 8008b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b66:	bf00      	nop
 8008b68:	08008b9d 	.word	0x08008b9d
 8008b6c:	08008bc5 	.word	0x08008bc5
 8008b70:	08008bc5 	.word	0x08008bc5
 8008b74:	08008bc5 	.word	0x08008bc5
 8008b78:	08008ba7 	.word	0x08008ba7
 8008b7c:	08008bc5 	.word	0x08008bc5
 8008b80:	08008bc5 	.word	0x08008bc5
 8008b84:	08008bc5 	.word	0x08008bc5
 8008b88:	08008bb1 	.word	0x08008bb1
 8008b8c:	08008bc5 	.word	0x08008bc5
 8008b90:	08008bc5 	.word	0x08008bc5
 8008b94:	08008bc5 	.word	0x08008bc5
 8008b98:	08008bbb 	.word	0x08008bbb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ba2:	60fb      	str	r3, [r7, #12]

      break;
 8008ba4:	e00f      	b.n	8008bc6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bac:	60fb      	str	r3, [r7, #12]

      break;
 8008bae:	e00a      	b.n	8008bc6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bb6:	60fb      	str	r3, [r7, #12]

      break;
 8008bb8:	e005      	b.n	8008bc6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bc0:	60fb      	str	r3, [r7, #12]

      break;
 8008bc2:	e000      	b.n	8008bc6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8008bc4:	bf00      	nop
  }

  return tmpreg;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3714      	adds	r7, #20
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd2:	4770      	bx	lr

08008bd4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b083      	sub	sp, #12
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008bdc:	bf00      	nop
 8008bde:	370c      	adds	r7, #12
 8008be0:	46bd      	mov	sp, r7
 8008be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be6:	4770      	bx	lr

08008be8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008be8:	b480      	push	{r7}
 8008bea:	b083      	sub	sp, #12
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008bf0:	bf00      	nop
 8008bf2:	370c      	adds	r7, #12
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfa:	4770      	bx	lr

08008bfc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b083      	sub	sp, #12
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008c04:	bf00      	nop
 8008c06:	370c      	adds	r7, #12
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0e:	4770      	bx	lr

08008c10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b083      	sub	sp, #12
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008c18:	bf00      	nop
 8008c1a:	370c      	adds	r7, #12
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c22:	4770      	bx	lr

08008c24 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008c24:	b480      	push	{r7}
 8008c26:	b083      	sub	sp, #12
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008c2c:	bf00      	nop
 8008c2e:	370c      	adds	r7, #12
 8008c30:	46bd      	mov	sp, r7
 8008c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c36:	4770      	bx	lr

08008c38 <HAL_TIM_GetActiveChannel>:
  * @brief  Return the TIM Encoder Mode handle state.
  * @param  htim TIM handle
  * @retval Active channel
  */
HAL_TIM_ActiveChannel HAL_TIM_GetActiveChannel(TIM_HandleTypeDef *htim)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b083      	sub	sp, #12
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  return htim->Channel;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	7f1b      	ldrb	r3, [r3, #28]
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	370c      	adds	r7, #12
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4e:	4770      	bx	lr

08008c50 <HAL_TIM_GetChannelState>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5
  *            @arg TIM_CHANNEL_6: TIM Channel 6
  * @retval TIM Channel state
  */
HAL_TIM_ChannelStateTypeDef HAL_TIM_GetChannelState(TIM_HandleTypeDef *htim,  uint32_t Channel)
{
 8008c50:	b480      	push	{r7}
 8008c52:	b085      	sub	sp, #20
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
 8008c58:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_state;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d104      	bne.n	8008c6a <HAL_TIM_GetChannelState+0x1a>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008c66:	b2db      	uxtb	r3, r3
 8008c68:	e023      	b.n	8008cb2 <HAL_TIM_GetChannelState+0x62>
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	2b04      	cmp	r3, #4
 8008c6e:	d104      	bne.n	8008c7a <HAL_TIM_GetChannelState+0x2a>
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008c76:	b2db      	uxtb	r3, r3
 8008c78:	e01b      	b.n	8008cb2 <HAL_TIM_GetChannelState+0x62>
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	2b08      	cmp	r3, #8
 8008c7e:	d104      	bne.n	8008c8a <HAL_TIM_GetChannelState+0x3a>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008c86:	b2db      	uxtb	r3, r3
 8008c88:	e013      	b.n	8008cb2 <HAL_TIM_GetChannelState+0x62>
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	2b0c      	cmp	r3, #12
 8008c8e:	d104      	bne.n	8008c9a <HAL_TIM_GetChannelState+0x4a>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c96:	b2db      	uxtb	r3, r3
 8008c98:	e00b      	b.n	8008cb2 <HAL_TIM_GetChannelState+0x62>
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	2b10      	cmp	r3, #16
 8008c9e:	d104      	bne.n	8008caa <HAL_TIM_GetChannelState+0x5a>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008ca6:	b2db      	uxtb	r3, r3
 8008ca8:	e003      	b.n	8008cb2 <HAL_TIM_GetChannelState+0x62>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008cb0:	b2db      	uxtb	r3, r3
 8008cb2:	73fb      	strb	r3, [r7, #15]

  return channel_state;
 8008cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3714      	adds	r7, #20
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc0:	4770      	bx	lr

08008cc2 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8008cc2:	b580      	push	{r7, lr}
 8008cc4:	b084      	sub	sp, #16
 8008cc6:	af00      	add	r7, sp, #0
 8008cc8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cce:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd4:	687a      	ldr	r2, [r7, #4]
 8008cd6:	429a      	cmp	r2, r3
 8008cd8:	d107      	bne.n	8008cea <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	2201      	movs	r2, #1
 8008cde:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008ce8:	e02a      	b.n	8008d40 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cee:	687a      	ldr	r2, [r7, #4]
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d107      	bne.n	8008d04 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	2202      	movs	r2, #2
 8008cf8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	2201      	movs	r2, #1
 8008cfe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008d02:	e01d      	b.n	8008d40 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d08:	687a      	ldr	r2, [r7, #4]
 8008d0a:	429a      	cmp	r2, r3
 8008d0c:	d107      	bne.n	8008d1e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	2204      	movs	r2, #4
 8008d12:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	2201      	movs	r2, #1
 8008d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008d1c:	e010      	b.n	8008d40 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d22:	687a      	ldr	r2, [r7, #4]
 8008d24:	429a      	cmp	r2, r3
 8008d26:	d107      	bne.n	8008d38 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	2208      	movs	r2, #8
 8008d2c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	2201      	movs	r2, #1
 8008d32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008d36:	e003      	b.n	8008d40 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	2201      	movs	r2, #1
 8008d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8008d40:	68f8      	ldr	r0, [r7, #12]
 8008d42:	f7ff ff6f 	bl	8008c24 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	771a      	strb	r2, [r3, #28]
}
 8008d4c:	bf00      	nop
 8008d4e:	3710      	adds	r7, #16
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}

08008d54 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b084      	sub	sp, #16
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d60:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d66:	687a      	ldr	r2, [r7, #4]
 8008d68:	429a      	cmp	r2, r3
 8008d6a:	d10b      	bne.n	8008d84 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	2201      	movs	r2, #1
 8008d70:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	69db      	ldr	r3, [r3, #28]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d136      	bne.n	8008de8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	2201      	movs	r2, #1
 8008d7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008d82:	e031      	b.n	8008de8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d88:	687a      	ldr	r2, [r7, #4]
 8008d8a:	429a      	cmp	r2, r3
 8008d8c:	d10b      	bne.n	8008da6 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	2202      	movs	r2, #2
 8008d92:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	69db      	ldr	r3, [r3, #28]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d125      	bne.n	8008de8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	2201      	movs	r2, #1
 8008da0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008da4:	e020      	b.n	8008de8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008daa:	687a      	ldr	r2, [r7, #4]
 8008dac:	429a      	cmp	r2, r3
 8008dae:	d10b      	bne.n	8008dc8 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	2204      	movs	r2, #4
 8008db4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	69db      	ldr	r3, [r3, #28]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d114      	bne.n	8008de8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	2201      	movs	r2, #1
 8008dc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008dc6:	e00f      	b.n	8008de8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dcc:	687a      	ldr	r2, [r7, #4]
 8008dce:	429a      	cmp	r2, r3
 8008dd0:	d10a      	bne.n	8008de8 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	2208      	movs	r2, #8
 8008dd6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	69db      	ldr	r3, [r3, #28]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d103      	bne.n	8008de8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	2201      	movs	r2, #1
 8008de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008de8:	68f8      	ldr	r0, [r7, #12]
 8008dea:	f7ff fefd 	bl	8008be8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2200      	movs	r2, #0
 8008df2:	771a      	strb	r2, [r3, #28]
}
 8008df4:	bf00      	nop
 8008df6:	3710      	adds	r7, #16
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bd80      	pop	{r7, pc}

08008dfc <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b084      	sub	sp, #16
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e08:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e0e:	687a      	ldr	r2, [r7, #4]
 8008e10:	429a      	cmp	r2, r3
 8008e12:	d103      	bne.n	8008e1c <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	2201      	movs	r2, #1
 8008e18:	771a      	strb	r2, [r3, #28]
 8008e1a:	e019      	b.n	8008e50 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e20:	687a      	ldr	r2, [r7, #4]
 8008e22:	429a      	cmp	r2, r3
 8008e24:	d103      	bne.n	8008e2e <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	2202      	movs	r2, #2
 8008e2a:	771a      	strb	r2, [r3, #28]
 8008e2c:	e010      	b.n	8008e50 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e32:	687a      	ldr	r2, [r7, #4]
 8008e34:	429a      	cmp	r2, r3
 8008e36:	d103      	bne.n	8008e40 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	2204      	movs	r2, #4
 8008e3c:	771a      	strb	r2, [r3, #28]
 8008e3e:	e007      	b.n	8008e50 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e44:	687a      	ldr	r2, [r7, #4]
 8008e46:	429a      	cmp	r2, r3
 8008e48:	d102      	bne.n	8008e50 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	2208      	movs	r2, #8
 8008e4e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8008e50:	68f8      	ldr	r0, [r7, #12]
 8008e52:	f7ff fed3 	bl	8008bfc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	2200      	movs	r2, #0
 8008e5a:	771a      	strb	r2, [r3, #28]
}
 8008e5c:	bf00      	nop
 8008e5e:	3710      	adds	r7, #16
 8008e60:	46bd      	mov	sp, r7
 8008e62:	bd80      	pop	{r7, pc}

08008e64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008e64:	b480      	push	{r7}
 8008e66:	b085      	sub	sp, #20
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
 8008e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	4a40      	ldr	r2, [pc, #256]	; (8008f78 <TIM_Base_SetConfig+0x114>)
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d013      	beq.n	8008ea4 <TIM_Base_SetConfig+0x40>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e82:	d00f      	beq.n	8008ea4 <TIM_Base_SetConfig+0x40>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	4a3d      	ldr	r2, [pc, #244]	; (8008f7c <TIM_Base_SetConfig+0x118>)
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d00b      	beq.n	8008ea4 <TIM_Base_SetConfig+0x40>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	4a3c      	ldr	r2, [pc, #240]	; (8008f80 <TIM_Base_SetConfig+0x11c>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d007      	beq.n	8008ea4 <TIM_Base_SetConfig+0x40>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	4a3b      	ldr	r2, [pc, #236]	; (8008f84 <TIM_Base_SetConfig+0x120>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d003      	beq.n	8008ea4 <TIM_Base_SetConfig+0x40>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	4a3a      	ldr	r2, [pc, #232]	; (8008f88 <TIM_Base_SetConfig+0x124>)
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d108      	bne.n	8008eb6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008eaa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	685b      	ldr	r3, [r3, #4]
 8008eb0:	68fa      	ldr	r2, [r7, #12]
 8008eb2:	4313      	orrs	r3, r2
 8008eb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	4a2f      	ldr	r2, [pc, #188]	; (8008f78 <TIM_Base_SetConfig+0x114>)
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d01f      	beq.n	8008efe <TIM_Base_SetConfig+0x9a>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ec4:	d01b      	beq.n	8008efe <TIM_Base_SetConfig+0x9a>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	4a2c      	ldr	r2, [pc, #176]	; (8008f7c <TIM_Base_SetConfig+0x118>)
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d017      	beq.n	8008efe <TIM_Base_SetConfig+0x9a>
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	4a2b      	ldr	r2, [pc, #172]	; (8008f80 <TIM_Base_SetConfig+0x11c>)
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d013      	beq.n	8008efe <TIM_Base_SetConfig+0x9a>
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	4a2a      	ldr	r2, [pc, #168]	; (8008f84 <TIM_Base_SetConfig+0x120>)
 8008eda:	4293      	cmp	r3, r2
 8008edc:	d00f      	beq.n	8008efe <TIM_Base_SetConfig+0x9a>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	4a29      	ldr	r2, [pc, #164]	; (8008f88 <TIM_Base_SetConfig+0x124>)
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d00b      	beq.n	8008efe <TIM_Base_SetConfig+0x9a>
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	4a28      	ldr	r2, [pc, #160]	; (8008f8c <TIM_Base_SetConfig+0x128>)
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d007      	beq.n	8008efe <TIM_Base_SetConfig+0x9a>
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	4a27      	ldr	r2, [pc, #156]	; (8008f90 <TIM_Base_SetConfig+0x12c>)
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	d003      	beq.n	8008efe <TIM_Base_SetConfig+0x9a>
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	4a26      	ldr	r2, [pc, #152]	; (8008f94 <TIM_Base_SetConfig+0x130>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d108      	bne.n	8008f10 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	68db      	ldr	r3, [r3, #12]
 8008f0a:	68fa      	ldr	r2, [r7, #12]
 8008f0c:	4313      	orrs	r3, r2
 8008f0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	695b      	ldr	r3, [r3, #20]
 8008f1a:	4313      	orrs	r3, r2
 8008f1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	68fa      	ldr	r2, [r7, #12]
 8008f22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	689a      	ldr	r2, [r3, #8]
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	681a      	ldr	r2, [r3, #0]
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	4a10      	ldr	r2, [pc, #64]	; (8008f78 <TIM_Base_SetConfig+0x114>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d00f      	beq.n	8008f5c <TIM_Base_SetConfig+0xf8>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	4a12      	ldr	r2, [pc, #72]	; (8008f88 <TIM_Base_SetConfig+0x124>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d00b      	beq.n	8008f5c <TIM_Base_SetConfig+0xf8>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	4a11      	ldr	r2, [pc, #68]	; (8008f8c <TIM_Base_SetConfig+0x128>)
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d007      	beq.n	8008f5c <TIM_Base_SetConfig+0xf8>
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	4a10      	ldr	r2, [pc, #64]	; (8008f90 <TIM_Base_SetConfig+0x12c>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d003      	beq.n	8008f5c <TIM_Base_SetConfig+0xf8>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	4a0f      	ldr	r2, [pc, #60]	; (8008f94 <TIM_Base_SetConfig+0x130>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d103      	bne.n	8008f64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	691a      	ldr	r2, [r3, #16]
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2201      	movs	r2, #1
 8008f68:	615a      	str	r2, [r3, #20]
}
 8008f6a:	bf00      	nop
 8008f6c:	3714      	adds	r7, #20
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f74:	4770      	bx	lr
 8008f76:	bf00      	nop
 8008f78:	40012c00 	.word	0x40012c00
 8008f7c:	40000400 	.word	0x40000400
 8008f80:	40000800 	.word	0x40000800
 8008f84:	40000c00 	.word	0x40000c00
 8008f88:	40013400 	.word	0x40013400
 8008f8c:	40014000 	.word	0x40014000
 8008f90:	40014400 	.word	0x40014400
 8008f94:	40014800 	.word	0x40014800

08008f98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b087      	sub	sp, #28
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
 8008fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6a1b      	ldr	r3, [r3, #32]
 8008fa6:	f023 0201 	bic.w	r2, r3, #1
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6a1b      	ldr	r3, [r3, #32]
 8008fb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	685b      	ldr	r3, [r3, #4]
 8008fb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	699b      	ldr	r3, [r3, #24]
 8008fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	f023 0303 	bic.w	r3, r3, #3
 8008fd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	68fa      	ldr	r2, [r7, #12]
 8008fda:	4313      	orrs	r3, r2
 8008fdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	f023 0302 	bic.w	r3, r3, #2
 8008fe4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	689b      	ldr	r3, [r3, #8]
 8008fea:	697a      	ldr	r2, [r7, #20]
 8008fec:	4313      	orrs	r3, r2
 8008fee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	4a2c      	ldr	r2, [pc, #176]	; (80090a4 <TIM_OC1_SetConfig+0x10c>)
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d00f      	beq.n	8009018 <TIM_OC1_SetConfig+0x80>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	4a2b      	ldr	r2, [pc, #172]	; (80090a8 <TIM_OC1_SetConfig+0x110>)
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	d00b      	beq.n	8009018 <TIM_OC1_SetConfig+0x80>
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	4a2a      	ldr	r2, [pc, #168]	; (80090ac <TIM_OC1_SetConfig+0x114>)
 8009004:	4293      	cmp	r3, r2
 8009006:	d007      	beq.n	8009018 <TIM_OC1_SetConfig+0x80>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	4a29      	ldr	r2, [pc, #164]	; (80090b0 <TIM_OC1_SetConfig+0x118>)
 800900c:	4293      	cmp	r3, r2
 800900e:	d003      	beq.n	8009018 <TIM_OC1_SetConfig+0x80>
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	4a28      	ldr	r2, [pc, #160]	; (80090b4 <TIM_OC1_SetConfig+0x11c>)
 8009014:	4293      	cmp	r3, r2
 8009016:	d10c      	bne.n	8009032 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	f023 0308 	bic.w	r3, r3, #8
 800901e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	68db      	ldr	r3, [r3, #12]
 8009024:	697a      	ldr	r2, [r7, #20]
 8009026:	4313      	orrs	r3, r2
 8009028:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	f023 0304 	bic.w	r3, r3, #4
 8009030:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	4a1b      	ldr	r2, [pc, #108]	; (80090a4 <TIM_OC1_SetConfig+0x10c>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d00f      	beq.n	800905a <TIM_OC1_SetConfig+0xc2>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	4a1a      	ldr	r2, [pc, #104]	; (80090a8 <TIM_OC1_SetConfig+0x110>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d00b      	beq.n	800905a <TIM_OC1_SetConfig+0xc2>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	4a19      	ldr	r2, [pc, #100]	; (80090ac <TIM_OC1_SetConfig+0x114>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d007      	beq.n	800905a <TIM_OC1_SetConfig+0xc2>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	4a18      	ldr	r2, [pc, #96]	; (80090b0 <TIM_OC1_SetConfig+0x118>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d003      	beq.n	800905a <TIM_OC1_SetConfig+0xc2>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	4a17      	ldr	r2, [pc, #92]	; (80090b4 <TIM_OC1_SetConfig+0x11c>)
 8009056:	4293      	cmp	r3, r2
 8009058:	d111      	bne.n	800907e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800905a:	693b      	ldr	r3, [r7, #16]
 800905c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009060:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009068:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	695b      	ldr	r3, [r3, #20]
 800906e:	693a      	ldr	r2, [r7, #16]
 8009070:	4313      	orrs	r3, r2
 8009072:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	699b      	ldr	r3, [r3, #24]
 8009078:	693a      	ldr	r2, [r7, #16]
 800907a:	4313      	orrs	r3, r2
 800907c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	693a      	ldr	r2, [r7, #16]
 8009082:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	68fa      	ldr	r2, [r7, #12]
 8009088:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	685a      	ldr	r2, [r3, #4]
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	697a      	ldr	r2, [r7, #20]
 8009096:	621a      	str	r2, [r3, #32]
}
 8009098:	bf00      	nop
 800909a:	371c      	adds	r7, #28
 800909c:	46bd      	mov	sp, r7
 800909e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a2:	4770      	bx	lr
 80090a4:	40012c00 	.word	0x40012c00
 80090a8:	40013400 	.word	0x40013400
 80090ac:	40014000 	.word	0x40014000
 80090b0:	40014400 	.word	0x40014400
 80090b4:	40014800 	.word	0x40014800

080090b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80090b8:	b480      	push	{r7}
 80090ba:	b087      	sub	sp, #28
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
 80090c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6a1b      	ldr	r3, [r3, #32]
 80090c6:	f023 0210 	bic.w	r2, r3, #16
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6a1b      	ldr	r3, [r3, #32]
 80090d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	685b      	ldr	r3, [r3, #4]
 80090d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	699b      	ldr	r3, [r3, #24]
 80090de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80090e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80090f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	021b      	lsls	r3, r3, #8
 80090fa:	68fa      	ldr	r2, [r7, #12]
 80090fc:	4313      	orrs	r3, r2
 80090fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	f023 0320 	bic.w	r3, r3, #32
 8009106:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	689b      	ldr	r3, [r3, #8]
 800910c:	011b      	lsls	r3, r3, #4
 800910e:	697a      	ldr	r2, [r7, #20]
 8009110:	4313      	orrs	r3, r2
 8009112:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	4a28      	ldr	r2, [pc, #160]	; (80091b8 <TIM_OC2_SetConfig+0x100>)
 8009118:	4293      	cmp	r3, r2
 800911a:	d003      	beq.n	8009124 <TIM_OC2_SetConfig+0x6c>
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	4a27      	ldr	r2, [pc, #156]	; (80091bc <TIM_OC2_SetConfig+0x104>)
 8009120:	4293      	cmp	r3, r2
 8009122:	d10d      	bne.n	8009140 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009124:	697b      	ldr	r3, [r7, #20]
 8009126:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800912a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	68db      	ldr	r3, [r3, #12]
 8009130:	011b      	lsls	r3, r3, #4
 8009132:	697a      	ldr	r2, [r7, #20]
 8009134:	4313      	orrs	r3, r2
 8009136:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009138:	697b      	ldr	r3, [r7, #20]
 800913a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800913e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	4a1d      	ldr	r2, [pc, #116]	; (80091b8 <TIM_OC2_SetConfig+0x100>)
 8009144:	4293      	cmp	r3, r2
 8009146:	d00f      	beq.n	8009168 <TIM_OC2_SetConfig+0xb0>
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	4a1c      	ldr	r2, [pc, #112]	; (80091bc <TIM_OC2_SetConfig+0x104>)
 800914c:	4293      	cmp	r3, r2
 800914e:	d00b      	beq.n	8009168 <TIM_OC2_SetConfig+0xb0>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	4a1b      	ldr	r2, [pc, #108]	; (80091c0 <TIM_OC2_SetConfig+0x108>)
 8009154:	4293      	cmp	r3, r2
 8009156:	d007      	beq.n	8009168 <TIM_OC2_SetConfig+0xb0>
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	4a1a      	ldr	r2, [pc, #104]	; (80091c4 <TIM_OC2_SetConfig+0x10c>)
 800915c:	4293      	cmp	r3, r2
 800915e:	d003      	beq.n	8009168 <TIM_OC2_SetConfig+0xb0>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	4a19      	ldr	r2, [pc, #100]	; (80091c8 <TIM_OC2_SetConfig+0x110>)
 8009164:	4293      	cmp	r3, r2
 8009166:	d113      	bne.n	8009190 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009168:	693b      	ldr	r3, [r7, #16]
 800916a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800916e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009170:	693b      	ldr	r3, [r7, #16]
 8009172:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009176:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	695b      	ldr	r3, [r3, #20]
 800917c:	009b      	lsls	r3, r3, #2
 800917e:	693a      	ldr	r2, [r7, #16]
 8009180:	4313      	orrs	r3, r2
 8009182:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	699b      	ldr	r3, [r3, #24]
 8009188:	009b      	lsls	r3, r3, #2
 800918a:	693a      	ldr	r2, [r7, #16]
 800918c:	4313      	orrs	r3, r2
 800918e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	693a      	ldr	r2, [r7, #16]
 8009194:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	68fa      	ldr	r2, [r7, #12]
 800919a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	685a      	ldr	r2, [r3, #4]
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	697a      	ldr	r2, [r7, #20]
 80091a8:	621a      	str	r2, [r3, #32]
}
 80091aa:	bf00      	nop
 80091ac:	371c      	adds	r7, #28
 80091ae:	46bd      	mov	sp, r7
 80091b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b4:	4770      	bx	lr
 80091b6:	bf00      	nop
 80091b8:	40012c00 	.word	0x40012c00
 80091bc:	40013400 	.word	0x40013400
 80091c0:	40014000 	.word	0x40014000
 80091c4:	40014400 	.word	0x40014400
 80091c8:	40014800 	.word	0x40014800

080091cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80091cc:	b480      	push	{r7}
 80091ce:	b087      	sub	sp, #28
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
 80091d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6a1b      	ldr	r3, [r3, #32]
 80091da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6a1b      	ldr	r3, [r3, #32]
 80091e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	685b      	ldr	r3, [r3, #4]
 80091ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	69db      	ldr	r3, [r3, #28]
 80091f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80091fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	f023 0303 	bic.w	r3, r3, #3
 8009206:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	68fa      	ldr	r2, [r7, #12]
 800920e:	4313      	orrs	r3, r2
 8009210:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009218:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	689b      	ldr	r3, [r3, #8]
 800921e:	021b      	lsls	r3, r3, #8
 8009220:	697a      	ldr	r2, [r7, #20]
 8009222:	4313      	orrs	r3, r2
 8009224:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	4a27      	ldr	r2, [pc, #156]	; (80092c8 <TIM_OC3_SetConfig+0xfc>)
 800922a:	4293      	cmp	r3, r2
 800922c:	d003      	beq.n	8009236 <TIM_OC3_SetConfig+0x6a>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	4a26      	ldr	r2, [pc, #152]	; (80092cc <TIM_OC3_SetConfig+0x100>)
 8009232:	4293      	cmp	r3, r2
 8009234:	d10d      	bne.n	8009252 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009236:	697b      	ldr	r3, [r7, #20]
 8009238:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800923c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	68db      	ldr	r3, [r3, #12]
 8009242:	021b      	lsls	r3, r3, #8
 8009244:	697a      	ldr	r2, [r7, #20]
 8009246:	4313      	orrs	r3, r2
 8009248:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800924a:	697b      	ldr	r3, [r7, #20]
 800924c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009250:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	4a1c      	ldr	r2, [pc, #112]	; (80092c8 <TIM_OC3_SetConfig+0xfc>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d00f      	beq.n	800927a <TIM_OC3_SetConfig+0xae>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	4a1b      	ldr	r2, [pc, #108]	; (80092cc <TIM_OC3_SetConfig+0x100>)
 800925e:	4293      	cmp	r3, r2
 8009260:	d00b      	beq.n	800927a <TIM_OC3_SetConfig+0xae>
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	4a1a      	ldr	r2, [pc, #104]	; (80092d0 <TIM_OC3_SetConfig+0x104>)
 8009266:	4293      	cmp	r3, r2
 8009268:	d007      	beq.n	800927a <TIM_OC3_SetConfig+0xae>
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	4a19      	ldr	r2, [pc, #100]	; (80092d4 <TIM_OC3_SetConfig+0x108>)
 800926e:	4293      	cmp	r3, r2
 8009270:	d003      	beq.n	800927a <TIM_OC3_SetConfig+0xae>
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	4a18      	ldr	r2, [pc, #96]	; (80092d8 <TIM_OC3_SetConfig+0x10c>)
 8009276:	4293      	cmp	r3, r2
 8009278:	d113      	bne.n	80092a2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800927a:	693b      	ldr	r3, [r7, #16]
 800927c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009280:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009282:	693b      	ldr	r3, [r7, #16]
 8009284:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009288:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	695b      	ldr	r3, [r3, #20]
 800928e:	011b      	lsls	r3, r3, #4
 8009290:	693a      	ldr	r2, [r7, #16]
 8009292:	4313      	orrs	r3, r2
 8009294:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	699b      	ldr	r3, [r3, #24]
 800929a:	011b      	lsls	r3, r3, #4
 800929c:	693a      	ldr	r2, [r7, #16]
 800929e:	4313      	orrs	r3, r2
 80092a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	693a      	ldr	r2, [r7, #16]
 80092a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	68fa      	ldr	r2, [r7, #12]
 80092ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	685a      	ldr	r2, [r3, #4]
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	697a      	ldr	r2, [r7, #20]
 80092ba:	621a      	str	r2, [r3, #32]
}
 80092bc:	bf00      	nop
 80092be:	371c      	adds	r7, #28
 80092c0:	46bd      	mov	sp, r7
 80092c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c6:	4770      	bx	lr
 80092c8:	40012c00 	.word	0x40012c00
 80092cc:	40013400 	.word	0x40013400
 80092d0:	40014000 	.word	0x40014000
 80092d4:	40014400 	.word	0x40014400
 80092d8:	40014800 	.word	0x40014800

080092dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80092dc:	b480      	push	{r7}
 80092de:	b087      	sub	sp, #28
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
 80092e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6a1b      	ldr	r3, [r3, #32]
 80092ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6a1b      	ldr	r3, [r3, #32]
 80092f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	685b      	ldr	r3, [r3, #4]
 80092fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	69db      	ldr	r3, [r3, #28]
 8009302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800930a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800930e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009316:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	021b      	lsls	r3, r3, #8
 800931e:	68fa      	ldr	r2, [r7, #12]
 8009320:	4313      	orrs	r3, r2
 8009322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800932a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	689b      	ldr	r3, [r3, #8]
 8009330:	031b      	lsls	r3, r3, #12
 8009332:	693a      	ldr	r2, [r7, #16]
 8009334:	4313      	orrs	r3, r2
 8009336:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	4a18      	ldr	r2, [pc, #96]	; (800939c <TIM_OC4_SetConfig+0xc0>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d00f      	beq.n	8009360 <TIM_OC4_SetConfig+0x84>
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	4a17      	ldr	r2, [pc, #92]	; (80093a0 <TIM_OC4_SetConfig+0xc4>)
 8009344:	4293      	cmp	r3, r2
 8009346:	d00b      	beq.n	8009360 <TIM_OC4_SetConfig+0x84>
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	4a16      	ldr	r2, [pc, #88]	; (80093a4 <TIM_OC4_SetConfig+0xc8>)
 800934c:	4293      	cmp	r3, r2
 800934e:	d007      	beq.n	8009360 <TIM_OC4_SetConfig+0x84>
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	4a15      	ldr	r2, [pc, #84]	; (80093a8 <TIM_OC4_SetConfig+0xcc>)
 8009354:	4293      	cmp	r3, r2
 8009356:	d003      	beq.n	8009360 <TIM_OC4_SetConfig+0x84>
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	4a14      	ldr	r2, [pc, #80]	; (80093ac <TIM_OC4_SetConfig+0xd0>)
 800935c:	4293      	cmp	r3, r2
 800935e:	d109      	bne.n	8009374 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009360:	697b      	ldr	r3, [r7, #20]
 8009362:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009366:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	695b      	ldr	r3, [r3, #20]
 800936c:	019b      	lsls	r3, r3, #6
 800936e:	697a      	ldr	r2, [r7, #20]
 8009370:	4313      	orrs	r3, r2
 8009372:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	697a      	ldr	r2, [r7, #20]
 8009378:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	68fa      	ldr	r2, [r7, #12]
 800937e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	685a      	ldr	r2, [r3, #4]
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	693a      	ldr	r2, [r7, #16]
 800938c:	621a      	str	r2, [r3, #32]
}
 800938e:	bf00      	nop
 8009390:	371c      	adds	r7, #28
 8009392:	46bd      	mov	sp, r7
 8009394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009398:	4770      	bx	lr
 800939a:	bf00      	nop
 800939c:	40012c00 	.word	0x40012c00
 80093a0:	40013400 	.word	0x40013400
 80093a4:	40014000 	.word	0x40014000
 80093a8:	40014400 	.word	0x40014400
 80093ac:	40014800 	.word	0x40014800

080093b0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80093b0:	b480      	push	{r7}
 80093b2:	b087      	sub	sp, #28
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
 80093b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6a1b      	ldr	r3, [r3, #32]
 80093be:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	6a1b      	ldr	r3, [r3, #32]
 80093ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	685b      	ldr	r3, [r3, #4]
 80093d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80093de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	68fa      	ldr	r2, [r7, #12]
 80093ea:	4313      	orrs	r3, r2
 80093ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80093ee:	693b      	ldr	r3, [r7, #16]
 80093f0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80093f4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	689b      	ldr	r3, [r3, #8]
 80093fa:	041b      	lsls	r3, r3, #16
 80093fc:	693a      	ldr	r2, [r7, #16]
 80093fe:	4313      	orrs	r3, r2
 8009400:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	4a17      	ldr	r2, [pc, #92]	; (8009464 <TIM_OC5_SetConfig+0xb4>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d00f      	beq.n	800942a <TIM_OC5_SetConfig+0x7a>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	4a16      	ldr	r2, [pc, #88]	; (8009468 <TIM_OC5_SetConfig+0xb8>)
 800940e:	4293      	cmp	r3, r2
 8009410:	d00b      	beq.n	800942a <TIM_OC5_SetConfig+0x7a>
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	4a15      	ldr	r2, [pc, #84]	; (800946c <TIM_OC5_SetConfig+0xbc>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d007      	beq.n	800942a <TIM_OC5_SetConfig+0x7a>
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	4a14      	ldr	r2, [pc, #80]	; (8009470 <TIM_OC5_SetConfig+0xc0>)
 800941e:	4293      	cmp	r3, r2
 8009420:	d003      	beq.n	800942a <TIM_OC5_SetConfig+0x7a>
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	4a13      	ldr	r2, [pc, #76]	; (8009474 <TIM_OC5_SetConfig+0xc4>)
 8009426:	4293      	cmp	r3, r2
 8009428:	d109      	bne.n	800943e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800942a:	697b      	ldr	r3, [r7, #20]
 800942c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009430:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	695b      	ldr	r3, [r3, #20]
 8009436:	021b      	lsls	r3, r3, #8
 8009438:	697a      	ldr	r2, [r7, #20]
 800943a:	4313      	orrs	r3, r2
 800943c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	697a      	ldr	r2, [r7, #20]
 8009442:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	68fa      	ldr	r2, [r7, #12]
 8009448:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	685a      	ldr	r2, [r3, #4]
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	693a      	ldr	r2, [r7, #16]
 8009456:	621a      	str	r2, [r3, #32]
}
 8009458:	bf00      	nop
 800945a:	371c      	adds	r7, #28
 800945c:	46bd      	mov	sp, r7
 800945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009462:	4770      	bx	lr
 8009464:	40012c00 	.word	0x40012c00
 8009468:	40013400 	.word	0x40013400
 800946c:	40014000 	.word	0x40014000
 8009470:	40014400 	.word	0x40014400
 8009474:	40014800 	.word	0x40014800

08009478 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009478:	b480      	push	{r7}
 800947a:	b087      	sub	sp, #28
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
 8009480:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6a1b      	ldr	r3, [r3, #32]
 8009486:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6a1b      	ldr	r3, [r3, #32]
 8009492:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	685b      	ldr	r3, [r3, #4]
 8009498:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800949e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80094a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	021b      	lsls	r3, r3, #8
 80094b2:	68fa      	ldr	r2, [r7, #12]
 80094b4:	4313      	orrs	r3, r2
 80094b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80094b8:	693b      	ldr	r3, [r7, #16]
 80094ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80094be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	689b      	ldr	r3, [r3, #8]
 80094c4:	051b      	lsls	r3, r3, #20
 80094c6:	693a      	ldr	r2, [r7, #16]
 80094c8:	4313      	orrs	r3, r2
 80094ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	4a18      	ldr	r2, [pc, #96]	; (8009530 <TIM_OC6_SetConfig+0xb8>)
 80094d0:	4293      	cmp	r3, r2
 80094d2:	d00f      	beq.n	80094f4 <TIM_OC6_SetConfig+0x7c>
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	4a17      	ldr	r2, [pc, #92]	; (8009534 <TIM_OC6_SetConfig+0xbc>)
 80094d8:	4293      	cmp	r3, r2
 80094da:	d00b      	beq.n	80094f4 <TIM_OC6_SetConfig+0x7c>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	4a16      	ldr	r2, [pc, #88]	; (8009538 <TIM_OC6_SetConfig+0xc0>)
 80094e0:	4293      	cmp	r3, r2
 80094e2:	d007      	beq.n	80094f4 <TIM_OC6_SetConfig+0x7c>
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	4a15      	ldr	r2, [pc, #84]	; (800953c <TIM_OC6_SetConfig+0xc4>)
 80094e8:	4293      	cmp	r3, r2
 80094ea:	d003      	beq.n	80094f4 <TIM_OC6_SetConfig+0x7c>
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	4a14      	ldr	r2, [pc, #80]	; (8009540 <TIM_OC6_SetConfig+0xc8>)
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d109      	bne.n	8009508 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80094f4:	697b      	ldr	r3, [r7, #20]
 80094f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80094fa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	695b      	ldr	r3, [r3, #20]
 8009500:	029b      	lsls	r3, r3, #10
 8009502:	697a      	ldr	r2, [r7, #20]
 8009504:	4313      	orrs	r3, r2
 8009506:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	697a      	ldr	r2, [r7, #20]
 800950c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	68fa      	ldr	r2, [r7, #12]
 8009512:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	685a      	ldr	r2, [r3, #4]
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	693a      	ldr	r2, [r7, #16]
 8009520:	621a      	str	r2, [r3, #32]
}
 8009522:	bf00      	nop
 8009524:	371c      	adds	r7, #28
 8009526:	46bd      	mov	sp, r7
 8009528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952c:	4770      	bx	lr
 800952e:	bf00      	nop
 8009530:	40012c00 	.word	0x40012c00
 8009534:	40013400 	.word	0x40013400
 8009538:	40014000 	.word	0x40014000
 800953c:	40014400 	.word	0x40014400
 8009540:	40014800 	.word	0x40014800

08009544 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b086      	sub	sp, #24
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
 800954c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800954e:	2300      	movs	r3, #0
 8009550:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	689b      	ldr	r3, [r3, #8]
 8009558:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009560:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	685b      	ldr	r3, [r3, #4]
 8009566:	693a      	ldr	r2, [r7, #16]
 8009568:	4313      	orrs	r3, r2
 800956a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800956c:	693b      	ldr	r3, [r7, #16]
 800956e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009572:	f023 0307 	bic.w	r3, r3, #7
 8009576:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	693a      	ldr	r2, [r7, #16]
 800957e:	4313      	orrs	r3, r2
 8009580:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	693a      	ldr	r2, [r7, #16]
 8009588:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	685b      	ldr	r3, [r3, #4]
 800958e:	2b70      	cmp	r3, #112	; 0x70
 8009590:	d01a      	beq.n	80095c8 <TIM_SlaveTimer_SetConfig+0x84>
 8009592:	2b70      	cmp	r3, #112	; 0x70
 8009594:	d860      	bhi.n	8009658 <TIM_SlaveTimer_SetConfig+0x114>
 8009596:	2b60      	cmp	r3, #96	; 0x60
 8009598:	d054      	beq.n	8009644 <TIM_SlaveTimer_SetConfig+0x100>
 800959a:	2b60      	cmp	r3, #96	; 0x60
 800959c:	d85c      	bhi.n	8009658 <TIM_SlaveTimer_SetConfig+0x114>
 800959e:	2b50      	cmp	r3, #80	; 0x50
 80095a0:	d046      	beq.n	8009630 <TIM_SlaveTimer_SetConfig+0xec>
 80095a2:	2b50      	cmp	r3, #80	; 0x50
 80095a4:	d858      	bhi.n	8009658 <TIM_SlaveTimer_SetConfig+0x114>
 80095a6:	2b40      	cmp	r3, #64	; 0x40
 80095a8:	d019      	beq.n	80095de <TIM_SlaveTimer_SetConfig+0x9a>
 80095aa:	2b40      	cmp	r3, #64	; 0x40
 80095ac:	d854      	bhi.n	8009658 <TIM_SlaveTimer_SetConfig+0x114>
 80095ae:	2b30      	cmp	r3, #48	; 0x30
 80095b0:	d055      	beq.n	800965e <TIM_SlaveTimer_SetConfig+0x11a>
 80095b2:	2b30      	cmp	r3, #48	; 0x30
 80095b4:	d850      	bhi.n	8009658 <TIM_SlaveTimer_SetConfig+0x114>
 80095b6:	2b20      	cmp	r3, #32
 80095b8:	d051      	beq.n	800965e <TIM_SlaveTimer_SetConfig+0x11a>
 80095ba:	2b20      	cmp	r3, #32
 80095bc:	d84c      	bhi.n	8009658 <TIM_SlaveTimer_SetConfig+0x114>
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d04d      	beq.n	800965e <TIM_SlaveTimer_SetConfig+0x11a>
 80095c2:	2b10      	cmp	r3, #16
 80095c4:	d04b      	beq.n	800965e <TIM_SlaveTimer_SetConfig+0x11a>
 80095c6:	e047      	b.n	8009658 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6818      	ldr	r0, [r3, #0]
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	68d9      	ldr	r1, [r3, #12]
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	689a      	ldr	r2, [r3, #8]
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	691b      	ldr	r3, [r3, #16]
 80095d8:	f000 f9e6 	bl	80099a8 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 80095dc:	e040      	b.n	8009660 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	2b05      	cmp	r3, #5
 80095e4:	d101      	bne.n	80095ea <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 80095e6:	2301      	movs	r3, #1
 80095e8:	e03b      	b.n	8009662 <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	6a1b      	ldr	r3, [r3, #32]
 80095f0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	6a1a      	ldr	r2, [r3, #32]
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f022 0201 	bic.w	r2, r2, #1
 8009600:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	699b      	ldr	r3, [r3, #24]
 8009608:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800960a:	68bb      	ldr	r3, [r7, #8]
 800960c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009610:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	691b      	ldr	r3, [r3, #16]
 8009616:	011b      	lsls	r3, r3, #4
 8009618:	68ba      	ldr	r2, [r7, #8]
 800961a:	4313      	orrs	r3, r2
 800961c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	68ba      	ldr	r2, [r7, #8]
 8009624:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	68fa      	ldr	r2, [r7, #12]
 800962c:	621a      	str	r2, [r3, #32]
      break;
 800962e:	e017      	b.n	8009660 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6818      	ldr	r0, [r3, #0]
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	6899      	ldr	r1, [r3, #8]
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	691b      	ldr	r3, [r3, #16]
 800963c:	461a      	mov	r2, r3
 800963e:	f000 f883 	bl	8009748 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8009642:	e00d      	b.n	8009660 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6818      	ldr	r0, [r3, #0]
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	6899      	ldr	r1, [r3, #8]
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	691b      	ldr	r3, [r3, #16]
 8009650:	461a      	mov	r2, r3
 8009652:	f000 f8e5 	bl	8009820 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8009656:	e003      	b.n	8009660 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8009658:	2301      	movs	r3, #1
 800965a:	75fb      	strb	r3, [r7, #23]
      break;
 800965c:	e000      	b.n	8009660 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 800965e:	bf00      	nop
  }

  return status;
 8009660:	7dfb      	ldrb	r3, [r7, #23]
}
 8009662:	4618      	mov	r0, r3
 8009664:	3718      	adds	r7, #24
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}
	...

0800966c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800966c:	b480      	push	{r7}
 800966e:	b087      	sub	sp, #28
 8009670:	af00      	add	r7, sp, #0
 8009672:	60f8      	str	r0, [r7, #12]
 8009674:	60b9      	str	r1, [r7, #8]
 8009676:	607a      	str	r2, [r7, #4]
 8009678:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	6a1b      	ldr	r3, [r3, #32]
 800967e:	f023 0201 	bic.w	r2, r3, #1
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	699b      	ldr	r3, [r3, #24]
 800968a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	6a1b      	ldr	r3, [r3, #32]
 8009690:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	4a26      	ldr	r2, [pc, #152]	; (8009730 <TIM_TI1_SetConfig+0xc4>)
 8009696:	4293      	cmp	r3, r2
 8009698:	d017      	beq.n	80096ca <TIM_TI1_SetConfig+0x5e>
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096a0:	d013      	beq.n	80096ca <TIM_TI1_SetConfig+0x5e>
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	4a23      	ldr	r2, [pc, #140]	; (8009734 <TIM_TI1_SetConfig+0xc8>)
 80096a6:	4293      	cmp	r3, r2
 80096a8:	d00f      	beq.n	80096ca <TIM_TI1_SetConfig+0x5e>
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	4a22      	ldr	r2, [pc, #136]	; (8009738 <TIM_TI1_SetConfig+0xcc>)
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d00b      	beq.n	80096ca <TIM_TI1_SetConfig+0x5e>
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	4a21      	ldr	r2, [pc, #132]	; (800973c <TIM_TI1_SetConfig+0xd0>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d007      	beq.n	80096ca <TIM_TI1_SetConfig+0x5e>
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	4a20      	ldr	r2, [pc, #128]	; (8009740 <TIM_TI1_SetConfig+0xd4>)
 80096be:	4293      	cmp	r3, r2
 80096c0:	d003      	beq.n	80096ca <TIM_TI1_SetConfig+0x5e>
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	4a1f      	ldr	r2, [pc, #124]	; (8009744 <TIM_TI1_SetConfig+0xd8>)
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d101      	bne.n	80096ce <TIM_TI1_SetConfig+0x62>
 80096ca:	2301      	movs	r3, #1
 80096cc:	e000      	b.n	80096d0 <TIM_TI1_SetConfig+0x64>
 80096ce:	2300      	movs	r3, #0
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d008      	beq.n	80096e6 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	f023 0303 	bic.w	r3, r3, #3
 80096da:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80096dc:	697a      	ldr	r2, [r7, #20]
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	4313      	orrs	r3, r2
 80096e2:	617b      	str	r3, [r7, #20]
 80096e4:	e003      	b.n	80096ee <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80096e6:	697b      	ldr	r3, [r7, #20]
 80096e8:	f043 0301 	orr.w	r3, r3, #1
 80096ec:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80096ee:	697b      	ldr	r3, [r7, #20]
 80096f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80096f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	011b      	lsls	r3, r3, #4
 80096fa:	b2db      	uxtb	r3, r3
 80096fc:	697a      	ldr	r2, [r7, #20]
 80096fe:	4313      	orrs	r3, r2
 8009700:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009702:	693b      	ldr	r3, [r7, #16]
 8009704:	f023 030a 	bic.w	r3, r3, #10
 8009708:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	f003 030a 	and.w	r3, r3, #10
 8009710:	693a      	ldr	r2, [r7, #16]
 8009712:	4313      	orrs	r3, r2
 8009714:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	697a      	ldr	r2, [r7, #20]
 800971a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	693a      	ldr	r2, [r7, #16]
 8009720:	621a      	str	r2, [r3, #32]
}
 8009722:	bf00      	nop
 8009724:	371c      	adds	r7, #28
 8009726:	46bd      	mov	sp, r7
 8009728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972c:	4770      	bx	lr
 800972e:	bf00      	nop
 8009730:	40012c00 	.word	0x40012c00
 8009734:	40000400 	.word	0x40000400
 8009738:	40000800 	.word	0x40000800
 800973c:	40000c00 	.word	0x40000c00
 8009740:	40013400 	.word	0x40013400
 8009744:	40014000 	.word	0x40014000

08009748 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009748:	b480      	push	{r7}
 800974a:	b087      	sub	sp, #28
 800974c:	af00      	add	r7, sp, #0
 800974e:	60f8      	str	r0, [r7, #12]
 8009750:	60b9      	str	r1, [r7, #8]
 8009752:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	6a1b      	ldr	r3, [r3, #32]
 8009758:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	6a1b      	ldr	r3, [r3, #32]
 800975e:	f023 0201 	bic.w	r2, r3, #1
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	699b      	ldr	r3, [r3, #24]
 800976a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800976c:	693b      	ldr	r3, [r7, #16]
 800976e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009772:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	011b      	lsls	r3, r3, #4
 8009778:	693a      	ldr	r2, [r7, #16]
 800977a:	4313      	orrs	r3, r2
 800977c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800977e:	697b      	ldr	r3, [r7, #20]
 8009780:	f023 030a 	bic.w	r3, r3, #10
 8009784:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009786:	697a      	ldr	r2, [r7, #20]
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	4313      	orrs	r3, r2
 800978c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	693a      	ldr	r2, [r7, #16]
 8009792:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	697a      	ldr	r2, [r7, #20]
 8009798:	621a      	str	r2, [r3, #32]
}
 800979a:	bf00      	nop
 800979c:	371c      	adds	r7, #28
 800979e:	46bd      	mov	sp, r7
 80097a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a4:	4770      	bx	lr

080097a6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80097a6:	b480      	push	{r7}
 80097a8:	b087      	sub	sp, #28
 80097aa:	af00      	add	r7, sp, #0
 80097ac:	60f8      	str	r0, [r7, #12]
 80097ae:	60b9      	str	r1, [r7, #8]
 80097b0:	607a      	str	r2, [r7, #4]
 80097b2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	6a1b      	ldr	r3, [r3, #32]
 80097b8:	f023 0210 	bic.w	r2, r3, #16
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	699b      	ldr	r3, [r3, #24]
 80097c4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	6a1b      	ldr	r3, [r3, #32]
 80097ca:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80097cc:	697b      	ldr	r3, [r7, #20]
 80097ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80097d2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	021b      	lsls	r3, r3, #8
 80097d8:	697a      	ldr	r2, [r7, #20]
 80097da:	4313      	orrs	r3, r2
 80097dc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80097de:	697b      	ldr	r3, [r7, #20]
 80097e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80097e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	031b      	lsls	r3, r3, #12
 80097ea:	b29b      	uxth	r3, r3
 80097ec:	697a      	ldr	r2, [r7, #20]
 80097ee:	4313      	orrs	r3, r2
 80097f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80097f2:	693b      	ldr	r3, [r7, #16]
 80097f4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80097f8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	011b      	lsls	r3, r3, #4
 80097fe:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009802:	693a      	ldr	r2, [r7, #16]
 8009804:	4313      	orrs	r3, r2
 8009806:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	697a      	ldr	r2, [r7, #20]
 800980c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	693a      	ldr	r2, [r7, #16]
 8009812:	621a      	str	r2, [r3, #32]
}
 8009814:	bf00      	nop
 8009816:	371c      	adds	r7, #28
 8009818:	46bd      	mov	sp, r7
 800981a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981e:	4770      	bx	lr

08009820 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009820:	b480      	push	{r7}
 8009822:	b087      	sub	sp, #28
 8009824:	af00      	add	r7, sp, #0
 8009826:	60f8      	str	r0, [r7, #12]
 8009828:	60b9      	str	r1, [r7, #8]
 800982a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	6a1b      	ldr	r3, [r3, #32]
 8009830:	f023 0210 	bic.w	r2, r3, #16
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	699b      	ldr	r3, [r3, #24]
 800983c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	6a1b      	ldr	r3, [r3, #32]
 8009842:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009844:	697b      	ldr	r3, [r7, #20]
 8009846:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800984a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	031b      	lsls	r3, r3, #12
 8009850:	697a      	ldr	r2, [r7, #20]
 8009852:	4313      	orrs	r3, r2
 8009854:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009856:	693b      	ldr	r3, [r7, #16]
 8009858:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800985c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800985e:	68bb      	ldr	r3, [r7, #8]
 8009860:	011b      	lsls	r3, r3, #4
 8009862:	693a      	ldr	r2, [r7, #16]
 8009864:	4313      	orrs	r3, r2
 8009866:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	697a      	ldr	r2, [r7, #20]
 800986c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	693a      	ldr	r2, [r7, #16]
 8009872:	621a      	str	r2, [r3, #32]
}
 8009874:	bf00      	nop
 8009876:	371c      	adds	r7, #28
 8009878:	46bd      	mov	sp, r7
 800987a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987e:	4770      	bx	lr

08009880 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009880:	b480      	push	{r7}
 8009882:	b087      	sub	sp, #28
 8009884:	af00      	add	r7, sp, #0
 8009886:	60f8      	str	r0, [r7, #12]
 8009888:	60b9      	str	r1, [r7, #8]
 800988a:	607a      	str	r2, [r7, #4]
 800988c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	6a1b      	ldr	r3, [r3, #32]
 8009892:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	69db      	ldr	r3, [r3, #28]
 800989e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	6a1b      	ldr	r3, [r3, #32]
 80098a4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	f023 0303 	bic.w	r3, r3, #3
 80098ac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80098ae:	697a      	ldr	r2, [r7, #20]
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	4313      	orrs	r3, r2
 80098b4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80098b6:	697b      	ldr	r3, [r7, #20]
 80098b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80098bc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	011b      	lsls	r3, r3, #4
 80098c2:	b2db      	uxtb	r3, r3
 80098c4:	697a      	ldr	r2, [r7, #20]
 80098c6:	4313      	orrs	r3, r2
 80098c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80098d0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	021b      	lsls	r3, r3, #8
 80098d6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80098da:	693a      	ldr	r2, [r7, #16]
 80098dc:	4313      	orrs	r3, r2
 80098de:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	697a      	ldr	r2, [r7, #20]
 80098e4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	693a      	ldr	r2, [r7, #16]
 80098ea:	621a      	str	r2, [r3, #32]
}
 80098ec:	bf00      	nop
 80098ee:	371c      	adds	r7, #28
 80098f0:	46bd      	mov	sp, r7
 80098f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f6:	4770      	bx	lr

080098f8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80098f8:	b480      	push	{r7}
 80098fa:	b087      	sub	sp, #28
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	60f8      	str	r0, [r7, #12]
 8009900:	60b9      	str	r1, [r7, #8]
 8009902:	607a      	str	r2, [r7, #4]
 8009904:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	6a1b      	ldr	r3, [r3, #32]
 800990a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	69db      	ldr	r3, [r3, #28]
 8009916:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	6a1b      	ldr	r3, [r3, #32]
 800991c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800991e:	697b      	ldr	r3, [r7, #20]
 8009920:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009924:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	021b      	lsls	r3, r3, #8
 800992a:	697a      	ldr	r2, [r7, #20]
 800992c:	4313      	orrs	r3, r2
 800992e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009930:	697b      	ldr	r3, [r7, #20]
 8009932:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009936:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	031b      	lsls	r3, r3, #12
 800993c:	b29b      	uxth	r3, r3
 800993e:	697a      	ldr	r2, [r7, #20]
 8009940:	4313      	orrs	r3, r2
 8009942:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009944:	693b      	ldr	r3, [r7, #16]
 8009946:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800994a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	031b      	lsls	r3, r3, #12
 8009950:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8009954:	693a      	ldr	r2, [r7, #16]
 8009956:	4313      	orrs	r3, r2
 8009958:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	697a      	ldr	r2, [r7, #20]
 800995e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	693a      	ldr	r2, [r7, #16]
 8009964:	621a      	str	r2, [r3, #32]
}
 8009966:	bf00      	nop
 8009968:	371c      	adds	r7, #28
 800996a:	46bd      	mov	sp, r7
 800996c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009970:	4770      	bx	lr

08009972 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009972:	b480      	push	{r7}
 8009974:	b085      	sub	sp, #20
 8009976:	af00      	add	r7, sp, #0
 8009978:	6078      	str	r0, [r7, #4]
 800997a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	689b      	ldr	r3, [r3, #8]
 8009980:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009988:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800998a:	683a      	ldr	r2, [r7, #0]
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	4313      	orrs	r3, r2
 8009990:	f043 0307 	orr.w	r3, r3, #7
 8009994:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	68fa      	ldr	r2, [r7, #12]
 800999a:	609a      	str	r2, [r3, #8]
}
 800999c:	bf00      	nop
 800999e:	3714      	adds	r7, #20
 80099a0:	46bd      	mov	sp, r7
 80099a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a6:	4770      	bx	lr

080099a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80099a8:	b480      	push	{r7}
 80099aa:	b087      	sub	sp, #28
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	60f8      	str	r0, [r7, #12]
 80099b0:	60b9      	str	r1, [r7, #8]
 80099b2:	607a      	str	r2, [r7, #4]
 80099b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	689b      	ldr	r3, [r3, #8]
 80099ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80099bc:	697b      	ldr	r3, [r7, #20]
 80099be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80099c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	021a      	lsls	r2, r3, #8
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	431a      	orrs	r2, r3
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	4313      	orrs	r3, r2
 80099d0:	697a      	ldr	r2, [r7, #20]
 80099d2:	4313      	orrs	r3, r2
 80099d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	697a      	ldr	r2, [r7, #20]
 80099da:	609a      	str	r2, [r3, #8]
}
 80099dc:	bf00      	nop
 80099de:	371c      	adds	r7, #28
 80099e0:	46bd      	mov	sp, r7
 80099e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e6:	4770      	bx	lr

080099e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80099e8:	b480      	push	{r7}
 80099ea:	b087      	sub	sp, #28
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	60f8      	str	r0, [r7, #12]
 80099f0:	60b9      	str	r1, [r7, #8]
 80099f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	f003 031f 	and.w	r3, r3, #31
 80099fa:	2201      	movs	r2, #1
 80099fc:	fa02 f303 	lsl.w	r3, r2, r3
 8009a00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	6a1a      	ldr	r2, [r3, #32]
 8009a06:	697b      	ldr	r3, [r7, #20]
 8009a08:	43db      	mvns	r3, r3
 8009a0a:	401a      	ands	r2, r3
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	6a1a      	ldr	r2, [r3, #32]
 8009a14:	68bb      	ldr	r3, [r7, #8]
 8009a16:	f003 031f 	and.w	r3, r3, #31
 8009a1a:	6879      	ldr	r1, [r7, #4]
 8009a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8009a20:	431a      	orrs	r2, r3
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	621a      	str	r2, [r3, #32]
}
 8009a26:	bf00      	nop
 8009a28:	371c      	adds	r7, #28
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a30:	4770      	bx	lr
	...

08009a34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009a34:	b480      	push	{r7}
 8009a36:	b085      	sub	sp, #20
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
 8009a3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a44:	2b01      	cmp	r3, #1
 8009a46:	d101      	bne.n	8009a4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009a48:	2302      	movs	r3, #2
 8009a4a:	e068      	b.n	8009b1e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2201      	movs	r2, #1
 8009a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2202      	movs	r2, #2
 8009a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	685b      	ldr	r3, [r3, #4]
 8009a62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	689b      	ldr	r3, [r3, #8]
 8009a6a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	4a2e      	ldr	r2, [pc, #184]	; (8009b2c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009a72:	4293      	cmp	r3, r2
 8009a74:	d004      	beq.n	8009a80 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	4a2d      	ldr	r2, [pc, #180]	; (8009b30 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	d108      	bne.n	8009a92 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009a86:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	685b      	ldr	r3, [r3, #4]
 8009a8c:	68fa      	ldr	r2, [r7, #12]
 8009a8e:	4313      	orrs	r3, r2
 8009a90:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a98:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	68fa      	ldr	r2, [r7, #12]
 8009aa0:	4313      	orrs	r3, r2
 8009aa2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	68fa      	ldr	r2, [r7, #12]
 8009aaa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	4a1e      	ldr	r2, [pc, #120]	; (8009b2c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	d01d      	beq.n	8009af2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009abe:	d018      	beq.n	8009af2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	4a1b      	ldr	r2, [pc, #108]	; (8009b34 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009ac6:	4293      	cmp	r3, r2
 8009ac8:	d013      	beq.n	8009af2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	4a1a      	ldr	r2, [pc, #104]	; (8009b38 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009ad0:	4293      	cmp	r3, r2
 8009ad2:	d00e      	beq.n	8009af2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	4a18      	ldr	r2, [pc, #96]	; (8009b3c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009ada:	4293      	cmp	r3, r2
 8009adc:	d009      	beq.n	8009af2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	4a13      	ldr	r2, [pc, #76]	; (8009b30 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009ae4:	4293      	cmp	r3, r2
 8009ae6:	d004      	beq.n	8009af2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	4a14      	ldr	r2, [pc, #80]	; (8009b40 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009aee:	4293      	cmp	r3, r2
 8009af0:	d10c      	bne.n	8009b0c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009af8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	689b      	ldr	r3, [r3, #8]
 8009afe:	68ba      	ldr	r2, [r7, #8]
 8009b00:	4313      	orrs	r3, r2
 8009b02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	68ba      	ldr	r2, [r7, #8]
 8009b0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2201      	movs	r2, #1
 8009b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2200      	movs	r2, #0
 8009b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009b1c:	2300      	movs	r3, #0
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3714      	adds	r7, #20
 8009b22:	46bd      	mov	sp, r7
 8009b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b28:	4770      	bx	lr
 8009b2a:	bf00      	nop
 8009b2c:	40012c00 	.word	0x40012c00
 8009b30:	40013400 	.word	0x40013400
 8009b34:	40000400 	.word	0x40000400
 8009b38:	40000800 	.word	0x40000800
 8009b3c:	40000c00 	.word	0x40000c00
 8009b40:	40014000 	.word	0x40014000

08009b44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009b44:	b480      	push	{r7}
 8009b46:	b083      	sub	sp, #12
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009b4c:	bf00      	nop
 8009b4e:	370c      	adds	r7, #12
 8009b50:	46bd      	mov	sp, r7
 8009b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b56:	4770      	bx	lr

08009b58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b083      	sub	sp, #12
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009b60:	bf00      	nop
 8009b62:	370c      	adds	r7, #12
 8009b64:	46bd      	mov	sp, r7
 8009b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6a:	4770      	bx	lr

08009b6c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b083      	sub	sp, #12
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009b74:	bf00      	nop
 8009b76:	370c      	adds	r7, #12
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7e:	4770      	bx	lr

08009b80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b082      	sub	sp, #8
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d101      	bne.n	8009b92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009b8e:	2301      	movs	r3, #1
 8009b90:	e040      	b.n	8009c14 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d106      	bne.n	8009ba8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f7f9 fc46 	bl	8003434 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2224      	movs	r2, #36	; 0x24
 8009bac:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	681a      	ldr	r2, [r3, #0]
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	f022 0201 	bic.w	r2, r2, #1
 8009bbc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f000 f8c0 	bl	8009d44 <UART_SetConfig>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	2b01      	cmp	r3, #1
 8009bc8:	d101      	bne.n	8009bce <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009bca:	2301      	movs	r3, #1
 8009bcc:	e022      	b.n	8009c14 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d002      	beq.n	8009bdc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f000 fb3e 	bl	800a258 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	685a      	ldr	r2, [r3, #4]
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009bea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	689a      	ldr	r2, [r3, #8]
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009bfa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	681a      	ldr	r2, [r3, #0]
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	f042 0201 	orr.w	r2, r2, #1
 8009c0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009c0c:	6878      	ldr	r0, [r7, #4]
 8009c0e:	f000 fbc5 	bl	800a39c <UART_CheckIdleState>
 8009c12:	4603      	mov	r3, r0
}
 8009c14:	4618      	mov	r0, r3
 8009c16:	3708      	adds	r7, #8
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}

08009c1c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b08a      	sub	sp, #40	; 0x28
 8009c20:	af02      	add	r7, sp, #8
 8009c22:	60f8      	str	r0, [r7, #12]
 8009c24:	60b9      	str	r1, [r7, #8]
 8009c26:	603b      	str	r3, [r7, #0]
 8009c28:	4613      	mov	r3, r2
 8009c2a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c30:	2b20      	cmp	r3, #32
 8009c32:	f040 8082 	bne.w	8009d3a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d002      	beq.n	8009c42 <HAL_UART_Transmit+0x26>
 8009c3c:	88fb      	ldrh	r3, [r7, #6]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d101      	bne.n	8009c46 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009c42:	2301      	movs	r3, #1
 8009c44:	e07a      	b.n	8009d3c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009c4c:	2b01      	cmp	r3, #1
 8009c4e:	d101      	bne.n	8009c54 <HAL_UART_Transmit+0x38>
 8009c50:	2302      	movs	r3, #2
 8009c52:	e073      	b.n	8009d3c <HAL_UART_Transmit+0x120>
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	2201      	movs	r2, #1
 8009c58:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	2200      	movs	r2, #0
 8009c60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	2221      	movs	r2, #33	; 0x21
 8009c68:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009c6a:	f7f9 fe0b 	bl	8003884 <HAL_GetTick>
 8009c6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	88fa      	ldrh	r2, [r7, #6]
 8009c74:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	88fa      	ldrh	r2, [r7, #6]
 8009c7c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	689b      	ldr	r3, [r3, #8]
 8009c84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c88:	d108      	bne.n	8009c9c <HAL_UART_Transmit+0x80>
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	691b      	ldr	r3, [r3, #16]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d104      	bne.n	8009c9c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8009c92:	2300      	movs	r3, #0
 8009c94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009c96:	68bb      	ldr	r3, [r7, #8]
 8009c98:	61bb      	str	r3, [r7, #24]
 8009c9a:	e003      	b.n	8009ca4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8009cac:	e02d      	b.n	8009d0a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	9300      	str	r3, [sp, #0]
 8009cb2:	697b      	ldr	r3, [r7, #20]
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	2180      	movs	r1, #128	; 0x80
 8009cb8:	68f8      	ldr	r0, [r7, #12]
 8009cba:	f000 fbb8 	bl	800a42e <UART_WaitOnFlagUntilTimeout>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d001      	beq.n	8009cc8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8009cc4:	2303      	movs	r3, #3
 8009cc6:	e039      	b.n	8009d3c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8009cc8:	69fb      	ldr	r3, [r7, #28]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d10b      	bne.n	8009ce6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009cce:	69bb      	ldr	r3, [r7, #24]
 8009cd0:	881a      	ldrh	r2, [r3, #0]
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009cda:	b292      	uxth	r2, r2
 8009cdc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009cde:	69bb      	ldr	r3, [r7, #24]
 8009ce0:	3302      	adds	r3, #2
 8009ce2:	61bb      	str	r3, [r7, #24]
 8009ce4:	e008      	b.n	8009cf8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009ce6:	69fb      	ldr	r3, [r7, #28]
 8009ce8:	781a      	ldrb	r2, [r3, #0]
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	b292      	uxth	r2, r2
 8009cf0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009cf2:	69fb      	ldr	r3, [r7, #28]
 8009cf4:	3301      	adds	r3, #1
 8009cf6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009cfe:	b29b      	uxth	r3, r3
 8009d00:	3b01      	subs	r3, #1
 8009d02:	b29a      	uxth	r2, r3
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009d10:	b29b      	uxth	r3, r3
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d1cb      	bne.n	8009cae <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	9300      	str	r3, [sp, #0]
 8009d1a:	697b      	ldr	r3, [r7, #20]
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	2140      	movs	r1, #64	; 0x40
 8009d20:	68f8      	ldr	r0, [r7, #12]
 8009d22:	f000 fb84 	bl	800a42e <UART_WaitOnFlagUntilTimeout>
 8009d26:	4603      	mov	r3, r0
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d001      	beq.n	8009d30 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8009d2c:	2303      	movs	r3, #3
 8009d2e:	e005      	b.n	8009d3c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	2220      	movs	r2, #32
 8009d34:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8009d36:	2300      	movs	r3, #0
 8009d38:	e000      	b.n	8009d3c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8009d3a:	2302      	movs	r3, #2
  }
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	3720      	adds	r7, #32
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd80      	pop	{r7, pc}

08009d44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009d44:	b5b0      	push	{r4, r5, r7, lr}
 8009d46:	b088      	sub	sp, #32
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	689a      	ldr	r2, [r3, #8]
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	691b      	ldr	r3, [r3, #16]
 8009d58:	431a      	orrs	r2, r3
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	695b      	ldr	r3, [r3, #20]
 8009d5e:	431a      	orrs	r2, r3
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	69db      	ldr	r3, [r3, #28]
 8009d64:	4313      	orrs	r3, r2
 8009d66:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	681a      	ldr	r2, [r3, #0]
 8009d6e:	4bad      	ldr	r3, [pc, #692]	; (800a024 <UART_SetConfig+0x2e0>)
 8009d70:	4013      	ands	r3, r2
 8009d72:	687a      	ldr	r2, [r7, #4]
 8009d74:	6812      	ldr	r2, [r2, #0]
 8009d76:	69f9      	ldr	r1, [r7, #28]
 8009d78:	430b      	orrs	r3, r1
 8009d7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	685b      	ldr	r3, [r3, #4]
 8009d82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	68da      	ldr	r2, [r3, #12]
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	430a      	orrs	r2, r1
 8009d90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	699b      	ldr	r3, [r3, #24]
 8009d96:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	4aa2      	ldr	r2, [pc, #648]	; (800a028 <UART_SetConfig+0x2e4>)
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	d004      	beq.n	8009dac <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6a1b      	ldr	r3, [r3, #32]
 8009da6:	69fa      	ldr	r2, [r7, #28]
 8009da8:	4313      	orrs	r3, r2
 8009daa:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	689b      	ldr	r3, [r3, #8]
 8009db2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	69fa      	ldr	r2, [r7, #28]
 8009dbc:	430a      	orrs	r2, r1
 8009dbe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	4a99      	ldr	r2, [pc, #612]	; (800a02c <UART_SetConfig+0x2e8>)
 8009dc6:	4293      	cmp	r3, r2
 8009dc8:	d121      	bne.n	8009e0e <UART_SetConfig+0xca>
 8009dca:	4b99      	ldr	r3, [pc, #612]	; (800a030 <UART_SetConfig+0x2ec>)
 8009dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dd0:	f003 0303 	and.w	r3, r3, #3
 8009dd4:	2b03      	cmp	r3, #3
 8009dd6:	d817      	bhi.n	8009e08 <UART_SetConfig+0xc4>
 8009dd8:	a201      	add	r2, pc, #4	; (adr r2, 8009de0 <UART_SetConfig+0x9c>)
 8009dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dde:	bf00      	nop
 8009de0:	08009df1 	.word	0x08009df1
 8009de4:	08009dfd 	.word	0x08009dfd
 8009de8:	08009df7 	.word	0x08009df7
 8009dec:	08009e03 	.word	0x08009e03
 8009df0:	2301      	movs	r3, #1
 8009df2:	76fb      	strb	r3, [r7, #27]
 8009df4:	e0e7      	b.n	8009fc6 <UART_SetConfig+0x282>
 8009df6:	2302      	movs	r3, #2
 8009df8:	76fb      	strb	r3, [r7, #27]
 8009dfa:	e0e4      	b.n	8009fc6 <UART_SetConfig+0x282>
 8009dfc:	2304      	movs	r3, #4
 8009dfe:	76fb      	strb	r3, [r7, #27]
 8009e00:	e0e1      	b.n	8009fc6 <UART_SetConfig+0x282>
 8009e02:	2308      	movs	r3, #8
 8009e04:	76fb      	strb	r3, [r7, #27]
 8009e06:	e0de      	b.n	8009fc6 <UART_SetConfig+0x282>
 8009e08:	2310      	movs	r3, #16
 8009e0a:	76fb      	strb	r3, [r7, #27]
 8009e0c:	e0db      	b.n	8009fc6 <UART_SetConfig+0x282>
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	4a88      	ldr	r2, [pc, #544]	; (800a034 <UART_SetConfig+0x2f0>)
 8009e14:	4293      	cmp	r3, r2
 8009e16:	d132      	bne.n	8009e7e <UART_SetConfig+0x13a>
 8009e18:	4b85      	ldr	r3, [pc, #532]	; (800a030 <UART_SetConfig+0x2ec>)
 8009e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e1e:	f003 030c 	and.w	r3, r3, #12
 8009e22:	2b0c      	cmp	r3, #12
 8009e24:	d828      	bhi.n	8009e78 <UART_SetConfig+0x134>
 8009e26:	a201      	add	r2, pc, #4	; (adr r2, 8009e2c <UART_SetConfig+0xe8>)
 8009e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e2c:	08009e61 	.word	0x08009e61
 8009e30:	08009e79 	.word	0x08009e79
 8009e34:	08009e79 	.word	0x08009e79
 8009e38:	08009e79 	.word	0x08009e79
 8009e3c:	08009e6d 	.word	0x08009e6d
 8009e40:	08009e79 	.word	0x08009e79
 8009e44:	08009e79 	.word	0x08009e79
 8009e48:	08009e79 	.word	0x08009e79
 8009e4c:	08009e67 	.word	0x08009e67
 8009e50:	08009e79 	.word	0x08009e79
 8009e54:	08009e79 	.word	0x08009e79
 8009e58:	08009e79 	.word	0x08009e79
 8009e5c:	08009e73 	.word	0x08009e73
 8009e60:	2300      	movs	r3, #0
 8009e62:	76fb      	strb	r3, [r7, #27]
 8009e64:	e0af      	b.n	8009fc6 <UART_SetConfig+0x282>
 8009e66:	2302      	movs	r3, #2
 8009e68:	76fb      	strb	r3, [r7, #27]
 8009e6a:	e0ac      	b.n	8009fc6 <UART_SetConfig+0x282>
 8009e6c:	2304      	movs	r3, #4
 8009e6e:	76fb      	strb	r3, [r7, #27]
 8009e70:	e0a9      	b.n	8009fc6 <UART_SetConfig+0x282>
 8009e72:	2308      	movs	r3, #8
 8009e74:	76fb      	strb	r3, [r7, #27]
 8009e76:	e0a6      	b.n	8009fc6 <UART_SetConfig+0x282>
 8009e78:	2310      	movs	r3, #16
 8009e7a:	76fb      	strb	r3, [r7, #27]
 8009e7c:	e0a3      	b.n	8009fc6 <UART_SetConfig+0x282>
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	4a6d      	ldr	r2, [pc, #436]	; (800a038 <UART_SetConfig+0x2f4>)
 8009e84:	4293      	cmp	r3, r2
 8009e86:	d120      	bne.n	8009eca <UART_SetConfig+0x186>
 8009e88:	4b69      	ldr	r3, [pc, #420]	; (800a030 <UART_SetConfig+0x2ec>)
 8009e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e8e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009e92:	2b30      	cmp	r3, #48	; 0x30
 8009e94:	d013      	beq.n	8009ebe <UART_SetConfig+0x17a>
 8009e96:	2b30      	cmp	r3, #48	; 0x30
 8009e98:	d814      	bhi.n	8009ec4 <UART_SetConfig+0x180>
 8009e9a:	2b20      	cmp	r3, #32
 8009e9c:	d009      	beq.n	8009eb2 <UART_SetConfig+0x16e>
 8009e9e:	2b20      	cmp	r3, #32
 8009ea0:	d810      	bhi.n	8009ec4 <UART_SetConfig+0x180>
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d002      	beq.n	8009eac <UART_SetConfig+0x168>
 8009ea6:	2b10      	cmp	r3, #16
 8009ea8:	d006      	beq.n	8009eb8 <UART_SetConfig+0x174>
 8009eaa:	e00b      	b.n	8009ec4 <UART_SetConfig+0x180>
 8009eac:	2300      	movs	r3, #0
 8009eae:	76fb      	strb	r3, [r7, #27]
 8009eb0:	e089      	b.n	8009fc6 <UART_SetConfig+0x282>
 8009eb2:	2302      	movs	r3, #2
 8009eb4:	76fb      	strb	r3, [r7, #27]
 8009eb6:	e086      	b.n	8009fc6 <UART_SetConfig+0x282>
 8009eb8:	2304      	movs	r3, #4
 8009eba:	76fb      	strb	r3, [r7, #27]
 8009ebc:	e083      	b.n	8009fc6 <UART_SetConfig+0x282>
 8009ebe:	2308      	movs	r3, #8
 8009ec0:	76fb      	strb	r3, [r7, #27]
 8009ec2:	e080      	b.n	8009fc6 <UART_SetConfig+0x282>
 8009ec4:	2310      	movs	r3, #16
 8009ec6:	76fb      	strb	r3, [r7, #27]
 8009ec8:	e07d      	b.n	8009fc6 <UART_SetConfig+0x282>
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	4a5b      	ldr	r2, [pc, #364]	; (800a03c <UART_SetConfig+0x2f8>)
 8009ed0:	4293      	cmp	r3, r2
 8009ed2:	d120      	bne.n	8009f16 <UART_SetConfig+0x1d2>
 8009ed4:	4b56      	ldr	r3, [pc, #344]	; (800a030 <UART_SetConfig+0x2ec>)
 8009ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009eda:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009ede:	2bc0      	cmp	r3, #192	; 0xc0
 8009ee0:	d013      	beq.n	8009f0a <UART_SetConfig+0x1c6>
 8009ee2:	2bc0      	cmp	r3, #192	; 0xc0
 8009ee4:	d814      	bhi.n	8009f10 <UART_SetConfig+0x1cc>
 8009ee6:	2b80      	cmp	r3, #128	; 0x80
 8009ee8:	d009      	beq.n	8009efe <UART_SetConfig+0x1ba>
 8009eea:	2b80      	cmp	r3, #128	; 0x80
 8009eec:	d810      	bhi.n	8009f10 <UART_SetConfig+0x1cc>
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d002      	beq.n	8009ef8 <UART_SetConfig+0x1b4>
 8009ef2:	2b40      	cmp	r3, #64	; 0x40
 8009ef4:	d006      	beq.n	8009f04 <UART_SetConfig+0x1c0>
 8009ef6:	e00b      	b.n	8009f10 <UART_SetConfig+0x1cc>
 8009ef8:	2300      	movs	r3, #0
 8009efa:	76fb      	strb	r3, [r7, #27]
 8009efc:	e063      	b.n	8009fc6 <UART_SetConfig+0x282>
 8009efe:	2302      	movs	r3, #2
 8009f00:	76fb      	strb	r3, [r7, #27]
 8009f02:	e060      	b.n	8009fc6 <UART_SetConfig+0x282>
 8009f04:	2304      	movs	r3, #4
 8009f06:	76fb      	strb	r3, [r7, #27]
 8009f08:	e05d      	b.n	8009fc6 <UART_SetConfig+0x282>
 8009f0a:	2308      	movs	r3, #8
 8009f0c:	76fb      	strb	r3, [r7, #27]
 8009f0e:	e05a      	b.n	8009fc6 <UART_SetConfig+0x282>
 8009f10:	2310      	movs	r3, #16
 8009f12:	76fb      	strb	r3, [r7, #27]
 8009f14:	e057      	b.n	8009fc6 <UART_SetConfig+0x282>
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	4a49      	ldr	r2, [pc, #292]	; (800a040 <UART_SetConfig+0x2fc>)
 8009f1c:	4293      	cmp	r3, r2
 8009f1e:	d125      	bne.n	8009f6c <UART_SetConfig+0x228>
 8009f20:	4b43      	ldr	r3, [pc, #268]	; (800a030 <UART_SetConfig+0x2ec>)
 8009f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f2e:	d017      	beq.n	8009f60 <UART_SetConfig+0x21c>
 8009f30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f34:	d817      	bhi.n	8009f66 <UART_SetConfig+0x222>
 8009f36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f3a:	d00b      	beq.n	8009f54 <UART_SetConfig+0x210>
 8009f3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f40:	d811      	bhi.n	8009f66 <UART_SetConfig+0x222>
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d003      	beq.n	8009f4e <UART_SetConfig+0x20a>
 8009f46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f4a:	d006      	beq.n	8009f5a <UART_SetConfig+0x216>
 8009f4c:	e00b      	b.n	8009f66 <UART_SetConfig+0x222>
 8009f4e:	2300      	movs	r3, #0
 8009f50:	76fb      	strb	r3, [r7, #27]
 8009f52:	e038      	b.n	8009fc6 <UART_SetConfig+0x282>
 8009f54:	2302      	movs	r3, #2
 8009f56:	76fb      	strb	r3, [r7, #27]
 8009f58:	e035      	b.n	8009fc6 <UART_SetConfig+0x282>
 8009f5a:	2304      	movs	r3, #4
 8009f5c:	76fb      	strb	r3, [r7, #27]
 8009f5e:	e032      	b.n	8009fc6 <UART_SetConfig+0x282>
 8009f60:	2308      	movs	r3, #8
 8009f62:	76fb      	strb	r3, [r7, #27]
 8009f64:	e02f      	b.n	8009fc6 <UART_SetConfig+0x282>
 8009f66:	2310      	movs	r3, #16
 8009f68:	76fb      	strb	r3, [r7, #27]
 8009f6a:	e02c      	b.n	8009fc6 <UART_SetConfig+0x282>
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	4a2d      	ldr	r2, [pc, #180]	; (800a028 <UART_SetConfig+0x2e4>)
 8009f72:	4293      	cmp	r3, r2
 8009f74:	d125      	bne.n	8009fc2 <UART_SetConfig+0x27e>
 8009f76:	4b2e      	ldr	r3, [pc, #184]	; (800a030 <UART_SetConfig+0x2ec>)
 8009f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f7c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009f80:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009f84:	d017      	beq.n	8009fb6 <UART_SetConfig+0x272>
 8009f86:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009f8a:	d817      	bhi.n	8009fbc <UART_SetConfig+0x278>
 8009f8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f90:	d00b      	beq.n	8009faa <UART_SetConfig+0x266>
 8009f92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f96:	d811      	bhi.n	8009fbc <UART_SetConfig+0x278>
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d003      	beq.n	8009fa4 <UART_SetConfig+0x260>
 8009f9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009fa0:	d006      	beq.n	8009fb0 <UART_SetConfig+0x26c>
 8009fa2:	e00b      	b.n	8009fbc <UART_SetConfig+0x278>
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	76fb      	strb	r3, [r7, #27]
 8009fa8:	e00d      	b.n	8009fc6 <UART_SetConfig+0x282>
 8009faa:	2302      	movs	r3, #2
 8009fac:	76fb      	strb	r3, [r7, #27]
 8009fae:	e00a      	b.n	8009fc6 <UART_SetConfig+0x282>
 8009fb0:	2304      	movs	r3, #4
 8009fb2:	76fb      	strb	r3, [r7, #27]
 8009fb4:	e007      	b.n	8009fc6 <UART_SetConfig+0x282>
 8009fb6:	2308      	movs	r3, #8
 8009fb8:	76fb      	strb	r3, [r7, #27]
 8009fba:	e004      	b.n	8009fc6 <UART_SetConfig+0x282>
 8009fbc:	2310      	movs	r3, #16
 8009fbe:	76fb      	strb	r3, [r7, #27]
 8009fc0:	e001      	b.n	8009fc6 <UART_SetConfig+0x282>
 8009fc2:	2310      	movs	r3, #16
 8009fc4:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	4a17      	ldr	r2, [pc, #92]	; (800a028 <UART_SetConfig+0x2e4>)
 8009fcc:	4293      	cmp	r3, r2
 8009fce:	f040 8087 	bne.w	800a0e0 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009fd2:	7efb      	ldrb	r3, [r7, #27]
 8009fd4:	2b08      	cmp	r3, #8
 8009fd6:	d837      	bhi.n	800a048 <UART_SetConfig+0x304>
 8009fd8:	a201      	add	r2, pc, #4	; (adr r2, 8009fe0 <UART_SetConfig+0x29c>)
 8009fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fde:	bf00      	nop
 8009fe0:	0800a005 	.word	0x0800a005
 8009fe4:	0800a049 	.word	0x0800a049
 8009fe8:	0800a00d 	.word	0x0800a00d
 8009fec:	0800a049 	.word	0x0800a049
 8009ff0:	0800a013 	.word	0x0800a013
 8009ff4:	0800a049 	.word	0x0800a049
 8009ff8:	0800a049 	.word	0x0800a049
 8009ffc:	0800a049 	.word	0x0800a049
 800a000:	0800a01b 	.word	0x0800a01b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a004:	f7fc fa3c 	bl	8006480 <HAL_RCC_GetPCLK1Freq>
 800a008:	6178      	str	r0, [r7, #20]
        break;
 800a00a:	e022      	b.n	800a052 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a00c:	4b0d      	ldr	r3, [pc, #52]	; (800a044 <UART_SetConfig+0x300>)
 800a00e:	617b      	str	r3, [r7, #20]
        break;
 800a010:	e01f      	b.n	800a052 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a012:	f7fc f99d 	bl	8006350 <HAL_RCC_GetSysClockFreq>
 800a016:	6178      	str	r0, [r7, #20]
        break;
 800a018:	e01b      	b.n	800a052 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a01a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a01e:	617b      	str	r3, [r7, #20]
        break;
 800a020:	e017      	b.n	800a052 <UART_SetConfig+0x30e>
 800a022:	bf00      	nop
 800a024:	efff69f3 	.word	0xefff69f3
 800a028:	40008000 	.word	0x40008000
 800a02c:	40013800 	.word	0x40013800
 800a030:	40021000 	.word	0x40021000
 800a034:	40004400 	.word	0x40004400
 800a038:	40004800 	.word	0x40004800
 800a03c:	40004c00 	.word	0x40004c00
 800a040:	40005000 	.word	0x40005000
 800a044:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800a048:	2300      	movs	r3, #0
 800a04a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a04c:	2301      	movs	r3, #1
 800a04e:	76bb      	strb	r3, [r7, #26]
        break;
 800a050:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a052:	697b      	ldr	r3, [r7, #20]
 800a054:	2b00      	cmp	r3, #0
 800a056:	f000 80f1 	beq.w	800a23c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	685a      	ldr	r2, [r3, #4]
 800a05e:	4613      	mov	r3, r2
 800a060:	005b      	lsls	r3, r3, #1
 800a062:	4413      	add	r3, r2
 800a064:	697a      	ldr	r2, [r7, #20]
 800a066:	429a      	cmp	r2, r3
 800a068:	d305      	bcc.n	800a076 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	685b      	ldr	r3, [r3, #4]
 800a06e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a070:	697a      	ldr	r2, [r7, #20]
 800a072:	429a      	cmp	r2, r3
 800a074:	d902      	bls.n	800a07c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800a076:	2301      	movs	r3, #1
 800a078:	76bb      	strb	r3, [r7, #26]
 800a07a:	e0df      	b.n	800a23c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800a07c:	697b      	ldr	r3, [r7, #20]
 800a07e:	4618      	mov	r0, r3
 800a080:	f04f 0100 	mov.w	r1, #0
 800a084:	f04f 0200 	mov.w	r2, #0
 800a088:	f04f 0300 	mov.w	r3, #0
 800a08c:	020b      	lsls	r3, r1, #8
 800a08e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a092:	0202      	lsls	r2, r0, #8
 800a094:	6879      	ldr	r1, [r7, #4]
 800a096:	6849      	ldr	r1, [r1, #4]
 800a098:	0849      	lsrs	r1, r1, #1
 800a09a:	4608      	mov	r0, r1
 800a09c:	f04f 0100 	mov.w	r1, #0
 800a0a0:	1814      	adds	r4, r2, r0
 800a0a2:	eb43 0501 	adc.w	r5, r3, r1
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	685b      	ldr	r3, [r3, #4]
 800a0aa:	461a      	mov	r2, r3
 800a0ac:	f04f 0300 	mov.w	r3, #0
 800a0b0:	4620      	mov	r0, r4
 800a0b2:	4629      	mov	r1, r5
 800a0b4:	f7f6 fd78 	bl	8000ba8 <__aeabi_uldivmod>
 800a0b8:	4602      	mov	r2, r0
 800a0ba:	460b      	mov	r3, r1
 800a0bc:	4613      	mov	r3, r2
 800a0be:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a0c0:	693b      	ldr	r3, [r7, #16]
 800a0c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a0c6:	d308      	bcc.n	800a0da <UART_SetConfig+0x396>
 800a0c8:	693b      	ldr	r3, [r7, #16]
 800a0ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a0ce:	d204      	bcs.n	800a0da <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	693a      	ldr	r2, [r7, #16]
 800a0d6:	60da      	str	r2, [r3, #12]
 800a0d8:	e0b0      	b.n	800a23c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800a0da:	2301      	movs	r3, #1
 800a0dc:	76bb      	strb	r3, [r7, #26]
 800a0de:	e0ad      	b.n	800a23c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	69db      	ldr	r3, [r3, #28]
 800a0e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a0e8:	d15b      	bne.n	800a1a2 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 800a0ea:	7efb      	ldrb	r3, [r7, #27]
 800a0ec:	2b08      	cmp	r3, #8
 800a0ee:	d828      	bhi.n	800a142 <UART_SetConfig+0x3fe>
 800a0f0:	a201      	add	r2, pc, #4	; (adr r2, 800a0f8 <UART_SetConfig+0x3b4>)
 800a0f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0f6:	bf00      	nop
 800a0f8:	0800a11d 	.word	0x0800a11d
 800a0fc:	0800a125 	.word	0x0800a125
 800a100:	0800a12d 	.word	0x0800a12d
 800a104:	0800a143 	.word	0x0800a143
 800a108:	0800a133 	.word	0x0800a133
 800a10c:	0800a143 	.word	0x0800a143
 800a110:	0800a143 	.word	0x0800a143
 800a114:	0800a143 	.word	0x0800a143
 800a118:	0800a13b 	.word	0x0800a13b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a11c:	f7fc f9b0 	bl	8006480 <HAL_RCC_GetPCLK1Freq>
 800a120:	6178      	str	r0, [r7, #20]
        break;
 800a122:	e013      	b.n	800a14c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a124:	f7fc f9c2 	bl	80064ac <HAL_RCC_GetPCLK2Freq>
 800a128:	6178      	str	r0, [r7, #20]
        break;
 800a12a:	e00f      	b.n	800a14c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a12c:	4b49      	ldr	r3, [pc, #292]	; (800a254 <UART_SetConfig+0x510>)
 800a12e:	617b      	str	r3, [r7, #20]
        break;
 800a130:	e00c      	b.n	800a14c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a132:	f7fc f90d 	bl	8006350 <HAL_RCC_GetSysClockFreq>
 800a136:	6178      	str	r0, [r7, #20]
        break;
 800a138:	e008      	b.n	800a14c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a13a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a13e:	617b      	str	r3, [r7, #20]
        break;
 800a140:	e004      	b.n	800a14c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800a142:	2300      	movs	r3, #0
 800a144:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a146:	2301      	movs	r3, #1
 800a148:	76bb      	strb	r3, [r7, #26]
        break;
 800a14a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a14c:	697b      	ldr	r3, [r7, #20]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d074      	beq.n	800a23c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a152:	697b      	ldr	r3, [r7, #20]
 800a154:	005a      	lsls	r2, r3, #1
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	685b      	ldr	r3, [r3, #4]
 800a15a:	085b      	lsrs	r3, r3, #1
 800a15c:	441a      	add	r2, r3
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	685b      	ldr	r3, [r3, #4]
 800a162:	fbb2 f3f3 	udiv	r3, r2, r3
 800a166:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a168:	693b      	ldr	r3, [r7, #16]
 800a16a:	2b0f      	cmp	r3, #15
 800a16c:	d916      	bls.n	800a19c <UART_SetConfig+0x458>
 800a16e:	693b      	ldr	r3, [r7, #16]
 800a170:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a174:	d212      	bcs.n	800a19c <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a176:	693b      	ldr	r3, [r7, #16]
 800a178:	b29b      	uxth	r3, r3
 800a17a:	f023 030f 	bic.w	r3, r3, #15
 800a17e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a180:	693b      	ldr	r3, [r7, #16]
 800a182:	085b      	lsrs	r3, r3, #1
 800a184:	b29b      	uxth	r3, r3
 800a186:	f003 0307 	and.w	r3, r3, #7
 800a18a:	b29a      	uxth	r2, r3
 800a18c:	89fb      	ldrh	r3, [r7, #14]
 800a18e:	4313      	orrs	r3, r2
 800a190:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	89fa      	ldrh	r2, [r7, #14]
 800a198:	60da      	str	r2, [r3, #12]
 800a19a:	e04f      	b.n	800a23c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800a19c:	2301      	movs	r3, #1
 800a19e:	76bb      	strb	r3, [r7, #26]
 800a1a0:	e04c      	b.n	800a23c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a1a2:	7efb      	ldrb	r3, [r7, #27]
 800a1a4:	2b08      	cmp	r3, #8
 800a1a6:	d828      	bhi.n	800a1fa <UART_SetConfig+0x4b6>
 800a1a8:	a201      	add	r2, pc, #4	; (adr r2, 800a1b0 <UART_SetConfig+0x46c>)
 800a1aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1ae:	bf00      	nop
 800a1b0:	0800a1d5 	.word	0x0800a1d5
 800a1b4:	0800a1dd 	.word	0x0800a1dd
 800a1b8:	0800a1e5 	.word	0x0800a1e5
 800a1bc:	0800a1fb 	.word	0x0800a1fb
 800a1c0:	0800a1eb 	.word	0x0800a1eb
 800a1c4:	0800a1fb 	.word	0x0800a1fb
 800a1c8:	0800a1fb 	.word	0x0800a1fb
 800a1cc:	0800a1fb 	.word	0x0800a1fb
 800a1d0:	0800a1f3 	.word	0x0800a1f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a1d4:	f7fc f954 	bl	8006480 <HAL_RCC_GetPCLK1Freq>
 800a1d8:	6178      	str	r0, [r7, #20]
        break;
 800a1da:	e013      	b.n	800a204 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a1dc:	f7fc f966 	bl	80064ac <HAL_RCC_GetPCLK2Freq>
 800a1e0:	6178      	str	r0, [r7, #20]
        break;
 800a1e2:	e00f      	b.n	800a204 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a1e4:	4b1b      	ldr	r3, [pc, #108]	; (800a254 <UART_SetConfig+0x510>)
 800a1e6:	617b      	str	r3, [r7, #20]
        break;
 800a1e8:	e00c      	b.n	800a204 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a1ea:	f7fc f8b1 	bl	8006350 <HAL_RCC_GetSysClockFreq>
 800a1ee:	6178      	str	r0, [r7, #20]
        break;
 800a1f0:	e008      	b.n	800a204 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a1f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a1f6:	617b      	str	r3, [r7, #20]
        break;
 800a1f8:	e004      	b.n	800a204 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800a1fe:	2301      	movs	r3, #1
 800a200:	76bb      	strb	r3, [r7, #26]
        break;
 800a202:	bf00      	nop
    }

    if (pclk != 0U)
 800a204:	697b      	ldr	r3, [r7, #20]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d018      	beq.n	800a23c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	685b      	ldr	r3, [r3, #4]
 800a20e:	085a      	lsrs	r2, r3, #1
 800a210:	697b      	ldr	r3, [r7, #20]
 800a212:	441a      	add	r2, r3
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	685b      	ldr	r3, [r3, #4]
 800a218:	fbb2 f3f3 	udiv	r3, r2, r3
 800a21c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a21e:	693b      	ldr	r3, [r7, #16]
 800a220:	2b0f      	cmp	r3, #15
 800a222:	d909      	bls.n	800a238 <UART_SetConfig+0x4f4>
 800a224:	693b      	ldr	r3, [r7, #16]
 800a226:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a22a:	d205      	bcs.n	800a238 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a22c:	693b      	ldr	r3, [r7, #16]
 800a22e:	b29a      	uxth	r2, r3
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	60da      	str	r2, [r3, #12]
 800a236:	e001      	b.n	800a23c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800a238:	2301      	movs	r3, #1
 800a23a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2200      	movs	r2, #0
 800a240:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2200      	movs	r2, #0
 800a246:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800a248:	7ebb      	ldrb	r3, [r7, #26]
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	3720      	adds	r7, #32
 800a24e:	46bd      	mov	sp, r7
 800a250:	bdb0      	pop	{r4, r5, r7, pc}
 800a252:	bf00      	nop
 800a254:	00f42400 	.word	0x00f42400

0800a258 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a258:	b480      	push	{r7}
 800a25a:	b083      	sub	sp, #12
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a264:	f003 0301 	and.w	r3, r3, #1
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d00a      	beq.n	800a282 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	685b      	ldr	r3, [r3, #4]
 800a272:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	430a      	orrs	r2, r1
 800a280:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a286:	f003 0302 	and.w	r3, r3, #2
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d00a      	beq.n	800a2a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	685b      	ldr	r3, [r3, #4]
 800a294:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	430a      	orrs	r2, r1
 800a2a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2a8:	f003 0304 	and.w	r3, r3, #4
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d00a      	beq.n	800a2c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	685b      	ldr	r3, [r3, #4]
 800a2b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	430a      	orrs	r2, r1
 800a2c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ca:	f003 0308 	and.w	r3, r3, #8
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d00a      	beq.n	800a2e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	685b      	ldr	r3, [r3, #4]
 800a2d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	430a      	orrs	r2, r1
 800a2e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ec:	f003 0310 	and.w	r3, r3, #16
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d00a      	beq.n	800a30a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	689b      	ldr	r3, [r3, #8]
 800a2fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	430a      	orrs	r2, r1
 800a308:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a30e:	f003 0320 	and.w	r3, r3, #32
 800a312:	2b00      	cmp	r3, #0
 800a314:	d00a      	beq.n	800a32c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	689b      	ldr	r3, [r3, #8]
 800a31c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	430a      	orrs	r2, r1
 800a32a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a334:	2b00      	cmp	r3, #0
 800a336:	d01a      	beq.n	800a36e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	685b      	ldr	r3, [r3, #4]
 800a33e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	430a      	orrs	r2, r1
 800a34c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a352:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a356:	d10a      	bne.n	800a36e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	685b      	ldr	r3, [r3, #4]
 800a35e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	430a      	orrs	r2, r1
 800a36c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a376:	2b00      	cmp	r3, #0
 800a378:	d00a      	beq.n	800a390 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	685b      	ldr	r3, [r3, #4]
 800a380:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	430a      	orrs	r2, r1
 800a38e:	605a      	str	r2, [r3, #4]
  }
}
 800a390:	bf00      	nop
 800a392:	370c      	adds	r7, #12
 800a394:	46bd      	mov	sp, r7
 800a396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39a:	4770      	bx	lr

0800a39c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b086      	sub	sp, #24
 800a3a0:	af02      	add	r7, sp, #8
 800a3a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a3ac:	f7f9 fa6a 	bl	8003884 <HAL_GetTick>
 800a3b0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f003 0308 	and.w	r3, r3, #8
 800a3bc:	2b08      	cmp	r3, #8
 800a3be:	d10e      	bne.n	800a3de <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a3c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a3c4:	9300      	str	r3, [sp, #0]
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	f000 f82d 	bl	800a42e <UART_WaitOnFlagUntilTimeout>
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d001      	beq.n	800a3de <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a3da:	2303      	movs	r3, #3
 800a3dc:	e023      	b.n	800a426 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	f003 0304 	and.w	r3, r3, #4
 800a3e8:	2b04      	cmp	r3, #4
 800a3ea:	d10e      	bne.n	800a40a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a3ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a3f0:	9300      	str	r3, [sp, #0]
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	f000 f817 	bl	800a42e <UART_WaitOnFlagUntilTimeout>
 800a400:	4603      	mov	r3, r0
 800a402:	2b00      	cmp	r3, #0
 800a404:	d001      	beq.n	800a40a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a406:	2303      	movs	r3, #3
 800a408:	e00d      	b.n	800a426 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2220      	movs	r2, #32
 800a40e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2220      	movs	r2, #32
 800a414:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	2200      	movs	r2, #0
 800a41a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2200      	movs	r2, #0
 800a420:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800a424:	2300      	movs	r3, #0
}
 800a426:	4618      	mov	r0, r3
 800a428:	3710      	adds	r7, #16
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}

0800a42e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a42e:	b580      	push	{r7, lr}
 800a430:	b09c      	sub	sp, #112	; 0x70
 800a432:	af00      	add	r7, sp, #0
 800a434:	60f8      	str	r0, [r7, #12]
 800a436:	60b9      	str	r1, [r7, #8]
 800a438:	603b      	str	r3, [r7, #0]
 800a43a:	4613      	mov	r3, r2
 800a43c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a43e:	e0a5      	b.n	800a58c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a440:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a442:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a446:	f000 80a1 	beq.w	800a58c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a44a:	f7f9 fa1b 	bl	8003884 <HAL_GetTick>
 800a44e:	4602      	mov	r2, r0
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	1ad3      	subs	r3, r2, r3
 800a454:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a456:	429a      	cmp	r2, r3
 800a458:	d302      	bcc.n	800a460 <UART_WaitOnFlagUntilTimeout+0x32>
 800a45a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d13e      	bne.n	800a4de <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a466:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a468:	e853 3f00 	ldrex	r3, [r3]
 800a46c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a46e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a470:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a474:	667b      	str	r3, [r7, #100]	; 0x64
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	461a      	mov	r2, r3
 800a47c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a47e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a480:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a482:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a484:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a486:	e841 2300 	strex	r3, r2, [r1]
 800a48a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a48c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d1e6      	bne.n	800a460 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	3308      	adds	r3, #8
 800a498:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a49a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a49c:	e853 3f00 	ldrex	r3, [r3]
 800a4a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a4a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4a4:	f023 0301 	bic.w	r3, r3, #1
 800a4a8:	663b      	str	r3, [r7, #96]	; 0x60
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	3308      	adds	r3, #8
 800a4b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a4b2:	64ba      	str	r2, [r7, #72]	; 0x48
 800a4b4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a4b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a4ba:	e841 2300 	strex	r3, r2, [r1]
 800a4be:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a4c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d1e5      	bne.n	800a492 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	2220      	movs	r2, #32
 800a4ca:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	2220      	movs	r2, #32
 800a4d0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800a4da:	2303      	movs	r3, #3
 800a4dc:	e067      	b.n	800a5ae <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	f003 0304 	and.w	r3, r3, #4
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d04f      	beq.n	800a58c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	69db      	ldr	r3, [r3, #28]
 800a4f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a4f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a4fa:	d147      	bne.n	800a58c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a504:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a50c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a50e:	e853 3f00 	ldrex	r3, [r3]
 800a512:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a516:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a51a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	461a      	mov	r2, r3
 800a522:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a524:	637b      	str	r3, [r7, #52]	; 0x34
 800a526:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a528:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a52a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a52c:	e841 2300 	strex	r3, r2, [r1]
 800a530:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a534:	2b00      	cmp	r3, #0
 800a536:	d1e6      	bne.n	800a506 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	3308      	adds	r3, #8
 800a53e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a540:	697b      	ldr	r3, [r7, #20]
 800a542:	e853 3f00 	ldrex	r3, [r3]
 800a546:	613b      	str	r3, [r7, #16]
   return(result);
 800a548:	693b      	ldr	r3, [r7, #16]
 800a54a:	f023 0301 	bic.w	r3, r3, #1
 800a54e:	66bb      	str	r3, [r7, #104]	; 0x68
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	3308      	adds	r3, #8
 800a556:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a558:	623a      	str	r2, [r7, #32]
 800a55a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a55c:	69f9      	ldr	r1, [r7, #28]
 800a55e:	6a3a      	ldr	r2, [r7, #32]
 800a560:	e841 2300 	strex	r3, r2, [r1]
 800a564:	61bb      	str	r3, [r7, #24]
   return(result);
 800a566:	69bb      	ldr	r3, [r7, #24]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d1e5      	bne.n	800a538 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	2220      	movs	r2, #32
 800a570:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	2220      	movs	r2, #32
 800a576:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	2220      	movs	r2, #32
 800a57c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	2200      	movs	r2, #0
 800a584:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800a588:	2303      	movs	r3, #3
 800a58a:	e010      	b.n	800a5ae <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	69da      	ldr	r2, [r3, #28]
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	4013      	ands	r3, r2
 800a596:	68ba      	ldr	r2, [r7, #8]
 800a598:	429a      	cmp	r2, r3
 800a59a:	bf0c      	ite	eq
 800a59c:	2301      	moveq	r3, #1
 800a59e:	2300      	movne	r3, #0
 800a5a0:	b2db      	uxtb	r3, r3
 800a5a2:	461a      	mov	r2, r3
 800a5a4:	79fb      	ldrb	r3, [r7, #7]
 800a5a6:	429a      	cmp	r2, r3
 800a5a8:	f43f af4a 	beq.w	800a440 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a5ac:	2300      	movs	r3, #0
}
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	3770      	adds	r7, #112	; 0x70
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	bd80      	pop	{r7, pc}
	...

0800a5b8 <__errno>:
 800a5b8:	4b01      	ldr	r3, [pc, #4]	; (800a5c0 <__errno+0x8>)
 800a5ba:	6818      	ldr	r0, [r3, #0]
 800a5bc:	4770      	bx	lr
 800a5be:	bf00      	nop
 800a5c0:	20000090 	.word	0x20000090

0800a5c4 <__libc_init_array>:
 800a5c4:	b570      	push	{r4, r5, r6, lr}
 800a5c6:	4d0d      	ldr	r5, [pc, #52]	; (800a5fc <__libc_init_array+0x38>)
 800a5c8:	4c0d      	ldr	r4, [pc, #52]	; (800a600 <__libc_init_array+0x3c>)
 800a5ca:	1b64      	subs	r4, r4, r5
 800a5cc:	10a4      	asrs	r4, r4, #2
 800a5ce:	2600      	movs	r6, #0
 800a5d0:	42a6      	cmp	r6, r4
 800a5d2:	d109      	bne.n	800a5e8 <__libc_init_array+0x24>
 800a5d4:	4d0b      	ldr	r5, [pc, #44]	; (800a604 <__libc_init_array+0x40>)
 800a5d6:	4c0c      	ldr	r4, [pc, #48]	; (800a608 <__libc_init_array+0x44>)
 800a5d8:	f002 ff16 	bl	800d408 <_init>
 800a5dc:	1b64      	subs	r4, r4, r5
 800a5de:	10a4      	asrs	r4, r4, #2
 800a5e0:	2600      	movs	r6, #0
 800a5e2:	42a6      	cmp	r6, r4
 800a5e4:	d105      	bne.n	800a5f2 <__libc_init_array+0x2e>
 800a5e6:	bd70      	pop	{r4, r5, r6, pc}
 800a5e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5ec:	4798      	blx	r3
 800a5ee:	3601      	adds	r6, #1
 800a5f0:	e7ee      	b.n	800a5d0 <__libc_init_array+0xc>
 800a5f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5f6:	4798      	blx	r3
 800a5f8:	3601      	adds	r6, #1
 800a5fa:	e7f2      	b.n	800a5e2 <__libc_init_array+0x1e>
 800a5fc:	0800d87c 	.word	0x0800d87c
 800a600:	0800d87c 	.word	0x0800d87c
 800a604:	0800d87c 	.word	0x0800d87c
 800a608:	0800d880 	.word	0x0800d880

0800a60c <memset>:
 800a60c:	4402      	add	r2, r0
 800a60e:	4603      	mov	r3, r0
 800a610:	4293      	cmp	r3, r2
 800a612:	d100      	bne.n	800a616 <memset+0xa>
 800a614:	4770      	bx	lr
 800a616:	f803 1b01 	strb.w	r1, [r3], #1
 800a61a:	e7f9      	b.n	800a610 <memset+0x4>

0800a61c <__cvt>:
 800a61c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a620:	ec55 4b10 	vmov	r4, r5, d0
 800a624:	2d00      	cmp	r5, #0
 800a626:	460e      	mov	r6, r1
 800a628:	4619      	mov	r1, r3
 800a62a:	462b      	mov	r3, r5
 800a62c:	bfbb      	ittet	lt
 800a62e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a632:	461d      	movlt	r5, r3
 800a634:	2300      	movge	r3, #0
 800a636:	232d      	movlt	r3, #45	; 0x2d
 800a638:	700b      	strb	r3, [r1, #0]
 800a63a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a63c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a640:	4691      	mov	r9, r2
 800a642:	f023 0820 	bic.w	r8, r3, #32
 800a646:	bfbc      	itt	lt
 800a648:	4622      	movlt	r2, r4
 800a64a:	4614      	movlt	r4, r2
 800a64c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a650:	d005      	beq.n	800a65e <__cvt+0x42>
 800a652:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a656:	d100      	bne.n	800a65a <__cvt+0x3e>
 800a658:	3601      	adds	r6, #1
 800a65a:	2102      	movs	r1, #2
 800a65c:	e000      	b.n	800a660 <__cvt+0x44>
 800a65e:	2103      	movs	r1, #3
 800a660:	ab03      	add	r3, sp, #12
 800a662:	9301      	str	r3, [sp, #4]
 800a664:	ab02      	add	r3, sp, #8
 800a666:	9300      	str	r3, [sp, #0]
 800a668:	ec45 4b10 	vmov	d0, r4, r5
 800a66c:	4653      	mov	r3, sl
 800a66e:	4632      	mov	r2, r6
 800a670:	f000 fce2 	bl	800b038 <_dtoa_r>
 800a674:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a678:	4607      	mov	r7, r0
 800a67a:	d102      	bne.n	800a682 <__cvt+0x66>
 800a67c:	f019 0f01 	tst.w	r9, #1
 800a680:	d022      	beq.n	800a6c8 <__cvt+0xac>
 800a682:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a686:	eb07 0906 	add.w	r9, r7, r6
 800a68a:	d110      	bne.n	800a6ae <__cvt+0x92>
 800a68c:	783b      	ldrb	r3, [r7, #0]
 800a68e:	2b30      	cmp	r3, #48	; 0x30
 800a690:	d10a      	bne.n	800a6a8 <__cvt+0x8c>
 800a692:	2200      	movs	r2, #0
 800a694:	2300      	movs	r3, #0
 800a696:	4620      	mov	r0, r4
 800a698:	4629      	mov	r1, r5
 800a69a:	f7f6 fa15 	bl	8000ac8 <__aeabi_dcmpeq>
 800a69e:	b918      	cbnz	r0, 800a6a8 <__cvt+0x8c>
 800a6a0:	f1c6 0601 	rsb	r6, r6, #1
 800a6a4:	f8ca 6000 	str.w	r6, [sl]
 800a6a8:	f8da 3000 	ldr.w	r3, [sl]
 800a6ac:	4499      	add	r9, r3
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	4620      	mov	r0, r4
 800a6b4:	4629      	mov	r1, r5
 800a6b6:	f7f6 fa07 	bl	8000ac8 <__aeabi_dcmpeq>
 800a6ba:	b108      	cbz	r0, 800a6c0 <__cvt+0xa4>
 800a6bc:	f8cd 900c 	str.w	r9, [sp, #12]
 800a6c0:	2230      	movs	r2, #48	; 0x30
 800a6c2:	9b03      	ldr	r3, [sp, #12]
 800a6c4:	454b      	cmp	r3, r9
 800a6c6:	d307      	bcc.n	800a6d8 <__cvt+0xbc>
 800a6c8:	9b03      	ldr	r3, [sp, #12]
 800a6ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a6cc:	1bdb      	subs	r3, r3, r7
 800a6ce:	4638      	mov	r0, r7
 800a6d0:	6013      	str	r3, [r2, #0]
 800a6d2:	b004      	add	sp, #16
 800a6d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6d8:	1c59      	adds	r1, r3, #1
 800a6da:	9103      	str	r1, [sp, #12]
 800a6dc:	701a      	strb	r2, [r3, #0]
 800a6de:	e7f0      	b.n	800a6c2 <__cvt+0xa6>

0800a6e0 <__exponent>:
 800a6e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	2900      	cmp	r1, #0
 800a6e6:	bfb8      	it	lt
 800a6e8:	4249      	neglt	r1, r1
 800a6ea:	f803 2b02 	strb.w	r2, [r3], #2
 800a6ee:	bfb4      	ite	lt
 800a6f0:	222d      	movlt	r2, #45	; 0x2d
 800a6f2:	222b      	movge	r2, #43	; 0x2b
 800a6f4:	2909      	cmp	r1, #9
 800a6f6:	7042      	strb	r2, [r0, #1]
 800a6f8:	dd2a      	ble.n	800a750 <__exponent+0x70>
 800a6fa:	f10d 0407 	add.w	r4, sp, #7
 800a6fe:	46a4      	mov	ip, r4
 800a700:	270a      	movs	r7, #10
 800a702:	46a6      	mov	lr, r4
 800a704:	460a      	mov	r2, r1
 800a706:	fb91 f6f7 	sdiv	r6, r1, r7
 800a70a:	fb07 1516 	mls	r5, r7, r6, r1
 800a70e:	3530      	adds	r5, #48	; 0x30
 800a710:	2a63      	cmp	r2, #99	; 0x63
 800a712:	f104 34ff 	add.w	r4, r4, #4294967295
 800a716:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a71a:	4631      	mov	r1, r6
 800a71c:	dcf1      	bgt.n	800a702 <__exponent+0x22>
 800a71e:	3130      	adds	r1, #48	; 0x30
 800a720:	f1ae 0502 	sub.w	r5, lr, #2
 800a724:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a728:	1c44      	adds	r4, r0, #1
 800a72a:	4629      	mov	r1, r5
 800a72c:	4561      	cmp	r1, ip
 800a72e:	d30a      	bcc.n	800a746 <__exponent+0x66>
 800a730:	f10d 0209 	add.w	r2, sp, #9
 800a734:	eba2 020e 	sub.w	r2, r2, lr
 800a738:	4565      	cmp	r5, ip
 800a73a:	bf88      	it	hi
 800a73c:	2200      	movhi	r2, #0
 800a73e:	4413      	add	r3, r2
 800a740:	1a18      	subs	r0, r3, r0
 800a742:	b003      	add	sp, #12
 800a744:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a746:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a74a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a74e:	e7ed      	b.n	800a72c <__exponent+0x4c>
 800a750:	2330      	movs	r3, #48	; 0x30
 800a752:	3130      	adds	r1, #48	; 0x30
 800a754:	7083      	strb	r3, [r0, #2]
 800a756:	70c1      	strb	r1, [r0, #3]
 800a758:	1d03      	adds	r3, r0, #4
 800a75a:	e7f1      	b.n	800a740 <__exponent+0x60>

0800a75c <_printf_float>:
 800a75c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a760:	ed2d 8b02 	vpush	{d8}
 800a764:	b08d      	sub	sp, #52	; 0x34
 800a766:	460c      	mov	r4, r1
 800a768:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a76c:	4616      	mov	r6, r2
 800a76e:	461f      	mov	r7, r3
 800a770:	4605      	mov	r5, r0
 800a772:	f001 fb43 	bl	800bdfc <_localeconv_r>
 800a776:	f8d0 a000 	ldr.w	sl, [r0]
 800a77a:	4650      	mov	r0, sl
 800a77c:	f7f5 fd28 	bl	80001d0 <strlen>
 800a780:	2300      	movs	r3, #0
 800a782:	930a      	str	r3, [sp, #40]	; 0x28
 800a784:	6823      	ldr	r3, [r4, #0]
 800a786:	9305      	str	r3, [sp, #20]
 800a788:	f8d8 3000 	ldr.w	r3, [r8]
 800a78c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a790:	3307      	adds	r3, #7
 800a792:	f023 0307 	bic.w	r3, r3, #7
 800a796:	f103 0208 	add.w	r2, r3, #8
 800a79a:	f8c8 2000 	str.w	r2, [r8]
 800a79e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7a2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a7a6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a7aa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a7ae:	9307      	str	r3, [sp, #28]
 800a7b0:	f8cd 8018 	str.w	r8, [sp, #24]
 800a7b4:	ee08 0a10 	vmov	s16, r0
 800a7b8:	4b9f      	ldr	r3, [pc, #636]	; (800aa38 <_printf_float+0x2dc>)
 800a7ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a7be:	f04f 32ff 	mov.w	r2, #4294967295
 800a7c2:	f7f6 f9b3 	bl	8000b2c <__aeabi_dcmpun>
 800a7c6:	bb88      	cbnz	r0, 800a82c <_printf_float+0xd0>
 800a7c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a7cc:	4b9a      	ldr	r3, [pc, #616]	; (800aa38 <_printf_float+0x2dc>)
 800a7ce:	f04f 32ff 	mov.w	r2, #4294967295
 800a7d2:	f7f6 f98d 	bl	8000af0 <__aeabi_dcmple>
 800a7d6:	bb48      	cbnz	r0, 800a82c <_printf_float+0xd0>
 800a7d8:	2200      	movs	r2, #0
 800a7da:	2300      	movs	r3, #0
 800a7dc:	4640      	mov	r0, r8
 800a7de:	4649      	mov	r1, r9
 800a7e0:	f7f6 f97c 	bl	8000adc <__aeabi_dcmplt>
 800a7e4:	b110      	cbz	r0, 800a7ec <_printf_float+0x90>
 800a7e6:	232d      	movs	r3, #45	; 0x2d
 800a7e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a7ec:	4b93      	ldr	r3, [pc, #588]	; (800aa3c <_printf_float+0x2e0>)
 800a7ee:	4894      	ldr	r0, [pc, #592]	; (800aa40 <_printf_float+0x2e4>)
 800a7f0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a7f4:	bf94      	ite	ls
 800a7f6:	4698      	movls	r8, r3
 800a7f8:	4680      	movhi	r8, r0
 800a7fa:	2303      	movs	r3, #3
 800a7fc:	6123      	str	r3, [r4, #16]
 800a7fe:	9b05      	ldr	r3, [sp, #20]
 800a800:	f023 0204 	bic.w	r2, r3, #4
 800a804:	6022      	str	r2, [r4, #0]
 800a806:	f04f 0900 	mov.w	r9, #0
 800a80a:	9700      	str	r7, [sp, #0]
 800a80c:	4633      	mov	r3, r6
 800a80e:	aa0b      	add	r2, sp, #44	; 0x2c
 800a810:	4621      	mov	r1, r4
 800a812:	4628      	mov	r0, r5
 800a814:	f000 f9d8 	bl	800abc8 <_printf_common>
 800a818:	3001      	adds	r0, #1
 800a81a:	f040 8090 	bne.w	800a93e <_printf_float+0x1e2>
 800a81e:	f04f 30ff 	mov.w	r0, #4294967295
 800a822:	b00d      	add	sp, #52	; 0x34
 800a824:	ecbd 8b02 	vpop	{d8}
 800a828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a82c:	4642      	mov	r2, r8
 800a82e:	464b      	mov	r3, r9
 800a830:	4640      	mov	r0, r8
 800a832:	4649      	mov	r1, r9
 800a834:	f7f6 f97a 	bl	8000b2c <__aeabi_dcmpun>
 800a838:	b140      	cbz	r0, 800a84c <_printf_float+0xf0>
 800a83a:	464b      	mov	r3, r9
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	bfbc      	itt	lt
 800a840:	232d      	movlt	r3, #45	; 0x2d
 800a842:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a846:	487f      	ldr	r0, [pc, #508]	; (800aa44 <_printf_float+0x2e8>)
 800a848:	4b7f      	ldr	r3, [pc, #508]	; (800aa48 <_printf_float+0x2ec>)
 800a84a:	e7d1      	b.n	800a7f0 <_printf_float+0x94>
 800a84c:	6863      	ldr	r3, [r4, #4]
 800a84e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a852:	9206      	str	r2, [sp, #24]
 800a854:	1c5a      	adds	r2, r3, #1
 800a856:	d13f      	bne.n	800a8d8 <_printf_float+0x17c>
 800a858:	2306      	movs	r3, #6
 800a85a:	6063      	str	r3, [r4, #4]
 800a85c:	9b05      	ldr	r3, [sp, #20]
 800a85e:	6861      	ldr	r1, [r4, #4]
 800a860:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a864:	2300      	movs	r3, #0
 800a866:	9303      	str	r3, [sp, #12]
 800a868:	ab0a      	add	r3, sp, #40	; 0x28
 800a86a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a86e:	ab09      	add	r3, sp, #36	; 0x24
 800a870:	ec49 8b10 	vmov	d0, r8, r9
 800a874:	9300      	str	r3, [sp, #0]
 800a876:	6022      	str	r2, [r4, #0]
 800a878:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a87c:	4628      	mov	r0, r5
 800a87e:	f7ff fecd 	bl	800a61c <__cvt>
 800a882:	9b06      	ldr	r3, [sp, #24]
 800a884:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a886:	2b47      	cmp	r3, #71	; 0x47
 800a888:	4680      	mov	r8, r0
 800a88a:	d108      	bne.n	800a89e <_printf_float+0x142>
 800a88c:	1cc8      	adds	r0, r1, #3
 800a88e:	db02      	blt.n	800a896 <_printf_float+0x13a>
 800a890:	6863      	ldr	r3, [r4, #4]
 800a892:	4299      	cmp	r1, r3
 800a894:	dd41      	ble.n	800a91a <_printf_float+0x1be>
 800a896:	f1ab 0b02 	sub.w	fp, fp, #2
 800a89a:	fa5f fb8b 	uxtb.w	fp, fp
 800a89e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a8a2:	d820      	bhi.n	800a8e6 <_printf_float+0x18a>
 800a8a4:	3901      	subs	r1, #1
 800a8a6:	465a      	mov	r2, fp
 800a8a8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a8ac:	9109      	str	r1, [sp, #36]	; 0x24
 800a8ae:	f7ff ff17 	bl	800a6e0 <__exponent>
 800a8b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a8b4:	1813      	adds	r3, r2, r0
 800a8b6:	2a01      	cmp	r2, #1
 800a8b8:	4681      	mov	r9, r0
 800a8ba:	6123      	str	r3, [r4, #16]
 800a8bc:	dc02      	bgt.n	800a8c4 <_printf_float+0x168>
 800a8be:	6822      	ldr	r2, [r4, #0]
 800a8c0:	07d2      	lsls	r2, r2, #31
 800a8c2:	d501      	bpl.n	800a8c8 <_printf_float+0x16c>
 800a8c4:	3301      	adds	r3, #1
 800a8c6:	6123      	str	r3, [r4, #16]
 800a8c8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d09c      	beq.n	800a80a <_printf_float+0xae>
 800a8d0:	232d      	movs	r3, #45	; 0x2d
 800a8d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a8d6:	e798      	b.n	800a80a <_printf_float+0xae>
 800a8d8:	9a06      	ldr	r2, [sp, #24]
 800a8da:	2a47      	cmp	r2, #71	; 0x47
 800a8dc:	d1be      	bne.n	800a85c <_printf_float+0x100>
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d1bc      	bne.n	800a85c <_printf_float+0x100>
 800a8e2:	2301      	movs	r3, #1
 800a8e4:	e7b9      	b.n	800a85a <_printf_float+0xfe>
 800a8e6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a8ea:	d118      	bne.n	800a91e <_printf_float+0x1c2>
 800a8ec:	2900      	cmp	r1, #0
 800a8ee:	6863      	ldr	r3, [r4, #4]
 800a8f0:	dd0b      	ble.n	800a90a <_printf_float+0x1ae>
 800a8f2:	6121      	str	r1, [r4, #16]
 800a8f4:	b913      	cbnz	r3, 800a8fc <_printf_float+0x1a0>
 800a8f6:	6822      	ldr	r2, [r4, #0]
 800a8f8:	07d0      	lsls	r0, r2, #31
 800a8fa:	d502      	bpl.n	800a902 <_printf_float+0x1a6>
 800a8fc:	3301      	adds	r3, #1
 800a8fe:	440b      	add	r3, r1
 800a900:	6123      	str	r3, [r4, #16]
 800a902:	65a1      	str	r1, [r4, #88]	; 0x58
 800a904:	f04f 0900 	mov.w	r9, #0
 800a908:	e7de      	b.n	800a8c8 <_printf_float+0x16c>
 800a90a:	b913      	cbnz	r3, 800a912 <_printf_float+0x1b6>
 800a90c:	6822      	ldr	r2, [r4, #0]
 800a90e:	07d2      	lsls	r2, r2, #31
 800a910:	d501      	bpl.n	800a916 <_printf_float+0x1ba>
 800a912:	3302      	adds	r3, #2
 800a914:	e7f4      	b.n	800a900 <_printf_float+0x1a4>
 800a916:	2301      	movs	r3, #1
 800a918:	e7f2      	b.n	800a900 <_printf_float+0x1a4>
 800a91a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a91e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a920:	4299      	cmp	r1, r3
 800a922:	db05      	blt.n	800a930 <_printf_float+0x1d4>
 800a924:	6823      	ldr	r3, [r4, #0]
 800a926:	6121      	str	r1, [r4, #16]
 800a928:	07d8      	lsls	r0, r3, #31
 800a92a:	d5ea      	bpl.n	800a902 <_printf_float+0x1a6>
 800a92c:	1c4b      	adds	r3, r1, #1
 800a92e:	e7e7      	b.n	800a900 <_printf_float+0x1a4>
 800a930:	2900      	cmp	r1, #0
 800a932:	bfd4      	ite	le
 800a934:	f1c1 0202 	rsble	r2, r1, #2
 800a938:	2201      	movgt	r2, #1
 800a93a:	4413      	add	r3, r2
 800a93c:	e7e0      	b.n	800a900 <_printf_float+0x1a4>
 800a93e:	6823      	ldr	r3, [r4, #0]
 800a940:	055a      	lsls	r2, r3, #21
 800a942:	d407      	bmi.n	800a954 <_printf_float+0x1f8>
 800a944:	6923      	ldr	r3, [r4, #16]
 800a946:	4642      	mov	r2, r8
 800a948:	4631      	mov	r1, r6
 800a94a:	4628      	mov	r0, r5
 800a94c:	47b8      	blx	r7
 800a94e:	3001      	adds	r0, #1
 800a950:	d12c      	bne.n	800a9ac <_printf_float+0x250>
 800a952:	e764      	b.n	800a81e <_printf_float+0xc2>
 800a954:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a958:	f240 80e0 	bls.w	800ab1c <_printf_float+0x3c0>
 800a95c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a960:	2200      	movs	r2, #0
 800a962:	2300      	movs	r3, #0
 800a964:	f7f6 f8b0 	bl	8000ac8 <__aeabi_dcmpeq>
 800a968:	2800      	cmp	r0, #0
 800a96a:	d034      	beq.n	800a9d6 <_printf_float+0x27a>
 800a96c:	4a37      	ldr	r2, [pc, #220]	; (800aa4c <_printf_float+0x2f0>)
 800a96e:	2301      	movs	r3, #1
 800a970:	4631      	mov	r1, r6
 800a972:	4628      	mov	r0, r5
 800a974:	47b8      	blx	r7
 800a976:	3001      	adds	r0, #1
 800a978:	f43f af51 	beq.w	800a81e <_printf_float+0xc2>
 800a97c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a980:	429a      	cmp	r2, r3
 800a982:	db02      	blt.n	800a98a <_printf_float+0x22e>
 800a984:	6823      	ldr	r3, [r4, #0]
 800a986:	07d8      	lsls	r0, r3, #31
 800a988:	d510      	bpl.n	800a9ac <_printf_float+0x250>
 800a98a:	ee18 3a10 	vmov	r3, s16
 800a98e:	4652      	mov	r2, sl
 800a990:	4631      	mov	r1, r6
 800a992:	4628      	mov	r0, r5
 800a994:	47b8      	blx	r7
 800a996:	3001      	adds	r0, #1
 800a998:	f43f af41 	beq.w	800a81e <_printf_float+0xc2>
 800a99c:	f04f 0800 	mov.w	r8, #0
 800a9a0:	f104 091a 	add.w	r9, r4, #26
 800a9a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9a6:	3b01      	subs	r3, #1
 800a9a8:	4543      	cmp	r3, r8
 800a9aa:	dc09      	bgt.n	800a9c0 <_printf_float+0x264>
 800a9ac:	6823      	ldr	r3, [r4, #0]
 800a9ae:	079b      	lsls	r3, r3, #30
 800a9b0:	f100 8105 	bmi.w	800abbe <_printf_float+0x462>
 800a9b4:	68e0      	ldr	r0, [r4, #12]
 800a9b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9b8:	4298      	cmp	r0, r3
 800a9ba:	bfb8      	it	lt
 800a9bc:	4618      	movlt	r0, r3
 800a9be:	e730      	b.n	800a822 <_printf_float+0xc6>
 800a9c0:	2301      	movs	r3, #1
 800a9c2:	464a      	mov	r2, r9
 800a9c4:	4631      	mov	r1, r6
 800a9c6:	4628      	mov	r0, r5
 800a9c8:	47b8      	blx	r7
 800a9ca:	3001      	adds	r0, #1
 800a9cc:	f43f af27 	beq.w	800a81e <_printf_float+0xc2>
 800a9d0:	f108 0801 	add.w	r8, r8, #1
 800a9d4:	e7e6      	b.n	800a9a4 <_printf_float+0x248>
 800a9d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	dc39      	bgt.n	800aa50 <_printf_float+0x2f4>
 800a9dc:	4a1b      	ldr	r2, [pc, #108]	; (800aa4c <_printf_float+0x2f0>)
 800a9de:	2301      	movs	r3, #1
 800a9e0:	4631      	mov	r1, r6
 800a9e2:	4628      	mov	r0, r5
 800a9e4:	47b8      	blx	r7
 800a9e6:	3001      	adds	r0, #1
 800a9e8:	f43f af19 	beq.w	800a81e <_printf_float+0xc2>
 800a9ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a9f0:	4313      	orrs	r3, r2
 800a9f2:	d102      	bne.n	800a9fa <_printf_float+0x29e>
 800a9f4:	6823      	ldr	r3, [r4, #0]
 800a9f6:	07d9      	lsls	r1, r3, #31
 800a9f8:	d5d8      	bpl.n	800a9ac <_printf_float+0x250>
 800a9fa:	ee18 3a10 	vmov	r3, s16
 800a9fe:	4652      	mov	r2, sl
 800aa00:	4631      	mov	r1, r6
 800aa02:	4628      	mov	r0, r5
 800aa04:	47b8      	blx	r7
 800aa06:	3001      	adds	r0, #1
 800aa08:	f43f af09 	beq.w	800a81e <_printf_float+0xc2>
 800aa0c:	f04f 0900 	mov.w	r9, #0
 800aa10:	f104 0a1a 	add.w	sl, r4, #26
 800aa14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa16:	425b      	negs	r3, r3
 800aa18:	454b      	cmp	r3, r9
 800aa1a:	dc01      	bgt.n	800aa20 <_printf_float+0x2c4>
 800aa1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa1e:	e792      	b.n	800a946 <_printf_float+0x1ea>
 800aa20:	2301      	movs	r3, #1
 800aa22:	4652      	mov	r2, sl
 800aa24:	4631      	mov	r1, r6
 800aa26:	4628      	mov	r0, r5
 800aa28:	47b8      	blx	r7
 800aa2a:	3001      	adds	r0, #1
 800aa2c:	f43f aef7 	beq.w	800a81e <_printf_float+0xc2>
 800aa30:	f109 0901 	add.w	r9, r9, #1
 800aa34:	e7ee      	b.n	800aa14 <_printf_float+0x2b8>
 800aa36:	bf00      	nop
 800aa38:	7fefffff 	.word	0x7fefffff
 800aa3c:	0800d498 	.word	0x0800d498
 800aa40:	0800d49c 	.word	0x0800d49c
 800aa44:	0800d4a4 	.word	0x0800d4a4
 800aa48:	0800d4a0 	.word	0x0800d4a0
 800aa4c:	0800d4a8 	.word	0x0800d4a8
 800aa50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aa52:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aa54:	429a      	cmp	r2, r3
 800aa56:	bfa8      	it	ge
 800aa58:	461a      	movge	r2, r3
 800aa5a:	2a00      	cmp	r2, #0
 800aa5c:	4691      	mov	r9, r2
 800aa5e:	dc37      	bgt.n	800aad0 <_printf_float+0x374>
 800aa60:	f04f 0b00 	mov.w	fp, #0
 800aa64:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aa68:	f104 021a 	add.w	r2, r4, #26
 800aa6c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aa6e:	9305      	str	r3, [sp, #20]
 800aa70:	eba3 0309 	sub.w	r3, r3, r9
 800aa74:	455b      	cmp	r3, fp
 800aa76:	dc33      	bgt.n	800aae0 <_printf_float+0x384>
 800aa78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aa7c:	429a      	cmp	r2, r3
 800aa7e:	db3b      	blt.n	800aaf8 <_printf_float+0x39c>
 800aa80:	6823      	ldr	r3, [r4, #0]
 800aa82:	07da      	lsls	r2, r3, #31
 800aa84:	d438      	bmi.n	800aaf8 <_printf_float+0x39c>
 800aa86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aa88:	9b05      	ldr	r3, [sp, #20]
 800aa8a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aa8c:	1ad3      	subs	r3, r2, r3
 800aa8e:	eba2 0901 	sub.w	r9, r2, r1
 800aa92:	4599      	cmp	r9, r3
 800aa94:	bfa8      	it	ge
 800aa96:	4699      	movge	r9, r3
 800aa98:	f1b9 0f00 	cmp.w	r9, #0
 800aa9c:	dc35      	bgt.n	800ab0a <_printf_float+0x3ae>
 800aa9e:	f04f 0800 	mov.w	r8, #0
 800aaa2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aaa6:	f104 0a1a 	add.w	sl, r4, #26
 800aaaa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aaae:	1a9b      	subs	r3, r3, r2
 800aab0:	eba3 0309 	sub.w	r3, r3, r9
 800aab4:	4543      	cmp	r3, r8
 800aab6:	f77f af79 	ble.w	800a9ac <_printf_float+0x250>
 800aaba:	2301      	movs	r3, #1
 800aabc:	4652      	mov	r2, sl
 800aabe:	4631      	mov	r1, r6
 800aac0:	4628      	mov	r0, r5
 800aac2:	47b8      	blx	r7
 800aac4:	3001      	adds	r0, #1
 800aac6:	f43f aeaa 	beq.w	800a81e <_printf_float+0xc2>
 800aaca:	f108 0801 	add.w	r8, r8, #1
 800aace:	e7ec      	b.n	800aaaa <_printf_float+0x34e>
 800aad0:	4613      	mov	r3, r2
 800aad2:	4631      	mov	r1, r6
 800aad4:	4642      	mov	r2, r8
 800aad6:	4628      	mov	r0, r5
 800aad8:	47b8      	blx	r7
 800aada:	3001      	adds	r0, #1
 800aadc:	d1c0      	bne.n	800aa60 <_printf_float+0x304>
 800aade:	e69e      	b.n	800a81e <_printf_float+0xc2>
 800aae0:	2301      	movs	r3, #1
 800aae2:	4631      	mov	r1, r6
 800aae4:	4628      	mov	r0, r5
 800aae6:	9205      	str	r2, [sp, #20]
 800aae8:	47b8      	blx	r7
 800aaea:	3001      	adds	r0, #1
 800aaec:	f43f ae97 	beq.w	800a81e <_printf_float+0xc2>
 800aaf0:	9a05      	ldr	r2, [sp, #20]
 800aaf2:	f10b 0b01 	add.w	fp, fp, #1
 800aaf6:	e7b9      	b.n	800aa6c <_printf_float+0x310>
 800aaf8:	ee18 3a10 	vmov	r3, s16
 800aafc:	4652      	mov	r2, sl
 800aafe:	4631      	mov	r1, r6
 800ab00:	4628      	mov	r0, r5
 800ab02:	47b8      	blx	r7
 800ab04:	3001      	adds	r0, #1
 800ab06:	d1be      	bne.n	800aa86 <_printf_float+0x32a>
 800ab08:	e689      	b.n	800a81e <_printf_float+0xc2>
 800ab0a:	9a05      	ldr	r2, [sp, #20]
 800ab0c:	464b      	mov	r3, r9
 800ab0e:	4442      	add	r2, r8
 800ab10:	4631      	mov	r1, r6
 800ab12:	4628      	mov	r0, r5
 800ab14:	47b8      	blx	r7
 800ab16:	3001      	adds	r0, #1
 800ab18:	d1c1      	bne.n	800aa9e <_printf_float+0x342>
 800ab1a:	e680      	b.n	800a81e <_printf_float+0xc2>
 800ab1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab1e:	2a01      	cmp	r2, #1
 800ab20:	dc01      	bgt.n	800ab26 <_printf_float+0x3ca>
 800ab22:	07db      	lsls	r3, r3, #31
 800ab24:	d538      	bpl.n	800ab98 <_printf_float+0x43c>
 800ab26:	2301      	movs	r3, #1
 800ab28:	4642      	mov	r2, r8
 800ab2a:	4631      	mov	r1, r6
 800ab2c:	4628      	mov	r0, r5
 800ab2e:	47b8      	blx	r7
 800ab30:	3001      	adds	r0, #1
 800ab32:	f43f ae74 	beq.w	800a81e <_printf_float+0xc2>
 800ab36:	ee18 3a10 	vmov	r3, s16
 800ab3a:	4652      	mov	r2, sl
 800ab3c:	4631      	mov	r1, r6
 800ab3e:	4628      	mov	r0, r5
 800ab40:	47b8      	blx	r7
 800ab42:	3001      	adds	r0, #1
 800ab44:	f43f ae6b 	beq.w	800a81e <_printf_float+0xc2>
 800ab48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	2300      	movs	r3, #0
 800ab50:	f7f5 ffba 	bl	8000ac8 <__aeabi_dcmpeq>
 800ab54:	b9d8      	cbnz	r0, 800ab8e <_printf_float+0x432>
 800ab56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab58:	f108 0201 	add.w	r2, r8, #1
 800ab5c:	3b01      	subs	r3, #1
 800ab5e:	4631      	mov	r1, r6
 800ab60:	4628      	mov	r0, r5
 800ab62:	47b8      	blx	r7
 800ab64:	3001      	adds	r0, #1
 800ab66:	d10e      	bne.n	800ab86 <_printf_float+0x42a>
 800ab68:	e659      	b.n	800a81e <_printf_float+0xc2>
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	4652      	mov	r2, sl
 800ab6e:	4631      	mov	r1, r6
 800ab70:	4628      	mov	r0, r5
 800ab72:	47b8      	blx	r7
 800ab74:	3001      	adds	r0, #1
 800ab76:	f43f ae52 	beq.w	800a81e <_printf_float+0xc2>
 800ab7a:	f108 0801 	add.w	r8, r8, #1
 800ab7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab80:	3b01      	subs	r3, #1
 800ab82:	4543      	cmp	r3, r8
 800ab84:	dcf1      	bgt.n	800ab6a <_printf_float+0x40e>
 800ab86:	464b      	mov	r3, r9
 800ab88:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ab8c:	e6dc      	b.n	800a948 <_printf_float+0x1ec>
 800ab8e:	f04f 0800 	mov.w	r8, #0
 800ab92:	f104 0a1a 	add.w	sl, r4, #26
 800ab96:	e7f2      	b.n	800ab7e <_printf_float+0x422>
 800ab98:	2301      	movs	r3, #1
 800ab9a:	4642      	mov	r2, r8
 800ab9c:	e7df      	b.n	800ab5e <_printf_float+0x402>
 800ab9e:	2301      	movs	r3, #1
 800aba0:	464a      	mov	r2, r9
 800aba2:	4631      	mov	r1, r6
 800aba4:	4628      	mov	r0, r5
 800aba6:	47b8      	blx	r7
 800aba8:	3001      	adds	r0, #1
 800abaa:	f43f ae38 	beq.w	800a81e <_printf_float+0xc2>
 800abae:	f108 0801 	add.w	r8, r8, #1
 800abb2:	68e3      	ldr	r3, [r4, #12]
 800abb4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800abb6:	1a5b      	subs	r3, r3, r1
 800abb8:	4543      	cmp	r3, r8
 800abba:	dcf0      	bgt.n	800ab9e <_printf_float+0x442>
 800abbc:	e6fa      	b.n	800a9b4 <_printf_float+0x258>
 800abbe:	f04f 0800 	mov.w	r8, #0
 800abc2:	f104 0919 	add.w	r9, r4, #25
 800abc6:	e7f4      	b.n	800abb2 <_printf_float+0x456>

0800abc8 <_printf_common>:
 800abc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abcc:	4616      	mov	r6, r2
 800abce:	4699      	mov	r9, r3
 800abd0:	688a      	ldr	r2, [r1, #8]
 800abd2:	690b      	ldr	r3, [r1, #16]
 800abd4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800abd8:	4293      	cmp	r3, r2
 800abda:	bfb8      	it	lt
 800abdc:	4613      	movlt	r3, r2
 800abde:	6033      	str	r3, [r6, #0]
 800abe0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800abe4:	4607      	mov	r7, r0
 800abe6:	460c      	mov	r4, r1
 800abe8:	b10a      	cbz	r2, 800abee <_printf_common+0x26>
 800abea:	3301      	adds	r3, #1
 800abec:	6033      	str	r3, [r6, #0]
 800abee:	6823      	ldr	r3, [r4, #0]
 800abf0:	0699      	lsls	r1, r3, #26
 800abf2:	bf42      	ittt	mi
 800abf4:	6833      	ldrmi	r3, [r6, #0]
 800abf6:	3302      	addmi	r3, #2
 800abf8:	6033      	strmi	r3, [r6, #0]
 800abfa:	6825      	ldr	r5, [r4, #0]
 800abfc:	f015 0506 	ands.w	r5, r5, #6
 800ac00:	d106      	bne.n	800ac10 <_printf_common+0x48>
 800ac02:	f104 0a19 	add.w	sl, r4, #25
 800ac06:	68e3      	ldr	r3, [r4, #12]
 800ac08:	6832      	ldr	r2, [r6, #0]
 800ac0a:	1a9b      	subs	r3, r3, r2
 800ac0c:	42ab      	cmp	r3, r5
 800ac0e:	dc26      	bgt.n	800ac5e <_printf_common+0x96>
 800ac10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ac14:	1e13      	subs	r3, r2, #0
 800ac16:	6822      	ldr	r2, [r4, #0]
 800ac18:	bf18      	it	ne
 800ac1a:	2301      	movne	r3, #1
 800ac1c:	0692      	lsls	r2, r2, #26
 800ac1e:	d42b      	bmi.n	800ac78 <_printf_common+0xb0>
 800ac20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ac24:	4649      	mov	r1, r9
 800ac26:	4638      	mov	r0, r7
 800ac28:	47c0      	blx	r8
 800ac2a:	3001      	adds	r0, #1
 800ac2c:	d01e      	beq.n	800ac6c <_printf_common+0xa4>
 800ac2e:	6823      	ldr	r3, [r4, #0]
 800ac30:	68e5      	ldr	r5, [r4, #12]
 800ac32:	6832      	ldr	r2, [r6, #0]
 800ac34:	f003 0306 	and.w	r3, r3, #6
 800ac38:	2b04      	cmp	r3, #4
 800ac3a:	bf08      	it	eq
 800ac3c:	1aad      	subeq	r5, r5, r2
 800ac3e:	68a3      	ldr	r3, [r4, #8]
 800ac40:	6922      	ldr	r2, [r4, #16]
 800ac42:	bf0c      	ite	eq
 800ac44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ac48:	2500      	movne	r5, #0
 800ac4a:	4293      	cmp	r3, r2
 800ac4c:	bfc4      	itt	gt
 800ac4e:	1a9b      	subgt	r3, r3, r2
 800ac50:	18ed      	addgt	r5, r5, r3
 800ac52:	2600      	movs	r6, #0
 800ac54:	341a      	adds	r4, #26
 800ac56:	42b5      	cmp	r5, r6
 800ac58:	d11a      	bne.n	800ac90 <_printf_common+0xc8>
 800ac5a:	2000      	movs	r0, #0
 800ac5c:	e008      	b.n	800ac70 <_printf_common+0xa8>
 800ac5e:	2301      	movs	r3, #1
 800ac60:	4652      	mov	r2, sl
 800ac62:	4649      	mov	r1, r9
 800ac64:	4638      	mov	r0, r7
 800ac66:	47c0      	blx	r8
 800ac68:	3001      	adds	r0, #1
 800ac6a:	d103      	bne.n	800ac74 <_printf_common+0xac>
 800ac6c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac74:	3501      	adds	r5, #1
 800ac76:	e7c6      	b.n	800ac06 <_printf_common+0x3e>
 800ac78:	18e1      	adds	r1, r4, r3
 800ac7a:	1c5a      	adds	r2, r3, #1
 800ac7c:	2030      	movs	r0, #48	; 0x30
 800ac7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ac82:	4422      	add	r2, r4
 800ac84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ac88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ac8c:	3302      	adds	r3, #2
 800ac8e:	e7c7      	b.n	800ac20 <_printf_common+0x58>
 800ac90:	2301      	movs	r3, #1
 800ac92:	4622      	mov	r2, r4
 800ac94:	4649      	mov	r1, r9
 800ac96:	4638      	mov	r0, r7
 800ac98:	47c0      	blx	r8
 800ac9a:	3001      	adds	r0, #1
 800ac9c:	d0e6      	beq.n	800ac6c <_printf_common+0xa4>
 800ac9e:	3601      	adds	r6, #1
 800aca0:	e7d9      	b.n	800ac56 <_printf_common+0x8e>
	...

0800aca4 <_printf_i>:
 800aca4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aca8:	460c      	mov	r4, r1
 800acaa:	4691      	mov	r9, r2
 800acac:	7e27      	ldrb	r7, [r4, #24]
 800acae:	990c      	ldr	r1, [sp, #48]	; 0x30
 800acb0:	2f78      	cmp	r7, #120	; 0x78
 800acb2:	4680      	mov	r8, r0
 800acb4:	469a      	mov	sl, r3
 800acb6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800acba:	d807      	bhi.n	800accc <_printf_i+0x28>
 800acbc:	2f62      	cmp	r7, #98	; 0x62
 800acbe:	d80a      	bhi.n	800acd6 <_printf_i+0x32>
 800acc0:	2f00      	cmp	r7, #0
 800acc2:	f000 80d8 	beq.w	800ae76 <_printf_i+0x1d2>
 800acc6:	2f58      	cmp	r7, #88	; 0x58
 800acc8:	f000 80a3 	beq.w	800ae12 <_printf_i+0x16e>
 800accc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800acd0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800acd4:	e03a      	b.n	800ad4c <_printf_i+0xa8>
 800acd6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800acda:	2b15      	cmp	r3, #21
 800acdc:	d8f6      	bhi.n	800accc <_printf_i+0x28>
 800acde:	a001      	add	r0, pc, #4	; (adr r0, 800ace4 <_printf_i+0x40>)
 800ace0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ace4:	0800ad3d 	.word	0x0800ad3d
 800ace8:	0800ad51 	.word	0x0800ad51
 800acec:	0800accd 	.word	0x0800accd
 800acf0:	0800accd 	.word	0x0800accd
 800acf4:	0800accd 	.word	0x0800accd
 800acf8:	0800accd 	.word	0x0800accd
 800acfc:	0800ad51 	.word	0x0800ad51
 800ad00:	0800accd 	.word	0x0800accd
 800ad04:	0800accd 	.word	0x0800accd
 800ad08:	0800accd 	.word	0x0800accd
 800ad0c:	0800accd 	.word	0x0800accd
 800ad10:	0800ae5d 	.word	0x0800ae5d
 800ad14:	0800ad81 	.word	0x0800ad81
 800ad18:	0800ae3f 	.word	0x0800ae3f
 800ad1c:	0800accd 	.word	0x0800accd
 800ad20:	0800accd 	.word	0x0800accd
 800ad24:	0800ae7f 	.word	0x0800ae7f
 800ad28:	0800accd 	.word	0x0800accd
 800ad2c:	0800ad81 	.word	0x0800ad81
 800ad30:	0800accd 	.word	0x0800accd
 800ad34:	0800accd 	.word	0x0800accd
 800ad38:	0800ae47 	.word	0x0800ae47
 800ad3c:	680b      	ldr	r3, [r1, #0]
 800ad3e:	1d1a      	adds	r2, r3, #4
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	600a      	str	r2, [r1, #0]
 800ad44:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ad48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ad4c:	2301      	movs	r3, #1
 800ad4e:	e0a3      	b.n	800ae98 <_printf_i+0x1f4>
 800ad50:	6825      	ldr	r5, [r4, #0]
 800ad52:	6808      	ldr	r0, [r1, #0]
 800ad54:	062e      	lsls	r6, r5, #24
 800ad56:	f100 0304 	add.w	r3, r0, #4
 800ad5a:	d50a      	bpl.n	800ad72 <_printf_i+0xce>
 800ad5c:	6805      	ldr	r5, [r0, #0]
 800ad5e:	600b      	str	r3, [r1, #0]
 800ad60:	2d00      	cmp	r5, #0
 800ad62:	da03      	bge.n	800ad6c <_printf_i+0xc8>
 800ad64:	232d      	movs	r3, #45	; 0x2d
 800ad66:	426d      	negs	r5, r5
 800ad68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad6c:	485e      	ldr	r0, [pc, #376]	; (800aee8 <_printf_i+0x244>)
 800ad6e:	230a      	movs	r3, #10
 800ad70:	e019      	b.n	800ada6 <_printf_i+0x102>
 800ad72:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ad76:	6805      	ldr	r5, [r0, #0]
 800ad78:	600b      	str	r3, [r1, #0]
 800ad7a:	bf18      	it	ne
 800ad7c:	b22d      	sxthne	r5, r5
 800ad7e:	e7ef      	b.n	800ad60 <_printf_i+0xbc>
 800ad80:	680b      	ldr	r3, [r1, #0]
 800ad82:	6825      	ldr	r5, [r4, #0]
 800ad84:	1d18      	adds	r0, r3, #4
 800ad86:	6008      	str	r0, [r1, #0]
 800ad88:	0628      	lsls	r0, r5, #24
 800ad8a:	d501      	bpl.n	800ad90 <_printf_i+0xec>
 800ad8c:	681d      	ldr	r5, [r3, #0]
 800ad8e:	e002      	b.n	800ad96 <_printf_i+0xf2>
 800ad90:	0669      	lsls	r1, r5, #25
 800ad92:	d5fb      	bpl.n	800ad8c <_printf_i+0xe8>
 800ad94:	881d      	ldrh	r5, [r3, #0]
 800ad96:	4854      	ldr	r0, [pc, #336]	; (800aee8 <_printf_i+0x244>)
 800ad98:	2f6f      	cmp	r7, #111	; 0x6f
 800ad9a:	bf0c      	ite	eq
 800ad9c:	2308      	moveq	r3, #8
 800ad9e:	230a      	movne	r3, #10
 800ada0:	2100      	movs	r1, #0
 800ada2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ada6:	6866      	ldr	r6, [r4, #4]
 800ada8:	60a6      	str	r6, [r4, #8]
 800adaa:	2e00      	cmp	r6, #0
 800adac:	bfa2      	ittt	ge
 800adae:	6821      	ldrge	r1, [r4, #0]
 800adb0:	f021 0104 	bicge.w	r1, r1, #4
 800adb4:	6021      	strge	r1, [r4, #0]
 800adb6:	b90d      	cbnz	r5, 800adbc <_printf_i+0x118>
 800adb8:	2e00      	cmp	r6, #0
 800adba:	d04d      	beq.n	800ae58 <_printf_i+0x1b4>
 800adbc:	4616      	mov	r6, r2
 800adbe:	fbb5 f1f3 	udiv	r1, r5, r3
 800adc2:	fb03 5711 	mls	r7, r3, r1, r5
 800adc6:	5dc7      	ldrb	r7, [r0, r7]
 800adc8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800adcc:	462f      	mov	r7, r5
 800adce:	42bb      	cmp	r3, r7
 800add0:	460d      	mov	r5, r1
 800add2:	d9f4      	bls.n	800adbe <_printf_i+0x11a>
 800add4:	2b08      	cmp	r3, #8
 800add6:	d10b      	bne.n	800adf0 <_printf_i+0x14c>
 800add8:	6823      	ldr	r3, [r4, #0]
 800adda:	07df      	lsls	r7, r3, #31
 800addc:	d508      	bpl.n	800adf0 <_printf_i+0x14c>
 800adde:	6923      	ldr	r3, [r4, #16]
 800ade0:	6861      	ldr	r1, [r4, #4]
 800ade2:	4299      	cmp	r1, r3
 800ade4:	bfde      	ittt	le
 800ade6:	2330      	movle	r3, #48	; 0x30
 800ade8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800adec:	f106 36ff 	addle.w	r6, r6, #4294967295
 800adf0:	1b92      	subs	r2, r2, r6
 800adf2:	6122      	str	r2, [r4, #16]
 800adf4:	f8cd a000 	str.w	sl, [sp]
 800adf8:	464b      	mov	r3, r9
 800adfa:	aa03      	add	r2, sp, #12
 800adfc:	4621      	mov	r1, r4
 800adfe:	4640      	mov	r0, r8
 800ae00:	f7ff fee2 	bl	800abc8 <_printf_common>
 800ae04:	3001      	adds	r0, #1
 800ae06:	d14c      	bne.n	800aea2 <_printf_i+0x1fe>
 800ae08:	f04f 30ff 	mov.w	r0, #4294967295
 800ae0c:	b004      	add	sp, #16
 800ae0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae12:	4835      	ldr	r0, [pc, #212]	; (800aee8 <_printf_i+0x244>)
 800ae14:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ae18:	6823      	ldr	r3, [r4, #0]
 800ae1a:	680e      	ldr	r6, [r1, #0]
 800ae1c:	061f      	lsls	r7, r3, #24
 800ae1e:	f856 5b04 	ldr.w	r5, [r6], #4
 800ae22:	600e      	str	r6, [r1, #0]
 800ae24:	d514      	bpl.n	800ae50 <_printf_i+0x1ac>
 800ae26:	07d9      	lsls	r1, r3, #31
 800ae28:	bf44      	itt	mi
 800ae2a:	f043 0320 	orrmi.w	r3, r3, #32
 800ae2e:	6023      	strmi	r3, [r4, #0]
 800ae30:	b91d      	cbnz	r5, 800ae3a <_printf_i+0x196>
 800ae32:	6823      	ldr	r3, [r4, #0]
 800ae34:	f023 0320 	bic.w	r3, r3, #32
 800ae38:	6023      	str	r3, [r4, #0]
 800ae3a:	2310      	movs	r3, #16
 800ae3c:	e7b0      	b.n	800ada0 <_printf_i+0xfc>
 800ae3e:	6823      	ldr	r3, [r4, #0]
 800ae40:	f043 0320 	orr.w	r3, r3, #32
 800ae44:	6023      	str	r3, [r4, #0]
 800ae46:	2378      	movs	r3, #120	; 0x78
 800ae48:	4828      	ldr	r0, [pc, #160]	; (800aeec <_printf_i+0x248>)
 800ae4a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ae4e:	e7e3      	b.n	800ae18 <_printf_i+0x174>
 800ae50:	065e      	lsls	r6, r3, #25
 800ae52:	bf48      	it	mi
 800ae54:	b2ad      	uxthmi	r5, r5
 800ae56:	e7e6      	b.n	800ae26 <_printf_i+0x182>
 800ae58:	4616      	mov	r6, r2
 800ae5a:	e7bb      	b.n	800add4 <_printf_i+0x130>
 800ae5c:	680b      	ldr	r3, [r1, #0]
 800ae5e:	6826      	ldr	r6, [r4, #0]
 800ae60:	6960      	ldr	r0, [r4, #20]
 800ae62:	1d1d      	adds	r5, r3, #4
 800ae64:	600d      	str	r5, [r1, #0]
 800ae66:	0635      	lsls	r5, r6, #24
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	d501      	bpl.n	800ae70 <_printf_i+0x1cc>
 800ae6c:	6018      	str	r0, [r3, #0]
 800ae6e:	e002      	b.n	800ae76 <_printf_i+0x1d2>
 800ae70:	0671      	lsls	r1, r6, #25
 800ae72:	d5fb      	bpl.n	800ae6c <_printf_i+0x1c8>
 800ae74:	8018      	strh	r0, [r3, #0]
 800ae76:	2300      	movs	r3, #0
 800ae78:	6123      	str	r3, [r4, #16]
 800ae7a:	4616      	mov	r6, r2
 800ae7c:	e7ba      	b.n	800adf4 <_printf_i+0x150>
 800ae7e:	680b      	ldr	r3, [r1, #0]
 800ae80:	1d1a      	adds	r2, r3, #4
 800ae82:	600a      	str	r2, [r1, #0]
 800ae84:	681e      	ldr	r6, [r3, #0]
 800ae86:	6862      	ldr	r2, [r4, #4]
 800ae88:	2100      	movs	r1, #0
 800ae8a:	4630      	mov	r0, r6
 800ae8c:	f7f5 f9a8 	bl	80001e0 <memchr>
 800ae90:	b108      	cbz	r0, 800ae96 <_printf_i+0x1f2>
 800ae92:	1b80      	subs	r0, r0, r6
 800ae94:	6060      	str	r0, [r4, #4]
 800ae96:	6863      	ldr	r3, [r4, #4]
 800ae98:	6123      	str	r3, [r4, #16]
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aea0:	e7a8      	b.n	800adf4 <_printf_i+0x150>
 800aea2:	6923      	ldr	r3, [r4, #16]
 800aea4:	4632      	mov	r2, r6
 800aea6:	4649      	mov	r1, r9
 800aea8:	4640      	mov	r0, r8
 800aeaa:	47d0      	blx	sl
 800aeac:	3001      	adds	r0, #1
 800aeae:	d0ab      	beq.n	800ae08 <_printf_i+0x164>
 800aeb0:	6823      	ldr	r3, [r4, #0]
 800aeb2:	079b      	lsls	r3, r3, #30
 800aeb4:	d413      	bmi.n	800aede <_printf_i+0x23a>
 800aeb6:	68e0      	ldr	r0, [r4, #12]
 800aeb8:	9b03      	ldr	r3, [sp, #12]
 800aeba:	4298      	cmp	r0, r3
 800aebc:	bfb8      	it	lt
 800aebe:	4618      	movlt	r0, r3
 800aec0:	e7a4      	b.n	800ae0c <_printf_i+0x168>
 800aec2:	2301      	movs	r3, #1
 800aec4:	4632      	mov	r2, r6
 800aec6:	4649      	mov	r1, r9
 800aec8:	4640      	mov	r0, r8
 800aeca:	47d0      	blx	sl
 800aecc:	3001      	adds	r0, #1
 800aece:	d09b      	beq.n	800ae08 <_printf_i+0x164>
 800aed0:	3501      	adds	r5, #1
 800aed2:	68e3      	ldr	r3, [r4, #12]
 800aed4:	9903      	ldr	r1, [sp, #12]
 800aed6:	1a5b      	subs	r3, r3, r1
 800aed8:	42ab      	cmp	r3, r5
 800aeda:	dcf2      	bgt.n	800aec2 <_printf_i+0x21e>
 800aedc:	e7eb      	b.n	800aeb6 <_printf_i+0x212>
 800aede:	2500      	movs	r5, #0
 800aee0:	f104 0619 	add.w	r6, r4, #25
 800aee4:	e7f5      	b.n	800aed2 <_printf_i+0x22e>
 800aee6:	bf00      	nop
 800aee8:	0800d4aa 	.word	0x0800d4aa
 800aeec:	0800d4bb 	.word	0x0800d4bb

0800aef0 <iprintf>:
 800aef0:	b40f      	push	{r0, r1, r2, r3}
 800aef2:	4b0a      	ldr	r3, [pc, #40]	; (800af1c <iprintf+0x2c>)
 800aef4:	b513      	push	{r0, r1, r4, lr}
 800aef6:	681c      	ldr	r4, [r3, #0]
 800aef8:	b124      	cbz	r4, 800af04 <iprintf+0x14>
 800aefa:	69a3      	ldr	r3, [r4, #24]
 800aefc:	b913      	cbnz	r3, 800af04 <iprintf+0x14>
 800aefe:	4620      	mov	r0, r4
 800af00:	f000 fede 	bl	800bcc0 <__sinit>
 800af04:	ab05      	add	r3, sp, #20
 800af06:	9a04      	ldr	r2, [sp, #16]
 800af08:	68a1      	ldr	r1, [r4, #8]
 800af0a:	9301      	str	r3, [sp, #4]
 800af0c:	4620      	mov	r0, r4
 800af0e:	f001 fbf5 	bl	800c6fc <_vfiprintf_r>
 800af12:	b002      	add	sp, #8
 800af14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af18:	b004      	add	sp, #16
 800af1a:	4770      	bx	lr
 800af1c:	20000090 	.word	0x20000090

0800af20 <quorem>:
 800af20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af24:	6903      	ldr	r3, [r0, #16]
 800af26:	690c      	ldr	r4, [r1, #16]
 800af28:	42a3      	cmp	r3, r4
 800af2a:	4607      	mov	r7, r0
 800af2c:	f2c0 8081 	blt.w	800b032 <quorem+0x112>
 800af30:	3c01      	subs	r4, #1
 800af32:	f101 0814 	add.w	r8, r1, #20
 800af36:	f100 0514 	add.w	r5, r0, #20
 800af3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800af3e:	9301      	str	r3, [sp, #4]
 800af40:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800af44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800af48:	3301      	adds	r3, #1
 800af4a:	429a      	cmp	r2, r3
 800af4c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800af50:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800af54:	fbb2 f6f3 	udiv	r6, r2, r3
 800af58:	d331      	bcc.n	800afbe <quorem+0x9e>
 800af5a:	f04f 0e00 	mov.w	lr, #0
 800af5e:	4640      	mov	r0, r8
 800af60:	46ac      	mov	ip, r5
 800af62:	46f2      	mov	sl, lr
 800af64:	f850 2b04 	ldr.w	r2, [r0], #4
 800af68:	b293      	uxth	r3, r2
 800af6a:	fb06 e303 	mla	r3, r6, r3, lr
 800af6e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800af72:	b29b      	uxth	r3, r3
 800af74:	ebaa 0303 	sub.w	r3, sl, r3
 800af78:	0c12      	lsrs	r2, r2, #16
 800af7a:	f8dc a000 	ldr.w	sl, [ip]
 800af7e:	fb06 e202 	mla	r2, r6, r2, lr
 800af82:	fa13 f38a 	uxtah	r3, r3, sl
 800af86:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800af8a:	fa1f fa82 	uxth.w	sl, r2
 800af8e:	f8dc 2000 	ldr.w	r2, [ip]
 800af92:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800af96:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800af9a:	b29b      	uxth	r3, r3
 800af9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800afa0:	4581      	cmp	r9, r0
 800afa2:	f84c 3b04 	str.w	r3, [ip], #4
 800afa6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800afaa:	d2db      	bcs.n	800af64 <quorem+0x44>
 800afac:	f855 300b 	ldr.w	r3, [r5, fp]
 800afb0:	b92b      	cbnz	r3, 800afbe <quorem+0x9e>
 800afb2:	9b01      	ldr	r3, [sp, #4]
 800afb4:	3b04      	subs	r3, #4
 800afb6:	429d      	cmp	r5, r3
 800afb8:	461a      	mov	r2, r3
 800afba:	d32e      	bcc.n	800b01a <quorem+0xfa>
 800afbc:	613c      	str	r4, [r7, #16]
 800afbe:	4638      	mov	r0, r7
 800afc0:	f001 f9b8 	bl	800c334 <__mcmp>
 800afc4:	2800      	cmp	r0, #0
 800afc6:	db24      	blt.n	800b012 <quorem+0xf2>
 800afc8:	3601      	adds	r6, #1
 800afca:	4628      	mov	r0, r5
 800afcc:	f04f 0c00 	mov.w	ip, #0
 800afd0:	f858 2b04 	ldr.w	r2, [r8], #4
 800afd4:	f8d0 e000 	ldr.w	lr, [r0]
 800afd8:	b293      	uxth	r3, r2
 800afda:	ebac 0303 	sub.w	r3, ip, r3
 800afde:	0c12      	lsrs	r2, r2, #16
 800afe0:	fa13 f38e 	uxtah	r3, r3, lr
 800afe4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800afe8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800afec:	b29b      	uxth	r3, r3
 800afee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aff2:	45c1      	cmp	r9, r8
 800aff4:	f840 3b04 	str.w	r3, [r0], #4
 800aff8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800affc:	d2e8      	bcs.n	800afd0 <quorem+0xb0>
 800affe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b002:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b006:	b922      	cbnz	r2, 800b012 <quorem+0xf2>
 800b008:	3b04      	subs	r3, #4
 800b00a:	429d      	cmp	r5, r3
 800b00c:	461a      	mov	r2, r3
 800b00e:	d30a      	bcc.n	800b026 <quorem+0x106>
 800b010:	613c      	str	r4, [r7, #16]
 800b012:	4630      	mov	r0, r6
 800b014:	b003      	add	sp, #12
 800b016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b01a:	6812      	ldr	r2, [r2, #0]
 800b01c:	3b04      	subs	r3, #4
 800b01e:	2a00      	cmp	r2, #0
 800b020:	d1cc      	bne.n	800afbc <quorem+0x9c>
 800b022:	3c01      	subs	r4, #1
 800b024:	e7c7      	b.n	800afb6 <quorem+0x96>
 800b026:	6812      	ldr	r2, [r2, #0]
 800b028:	3b04      	subs	r3, #4
 800b02a:	2a00      	cmp	r2, #0
 800b02c:	d1f0      	bne.n	800b010 <quorem+0xf0>
 800b02e:	3c01      	subs	r4, #1
 800b030:	e7eb      	b.n	800b00a <quorem+0xea>
 800b032:	2000      	movs	r0, #0
 800b034:	e7ee      	b.n	800b014 <quorem+0xf4>
	...

0800b038 <_dtoa_r>:
 800b038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b03c:	ed2d 8b02 	vpush	{d8}
 800b040:	ec57 6b10 	vmov	r6, r7, d0
 800b044:	b095      	sub	sp, #84	; 0x54
 800b046:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b048:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b04c:	9105      	str	r1, [sp, #20]
 800b04e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800b052:	4604      	mov	r4, r0
 800b054:	9209      	str	r2, [sp, #36]	; 0x24
 800b056:	930f      	str	r3, [sp, #60]	; 0x3c
 800b058:	b975      	cbnz	r5, 800b078 <_dtoa_r+0x40>
 800b05a:	2010      	movs	r0, #16
 800b05c:	f000 fed6 	bl	800be0c <malloc>
 800b060:	4602      	mov	r2, r0
 800b062:	6260      	str	r0, [r4, #36]	; 0x24
 800b064:	b920      	cbnz	r0, 800b070 <_dtoa_r+0x38>
 800b066:	4bb2      	ldr	r3, [pc, #712]	; (800b330 <_dtoa_r+0x2f8>)
 800b068:	21ea      	movs	r1, #234	; 0xea
 800b06a:	48b2      	ldr	r0, [pc, #712]	; (800b334 <_dtoa_r+0x2fc>)
 800b06c:	f001 fd9c 	bl	800cba8 <__assert_func>
 800b070:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b074:	6005      	str	r5, [r0, #0]
 800b076:	60c5      	str	r5, [r0, #12]
 800b078:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b07a:	6819      	ldr	r1, [r3, #0]
 800b07c:	b151      	cbz	r1, 800b094 <_dtoa_r+0x5c>
 800b07e:	685a      	ldr	r2, [r3, #4]
 800b080:	604a      	str	r2, [r1, #4]
 800b082:	2301      	movs	r3, #1
 800b084:	4093      	lsls	r3, r2
 800b086:	608b      	str	r3, [r1, #8]
 800b088:	4620      	mov	r0, r4
 800b08a:	f000 ff15 	bl	800beb8 <_Bfree>
 800b08e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b090:	2200      	movs	r2, #0
 800b092:	601a      	str	r2, [r3, #0]
 800b094:	1e3b      	subs	r3, r7, #0
 800b096:	bfb9      	ittee	lt
 800b098:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b09c:	9303      	strlt	r3, [sp, #12]
 800b09e:	2300      	movge	r3, #0
 800b0a0:	f8c8 3000 	strge.w	r3, [r8]
 800b0a4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800b0a8:	4ba3      	ldr	r3, [pc, #652]	; (800b338 <_dtoa_r+0x300>)
 800b0aa:	bfbc      	itt	lt
 800b0ac:	2201      	movlt	r2, #1
 800b0ae:	f8c8 2000 	strlt.w	r2, [r8]
 800b0b2:	ea33 0309 	bics.w	r3, r3, r9
 800b0b6:	d11b      	bne.n	800b0f0 <_dtoa_r+0xb8>
 800b0b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b0ba:	f242 730f 	movw	r3, #9999	; 0x270f
 800b0be:	6013      	str	r3, [r2, #0]
 800b0c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b0c4:	4333      	orrs	r3, r6
 800b0c6:	f000 857a 	beq.w	800bbbe <_dtoa_r+0xb86>
 800b0ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b0cc:	b963      	cbnz	r3, 800b0e8 <_dtoa_r+0xb0>
 800b0ce:	4b9b      	ldr	r3, [pc, #620]	; (800b33c <_dtoa_r+0x304>)
 800b0d0:	e024      	b.n	800b11c <_dtoa_r+0xe4>
 800b0d2:	4b9b      	ldr	r3, [pc, #620]	; (800b340 <_dtoa_r+0x308>)
 800b0d4:	9300      	str	r3, [sp, #0]
 800b0d6:	3308      	adds	r3, #8
 800b0d8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b0da:	6013      	str	r3, [r2, #0]
 800b0dc:	9800      	ldr	r0, [sp, #0]
 800b0de:	b015      	add	sp, #84	; 0x54
 800b0e0:	ecbd 8b02 	vpop	{d8}
 800b0e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0e8:	4b94      	ldr	r3, [pc, #592]	; (800b33c <_dtoa_r+0x304>)
 800b0ea:	9300      	str	r3, [sp, #0]
 800b0ec:	3303      	adds	r3, #3
 800b0ee:	e7f3      	b.n	800b0d8 <_dtoa_r+0xa0>
 800b0f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	ec51 0b17 	vmov	r0, r1, d7
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800b100:	f7f5 fce2 	bl	8000ac8 <__aeabi_dcmpeq>
 800b104:	4680      	mov	r8, r0
 800b106:	b158      	cbz	r0, 800b120 <_dtoa_r+0xe8>
 800b108:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b10a:	2301      	movs	r3, #1
 800b10c:	6013      	str	r3, [r2, #0]
 800b10e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b110:	2b00      	cmp	r3, #0
 800b112:	f000 8551 	beq.w	800bbb8 <_dtoa_r+0xb80>
 800b116:	488b      	ldr	r0, [pc, #556]	; (800b344 <_dtoa_r+0x30c>)
 800b118:	6018      	str	r0, [r3, #0]
 800b11a:	1e43      	subs	r3, r0, #1
 800b11c:	9300      	str	r3, [sp, #0]
 800b11e:	e7dd      	b.n	800b0dc <_dtoa_r+0xa4>
 800b120:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800b124:	aa12      	add	r2, sp, #72	; 0x48
 800b126:	a913      	add	r1, sp, #76	; 0x4c
 800b128:	4620      	mov	r0, r4
 800b12a:	f001 f9a7 	bl	800c47c <__d2b>
 800b12e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b132:	4683      	mov	fp, r0
 800b134:	2d00      	cmp	r5, #0
 800b136:	d07c      	beq.n	800b232 <_dtoa_r+0x1fa>
 800b138:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b13a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800b13e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b142:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800b146:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b14a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b14e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b152:	4b7d      	ldr	r3, [pc, #500]	; (800b348 <_dtoa_r+0x310>)
 800b154:	2200      	movs	r2, #0
 800b156:	4630      	mov	r0, r6
 800b158:	4639      	mov	r1, r7
 800b15a:	f7f5 f895 	bl	8000288 <__aeabi_dsub>
 800b15e:	a36e      	add	r3, pc, #440	; (adr r3, 800b318 <_dtoa_r+0x2e0>)
 800b160:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b164:	f7f5 fa48 	bl	80005f8 <__aeabi_dmul>
 800b168:	a36d      	add	r3, pc, #436	; (adr r3, 800b320 <_dtoa_r+0x2e8>)
 800b16a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b16e:	f7f5 f88d 	bl	800028c <__adddf3>
 800b172:	4606      	mov	r6, r0
 800b174:	4628      	mov	r0, r5
 800b176:	460f      	mov	r7, r1
 800b178:	f7f5 f9d4 	bl	8000524 <__aeabi_i2d>
 800b17c:	a36a      	add	r3, pc, #424	; (adr r3, 800b328 <_dtoa_r+0x2f0>)
 800b17e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b182:	f7f5 fa39 	bl	80005f8 <__aeabi_dmul>
 800b186:	4602      	mov	r2, r0
 800b188:	460b      	mov	r3, r1
 800b18a:	4630      	mov	r0, r6
 800b18c:	4639      	mov	r1, r7
 800b18e:	f7f5 f87d 	bl	800028c <__adddf3>
 800b192:	4606      	mov	r6, r0
 800b194:	460f      	mov	r7, r1
 800b196:	f7f5 fcdf 	bl	8000b58 <__aeabi_d2iz>
 800b19a:	2200      	movs	r2, #0
 800b19c:	4682      	mov	sl, r0
 800b19e:	2300      	movs	r3, #0
 800b1a0:	4630      	mov	r0, r6
 800b1a2:	4639      	mov	r1, r7
 800b1a4:	f7f5 fc9a 	bl	8000adc <__aeabi_dcmplt>
 800b1a8:	b148      	cbz	r0, 800b1be <_dtoa_r+0x186>
 800b1aa:	4650      	mov	r0, sl
 800b1ac:	f7f5 f9ba 	bl	8000524 <__aeabi_i2d>
 800b1b0:	4632      	mov	r2, r6
 800b1b2:	463b      	mov	r3, r7
 800b1b4:	f7f5 fc88 	bl	8000ac8 <__aeabi_dcmpeq>
 800b1b8:	b908      	cbnz	r0, 800b1be <_dtoa_r+0x186>
 800b1ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b1be:	f1ba 0f16 	cmp.w	sl, #22
 800b1c2:	d854      	bhi.n	800b26e <_dtoa_r+0x236>
 800b1c4:	4b61      	ldr	r3, [pc, #388]	; (800b34c <_dtoa_r+0x314>)
 800b1c6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b1d2:	f7f5 fc83 	bl	8000adc <__aeabi_dcmplt>
 800b1d6:	2800      	cmp	r0, #0
 800b1d8:	d04b      	beq.n	800b272 <_dtoa_r+0x23a>
 800b1da:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b1de:	2300      	movs	r3, #0
 800b1e0:	930e      	str	r3, [sp, #56]	; 0x38
 800b1e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b1e4:	1b5d      	subs	r5, r3, r5
 800b1e6:	1e6b      	subs	r3, r5, #1
 800b1e8:	9304      	str	r3, [sp, #16]
 800b1ea:	bf43      	ittte	mi
 800b1ec:	2300      	movmi	r3, #0
 800b1ee:	f1c5 0801 	rsbmi	r8, r5, #1
 800b1f2:	9304      	strmi	r3, [sp, #16]
 800b1f4:	f04f 0800 	movpl.w	r8, #0
 800b1f8:	f1ba 0f00 	cmp.w	sl, #0
 800b1fc:	db3b      	blt.n	800b276 <_dtoa_r+0x23e>
 800b1fe:	9b04      	ldr	r3, [sp, #16]
 800b200:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800b204:	4453      	add	r3, sl
 800b206:	9304      	str	r3, [sp, #16]
 800b208:	2300      	movs	r3, #0
 800b20a:	9306      	str	r3, [sp, #24]
 800b20c:	9b05      	ldr	r3, [sp, #20]
 800b20e:	2b09      	cmp	r3, #9
 800b210:	d869      	bhi.n	800b2e6 <_dtoa_r+0x2ae>
 800b212:	2b05      	cmp	r3, #5
 800b214:	bfc4      	itt	gt
 800b216:	3b04      	subgt	r3, #4
 800b218:	9305      	strgt	r3, [sp, #20]
 800b21a:	9b05      	ldr	r3, [sp, #20]
 800b21c:	f1a3 0302 	sub.w	r3, r3, #2
 800b220:	bfcc      	ite	gt
 800b222:	2500      	movgt	r5, #0
 800b224:	2501      	movle	r5, #1
 800b226:	2b03      	cmp	r3, #3
 800b228:	d869      	bhi.n	800b2fe <_dtoa_r+0x2c6>
 800b22a:	e8df f003 	tbb	[pc, r3]
 800b22e:	4e2c      	.short	0x4e2c
 800b230:	5a4c      	.short	0x5a4c
 800b232:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800b236:	441d      	add	r5, r3
 800b238:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b23c:	2b20      	cmp	r3, #32
 800b23e:	bfc1      	itttt	gt
 800b240:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b244:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b248:	fa09 f303 	lslgt.w	r3, r9, r3
 800b24c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b250:	bfda      	itte	le
 800b252:	f1c3 0320 	rsble	r3, r3, #32
 800b256:	fa06 f003 	lslle.w	r0, r6, r3
 800b25a:	4318      	orrgt	r0, r3
 800b25c:	f7f5 f952 	bl	8000504 <__aeabi_ui2d>
 800b260:	2301      	movs	r3, #1
 800b262:	4606      	mov	r6, r0
 800b264:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b268:	3d01      	subs	r5, #1
 800b26a:	9310      	str	r3, [sp, #64]	; 0x40
 800b26c:	e771      	b.n	800b152 <_dtoa_r+0x11a>
 800b26e:	2301      	movs	r3, #1
 800b270:	e7b6      	b.n	800b1e0 <_dtoa_r+0x1a8>
 800b272:	900e      	str	r0, [sp, #56]	; 0x38
 800b274:	e7b5      	b.n	800b1e2 <_dtoa_r+0x1aa>
 800b276:	f1ca 0300 	rsb	r3, sl, #0
 800b27a:	9306      	str	r3, [sp, #24]
 800b27c:	2300      	movs	r3, #0
 800b27e:	eba8 080a 	sub.w	r8, r8, sl
 800b282:	930d      	str	r3, [sp, #52]	; 0x34
 800b284:	e7c2      	b.n	800b20c <_dtoa_r+0x1d4>
 800b286:	2300      	movs	r3, #0
 800b288:	9308      	str	r3, [sp, #32]
 800b28a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	dc39      	bgt.n	800b304 <_dtoa_r+0x2cc>
 800b290:	f04f 0901 	mov.w	r9, #1
 800b294:	f8cd 9004 	str.w	r9, [sp, #4]
 800b298:	464b      	mov	r3, r9
 800b29a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800b29e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	6042      	str	r2, [r0, #4]
 800b2a4:	2204      	movs	r2, #4
 800b2a6:	f102 0614 	add.w	r6, r2, #20
 800b2aa:	429e      	cmp	r6, r3
 800b2ac:	6841      	ldr	r1, [r0, #4]
 800b2ae:	d92f      	bls.n	800b310 <_dtoa_r+0x2d8>
 800b2b0:	4620      	mov	r0, r4
 800b2b2:	f000 fdc1 	bl	800be38 <_Balloc>
 800b2b6:	9000      	str	r0, [sp, #0]
 800b2b8:	2800      	cmp	r0, #0
 800b2ba:	d14b      	bne.n	800b354 <_dtoa_r+0x31c>
 800b2bc:	4b24      	ldr	r3, [pc, #144]	; (800b350 <_dtoa_r+0x318>)
 800b2be:	4602      	mov	r2, r0
 800b2c0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b2c4:	e6d1      	b.n	800b06a <_dtoa_r+0x32>
 800b2c6:	2301      	movs	r3, #1
 800b2c8:	e7de      	b.n	800b288 <_dtoa_r+0x250>
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	9308      	str	r3, [sp, #32]
 800b2ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2d0:	eb0a 0903 	add.w	r9, sl, r3
 800b2d4:	f109 0301 	add.w	r3, r9, #1
 800b2d8:	2b01      	cmp	r3, #1
 800b2da:	9301      	str	r3, [sp, #4]
 800b2dc:	bfb8      	it	lt
 800b2de:	2301      	movlt	r3, #1
 800b2e0:	e7dd      	b.n	800b29e <_dtoa_r+0x266>
 800b2e2:	2301      	movs	r3, #1
 800b2e4:	e7f2      	b.n	800b2cc <_dtoa_r+0x294>
 800b2e6:	2501      	movs	r5, #1
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	9305      	str	r3, [sp, #20]
 800b2ec:	9508      	str	r5, [sp, #32]
 800b2ee:	f04f 39ff 	mov.w	r9, #4294967295
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	f8cd 9004 	str.w	r9, [sp, #4]
 800b2f8:	2312      	movs	r3, #18
 800b2fa:	9209      	str	r2, [sp, #36]	; 0x24
 800b2fc:	e7cf      	b.n	800b29e <_dtoa_r+0x266>
 800b2fe:	2301      	movs	r3, #1
 800b300:	9308      	str	r3, [sp, #32]
 800b302:	e7f4      	b.n	800b2ee <_dtoa_r+0x2b6>
 800b304:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800b308:	f8cd 9004 	str.w	r9, [sp, #4]
 800b30c:	464b      	mov	r3, r9
 800b30e:	e7c6      	b.n	800b29e <_dtoa_r+0x266>
 800b310:	3101      	adds	r1, #1
 800b312:	6041      	str	r1, [r0, #4]
 800b314:	0052      	lsls	r2, r2, #1
 800b316:	e7c6      	b.n	800b2a6 <_dtoa_r+0x26e>
 800b318:	636f4361 	.word	0x636f4361
 800b31c:	3fd287a7 	.word	0x3fd287a7
 800b320:	8b60c8b3 	.word	0x8b60c8b3
 800b324:	3fc68a28 	.word	0x3fc68a28
 800b328:	509f79fb 	.word	0x509f79fb
 800b32c:	3fd34413 	.word	0x3fd34413
 800b330:	0800d4d9 	.word	0x0800d4d9
 800b334:	0800d4f0 	.word	0x0800d4f0
 800b338:	7ff00000 	.word	0x7ff00000
 800b33c:	0800d4d5 	.word	0x0800d4d5
 800b340:	0800d4cc 	.word	0x0800d4cc
 800b344:	0800d4a9 	.word	0x0800d4a9
 800b348:	3ff80000 	.word	0x3ff80000
 800b34c:	0800d648 	.word	0x0800d648
 800b350:	0800d54f 	.word	0x0800d54f
 800b354:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b356:	9a00      	ldr	r2, [sp, #0]
 800b358:	601a      	str	r2, [r3, #0]
 800b35a:	9b01      	ldr	r3, [sp, #4]
 800b35c:	2b0e      	cmp	r3, #14
 800b35e:	f200 80ad 	bhi.w	800b4bc <_dtoa_r+0x484>
 800b362:	2d00      	cmp	r5, #0
 800b364:	f000 80aa 	beq.w	800b4bc <_dtoa_r+0x484>
 800b368:	f1ba 0f00 	cmp.w	sl, #0
 800b36c:	dd36      	ble.n	800b3dc <_dtoa_r+0x3a4>
 800b36e:	4ac3      	ldr	r2, [pc, #780]	; (800b67c <_dtoa_r+0x644>)
 800b370:	f00a 030f 	and.w	r3, sl, #15
 800b374:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b378:	ed93 7b00 	vldr	d7, [r3]
 800b37c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800b380:	ea4f 172a 	mov.w	r7, sl, asr #4
 800b384:	eeb0 8a47 	vmov.f32	s16, s14
 800b388:	eef0 8a67 	vmov.f32	s17, s15
 800b38c:	d016      	beq.n	800b3bc <_dtoa_r+0x384>
 800b38e:	4bbc      	ldr	r3, [pc, #752]	; (800b680 <_dtoa_r+0x648>)
 800b390:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b394:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b398:	f7f5 fa58 	bl	800084c <__aeabi_ddiv>
 800b39c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b3a0:	f007 070f 	and.w	r7, r7, #15
 800b3a4:	2503      	movs	r5, #3
 800b3a6:	4eb6      	ldr	r6, [pc, #728]	; (800b680 <_dtoa_r+0x648>)
 800b3a8:	b957      	cbnz	r7, 800b3c0 <_dtoa_r+0x388>
 800b3aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b3ae:	ec53 2b18 	vmov	r2, r3, d8
 800b3b2:	f7f5 fa4b 	bl	800084c <__aeabi_ddiv>
 800b3b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b3ba:	e029      	b.n	800b410 <_dtoa_r+0x3d8>
 800b3bc:	2502      	movs	r5, #2
 800b3be:	e7f2      	b.n	800b3a6 <_dtoa_r+0x36e>
 800b3c0:	07f9      	lsls	r1, r7, #31
 800b3c2:	d508      	bpl.n	800b3d6 <_dtoa_r+0x39e>
 800b3c4:	ec51 0b18 	vmov	r0, r1, d8
 800b3c8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b3cc:	f7f5 f914 	bl	80005f8 <__aeabi_dmul>
 800b3d0:	ec41 0b18 	vmov	d8, r0, r1
 800b3d4:	3501      	adds	r5, #1
 800b3d6:	107f      	asrs	r7, r7, #1
 800b3d8:	3608      	adds	r6, #8
 800b3da:	e7e5      	b.n	800b3a8 <_dtoa_r+0x370>
 800b3dc:	f000 80a6 	beq.w	800b52c <_dtoa_r+0x4f4>
 800b3e0:	f1ca 0600 	rsb	r6, sl, #0
 800b3e4:	4ba5      	ldr	r3, [pc, #660]	; (800b67c <_dtoa_r+0x644>)
 800b3e6:	4fa6      	ldr	r7, [pc, #664]	; (800b680 <_dtoa_r+0x648>)
 800b3e8:	f006 020f 	and.w	r2, r6, #15
 800b3ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b3f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3f4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b3f8:	f7f5 f8fe 	bl	80005f8 <__aeabi_dmul>
 800b3fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b400:	1136      	asrs	r6, r6, #4
 800b402:	2300      	movs	r3, #0
 800b404:	2502      	movs	r5, #2
 800b406:	2e00      	cmp	r6, #0
 800b408:	f040 8085 	bne.w	800b516 <_dtoa_r+0x4de>
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d1d2      	bne.n	800b3b6 <_dtoa_r+0x37e>
 800b410:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b412:	2b00      	cmp	r3, #0
 800b414:	f000 808c 	beq.w	800b530 <_dtoa_r+0x4f8>
 800b418:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b41c:	4b99      	ldr	r3, [pc, #612]	; (800b684 <_dtoa_r+0x64c>)
 800b41e:	2200      	movs	r2, #0
 800b420:	4630      	mov	r0, r6
 800b422:	4639      	mov	r1, r7
 800b424:	f7f5 fb5a 	bl	8000adc <__aeabi_dcmplt>
 800b428:	2800      	cmp	r0, #0
 800b42a:	f000 8081 	beq.w	800b530 <_dtoa_r+0x4f8>
 800b42e:	9b01      	ldr	r3, [sp, #4]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d07d      	beq.n	800b530 <_dtoa_r+0x4f8>
 800b434:	f1b9 0f00 	cmp.w	r9, #0
 800b438:	dd3c      	ble.n	800b4b4 <_dtoa_r+0x47c>
 800b43a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b43e:	9307      	str	r3, [sp, #28]
 800b440:	2200      	movs	r2, #0
 800b442:	4b91      	ldr	r3, [pc, #580]	; (800b688 <_dtoa_r+0x650>)
 800b444:	4630      	mov	r0, r6
 800b446:	4639      	mov	r1, r7
 800b448:	f7f5 f8d6 	bl	80005f8 <__aeabi_dmul>
 800b44c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b450:	3501      	adds	r5, #1
 800b452:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800b456:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b45a:	4628      	mov	r0, r5
 800b45c:	f7f5 f862 	bl	8000524 <__aeabi_i2d>
 800b460:	4632      	mov	r2, r6
 800b462:	463b      	mov	r3, r7
 800b464:	f7f5 f8c8 	bl	80005f8 <__aeabi_dmul>
 800b468:	4b88      	ldr	r3, [pc, #544]	; (800b68c <_dtoa_r+0x654>)
 800b46a:	2200      	movs	r2, #0
 800b46c:	f7f4 ff0e 	bl	800028c <__adddf3>
 800b470:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b474:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b478:	9303      	str	r3, [sp, #12]
 800b47a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d15c      	bne.n	800b53a <_dtoa_r+0x502>
 800b480:	4b83      	ldr	r3, [pc, #524]	; (800b690 <_dtoa_r+0x658>)
 800b482:	2200      	movs	r2, #0
 800b484:	4630      	mov	r0, r6
 800b486:	4639      	mov	r1, r7
 800b488:	f7f4 fefe 	bl	8000288 <__aeabi_dsub>
 800b48c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b490:	4606      	mov	r6, r0
 800b492:	460f      	mov	r7, r1
 800b494:	f7f5 fb40 	bl	8000b18 <__aeabi_dcmpgt>
 800b498:	2800      	cmp	r0, #0
 800b49a:	f040 8296 	bne.w	800b9ca <_dtoa_r+0x992>
 800b49e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b4a2:	4630      	mov	r0, r6
 800b4a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b4a8:	4639      	mov	r1, r7
 800b4aa:	f7f5 fb17 	bl	8000adc <__aeabi_dcmplt>
 800b4ae:	2800      	cmp	r0, #0
 800b4b0:	f040 8288 	bne.w	800b9c4 <_dtoa_r+0x98c>
 800b4b4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b4b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b4bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	f2c0 8158 	blt.w	800b774 <_dtoa_r+0x73c>
 800b4c4:	f1ba 0f0e 	cmp.w	sl, #14
 800b4c8:	f300 8154 	bgt.w	800b774 <_dtoa_r+0x73c>
 800b4cc:	4b6b      	ldr	r3, [pc, #428]	; (800b67c <_dtoa_r+0x644>)
 800b4ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b4d2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b4d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	f280 80e3 	bge.w	800b6a4 <_dtoa_r+0x66c>
 800b4de:	9b01      	ldr	r3, [sp, #4]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	f300 80df 	bgt.w	800b6a4 <_dtoa_r+0x66c>
 800b4e6:	f040 826d 	bne.w	800b9c4 <_dtoa_r+0x98c>
 800b4ea:	4b69      	ldr	r3, [pc, #420]	; (800b690 <_dtoa_r+0x658>)
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	4640      	mov	r0, r8
 800b4f0:	4649      	mov	r1, r9
 800b4f2:	f7f5 f881 	bl	80005f8 <__aeabi_dmul>
 800b4f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b4fa:	f7f5 fb03 	bl	8000b04 <__aeabi_dcmpge>
 800b4fe:	9e01      	ldr	r6, [sp, #4]
 800b500:	4637      	mov	r7, r6
 800b502:	2800      	cmp	r0, #0
 800b504:	f040 8243 	bne.w	800b98e <_dtoa_r+0x956>
 800b508:	9d00      	ldr	r5, [sp, #0]
 800b50a:	2331      	movs	r3, #49	; 0x31
 800b50c:	f805 3b01 	strb.w	r3, [r5], #1
 800b510:	f10a 0a01 	add.w	sl, sl, #1
 800b514:	e23f      	b.n	800b996 <_dtoa_r+0x95e>
 800b516:	07f2      	lsls	r2, r6, #31
 800b518:	d505      	bpl.n	800b526 <_dtoa_r+0x4ee>
 800b51a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b51e:	f7f5 f86b 	bl	80005f8 <__aeabi_dmul>
 800b522:	3501      	adds	r5, #1
 800b524:	2301      	movs	r3, #1
 800b526:	1076      	asrs	r6, r6, #1
 800b528:	3708      	adds	r7, #8
 800b52a:	e76c      	b.n	800b406 <_dtoa_r+0x3ce>
 800b52c:	2502      	movs	r5, #2
 800b52e:	e76f      	b.n	800b410 <_dtoa_r+0x3d8>
 800b530:	9b01      	ldr	r3, [sp, #4]
 800b532:	f8cd a01c 	str.w	sl, [sp, #28]
 800b536:	930c      	str	r3, [sp, #48]	; 0x30
 800b538:	e78d      	b.n	800b456 <_dtoa_r+0x41e>
 800b53a:	9900      	ldr	r1, [sp, #0]
 800b53c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b53e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b540:	4b4e      	ldr	r3, [pc, #312]	; (800b67c <_dtoa_r+0x644>)
 800b542:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b546:	4401      	add	r1, r0
 800b548:	9102      	str	r1, [sp, #8]
 800b54a:	9908      	ldr	r1, [sp, #32]
 800b54c:	eeb0 8a47 	vmov.f32	s16, s14
 800b550:	eef0 8a67 	vmov.f32	s17, s15
 800b554:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b558:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b55c:	2900      	cmp	r1, #0
 800b55e:	d045      	beq.n	800b5ec <_dtoa_r+0x5b4>
 800b560:	494c      	ldr	r1, [pc, #304]	; (800b694 <_dtoa_r+0x65c>)
 800b562:	2000      	movs	r0, #0
 800b564:	f7f5 f972 	bl	800084c <__aeabi_ddiv>
 800b568:	ec53 2b18 	vmov	r2, r3, d8
 800b56c:	f7f4 fe8c 	bl	8000288 <__aeabi_dsub>
 800b570:	9d00      	ldr	r5, [sp, #0]
 800b572:	ec41 0b18 	vmov	d8, r0, r1
 800b576:	4639      	mov	r1, r7
 800b578:	4630      	mov	r0, r6
 800b57a:	f7f5 faed 	bl	8000b58 <__aeabi_d2iz>
 800b57e:	900c      	str	r0, [sp, #48]	; 0x30
 800b580:	f7f4 ffd0 	bl	8000524 <__aeabi_i2d>
 800b584:	4602      	mov	r2, r0
 800b586:	460b      	mov	r3, r1
 800b588:	4630      	mov	r0, r6
 800b58a:	4639      	mov	r1, r7
 800b58c:	f7f4 fe7c 	bl	8000288 <__aeabi_dsub>
 800b590:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b592:	3330      	adds	r3, #48	; 0x30
 800b594:	f805 3b01 	strb.w	r3, [r5], #1
 800b598:	ec53 2b18 	vmov	r2, r3, d8
 800b59c:	4606      	mov	r6, r0
 800b59e:	460f      	mov	r7, r1
 800b5a0:	f7f5 fa9c 	bl	8000adc <__aeabi_dcmplt>
 800b5a4:	2800      	cmp	r0, #0
 800b5a6:	d165      	bne.n	800b674 <_dtoa_r+0x63c>
 800b5a8:	4632      	mov	r2, r6
 800b5aa:	463b      	mov	r3, r7
 800b5ac:	4935      	ldr	r1, [pc, #212]	; (800b684 <_dtoa_r+0x64c>)
 800b5ae:	2000      	movs	r0, #0
 800b5b0:	f7f4 fe6a 	bl	8000288 <__aeabi_dsub>
 800b5b4:	ec53 2b18 	vmov	r2, r3, d8
 800b5b8:	f7f5 fa90 	bl	8000adc <__aeabi_dcmplt>
 800b5bc:	2800      	cmp	r0, #0
 800b5be:	f040 80b9 	bne.w	800b734 <_dtoa_r+0x6fc>
 800b5c2:	9b02      	ldr	r3, [sp, #8]
 800b5c4:	429d      	cmp	r5, r3
 800b5c6:	f43f af75 	beq.w	800b4b4 <_dtoa_r+0x47c>
 800b5ca:	4b2f      	ldr	r3, [pc, #188]	; (800b688 <_dtoa_r+0x650>)
 800b5cc:	ec51 0b18 	vmov	r0, r1, d8
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	f7f5 f811 	bl	80005f8 <__aeabi_dmul>
 800b5d6:	4b2c      	ldr	r3, [pc, #176]	; (800b688 <_dtoa_r+0x650>)
 800b5d8:	ec41 0b18 	vmov	d8, r0, r1
 800b5dc:	2200      	movs	r2, #0
 800b5de:	4630      	mov	r0, r6
 800b5e0:	4639      	mov	r1, r7
 800b5e2:	f7f5 f809 	bl	80005f8 <__aeabi_dmul>
 800b5e6:	4606      	mov	r6, r0
 800b5e8:	460f      	mov	r7, r1
 800b5ea:	e7c4      	b.n	800b576 <_dtoa_r+0x53e>
 800b5ec:	ec51 0b17 	vmov	r0, r1, d7
 800b5f0:	f7f5 f802 	bl	80005f8 <__aeabi_dmul>
 800b5f4:	9b02      	ldr	r3, [sp, #8]
 800b5f6:	9d00      	ldr	r5, [sp, #0]
 800b5f8:	930c      	str	r3, [sp, #48]	; 0x30
 800b5fa:	ec41 0b18 	vmov	d8, r0, r1
 800b5fe:	4639      	mov	r1, r7
 800b600:	4630      	mov	r0, r6
 800b602:	f7f5 faa9 	bl	8000b58 <__aeabi_d2iz>
 800b606:	9011      	str	r0, [sp, #68]	; 0x44
 800b608:	f7f4 ff8c 	bl	8000524 <__aeabi_i2d>
 800b60c:	4602      	mov	r2, r0
 800b60e:	460b      	mov	r3, r1
 800b610:	4630      	mov	r0, r6
 800b612:	4639      	mov	r1, r7
 800b614:	f7f4 fe38 	bl	8000288 <__aeabi_dsub>
 800b618:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b61a:	3330      	adds	r3, #48	; 0x30
 800b61c:	f805 3b01 	strb.w	r3, [r5], #1
 800b620:	9b02      	ldr	r3, [sp, #8]
 800b622:	429d      	cmp	r5, r3
 800b624:	4606      	mov	r6, r0
 800b626:	460f      	mov	r7, r1
 800b628:	f04f 0200 	mov.w	r2, #0
 800b62c:	d134      	bne.n	800b698 <_dtoa_r+0x660>
 800b62e:	4b19      	ldr	r3, [pc, #100]	; (800b694 <_dtoa_r+0x65c>)
 800b630:	ec51 0b18 	vmov	r0, r1, d8
 800b634:	f7f4 fe2a 	bl	800028c <__adddf3>
 800b638:	4602      	mov	r2, r0
 800b63a:	460b      	mov	r3, r1
 800b63c:	4630      	mov	r0, r6
 800b63e:	4639      	mov	r1, r7
 800b640:	f7f5 fa6a 	bl	8000b18 <__aeabi_dcmpgt>
 800b644:	2800      	cmp	r0, #0
 800b646:	d175      	bne.n	800b734 <_dtoa_r+0x6fc>
 800b648:	ec53 2b18 	vmov	r2, r3, d8
 800b64c:	4911      	ldr	r1, [pc, #68]	; (800b694 <_dtoa_r+0x65c>)
 800b64e:	2000      	movs	r0, #0
 800b650:	f7f4 fe1a 	bl	8000288 <__aeabi_dsub>
 800b654:	4602      	mov	r2, r0
 800b656:	460b      	mov	r3, r1
 800b658:	4630      	mov	r0, r6
 800b65a:	4639      	mov	r1, r7
 800b65c:	f7f5 fa3e 	bl	8000adc <__aeabi_dcmplt>
 800b660:	2800      	cmp	r0, #0
 800b662:	f43f af27 	beq.w	800b4b4 <_dtoa_r+0x47c>
 800b666:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b668:	1e6b      	subs	r3, r5, #1
 800b66a:	930c      	str	r3, [sp, #48]	; 0x30
 800b66c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b670:	2b30      	cmp	r3, #48	; 0x30
 800b672:	d0f8      	beq.n	800b666 <_dtoa_r+0x62e>
 800b674:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b678:	e04a      	b.n	800b710 <_dtoa_r+0x6d8>
 800b67a:	bf00      	nop
 800b67c:	0800d648 	.word	0x0800d648
 800b680:	0800d620 	.word	0x0800d620
 800b684:	3ff00000 	.word	0x3ff00000
 800b688:	40240000 	.word	0x40240000
 800b68c:	401c0000 	.word	0x401c0000
 800b690:	40140000 	.word	0x40140000
 800b694:	3fe00000 	.word	0x3fe00000
 800b698:	4baf      	ldr	r3, [pc, #700]	; (800b958 <_dtoa_r+0x920>)
 800b69a:	f7f4 ffad 	bl	80005f8 <__aeabi_dmul>
 800b69e:	4606      	mov	r6, r0
 800b6a0:	460f      	mov	r7, r1
 800b6a2:	e7ac      	b.n	800b5fe <_dtoa_r+0x5c6>
 800b6a4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b6a8:	9d00      	ldr	r5, [sp, #0]
 800b6aa:	4642      	mov	r2, r8
 800b6ac:	464b      	mov	r3, r9
 800b6ae:	4630      	mov	r0, r6
 800b6b0:	4639      	mov	r1, r7
 800b6b2:	f7f5 f8cb 	bl	800084c <__aeabi_ddiv>
 800b6b6:	f7f5 fa4f 	bl	8000b58 <__aeabi_d2iz>
 800b6ba:	9002      	str	r0, [sp, #8]
 800b6bc:	f7f4 ff32 	bl	8000524 <__aeabi_i2d>
 800b6c0:	4642      	mov	r2, r8
 800b6c2:	464b      	mov	r3, r9
 800b6c4:	f7f4 ff98 	bl	80005f8 <__aeabi_dmul>
 800b6c8:	4602      	mov	r2, r0
 800b6ca:	460b      	mov	r3, r1
 800b6cc:	4630      	mov	r0, r6
 800b6ce:	4639      	mov	r1, r7
 800b6d0:	f7f4 fdda 	bl	8000288 <__aeabi_dsub>
 800b6d4:	9e02      	ldr	r6, [sp, #8]
 800b6d6:	9f01      	ldr	r7, [sp, #4]
 800b6d8:	3630      	adds	r6, #48	; 0x30
 800b6da:	f805 6b01 	strb.w	r6, [r5], #1
 800b6de:	9e00      	ldr	r6, [sp, #0]
 800b6e0:	1bae      	subs	r6, r5, r6
 800b6e2:	42b7      	cmp	r7, r6
 800b6e4:	4602      	mov	r2, r0
 800b6e6:	460b      	mov	r3, r1
 800b6e8:	d137      	bne.n	800b75a <_dtoa_r+0x722>
 800b6ea:	f7f4 fdcf 	bl	800028c <__adddf3>
 800b6ee:	4642      	mov	r2, r8
 800b6f0:	464b      	mov	r3, r9
 800b6f2:	4606      	mov	r6, r0
 800b6f4:	460f      	mov	r7, r1
 800b6f6:	f7f5 fa0f 	bl	8000b18 <__aeabi_dcmpgt>
 800b6fa:	b9c8      	cbnz	r0, 800b730 <_dtoa_r+0x6f8>
 800b6fc:	4642      	mov	r2, r8
 800b6fe:	464b      	mov	r3, r9
 800b700:	4630      	mov	r0, r6
 800b702:	4639      	mov	r1, r7
 800b704:	f7f5 f9e0 	bl	8000ac8 <__aeabi_dcmpeq>
 800b708:	b110      	cbz	r0, 800b710 <_dtoa_r+0x6d8>
 800b70a:	9b02      	ldr	r3, [sp, #8]
 800b70c:	07d9      	lsls	r1, r3, #31
 800b70e:	d40f      	bmi.n	800b730 <_dtoa_r+0x6f8>
 800b710:	4620      	mov	r0, r4
 800b712:	4659      	mov	r1, fp
 800b714:	f000 fbd0 	bl	800beb8 <_Bfree>
 800b718:	2300      	movs	r3, #0
 800b71a:	702b      	strb	r3, [r5, #0]
 800b71c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b71e:	f10a 0001 	add.w	r0, sl, #1
 800b722:	6018      	str	r0, [r3, #0]
 800b724:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b726:	2b00      	cmp	r3, #0
 800b728:	f43f acd8 	beq.w	800b0dc <_dtoa_r+0xa4>
 800b72c:	601d      	str	r5, [r3, #0]
 800b72e:	e4d5      	b.n	800b0dc <_dtoa_r+0xa4>
 800b730:	f8cd a01c 	str.w	sl, [sp, #28]
 800b734:	462b      	mov	r3, r5
 800b736:	461d      	mov	r5, r3
 800b738:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b73c:	2a39      	cmp	r2, #57	; 0x39
 800b73e:	d108      	bne.n	800b752 <_dtoa_r+0x71a>
 800b740:	9a00      	ldr	r2, [sp, #0]
 800b742:	429a      	cmp	r2, r3
 800b744:	d1f7      	bne.n	800b736 <_dtoa_r+0x6fe>
 800b746:	9a07      	ldr	r2, [sp, #28]
 800b748:	9900      	ldr	r1, [sp, #0]
 800b74a:	3201      	adds	r2, #1
 800b74c:	9207      	str	r2, [sp, #28]
 800b74e:	2230      	movs	r2, #48	; 0x30
 800b750:	700a      	strb	r2, [r1, #0]
 800b752:	781a      	ldrb	r2, [r3, #0]
 800b754:	3201      	adds	r2, #1
 800b756:	701a      	strb	r2, [r3, #0]
 800b758:	e78c      	b.n	800b674 <_dtoa_r+0x63c>
 800b75a:	4b7f      	ldr	r3, [pc, #508]	; (800b958 <_dtoa_r+0x920>)
 800b75c:	2200      	movs	r2, #0
 800b75e:	f7f4 ff4b 	bl	80005f8 <__aeabi_dmul>
 800b762:	2200      	movs	r2, #0
 800b764:	2300      	movs	r3, #0
 800b766:	4606      	mov	r6, r0
 800b768:	460f      	mov	r7, r1
 800b76a:	f7f5 f9ad 	bl	8000ac8 <__aeabi_dcmpeq>
 800b76e:	2800      	cmp	r0, #0
 800b770:	d09b      	beq.n	800b6aa <_dtoa_r+0x672>
 800b772:	e7cd      	b.n	800b710 <_dtoa_r+0x6d8>
 800b774:	9a08      	ldr	r2, [sp, #32]
 800b776:	2a00      	cmp	r2, #0
 800b778:	f000 80c4 	beq.w	800b904 <_dtoa_r+0x8cc>
 800b77c:	9a05      	ldr	r2, [sp, #20]
 800b77e:	2a01      	cmp	r2, #1
 800b780:	f300 80a8 	bgt.w	800b8d4 <_dtoa_r+0x89c>
 800b784:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b786:	2a00      	cmp	r2, #0
 800b788:	f000 80a0 	beq.w	800b8cc <_dtoa_r+0x894>
 800b78c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b790:	9e06      	ldr	r6, [sp, #24]
 800b792:	4645      	mov	r5, r8
 800b794:	9a04      	ldr	r2, [sp, #16]
 800b796:	2101      	movs	r1, #1
 800b798:	441a      	add	r2, r3
 800b79a:	4620      	mov	r0, r4
 800b79c:	4498      	add	r8, r3
 800b79e:	9204      	str	r2, [sp, #16]
 800b7a0:	f000 fc46 	bl	800c030 <__i2b>
 800b7a4:	4607      	mov	r7, r0
 800b7a6:	2d00      	cmp	r5, #0
 800b7a8:	dd0b      	ble.n	800b7c2 <_dtoa_r+0x78a>
 800b7aa:	9b04      	ldr	r3, [sp, #16]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	dd08      	ble.n	800b7c2 <_dtoa_r+0x78a>
 800b7b0:	42ab      	cmp	r3, r5
 800b7b2:	9a04      	ldr	r2, [sp, #16]
 800b7b4:	bfa8      	it	ge
 800b7b6:	462b      	movge	r3, r5
 800b7b8:	eba8 0803 	sub.w	r8, r8, r3
 800b7bc:	1aed      	subs	r5, r5, r3
 800b7be:	1ad3      	subs	r3, r2, r3
 800b7c0:	9304      	str	r3, [sp, #16]
 800b7c2:	9b06      	ldr	r3, [sp, #24]
 800b7c4:	b1fb      	cbz	r3, 800b806 <_dtoa_r+0x7ce>
 800b7c6:	9b08      	ldr	r3, [sp, #32]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	f000 809f 	beq.w	800b90c <_dtoa_r+0x8d4>
 800b7ce:	2e00      	cmp	r6, #0
 800b7d0:	dd11      	ble.n	800b7f6 <_dtoa_r+0x7be>
 800b7d2:	4639      	mov	r1, r7
 800b7d4:	4632      	mov	r2, r6
 800b7d6:	4620      	mov	r0, r4
 800b7d8:	f000 fce6 	bl	800c1a8 <__pow5mult>
 800b7dc:	465a      	mov	r2, fp
 800b7de:	4601      	mov	r1, r0
 800b7e0:	4607      	mov	r7, r0
 800b7e2:	4620      	mov	r0, r4
 800b7e4:	f000 fc3a 	bl	800c05c <__multiply>
 800b7e8:	4659      	mov	r1, fp
 800b7ea:	9007      	str	r0, [sp, #28]
 800b7ec:	4620      	mov	r0, r4
 800b7ee:	f000 fb63 	bl	800beb8 <_Bfree>
 800b7f2:	9b07      	ldr	r3, [sp, #28]
 800b7f4:	469b      	mov	fp, r3
 800b7f6:	9b06      	ldr	r3, [sp, #24]
 800b7f8:	1b9a      	subs	r2, r3, r6
 800b7fa:	d004      	beq.n	800b806 <_dtoa_r+0x7ce>
 800b7fc:	4659      	mov	r1, fp
 800b7fe:	4620      	mov	r0, r4
 800b800:	f000 fcd2 	bl	800c1a8 <__pow5mult>
 800b804:	4683      	mov	fp, r0
 800b806:	2101      	movs	r1, #1
 800b808:	4620      	mov	r0, r4
 800b80a:	f000 fc11 	bl	800c030 <__i2b>
 800b80e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b810:	2b00      	cmp	r3, #0
 800b812:	4606      	mov	r6, r0
 800b814:	dd7c      	ble.n	800b910 <_dtoa_r+0x8d8>
 800b816:	461a      	mov	r2, r3
 800b818:	4601      	mov	r1, r0
 800b81a:	4620      	mov	r0, r4
 800b81c:	f000 fcc4 	bl	800c1a8 <__pow5mult>
 800b820:	9b05      	ldr	r3, [sp, #20]
 800b822:	2b01      	cmp	r3, #1
 800b824:	4606      	mov	r6, r0
 800b826:	dd76      	ble.n	800b916 <_dtoa_r+0x8de>
 800b828:	2300      	movs	r3, #0
 800b82a:	9306      	str	r3, [sp, #24]
 800b82c:	6933      	ldr	r3, [r6, #16]
 800b82e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b832:	6918      	ldr	r0, [r3, #16]
 800b834:	f000 fbac 	bl	800bf90 <__hi0bits>
 800b838:	f1c0 0020 	rsb	r0, r0, #32
 800b83c:	9b04      	ldr	r3, [sp, #16]
 800b83e:	4418      	add	r0, r3
 800b840:	f010 001f 	ands.w	r0, r0, #31
 800b844:	f000 8086 	beq.w	800b954 <_dtoa_r+0x91c>
 800b848:	f1c0 0320 	rsb	r3, r0, #32
 800b84c:	2b04      	cmp	r3, #4
 800b84e:	dd7f      	ble.n	800b950 <_dtoa_r+0x918>
 800b850:	f1c0 001c 	rsb	r0, r0, #28
 800b854:	9b04      	ldr	r3, [sp, #16]
 800b856:	4403      	add	r3, r0
 800b858:	4480      	add	r8, r0
 800b85a:	4405      	add	r5, r0
 800b85c:	9304      	str	r3, [sp, #16]
 800b85e:	f1b8 0f00 	cmp.w	r8, #0
 800b862:	dd05      	ble.n	800b870 <_dtoa_r+0x838>
 800b864:	4659      	mov	r1, fp
 800b866:	4642      	mov	r2, r8
 800b868:	4620      	mov	r0, r4
 800b86a:	f000 fcf7 	bl	800c25c <__lshift>
 800b86e:	4683      	mov	fp, r0
 800b870:	9b04      	ldr	r3, [sp, #16]
 800b872:	2b00      	cmp	r3, #0
 800b874:	dd05      	ble.n	800b882 <_dtoa_r+0x84a>
 800b876:	4631      	mov	r1, r6
 800b878:	461a      	mov	r2, r3
 800b87a:	4620      	mov	r0, r4
 800b87c:	f000 fcee 	bl	800c25c <__lshift>
 800b880:	4606      	mov	r6, r0
 800b882:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b884:	2b00      	cmp	r3, #0
 800b886:	d069      	beq.n	800b95c <_dtoa_r+0x924>
 800b888:	4631      	mov	r1, r6
 800b88a:	4658      	mov	r0, fp
 800b88c:	f000 fd52 	bl	800c334 <__mcmp>
 800b890:	2800      	cmp	r0, #0
 800b892:	da63      	bge.n	800b95c <_dtoa_r+0x924>
 800b894:	2300      	movs	r3, #0
 800b896:	4659      	mov	r1, fp
 800b898:	220a      	movs	r2, #10
 800b89a:	4620      	mov	r0, r4
 800b89c:	f000 fb2e 	bl	800befc <__multadd>
 800b8a0:	9b08      	ldr	r3, [sp, #32]
 800b8a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b8a6:	4683      	mov	fp, r0
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	f000 818f 	beq.w	800bbcc <_dtoa_r+0xb94>
 800b8ae:	4639      	mov	r1, r7
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	220a      	movs	r2, #10
 800b8b4:	4620      	mov	r0, r4
 800b8b6:	f000 fb21 	bl	800befc <__multadd>
 800b8ba:	f1b9 0f00 	cmp.w	r9, #0
 800b8be:	4607      	mov	r7, r0
 800b8c0:	f300 808e 	bgt.w	800b9e0 <_dtoa_r+0x9a8>
 800b8c4:	9b05      	ldr	r3, [sp, #20]
 800b8c6:	2b02      	cmp	r3, #2
 800b8c8:	dc50      	bgt.n	800b96c <_dtoa_r+0x934>
 800b8ca:	e089      	b.n	800b9e0 <_dtoa_r+0x9a8>
 800b8cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b8ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b8d2:	e75d      	b.n	800b790 <_dtoa_r+0x758>
 800b8d4:	9b01      	ldr	r3, [sp, #4]
 800b8d6:	1e5e      	subs	r6, r3, #1
 800b8d8:	9b06      	ldr	r3, [sp, #24]
 800b8da:	42b3      	cmp	r3, r6
 800b8dc:	bfbf      	itttt	lt
 800b8de:	9b06      	ldrlt	r3, [sp, #24]
 800b8e0:	9606      	strlt	r6, [sp, #24]
 800b8e2:	1af2      	sublt	r2, r6, r3
 800b8e4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800b8e6:	bfb6      	itet	lt
 800b8e8:	189b      	addlt	r3, r3, r2
 800b8ea:	1b9e      	subge	r6, r3, r6
 800b8ec:	930d      	strlt	r3, [sp, #52]	; 0x34
 800b8ee:	9b01      	ldr	r3, [sp, #4]
 800b8f0:	bfb8      	it	lt
 800b8f2:	2600      	movlt	r6, #0
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	bfb5      	itete	lt
 800b8f8:	eba8 0503 	sublt.w	r5, r8, r3
 800b8fc:	9b01      	ldrge	r3, [sp, #4]
 800b8fe:	2300      	movlt	r3, #0
 800b900:	4645      	movge	r5, r8
 800b902:	e747      	b.n	800b794 <_dtoa_r+0x75c>
 800b904:	9e06      	ldr	r6, [sp, #24]
 800b906:	9f08      	ldr	r7, [sp, #32]
 800b908:	4645      	mov	r5, r8
 800b90a:	e74c      	b.n	800b7a6 <_dtoa_r+0x76e>
 800b90c:	9a06      	ldr	r2, [sp, #24]
 800b90e:	e775      	b.n	800b7fc <_dtoa_r+0x7c4>
 800b910:	9b05      	ldr	r3, [sp, #20]
 800b912:	2b01      	cmp	r3, #1
 800b914:	dc18      	bgt.n	800b948 <_dtoa_r+0x910>
 800b916:	9b02      	ldr	r3, [sp, #8]
 800b918:	b9b3      	cbnz	r3, 800b948 <_dtoa_r+0x910>
 800b91a:	9b03      	ldr	r3, [sp, #12]
 800b91c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b920:	b9a3      	cbnz	r3, 800b94c <_dtoa_r+0x914>
 800b922:	9b03      	ldr	r3, [sp, #12]
 800b924:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b928:	0d1b      	lsrs	r3, r3, #20
 800b92a:	051b      	lsls	r3, r3, #20
 800b92c:	b12b      	cbz	r3, 800b93a <_dtoa_r+0x902>
 800b92e:	9b04      	ldr	r3, [sp, #16]
 800b930:	3301      	adds	r3, #1
 800b932:	9304      	str	r3, [sp, #16]
 800b934:	f108 0801 	add.w	r8, r8, #1
 800b938:	2301      	movs	r3, #1
 800b93a:	9306      	str	r3, [sp, #24]
 800b93c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b93e:	2b00      	cmp	r3, #0
 800b940:	f47f af74 	bne.w	800b82c <_dtoa_r+0x7f4>
 800b944:	2001      	movs	r0, #1
 800b946:	e779      	b.n	800b83c <_dtoa_r+0x804>
 800b948:	2300      	movs	r3, #0
 800b94a:	e7f6      	b.n	800b93a <_dtoa_r+0x902>
 800b94c:	9b02      	ldr	r3, [sp, #8]
 800b94e:	e7f4      	b.n	800b93a <_dtoa_r+0x902>
 800b950:	d085      	beq.n	800b85e <_dtoa_r+0x826>
 800b952:	4618      	mov	r0, r3
 800b954:	301c      	adds	r0, #28
 800b956:	e77d      	b.n	800b854 <_dtoa_r+0x81c>
 800b958:	40240000 	.word	0x40240000
 800b95c:	9b01      	ldr	r3, [sp, #4]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	dc38      	bgt.n	800b9d4 <_dtoa_r+0x99c>
 800b962:	9b05      	ldr	r3, [sp, #20]
 800b964:	2b02      	cmp	r3, #2
 800b966:	dd35      	ble.n	800b9d4 <_dtoa_r+0x99c>
 800b968:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b96c:	f1b9 0f00 	cmp.w	r9, #0
 800b970:	d10d      	bne.n	800b98e <_dtoa_r+0x956>
 800b972:	4631      	mov	r1, r6
 800b974:	464b      	mov	r3, r9
 800b976:	2205      	movs	r2, #5
 800b978:	4620      	mov	r0, r4
 800b97a:	f000 fabf 	bl	800befc <__multadd>
 800b97e:	4601      	mov	r1, r0
 800b980:	4606      	mov	r6, r0
 800b982:	4658      	mov	r0, fp
 800b984:	f000 fcd6 	bl	800c334 <__mcmp>
 800b988:	2800      	cmp	r0, #0
 800b98a:	f73f adbd 	bgt.w	800b508 <_dtoa_r+0x4d0>
 800b98e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b990:	9d00      	ldr	r5, [sp, #0]
 800b992:	ea6f 0a03 	mvn.w	sl, r3
 800b996:	f04f 0800 	mov.w	r8, #0
 800b99a:	4631      	mov	r1, r6
 800b99c:	4620      	mov	r0, r4
 800b99e:	f000 fa8b 	bl	800beb8 <_Bfree>
 800b9a2:	2f00      	cmp	r7, #0
 800b9a4:	f43f aeb4 	beq.w	800b710 <_dtoa_r+0x6d8>
 800b9a8:	f1b8 0f00 	cmp.w	r8, #0
 800b9ac:	d005      	beq.n	800b9ba <_dtoa_r+0x982>
 800b9ae:	45b8      	cmp	r8, r7
 800b9b0:	d003      	beq.n	800b9ba <_dtoa_r+0x982>
 800b9b2:	4641      	mov	r1, r8
 800b9b4:	4620      	mov	r0, r4
 800b9b6:	f000 fa7f 	bl	800beb8 <_Bfree>
 800b9ba:	4639      	mov	r1, r7
 800b9bc:	4620      	mov	r0, r4
 800b9be:	f000 fa7b 	bl	800beb8 <_Bfree>
 800b9c2:	e6a5      	b.n	800b710 <_dtoa_r+0x6d8>
 800b9c4:	2600      	movs	r6, #0
 800b9c6:	4637      	mov	r7, r6
 800b9c8:	e7e1      	b.n	800b98e <_dtoa_r+0x956>
 800b9ca:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b9cc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b9d0:	4637      	mov	r7, r6
 800b9d2:	e599      	b.n	800b508 <_dtoa_r+0x4d0>
 800b9d4:	9b08      	ldr	r3, [sp, #32]
 800b9d6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	f000 80fd 	beq.w	800bbda <_dtoa_r+0xba2>
 800b9e0:	2d00      	cmp	r5, #0
 800b9e2:	dd05      	ble.n	800b9f0 <_dtoa_r+0x9b8>
 800b9e4:	4639      	mov	r1, r7
 800b9e6:	462a      	mov	r2, r5
 800b9e8:	4620      	mov	r0, r4
 800b9ea:	f000 fc37 	bl	800c25c <__lshift>
 800b9ee:	4607      	mov	r7, r0
 800b9f0:	9b06      	ldr	r3, [sp, #24]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d05c      	beq.n	800bab0 <_dtoa_r+0xa78>
 800b9f6:	6879      	ldr	r1, [r7, #4]
 800b9f8:	4620      	mov	r0, r4
 800b9fa:	f000 fa1d 	bl	800be38 <_Balloc>
 800b9fe:	4605      	mov	r5, r0
 800ba00:	b928      	cbnz	r0, 800ba0e <_dtoa_r+0x9d6>
 800ba02:	4b80      	ldr	r3, [pc, #512]	; (800bc04 <_dtoa_r+0xbcc>)
 800ba04:	4602      	mov	r2, r0
 800ba06:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ba0a:	f7ff bb2e 	b.w	800b06a <_dtoa_r+0x32>
 800ba0e:	693a      	ldr	r2, [r7, #16]
 800ba10:	3202      	adds	r2, #2
 800ba12:	0092      	lsls	r2, r2, #2
 800ba14:	f107 010c 	add.w	r1, r7, #12
 800ba18:	300c      	adds	r0, #12
 800ba1a:	f000 f9ff 	bl	800be1c <memcpy>
 800ba1e:	2201      	movs	r2, #1
 800ba20:	4629      	mov	r1, r5
 800ba22:	4620      	mov	r0, r4
 800ba24:	f000 fc1a 	bl	800c25c <__lshift>
 800ba28:	9b00      	ldr	r3, [sp, #0]
 800ba2a:	3301      	adds	r3, #1
 800ba2c:	9301      	str	r3, [sp, #4]
 800ba2e:	9b00      	ldr	r3, [sp, #0]
 800ba30:	444b      	add	r3, r9
 800ba32:	9307      	str	r3, [sp, #28]
 800ba34:	9b02      	ldr	r3, [sp, #8]
 800ba36:	f003 0301 	and.w	r3, r3, #1
 800ba3a:	46b8      	mov	r8, r7
 800ba3c:	9306      	str	r3, [sp, #24]
 800ba3e:	4607      	mov	r7, r0
 800ba40:	9b01      	ldr	r3, [sp, #4]
 800ba42:	4631      	mov	r1, r6
 800ba44:	3b01      	subs	r3, #1
 800ba46:	4658      	mov	r0, fp
 800ba48:	9302      	str	r3, [sp, #8]
 800ba4a:	f7ff fa69 	bl	800af20 <quorem>
 800ba4e:	4603      	mov	r3, r0
 800ba50:	3330      	adds	r3, #48	; 0x30
 800ba52:	9004      	str	r0, [sp, #16]
 800ba54:	4641      	mov	r1, r8
 800ba56:	4658      	mov	r0, fp
 800ba58:	9308      	str	r3, [sp, #32]
 800ba5a:	f000 fc6b 	bl	800c334 <__mcmp>
 800ba5e:	463a      	mov	r2, r7
 800ba60:	4681      	mov	r9, r0
 800ba62:	4631      	mov	r1, r6
 800ba64:	4620      	mov	r0, r4
 800ba66:	f000 fc81 	bl	800c36c <__mdiff>
 800ba6a:	68c2      	ldr	r2, [r0, #12]
 800ba6c:	9b08      	ldr	r3, [sp, #32]
 800ba6e:	4605      	mov	r5, r0
 800ba70:	bb02      	cbnz	r2, 800bab4 <_dtoa_r+0xa7c>
 800ba72:	4601      	mov	r1, r0
 800ba74:	4658      	mov	r0, fp
 800ba76:	f000 fc5d 	bl	800c334 <__mcmp>
 800ba7a:	9b08      	ldr	r3, [sp, #32]
 800ba7c:	4602      	mov	r2, r0
 800ba7e:	4629      	mov	r1, r5
 800ba80:	4620      	mov	r0, r4
 800ba82:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800ba86:	f000 fa17 	bl	800beb8 <_Bfree>
 800ba8a:	9b05      	ldr	r3, [sp, #20]
 800ba8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba8e:	9d01      	ldr	r5, [sp, #4]
 800ba90:	ea43 0102 	orr.w	r1, r3, r2
 800ba94:	9b06      	ldr	r3, [sp, #24]
 800ba96:	430b      	orrs	r3, r1
 800ba98:	9b08      	ldr	r3, [sp, #32]
 800ba9a:	d10d      	bne.n	800bab8 <_dtoa_r+0xa80>
 800ba9c:	2b39      	cmp	r3, #57	; 0x39
 800ba9e:	d029      	beq.n	800baf4 <_dtoa_r+0xabc>
 800baa0:	f1b9 0f00 	cmp.w	r9, #0
 800baa4:	dd01      	ble.n	800baaa <_dtoa_r+0xa72>
 800baa6:	9b04      	ldr	r3, [sp, #16]
 800baa8:	3331      	adds	r3, #49	; 0x31
 800baaa:	9a02      	ldr	r2, [sp, #8]
 800baac:	7013      	strb	r3, [r2, #0]
 800baae:	e774      	b.n	800b99a <_dtoa_r+0x962>
 800bab0:	4638      	mov	r0, r7
 800bab2:	e7b9      	b.n	800ba28 <_dtoa_r+0x9f0>
 800bab4:	2201      	movs	r2, #1
 800bab6:	e7e2      	b.n	800ba7e <_dtoa_r+0xa46>
 800bab8:	f1b9 0f00 	cmp.w	r9, #0
 800babc:	db06      	blt.n	800bacc <_dtoa_r+0xa94>
 800babe:	9905      	ldr	r1, [sp, #20]
 800bac0:	ea41 0909 	orr.w	r9, r1, r9
 800bac4:	9906      	ldr	r1, [sp, #24]
 800bac6:	ea59 0101 	orrs.w	r1, r9, r1
 800baca:	d120      	bne.n	800bb0e <_dtoa_r+0xad6>
 800bacc:	2a00      	cmp	r2, #0
 800bace:	ddec      	ble.n	800baaa <_dtoa_r+0xa72>
 800bad0:	4659      	mov	r1, fp
 800bad2:	2201      	movs	r2, #1
 800bad4:	4620      	mov	r0, r4
 800bad6:	9301      	str	r3, [sp, #4]
 800bad8:	f000 fbc0 	bl	800c25c <__lshift>
 800badc:	4631      	mov	r1, r6
 800bade:	4683      	mov	fp, r0
 800bae0:	f000 fc28 	bl	800c334 <__mcmp>
 800bae4:	2800      	cmp	r0, #0
 800bae6:	9b01      	ldr	r3, [sp, #4]
 800bae8:	dc02      	bgt.n	800baf0 <_dtoa_r+0xab8>
 800baea:	d1de      	bne.n	800baaa <_dtoa_r+0xa72>
 800baec:	07da      	lsls	r2, r3, #31
 800baee:	d5dc      	bpl.n	800baaa <_dtoa_r+0xa72>
 800baf0:	2b39      	cmp	r3, #57	; 0x39
 800baf2:	d1d8      	bne.n	800baa6 <_dtoa_r+0xa6e>
 800baf4:	9a02      	ldr	r2, [sp, #8]
 800baf6:	2339      	movs	r3, #57	; 0x39
 800baf8:	7013      	strb	r3, [r2, #0]
 800bafa:	462b      	mov	r3, r5
 800bafc:	461d      	mov	r5, r3
 800bafe:	3b01      	subs	r3, #1
 800bb00:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bb04:	2a39      	cmp	r2, #57	; 0x39
 800bb06:	d050      	beq.n	800bbaa <_dtoa_r+0xb72>
 800bb08:	3201      	adds	r2, #1
 800bb0a:	701a      	strb	r2, [r3, #0]
 800bb0c:	e745      	b.n	800b99a <_dtoa_r+0x962>
 800bb0e:	2a00      	cmp	r2, #0
 800bb10:	dd03      	ble.n	800bb1a <_dtoa_r+0xae2>
 800bb12:	2b39      	cmp	r3, #57	; 0x39
 800bb14:	d0ee      	beq.n	800baf4 <_dtoa_r+0xabc>
 800bb16:	3301      	adds	r3, #1
 800bb18:	e7c7      	b.n	800baaa <_dtoa_r+0xa72>
 800bb1a:	9a01      	ldr	r2, [sp, #4]
 800bb1c:	9907      	ldr	r1, [sp, #28]
 800bb1e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800bb22:	428a      	cmp	r2, r1
 800bb24:	d02a      	beq.n	800bb7c <_dtoa_r+0xb44>
 800bb26:	4659      	mov	r1, fp
 800bb28:	2300      	movs	r3, #0
 800bb2a:	220a      	movs	r2, #10
 800bb2c:	4620      	mov	r0, r4
 800bb2e:	f000 f9e5 	bl	800befc <__multadd>
 800bb32:	45b8      	cmp	r8, r7
 800bb34:	4683      	mov	fp, r0
 800bb36:	f04f 0300 	mov.w	r3, #0
 800bb3a:	f04f 020a 	mov.w	r2, #10
 800bb3e:	4641      	mov	r1, r8
 800bb40:	4620      	mov	r0, r4
 800bb42:	d107      	bne.n	800bb54 <_dtoa_r+0xb1c>
 800bb44:	f000 f9da 	bl	800befc <__multadd>
 800bb48:	4680      	mov	r8, r0
 800bb4a:	4607      	mov	r7, r0
 800bb4c:	9b01      	ldr	r3, [sp, #4]
 800bb4e:	3301      	adds	r3, #1
 800bb50:	9301      	str	r3, [sp, #4]
 800bb52:	e775      	b.n	800ba40 <_dtoa_r+0xa08>
 800bb54:	f000 f9d2 	bl	800befc <__multadd>
 800bb58:	4639      	mov	r1, r7
 800bb5a:	4680      	mov	r8, r0
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	220a      	movs	r2, #10
 800bb60:	4620      	mov	r0, r4
 800bb62:	f000 f9cb 	bl	800befc <__multadd>
 800bb66:	4607      	mov	r7, r0
 800bb68:	e7f0      	b.n	800bb4c <_dtoa_r+0xb14>
 800bb6a:	f1b9 0f00 	cmp.w	r9, #0
 800bb6e:	9a00      	ldr	r2, [sp, #0]
 800bb70:	bfcc      	ite	gt
 800bb72:	464d      	movgt	r5, r9
 800bb74:	2501      	movle	r5, #1
 800bb76:	4415      	add	r5, r2
 800bb78:	f04f 0800 	mov.w	r8, #0
 800bb7c:	4659      	mov	r1, fp
 800bb7e:	2201      	movs	r2, #1
 800bb80:	4620      	mov	r0, r4
 800bb82:	9301      	str	r3, [sp, #4]
 800bb84:	f000 fb6a 	bl	800c25c <__lshift>
 800bb88:	4631      	mov	r1, r6
 800bb8a:	4683      	mov	fp, r0
 800bb8c:	f000 fbd2 	bl	800c334 <__mcmp>
 800bb90:	2800      	cmp	r0, #0
 800bb92:	dcb2      	bgt.n	800bafa <_dtoa_r+0xac2>
 800bb94:	d102      	bne.n	800bb9c <_dtoa_r+0xb64>
 800bb96:	9b01      	ldr	r3, [sp, #4]
 800bb98:	07db      	lsls	r3, r3, #31
 800bb9a:	d4ae      	bmi.n	800bafa <_dtoa_r+0xac2>
 800bb9c:	462b      	mov	r3, r5
 800bb9e:	461d      	mov	r5, r3
 800bba0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bba4:	2a30      	cmp	r2, #48	; 0x30
 800bba6:	d0fa      	beq.n	800bb9e <_dtoa_r+0xb66>
 800bba8:	e6f7      	b.n	800b99a <_dtoa_r+0x962>
 800bbaa:	9a00      	ldr	r2, [sp, #0]
 800bbac:	429a      	cmp	r2, r3
 800bbae:	d1a5      	bne.n	800bafc <_dtoa_r+0xac4>
 800bbb0:	f10a 0a01 	add.w	sl, sl, #1
 800bbb4:	2331      	movs	r3, #49	; 0x31
 800bbb6:	e779      	b.n	800baac <_dtoa_r+0xa74>
 800bbb8:	4b13      	ldr	r3, [pc, #76]	; (800bc08 <_dtoa_r+0xbd0>)
 800bbba:	f7ff baaf 	b.w	800b11c <_dtoa_r+0xe4>
 800bbbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	f47f aa86 	bne.w	800b0d2 <_dtoa_r+0x9a>
 800bbc6:	4b11      	ldr	r3, [pc, #68]	; (800bc0c <_dtoa_r+0xbd4>)
 800bbc8:	f7ff baa8 	b.w	800b11c <_dtoa_r+0xe4>
 800bbcc:	f1b9 0f00 	cmp.w	r9, #0
 800bbd0:	dc03      	bgt.n	800bbda <_dtoa_r+0xba2>
 800bbd2:	9b05      	ldr	r3, [sp, #20]
 800bbd4:	2b02      	cmp	r3, #2
 800bbd6:	f73f aec9 	bgt.w	800b96c <_dtoa_r+0x934>
 800bbda:	9d00      	ldr	r5, [sp, #0]
 800bbdc:	4631      	mov	r1, r6
 800bbde:	4658      	mov	r0, fp
 800bbe0:	f7ff f99e 	bl	800af20 <quorem>
 800bbe4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800bbe8:	f805 3b01 	strb.w	r3, [r5], #1
 800bbec:	9a00      	ldr	r2, [sp, #0]
 800bbee:	1aaa      	subs	r2, r5, r2
 800bbf0:	4591      	cmp	r9, r2
 800bbf2:	ddba      	ble.n	800bb6a <_dtoa_r+0xb32>
 800bbf4:	4659      	mov	r1, fp
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	220a      	movs	r2, #10
 800bbfa:	4620      	mov	r0, r4
 800bbfc:	f000 f97e 	bl	800befc <__multadd>
 800bc00:	4683      	mov	fp, r0
 800bc02:	e7eb      	b.n	800bbdc <_dtoa_r+0xba4>
 800bc04:	0800d54f 	.word	0x0800d54f
 800bc08:	0800d4a8 	.word	0x0800d4a8
 800bc0c:	0800d4cc 	.word	0x0800d4cc

0800bc10 <std>:
 800bc10:	2300      	movs	r3, #0
 800bc12:	b510      	push	{r4, lr}
 800bc14:	4604      	mov	r4, r0
 800bc16:	e9c0 3300 	strd	r3, r3, [r0]
 800bc1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bc1e:	6083      	str	r3, [r0, #8]
 800bc20:	8181      	strh	r1, [r0, #12]
 800bc22:	6643      	str	r3, [r0, #100]	; 0x64
 800bc24:	81c2      	strh	r2, [r0, #14]
 800bc26:	6183      	str	r3, [r0, #24]
 800bc28:	4619      	mov	r1, r3
 800bc2a:	2208      	movs	r2, #8
 800bc2c:	305c      	adds	r0, #92	; 0x5c
 800bc2e:	f7fe fced 	bl	800a60c <memset>
 800bc32:	4b05      	ldr	r3, [pc, #20]	; (800bc48 <std+0x38>)
 800bc34:	6263      	str	r3, [r4, #36]	; 0x24
 800bc36:	4b05      	ldr	r3, [pc, #20]	; (800bc4c <std+0x3c>)
 800bc38:	62a3      	str	r3, [r4, #40]	; 0x28
 800bc3a:	4b05      	ldr	r3, [pc, #20]	; (800bc50 <std+0x40>)
 800bc3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bc3e:	4b05      	ldr	r3, [pc, #20]	; (800bc54 <std+0x44>)
 800bc40:	6224      	str	r4, [r4, #32]
 800bc42:	6323      	str	r3, [r4, #48]	; 0x30
 800bc44:	bd10      	pop	{r4, pc}
 800bc46:	bf00      	nop
 800bc48:	0800c97d 	.word	0x0800c97d
 800bc4c:	0800c99f 	.word	0x0800c99f
 800bc50:	0800c9d7 	.word	0x0800c9d7
 800bc54:	0800c9fb 	.word	0x0800c9fb

0800bc58 <_cleanup_r>:
 800bc58:	4901      	ldr	r1, [pc, #4]	; (800bc60 <_cleanup_r+0x8>)
 800bc5a:	f000 b8af 	b.w	800bdbc <_fwalk_reent>
 800bc5e:	bf00      	nop
 800bc60:	0800cd11 	.word	0x0800cd11

0800bc64 <__sfmoreglue>:
 800bc64:	b570      	push	{r4, r5, r6, lr}
 800bc66:	1e4a      	subs	r2, r1, #1
 800bc68:	2568      	movs	r5, #104	; 0x68
 800bc6a:	4355      	muls	r5, r2
 800bc6c:	460e      	mov	r6, r1
 800bc6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bc72:	f000 fcbf 	bl	800c5f4 <_malloc_r>
 800bc76:	4604      	mov	r4, r0
 800bc78:	b140      	cbz	r0, 800bc8c <__sfmoreglue+0x28>
 800bc7a:	2100      	movs	r1, #0
 800bc7c:	e9c0 1600 	strd	r1, r6, [r0]
 800bc80:	300c      	adds	r0, #12
 800bc82:	60a0      	str	r0, [r4, #8]
 800bc84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bc88:	f7fe fcc0 	bl	800a60c <memset>
 800bc8c:	4620      	mov	r0, r4
 800bc8e:	bd70      	pop	{r4, r5, r6, pc}

0800bc90 <__sfp_lock_acquire>:
 800bc90:	4801      	ldr	r0, [pc, #4]	; (800bc98 <__sfp_lock_acquire+0x8>)
 800bc92:	f000 b8b8 	b.w	800be06 <__retarget_lock_acquire_recursive>
 800bc96:	bf00      	nop
 800bc98:	20000ad4 	.word	0x20000ad4

0800bc9c <__sfp_lock_release>:
 800bc9c:	4801      	ldr	r0, [pc, #4]	; (800bca4 <__sfp_lock_release+0x8>)
 800bc9e:	f000 b8b3 	b.w	800be08 <__retarget_lock_release_recursive>
 800bca2:	bf00      	nop
 800bca4:	20000ad4 	.word	0x20000ad4

0800bca8 <__sinit_lock_acquire>:
 800bca8:	4801      	ldr	r0, [pc, #4]	; (800bcb0 <__sinit_lock_acquire+0x8>)
 800bcaa:	f000 b8ac 	b.w	800be06 <__retarget_lock_acquire_recursive>
 800bcae:	bf00      	nop
 800bcb0:	20000acf 	.word	0x20000acf

0800bcb4 <__sinit_lock_release>:
 800bcb4:	4801      	ldr	r0, [pc, #4]	; (800bcbc <__sinit_lock_release+0x8>)
 800bcb6:	f000 b8a7 	b.w	800be08 <__retarget_lock_release_recursive>
 800bcba:	bf00      	nop
 800bcbc:	20000acf 	.word	0x20000acf

0800bcc0 <__sinit>:
 800bcc0:	b510      	push	{r4, lr}
 800bcc2:	4604      	mov	r4, r0
 800bcc4:	f7ff fff0 	bl	800bca8 <__sinit_lock_acquire>
 800bcc8:	69a3      	ldr	r3, [r4, #24]
 800bcca:	b11b      	cbz	r3, 800bcd4 <__sinit+0x14>
 800bccc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bcd0:	f7ff bff0 	b.w	800bcb4 <__sinit_lock_release>
 800bcd4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bcd8:	6523      	str	r3, [r4, #80]	; 0x50
 800bcda:	4b13      	ldr	r3, [pc, #76]	; (800bd28 <__sinit+0x68>)
 800bcdc:	4a13      	ldr	r2, [pc, #76]	; (800bd2c <__sinit+0x6c>)
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	62a2      	str	r2, [r4, #40]	; 0x28
 800bce2:	42a3      	cmp	r3, r4
 800bce4:	bf04      	itt	eq
 800bce6:	2301      	moveq	r3, #1
 800bce8:	61a3      	streq	r3, [r4, #24]
 800bcea:	4620      	mov	r0, r4
 800bcec:	f000 f820 	bl	800bd30 <__sfp>
 800bcf0:	6060      	str	r0, [r4, #4]
 800bcf2:	4620      	mov	r0, r4
 800bcf4:	f000 f81c 	bl	800bd30 <__sfp>
 800bcf8:	60a0      	str	r0, [r4, #8]
 800bcfa:	4620      	mov	r0, r4
 800bcfc:	f000 f818 	bl	800bd30 <__sfp>
 800bd00:	2200      	movs	r2, #0
 800bd02:	60e0      	str	r0, [r4, #12]
 800bd04:	2104      	movs	r1, #4
 800bd06:	6860      	ldr	r0, [r4, #4]
 800bd08:	f7ff ff82 	bl	800bc10 <std>
 800bd0c:	68a0      	ldr	r0, [r4, #8]
 800bd0e:	2201      	movs	r2, #1
 800bd10:	2109      	movs	r1, #9
 800bd12:	f7ff ff7d 	bl	800bc10 <std>
 800bd16:	68e0      	ldr	r0, [r4, #12]
 800bd18:	2202      	movs	r2, #2
 800bd1a:	2112      	movs	r1, #18
 800bd1c:	f7ff ff78 	bl	800bc10 <std>
 800bd20:	2301      	movs	r3, #1
 800bd22:	61a3      	str	r3, [r4, #24]
 800bd24:	e7d2      	b.n	800bccc <__sinit+0xc>
 800bd26:	bf00      	nop
 800bd28:	0800d494 	.word	0x0800d494
 800bd2c:	0800bc59 	.word	0x0800bc59

0800bd30 <__sfp>:
 800bd30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd32:	4607      	mov	r7, r0
 800bd34:	f7ff ffac 	bl	800bc90 <__sfp_lock_acquire>
 800bd38:	4b1e      	ldr	r3, [pc, #120]	; (800bdb4 <__sfp+0x84>)
 800bd3a:	681e      	ldr	r6, [r3, #0]
 800bd3c:	69b3      	ldr	r3, [r6, #24]
 800bd3e:	b913      	cbnz	r3, 800bd46 <__sfp+0x16>
 800bd40:	4630      	mov	r0, r6
 800bd42:	f7ff ffbd 	bl	800bcc0 <__sinit>
 800bd46:	3648      	adds	r6, #72	; 0x48
 800bd48:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bd4c:	3b01      	subs	r3, #1
 800bd4e:	d503      	bpl.n	800bd58 <__sfp+0x28>
 800bd50:	6833      	ldr	r3, [r6, #0]
 800bd52:	b30b      	cbz	r3, 800bd98 <__sfp+0x68>
 800bd54:	6836      	ldr	r6, [r6, #0]
 800bd56:	e7f7      	b.n	800bd48 <__sfp+0x18>
 800bd58:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bd5c:	b9d5      	cbnz	r5, 800bd94 <__sfp+0x64>
 800bd5e:	4b16      	ldr	r3, [pc, #88]	; (800bdb8 <__sfp+0x88>)
 800bd60:	60e3      	str	r3, [r4, #12]
 800bd62:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bd66:	6665      	str	r5, [r4, #100]	; 0x64
 800bd68:	f000 f84c 	bl	800be04 <__retarget_lock_init_recursive>
 800bd6c:	f7ff ff96 	bl	800bc9c <__sfp_lock_release>
 800bd70:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bd74:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bd78:	6025      	str	r5, [r4, #0]
 800bd7a:	61a5      	str	r5, [r4, #24]
 800bd7c:	2208      	movs	r2, #8
 800bd7e:	4629      	mov	r1, r5
 800bd80:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bd84:	f7fe fc42 	bl	800a60c <memset>
 800bd88:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bd8c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bd90:	4620      	mov	r0, r4
 800bd92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd94:	3468      	adds	r4, #104	; 0x68
 800bd96:	e7d9      	b.n	800bd4c <__sfp+0x1c>
 800bd98:	2104      	movs	r1, #4
 800bd9a:	4638      	mov	r0, r7
 800bd9c:	f7ff ff62 	bl	800bc64 <__sfmoreglue>
 800bda0:	4604      	mov	r4, r0
 800bda2:	6030      	str	r0, [r6, #0]
 800bda4:	2800      	cmp	r0, #0
 800bda6:	d1d5      	bne.n	800bd54 <__sfp+0x24>
 800bda8:	f7ff ff78 	bl	800bc9c <__sfp_lock_release>
 800bdac:	230c      	movs	r3, #12
 800bdae:	603b      	str	r3, [r7, #0]
 800bdb0:	e7ee      	b.n	800bd90 <__sfp+0x60>
 800bdb2:	bf00      	nop
 800bdb4:	0800d494 	.word	0x0800d494
 800bdb8:	ffff0001 	.word	0xffff0001

0800bdbc <_fwalk_reent>:
 800bdbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bdc0:	4606      	mov	r6, r0
 800bdc2:	4688      	mov	r8, r1
 800bdc4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bdc8:	2700      	movs	r7, #0
 800bdca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bdce:	f1b9 0901 	subs.w	r9, r9, #1
 800bdd2:	d505      	bpl.n	800bde0 <_fwalk_reent+0x24>
 800bdd4:	6824      	ldr	r4, [r4, #0]
 800bdd6:	2c00      	cmp	r4, #0
 800bdd8:	d1f7      	bne.n	800bdca <_fwalk_reent+0xe>
 800bdda:	4638      	mov	r0, r7
 800bddc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bde0:	89ab      	ldrh	r3, [r5, #12]
 800bde2:	2b01      	cmp	r3, #1
 800bde4:	d907      	bls.n	800bdf6 <_fwalk_reent+0x3a>
 800bde6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bdea:	3301      	adds	r3, #1
 800bdec:	d003      	beq.n	800bdf6 <_fwalk_reent+0x3a>
 800bdee:	4629      	mov	r1, r5
 800bdf0:	4630      	mov	r0, r6
 800bdf2:	47c0      	blx	r8
 800bdf4:	4307      	orrs	r7, r0
 800bdf6:	3568      	adds	r5, #104	; 0x68
 800bdf8:	e7e9      	b.n	800bdce <_fwalk_reent+0x12>
	...

0800bdfc <_localeconv_r>:
 800bdfc:	4800      	ldr	r0, [pc, #0]	; (800be00 <_localeconv_r+0x4>)
 800bdfe:	4770      	bx	lr
 800be00:	200001e4 	.word	0x200001e4

0800be04 <__retarget_lock_init_recursive>:
 800be04:	4770      	bx	lr

0800be06 <__retarget_lock_acquire_recursive>:
 800be06:	4770      	bx	lr

0800be08 <__retarget_lock_release_recursive>:
 800be08:	4770      	bx	lr
	...

0800be0c <malloc>:
 800be0c:	4b02      	ldr	r3, [pc, #8]	; (800be18 <malloc+0xc>)
 800be0e:	4601      	mov	r1, r0
 800be10:	6818      	ldr	r0, [r3, #0]
 800be12:	f000 bbef 	b.w	800c5f4 <_malloc_r>
 800be16:	bf00      	nop
 800be18:	20000090 	.word	0x20000090

0800be1c <memcpy>:
 800be1c:	440a      	add	r2, r1
 800be1e:	4291      	cmp	r1, r2
 800be20:	f100 33ff 	add.w	r3, r0, #4294967295
 800be24:	d100      	bne.n	800be28 <memcpy+0xc>
 800be26:	4770      	bx	lr
 800be28:	b510      	push	{r4, lr}
 800be2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be32:	4291      	cmp	r1, r2
 800be34:	d1f9      	bne.n	800be2a <memcpy+0xe>
 800be36:	bd10      	pop	{r4, pc}

0800be38 <_Balloc>:
 800be38:	b570      	push	{r4, r5, r6, lr}
 800be3a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800be3c:	4604      	mov	r4, r0
 800be3e:	460d      	mov	r5, r1
 800be40:	b976      	cbnz	r6, 800be60 <_Balloc+0x28>
 800be42:	2010      	movs	r0, #16
 800be44:	f7ff ffe2 	bl	800be0c <malloc>
 800be48:	4602      	mov	r2, r0
 800be4a:	6260      	str	r0, [r4, #36]	; 0x24
 800be4c:	b920      	cbnz	r0, 800be58 <_Balloc+0x20>
 800be4e:	4b18      	ldr	r3, [pc, #96]	; (800beb0 <_Balloc+0x78>)
 800be50:	4818      	ldr	r0, [pc, #96]	; (800beb4 <_Balloc+0x7c>)
 800be52:	2166      	movs	r1, #102	; 0x66
 800be54:	f000 fea8 	bl	800cba8 <__assert_func>
 800be58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800be5c:	6006      	str	r6, [r0, #0]
 800be5e:	60c6      	str	r6, [r0, #12]
 800be60:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800be62:	68f3      	ldr	r3, [r6, #12]
 800be64:	b183      	cbz	r3, 800be88 <_Balloc+0x50>
 800be66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800be68:	68db      	ldr	r3, [r3, #12]
 800be6a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800be6e:	b9b8      	cbnz	r0, 800bea0 <_Balloc+0x68>
 800be70:	2101      	movs	r1, #1
 800be72:	fa01 f605 	lsl.w	r6, r1, r5
 800be76:	1d72      	adds	r2, r6, #5
 800be78:	0092      	lsls	r2, r2, #2
 800be7a:	4620      	mov	r0, r4
 800be7c:	f000 fb5a 	bl	800c534 <_calloc_r>
 800be80:	b160      	cbz	r0, 800be9c <_Balloc+0x64>
 800be82:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800be86:	e00e      	b.n	800bea6 <_Balloc+0x6e>
 800be88:	2221      	movs	r2, #33	; 0x21
 800be8a:	2104      	movs	r1, #4
 800be8c:	4620      	mov	r0, r4
 800be8e:	f000 fb51 	bl	800c534 <_calloc_r>
 800be92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800be94:	60f0      	str	r0, [r6, #12]
 800be96:	68db      	ldr	r3, [r3, #12]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d1e4      	bne.n	800be66 <_Balloc+0x2e>
 800be9c:	2000      	movs	r0, #0
 800be9e:	bd70      	pop	{r4, r5, r6, pc}
 800bea0:	6802      	ldr	r2, [r0, #0]
 800bea2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bea6:	2300      	movs	r3, #0
 800bea8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800beac:	e7f7      	b.n	800be9e <_Balloc+0x66>
 800beae:	bf00      	nop
 800beb0:	0800d4d9 	.word	0x0800d4d9
 800beb4:	0800d5c0 	.word	0x0800d5c0

0800beb8 <_Bfree>:
 800beb8:	b570      	push	{r4, r5, r6, lr}
 800beba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bebc:	4605      	mov	r5, r0
 800bebe:	460c      	mov	r4, r1
 800bec0:	b976      	cbnz	r6, 800bee0 <_Bfree+0x28>
 800bec2:	2010      	movs	r0, #16
 800bec4:	f7ff ffa2 	bl	800be0c <malloc>
 800bec8:	4602      	mov	r2, r0
 800beca:	6268      	str	r0, [r5, #36]	; 0x24
 800becc:	b920      	cbnz	r0, 800bed8 <_Bfree+0x20>
 800bece:	4b09      	ldr	r3, [pc, #36]	; (800bef4 <_Bfree+0x3c>)
 800bed0:	4809      	ldr	r0, [pc, #36]	; (800bef8 <_Bfree+0x40>)
 800bed2:	218a      	movs	r1, #138	; 0x8a
 800bed4:	f000 fe68 	bl	800cba8 <__assert_func>
 800bed8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bedc:	6006      	str	r6, [r0, #0]
 800bede:	60c6      	str	r6, [r0, #12]
 800bee0:	b13c      	cbz	r4, 800bef2 <_Bfree+0x3a>
 800bee2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bee4:	6862      	ldr	r2, [r4, #4]
 800bee6:	68db      	ldr	r3, [r3, #12]
 800bee8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800beec:	6021      	str	r1, [r4, #0]
 800beee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bef2:	bd70      	pop	{r4, r5, r6, pc}
 800bef4:	0800d4d9 	.word	0x0800d4d9
 800bef8:	0800d5c0 	.word	0x0800d5c0

0800befc <__multadd>:
 800befc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf00:	690e      	ldr	r6, [r1, #16]
 800bf02:	4607      	mov	r7, r0
 800bf04:	4698      	mov	r8, r3
 800bf06:	460c      	mov	r4, r1
 800bf08:	f101 0014 	add.w	r0, r1, #20
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	6805      	ldr	r5, [r0, #0]
 800bf10:	b2a9      	uxth	r1, r5
 800bf12:	fb02 8101 	mla	r1, r2, r1, r8
 800bf16:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800bf1a:	0c2d      	lsrs	r5, r5, #16
 800bf1c:	fb02 c505 	mla	r5, r2, r5, ip
 800bf20:	b289      	uxth	r1, r1
 800bf22:	3301      	adds	r3, #1
 800bf24:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800bf28:	429e      	cmp	r6, r3
 800bf2a:	f840 1b04 	str.w	r1, [r0], #4
 800bf2e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800bf32:	dcec      	bgt.n	800bf0e <__multadd+0x12>
 800bf34:	f1b8 0f00 	cmp.w	r8, #0
 800bf38:	d022      	beq.n	800bf80 <__multadd+0x84>
 800bf3a:	68a3      	ldr	r3, [r4, #8]
 800bf3c:	42b3      	cmp	r3, r6
 800bf3e:	dc19      	bgt.n	800bf74 <__multadd+0x78>
 800bf40:	6861      	ldr	r1, [r4, #4]
 800bf42:	4638      	mov	r0, r7
 800bf44:	3101      	adds	r1, #1
 800bf46:	f7ff ff77 	bl	800be38 <_Balloc>
 800bf4a:	4605      	mov	r5, r0
 800bf4c:	b928      	cbnz	r0, 800bf5a <__multadd+0x5e>
 800bf4e:	4602      	mov	r2, r0
 800bf50:	4b0d      	ldr	r3, [pc, #52]	; (800bf88 <__multadd+0x8c>)
 800bf52:	480e      	ldr	r0, [pc, #56]	; (800bf8c <__multadd+0x90>)
 800bf54:	21b5      	movs	r1, #181	; 0xb5
 800bf56:	f000 fe27 	bl	800cba8 <__assert_func>
 800bf5a:	6922      	ldr	r2, [r4, #16]
 800bf5c:	3202      	adds	r2, #2
 800bf5e:	f104 010c 	add.w	r1, r4, #12
 800bf62:	0092      	lsls	r2, r2, #2
 800bf64:	300c      	adds	r0, #12
 800bf66:	f7ff ff59 	bl	800be1c <memcpy>
 800bf6a:	4621      	mov	r1, r4
 800bf6c:	4638      	mov	r0, r7
 800bf6e:	f7ff ffa3 	bl	800beb8 <_Bfree>
 800bf72:	462c      	mov	r4, r5
 800bf74:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800bf78:	3601      	adds	r6, #1
 800bf7a:	f8c3 8014 	str.w	r8, [r3, #20]
 800bf7e:	6126      	str	r6, [r4, #16]
 800bf80:	4620      	mov	r0, r4
 800bf82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf86:	bf00      	nop
 800bf88:	0800d54f 	.word	0x0800d54f
 800bf8c:	0800d5c0 	.word	0x0800d5c0

0800bf90 <__hi0bits>:
 800bf90:	0c03      	lsrs	r3, r0, #16
 800bf92:	041b      	lsls	r3, r3, #16
 800bf94:	b9d3      	cbnz	r3, 800bfcc <__hi0bits+0x3c>
 800bf96:	0400      	lsls	r0, r0, #16
 800bf98:	2310      	movs	r3, #16
 800bf9a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bf9e:	bf04      	itt	eq
 800bfa0:	0200      	lsleq	r0, r0, #8
 800bfa2:	3308      	addeq	r3, #8
 800bfa4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bfa8:	bf04      	itt	eq
 800bfaa:	0100      	lsleq	r0, r0, #4
 800bfac:	3304      	addeq	r3, #4
 800bfae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bfb2:	bf04      	itt	eq
 800bfb4:	0080      	lsleq	r0, r0, #2
 800bfb6:	3302      	addeq	r3, #2
 800bfb8:	2800      	cmp	r0, #0
 800bfba:	db05      	blt.n	800bfc8 <__hi0bits+0x38>
 800bfbc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bfc0:	f103 0301 	add.w	r3, r3, #1
 800bfc4:	bf08      	it	eq
 800bfc6:	2320      	moveq	r3, #32
 800bfc8:	4618      	mov	r0, r3
 800bfca:	4770      	bx	lr
 800bfcc:	2300      	movs	r3, #0
 800bfce:	e7e4      	b.n	800bf9a <__hi0bits+0xa>

0800bfd0 <__lo0bits>:
 800bfd0:	6803      	ldr	r3, [r0, #0]
 800bfd2:	f013 0207 	ands.w	r2, r3, #7
 800bfd6:	4601      	mov	r1, r0
 800bfd8:	d00b      	beq.n	800bff2 <__lo0bits+0x22>
 800bfda:	07da      	lsls	r2, r3, #31
 800bfdc:	d424      	bmi.n	800c028 <__lo0bits+0x58>
 800bfde:	0798      	lsls	r0, r3, #30
 800bfe0:	bf49      	itett	mi
 800bfe2:	085b      	lsrmi	r3, r3, #1
 800bfe4:	089b      	lsrpl	r3, r3, #2
 800bfe6:	2001      	movmi	r0, #1
 800bfe8:	600b      	strmi	r3, [r1, #0]
 800bfea:	bf5c      	itt	pl
 800bfec:	600b      	strpl	r3, [r1, #0]
 800bfee:	2002      	movpl	r0, #2
 800bff0:	4770      	bx	lr
 800bff2:	b298      	uxth	r0, r3
 800bff4:	b9b0      	cbnz	r0, 800c024 <__lo0bits+0x54>
 800bff6:	0c1b      	lsrs	r3, r3, #16
 800bff8:	2010      	movs	r0, #16
 800bffa:	f013 0fff 	tst.w	r3, #255	; 0xff
 800bffe:	bf04      	itt	eq
 800c000:	0a1b      	lsreq	r3, r3, #8
 800c002:	3008      	addeq	r0, #8
 800c004:	071a      	lsls	r2, r3, #28
 800c006:	bf04      	itt	eq
 800c008:	091b      	lsreq	r3, r3, #4
 800c00a:	3004      	addeq	r0, #4
 800c00c:	079a      	lsls	r2, r3, #30
 800c00e:	bf04      	itt	eq
 800c010:	089b      	lsreq	r3, r3, #2
 800c012:	3002      	addeq	r0, #2
 800c014:	07da      	lsls	r2, r3, #31
 800c016:	d403      	bmi.n	800c020 <__lo0bits+0x50>
 800c018:	085b      	lsrs	r3, r3, #1
 800c01a:	f100 0001 	add.w	r0, r0, #1
 800c01e:	d005      	beq.n	800c02c <__lo0bits+0x5c>
 800c020:	600b      	str	r3, [r1, #0]
 800c022:	4770      	bx	lr
 800c024:	4610      	mov	r0, r2
 800c026:	e7e8      	b.n	800bffa <__lo0bits+0x2a>
 800c028:	2000      	movs	r0, #0
 800c02a:	4770      	bx	lr
 800c02c:	2020      	movs	r0, #32
 800c02e:	4770      	bx	lr

0800c030 <__i2b>:
 800c030:	b510      	push	{r4, lr}
 800c032:	460c      	mov	r4, r1
 800c034:	2101      	movs	r1, #1
 800c036:	f7ff feff 	bl	800be38 <_Balloc>
 800c03a:	4602      	mov	r2, r0
 800c03c:	b928      	cbnz	r0, 800c04a <__i2b+0x1a>
 800c03e:	4b05      	ldr	r3, [pc, #20]	; (800c054 <__i2b+0x24>)
 800c040:	4805      	ldr	r0, [pc, #20]	; (800c058 <__i2b+0x28>)
 800c042:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c046:	f000 fdaf 	bl	800cba8 <__assert_func>
 800c04a:	2301      	movs	r3, #1
 800c04c:	6144      	str	r4, [r0, #20]
 800c04e:	6103      	str	r3, [r0, #16]
 800c050:	bd10      	pop	{r4, pc}
 800c052:	bf00      	nop
 800c054:	0800d54f 	.word	0x0800d54f
 800c058:	0800d5c0 	.word	0x0800d5c0

0800c05c <__multiply>:
 800c05c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c060:	4614      	mov	r4, r2
 800c062:	690a      	ldr	r2, [r1, #16]
 800c064:	6923      	ldr	r3, [r4, #16]
 800c066:	429a      	cmp	r2, r3
 800c068:	bfb8      	it	lt
 800c06a:	460b      	movlt	r3, r1
 800c06c:	460d      	mov	r5, r1
 800c06e:	bfbc      	itt	lt
 800c070:	4625      	movlt	r5, r4
 800c072:	461c      	movlt	r4, r3
 800c074:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800c078:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c07c:	68ab      	ldr	r3, [r5, #8]
 800c07e:	6869      	ldr	r1, [r5, #4]
 800c080:	eb0a 0709 	add.w	r7, sl, r9
 800c084:	42bb      	cmp	r3, r7
 800c086:	b085      	sub	sp, #20
 800c088:	bfb8      	it	lt
 800c08a:	3101      	addlt	r1, #1
 800c08c:	f7ff fed4 	bl	800be38 <_Balloc>
 800c090:	b930      	cbnz	r0, 800c0a0 <__multiply+0x44>
 800c092:	4602      	mov	r2, r0
 800c094:	4b42      	ldr	r3, [pc, #264]	; (800c1a0 <__multiply+0x144>)
 800c096:	4843      	ldr	r0, [pc, #268]	; (800c1a4 <__multiply+0x148>)
 800c098:	f240 115d 	movw	r1, #349	; 0x15d
 800c09c:	f000 fd84 	bl	800cba8 <__assert_func>
 800c0a0:	f100 0614 	add.w	r6, r0, #20
 800c0a4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800c0a8:	4633      	mov	r3, r6
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	4543      	cmp	r3, r8
 800c0ae:	d31e      	bcc.n	800c0ee <__multiply+0x92>
 800c0b0:	f105 0c14 	add.w	ip, r5, #20
 800c0b4:	f104 0314 	add.w	r3, r4, #20
 800c0b8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800c0bc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800c0c0:	9202      	str	r2, [sp, #8]
 800c0c2:	ebac 0205 	sub.w	r2, ip, r5
 800c0c6:	3a15      	subs	r2, #21
 800c0c8:	f022 0203 	bic.w	r2, r2, #3
 800c0cc:	3204      	adds	r2, #4
 800c0ce:	f105 0115 	add.w	r1, r5, #21
 800c0d2:	458c      	cmp	ip, r1
 800c0d4:	bf38      	it	cc
 800c0d6:	2204      	movcc	r2, #4
 800c0d8:	9201      	str	r2, [sp, #4]
 800c0da:	9a02      	ldr	r2, [sp, #8]
 800c0dc:	9303      	str	r3, [sp, #12]
 800c0de:	429a      	cmp	r2, r3
 800c0e0:	d808      	bhi.n	800c0f4 <__multiply+0x98>
 800c0e2:	2f00      	cmp	r7, #0
 800c0e4:	dc55      	bgt.n	800c192 <__multiply+0x136>
 800c0e6:	6107      	str	r7, [r0, #16]
 800c0e8:	b005      	add	sp, #20
 800c0ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0ee:	f843 2b04 	str.w	r2, [r3], #4
 800c0f2:	e7db      	b.n	800c0ac <__multiply+0x50>
 800c0f4:	f8b3 a000 	ldrh.w	sl, [r3]
 800c0f8:	f1ba 0f00 	cmp.w	sl, #0
 800c0fc:	d020      	beq.n	800c140 <__multiply+0xe4>
 800c0fe:	f105 0e14 	add.w	lr, r5, #20
 800c102:	46b1      	mov	r9, r6
 800c104:	2200      	movs	r2, #0
 800c106:	f85e 4b04 	ldr.w	r4, [lr], #4
 800c10a:	f8d9 b000 	ldr.w	fp, [r9]
 800c10e:	b2a1      	uxth	r1, r4
 800c110:	fa1f fb8b 	uxth.w	fp, fp
 800c114:	fb0a b101 	mla	r1, sl, r1, fp
 800c118:	4411      	add	r1, r2
 800c11a:	f8d9 2000 	ldr.w	r2, [r9]
 800c11e:	0c24      	lsrs	r4, r4, #16
 800c120:	0c12      	lsrs	r2, r2, #16
 800c122:	fb0a 2404 	mla	r4, sl, r4, r2
 800c126:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800c12a:	b289      	uxth	r1, r1
 800c12c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c130:	45f4      	cmp	ip, lr
 800c132:	f849 1b04 	str.w	r1, [r9], #4
 800c136:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800c13a:	d8e4      	bhi.n	800c106 <__multiply+0xaa>
 800c13c:	9901      	ldr	r1, [sp, #4]
 800c13e:	5072      	str	r2, [r6, r1]
 800c140:	9a03      	ldr	r2, [sp, #12]
 800c142:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c146:	3304      	adds	r3, #4
 800c148:	f1b9 0f00 	cmp.w	r9, #0
 800c14c:	d01f      	beq.n	800c18e <__multiply+0x132>
 800c14e:	6834      	ldr	r4, [r6, #0]
 800c150:	f105 0114 	add.w	r1, r5, #20
 800c154:	46b6      	mov	lr, r6
 800c156:	f04f 0a00 	mov.w	sl, #0
 800c15a:	880a      	ldrh	r2, [r1, #0]
 800c15c:	f8be b002 	ldrh.w	fp, [lr, #2]
 800c160:	fb09 b202 	mla	r2, r9, r2, fp
 800c164:	4492      	add	sl, r2
 800c166:	b2a4      	uxth	r4, r4
 800c168:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800c16c:	f84e 4b04 	str.w	r4, [lr], #4
 800c170:	f851 4b04 	ldr.w	r4, [r1], #4
 800c174:	f8be 2000 	ldrh.w	r2, [lr]
 800c178:	0c24      	lsrs	r4, r4, #16
 800c17a:	fb09 2404 	mla	r4, r9, r4, r2
 800c17e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800c182:	458c      	cmp	ip, r1
 800c184:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c188:	d8e7      	bhi.n	800c15a <__multiply+0xfe>
 800c18a:	9a01      	ldr	r2, [sp, #4]
 800c18c:	50b4      	str	r4, [r6, r2]
 800c18e:	3604      	adds	r6, #4
 800c190:	e7a3      	b.n	800c0da <__multiply+0x7e>
 800c192:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c196:	2b00      	cmp	r3, #0
 800c198:	d1a5      	bne.n	800c0e6 <__multiply+0x8a>
 800c19a:	3f01      	subs	r7, #1
 800c19c:	e7a1      	b.n	800c0e2 <__multiply+0x86>
 800c19e:	bf00      	nop
 800c1a0:	0800d54f 	.word	0x0800d54f
 800c1a4:	0800d5c0 	.word	0x0800d5c0

0800c1a8 <__pow5mult>:
 800c1a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1ac:	4615      	mov	r5, r2
 800c1ae:	f012 0203 	ands.w	r2, r2, #3
 800c1b2:	4606      	mov	r6, r0
 800c1b4:	460f      	mov	r7, r1
 800c1b6:	d007      	beq.n	800c1c8 <__pow5mult+0x20>
 800c1b8:	4c25      	ldr	r4, [pc, #148]	; (800c250 <__pow5mult+0xa8>)
 800c1ba:	3a01      	subs	r2, #1
 800c1bc:	2300      	movs	r3, #0
 800c1be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c1c2:	f7ff fe9b 	bl	800befc <__multadd>
 800c1c6:	4607      	mov	r7, r0
 800c1c8:	10ad      	asrs	r5, r5, #2
 800c1ca:	d03d      	beq.n	800c248 <__pow5mult+0xa0>
 800c1cc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c1ce:	b97c      	cbnz	r4, 800c1f0 <__pow5mult+0x48>
 800c1d0:	2010      	movs	r0, #16
 800c1d2:	f7ff fe1b 	bl	800be0c <malloc>
 800c1d6:	4602      	mov	r2, r0
 800c1d8:	6270      	str	r0, [r6, #36]	; 0x24
 800c1da:	b928      	cbnz	r0, 800c1e8 <__pow5mult+0x40>
 800c1dc:	4b1d      	ldr	r3, [pc, #116]	; (800c254 <__pow5mult+0xac>)
 800c1de:	481e      	ldr	r0, [pc, #120]	; (800c258 <__pow5mult+0xb0>)
 800c1e0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c1e4:	f000 fce0 	bl	800cba8 <__assert_func>
 800c1e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c1ec:	6004      	str	r4, [r0, #0]
 800c1ee:	60c4      	str	r4, [r0, #12]
 800c1f0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c1f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c1f8:	b94c      	cbnz	r4, 800c20e <__pow5mult+0x66>
 800c1fa:	f240 2171 	movw	r1, #625	; 0x271
 800c1fe:	4630      	mov	r0, r6
 800c200:	f7ff ff16 	bl	800c030 <__i2b>
 800c204:	2300      	movs	r3, #0
 800c206:	f8c8 0008 	str.w	r0, [r8, #8]
 800c20a:	4604      	mov	r4, r0
 800c20c:	6003      	str	r3, [r0, #0]
 800c20e:	f04f 0900 	mov.w	r9, #0
 800c212:	07eb      	lsls	r3, r5, #31
 800c214:	d50a      	bpl.n	800c22c <__pow5mult+0x84>
 800c216:	4639      	mov	r1, r7
 800c218:	4622      	mov	r2, r4
 800c21a:	4630      	mov	r0, r6
 800c21c:	f7ff ff1e 	bl	800c05c <__multiply>
 800c220:	4639      	mov	r1, r7
 800c222:	4680      	mov	r8, r0
 800c224:	4630      	mov	r0, r6
 800c226:	f7ff fe47 	bl	800beb8 <_Bfree>
 800c22a:	4647      	mov	r7, r8
 800c22c:	106d      	asrs	r5, r5, #1
 800c22e:	d00b      	beq.n	800c248 <__pow5mult+0xa0>
 800c230:	6820      	ldr	r0, [r4, #0]
 800c232:	b938      	cbnz	r0, 800c244 <__pow5mult+0x9c>
 800c234:	4622      	mov	r2, r4
 800c236:	4621      	mov	r1, r4
 800c238:	4630      	mov	r0, r6
 800c23a:	f7ff ff0f 	bl	800c05c <__multiply>
 800c23e:	6020      	str	r0, [r4, #0]
 800c240:	f8c0 9000 	str.w	r9, [r0]
 800c244:	4604      	mov	r4, r0
 800c246:	e7e4      	b.n	800c212 <__pow5mult+0x6a>
 800c248:	4638      	mov	r0, r7
 800c24a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c24e:	bf00      	nop
 800c250:	0800d710 	.word	0x0800d710
 800c254:	0800d4d9 	.word	0x0800d4d9
 800c258:	0800d5c0 	.word	0x0800d5c0

0800c25c <__lshift>:
 800c25c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c260:	460c      	mov	r4, r1
 800c262:	6849      	ldr	r1, [r1, #4]
 800c264:	6923      	ldr	r3, [r4, #16]
 800c266:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c26a:	68a3      	ldr	r3, [r4, #8]
 800c26c:	4607      	mov	r7, r0
 800c26e:	4691      	mov	r9, r2
 800c270:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c274:	f108 0601 	add.w	r6, r8, #1
 800c278:	42b3      	cmp	r3, r6
 800c27a:	db0b      	blt.n	800c294 <__lshift+0x38>
 800c27c:	4638      	mov	r0, r7
 800c27e:	f7ff fddb 	bl	800be38 <_Balloc>
 800c282:	4605      	mov	r5, r0
 800c284:	b948      	cbnz	r0, 800c29a <__lshift+0x3e>
 800c286:	4602      	mov	r2, r0
 800c288:	4b28      	ldr	r3, [pc, #160]	; (800c32c <__lshift+0xd0>)
 800c28a:	4829      	ldr	r0, [pc, #164]	; (800c330 <__lshift+0xd4>)
 800c28c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c290:	f000 fc8a 	bl	800cba8 <__assert_func>
 800c294:	3101      	adds	r1, #1
 800c296:	005b      	lsls	r3, r3, #1
 800c298:	e7ee      	b.n	800c278 <__lshift+0x1c>
 800c29a:	2300      	movs	r3, #0
 800c29c:	f100 0114 	add.w	r1, r0, #20
 800c2a0:	f100 0210 	add.w	r2, r0, #16
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	4553      	cmp	r3, sl
 800c2a8:	db33      	blt.n	800c312 <__lshift+0xb6>
 800c2aa:	6920      	ldr	r0, [r4, #16]
 800c2ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c2b0:	f104 0314 	add.w	r3, r4, #20
 800c2b4:	f019 091f 	ands.w	r9, r9, #31
 800c2b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c2bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c2c0:	d02b      	beq.n	800c31a <__lshift+0xbe>
 800c2c2:	f1c9 0e20 	rsb	lr, r9, #32
 800c2c6:	468a      	mov	sl, r1
 800c2c8:	2200      	movs	r2, #0
 800c2ca:	6818      	ldr	r0, [r3, #0]
 800c2cc:	fa00 f009 	lsl.w	r0, r0, r9
 800c2d0:	4302      	orrs	r2, r0
 800c2d2:	f84a 2b04 	str.w	r2, [sl], #4
 800c2d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c2da:	459c      	cmp	ip, r3
 800c2dc:	fa22 f20e 	lsr.w	r2, r2, lr
 800c2e0:	d8f3      	bhi.n	800c2ca <__lshift+0x6e>
 800c2e2:	ebac 0304 	sub.w	r3, ip, r4
 800c2e6:	3b15      	subs	r3, #21
 800c2e8:	f023 0303 	bic.w	r3, r3, #3
 800c2ec:	3304      	adds	r3, #4
 800c2ee:	f104 0015 	add.w	r0, r4, #21
 800c2f2:	4584      	cmp	ip, r0
 800c2f4:	bf38      	it	cc
 800c2f6:	2304      	movcc	r3, #4
 800c2f8:	50ca      	str	r2, [r1, r3]
 800c2fa:	b10a      	cbz	r2, 800c300 <__lshift+0xa4>
 800c2fc:	f108 0602 	add.w	r6, r8, #2
 800c300:	3e01      	subs	r6, #1
 800c302:	4638      	mov	r0, r7
 800c304:	612e      	str	r6, [r5, #16]
 800c306:	4621      	mov	r1, r4
 800c308:	f7ff fdd6 	bl	800beb8 <_Bfree>
 800c30c:	4628      	mov	r0, r5
 800c30e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c312:	f842 0f04 	str.w	r0, [r2, #4]!
 800c316:	3301      	adds	r3, #1
 800c318:	e7c5      	b.n	800c2a6 <__lshift+0x4a>
 800c31a:	3904      	subs	r1, #4
 800c31c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c320:	f841 2f04 	str.w	r2, [r1, #4]!
 800c324:	459c      	cmp	ip, r3
 800c326:	d8f9      	bhi.n	800c31c <__lshift+0xc0>
 800c328:	e7ea      	b.n	800c300 <__lshift+0xa4>
 800c32a:	bf00      	nop
 800c32c:	0800d54f 	.word	0x0800d54f
 800c330:	0800d5c0 	.word	0x0800d5c0

0800c334 <__mcmp>:
 800c334:	b530      	push	{r4, r5, lr}
 800c336:	6902      	ldr	r2, [r0, #16]
 800c338:	690c      	ldr	r4, [r1, #16]
 800c33a:	1b12      	subs	r2, r2, r4
 800c33c:	d10e      	bne.n	800c35c <__mcmp+0x28>
 800c33e:	f100 0314 	add.w	r3, r0, #20
 800c342:	3114      	adds	r1, #20
 800c344:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c348:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c34c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c350:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c354:	42a5      	cmp	r5, r4
 800c356:	d003      	beq.n	800c360 <__mcmp+0x2c>
 800c358:	d305      	bcc.n	800c366 <__mcmp+0x32>
 800c35a:	2201      	movs	r2, #1
 800c35c:	4610      	mov	r0, r2
 800c35e:	bd30      	pop	{r4, r5, pc}
 800c360:	4283      	cmp	r3, r0
 800c362:	d3f3      	bcc.n	800c34c <__mcmp+0x18>
 800c364:	e7fa      	b.n	800c35c <__mcmp+0x28>
 800c366:	f04f 32ff 	mov.w	r2, #4294967295
 800c36a:	e7f7      	b.n	800c35c <__mcmp+0x28>

0800c36c <__mdiff>:
 800c36c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c370:	460c      	mov	r4, r1
 800c372:	4606      	mov	r6, r0
 800c374:	4611      	mov	r1, r2
 800c376:	4620      	mov	r0, r4
 800c378:	4617      	mov	r7, r2
 800c37a:	f7ff ffdb 	bl	800c334 <__mcmp>
 800c37e:	1e05      	subs	r5, r0, #0
 800c380:	d110      	bne.n	800c3a4 <__mdiff+0x38>
 800c382:	4629      	mov	r1, r5
 800c384:	4630      	mov	r0, r6
 800c386:	f7ff fd57 	bl	800be38 <_Balloc>
 800c38a:	b930      	cbnz	r0, 800c39a <__mdiff+0x2e>
 800c38c:	4b39      	ldr	r3, [pc, #228]	; (800c474 <__mdiff+0x108>)
 800c38e:	4602      	mov	r2, r0
 800c390:	f240 2132 	movw	r1, #562	; 0x232
 800c394:	4838      	ldr	r0, [pc, #224]	; (800c478 <__mdiff+0x10c>)
 800c396:	f000 fc07 	bl	800cba8 <__assert_func>
 800c39a:	2301      	movs	r3, #1
 800c39c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c3a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3a4:	bfa4      	itt	ge
 800c3a6:	463b      	movge	r3, r7
 800c3a8:	4627      	movge	r7, r4
 800c3aa:	4630      	mov	r0, r6
 800c3ac:	6879      	ldr	r1, [r7, #4]
 800c3ae:	bfa6      	itte	ge
 800c3b0:	461c      	movge	r4, r3
 800c3b2:	2500      	movge	r5, #0
 800c3b4:	2501      	movlt	r5, #1
 800c3b6:	f7ff fd3f 	bl	800be38 <_Balloc>
 800c3ba:	b920      	cbnz	r0, 800c3c6 <__mdiff+0x5a>
 800c3bc:	4b2d      	ldr	r3, [pc, #180]	; (800c474 <__mdiff+0x108>)
 800c3be:	4602      	mov	r2, r0
 800c3c0:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c3c4:	e7e6      	b.n	800c394 <__mdiff+0x28>
 800c3c6:	693e      	ldr	r6, [r7, #16]
 800c3c8:	60c5      	str	r5, [r0, #12]
 800c3ca:	6925      	ldr	r5, [r4, #16]
 800c3cc:	f107 0114 	add.w	r1, r7, #20
 800c3d0:	f104 0914 	add.w	r9, r4, #20
 800c3d4:	f100 0e14 	add.w	lr, r0, #20
 800c3d8:	f107 0210 	add.w	r2, r7, #16
 800c3dc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800c3e0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800c3e4:	46f2      	mov	sl, lr
 800c3e6:	2700      	movs	r7, #0
 800c3e8:	f859 3b04 	ldr.w	r3, [r9], #4
 800c3ec:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c3f0:	fa1f f883 	uxth.w	r8, r3
 800c3f4:	fa17 f78b 	uxtah	r7, r7, fp
 800c3f8:	0c1b      	lsrs	r3, r3, #16
 800c3fa:	eba7 0808 	sub.w	r8, r7, r8
 800c3fe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c402:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c406:	fa1f f888 	uxth.w	r8, r8
 800c40a:	141f      	asrs	r7, r3, #16
 800c40c:	454d      	cmp	r5, r9
 800c40e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c412:	f84a 3b04 	str.w	r3, [sl], #4
 800c416:	d8e7      	bhi.n	800c3e8 <__mdiff+0x7c>
 800c418:	1b2b      	subs	r3, r5, r4
 800c41a:	3b15      	subs	r3, #21
 800c41c:	f023 0303 	bic.w	r3, r3, #3
 800c420:	3304      	adds	r3, #4
 800c422:	3415      	adds	r4, #21
 800c424:	42a5      	cmp	r5, r4
 800c426:	bf38      	it	cc
 800c428:	2304      	movcc	r3, #4
 800c42a:	4419      	add	r1, r3
 800c42c:	4473      	add	r3, lr
 800c42e:	469e      	mov	lr, r3
 800c430:	460d      	mov	r5, r1
 800c432:	4565      	cmp	r5, ip
 800c434:	d30e      	bcc.n	800c454 <__mdiff+0xe8>
 800c436:	f10c 0203 	add.w	r2, ip, #3
 800c43a:	1a52      	subs	r2, r2, r1
 800c43c:	f022 0203 	bic.w	r2, r2, #3
 800c440:	3903      	subs	r1, #3
 800c442:	458c      	cmp	ip, r1
 800c444:	bf38      	it	cc
 800c446:	2200      	movcc	r2, #0
 800c448:	441a      	add	r2, r3
 800c44a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c44e:	b17b      	cbz	r3, 800c470 <__mdiff+0x104>
 800c450:	6106      	str	r6, [r0, #16]
 800c452:	e7a5      	b.n	800c3a0 <__mdiff+0x34>
 800c454:	f855 8b04 	ldr.w	r8, [r5], #4
 800c458:	fa17 f488 	uxtah	r4, r7, r8
 800c45c:	1422      	asrs	r2, r4, #16
 800c45e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800c462:	b2a4      	uxth	r4, r4
 800c464:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800c468:	f84e 4b04 	str.w	r4, [lr], #4
 800c46c:	1417      	asrs	r7, r2, #16
 800c46e:	e7e0      	b.n	800c432 <__mdiff+0xc6>
 800c470:	3e01      	subs	r6, #1
 800c472:	e7ea      	b.n	800c44a <__mdiff+0xde>
 800c474:	0800d54f 	.word	0x0800d54f
 800c478:	0800d5c0 	.word	0x0800d5c0

0800c47c <__d2b>:
 800c47c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c480:	4689      	mov	r9, r1
 800c482:	2101      	movs	r1, #1
 800c484:	ec57 6b10 	vmov	r6, r7, d0
 800c488:	4690      	mov	r8, r2
 800c48a:	f7ff fcd5 	bl	800be38 <_Balloc>
 800c48e:	4604      	mov	r4, r0
 800c490:	b930      	cbnz	r0, 800c4a0 <__d2b+0x24>
 800c492:	4602      	mov	r2, r0
 800c494:	4b25      	ldr	r3, [pc, #148]	; (800c52c <__d2b+0xb0>)
 800c496:	4826      	ldr	r0, [pc, #152]	; (800c530 <__d2b+0xb4>)
 800c498:	f240 310a 	movw	r1, #778	; 0x30a
 800c49c:	f000 fb84 	bl	800cba8 <__assert_func>
 800c4a0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c4a4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c4a8:	bb35      	cbnz	r5, 800c4f8 <__d2b+0x7c>
 800c4aa:	2e00      	cmp	r6, #0
 800c4ac:	9301      	str	r3, [sp, #4]
 800c4ae:	d028      	beq.n	800c502 <__d2b+0x86>
 800c4b0:	4668      	mov	r0, sp
 800c4b2:	9600      	str	r6, [sp, #0]
 800c4b4:	f7ff fd8c 	bl	800bfd0 <__lo0bits>
 800c4b8:	9900      	ldr	r1, [sp, #0]
 800c4ba:	b300      	cbz	r0, 800c4fe <__d2b+0x82>
 800c4bc:	9a01      	ldr	r2, [sp, #4]
 800c4be:	f1c0 0320 	rsb	r3, r0, #32
 800c4c2:	fa02 f303 	lsl.w	r3, r2, r3
 800c4c6:	430b      	orrs	r3, r1
 800c4c8:	40c2      	lsrs	r2, r0
 800c4ca:	6163      	str	r3, [r4, #20]
 800c4cc:	9201      	str	r2, [sp, #4]
 800c4ce:	9b01      	ldr	r3, [sp, #4]
 800c4d0:	61a3      	str	r3, [r4, #24]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	bf14      	ite	ne
 800c4d6:	2202      	movne	r2, #2
 800c4d8:	2201      	moveq	r2, #1
 800c4da:	6122      	str	r2, [r4, #16]
 800c4dc:	b1d5      	cbz	r5, 800c514 <__d2b+0x98>
 800c4de:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c4e2:	4405      	add	r5, r0
 800c4e4:	f8c9 5000 	str.w	r5, [r9]
 800c4e8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c4ec:	f8c8 0000 	str.w	r0, [r8]
 800c4f0:	4620      	mov	r0, r4
 800c4f2:	b003      	add	sp, #12
 800c4f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c4f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c4fc:	e7d5      	b.n	800c4aa <__d2b+0x2e>
 800c4fe:	6161      	str	r1, [r4, #20]
 800c500:	e7e5      	b.n	800c4ce <__d2b+0x52>
 800c502:	a801      	add	r0, sp, #4
 800c504:	f7ff fd64 	bl	800bfd0 <__lo0bits>
 800c508:	9b01      	ldr	r3, [sp, #4]
 800c50a:	6163      	str	r3, [r4, #20]
 800c50c:	2201      	movs	r2, #1
 800c50e:	6122      	str	r2, [r4, #16]
 800c510:	3020      	adds	r0, #32
 800c512:	e7e3      	b.n	800c4dc <__d2b+0x60>
 800c514:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c518:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c51c:	f8c9 0000 	str.w	r0, [r9]
 800c520:	6918      	ldr	r0, [r3, #16]
 800c522:	f7ff fd35 	bl	800bf90 <__hi0bits>
 800c526:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c52a:	e7df      	b.n	800c4ec <__d2b+0x70>
 800c52c:	0800d54f 	.word	0x0800d54f
 800c530:	0800d5c0 	.word	0x0800d5c0

0800c534 <_calloc_r>:
 800c534:	b513      	push	{r0, r1, r4, lr}
 800c536:	434a      	muls	r2, r1
 800c538:	4611      	mov	r1, r2
 800c53a:	9201      	str	r2, [sp, #4]
 800c53c:	f000 f85a 	bl	800c5f4 <_malloc_r>
 800c540:	4604      	mov	r4, r0
 800c542:	b118      	cbz	r0, 800c54c <_calloc_r+0x18>
 800c544:	9a01      	ldr	r2, [sp, #4]
 800c546:	2100      	movs	r1, #0
 800c548:	f7fe f860 	bl	800a60c <memset>
 800c54c:	4620      	mov	r0, r4
 800c54e:	b002      	add	sp, #8
 800c550:	bd10      	pop	{r4, pc}
	...

0800c554 <_free_r>:
 800c554:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c556:	2900      	cmp	r1, #0
 800c558:	d048      	beq.n	800c5ec <_free_r+0x98>
 800c55a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c55e:	9001      	str	r0, [sp, #4]
 800c560:	2b00      	cmp	r3, #0
 800c562:	f1a1 0404 	sub.w	r4, r1, #4
 800c566:	bfb8      	it	lt
 800c568:	18e4      	addlt	r4, r4, r3
 800c56a:	f000 fca7 	bl	800cebc <__malloc_lock>
 800c56e:	4a20      	ldr	r2, [pc, #128]	; (800c5f0 <_free_r+0x9c>)
 800c570:	9801      	ldr	r0, [sp, #4]
 800c572:	6813      	ldr	r3, [r2, #0]
 800c574:	4615      	mov	r5, r2
 800c576:	b933      	cbnz	r3, 800c586 <_free_r+0x32>
 800c578:	6063      	str	r3, [r4, #4]
 800c57a:	6014      	str	r4, [r2, #0]
 800c57c:	b003      	add	sp, #12
 800c57e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c582:	f000 bca1 	b.w	800cec8 <__malloc_unlock>
 800c586:	42a3      	cmp	r3, r4
 800c588:	d90b      	bls.n	800c5a2 <_free_r+0x4e>
 800c58a:	6821      	ldr	r1, [r4, #0]
 800c58c:	1862      	adds	r2, r4, r1
 800c58e:	4293      	cmp	r3, r2
 800c590:	bf04      	itt	eq
 800c592:	681a      	ldreq	r2, [r3, #0]
 800c594:	685b      	ldreq	r3, [r3, #4]
 800c596:	6063      	str	r3, [r4, #4]
 800c598:	bf04      	itt	eq
 800c59a:	1852      	addeq	r2, r2, r1
 800c59c:	6022      	streq	r2, [r4, #0]
 800c59e:	602c      	str	r4, [r5, #0]
 800c5a0:	e7ec      	b.n	800c57c <_free_r+0x28>
 800c5a2:	461a      	mov	r2, r3
 800c5a4:	685b      	ldr	r3, [r3, #4]
 800c5a6:	b10b      	cbz	r3, 800c5ac <_free_r+0x58>
 800c5a8:	42a3      	cmp	r3, r4
 800c5aa:	d9fa      	bls.n	800c5a2 <_free_r+0x4e>
 800c5ac:	6811      	ldr	r1, [r2, #0]
 800c5ae:	1855      	adds	r5, r2, r1
 800c5b0:	42a5      	cmp	r5, r4
 800c5b2:	d10b      	bne.n	800c5cc <_free_r+0x78>
 800c5b4:	6824      	ldr	r4, [r4, #0]
 800c5b6:	4421      	add	r1, r4
 800c5b8:	1854      	adds	r4, r2, r1
 800c5ba:	42a3      	cmp	r3, r4
 800c5bc:	6011      	str	r1, [r2, #0]
 800c5be:	d1dd      	bne.n	800c57c <_free_r+0x28>
 800c5c0:	681c      	ldr	r4, [r3, #0]
 800c5c2:	685b      	ldr	r3, [r3, #4]
 800c5c4:	6053      	str	r3, [r2, #4]
 800c5c6:	4421      	add	r1, r4
 800c5c8:	6011      	str	r1, [r2, #0]
 800c5ca:	e7d7      	b.n	800c57c <_free_r+0x28>
 800c5cc:	d902      	bls.n	800c5d4 <_free_r+0x80>
 800c5ce:	230c      	movs	r3, #12
 800c5d0:	6003      	str	r3, [r0, #0]
 800c5d2:	e7d3      	b.n	800c57c <_free_r+0x28>
 800c5d4:	6825      	ldr	r5, [r4, #0]
 800c5d6:	1961      	adds	r1, r4, r5
 800c5d8:	428b      	cmp	r3, r1
 800c5da:	bf04      	itt	eq
 800c5dc:	6819      	ldreq	r1, [r3, #0]
 800c5de:	685b      	ldreq	r3, [r3, #4]
 800c5e0:	6063      	str	r3, [r4, #4]
 800c5e2:	bf04      	itt	eq
 800c5e4:	1949      	addeq	r1, r1, r5
 800c5e6:	6021      	streq	r1, [r4, #0]
 800c5e8:	6054      	str	r4, [r2, #4]
 800c5ea:	e7c7      	b.n	800c57c <_free_r+0x28>
 800c5ec:	b003      	add	sp, #12
 800c5ee:	bd30      	pop	{r4, r5, pc}
 800c5f0:	20000880 	.word	0x20000880

0800c5f4 <_malloc_r>:
 800c5f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5f6:	1ccd      	adds	r5, r1, #3
 800c5f8:	f025 0503 	bic.w	r5, r5, #3
 800c5fc:	3508      	adds	r5, #8
 800c5fe:	2d0c      	cmp	r5, #12
 800c600:	bf38      	it	cc
 800c602:	250c      	movcc	r5, #12
 800c604:	2d00      	cmp	r5, #0
 800c606:	4606      	mov	r6, r0
 800c608:	db01      	blt.n	800c60e <_malloc_r+0x1a>
 800c60a:	42a9      	cmp	r1, r5
 800c60c:	d903      	bls.n	800c616 <_malloc_r+0x22>
 800c60e:	230c      	movs	r3, #12
 800c610:	6033      	str	r3, [r6, #0]
 800c612:	2000      	movs	r0, #0
 800c614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c616:	f000 fc51 	bl	800cebc <__malloc_lock>
 800c61a:	4921      	ldr	r1, [pc, #132]	; (800c6a0 <_malloc_r+0xac>)
 800c61c:	680a      	ldr	r2, [r1, #0]
 800c61e:	4614      	mov	r4, r2
 800c620:	b99c      	cbnz	r4, 800c64a <_malloc_r+0x56>
 800c622:	4f20      	ldr	r7, [pc, #128]	; (800c6a4 <_malloc_r+0xb0>)
 800c624:	683b      	ldr	r3, [r7, #0]
 800c626:	b923      	cbnz	r3, 800c632 <_malloc_r+0x3e>
 800c628:	4621      	mov	r1, r4
 800c62a:	4630      	mov	r0, r6
 800c62c:	f000 f996 	bl	800c95c <_sbrk_r>
 800c630:	6038      	str	r0, [r7, #0]
 800c632:	4629      	mov	r1, r5
 800c634:	4630      	mov	r0, r6
 800c636:	f000 f991 	bl	800c95c <_sbrk_r>
 800c63a:	1c43      	adds	r3, r0, #1
 800c63c:	d123      	bne.n	800c686 <_malloc_r+0x92>
 800c63e:	230c      	movs	r3, #12
 800c640:	6033      	str	r3, [r6, #0]
 800c642:	4630      	mov	r0, r6
 800c644:	f000 fc40 	bl	800cec8 <__malloc_unlock>
 800c648:	e7e3      	b.n	800c612 <_malloc_r+0x1e>
 800c64a:	6823      	ldr	r3, [r4, #0]
 800c64c:	1b5b      	subs	r3, r3, r5
 800c64e:	d417      	bmi.n	800c680 <_malloc_r+0x8c>
 800c650:	2b0b      	cmp	r3, #11
 800c652:	d903      	bls.n	800c65c <_malloc_r+0x68>
 800c654:	6023      	str	r3, [r4, #0]
 800c656:	441c      	add	r4, r3
 800c658:	6025      	str	r5, [r4, #0]
 800c65a:	e004      	b.n	800c666 <_malloc_r+0x72>
 800c65c:	6863      	ldr	r3, [r4, #4]
 800c65e:	42a2      	cmp	r2, r4
 800c660:	bf0c      	ite	eq
 800c662:	600b      	streq	r3, [r1, #0]
 800c664:	6053      	strne	r3, [r2, #4]
 800c666:	4630      	mov	r0, r6
 800c668:	f000 fc2e 	bl	800cec8 <__malloc_unlock>
 800c66c:	f104 000b 	add.w	r0, r4, #11
 800c670:	1d23      	adds	r3, r4, #4
 800c672:	f020 0007 	bic.w	r0, r0, #7
 800c676:	1ac2      	subs	r2, r0, r3
 800c678:	d0cc      	beq.n	800c614 <_malloc_r+0x20>
 800c67a:	1a1b      	subs	r3, r3, r0
 800c67c:	50a3      	str	r3, [r4, r2]
 800c67e:	e7c9      	b.n	800c614 <_malloc_r+0x20>
 800c680:	4622      	mov	r2, r4
 800c682:	6864      	ldr	r4, [r4, #4]
 800c684:	e7cc      	b.n	800c620 <_malloc_r+0x2c>
 800c686:	1cc4      	adds	r4, r0, #3
 800c688:	f024 0403 	bic.w	r4, r4, #3
 800c68c:	42a0      	cmp	r0, r4
 800c68e:	d0e3      	beq.n	800c658 <_malloc_r+0x64>
 800c690:	1a21      	subs	r1, r4, r0
 800c692:	4630      	mov	r0, r6
 800c694:	f000 f962 	bl	800c95c <_sbrk_r>
 800c698:	3001      	adds	r0, #1
 800c69a:	d1dd      	bne.n	800c658 <_malloc_r+0x64>
 800c69c:	e7cf      	b.n	800c63e <_malloc_r+0x4a>
 800c69e:	bf00      	nop
 800c6a0:	20000880 	.word	0x20000880
 800c6a4:	20000884 	.word	0x20000884

0800c6a8 <__sfputc_r>:
 800c6a8:	6893      	ldr	r3, [r2, #8]
 800c6aa:	3b01      	subs	r3, #1
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	b410      	push	{r4}
 800c6b0:	6093      	str	r3, [r2, #8]
 800c6b2:	da08      	bge.n	800c6c6 <__sfputc_r+0x1e>
 800c6b4:	6994      	ldr	r4, [r2, #24]
 800c6b6:	42a3      	cmp	r3, r4
 800c6b8:	db01      	blt.n	800c6be <__sfputc_r+0x16>
 800c6ba:	290a      	cmp	r1, #10
 800c6bc:	d103      	bne.n	800c6c6 <__sfputc_r+0x1e>
 800c6be:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c6c2:	f000 b99f 	b.w	800ca04 <__swbuf_r>
 800c6c6:	6813      	ldr	r3, [r2, #0]
 800c6c8:	1c58      	adds	r0, r3, #1
 800c6ca:	6010      	str	r0, [r2, #0]
 800c6cc:	7019      	strb	r1, [r3, #0]
 800c6ce:	4608      	mov	r0, r1
 800c6d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c6d4:	4770      	bx	lr

0800c6d6 <__sfputs_r>:
 800c6d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6d8:	4606      	mov	r6, r0
 800c6da:	460f      	mov	r7, r1
 800c6dc:	4614      	mov	r4, r2
 800c6de:	18d5      	adds	r5, r2, r3
 800c6e0:	42ac      	cmp	r4, r5
 800c6e2:	d101      	bne.n	800c6e8 <__sfputs_r+0x12>
 800c6e4:	2000      	movs	r0, #0
 800c6e6:	e007      	b.n	800c6f8 <__sfputs_r+0x22>
 800c6e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6ec:	463a      	mov	r2, r7
 800c6ee:	4630      	mov	r0, r6
 800c6f0:	f7ff ffda 	bl	800c6a8 <__sfputc_r>
 800c6f4:	1c43      	adds	r3, r0, #1
 800c6f6:	d1f3      	bne.n	800c6e0 <__sfputs_r+0xa>
 800c6f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c6fc <_vfiprintf_r>:
 800c6fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c700:	460d      	mov	r5, r1
 800c702:	b09d      	sub	sp, #116	; 0x74
 800c704:	4614      	mov	r4, r2
 800c706:	4698      	mov	r8, r3
 800c708:	4606      	mov	r6, r0
 800c70a:	b118      	cbz	r0, 800c714 <_vfiprintf_r+0x18>
 800c70c:	6983      	ldr	r3, [r0, #24]
 800c70e:	b90b      	cbnz	r3, 800c714 <_vfiprintf_r+0x18>
 800c710:	f7ff fad6 	bl	800bcc0 <__sinit>
 800c714:	4b89      	ldr	r3, [pc, #548]	; (800c93c <_vfiprintf_r+0x240>)
 800c716:	429d      	cmp	r5, r3
 800c718:	d11b      	bne.n	800c752 <_vfiprintf_r+0x56>
 800c71a:	6875      	ldr	r5, [r6, #4]
 800c71c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c71e:	07d9      	lsls	r1, r3, #31
 800c720:	d405      	bmi.n	800c72e <_vfiprintf_r+0x32>
 800c722:	89ab      	ldrh	r3, [r5, #12]
 800c724:	059a      	lsls	r2, r3, #22
 800c726:	d402      	bmi.n	800c72e <_vfiprintf_r+0x32>
 800c728:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c72a:	f7ff fb6c 	bl	800be06 <__retarget_lock_acquire_recursive>
 800c72e:	89ab      	ldrh	r3, [r5, #12]
 800c730:	071b      	lsls	r3, r3, #28
 800c732:	d501      	bpl.n	800c738 <_vfiprintf_r+0x3c>
 800c734:	692b      	ldr	r3, [r5, #16]
 800c736:	b9eb      	cbnz	r3, 800c774 <_vfiprintf_r+0x78>
 800c738:	4629      	mov	r1, r5
 800c73a:	4630      	mov	r0, r6
 800c73c:	f000 f9c6 	bl	800cacc <__swsetup_r>
 800c740:	b1c0      	cbz	r0, 800c774 <_vfiprintf_r+0x78>
 800c742:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c744:	07dc      	lsls	r4, r3, #31
 800c746:	d50e      	bpl.n	800c766 <_vfiprintf_r+0x6a>
 800c748:	f04f 30ff 	mov.w	r0, #4294967295
 800c74c:	b01d      	add	sp, #116	; 0x74
 800c74e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c752:	4b7b      	ldr	r3, [pc, #492]	; (800c940 <_vfiprintf_r+0x244>)
 800c754:	429d      	cmp	r5, r3
 800c756:	d101      	bne.n	800c75c <_vfiprintf_r+0x60>
 800c758:	68b5      	ldr	r5, [r6, #8]
 800c75a:	e7df      	b.n	800c71c <_vfiprintf_r+0x20>
 800c75c:	4b79      	ldr	r3, [pc, #484]	; (800c944 <_vfiprintf_r+0x248>)
 800c75e:	429d      	cmp	r5, r3
 800c760:	bf08      	it	eq
 800c762:	68f5      	ldreq	r5, [r6, #12]
 800c764:	e7da      	b.n	800c71c <_vfiprintf_r+0x20>
 800c766:	89ab      	ldrh	r3, [r5, #12]
 800c768:	0598      	lsls	r0, r3, #22
 800c76a:	d4ed      	bmi.n	800c748 <_vfiprintf_r+0x4c>
 800c76c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c76e:	f7ff fb4b 	bl	800be08 <__retarget_lock_release_recursive>
 800c772:	e7e9      	b.n	800c748 <_vfiprintf_r+0x4c>
 800c774:	2300      	movs	r3, #0
 800c776:	9309      	str	r3, [sp, #36]	; 0x24
 800c778:	2320      	movs	r3, #32
 800c77a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c77e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c782:	2330      	movs	r3, #48	; 0x30
 800c784:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c948 <_vfiprintf_r+0x24c>
 800c788:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c78c:	f04f 0901 	mov.w	r9, #1
 800c790:	4623      	mov	r3, r4
 800c792:	469a      	mov	sl, r3
 800c794:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c798:	b10a      	cbz	r2, 800c79e <_vfiprintf_r+0xa2>
 800c79a:	2a25      	cmp	r2, #37	; 0x25
 800c79c:	d1f9      	bne.n	800c792 <_vfiprintf_r+0x96>
 800c79e:	ebba 0b04 	subs.w	fp, sl, r4
 800c7a2:	d00b      	beq.n	800c7bc <_vfiprintf_r+0xc0>
 800c7a4:	465b      	mov	r3, fp
 800c7a6:	4622      	mov	r2, r4
 800c7a8:	4629      	mov	r1, r5
 800c7aa:	4630      	mov	r0, r6
 800c7ac:	f7ff ff93 	bl	800c6d6 <__sfputs_r>
 800c7b0:	3001      	adds	r0, #1
 800c7b2:	f000 80aa 	beq.w	800c90a <_vfiprintf_r+0x20e>
 800c7b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c7b8:	445a      	add	r2, fp
 800c7ba:	9209      	str	r2, [sp, #36]	; 0x24
 800c7bc:	f89a 3000 	ldrb.w	r3, [sl]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	f000 80a2 	beq.w	800c90a <_vfiprintf_r+0x20e>
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	f04f 32ff 	mov.w	r2, #4294967295
 800c7cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c7d0:	f10a 0a01 	add.w	sl, sl, #1
 800c7d4:	9304      	str	r3, [sp, #16]
 800c7d6:	9307      	str	r3, [sp, #28]
 800c7d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c7dc:	931a      	str	r3, [sp, #104]	; 0x68
 800c7de:	4654      	mov	r4, sl
 800c7e0:	2205      	movs	r2, #5
 800c7e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7e6:	4858      	ldr	r0, [pc, #352]	; (800c948 <_vfiprintf_r+0x24c>)
 800c7e8:	f7f3 fcfa 	bl	80001e0 <memchr>
 800c7ec:	9a04      	ldr	r2, [sp, #16]
 800c7ee:	b9d8      	cbnz	r0, 800c828 <_vfiprintf_r+0x12c>
 800c7f0:	06d1      	lsls	r1, r2, #27
 800c7f2:	bf44      	itt	mi
 800c7f4:	2320      	movmi	r3, #32
 800c7f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c7fa:	0713      	lsls	r3, r2, #28
 800c7fc:	bf44      	itt	mi
 800c7fe:	232b      	movmi	r3, #43	; 0x2b
 800c800:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c804:	f89a 3000 	ldrb.w	r3, [sl]
 800c808:	2b2a      	cmp	r3, #42	; 0x2a
 800c80a:	d015      	beq.n	800c838 <_vfiprintf_r+0x13c>
 800c80c:	9a07      	ldr	r2, [sp, #28]
 800c80e:	4654      	mov	r4, sl
 800c810:	2000      	movs	r0, #0
 800c812:	f04f 0c0a 	mov.w	ip, #10
 800c816:	4621      	mov	r1, r4
 800c818:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c81c:	3b30      	subs	r3, #48	; 0x30
 800c81e:	2b09      	cmp	r3, #9
 800c820:	d94e      	bls.n	800c8c0 <_vfiprintf_r+0x1c4>
 800c822:	b1b0      	cbz	r0, 800c852 <_vfiprintf_r+0x156>
 800c824:	9207      	str	r2, [sp, #28]
 800c826:	e014      	b.n	800c852 <_vfiprintf_r+0x156>
 800c828:	eba0 0308 	sub.w	r3, r0, r8
 800c82c:	fa09 f303 	lsl.w	r3, r9, r3
 800c830:	4313      	orrs	r3, r2
 800c832:	9304      	str	r3, [sp, #16]
 800c834:	46a2      	mov	sl, r4
 800c836:	e7d2      	b.n	800c7de <_vfiprintf_r+0xe2>
 800c838:	9b03      	ldr	r3, [sp, #12]
 800c83a:	1d19      	adds	r1, r3, #4
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	9103      	str	r1, [sp, #12]
 800c840:	2b00      	cmp	r3, #0
 800c842:	bfbb      	ittet	lt
 800c844:	425b      	neglt	r3, r3
 800c846:	f042 0202 	orrlt.w	r2, r2, #2
 800c84a:	9307      	strge	r3, [sp, #28]
 800c84c:	9307      	strlt	r3, [sp, #28]
 800c84e:	bfb8      	it	lt
 800c850:	9204      	strlt	r2, [sp, #16]
 800c852:	7823      	ldrb	r3, [r4, #0]
 800c854:	2b2e      	cmp	r3, #46	; 0x2e
 800c856:	d10c      	bne.n	800c872 <_vfiprintf_r+0x176>
 800c858:	7863      	ldrb	r3, [r4, #1]
 800c85a:	2b2a      	cmp	r3, #42	; 0x2a
 800c85c:	d135      	bne.n	800c8ca <_vfiprintf_r+0x1ce>
 800c85e:	9b03      	ldr	r3, [sp, #12]
 800c860:	1d1a      	adds	r2, r3, #4
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	9203      	str	r2, [sp, #12]
 800c866:	2b00      	cmp	r3, #0
 800c868:	bfb8      	it	lt
 800c86a:	f04f 33ff 	movlt.w	r3, #4294967295
 800c86e:	3402      	adds	r4, #2
 800c870:	9305      	str	r3, [sp, #20]
 800c872:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c958 <_vfiprintf_r+0x25c>
 800c876:	7821      	ldrb	r1, [r4, #0]
 800c878:	2203      	movs	r2, #3
 800c87a:	4650      	mov	r0, sl
 800c87c:	f7f3 fcb0 	bl	80001e0 <memchr>
 800c880:	b140      	cbz	r0, 800c894 <_vfiprintf_r+0x198>
 800c882:	2340      	movs	r3, #64	; 0x40
 800c884:	eba0 000a 	sub.w	r0, r0, sl
 800c888:	fa03 f000 	lsl.w	r0, r3, r0
 800c88c:	9b04      	ldr	r3, [sp, #16]
 800c88e:	4303      	orrs	r3, r0
 800c890:	3401      	adds	r4, #1
 800c892:	9304      	str	r3, [sp, #16]
 800c894:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c898:	482c      	ldr	r0, [pc, #176]	; (800c94c <_vfiprintf_r+0x250>)
 800c89a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c89e:	2206      	movs	r2, #6
 800c8a0:	f7f3 fc9e 	bl	80001e0 <memchr>
 800c8a4:	2800      	cmp	r0, #0
 800c8a6:	d03f      	beq.n	800c928 <_vfiprintf_r+0x22c>
 800c8a8:	4b29      	ldr	r3, [pc, #164]	; (800c950 <_vfiprintf_r+0x254>)
 800c8aa:	bb1b      	cbnz	r3, 800c8f4 <_vfiprintf_r+0x1f8>
 800c8ac:	9b03      	ldr	r3, [sp, #12]
 800c8ae:	3307      	adds	r3, #7
 800c8b0:	f023 0307 	bic.w	r3, r3, #7
 800c8b4:	3308      	adds	r3, #8
 800c8b6:	9303      	str	r3, [sp, #12]
 800c8b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8ba:	443b      	add	r3, r7
 800c8bc:	9309      	str	r3, [sp, #36]	; 0x24
 800c8be:	e767      	b.n	800c790 <_vfiprintf_r+0x94>
 800c8c0:	fb0c 3202 	mla	r2, ip, r2, r3
 800c8c4:	460c      	mov	r4, r1
 800c8c6:	2001      	movs	r0, #1
 800c8c8:	e7a5      	b.n	800c816 <_vfiprintf_r+0x11a>
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	3401      	adds	r4, #1
 800c8ce:	9305      	str	r3, [sp, #20]
 800c8d0:	4619      	mov	r1, r3
 800c8d2:	f04f 0c0a 	mov.w	ip, #10
 800c8d6:	4620      	mov	r0, r4
 800c8d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c8dc:	3a30      	subs	r2, #48	; 0x30
 800c8de:	2a09      	cmp	r2, #9
 800c8e0:	d903      	bls.n	800c8ea <_vfiprintf_r+0x1ee>
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d0c5      	beq.n	800c872 <_vfiprintf_r+0x176>
 800c8e6:	9105      	str	r1, [sp, #20]
 800c8e8:	e7c3      	b.n	800c872 <_vfiprintf_r+0x176>
 800c8ea:	fb0c 2101 	mla	r1, ip, r1, r2
 800c8ee:	4604      	mov	r4, r0
 800c8f0:	2301      	movs	r3, #1
 800c8f2:	e7f0      	b.n	800c8d6 <_vfiprintf_r+0x1da>
 800c8f4:	ab03      	add	r3, sp, #12
 800c8f6:	9300      	str	r3, [sp, #0]
 800c8f8:	462a      	mov	r2, r5
 800c8fa:	4b16      	ldr	r3, [pc, #88]	; (800c954 <_vfiprintf_r+0x258>)
 800c8fc:	a904      	add	r1, sp, #16
 800c8fe:	4630      	mov	r0, r6
 800c900:	f7fd ff2c 	bl	800a75c <_printf_float>
 800c904:	4607      	mov	r7, r0
 800c906:	1c78      	adds	r0, r7, #1
 800c908:	d1d6      	bne.n	800c8b8 <_vfiprintf_r+0x1bc>
 800c90a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c90c:	07d9      	lsls	r1, r3, #31
 800c90e:	d405      	bmi.n	800c91c <_vfiprintf_r+0x220>
 800c910:	89ab      	ldrh	r3, [r5, #12]
 800c912:	059a      	lsls	r2, r3, #22
 800c914:	d402      	bmi.n	800c91c <_vfiprintf_r+0x220>
 800c916:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c918:	f7ff fa76 	bl	800be08 <__retarget_lock_release_recursive>
 800c91c:	89ab      	ldrh	r3, [r5, #12]
 800c91e:	065b      	lsls	r3, r3, #25
 800c920:	f53f af12 	bmi.w	800c748 <_vfiprintf_r+0x4c>
 800c924:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c926:	e711      	b.n	800c74c <_vfiprintf_r+0x50>
 800c928:	ab03      	add	r3, sp, #12
 800c92a:	9300      	str	r3, [sp, #0]
 800c92c:	462a      	mov	r2, r5
 800c92e:	4b09      	ldr	r3, [pc, #36]	; (800c954 <_vfiprintf_r+0x258>)
 800c930:	a904      	add	r1, sp, #16
 800c932:	4630      	mov	r0, r6
 800c934:	f7fe f9b6 	bl	800aca4 <_printf_i>
 800c938:	e7e4      	b.n	800c904 <_vfiprintf_r+0x208>
 800c93a:	bf00      	nop
 800c93c:	0800d580 	.word	0x0800d580
 800c940:	0800d5a0 	.word	0x0800d5a0
 800c944:	0800d560 	.word	0x0800d560
 800c948:	0800d71c 	.word	0x0800d71c
 800c94c:	0800d726 	.word	0x0800d726
 800c950:	0800a75d 	.word	0x0800a75d
 800c954:	0800c6d7 	.word	0x0800c6d7
 800c958:	0800d722 	.word	0x0800d722

0800c95c <_sbrk_r>:
 800c95c:	b538      	push	{r3, r4, r5, lr}
 800c95e:	4d06      	ldr	r5, [pc, #24]	; (800c978 <_sbrk_r+0x1c>)
 800c960:	2300      	movs	r3, #0
 800c962:	4604      	mov	r4, r0
 800c964:	4608      	mov	r0, r1
 800c966:	602b      	str	r3, [r5, #0]
 800c968:	f7f6 fa1e 	bl	8002da8 <_sbrk>
 800c96c:	1c43      	adds	r3, r0, #1
 800c96e:	d102      	bne.n	800c976 <_sbrk_r+0x1a>
 800c970:	682b      	ldr	r3, [r5, #0]
 800c972:	b103      	cbz	r3, 800c976 <_sbrk_r+0x1a>
 800c974:	6023      	str	r3, [r4, #0]
 800c976:	bd38      	pop	{r3, r4, r5, pc}
 800c978:	20000ad8 	.word	0x20000ad8

0800c97c <__sread>:
 800c97c:	b510      	push	{r4, lr}
 800c97e:	460c      	mov	r4, r1
 800c980:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c984:	f000 faa6 	bl	800ced4 <_read_r>
 800c988:	2800      	cmp	r0, #0
 800c98a:	bfab      	itete	ge
 800c98c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c98e:	89a3      	ldrhlt	r3, [r4, #12]
 800c990:	181b      	addge	r3, r3, r0
 800c992:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c996:	bfac      	ite	ge
 800c998:	6563      	strge	r3, [r4, #84]	; 0x54
 800c99a:	81a3      	strhlt	r3, [r4, #12]
 800c99c:	bd10      	pop	{r4, pc}

0800c99e <__swrite>:
 800c99e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9a2:	461f      	mov	r7, r3
 800c9a4:	898b      	ldrh	r3, [r1, #12]
 800c9a6:	05db      	lsls	r3, r3, #23
 800c9a8:	4605      	mov	r5, r0
 800c9aa:	460c      	mov	r4, r1
 800c9ac:	4616      	mov	r6, r2
 800c9ae:	d505      	bpl.n	800c9bc <__swrite+0x1e>
 800c9b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9b4:	2302      	movs	r3, #2
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	f000 f9f8 	bl	800cdac <_lseek_r>
 800c9bc:	89a3      	ldrh	r3, [r4, #12]
 800c9be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c9c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c9c6:	81a3      	strh	r3, [r4, #12]
 800c9c8:	4632      	mov	r2, r6
 800c9ca:	463b      	mov	r3, r7
 800c9cc:	4628      	mov	r0, r5
 800c9ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c9d2:	f000 b869 	b.w	800caa8 <_write_r>

0800c9d6 <__sseek>:
 800c9d6:	b510      	push	{r4, lr}
 800c9d8:	460c      	mov	r4, r1
 800c9da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9de:	f000 f9e5 	bl	800cdac <_lseek_r>
 800c9e2:	1c43      	adds	r3, r0, #1
 800c9e4:	89a3      	ldrh	r3, [r4, #12]
 800c9e6:	bf15      	itete	ne
 800c9e8:	6560      	strne	r0, [r4, #84]	; 0x54
 800c9ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c9ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c9f2:	81a3      	strheq	r3, [r4, #12]
 800c9f4:	bf18      	it	ne
 800c9f6:	81a3      	strhne	r3, [r4, #12]
 800c9f8:	bd10      	pop	{r4, pc}

0800c9fa <__sclose>:
 800c9fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9fe:	f000 b8f1 	b.w	800cbe4 <_close_r>
	...

0800ca04 <__swbuf_r>:
 800ca04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca06:	460e      	mov	r6, r1
 800ca08:	4614      	mov	r4, r2
 800ca0a:	4605      	mov	r5, r0
 800ca0c:	b118      	cbz	r0, 800ca16 <__swbuf_r+0x12>
 800ca0e:	6983      	ldr	r3, [r0, #24]
 800ca10:	b90b      	cbnz	r3, 800ca16 <__swbuf_r+0x12>
 800ca12:	f7ff f955 	bl	800bcc0 <__sinit>
 800ca16:	4b21      	ldr	r3, [pc, #132]	; (800ca9c <__swbuf_r+0x98>)
 800ca18:	429c      	cmp	r4, r3
 800ca1a:	d12b      	bne.n	800ca74 <__swbuf_r+0x70>
 800ca1c:	686c      	ldr	r4, [r5, #4]
 800ca1e:	69a3      	ldr	r3, [r4, #24]
 800ca20:	60a3      	str	r3, [r4, #8]
 800ca22:	89a3      	ldrh	r3, [r4, #12]
 800ca24:	071a      	lsls	r2, r3, #28
 800ca26:	d52f      	bpl.n	800ca88 <__swbuf_r+0x84>
 800ca28:	6923      	ldr	r3, [r4, #16]
 800ca2a:	b36b      	cbz	r3, 800ca88 <__swbuf_r+0x84>
 800ca2c:	6923      	ldr	r3, [r4, #16]
 800ca2e:	6820      	ldr	r0, [r4, #0]
 800ca30:	1ac0      	subs	r0, r0, r3
 800ca32:	6963      	ldr	r3, [r4, #20]
 800ca34:	b2f6      	uxtb	r6, r6
 800ca36:	4283      	cmp	r3, r0
 800ca38:	4637      	mov	r7, r6
 800ca3a:	dc04      	bgt.n	800ca46 <__swbuf_r+0x42>
 800ca3c:	4621      	mov	r1, r4
 800ca3e:	4628      	mov	r0, r5
 800ca40:	f000 f966 	bl	800cd10 <_fflush_r>
 800ca44:	bb30      	cbnz	r0, 800ca94 <__swbuf_r+0x90>
 800ca46:	68a3      	ldr	r3, [r4, #8]
 800ca48:	3b01      	subs	r3, #1
 800ca4a:	60a3      	str	r3, [r4, #8]
 800ca4c:	6823      	ldr	r3, [r4, #0]
 800ca4e:	1c5a      	adds	r2, r3, #1
 800ca50:	6022      	str	r2, [r4, #0]
 800ca52:	701e      	strb	r6, [r3, #0]
 800ca54:	6963      	ldr	r3, [r4, #20]
 800ca56:	3001      	adds	r0, #1
 800ca58:	4283      	cmp	r3, r0
 800ca5a:	d004      	beq.n	800ca66 <__swbuf_r+0x62>
 800ca5c:	89a3      	ldrh	r3, [r4, #12]
 800ca5e:	07db      	lsls	r3, r3, #31
 800ca60:	d506      	bpl.n	800ca70 <__swbuf_r+0x6c>
 800ca62:	2e0a      	cmp	r6, #10
 800ca64:	d104      	bne.n	800ca70 <__swbuf_r+0x6c>
 800ca66:	4621      	mov	r1, r4
 800ca68:	4628      	mov	r0, r5
 800ca6a:	f000 f951 	bl	800cd10 <_fflush_r>
 800ca6e:	b988      	cbnz	r0, 800ca94 <__swbuf_r+0x90>
 800ca70:	4638      	mov	r0, r7
 800ca72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca74:	4b0a      	ldr	r3, [pc, #40]	; (800caa0 <__swbuf_r+0x9c>)
 800ca76:	429c      	cmp	r4, r3
 800ca78:	d101      	bne.n	800ca7e <__swbuf_r+0x7a>
 800ca7a:	68ac      	ldr	r4, [r5, #8]
 800ca7c:	e7cf      	b.n	800ca1e <__swbuf_r+0x1a>
 800ca7e:	4b09      	ldr	r3, [pc, #36]	; (800caa4 <__swbuf_r+0xa0>)
 800ca80:	429c      	cmp	r4, r3
 800ca82:	bf08      	it	eq
 800ca84:	68ec      	ldreq	r4, [r5, #12]
 800ca86:	e7ca      	b.n	800ca1e <__swbuf_r+0x1a>
 800ca88:	4621      	mov	r1, r4
 800ca8a:	4628      	mov	r0, r5
 800ca8c:	f000 f81e 	bl	800cacc <__swsetup_r>
 800ca90:	2800      	cmp	r0, #0
 800ca92:	d0cb      	beq.n	800ca2c <__swbuf_r+0x28>
 800ca94:	f04f 37ff 	mov.w	r7, #4294967295
 800ca98:	e7ea      	b.n	800ca70 <__swbuf_r+0x6c>
 800ca9a:	bf00      	nop
 800ca9c:	0800d580 	.word	0x0800d580
 800caa0:	0800d5a0 	.word	0x0800d5a0
 800caa4:	0800d560 	.word	0x0800d560

0800caa8 <_write_r>:
 800caa8:	b538      	push	{r3, r4, r5, lr}
 800caaa:	4d07      	ldr	r5, [pc, #28]	; (800cac8 <_write_r+0x20>)
 800caac:	4604      	mov	r4, r0
 800caae:	4608      	mov	r0, r1
 800cab0:	4611      	mov	r1, r2
 800cab2:	2200      	movs	r2, #0
 800cab4:	602a      	str	r2, [r5, #0]
 800cab6:	461a      	mov	r2, r3
 800cab8:	f7f6 f925 	bl	8002d06 <_write>
 800cabc:	1c43      	adds	r3, r0, #1
 800cabe:	d102      	bne.n	800cac6 <_write_r+0x1e>
 800cac0:	682b      	ldr	r3, [r5, #0]
 800cac2:	b103      	cbz	r3, 800cac6 <_write_r+0x1e>
 800cac4:	6023      	str	r3, [r4, #0]
 800cac6:	bd38      	pop	{r3, r4, r5, pc}
 800cac8:	20000ad8 	.word	0x20000ad8

0800cacc <__swsetup_r>:
 800cacc:	4b32      	ldr	r3, [pc, #200]	; (800cb98 <__swsetup_r+0xcc>)
 800cace:	b570      	push	{r4, r5, r6, lr}
 800cad0:	681d      	ldr	r5, [r3, #0]
 800cad2:	4606      	mov	r6, r0
 800cad4:	460c      	mov	r4, r1
 800cad6:	b125      	cbz	r5, 800cae2 <__swsetup_r+0x16>
 800cad8:	69ab      	ldr	r3, [r5, #24]
 800cada:	b913      	cbnz	r3, 800cae2 <__swsetup_r+0x16>
 800cadc:	4628      	mov	r0, r5
 800cade:	f7ff f8ef 	bl	800bcc0 <__sinit>
 800cae2:	4b2e      	ldr	r3, [pc, #184]	; (800cb9c <__swsetup_r+0xd0>)
 800cae4:	429c      	cmp	r4, r3
 800cae6:	d10f      	bne.n	800cb08 <__swsetup_r+0x3c>
 800cae8:	686c      	ldr	r4, [r5, #4]
 800caea:	89a3      	ldrh	r3, [r4, #12]
 800caec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800caf0:	0719      	lsls	r1, r3, #28
 800caf2:	d42c      	bmi.n	800cb4e <__swsetup_r+0x82>
 800caf4:	06dd      	lsls	r5, r3, #27
 800caf6:	d411      	bmi.n	800cb1c <__swsetup_r+0x50>
 800caf8:	2309      	movs	r3, #9
 800cafa:	6033      	str	r3, [r6, #0]
 800cafc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cb00:	81a3      	strh	r3, [r4, #12]
 800cb02:	f04f 30ff 	mov.w	r0, #4294967295
 800cb06:	e03e      	b.n	800cb86 <__swsetup_r+0xba>
 800cb08:	4b25      	ldr	r3, [pc, #148]	; (800cba0 <__swsetup_r+0xd4>)
 800cb0a:	429c      	cmp	r4, r3
 800cb0c:	d101      	bne.n	800cb12 <__swsetup_r+0x46>
 800cb0e:	68ac      	ldr	r4, [r5, #8]
 800cb10:	e7eb      	b.n	800caea <__swsetup_r+0x1e>
 800cb12:	4b24      	ldr	r3, [pc, #144]	; (800cba4 <__swsetup_r+0xd8>)
 800cb14:	429c      	cmp	r4, r3
 800cb16:	bf08      	it	eq
 800cb18:	68ec      	ldreq	r4, [r5, #12]
 800cb1a:	e7e6      	b.n	800caea <__swsetup_r+0x1e>
 800cb1c:	0758      	lsls	r0, r3, #29
 800cb1e:	d512      	bpl.n	800cb46 <__swsetup_r+0x7a>
 800cb20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb22:	b141      	cbz	r1, 800cb36 <__swsetup_r+0x6a>
 800cb24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb28:	4299      	cmp	r1, r3
 800cb2a:	d002      	beq.n	800cb32 <__swsetup_r+0x66>
 800cb2c:	4630      	mov	r0, r6
 800cb2e:	f7ff fd11 	bl	800c554 <_free_r>
 800cb32:	2300      	movs	r3, #0
 800cb34:	6363      	str	r3, [r4, #52]	; 0x34
 800cb36:	89a3      	ldrh	r3, [r4, #12]
 800cb38:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cb3c:	81a3      	strh	r3, [r4, #12]
 800cb3e:	2300      	movs	r3, #0
 800cb40:	6063      	str	r3, [r4, #4]
 800cb42:	6923      	ldr	r3, [r4, #16]
 800cb44:	6023      	str	r3, [r4, #0]
 800cb46:	89a3      	ldrh	r3, [r4, #12]
 800cb48:	f043 0308 	orr.w	r3, r3, #8
 800cb4c:	81a3      	strh	r3, [r4, #12]
 800cb4e:	6923      	ldr	r3, [r4, #16]
 800cb50:	b94b      	cbnz	r3, 800cb66 <__swsetup_r+0x9a>
 800cb52:	89a3      	ldrh	r3, [r4, #12]
 800cb54:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cb58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cb5c:	d003      	beq.n	800cb66 <__swsetup_r+0x9a>
 800cb5e:	4621      	mov	r1, r4
 800cb60:	4630      	mov	r0, r6
 800cb62:	f000 f959 	bl	800ce18 <__smakebuf_r>
 800cb66:	89a0      	ldrh	r0, [r4, #12]
 800cb68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cb6c:	f010 0301 	ands.w	r3, r0, #1
 800cb70:	d00a      	beq.n	800cb88 <__swsetup_r+0xbc>
 800cb72:	2300      	movs	r3, #0
 800cb74:	60a3      	str	r3, [r4, #8]
 800cb76:	6963      	ldr	r3, [r4, #20]
 800cb78:	425b      	negs	r3, r3
 800cb7a:	61a3      	str	r3, [r4, #24]
 800cb7c:	6923      	ldr	r3, [r4, #16]
 800cb7e:	b943      	cbnz	r3, 800cb92 <__swsetup_r+0xc6>
 800cb80:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cb84:	d1ba      	bne.n	800cafc <__swsetup_r+0x30>
 800cb86:	bd70      	pop	{r4, r5, r6, pc}
 800cb88:	0781      	lsls	r1, r0, #30
 800cb8a:	bf58      	it	pl
 800cb8c:	6963      	ldrpl	r3, [r4, #20]
 800cb8e:	60a3      	str	r3, [r4, #8]
 800cb90:	e7f4      	b.n	800cb7c <__swsetup_r+0xb0>
 800cb92:	2000      	movs	r0, #0
 800cb94:	e7f7      	b.n	800cb86 <__swsetup_r+0xba>
 800cb96:	bf00      	nop
 800cb98:	20000090 	.word	0x20000090
 800cb9c:	0800d580 	.word	0x0800d580
 800cba0:	0800d5a0 	.word	0x0800d5a0
 800cba4:	0800d560 	.word	0x0800d560

0800cba8 <__assert_func>:
 800cba8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cbaa:	4614      	mov	r4, r2
 800cbac:	461a      	mov	r2, r3
 800cbae:	4b09      	ldr	r3, [pc, #36]	; (800cbd4 <__assert_func+0x2c>)
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	4605      	mov	r5, r0
 800cbb4:	68d8      	ldr	r0, [r3, #12]
 800cbb6:	b14c      	cbz	r4, 800cbcc <__assert_func+0x24>
 800cbb8:	4b07      	ldr	r3, [pc, #28]	; (800cbd8 <__assert_func+0x30>)
 800cbba:	9100      	str	r1, [sp, #0]
 800cbbc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cbc0:	4906      	ldr	r1, [pc, #24]	; (800cbdc <__assert_func+0x34>)
 800cbc2:	462b      	mov	r3, r5
 800cbc4:	f000 f8e0 	bl	800cd88 <fiprintf>
 800cbc8:	f000 f9a3 	bl	800cf12 <abort>
 800cbcc:	4b04      	ldr	r3, [pc, #16]	; (800cbe0 <__assert_func+0x38>)
 800cbce:	461c      	mov	r4, r3
 800cbd0:	e7f3      	b.n	800cbba <__assert_func+0x12>
 800cbd2:	bf00      	nop
 800cbd4:	20000090 	.word	0x20000090
 800cbd8:	0800d72d 	.word	0x0800d72d
 800cbdc:	0800d73a 	.word	0x0800d73a
 800cbe0:	0800d768 	.word	0x0800d768

0800cbe4 <_close_r>:
 800cbe4:	b538      	push	{r3, r4, r5, lr}
 800cbe6:	4d06      	ldr	r5, [pc, #24]	; (800cc00 <_close_r+0x1c>)
 800cbe8:	2300      	movs	r3, #0
 800cbea:	4604      	mov	r4, r0
 800cbec:	4608      	mov	r0, r1
 800cbee:	602b      	str	r3, [r5, #0]
 800cbf0:	f7f6 f8a5 	bl	8002d3e <_close>
 800cbf4:	1c43      	adds	r3, r0, #1
 800cbf6:	d102      	bne.n	800cbfe <_close_r+0x1a>
 800cbf8:	682b      	ldr	r3, [r5, #0]
 800cbfa:	b103      	cbz	r3, 800cbfe <_close_r+0x1a>
 800cbfc:	6023      	str	r3, [r4, #0]
 800cbfe:	bd38      	pop	{r3, r4, r5, pc}
 800cc00:	20000ad8 	.word	0x20000ad8

0800cc04 <__sflush_r>:
 800cc04:	898a      	ldrh	r2, [r1, #12]
 800cc06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc0a:	4605      	mov	r5, r0
 800cc0c:	0710      	lsls	r0, r2, #28
 800cc0e:	460c      	mov	r4, r1
 800cc10:	d458      	bmi.n	800ccc4 <__sflush_r+0xc0>
 800cc12:	684b      	ldr	r3, [r1, #4]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	dc05      	bgt.n	800cc24 <__sflush_r+0x20>
 800cc18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	dc02      	bgt.n	800cc24 <__sflush_r+0x20>
 800cc1e:	2000      	movs	r0, #0
 800cc20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cc26:	2e00      	cmp	r6, #0
 800cc28:	d0f9      	beq.n	800cc1e <__sflush_r+0x1a>
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cc30:	682f      	ldr	r7, [r5, #0]
 800cc32:	602b      	str	r3, [r5, #0]
 800cc34:	d032      	beq.n	800cc9c <__sflush_r+0x98>
 800cc36:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cc38:	89a3      	ldrh	r3, [r4, #12]
 800cc3a:	075a      	lsls	r2, r3, #29
 800cc3c:	d505      	bpl.n	800cc4a <__sflush_r+0x46>
 800cc3e:	6863      	ldr	r3, [r4, #4]
 800cc40:	1ac0      	subs	r0, r0, r3
 800cc42:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cc44:	b10b      	cbz	r3, 800cc4a <__sflush_r+0x46>
 800cc46:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cc48:	1ac0      	subs	r0, r0, r3
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	4602      	mov	r2, r0
 800cc4e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cc50:	6a21      	ldr	r1, [r4, #32]
 800cc52:	4628      	mov	r0, r5
 800cc54:	47b0      	blx	r6
 800cc56:	1c43      	adds	r3, r0, #1
 800cc58:	89a3      	ldrh	r3, [r4, #12]
 800cc5a:	d106      	bne.n	800cc6a <__sflush_r+0x66>
 800cc5c:	6829      	ldr	r1, [r5, #0]
 800cc5e:	291d      	cmp	r1, #29
 800cc60:	d82c      	bhi.n	800ccbc <__sflush_r+0xb8>
 800cc62:	4a2a      	ldr	r2, [pc, #168]	; (800cd0c <__sflush_r+0x108>)
 800cc64:	40ca      	lsrs	r2, r1
 800cc66:	07d6      	lsls	r6, r2, #31
 800cc68:	d528      	bpl.n	800ccbc <__sflush_r+0xb8>
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	6062      	str	r2, [r4, #4]
 800cc6e:	04d9      	lsls	r1, r3, #19
 800cc70:	6922      	ldr	r2, [r4, #16]
 800cc72:	6022      	str	r2, [r4, #0]
 800cc74:	d504      	bpl.n	800cc80 <__sflush_r+0x7c>
 800cc76:	1c42      	adds	r2, r0, #1
 800cc78:	d101      	bne.n	800cc7e <__sflush_r+0x7a>
 800cc7a:	682b      	ldr	r3, [r5, #0]
 800cc7c:	b903      	cbnz	r3, 800cc80 <__sflush_r+0x7c>
 800cc7e:	6560      	str	r0, [r4, #84]	; 0x54
 800cc80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cc82:	602f      	str	r7, [r5, #0]
 800cc84:	2900      	cmp	r1, #0
 800cc86:	d0ca      	beq.n	800cc1e <__sflush_r+0x1a>
 800cc88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cc8c:	4299      	cmp	r1, r3
 800cc8e:	d002      	beq.n	800cc96 <__sflush_r+0x92>
 800cc90:	4628      	mov	r0, r5
 800cc92:	f7ff fc5f 	bl	800c554 <_free_r>
 800cc96:	2000      	movs	r0, #0
 800cc98:	6360      	str	r0, [r4, #52]	; 0x34
 800cc9a:	e7c1      	b.n	800cc20 <__sflush_r+0x1c>
 800cc9c:	6a21      	ldr	r1, [r4, #32]
 800cc9e:	2301      	movs	r3, #1
 800cca0:	4628      	mov	r0, r5
 800cca2:	47b0      	blx	r6
 800cca4:	1c41      	adds	r1, r0, #1
 800cca6:	d1c7      	bne.n	800cc38 <__sflush_r+0x34>
 800cca8:	682b      	ldr	r3, [r5, #0]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d0c4      	beq.n	800cc38 <__sflush_r+0x34>
 800ccae:	2b1d      	cmp	r3, #29
 800ccb0:	d001      	beq.n	800ccb6 <__sflush_r+0xb2>
 800ccb2:	2b16      	cmp	r3, #22
 800ccb4:	d101      	bne.n	800ccba <__sflush_r+0xb6>
 800ccb6:	602f      	str	r7, [r5, #0]
 800ccb8:	e7b1      	b.n	800cc1e <__sflush_r+0x1a>
 800ccba:	89a3      	ldrh	r3, [r4, #12]
 800ccbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ccc0:	81a3      	strh	r3, [r4, #12]
 800ccc2:	e7ad      	b.n	800cc20 <__sflush_r+0x1c>
 800ccc4:	690f      	ldr	r7, [r1, #16]
 800ccc6:	2f00      	cmp	r7, #0
 800ccc8:	d0a9      	beq.n	800cc1e <__sflush_r+0x1a>
 800ccca:	0793      	lsls	r3, r2, #30
 800cccc:	680e      	ldr	r6, [r1, #0]
 800ccce:	bf08      	it	eq
 800ccd0:	694b      	ldreq	r3, [r1, #20]
 800ccd2:	600f      	str	r7, [r1, #0]
 800ccd4:	bf18      	it	ne
 800ccd6:	2300      	movne	r3, #0
 800ccd8:	eba6 0807 	sub.w	r8, r6, r7
 800ccdc:	608b      	str	r3, [r1, #8]
 800ccde:	f1b8 0f00 	cmp.w	r8, #0
 800cce2:	dd9c      	ble.n	800cc1e <__sflush_r+0x1a>
 800cce4:	6a21      	ldr	r1, [r4, #32]
 800cce6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cce8:	4643      	mov	r3, r8
 800ccea:	463a      	mov	r2, r7
 800ccec:	4628      	mov	r0, r5
 800ccee:	47b0      	blx	r6
 800ccf0:	2800      	cmp	r0, #0
 800ccf2:	dc06      	bgt.n	800cd02 <__sflush_r+0xfe>
 800ccf4:	89a3      	ldrh	r3, [r4, #12]
 800ccf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ccfa:	81a3      	strh	r3, [r4, #12]
 800ccfc:	f04f 30ff 	mov.w	r0, #4294967295
 800cd00:	e78e      	b.n	800cc20 <__sflush_r+0x1c>
 800cd02:	4407      	add	r7, r0
 800cd04:	eba8 0800 	sub.w	r8, r8, r0
 800cd08:	e7e9      	b.n	800ccde <__sflush_r+0xda>
 800cd0a:	bf00      	nop
 800cd0c:	20400001 	.word	0x20400001

0800cd10 <_fflush_r>:
 800cd10:	b538      	push	{r3, r4, r5, lr}
 800cd12:	690b      	ldr	r3, [r1, #16]
 800cd14:	4605      	mov	r5, r0
 800cd16:	460c      	mov	r4, r1
 800cd18:	b913      	cbnz	r3, 800cd20 <_fflush_r+0x10>
 800cd1a:	2500      	movs	r5, #0
 800cd1c:	4628      	mov	r0, r5
 800cd1e:	bd38      	pop	{r3, r4, r5, pc}
 800cd20:	b118      	cbz	r0, 800cd2a <_fflush_r+0x1a>
 800cd22:	6983      	ldr	r3, [r0, #24]
 800cd24:	b90b      	cbnz	r3, 800cd2a <_fflush_r+0x1a>
 800cd26:	f7fe ffcb 	bl	800bcc0 <__sinit>
 800cd2a:	4b14      	ldr	r3, [pc, #80]	; (800cd7c <_fflush_r+0x6c>)
 800cd2c:	429c      	cmp	r4, r3
 800cd2e:	d11b      	bne.n	800cd68 <_fflush_r+0x58>
 800cd30:	686c      	ldr	r4, [r5, #4]
 800cd32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d0ef      	beq.n	800cd1a <_fflush_r+0xa>
 800cd3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cd3c:	07d0      	lsls	r0, r2, #31
 800cd3e:	d404      	bmi.n	800cd4a <_fflush_r+0x3a>
 800cd40:	0599      	lsls	r1, r3, #22
 800cd42:	d402      	bmi.n	800cd4a <_fflush_r+0x3a>
 800cd44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd46:	f7ff f85e 	bl	800be06 <__retarget_lock_acquire_recursive>
 800cd4a:	4628      	mov	r0, r5
 800cd4c:	4621      	mov	r1, r4
 800cd4e:	f7ff ff59 	bl	800cc04 <__sflush_r>
 800cd52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cd54:	07da      	lsls	r2, r3, #31
 800cd56:	4605      	mov	r5, r0
 800cd58:	d4e0      	bmi.n	800cd1c <_fflush_r+0xc>
 800cd5a:	89a3      	ldrh	r3, [r4, #12]
 800cd5c:	059b      	lsls	r3, r3, #22
 800cd5e:	d4dd      	bmi.n	800cd1c <_fflush_r+0xc>
 800cd60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd62:	f7ff f851 	bl	800be08 <__retarget_lock_release_recursive>
 800cd66:	e7d9      	b.n	800cd1c <_fflush_r+0xc>
 800cd68:	4b05      	ldr	r3, [pc, #20]	; (800cd80 <_fflush_r+0x70>)
 800cd6a:	429c      	cmp	r4, r3
 800cd6c:	d101      	bne.n	800cd72 <_fflush_r+0x62>
 800cd6e:	68ac      	ldr	r4, [r5, #8]
 800cd70:	e7df      	b.n	800cd32 <_fflush_r+0x22>
 800cd72:	4b04      	ldr	r3, [pc, #16]	; (800cd84 <_fflush_r+0x74>)
 800cd74:	429c      	cmp	r4, r3
 800cd76:	bf08      	it	eq
 800cd78:	68ec      	ldreq	r4, [r5, #12]
 800cd7a:	e7da      	b.n	800cd32 <_fflush_r+0x22>
 800cd7c:	0800d580 	.word	0x0800d580
 800cd80:	0800d5a0 	.word	0x0800d5a0
 800cd84:	0800d560 	.word	0x0800d560

0800cd88 <fiprintf>:
 800cd88:	b40e      	push	{r1, r2, r3}
 800cd8a:	b503      	push	{r0, r1, lr}
 800cd8c:	4601      	mov	r1, r0
 800cd8e:	ab03      	add	r3, sp, #12
 800cd90:	4805      	ldr	r0, [pc, #20]	; (800cda8 <fiprintf+0x20>)
 800cd92:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd96:	6800      	ldr	r0, [r0, #0]
 800cd98:	9301      	str	r3, [sp, #4]
 800cd9a:	f7ff fcaf 	bl	800c6fc <_vfiprintf_r>
 800cd9e:	b002      	add	sp, #8
 800cda0:	f85d eb04 	ldr.w	lr, [sp], #4
 800cda4:	b003      	add	sp, #12
 800cda6:	4770      	bx	lr
 800cda8:	20000090 	.word	0x20000090

0800cdac <_lseek_r>:
 800cdac:	b538      	push	{r3, r4, r5, lr}
 800cdae:	4d07      	ldr	r5, [pc, #28]	; (800cdcc <_lseek_r+0x20>)
 800cdb0:	4604      	mov	r4, r0
 800cdb2:	4608      	mov	r0, r1
 800cdb4:	4611      	mov	r1, r2
 800cdb6:	2200      	movs	r2, #0
 800cdb8:	602a      	str	r2, [r5, #0]
 800cdba:	461a      	mov	r2, r3
 800cdbc:	f7f5 ffe6 	bl	8002d8c <_lseek>
 800cdc0:	1c43      	adds	r3, r0, #1
 800cdc2:	d102      	bne.n	800cdca <_lseek_r+0x1e>
 800cdc4:	682b      	ldr	r3, [r5, #0]
 800cdc6:	b103      	cbz	r3, 800cdca <_lseek_r+0x1e>
 800cdc8:	6023      	str	r3, [r4, #0]
 800cdca:	bd38      	pop	{r3, r4, r5, pc}
 800cdcc:	20000ad8 	.word	0x20000ad8

0800cdd0 <__swhatbuf_r>:
 800cdd0:	b570      	push	{r4, r5, r6, lr}
 800cdd2:	460e      	mov	r6, r1
 800cdd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdd8:	2900      	cmp	r1, #0
 800cdda:	b096      	sub	sp, #88	; 0x58
 800cddc:	4614      	mov	r4, r2
 800cdde:	461d      	mov	r5, r3
 800cde0:	da07      	bge.n	800cdf2 <__swhatbuf_r+0x22>
 800cde2:	2300      	movs	r3, #0
 800cde4:	602b      	str	r3, [r5, #0]
 800cde6:	89b3      	ldrh	r3, [r6, #12]
 800cde8:	061a      	lsls	r2, r3, #24
 800cdea:	d410      	bmi.n	800ce0e <__swhatbuf_r+0x3e>
 800cdec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cdf0:	e00e      	b.n	800ce10 <__swhatbuf_r+0x40>
 800cdf2:	466a      	mov	r2, sp
 800cdf4:	f000 f894 	bl	800cf20 <_fstat_r>
 800cdf8:	2800      	cmp	r0, #0
 800cdfa:	dbf2      	blt.n	800cde2 <__swhatbuf_r+0x12>
 800cdfc:	9a01      	ldr	r2, [sp, #4]
 800cdfe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ce02:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ce06:	425a      	negs	r2, r3
 800ce08:	415a      	adcs	r2, r3
 800ce0a:	602a      	str	r2, [r5, #0]
 800ce0c:	e7ee      	b.n	800cdec <__swhatbuf_r+0x1c>
 800ce0e:	2340      	movs	r3, #64	; 0x40
 800ce10:	2000      	movs	r0, #0
 800ce12:	6023      	str	r3, [r4, #0]
 800ce14:	b016      	add	sp, #88	; 0x58
 800ce16:	bd70      	pop	{r4, r5, r6, pc}

0800ce18 <__smakebuf_r>:
 800ce18:	898b      	ldrh	r3, [r1, #12]
 800ce1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ce1c:	079d      	lsls	r5, r3, #30
 800ce1e:	4606      	mov	r6, r0
 800ce20:	460c      	mov	r4, r1
 800ce22:	d507      	bpl.n	800ce34 <__smakebuf_r+0x1c>
 800ce24:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ce28:	6023      	str	r3, [r4, #0]
 800ce2a:	6123      	str	r3, [r4, #16]
 800ce2c:	2301      	movs	r3, #1
 800ce2e:	6163      	str	r3, [r4, #20]
 800ce30:	b002      	add	sp, #8
 800ce32:	bd70      	pop	{r4, r5, r6, pc}
 800ce34:	ab01      	add	r3, sp, #4
 800ce36:	466a      	mov	r2, sp
 800ce38:	f7ff ffca 	bl	800cdd0 <__swhatbuf_r>
 800ce3c:	9900      	ldr	r1, [sp, #0]
 800ce3e:	4605      	mov	r5, r0
 800ce40:	4630      	mov	r0, r6
 800ce42:	f7ff fbd7 	bl	800c5f4 <_malloc_r>
 800ce46:	b948      	cbnz	r0, 800ce5c <__smakebuf_r+0x44>
 800ce48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce4c:	059a      	lsls	r2, r3, #22
 800ce4e:	d4ef      	bmi.n	800ce30 <__smakebuf_r+0x18>
 800ce50:	f023 0303 	bic.w	r3, r3, #3
 800ce54:	f043 0302 	orr.w	r3, r3, #2
 800ce58:	81a3      	strh	r3, [r4, #12]
 800ce5a:	e7e3      	b.n	800ce24 <__smakebuf_r+0xc>
 800ce5c:	4b0d      	ldr	r3, [pc, #52]	; (800ce94 <__smakebuf_r+0x7c>)
 800ce5e:	62b3      	str	r3, [r6, #40]	; 0x28
 800ce60:	89a3      	ldrh	r3, [r4, #12]
 800ce62:	6020      	str	r0, [r4, #0]
 800ce64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce68:	81a3      	strh	r3, [r4, #12]
 800ce6a:	9b00      	ldr	r3, [sp, #0]
 800ce6c:	6163      	str	r3, [r4, #20]
 800ce6e:	9b01      	ldr	r3, [sp, #4]
 800ce70:	6120      	str	r0, [r4, #16]
 800ce72:	b15b      	cbz	r3, 800ce8c <__smakebuf_r+0x74>
 800ce74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce78:	4630      	mov	r0, r6
 800ce7a:	f000 f863 	bl	800cf44 <_isatty_r>
 800ce7e:	b128      	cbz	r0, 800ce8c <__smakebuf_r+0x74>
 800ce80:	89a3      	ldrh	r3, [r4, #12]
 800ce82:	f023 0303 	bic.w	r3, r3, #3
 800ce86:	f043 0301 	orr.w	r3, r3, #1
 800ce8a:	81a3      	strh	r3, [r4, #12]
 800ce8c:	89a0      	ldrh	r0, [r4, #12]
 800ce8e:	4305      	orrs	r5, r0
 800ce90:	81a5      	strh	r5, [r4, #12]
 800ce92:	e7cd      	b.n	800ce30 <__smakebuf_r+0x18>
 800ce94:	0800bc59 	.word	0x0800bc59

0800ce98 <__ascii_mbtowc>:
 800ce98:	b082      	sub	sp, #8
 800ce9a:	b901      	cbnz	r1, 800ce9e <__ascii_mbtowc+0x6>
 800ce9c:	a901      	add	r1, sp, #4
 800ce9e:	b142      	cbz	r2, 800ceb2 <__ascii_mbtowc+0x1a>
 800cea0:	b14b      	cbz	r3, 800ceb6 <__ascii_mbtowc+0x1e>
 800cea2:	7813      	ldrb	r3, [r2, #0]
 800cea4:	600b      	str	r3, [r1, #0]
 800cea6:	7812      	ldrb	r2, [r2, #0]
 800cea8:	1e10      	subs	r0, r2, #0
 800ceaa:	bf18      	it	ne
 800ceac:	2001      	movne	r0, #1
 800ceae:	b002      	add	sp, #8
 800ceb0:	4770      	bx	lr
 800ceb2:	4610      	mov	r0, r2
 800ceb4:	e7fb      	b.n	800ceae <__ascii_mbtowc+0x16>
 800ceb6:	f06f 0001 	mvn.w	r0, #1
 800ceba:	e7f8      	b.n	800ceae <__ascii_mbtowc+0x16>

0800cebc <__malloc_lock>:
 800cebc:	4801      	ldr	r0, [pc, #4]	; (800cec4 <__malloc_lock+0x8>)
 800cebe:	f7fe bfa2 	b.w	800be06 <__retarget_lock_acquire_recursive>
 800cec2:	bf00      	nop
 800cec4:	20000ad0 	.word	0x20000ad0

0800cec8 <__malloc_unlock>:
 800cec8:	4801      	ldr	r0, [pc, #4]	; (800ced0 <__malloc_unlock+0x8>)
 800ceca:	f7fe bf9d 	b.w	800be08 <__retarget_lock_release_recursive>
 800cece:	bf00      	nop
 800ced0:	20000ad0 	.word	0x20000ad0

0800ced4 <_read_r>:
 800ced4:	b538      	push	{r3, r4, r5, lr}
 800ced6:	4d07      	ldr	r5, [pc, #28]	; (800cef4 <_read_r+0x20>)
 800ced8:	4604      	mov	r4, r0
 800ceda:	4608      	mov	r0, r1
 800cedc:	4611      	mov	r1, r2
 800cede:	2200      	movs	r2, #0
 800cee0:	602a      	str	r2, [r5, #0]
 800cee2:	461a      	mov	r2, r3
 800cee4:	f7f5 fef2 	bl	8002ccc <_read>
 800cee8:	1c43      	adds	r3, r0, #1
 800ceea:	d102      	bne.n	800cef2 <_read_r+0x1e>
 800ceec:	682b      	ldr	r3, [r5, #0]
 800ceee:	b103      	cbz	r3, 800cef2 <_read_r+0x1e>
 800cef0:	6023      	str	r3, [r4, #0]
 800cef2:	bd38      	pop	{r3, r4, r5, pc}
 800cef4:	20000ad8 	.word	0x20000ad8

0800cef8 <__ascii_wctomb>:
 800cef8:	b149      	cbz	r1, 800cf0e <__ascii_wctomb+0x16>
 800cefa:	2aff      	cmp	r2, #255	; 0xff
 800cefc:	bf85      	ittet	hi
 800cefe:	238a      	movhi	r3, #138	; 0x8a
 800cf00:	6003      	strhi	r3, [r0, #0]
 800cf02:	700a      	strbls	r2, [r1, #0]
 800cf04:	f04f 30ff 	movhi.w	r0, #4294967295
 800cf08:	bf98      	it	ls
 800cf0a:	2001      	movls	r0, #1
 800cf0c:	4770      	bx	lr
 800cf0e:	4608      	mov	r0, r1
 800cf10:	4770      	bx	lr

0800cf12 <abort>:
 800cf12:	b508      	push	{r3, lr}
 800cf14:	2006      	movs	r0, #6
 800cf16:	f000 f84d 	bl	800cfb4 <raise>
 800cf1a:	2001      	movs	r0, #1
 800cf1c:	f7f5 fecc 	bl	8002cb8 <_exit>

0800cf20 <_fstat_r>:
 800cf20:	b538      	push	{r3, r4, r5, lr}
 800cf22:	4d07      	ldr	r5, [pc, #28]	; (800cf40 <_fstat_r+0x20>)
 800cf24:	2300      	movs	r3, #0
 800cf26:	4604      	mov	r4, r0
 800cf28:	4608      	mov	r0, r1
 800cf2a:	4611      	mov	r1, r2
 800cf2c:	602b      	str	r3, [r5, #0]
 800cf2e:	f7f5 ff12 	bl	8002d56 <_fstat>
 800cf32:	1c43      	adds	r3, r0, #1
 800cf34:	d102      	bne.n	800cf3c <_fstat_r+0x1c>
 800cf36:	682b      	ldr	r3, [r5, #0]
 800cf38:	b103      	cbz	r3, 800cf3c <_fstat_r+0x1c>
 800cf3a:	6023      	str	r3, [r4, #0]
 800cf3c:	bd38      	pop	{r3, r4, r5, pc}
 800cf3e:	bf00      	nop
 800cf40:	20000ad8 	.word	0x20000ad8

0800cf44 <_isatty_r>:
 800cf44:	b538      	push	{r3, r4, r5, lr}
 800cf46:	4d06      	ldr	r5, [pc, #24]	; (800cf60 <_isatty_r+0x1c>)
 800cf48:	2300      	movs	r3, #0
 800cf4a:	4604      	mov	r4, r0
 800cf4c:	4608      	mov	r0, r1
 800cf4e:	602b      	str	r3, [r5, #0]
 800cf50:	f7f5 ff11 	bl	8002d76 <_isatty>
 800cf54:	1c43      	adds	r3, r0, #1
 800cf56:	d102      	bne.n	800cf5e <_isatty_r+0x1a>
 800cf58:	682b      	ldr	r3, [r5, #0]
 800cf5a:	b103      	cbz	r3, 800cf5e <_isatty_r+0x1a>
 800cf5c:	6023      	str	r3, [r4, #0]
 800cf5e:	bd38      	pop	{r3, r4, r5, pc}
 800cf60:	20000ad8 	.word	0x20000ad8

0800cf64 <_raise_r>:
 800cf64:	291f      	cmp	r1, #31
 800cf66:	b538      	push	{r3, r4, r5, lr}
 800cf68:	4604      	mov	r4, r0
 800cf6a:	460d      	mov	r5, r1
 800cf6c:	d904      	bls.n	800cf78 <_raise_r+0x14>
 800cf6e:	2316      	movs	r3, #22
 800cf70:	6003      	str	r3, [r0, #0]
 800cf72:	f04f 30ff 	mov.w	r0, #4294967295
 800cf76:	bd38      	pop	{r3, r4, r5, pc}
 800cf78:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cf7a:	b112      	cbz	r2, 800cf82 <_raise_r+0x1e>
 800cf7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cf80:	b94b      	cbnz	r3, 800cf96 <_raise_r+0x32>
 800cf82:	4620      	mov	r0, r4
 800cf84:	f000 f830 	bl	800cfe8 <_getpid_r>
 800cf88:	462a      	mov	r2, r5
 800cf8a:	4601      	mov	r1, r0
 800cf8c:	4620      	mov	r0, r4
 800cf8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cf92:	f000 b817 	b.w	800cfc4 <_kill_r>
 800cf96:	2b01      	cmp	r3, #1
 800cf98:	d00a      	beq.n	800cfb0 <_raise_r+0x4c>
 800cf9a:	1c59      	adds	r1, r3, #1
 800cf9c:	d103      	bne.n	800cfa6 <_raise_r+0x42>
 800cf9e:	2316      	movs	r3, #22
 800cfa0:	6003      	str	r3, [r0, #0]
 800cfa2:	2001      	movs	r0, #1
 800cfa4:	e7e7      	b.n	800cf76 <_raise_r+0x12>
 800cfa6:	2400      	movs	r4, #0
 800cfa8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cfac:	4628      	mov	r0, r5
 800cfae:	4798      	blx	r3
 800cfb0:	2000      	movs	r0, #0
 800cfb2:	e7e0      	b.n	800cf76 <_raise_r+0x12>

0800cfb4 <raise>:
 800cfb4:	4b02      	ldr	r3, [pc, #8]	; (800cfc0 <raise+0xc>)
 800cfb6:	4601      	mov	r1, r0
 800cfb8:	6818      	ldr	r0, [r3, #0]
 800cfba:	f7ff bfd3 	b.w	800cf64 <_raise_r>
 800cfbe:	bf00      	nop
 800cfc0:	20000090 	.word	0x20000090

0800cfc4 <_kill_r>:
 800cfc4:	b538      	push	{r3, r4, r5, lr}
 800cfc6:	4d07      	ldr	r5, [pc, #28]	; (800cfe4 <_kill_r+0x20>)
 800cfc8:	2300      	movs	r3, #0
 800cfca:	4604      	mov	r4, r0
 800cfcc:	4608      	mov	r0, r1
 800cfce:	4611      	mov	r1, r2
 800cfd0:	602b      	str	r3, [r5, #0]
 800cfd2:	f7f5 fe61 	bl	8002c98 <_kill>
 800cfd6:	1c43      	adds	r3, r0, #1
 800cfd8:	d102      	bne.n	800cfe0 <_kill_r+0x1c>
 800cfda:	682b      	ldr	r3, [r5, #0]
 800cfdc:	b103      	cbz	r3, 800cfe0 <_kill_r+0x1c>
 800cfde:	6023      	str	r3, [r4, #0]
 800cfe0:	bd38      	pop	{r3, r4, r5, pc}
 800cfe2:	bf00      	nop
 800cfe4:	20000ad8 	.word	0x20000ad8

0800cfe8 <_getpid_r>:
 800cfe8:	f7f5 be4e 	b.w	8002c88 <_getpid>
 800cfec:	0000      	movs	r0, r0
	...

0800cff0 <log>:
 800cff0:	b538      	push	{r3, r4, r5, lr}
 800cff2:	ed2d 8b02 	vpush	{d8}
 800cff6:	ec55 4b10 	vmov	r4, r5, d0
 800cffa:	f000 f841 	bl	800d080 <__ieee754_log>
 800cffe:	4b1e      	ldr	r3, [pc, #120]	; (800d078 <log+0x88>)
 800d000:	eeb0 8a40 	vmov.f32	s16, s0
 800d004:	eef0 8a60 	vmov.f32	s17, s1
 800d008:	f993 3000 	ldrsb.w	r3, [r3]
 800d00c:	3301      	adds	r3, #1
 800d00e:	d01a      	beq.n	800d046 <log+0x56>
 800d010:	4622      	mov	r2, r4
 800d012:	462b      	mov	r3, r5
 800d014:	4620      	mov	r0, r4
 800d016:	4629      	mov	r1, r5
 800d018:	f7f3 fd88 	bl	8000b2c <__aeabi_dcmpun>
 800d01c:	b998      	cbnz	r0, 800d046 <log+0x56>
 800d01e:	2200      	movs	r2, #0
 800d020:	2300      	movs	r3, #0
 800d022:	4620      	mov	r0, r4
 800d024:	4629      	mov	r1, r5
 800d026:	f7f3 fd77 	bl	8000b18 <__aeabi_dcmpgt>
 800d02a:	b960      	cbnz	r0, 800d046 <log+0x56>
 800d02c:	2200      	movs	r2, #0
 800d02e:	2300      	movs	r3, #0
 800d030:	4620      	mov	r0, r4
 800d032:	4629      	mov	r1, r5
 800d034:	f7f3 fd48 	bl	8000ac8 <__aeabi_dcmpeq>
 800d038:	b160      	cbz	r0, 800d054 <log+0x64>
 800d03a:	f7fd fabd 	bl	800a5b8 <__errno>
 800d03e:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 800d070 <log+0x80>
 800d042:	2322      	movs	r3, #34	; 0x22
 800d044:	6003      	str	r3, [r0, #0]
 800d046:	eeb0 0a48 	vmov.f32	s0, s16
 800d04a:	eef0 0a68 	vmov.f32	s1, s17
 800d04e:	ecbd 8b02 	vpop	{d8}
 800d052:	bd38      	pop	{r3, r4, r5, pc}
 800d054:	f7fd fab0 	bl	800a5b8 <__errno>
 800d058:	ecbd 8b02 	vpop	{d8}
 800d05c:	2321      	movs	r3, #33	; 0x21
 800d05e:	6003      	str	r3, [r0, #0]
 800d060:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d064:	4805      	ldr	r0, [pc, #20]	; (800d07c <log+0x8c>)
 800d066:	f000 b9c7 	b.w	800d3f8 <nan>
 800d06a:	bf00      	nop
 800d06c:	f3af 8000 	nop.w
 800d070:	00000000 	.word	0x00000000
 800d074:	fff00000 	.word	0xfff00000
 800d078:	20000260 	.word	0x20000260
 800d07c:	0800d768 	.word	0x0800d768

0800d080 <__ieee754_log>:
 800d080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d084:	ec51 0b10 	vmov	r0, r1, d0
 800d088:	ed2d 8b04 	vpush	{d8-d9}
 800d08c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800d090:	b083      	sub	sp, #12
 800d092:	460d      	mov	r5, r1
 800d094:	da29      	bge.n	800d0ea <__ieee754_log+0x6a>
 800d096:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d09a:	4303      	orrs	r3, r0
 800d09c:	ee10 2a10 	vmov	r2, s0
 800d0a0:	d10c      	bne.n	800d0bc <__ieee754_log+0x3c>
 800d0a2:	49cf      	ldr	r1, [pc, #828]	; (800d3e0 <__ieee754_log+0x360>)
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	2000      	movs	r0, #0
 800d0aa:	f7f3 fbcf 	bl	800084c <__aeabi_ddiv>
 800d0ae:	ec41 0b10 	vmov	d0, r0, r1
 800d0b2:	b003      	add	sp, #12
 800d0b4:	ecbd 8b04 	vpop	{d8-d9}
 800d0b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0bc:	2900      	cmp	r1, #0
 800d0be:	da05      	bge.n	800d0cc <__ieee754_log+0x4c>
 800d0c0:	460b      	mov	r3, r1
 800d0c2:	f7f3 f8e1 	bl	8000288 <__aeabi_dsub>
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	e7ee      	b.n	800d0aa <__ieee754_log+0x2a>
 800d0cc:	4bc5      	ldr	r3, [pc, #788]	; (800d3e4 <__ieee754_log+0x364>)
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	f7f3 fa92 	bl	80005f8 <__aeabi_dmul>
 800d0d4:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800d0d8:	460d      	mov	r5, r1
 800d0da:	4ac3      	ldr	r2, [pc, #780]	; (800d3e8 <__ieee754_log+0x368>)
 800d0dc:	4295      	cmp	r5, r2
 800d0de:	dd06      	ble.n	800d0ee <__ieee754_log+0x6e>
 800d0e0:	4602      	mov	r2, r0
 800d0e2:	460b      	mov	r3, r1
 800d0e4:	f7f3 f8d2 	bl	800028c <__adddf3>
 800d0e8:	e7e1      	b.n	800d0ae <__ieee754_log+0x2e>
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	e7f5      	b.n	800d0da <__ieee754_log+0x5a>
 800d0ee:	152c      	asrs	r4, r5, #20
 800d0f0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800d0f4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800d0f8:	441c      	add	r4, r3
 800d0fa:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800d0fe:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800d102:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d106:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800d10a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800d10e:	ea42 0105 	orr.w	r1, r2, r5
 800d112:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800d116:	2200      	movs	r2, #0
 800d118:	4bb4      	ldr	r3, [pc, #720]	; (800d3ec <__ieee754_log+0x36c>)
 800d11a:	f7f3 f8b5 	bl	8000288 <__aeabi_dsub>
 800d11e:	1cab      	adds	r3, r5, #2
 800d120:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d124:	2b02      	cmp	r3, #2
 800d126:	4682      	mov	sl, r0
 800d128:	468b      	mov	fp, r1
 800d12a:	f04f 0200 	mov.w	r2, #0
 800d12e:	dc53      	bgt.n	800d1d8 <__ieee754_log+0x158>
 800d130:	2300      	movs	r3, #0
 800d132:	f7f3 fcc9 	bl	8000ac8 <__aeabi_dcmpeq>
 800d136:	b1d0      	cbz	r0, 800d16e <__ieee754_log+0xee>
 800d138:	2c00      	cmp	r4, #0
 800d13a:	f000 8122 	beq.w	800d382 <__ieee754_log+0x302>
 800d13e:	4620      	mov	r0, r4
 800d140:	f7f3 f9f0 	bl	8000524 <__aeabi_i2d>
 800d144:	a390      	add	r3, pc, #576	; (adr r3, 800d388 <__ieee754_log+0x308>)
 800d146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d14a:	4606      	mov	r6, r0
 800d14c:	460f      	mov	r7, r1
 800d14e:	f7f3 fa53 	bl	80005f8 <__aeabi_dmul>
 800d152:	a38f      	add	r3, pc, #572	; (adr r3, 800d390 <__ieee754_log+0x310>)
 800d154:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d158:	4604      	mov	r4, r0
 800d15a:	460d      	mov	r5, r1
 800d15c:	4630      	mov	r0, r6
 800d15e:	4639      	mov	r1, r7
 800d160:	f7f3 fa4a 	bl	80005f8 <__aeabi_dmul>
 800d164:	4602      	mov	r2, r0
 800d166:	460b      	mov	r3, r1
 800d168:	4620      	mov	r0, r4
 800d16a:	4629      	mov	r1, r5
 800d16c:	e7ba      	b.n	800d0e4 <__ieee754_log+0x64>
 800d16e:	a38a      	add	r3, pc, #552	; (adr r3, 800d398 <__ieee754_log+0x318>)
 800d170:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d174:	4650      	mov	r0, sl
 800d176:	4659      	mov	r1, fp
 800d178:	f7f3 fa3e 	bl	80005f8 <__aeabi_dmul>
 800d17c:	4602      	mov	r2, r0
 800d17e:	460b      	mov	r3, r1
 800d180:	2000      	movs	r0, #0
 800d182:	499b      	ldr	r1, [pc, #620]	; (800d3f0 <__ieee754_log+0x370>)
 800d184:	f7f3 f880 	bl	8000288 <__aeabi_dsub>
 800d188:	4652      	mov	r2, sl
 800d18a:	4606      	mov	r6, r0
 800d18c:	460f      	mov	r7, r1
 800d18e:	465b      	mov	r3, fp
 800d190:	4650      	mov	r0, sl
 800d192:	4659      	mov	r1, fp
 800d194:	f7f3 fa30 	bl	80005f8 <__aeabi_dmul>
 800d198:	4602      	mov	r2, r0
 800d19a:	460b      	mov	r3, r1
 800d19c:	4630      	mov	r0, r6
 800d19e:	4639      	mov	r1, r7
 800d1a0:	f7f3 fa2a 	bl	80005f8 <__aeabi_dmul>
 800d1a4:	4606      	mov	r6, r0
 800d1a6:	460f      	mov	r7, r1
 800d1a8:	b914      	cbnz	r4, 800d1b0 <__ieee754_log+0x130>
 800d1aa:	4632      	mov	r2, r6
 800d1ac:	463b      	mov	r3, r7
 800d1ae:	e0a2      	b.n	800d2f6 <__ieee754_log+0x276>
 800d1b0:	4620      	mov	r0, r4
 800d1b2:	f7f3 f9b7 	bl	8000524 <__aeabi_i2d>
 800d1b6:	a374      	add	r3, pc, #464	; (adr r3, 800d388 <__ieee754_log+0x308>)
 800d1b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1bc:	4680      	mov	r8, r0
 800d1be:	4689      	mov	r9, r1
 800d1c0:	f7f3 fa1a 	bl	80005f8 <__aeabi_dmul>
 800d1c4:	a372      	add	r3, pc, #456	; (adr r3, 800d390 <__ieee754_log+0x310>)
 800d1c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1ca:	4604      	mov	r4, r0
 800d1cc:	460d      	mov	r5, r1
 800d1ce:	4640      	mov	r0, r8
 800d1d0:	4649      	mov	r1, r9
 800d1d2:	f7f3 fa11 	bl	80005f8 <__aeabi_dmul>
 800d1d6:	e0a7      	b.n	800d328 <__ieee754_log+0x2a8>
 800d1d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d1dc:	f7f3 f856 	bl	800028c <__adddf3>
 800d1e0:	4602      	mov	r2, r0
 800d1e2:	460b      	mov	r3, r1
 800d1e4:	4650      	mov	r0, sl
 800d1e6:	4659      	mov	r1, fp
 800d1e8:	f7f3 fb30 	bl	800084c <__aeabi_ddiv>
 800d1ec:	ec41 0b18 	vmov	d8, r0, r1
 800d1f0:	4620      	mov	r0, r4
 800d1f2:	f7f3 f997 	bl	8000524 <__aeabi_i2d>
 800d1f6:	ec53 2b18 	vmov	r2, r3, d8
 800d1fa:	ec41 0b19 	vmov	d9, r0, r1
 800d1fe:	ec51 0b18 	vmov	r0, r1, d8
 800d202:	f7f3 f9f9 	bl	80005f8 <__aeabi_dmul>
 800d206:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800d20a:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800d20e:	9301      	str	r3, [sp, #4]
 800d210:	4602      	mov	r2, r0
 800d212:	460b      	mov	r3, r1
 800d214:	4680      	mov	r8, r0
 800d216:	4689      	mov	r9, r1
 800d218:	f7f3 f9ee 	bl	80005f8 <__aeabi_dmul>
 800d21c:	a360      	add	r3, pc, #384	; (adr r3, 800d3a0 <__ieee754_log+0x320>)
 800d21e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d222:	4606      	mov	r6, r0
 800d224:	460f      	mov	r7, r1
 800d226:	f7f3 f9e7 	bl	80005f8 <__aeabi_dmul>
 800d22a:	a35f      	add	r3, pc, #380	; (adr r3, 800d3a8 <__ieee754_log+0x328>)
 800d22c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d230:	f7f3 f82c 	bl	800028c <__adddf3>
 800d234:	4632      	mov	r2, r6
 800d236:	463b      	mov	r3, r7
 800d238:	f7f3 f9de 	bl	80005f8 <__aeabi_dmul>
 800d23c:	a35c      	add	r3, pc, #368	; (adr r3, 800d3b0 <__ieee754_log+0x330>)
 800d23e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d242:	f7f3 f823 	bl	800028c <__adddf3>
 800d246:	4632      	mov	r2, r6
 800d248:	463b      	mov	r3, r7
 800d24a:	f7f3 f9d5 	bl	80005f8 <__aeabi_dmul>
 800d24e:	a35a      	add	r3, pc, #360	; (adr r3, 800d3b8 <__ieee754_log+0x338>)
 800d250:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d254:	f7f3 f81a 	bl	800028c <__adddf3>
 800d258:	4642      	mov	r2, r8
 800d25a:	464b      	mov	r3, r9
 800d25c:	f7f3 f9cc 	bl	80005f8 <__aeabi_dmul>
 800d260:	a357      	add	r3, pc, #348	; (adr r3, 800d3c0 <__ieee754_log+0x340>)
 800d262:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d266:	4680      	mov	r8, r0
 800d268:	4689      	mov	r9, r1
 800d26a:	4630      	mov	r0, r6
 800d26c:	4639      	mov	r1, r7
 800d26e:	f7f3 f9c3 	bl	80005f8 <__aeabi_dmul>
 800d272:	a355      	add	r3, pc, #340	; (adr r3, 800d3c8 <__ieee754_log+0x348>)
 800d274:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d278:	f7f3 f808 	bl	800028c <__adddf3>
 800d27c:	4632      	mov	r2, r6
 800d27e:	463b      	mov	r3, r7
 800d280:	f7f3 f9ba 	bl	80005f8 <__aeabi_dmul>
 800d284:	a352      	add	r3, pc, #328	; (adr r3, 800d3d0 <__ieee754_log+0x350>)
 800d286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d28a:	f7f2 ffff 	bl	800028c <__adddf3>
 800d28e:	4632      	mov	r2, r6
 800d290:	463b      	mov	r3, r7
 800d292:	f7f3 f9b1 	bl	80005f8 <__aeabi_dmul>
 800d296:	460b      	mov	r3, r1
 800d298:	4602      	mov	r2, r0
 800d29a:	4649      	mov	r1, r9
 800d29c:	4640      	mov	r0, r8
 800d29e:	f7f2 fff5 	bl	800028c <__adddf3>
 800d2a2:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800d2a6:	9b01      	ldr	r3, [sp, #4]
 800d2a8:	3551      	adds	r5, #81	; 0x51
 800d2aa:	431d      	orrs	r5, r3
 800d2ac:	2d00      	cmp	r5, #0
 800d2ae:	4680      	mov	r8, r0
 800d2b0:	4689      	mov	r9, r1
 800d2b2:	dd48      	ble.n	800d346 <__ieee754_log+0x2c6>
 800d2b4:	4b4e      	ldr	r3, [pc, #312]	; (800d3f0 <__ieee754_log+0x370>)
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	4650      	mov	r0, sl
 800d2ba:	4659      	mov	r1, fp
 800d2bc:	f7f3 f99c 	bl	80005f8 <__aeabi_dmul>
 800d2c0:	4652      	mov	r2, sl
 800d2c2:	465b      	mov	r3, fp
 800d2c4:	f7f3 f998 	bl	80005f8 <__aeabi_dmul>
 800d2c8:	4602      	mov	r2, r0
 800d2ca:	460b      	mov	r3, r1
 800d2cc:	4606      	mov	r6, r0
 800d2ce:	460f      	mov	r7, r1
 800d2d0:	4640      	mov	r0, r8
 800d2d2:	4649      	mov	r1, r9
 800d2d4:	f7f2 ffda 	bl	800028c <__adddf3>
 800d2d8:	ec53 2b18 	vmov	r2, r3, d8
 800d2dc:	f7f3 f98c 	bl	80005f8 <__aeabi_dmul>
 800d2e0:	4680      	mov	r8, r0
 800d2e2:	4689      	mov	r9, r1
 800d2e4:	b964      	cbnz	r4, 800d300 <__ieee754_log+0x280>
 800d2e6:	4602      	mov	r2, r0
 800d2e8:	460b      	mov	r3, r1
 800d2ea:	4630      	mov	r0, r6
 800d2ec:	4639      	mov	r1, r7
 800d2ee:	f7f2 ffcb 	bl	8000288 <__aeabi_dsub>
 800d2f2:	4602      	mov	r2, r0
 800d2f4:	460b      	mov	r3, r1
 800d2f6:	4650      	mov	r0, sl
 800d2f8:	4659      	mov	r1, fp
 800d2fa:	f7f2 ffc5 	bl	8000288 <__aeabi_dsub>
 800d2fe:	e6d6      	b.n	800d0ae <__ieee754_log+0x2e>
 800d300:	a321      	add	r3, pc, #132	; (adr r3, 800d388 <__ieee754_log+0x308>)
 800d302:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d306:	ec51 0b19 	vmov	r0, r1, d9
 800d30a:	f7f3 f975 	bl	80005f8 <__aeabi_dmul>
 800d30e:	a320      	add	r3, pc, #128	; (adr r3, 800d390 <__ieee754_log+0x310>)
 800d310:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d314:	4604      	mov	r4, r0
 800d316:	460d      	mov	r5, r1
 800d318:	ec51 0b19 	vmov	r0, r1, d9
 800d31c:	f7f3 f96c 	bl	80005f8 <__aeabi_dmul>
 800d320:	4642      	mov	r2, r8
 800d322:	464b      	mov	r3, r9
 800d324:	f7f2 ffb2 	bl	800028c <__adddf3>
 800d328:	4602      	mov	r2, r0
 800d32a:	460b      	mov	r3, r1
 800d32c:	4630      	mov	r0, r6
 800d32e:	4639      	mov	r1, r7
 800d330:	f7f2 ffaa 	bl	8000288 <__aeabi_dsub>
 800d334:	4652      	mov	r2, sl
 800d336:	465b      	mov	r3, fp
 800d338:	f7f2 ffa6 	bl	8000288 <__aeabi_dsub>
 800d33c:	4602      	mov	r2, r0
 800d33e:	460b      	mov	r3, r1
 800d340:	4620      	mov	r0, r4
 800d342:	4629      	mov	r1, r5
 800d344:	e7d9      	b.n	800d2fa <__ieee754_log+0x27a>
 800d346:	4602      	mov	r2, r0
 800d348:	460b      	mov	r3, r1
 800d34a:	4650      	mov	r0, sl
 800d34c:	4659      	mov	r1, fp
 800d34e:	f7f2 ff9b 	bl	8000288 <__aeabi_dsub>
 800d352:	ec53 2b18 	vmov	r2, r3, d8
 800d356:	f7f3 f94f 	bl	80005f8 <__aeabi_dmul>
 800d35a:	4606      	mov	r6, r0
 800d35c:	460f      	mov	r7, r1
 800d35e:	2c00      	cmp	r4, #0
 800d360:	f43f af23 	beq.w	800d1aa <__ieee754_log+0x12a>
 800d364:	a308      	add	r3, pc, #32	; (adr r3, 800d388 <__ieee754_log+0x308>)
 800d366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d36a:	ec51 0b19 	vmov	r0, r1, d9
 800d36e:	f7f3 f943 	bl	80005f8 <__aeabi_dmul>
 800d372:	a307      	add	r3, pc, #28	; (adr r3, 800d390 <__ieee754_log+0x310>)
 800d374:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d378:	4604      	mov	r4, r0
 800d37a:	460d      	mov	r5, r1
 800d37c:	ec51 0b19 	vmov	r0, r1, d9
 800d380:	e727      	b.n	800d1d2 <__ieee754_log+0x152>
 800d382:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800d3d8 <__ieee754_log+0x358>
 800d386:	e694      	b.n	800d0b2 <__ieee754_log+0x32>
 800d388:	fee00000 	.word	0xfee00000
 800d38c:	3fe62e42 	.word	0x3fe62e42
 800d390:	35793c76 	.word	0x35793c76
 800d394:	3dea39ef 	.word	0x3dea39ef
 800d398:	55555555 	.word	0x55555555
 800d39c:	3fd55555 	.word	0x3fd55555
 800d3a0:	df3e5244 	.word	0xdf3e5244
 800d3a4:	3fc2f112 	.word	0x3fc2f112
 800d3a8:	96cb03de 	.word	0x96cb03de
 800d3ac:	3fc74664 	.word	0x3fc74664
 800d3b0:	94229359 	.word	0x94229359
 800d3b4:	3fd24924 	.word	0x3fd24924
 800d3b8:	55555593 	.word	0x55555593
 800d3bc:	3fe55555 	.word	0x3fe55555
 800d3c0:	d078c69f 	.word	0xd078c69f
 800d3c4:	3fc39a09 	.word	0x3fc39a09
 800d3c8:	1d8e78af 	.word	0x1d8e78af
 800d3cc:	3fcc71c5 	.word	0x3fcc71c5
 800d3d0:	9997fa04 	.word	0x9997fa04
 800d3d4:	3fd99999 	.word	0x3fd99999
	...
 800d3e0:	c3500000 	.word	0xc3500000
 800d3e4:	43500000 	.word	0x43500000
 800d3e8:	7fefffff 	.word	0x7fefffff
 800d3ec:	3ff00000 	.word	0x3ff00000
 800d3f0:	3fe00000 	.word	0x3fe00000
 800d3f4:	00000000 	.word	0x00000000

0800d3f8 <nan>:
 800d3f8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d400 <nan+0x8>
 800d3fc:	4770      	bx	lr
 800d3fe:	bf00      	nop
 800d400:	00000000 	.word	0x00000000
 800d404:	7ff80000 	.word	0x7ff80000

0800d408 <_init>:
 800d408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d40a:	bf00      	nop
 800d40c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d40e:	bc08      	pop	{r3}
 800d410:	469e      	mov	lr, r3
 800d412:	4770      	bx	lr

0800d414 <_fini>:
 800d414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d416:	bf00      	nop
 800d418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d41a:	bc08      	pop	{r3}
 800d41c:	469e      	mov	lr, r3
 800d41e:	4770      	bx	lr
