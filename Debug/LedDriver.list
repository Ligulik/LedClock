
LedDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cde8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  0800cf78  0800cf78  0001cf78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d3cc  0800d3cc  00020264  2**0
                  CONTENTS
  4 .ARM          00000008  0800d3cc  0800d3cc  0001d3cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d3d4  0800d3d4  00020264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d3d4  0800d3d4  0001d3d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d3d8  0800d3d8  0001d3d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000264  20000000  0800d3dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000874  20000264  0800d640  00020264  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ad8  0800d640  00020ad8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020264  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025150  00000000  00000000  00020294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000438f  00000000  00000000  000453e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001938  00000000  00000000  00049778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001760  00000000  00000000  0004b0b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cf4b  00000000  00000000  0004c810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ee42  00000000  00000000  0007975b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00110be6  00000000  00000000  0009859d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001a9183  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a18  00000000  00000000  001a91d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000264 	.word	0x20000264
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cf60 	.word	0x0800cf60

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000268 	.word	0x20000268
 80001cc:	0800cf60 	.word	0x0800cf60

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08a      	sub	sp, #40	; 0x28
 8000ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000ea6:	f107 031c 	add.w	r3, r7, #28
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	605a      	str	r2, [r3, #4]
 8000eb0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000eb2:	1d3b      	adds	r3, r7, #4
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
 8000ebe:	611a      	str	r2, [r3, #16]
 8000ec0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ec2:	4b35      	ldr	r3, [pc, #212]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000ec4:	4a35      	ldr	r2, [pc, #212]	; (8000f9c <MX_ADC1_Init+0xfc>)
 8000ec6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ec8:	4b33      	ldr	r3, [pc, #204]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ece:	4b32      	ldr	r3, [pc, #200]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ed4:	4b30      	ldr	r3, [pc, #192]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000eda:	4b2f      	ldr	r3, [pc, #188]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ee0:	4b2d      	ldr	r3, [pc, #180]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000ee2:	2204      	movs	r2, #4
 8000ee4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ee6:	4b2c      	ldr	r3, [pc, #176]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000eec:	4b2a      	ldr	r3, [pc, #168]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000ef2:	4b29      	ldr	r3, [pc, #164]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ef8:	4b27      	ldr	r3, [pc, #156]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f00:	4b25      	ldr	r3, [pc, #148]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f06:	4b24      	ldr	r3, [pc, #144]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f0c:	4b22      	ldr	r3, [pc, #136]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f14:	4b20      	ldr	r3, [pc, #128]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 8000f1a:	4b1f      	ldr	r3, [pc, #124]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_64;
 8000f22:	4b1d      	ldr	r3, [pc, #116]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000f24:	2214      	movs	r2, #20
 8000f26:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_6;
 8000f28:	4b1b      	ldr	r3, [pc, #108]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000f2a:	22c0      	movs	r2, #192	; 0xc0
 8000f2c:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000f2e:	4b1a      	ldr	r3, [pc, #104]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000f34:	4b18      	ldr	r3, [pc, #96]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000f36:	2201      	movs	r2, #1
 8000f38:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f3a:	4817      	ldr	r0, [pc, #92]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000f3c:	f002 fd20 	bl	8003980 <HAL_ADC_Init>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000f46:	f000 fb69 	bl	800161c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f4e:	f107 031c 	add.w	r3, r7, #28
 8000f52:	4619      	mov	r1, r3
 8000f54:	4810      	ldr	r0, [pc, #64]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000f56:	f003 fd6d 	bl	8004a34 <HAL_ADCEx_MultiModeConfigChannel>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8000f60:	f000 fb5c 	bl	800161c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f64:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <MX_ADC1_Init+0x100>)
 8000f66:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f68:	2306      	movs	r3, #6
 8000f6a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000f6c:	2307      	movs	r3, #7
 8000f6e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f70:	237f      	movs	r3, #127	; 0x7f
 8000f72:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f74:	2304      	movs	r3, #4
 8000f76:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f7c:	1d3b      	adds	r3, r7, #4
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4805      	ldr	r0, [pc, #20]	; (8000f98 <MX_ADC1_Init+0xf8>)
 8000f82:	f002 fff3 	bl	8003f6c <HAL_ADC_ConfigChannel>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 8000f8c:	f000 fb46 	bl	800161c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f90:	bf00      	nop
 8000f92:	3728      	adds	r7, #40	; 0x28
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	20000884 	.word	0x20000884
 8000f9c:	50040000 	.word	0x50040000
 8000fa0:	04300002 	.word	0x04300002

08000fa4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b0ac      	sub	sp, #176	; 0xb0
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fbc:	f107 0314 	add.w	r3, r7, #20
 8000fc0:	2288      	movs	r2, #136	; 0x88
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f009 f8cd 	bl	800a164 <memset>
  if(adcHandle->Instance==ADC1)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a27      	ldr	r2, [pc, #156]	; (800106c <HAL_ADC_MspInit+0xc8>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d146      	bne.n	8001062 <HAL_ADC_MspInit+0xbe>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000fd4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000fd8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000fda:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fde:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000fea:	2310      	movs	r3, #16
 8000fec:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000fee:	2307      	movs	r3, #7
 8000ff0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000ffa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ffe:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001000:	f107 0314 	add.w	r3, r7, #20
 8001004:	4618      	mov	r0, r3
 8001006:	f005 f8d9 	bl	80061bc <HAL_RCCEx_PeriphCLKConfig>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001010:	f000 fb04 	bl	800161c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001014:	4b16      	ldr	r3, [pc, #88]	; (8001070 <HAL_ADC_MspInit+0xcc>)
 8001016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001018:	4a15      	ldr	r2, [pc, #84]	; (8001070 <HAL_ADC_MspInit+0xcc>)
 800101a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800101e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001020:	4b13      	ldr	r3, [pc, #76]	; (8001070 <HAL_ADC_MspInit+0xcc>)
 8001022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001024:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001028:	613b      	str	r3, [r7, #16]
 800102a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800102c:	4b10      	ldr	r3, [pc, #64]	; (8001070 <HAL_ADC_MspInit+0xcc>)
 800102e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001030:	4a0f      	ldr	r2, [pc, #60]	; (8001070 <HAL_ADC_MspInit+0xcc>)
 8001032:	f043 0304 	orr.w	r3, r3, #4
 8001036:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001038:	4b0d      	ldr	r3, [pc, #52]	; (8001070 <HAL_ADC_MspInit+0xcc>)
 800103a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800103c:	f003 0304 	and.w	r3, r3, #4
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001044:	2301      	movs	r3, #1
 8001046:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800104a:	230b      	movs	r3, #11
 800104c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001056:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800105a:	4619      	mov	r1, r3
 800105c:	4805      	ldr	r0, [pc, #20]	; (8001074 <HAL_ADC_MspInit+0xd0>)
 800105e:	f004 f8a3 	bl	80051a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001062:	bf00      	nop
 8001064:	37b0      	adds	r7, #176	; 0xb0
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	50040000 	.word	0x50040000
 8001070:	40021000 	.word	0x40021000
 8001074:	48000800 	.word	0x48000800

08001078 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800107e:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <MX_DMA_Init+0x38>)
 8001080:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001082:	4a0b      	ldr	r2, [pc, #44]	; (80010b0 <MX_DMA_Init+0x38>)
 8001084:	f043 0301 	orr.w	r3, r3, #1
 8001088:	6493      	str	r3, [r2, #72]	; 0x48
 800108a:	4b09      	ldr	r3, [pc, #36]	; (80010b0 <MX_DMA_Init+0x38>)
 800108c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	607b      	str	r3, [r7, #4]
 8001094:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001096:	2200      	movs	r2, #0
 8001098:	2100      	movs	r1, #0
 800109a:	200b      	movs	r0, #11
 800109c:	f003 fe55 	bl	8004d4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80010a0:	200b      	movs	r0, #11
 80010a2:	f003 fe6e 	bl	8004d82 <HAL_NVIC_EnableIRQ>

}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40021000 	.word	0x40021000

080010b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ba:	4b15      	ldr	r3, [pc, #84]	; (8001110 <MX_GPIO_Init+0x5c>)
 80010bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010be:	4a14      	ldr	r2, [pc, #80]	; (8001110 <MX_GPIO_Init+0x5c>)
 80010c0:	f043 0304 	orr.w	r3, r3, #4
 80010c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010c6:	4b12      	ldr	r3, [pc, #72]	; (8001110 <MX_GPIO_Init+0x5c>)
 80010c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ca:	f003 0304 	and.w	r3, r3, #4
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d2:	4b0f      	ldr	r3, [pc, #60]	; (8001110 <MX_GPIO_Init+0x5c>)
 80010d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d6:	4a0e      	ldr	r2, [pc, #56]	; (8001110 <MX_GPIO_Init+0x5c>)
 80010d8:	f043 0301 	orr.w	r3, r3, #1
 80010dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010de:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <MX_GPIO_Init+0x5c>)
 80010e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	60bb      	str	r3, [r7, #8]
 80010e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ea:	4b09      	ldr	r3, [pc, #36]	; (8001110 <MX_GPIO_Init+0x5c>)
 80010ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ee:	4a08      	ldr	r2, [pc, #32]	; (8001110 <MX_GPIO_Init+0x5c>)
 80010f0:	f043 0302 	orr.w	r3, r3, #2
 80010f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010f6:	4b06      	ldr	r3, [pc, #24]	; (8001110 <MX_GPIO_Init+0x5c>)
 80010f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fa:	f003 0302 	and.w	r3, r3, #2
 80010fe:	607b      	str	r3, [r7, #4]
 8001100:	687b      	ldr	r3, [r7, #4]

}
 8001102:	bf00      	nop
 8001104:	3714      	adds	r7, #20
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	40021000 	.word	0x40021000

08001114 <calc_pulse>:
static volatile uint32_t received_value;
static int received_bits;


static pulse_t calc_pulse(uint32_t time)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
	if (time < 250)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2bf9      	cmp	r3, #249	; 0xf9
 8001120:	d801      	bhi.n	8001126 <calc_pulse+0x12>
		return PULSE_ERROR;
 8001122:	2305      	movs	r3, #5
 8001124:	e021      	b.n	800116a <calc_pulse+0x56>
	else if (time < 1200)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800112c:	d201      	bcs.n	8001132 <calc_pulse+0x1e>
		return PULSE_SHORT;
 800112e:	2304      	movs	r3, #4
 8001130:	e01b      	b.n	800116a <calc_pulse+0x56>
	else if (time < 2000)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001138:	d201      	bcs.n	800113e <calc_pulse+0x2a>
		return PULSE_LONG;
 800113a:	2303      	movs	r3, #3
 800113c:	e015      	b.n	800116a <calc_pulse+0x56>
	else if (time < 3000)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001144:	4293      	cmp	r3, r2
 8001146:	d801      	bhi.n	800114c <calc_pulse+0x38>
		return PULSE_2MS;
 8001148:	2302      	movs	r3, #2
 800114a:	e00e      	b.n	800116a <calc_pulse+0x56>
	else if (time < 6000)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f241 726f 	movw	r2, #5999	; 0x176f
 8001152:	4293      	cmp	r3, r2
 8001154:	d801      	bhi.n	800115a <calc_pulse+0x46>
		return PULSE_4MS;
 8001156:	2301      	movs	r3, #1
 8001158:	e007      	b.n	800116a <calc_pulse+0x56>
	else if (time < 12000)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f642 62df 	movw	r2, #11999	; 0x2edf
 8001160:	4293      	cmp	r3, r2
 8001162:	d801      	bhi.n	8001168 <calc_pulse+0x54>
		return PULSE_9MS;
 8001164:	2300      	movs	r3, #0
 8001166:	e000      	b.n	800116a <calc_pulse+0x56>
	else
		return PULSE_ERROR;
 8001168:	2305      	movs	r3, #5
}
 800116a:	4618      	mov	r0, r3
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
	...

08001178 <ir_tim_interrupt>:


void ir_tim_interrupt(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
	pulse_t pulse;

	if (received_bits >= 32)
 800117e:	4b1f      	ldr	r3, [pc, #124]	; (80011fc <ir_tim_interrupt+0x84>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	2b1f      	cmp	r3, #31
 8001184:	dc36      	bgt.n	80011f4 <ir_tim_interrupt+0x7c>
		return;

	pulse = calc_pulse(HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1));
 8001186:	2100      	movs	r1, #0
 8001188:	481d      	ldr	r0, [pc, #116]	; (8001200 <ir_tim_interrupt+0x88>)
 800118a:	f007 fac3 	bl	8008714 <HAL_TIM_ReadCapturedValue>
 800118e:	4603      	mov	r3, r0
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff ffbf 	bl	8001114 <calc_pulse>
 8001196:	4603      	mov	r3, r0
 8001198:	71fb      	strb	r3, [r7, #7]

	switch (pulse) {
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	2b04      	cmp	r3, #4
 800119e:	d006      	beq.n	80011ae <ir_tim_interrupt+0x36>
 80011a0:	2b04      	cmp	r3, #4
 80011a2:	dc23      	bgt.n	80011ec <ir_tim_interrupt+0x74>
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d01a      	beq.n	80011de <ir_tim_interrupt+0x66>
 80011a8:	2b03      	cmp	r3, #3
 80011aa:	d00b      	beq.n	80011c4 <ir_tim_interrupt+0x4c>
 80011ac:	e01e      	b.n	80011ec <ir_tim_interrupt+0x74>
	case PULSE_SHORT:
		received_value = received_value >> 1;
 80011ae:	4b15      	ldr	r3, [pc, #84]	; (8001204 <ir_tim_interrupt+0x8c>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	085b      	lsrs	r3, r3, #1
 80011b4:	4a13      	ldr	r2, [pc, #76]	; (8001204 <ir_tim_interrupt+0x8c>)
 80011b6:	6013      	str	r3, [r2, #0]
		received_bits++;
 80011b8:	4b10      	ldr	r3, [pc, #64]	; (80011fc <ir_tim_interrupt+0x84>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	3301      	adds	r3, #1
 80011be:	4a0f      	ldr	r2, [pc, #60]	; (80011fc <ir_tim_interrupt+0x84>)
 80011c0:	6013      	str	r3, [r2, #0]
		break;
 80011c2:	e018      	b.n	80011f6 <ir_tim_interrupt+0x7e>
	case PULSE_LONG:
		received_value = (received_value >> 1) | 0x80000000;
 80011c4:	4b0f      	ldr	r3, [pc, #60]	; (8001204 <ir_tim_interrupt+0x8c>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	085b      	lsrs	r3, r3, #1
 80011ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011ce:	4a0d      	ldr	r2, [pc, #52]	; (8001204 <ir_tim_interrupt+0x8c>)
 80011d0:	6013      	str	r3, [r2, #0]
		received_bits++;
 80011d2:	4b0a      	ldr	r3, [pc, #40]	; (80011fc <ir_tim_interrupt+0x84>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	3301      	adds	r3, #1
 80011d8:	4a08      	ldr	r2, [pc, #32]	; (80011fc <ir_tim_interrupt+0x84>)
 80011da:	6013      	str	r3, [r2, #0]
		break;
 80011dc:	e00b      	b.n	80011f6 <ir_tim_interrupt+0x7e>
	case PULSE_4MS:
		received_value = 0;
 80011de:	4b09      	ldr	r3, [pc, #36]	; (8001204 <ir_tim_interrupt+0x8c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
		received_bits = 0;
 80011e4:	4b05      	ldr	r3, [pc, #20]	; (80011fc <ir_tim_interrupt+0x84>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
		break;
 80011ea:	e004      	b.n	80011f6 <ir_tim_interrupt+0x7e>
//	case PULSE_2MS:
//		if (received_bits == 0)
//			received_bits = 32;
//		break;
	default:
		received_bits = 0;
 80011ec:	4b03      	ldr	r3, [pc, #12]	; (80011fc <ir_tim_interrupt+0x84>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
		break;
 80011f2:	e000      	b.n	80011f6 <ir_tim_interrupt+0x7e>
		return;
 80011f4:	bf00      	nop
	}
}
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20000284 	.word	0x20000284
 8001200:	200009ac 	.word	0x200009ac
 8001204:	20000280 	.word	0x20000280

08001208 <ir_init>:


void ir_init(void){
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim2);
 800120c:	4804      	ldr	r0, [pc, #16]	; (8001220 <ir_init+0x18>)
 800120e:	f006 f99f 	bl	8007550 <HAL_TIM_Base_Start>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8001212:	2100      	movs	r1, #0
 8001214:	4802      	ldr	r0, [pc, #8]	; (8001220 <ir_init+0x18>)
 8001216:	f006 fd57 	bl	8007cc8 <HAL_TIM_IC_Start_IT>
}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	200009ac 	.word	0x200009ac

08001224 <ir_read>:


int ir_read(void){
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
	if(received_bits!=32){
 800122a:	4b0a      	ldr	r3, [pc, #40]	; (8001254 <ir_read+0x30>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2b20      	cmp	r3, #32
 8001230:	d002      	beq.n	8001238 <ir_read+0x14>
		return -1;
 8001232:	f04f 33ff 	mov.w	r3, #4294967295
 8001236:	e007      	b.n	8001248 <ir_read+0x24>
	}

	uint8_t value=received_value>>16;
 8001238:	4b07      	ldr	r3, [pc, #28]	; (8001258 <ir_read+0x34>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	0c1b      	lsrs	r3, r3, #16
 800123e:	71fb      	strb	r3, [r7, #7]
	received_bits=0;
 8001240:	4b04      	ldr	r3, [pc, #16]	; (8001254 <ir_read+0x30>)
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
	return value;
 8001246:	79fb      	ldrb	r3, [r7, #7]
}
 8001248:	4618      	mov	r0, r3
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	20000284 	.word	0x20000284
 8001258:	20000280 	.word	0x20000280

0800125c <__io_putchar>:


// Funtions rewrite;

// Printf function modifed to use with USART
int __io_putchar(int ch) {
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
	if (ch == '\n') {
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2b0a      	cmp	r3, #10
 8001268:	d102      	bne.n	8001270 <__io_putchar+0x14>
		__io_putchar('\r');
 800126a:	200d      	movs	r0, #13
 800126c:	f7ff fff6 	bl	800125c <__io_putchar>
	}

	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 8001270:	1d39      	adds	r1, r7, #4
 8001272:	f04f 33ff 	mov.w	r3, #4294967295
 8001276:	2201      	movs	r2, #1
 8001278:	4803      	ldr	r0, [pc, #12]	; (8001288 <__io_putchar+0x2c>)
 800127a:	f008 fa7b 	bl	8009774 <HAL_UART_Transmit>

	return 1;
 800127e:	2301      	movs	r3, #1
}
 8001280:	4618      	mov	r0, r3
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	20000a40 	.word	0x20000a40

0800128c <HAL_RTC_AlarmAEventCallback>:

// Callbacks from interrupts

// Interrupt from RTC after every one second
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]

	if (TurnOnMenuMode() == MENU_OFF
 8001294:	f000 f9c8 	bl	8001628 <TurnOnMenuMode>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d105      	bne.n	80012aa <HAL_RTC_AlarmAEventCallback+0x1e>
			&& flag_showCalendar_or_temperature < DATA_SHOW_DURATION) {
 800129e:	4b0b      	ldr	r3, [pc, #44]	; (80012cc <HAL_RTC_AlarmAEventCallback+0x40>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2b18      	cmp	r3, #24
 80012a4:	dc01      	bgt.n	80012aa <HAL_RTC_AlarmAEventCallback+0x1e>
		dwukropekStart();
 80012a6:	f000 ffb5 	bl	8002214 <dwukropekStart>
	} else {

	}

	// Obsluga flagi daty i temperatury
	flag_showCalendar_or_temperature += 1;
 80012aa:	4b08      	ldr	r3, [pc, #32]	; (80012cc <HAL_RTC_AlarmAEventCallback+0x40>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	3301      	adds	r3, #1
 80012b0:	4a06      	ldr	r2, [pc, #24]	; (80012cc <HAL_RTC_AlarmAEventCallback+0x40>)
 80012b2:	6013      	str	r3, [r2, #0]
	if (flag_showCalendar_or_temperature == TEMPERATURE_SHOW_PERIOD) {
 80012b4:	4b05      	ldr	r3, [pc, #20]	; (80012cc <HAL_RTC_AlarmAEventCallback+0x40>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2b23      	cmp	r3, #35	; 0x23
 80012ba:	d102      	bne.n	80012c2 <HAL_RTC_AlarmAEventCallback+0x36>
		flag_showCalendar_or_temperature = 0;
 80012bc:	4b03      	ldr	r3, [pc, #12]	; (80012cc <HAL_RTC_AlarmAEventCallback+0x40>)
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
	}

}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	2000028c 	.word	0x2000028c

080012d0 <HAL_TIM_IC_CaptureCallback>:

// Interrupt for remote controler
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]

	if (htim == &htim2) {
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4a09      	ldr	r2, [pc, #36]	; (8001300 <HAL_TIM_IC_CaptureCallback+0x30>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d108      	bne.n	80012f2 <HAL_TIM_IC_CaptureCallback+0x22>
		switch (HAL_TIM_GetActiveChannel(&htim2)) {
 80012e0:	4807      	ldr	r0, [pc, #28]	; (8001300 <HAL_TIM_IC_CaptureCallback+0x30>)
 80012e2:	f007 fa8d 	bl	8008800 <HAL_TIM_GetActiveChannel>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d104      	bne.n	80012f6 <HAL_TIM_IC_CaptureCallback+0x26>
		case HAL_TIM_ACTIVE_CHANNEL_1:
			ir_tim_interrupt();
 80012ec:	f7ff ff44 	bl	8001178 <ir_tim_interrupt>
			break;
 80012f0:	e002      	b.n	80012f8 <HAL_TIM_IC_CaptureCallback+0x28>
		default:
			break;
		}
	}
 80012f2:	bf00      	nop
 80012f4:	e000      	b.n	80012f8 <HAL_TIM_IC_CaptureCallback+0x28>
			break;
 80012f6:	bf00      	nop
}
 80012f8:	bf00      	nop
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	200009ac 	.word	0x200009ac

08001304 <HAL_TIM_PeriodElapsedCallback>:

// Interrupt from timer 6 after 0,3 seconds. It is run, when MENU is on.
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]

	if (htim == &htim6)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4a39      	ldr	r2, [pc, #228]	; (80013f4 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d16b      	bne.n	80013ec <HAL_TIM_PeriodElapsedCallback+0xe8>

	{
		if (TurnOnMenuMode() == MENU_TIME_LEVEL
 8001314:	f000 f988 	bl	8001628 <TurnOnMenuMode>
 8001318:	4603      	mov	r3, r0
 800131a:	2b01      	cmp	r3, #1
 800131c:	d004      	beq.n	8001328 <HAL_TIM_PeriodElapsedCallback+0x24>
				|| TurnOnMenuMode() == MENU_TIME_HOUR_SECOND_DIGIT) {
 800131e:	f000 f983 	bl	8001628 <TurnOnMenuMode>
 8001322:	4603      	mov	r3, r0
 8001324:	2b03      	cmp	r3, #3
 8001326:	d110      	bne.n	800134a <HAL_TIM_PeriodElapsedCallback+0x46>

			if (flag_blinker == 1) {
 8001328:	4b33      	ldr	r3, [pc, #204]	; (80013f8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2b01      	cmp	r3, #1
 800132e:	d105      	bne.n	800133c <HAL_TIM_PeriodElapsedCallback+0x38>
				ws2811_hourDisplayReset();
 8001330:	f001 ffde 	bl	80032f0 <ws2811_hourDisplayReset>
				flag_blinker = 0;
 8001334:	4b30      	ldr	r3, [pc, #192]	; (80013f8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	e006      	b.n	800134a <HAL_TIM_PeriodElapsedCallback+0x46>
			} else {
				menuDisplayStart();
 800133c:	f001 f992 	bl	8002664 <menuDisplayStart>
				dwukropekTurnOn();
 8001340:	f000 fefa 	bl	8002138 <dwukropekTurnOn>
				flag_blinker = 1;
 8001344:	4b2c      	ldr	r3, [pc, #176]	; (80013f8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001346:	2201      	movs	r2, #1
 8001348:	601a      	str	r2, [r3, #0]
			}
		}

		if (TurnOnMenuMode() == MENU_TIME_MINUTE_LEVEL
 800134a:	f000 f96d 	bl	8001628 <TurnOnMenuMode>
 800134e:	4603      	mov	r3, r0
 8001350:	2b02      	cmp	r3, #2
 8001352:	d004      	beq.n	800135e <HAL_TIM_PeriodElapsedCallback+0x5a>
				|| TurnOnMenuMode() == MENU_TIME_MINUTE_SECOND_DIGIT) {
 8001354:	f000 f968 	bl	8001628 <TurnOnMenuMode>
 8001358:	4603      	mov	r3, r0
 800135a:	2b04      	cmp	r3, #4
 800135c:	d110      	bne.n	8001380 <HAL_TIM_PeriodElapsedCallback+0x7c>

			if (flag_blinker == 1) {
 800135e:	4b26      	ldr	r3, [pc, #152]	; (80013f8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d105      	bne.n	8001372 <HAL_TIM_PeriodElapsedCallback+0x6e>
				ws2811_minuteDisplayReset();
 8001366:	f001 ffef 	bl	8003348 <ws2811_minuteDisplayReset>
				flag_blinker = 0;
 800136a:	4b23      	ldr	r3, [pc, #140]	; (80013f8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	e006      	b.n	8001380 <HAL_TIM_PeriodElapsedCallback+0x7c>
			} else {
				menuDisplayStart();
 8001372:	f001 f977 	bl	8002664 <menuDisplayStart>
				dwukropekTurnOn();
 8001376:	f000 fedf 	bl	8002138 <dwukropekTurnOn>
				flag_blinker = 1;
 800137a:	4b1f      	ldr	r3, [pc, #124]	; (80013f8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800137c:	2201      	movs	r2, #1
 800137e:	601a      	str	r2, [r3, #0]
			}
		}


		if (TurnOnMenuMode() == MENU_DATE_LEVEL
 8001380:	f000 f952 	bl	8001628 <TurnOnMenuMode>
 8001384:	4603      	mov	r3, r0
 8001386:	2b05      	cmp	r3, #5
 8001388:	d004      	beq.n	8001394 <HAL_TIM_PeriodElapsedCallback+0x90>
				|| TurnOnMenuMode() == MENU_DATE_MONTH_SECOND_DIGIT) {
 800138a:	f000 f94d 	bl	8001628 <TurnOnMenuMode>
 800138e:	4603      	mov	r3, r0
 8001390:	2b06      	cmp	r3, #6
 8001392:	d110      	bne.n	80013b6 <HAL_TIM_PeriodElapsedCallback+0xb2>

			if (flag_blinker == 1) {
 8001394:	4b18      	ldr	r3, [pc, #96]	; (80013f8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2b01      	cmp	r3, #1
 800139a:	d105      	bne.n	80013a8 <HAL_TIM_PeriodElapsedCallback+0xa4>
				ws2811_minuteDisplayReset();
 800139c:	f001 ffd4 	bl	8003348 <ws2811_minuteDisplayReset>
				flag_blinker = 0;
 80013a0:	4b15      	ldr	r3, [pc, #84]	; (80013f8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	e006      	b.n	80013b6 <HAL_TIM_PeriodElapsedCallback+0xb2>
			} else {
				dateOnDisplay();
 80013a8:	f001 f98c 	bl	80026c4 <dateOnDisplay>
				kropkaOn();
 80013ac:	f000 fefc 	bl	80021a8 <kropkaOn>
				flag_blinker = 1;
 80013b0:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80013b2:	2201      	movs	r2, #1
 80013b4:	601a      	str	r2, [r3, #0]
			}
		}

		if (TurnOnMenuMode() == MENU_DATE_DAY_FIRST_DIGIT
 80013b6:	f000 f937 	bl	8001628 <TurnOnMenuMode>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b07      	cmp	r3, #7
 80013be:	d004      	beq.n	80013ca <HAL_TIM_PeriodElapsedCallback+0xc6>
				|| TurnOnMenuMode() == MENU_DATE_DAY_SECOND_DIGIT) {
 80013c0:	f000 f932 	bl	8001628 <TurnOnMenuMode>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b08      	cmp	r3, #8
 80013c8:	d110      	bne.n	80013ec <HAL_TIM_PeriodElapsedCallback+0xe8>

			if (flag_blinker == 1) {
 80013ca:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d105      	bne.n	80013de <HAL_TIM_PeriodElapsedCallback+0xda>
				ws2811_hourDisplayReset();
 80013d2:	f001 ff8d 	bl	80032f0 <ws2811_hourDisplayReset>
				flag_blinker = 0;
 80013d6:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
				flag_blinker = 1;
			}
		}

	}
}
 80013dc:	e006      	b.n	80013ec <HAL_TIM_PeriodElapsedCallback+0xe8>
				dateOnDisplay();
 80013de:	f001 f971 	bl	80026c4 <dateOnDisplay>
				kropkaOn();
 80013e2:	f000 fee1 	bl	80021a8 <kropkaOn>
				flag_blinker = 1;
 80013e6:	4b04      	ldr	r3, [pc, #16]	; (80013f8 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80013e8:	2201      	movs	r2, #1
 80013ea:	601a      	str	r2, [r3, #0]
}
 80013ec:	bf00      	nop
 80013ee:	3708      	adds	r7, #8
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	20000960 	.word	0x20000960
 80013f8:	20000288 	.word	0x20000288

080013fc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001402:	f002 f83e 	bl	8003482 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001406:	f000 f88b 	bl	8001520 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800140a:	f7ff fe53 	bl	80010b4 <MX_GPIO_Init>
	MX_DMA_Init();
 800140e:	f7ff fe33 	bl	8001078 <MX_DMA_Init>
	MX_TIM4_Init();
 8001412:	f001 fd07 	bl	8002e24 <MX_TIM4_Init>
	MX_RTC_Init();
 8001416:	f000 fd17 	bl	8001e48 <MX_RTC_Init>
	MX_TIM2_Init();
 800141a:	f001 fc77 	bl	8002d0c <MX_TIM2_Init>
	MX_USART2_UART_Init();
 800141e:	f001 fe7d 	bl	800311c <MX_USART2_UART_Init>
	MX_TIM6_Init();
 8001422:	f001 fd75 	bl	8002f10 <MX_TIM6_Init>
	MX_ADC1_Init();
 8001426:	f7ff fd3b 	bl	8000ea0 <MX_ADC1_Init>

	/* Initialize interrupts */
	MX_NVIC_Init();
 800142a:	f000 f8db 	bl	80015e4 <MX_NVIC_Init>
	/* USER CODE BEGIN 2 */

	// Inicjalizacja programu
	ws2811_init();
 800142e:	f001 ff2d 	bl	800328c <ws2811_init>
	HAL_TIM_Base_Start_IT(&htim6);
 8001432:	4838      	ldr	r0, [pc, #224]	; (8001514 <main+0x118>)
 8001434:	f006 f8f4 	bl	8007620 <HAL_TIM_Base_Start_IT>
	ir_init();
 8001438:	f7ff fee6 	bl	8001208 <ir_init>
	changeColor(RED);
 800143c:	4b36      	ldr	r3, [pc, #216]	; (8001518 <main+0x11c>)
 800143e:	781a      	ldrb	r2, [r3, #0]
 8001440:	7859      	ldrb	r1, [r3, #1]
 8001442:	0209      	lsls	r1, r1, #8
 8001444:	430a      	orrs	r2, r1
 8001446:	789b      	ldrb	r3, [r3, #2]
 8001448:	041b      	lsls	r3, r3, #16
 800144a:	431a      	orrs	r2, r3
 800144c:	2300      	movs	r3, #0
 800144e:	f362 0317 	bfi	r3, r2, #0, #24
 8001452:	4618      	mov	r0, r3
 8001454:	f000 fdba 	bl	8001fcc <changeColor>

		// ZEGAR:

		// NORMALNA PRACA - Wyswietlanie zegara

		if (TurnOnMenuMode()
 8001458:	f000 f8e6 	bl	8001628 <TurnOnMenuMode>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d117      	bne.n	8001492 <main+0x96>
				== 0&& flag_showCalendar_or_temperature < DATA_SHOW_DURATION && flag_showCalendar_or_temperature<TEMPERATURE_SHOW_DURATION) {
 8001462:	4b2e      	ldr	r3, [pc, #184]	; (800151c <main+0x120>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	2b18      	cmp	r3, #24
 8001468:	dc13      	bgt.n	8001492 <main+0x96>
 800146a:	4b2c      	ldr	r3, [pc, #176]	; (800151c <main+0x120>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2b1d      	cmp	r3, #29
 8001470:	dc0f      	bgt.n	8001492 <main+0x96>
			if (flag_showCalendar_or_temperature == 0) {
 8001472:	4b2a      	ldr	r3, [pc, #168]	; (800151c <main+0x120>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d108      	bne.n	800148c <main+0x90>
				backToColor();
 800147a:	f000 fde1 	bl	8002040 <backToColor>
				dwukropekTurnOn();
 800147e:	f000 fe5b 	bl	8002138 <dwukropekTurnOn>
				//Zapobieganie migotaniu
				flag_showCalendar_or_temperature += 1;
 8001482:	4b26      	ldr	r3, [pc, #152]	; (800151c <main+0x120>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	3301      	adds	r3, #1
 8001488:	4a24      	ldr	r2, [pc, #144]	; (800151c <main+0x120>)
 800148a:	6013      	str	r3, [r2, #0]
			}
			normalDisplayStart();
 800148c:	f001 f8ba 	bl	8002604 <normalDisplayStart>
 8001490:	e035      	b.n	80014fe <main+0x102>
		}

		// WYSWIETLANIE DATY CO OKRESLONY CZAS

		else if (TurnOnMenuMode()
 8001492:	f000 f8c9 	bl	8001628 <TurnOnMenuMode>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d113      	bne.n	80014c4 <main+0xc8>
				== 0&& flag_showCalendar_or_temperature<TEMPERATURE_SHOW_DURATION) {
 800149c:	4b1f      	ldr	r3, [pc, #124]	; (800151c <main+0x120>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2b1d      	cmp	r3, #29
 80014a2:	dc0f      	bgt.n	80014c4 <main+0xc8>
			if (flag_showCalendar_or_temperature == DATA_SHOW_DURATION) {
 80014a4:	4b1d      	ldr	r3, [pc, #116]	; (800151c <main+0x120>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2b19      	cmp	r3, #25
 80014aa:	d106      	bne.n	80014ba <main+0xbe>
				dwukropekTurnOff();
 80014ac:	f000 fe64 	bl	8002178 <dwukropekTurnOff>
				// Zapobieganie migotaniu
				flag_showCalendar_or_temperature = DATA_SHOW_DURATION + 1;
 80014b0:	4b1a      	ldr	r3, [pc, #104]	; (800151c <main+0x120>)
 80014b2:	221a      	movs	r2, #26
 80014b4:	601a      	str	r2, [r3, #0]
				mixColor();
 80014b6:	f000 fda9 	bl	800200c <mixColor>
			}
			kropkaOn();
 80014ba:	f000 fe75 	bl	80021a8 <kropkaOn>
			dateOnDisplay();
 80014be:	f001 f901 	bl	80026c4 <dateOnDisplay>
 80014c2:	e01c      	b.n	80014fe <main+0x102>
		}

		else if (TurnOnMenuMode()
 80014c4:	f000 f8b0 	bl	8001628 <TurnOnMenuMode>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d111      	bne.n	80014f2 <main+0xf6>
				== 0&& flag_showCalendar_or_temperature == TEMPERATURE_SHOW_DURATION) {
 80014ce:	4b13      	ldr	r3, [pc, #76]	; (800151c <main+0x120>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2b1e      	cmp	r3, #30
 80014d4:	d10d      	bne.n	80014f2 <main+0xf6>
			ws2811_init();
 80014d6:	f001 fed9 	bl	800328c <ws2811_init>
			mixColor();
 80014da:	f000 fd97 	bl	800200c <mixColor>
			kropkaOn();
 80014de:	f000 fe63 	bl	80021a8 <kropkaOn>
			temperatureOnDisplay();
 80014e2:	f001 f91d 	bl	8002720 <temperatureOnDisplay>
			flag_showCalendar_or_temperature += 1;
 80014e6:	4b0d      	ldr	r3, [pc, #52]	; (800151c <main+0x120>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	3301      	adds	r3, #1
 80014ec:	4a0b      	ldr	r2, [pc, #44]	; (800151c <main+0x120>)
 80014ee:	6013      	str	r3, [r2, #0]
 80014f0:	e005      	b.n	80014fe <main+0x102>
		} else if (flag_showCalendar_or_temperature < TEMPERATURE_SHOW_PERIOD) {
 80014f2:	4b0a      	ldr	r3, [pc, #40]	; (800151c <main+0x120>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2b22      	cmp	r3, #34	; 0x22
 80014f8:	dc01      	bgt.n	80014fe <main+0x102>
			ws2811_update();
 80014fa:	f001 ff53 	bl	80033a4 <ws2811_update>
		}

		// CZEKANIE NA SYGNAL Z PILOTA
		int value = ir_read();
 80014fe:	f7ff fe91 	bl	8001224 <ir_read>
 8001502:	6078      	str	r0, [r7, #4]
		if (value != -1) {
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800150a:	d0a5      	beq.n	8001458 <main+0x5c>
			menu(value);
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f000 fa07 	bl	8001920 <menu>
	while (1) {
 8001512:	e7a1      	b.n	8001458 <main+0x5c>
 8001514:	20000960 	.word	0x20000960
 8001518:	20000070 	.word	0x20000070
 800151c:	2000028c 	.word	0x2000028c

08001520 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001520:	b580      	push	{r7, lr}
 8001522:	b096      	sub	sp, #88	; 0x58
 8001524:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001526:	f107 0314 	add.w	r3, r7, #20
 800152a:	2244      	movs	r2, #68	; 0x44
 800152c:	2100      	movs	r1, #0
 800152e:	4618      	mov	r0, r3
 8001530:	f008 fe18 	bl	800a164 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001534:	463b      	mov	r3, r7
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	605a      	str	r2, [r3, #4]
 800153c:	609a      	str	r2, [r3, #8]
 800153e:	60da      	str	r2, [r3, #12]
 8001540:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 8001542:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001546:	f003 fff7 	bl	8005538 <HAL_PWREx_ControlVoltageScaling>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 8001550:	f000 f864 	bl	800161c <Error_Handler>
	}
	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8001554:	f003 ffd2 	bl	80054fc <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001558:	4b21      	ldr	r3, [pc, #132]	; (80015e0 <SystemClock_Config+0xc0>)
 800155a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800155e:	4a20      	ldr	r2, [pc, #128]	; (80015e0 <SystemClock_Config+0xc0>)
 8001560:	f023 0318 	bic.w	r3, r3, #24
 8001564:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE
 8001568:	2314      	movs	r3, #20
 800156a:	617b      	str	r3, [r7, #20]
			| RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800156c:	2301      	movs	r3, #1
 800156e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001570:	2301      	movs	r3, #1
 8001572:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8001574:	2300      	movs	r3, #0
 8001576:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001578:	2360      	movs	r3, #96	; 0x60
 800157a:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800157c:	2302      	movs	r3, #2
 800157e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001580:	2301      	movs	r3, #1
 8001582:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8001584:	2301      	movs	r3, #1
 8001586:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 40;
 8001588:	2328      	movs	r3, #40	; 0x28
 800158a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800158c:	2307      	movs	r3, #7
 800158e:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001590:	2302      	movs	r3, #2
 8001592:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001594:	2302      	movs	r3, #2
 8001596:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001598:	f107 0314 	add.w	r3, r7, #20
 800159c:	4618      	mov	r0, r3
 800159e:	f004 f821 	bl	80055e4 <HAL_RCC_OscConfig>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <SystemClock_Config+0x8c>
		Error_Handler();
 80015a8:	f000 f838 	bl	800161c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80015ac:	230f      	movs	r3, #15
 80015ae:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015b0:	2303      	movs	r3, #3
 80015b2:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015b4:	2300      	movs	r3, #0
 80015b6:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015b8:	2300      	movs	r3, #0
 80015ba:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015bc:	2300      	movs	r3, #0
 80015be:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 80015c0:	463b      	mov	r3, r7
 80015c2:	2104      	movs	r1, #4
 80015c4:	4618      	mov	r0, r3
 80015c6:	f004 fbf3 	bl	8005db0 <HAL_RCC_ClockConfig>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <SystemClock_Config+0xb4>
		Error_Handler();
 80015d0:	f000 f824 	bl	800161c <Error_Handler>
	}
	/** Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode();
 80015d4:	f005 f8dc 	bl	8006790 <HAL_RCCEx_EnableMSIPLLMode>
}
 80015d8:	bf00      	nop
 80015da:	3758      	adds	r7, #88	; 0x58
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	40021000 	.word	0x40021000

080015e4 <MX_NVIC_Init>:

/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void) {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
	/* RTC_Alarm_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 4, 0);
 80015e8:	2200      	movs	r2, #0
 80015ea:	2104      	movs	r1, #4
 80015ec:	2029      	movs	r0, #41	; 0x29
 80015ee:	f003 fbac 	bl	8004d4a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80015f2:	2029      	movs	r0, #41	; 0x29
 80015f4:	f003 fbc5 	bl	8004d82 <HAL_NVIC_EnableIRQ>
	/* TIM2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 80015f8:	2200      	movs	r2, #0
 80015fa:	2102      	movs	r1, #2
 80015fc:	201c      	movs	r0, #28
 80015fe:	f003 fba4 	bl	8004d4a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001602:	201c      	movs	r0, #28
 8001604:	f003 fbbd 	bl	8004d82 <HAL_NVIC_EnableIRQ>
	/* TIM6_DAC_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 8001608:	2200      	movs	r2, #0
 800160a:	2103      	movs	r1, #3
 800160c:	2036      	movs	r0, #54	; 0x36
 800160e:	f003 fb9c 	bl	8004d4a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001612:	2036      	movs	r0, #54	; 0x36
 8001614:	f003 fbb5 	bl	8004d82 <HAL_NVIC_EnableIRQ>
}
 8001618:	bf00      	nop
 800161a:	bd80      	pop	{r7, pc}

0800161c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001620:	b672      	cpsid	i
}
 8001622:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001624:	e7fe      	b.n	8001624 <Error_Handler+0x8>
	...

08001628 <TurnOnMenuMode>:



// Funtions:

int TurnOnMenuMode(void){
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
	return flagMenu;
 800162c:	4b03      	ldr	r3, [pc, #12]	; (800163c <TurnOnMenuMode+0x14>)
 800162e:	681b      	ldr	r3, [r3, #0]
}
 8001630:	4618      	mov	r0, r3
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	20000294 	.word	0x20000294

08001640 <isInRangeHours>:


// Testy:

int isInRangeHours(uint8_t entryData){
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	71fb      	strb	r3, [r7, #7]
	if(entryData>23){
 800164a:	79fb      	ldrb	r3, [r7, #7]
 800164c:	2b17      	cmp	r3, #23
 800164e:	d901      	bls.n	8001654 <isInRangeHours+0x14>
		return 1;
 8001650:	2301      	movs	r3, #1
 8001652:	e000      	b.n	8001656 <isInRangeHours+0x16>
	}else{
		return 0;
 8001654:	2300      	movs	r3, #0
	}
}
 8001656:	4618      	mov	r0, r3
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <isInRangeMinute>:

int isInRangeMinute(uint8_t entryData){
 8001662:	b480      	push	{r7}
 8001664:	b083      	sub	sp, #12
 8001666:	af00      	add	r7, sp, #0
 8001668:	4603      	mov	r3, r0
 800166a:	71fb      	strb	r3, [r7, #7]
	if(entryData>60){
 800166c:	79fb      	ldrb	r3, [r7, #7]
 800166e:	2b3c      	cmp	r3, #60	; 0x3c
 8001670:	d901      	bls.n	8001676 <isInRangeMinute+0x14>
		return 1;
 8001672:	2301      	movs	r3, #1
 8001674:	e000      	b.n	8001678 <isInRangeMinute+0x16>
	}else{
		return 0;
 8001676:	2300      	movs	r3, #0
	}
}
 8001678:	4618      	mov	r0, r3
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <isInRangeMonth>:


int isInRangeMonth(uint8_t entryData){
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	71fb      	strb	r3, [r7, #7]
	if(entryData>12){
 800168e:	79fb      	ldrb	r3, [r7, #7]
 8001690:	2b0c      	cmp	r3, #12
 8001692:	d901      	bls.n	8001698 <isInRangeMonth+0x14>
		return 1;
 8001694:	2301      	movs	r3, #1
 8001696:	e000      	b.n	800169a <isInRangeMonth+0x16>
	}else{
		return 0;
 8001698:	2300      	movs	r3, #0
	}
}
 800169a:	4618      	mov	r0, r3
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <isInRangeDay>:


int isInRangeDay(uint8_t entryData){
 80016a6:	b480      	push	{r7}
 80016a8:	b083      	sub	sp, #12
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	4603      	mov	r3, r0
 80016ae:	71fb      	strb	r3, [r7, #7]
	if(entryData>31){
 80016b0:	79fb      	ldrb	r3, [r7, #7]
 80016b2:	2b1f      	cmp	r3, #31
 80016b4:	d901      	bls.n	80016ba <isInRangeDay+0x14>
		return 1;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e000      	b.n	80016bc <isInRangeDay+0x16>
	}else{
		return 0;
 80016ba:	2300      	movs	r3, #0
	}
}
 80016bc:	4618      	mov	r0, r3
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <colorMenu>:


void colorMenu(struct colorRgb color){
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
	if (flagColor == MENU_COLOR_LEVEL) {
 80016d0:	4b06      	ldr	r3, [pc, #24]	; (80016ec <colorMenu+0x24>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d105      	bne.n	80016e4 <colorMenu+0x1c>
				changeColor(color);
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f000 fc77 	bl	8001fcc <changeColor>
				flagColor = MENU_OFF;
 80016de:	4b03      	ldr	r3, [pc, #12]	; (80016ec <colorMenu+0x24>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
			}
}
 80016e4:	bf00      	nop
 80016e6:	3708      	adds	r7, #8
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	20000290 	.word	0x20000290

080016f0 <firstDigitHour>:


// GODZINA


void firstDigitHour(uint8_t forAdd){
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	71fb      	strb	r3, [r7, #7]
	if (flagMenu == MENU_TIME_LEVEL) {
 80016fa:	4b08      	ldr	r3, [pc, #32]	; (800171c <firstDigitHour+0x2c>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d105      	bne.n	800170e <firstDigitHour+0x1e>
		hoursChange = forAdd;
 8001702:	4a07      	ldr	r2, [pc, #28]	; (8001720 <firstDigitHour+0x30>)
 8001704:	79fb      	ldrb	r3, [r7, #7]
 8001706:	7013      	strb	r3, [r2, #0]
		flagMenu = MENU_TIME_HOUR_SECOND_DIGIT;
 8001708:	4b04      	ldr	r3, [pc, #16]	; (800171c <firstDigitHour+0x2c>)
 800170a:	2203      	movs	r2, #3
 800170c:	601a      	str	r2, [r3, #0]
	}
}
 800170e:	bf00      	nop
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	20000294 	.word	0x20000294
 8001720:	20000299 	.word	0x20000299

08001724 <secondDigitHour>:

void secondDigitHour(uint8_t forAdd){
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	71fb      	strb	r3, [r7, #7]
	if (flagMenu == MENU_TIME_HOUR_SECOND_DIGIT) {
 800172e:	4b11      	ldr	r3, [pc, #68]	; (8001774 <secondDigitHour+0x50>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	2b03      	cmp	r3, #3
 8001734:	d119      	bne.n	800176a <secondDigitHour+0x46>

		hoursChange += forAdd;
 8001736:	4b10      	ldr	r3, [pc, #64]	; (8001778 <secondDigitHour+0x54>)
 8001738:	781a      	ldrb	r2, [r3, #0]
 800173a:	79fb      	ldrb	r3, [r7, #7]
 800173c:	4413      	add	r3, r2
 800173e:	b2da      	uxtb	r2, r3
 8001740:	4b0d      	ldr	r3, [pc, #52]	; (8001778 <secondDigitHour+0x54>)
 8001742:	701a      	strb	r2, [r3, #0]

		if (isInRangeHours(hoursChange)) {
 8001744:	4b0c      	ldr	r3, [pc, #48]	; (8001778 <secondDigitHour+0x54>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff ff79 	bl	8001640 <isInRangeHours>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d002      	beq.n	800175a <secondDigitHour+0x36>
			hoursChange = 0;
 8001754:	4b08      	ldr	r3, [pc, #32]	; (8001778 <secondDigitHour+0x54>)
 8001756:	2200      	movs	r2, #0
 8001758:	701a      	strb	r2, [r3, #0]
		}

		setHours(hoursChange);
 800175a:	4b07      	ldr	r3, [pc, #28]	; (8001778 <secondDigitHour+0x54>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	4618      	mov	r0, r3
 8001760:	f001 f83a 	bl	80027d8 <setHours>
		flagMenu = MENU_TIME_LEVEL;
 8001764:	4b03      	ldr	r3, [pc, #12]	; (8001774 <secondDigitHour+0x50>)
 8001766:	2201      	movs	r2, #1
 8001768:	601a      	str	r2, [r3, #0]
	}
}
 800176a:	bf00      	nop
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	20000294 	.word	0x20000294
 8001778:	20000299 	.word	0x20000299

0800177c <firstDigitMinute>:

void firstDigitMinute(uint8_t forAdd){
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	71fb      	strb	r3, [r7, #7]
	if (flagMenu == MENU_TIME_MINUTE_LEVEL) {
 8001786:	4b08      	ldr	r3, [pc, #32]	; (80017a8 <firstDigitMinute+0x2c>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2b02      	cmp	r3, #2
 800178c:	d105      	bne.n	800179a <firstDigitMinute+0x1e>
		minutesChange = forAdd;
 800178e:	4a07      	ldr	r2, [pc, #28]	; (80017ac <firstDigitMinute+0x30>)
 8001790:	79fb      	ldrb	r3, [r7, #7]
 8001792:	7013      	strb	r3, [r2, #0]
		flagMenu = MENU_TIME_MINUTE_SECOND_DIGIT;
 8001794:	4b04      	ldr	r3, [pc, #16]	; (80017a8 <firstDigitMinute+0x2c>)
 8001796:	2204      	movs	r2, #4
 8001798:	601a      	str	r2, [r3, #0]

	}
}
 800179a:	bf00      	nop
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	20000294 	.word	0x20000294
 80017ac:	20000298 	.word	0x20000298

080017b0 <secondDigitMinute>:

void secondDigitMinute(uint8_t forAdd){
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	71fb      	strb	r3, [r7, #7]
	if (flagMenu == MENU_TIME_MINUTE_SECOND_DIGIT) {
 80017ba:	4b11      	ldr	r3, [pc, #68]	; (8001800 <secondDigitMinute+0x50>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2b04      	cmp	r3, #4
 80017c0:	d119      	bne.n	80017f6 <secondDigitMinute+0x46>
		minutesChange += forAdd;
 80017c2:	4b10      	ldr	r3, [pc, #64]	; (8001804 <secondDigitMinute+0x54>)
 80017c4:	781a      	ldrb	r2, [r3, #0]
 80017c6:	79fb      	ldrb	r3, [r7, #7]
 80017c8:	4413      	add	r3, r2
 80017ca:	b2da      	uxtb	r2, r3
 80017cc:	4b0d      	ldr	r3, [pc, #52]	; (8001804 <secondDigitMinute+0x54>)
 80017ce:	701a      	strb	r2, [r3, #0]

		if (isInRangeMinute(minutesChange)) {
 80017d0:	4b0c      	ldr	r3, [pc, #48]	; (8001804 <secondDigitMinute+0x54>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff ff44 	bl	8001662 <isInRangeMinute>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d002      	beq.n	80017e6 <secondDigitMinute+0x36>
			minutesChange = 0;
 80017e0:	4b08      	ldr	r3, [pc, #32]	; (8001804 <secondDigitMinute+0x54>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	701a      	strb	r2, [r3, #0]
		}
		setMinutes(minutesChange);
 80017e6:	4b07      	ldr	r3, [pc, #28]	; (8001804 <secondDigitMinute+0x54>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f000 ffc6 	bl	800277c <setMinutes>
		flagMenu = MENU_TIME_MINUTE_LEVEL;
 80017f0:	4b03      	ldr	r3, [pc, #12]	; (8001800 <secondDigitMinute+0x50>)
 80017f2:	2202      	movs	r2, #2
 80017f4:	601a      	str	r2, [r3, #0]
	}
}
 80017f6:	bf00      	nop
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20000294 	.word	0x20000294
 8001804:	20000298 	.word	0x20000298

08001808 <firstDigitMonth>:


// DATA


void firstDigitMonth(uint8_t forAdd){
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	71fb      	strb	r3, [r7, #7]
	if (flagMenu == MENU_DATE_LEVEL) {
 8001812:	4b08      	ldr	r3, [pc, #32]	; (8001834 <firstDigitMonth+0x2c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2b05      	cmp	r3, #5
 8001818:	d105      	bne.n	8001826 <firstDigitMonth+0x1e>
		monthChange = forAdd;
 800181a:	4a07      	ldr	r2, [pc, #28]	; (8001838 <firstDigitMonth+0x30>)
 800181c:	79fb      	ldrb	r3, [r7, #7]
 800181e:	7013      	strb	r3, [r2, #0]
		flagMenu = MENU_DATE_MONTH_SECOND_DIGIT;
 8001820:	4b04      	ldr	r3, [pc, #16]	; (8001834 <firstDigitMonth+0x2c>)
 8001822:	2206      	movs	r2, #6
 8001824:	601a      	str	r2, [r3, #0]
	}
}
 8001826:	bf00      	nop
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	20000294 	.word	0x20000294
 8001838:	2000029b 	.word	0x2000029b

0800183c <secondDigitMonth>:


void secondDigitMonth(uint8_t forAdd){
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	71fb      	strb	r3, [r7, #7]
	if (flagMenu == MENU_DATE_MONTH_SECOND_DIGIT) {
 8001846:	4b11      	ldr	r3, [pc, #68]	; (800188c <secondDigitMonth+0x50>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	2b06      	cmp	r3, #6
 800184c:	d119      	bne.n	8001882 <secondDigitMonth+0x46>

		monthChange += forAdd;
 800184e:	4b10      	ldr	r3, [pc, #64]	; (8001890 <secondDigitMonth+0x54>)
 8001850:	781a      	ldrb	r2, [r3, #0]
 8001852:	79fb      	ldrb	r3, [r7, #7]
 8001854:	4413      	add	r3, r2
 8001856:	b2da      	uxtb	r2, r3
 8001858:	4b0d      	ldr	r3, [pc, #52]	; (8001890 <secondDigitMonth+0x54>)
 800185a:	701a      	strb	r2, [r3, #0]

		if (isInRangeMonth(monthChange)) {
 800185c:	4b0c      	ldr	r3, [pc, #48]	; (8001890 <secondDigitMonth+0x54>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff ff0f 	bl	8001684 <isInRangeMonth>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d002      	beq.n	8001872 <secondDigitMonth+0x36>
			monthChange = 0;
 800186c:	4b08      	ldr	r3, [pc, #32]	; (8001890 <secondDigitMonth+0x54>)
 800186e:	2200      	movs	r2, #0
 8001870:	701a      	strb	r2, [r3, #0]
		}

		setMonth(monthChange);
 8001872:	4b07      	ldr	r3, [pc, #28]	; (8001890 <secondDigitMonth+0x54>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	4618      	mov	r0, r3
 8001878:	f000 ffdc 	bl	8002834 <setMonth>
		flagMenu = MENU_DATE_LEVEL;
 800187c:	4b03      	ldr	r3, [pc, #12]	; (800188c <secondDigitMonth+0x50>)
 800187e:	2205      	movs	r2, #5
 8001880:	601a      	str	r2, [r3, #0]
	}
}
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	20000294 	.word	0x20000294
 8001890:	2000029b 	.word	0x2000029b

08001894 <firstDigitDay>:


void firstDigitDay(uint8_t forAdd){
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	4603      	mov	r3, r0
 800189c:	71fb      	strb	r3, [r7, #7]
	if (flagMenu == MENU_DATE_DAY_FIRST_DIGIT) {
 800189e:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <firstDigitDay+0x2c>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2b07      	cmp	r3, #7
 80018a4:	d105      	bne.n	80018b2 <firstDigitDay+0x1e>
		dayChange = forAdd;
 80018a6:	4a07      	ldr	r2, [pc, #28]	; (80018c4 <firstDigitDay+0x30>)
 80018a8:	79fb      	ldrb	r3, [r7, #7]
 80018aa:	7013      	strb	r3, [r2, #0]
		flagMenu = MENU_DATE_DAY_SECOND_DIGIT;
 80018ac:	4b04      	ldr	r3, [pc, #16]	; (80018c0 <firstDigitDay+0x2c>)
 80018ae:	2208      	movs	r2, #8
 80018b0:	601a      	str	r2, [r3, #0]

	}
}
 80018b2:	bf00      	nop
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	20000294 	.word	0x20000294
 80018c4:	2000029a 	.word	0x2000029a

080018c8 <secondDigitDay>:


void secondDigitDay(uint8_t forAdd){
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	71fb      	strb	r3, [r7, #7]
	if (flagMenu == MENU_DATE_DAY_SECOND_DIGIT) {
 80018d2:	4b11      	ldr	r3, [pc, #68]	; (8001918 <secondDigitDay+0x50>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	2b08      	cmp	r3, #8
 80018d8:	d119      	bne.n	800190e <secondDigitDay+0x46>
		dayChange += forAdd;
 80018da:	4b10      	ldr	r3, [pc, #64]	; (800191c <secondDigitDay+0x54>)
 80018dc:	781a      	ldrb	r2, [r3, #0]
 80018de:	79fb      	ldrb	r3, [r7, #7]
 80018e0:	4413      	add	r3, r2
 80018e2:	b2da      	uxtb	r2, r3
 80018e4:	4b0d      	ldr	r3, [pc, #52]	; (800191c <secondDigitDay+0x54>)
 80018e6:	701a      	strb	r2, [r3, #0]

		if (isInRangeDay(dayChange)) {
 80018e8:	4b0c      	ldr	r3, [pc, #48]	; (800191c <secondDigitDay+0x54>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff feda 	bl	80016a6 <isInRangeDay>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d002      	beq.n	80018fe <secondDigitDay+0x36>
			dayChange = 0;
 80018f8:	4b08      	ldr	r3, [pc, #32]	; (800191c <secondDigitDay+0x54>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	701a      	strb	r2, [r3, #0]
		}
		setDay(dayChange);
 80018fe:	4b07      	ldr	r3, [pc, #28]	; (800191c <secondDigitDay+0x54>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	4618      	mov	r0, r3
 8001904:	f000 ffc2 	bl	800288c <setDay>
		flagMenu = MENU_DATE_DAY_FIRST_DIGIT;
 8001908:	4b03      	ldr	r3, [pc, #12]	; (8001918 <secondDigitDay+0x50>)
 800190a:	2207      	movs	r2, #7
 800190c:	601a      	str	r2, [r3, #0]
	}
}
 800190e:	bf00      	nop
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20000294 	.word	0x20000294
 800191c:	2000029a 	.word	0x2000029a

08001920 <menu>:
/*
 *
 * Obluga przycisku pilota
 *
 */
void menu(int value) {
 8001920:	b580      	push	{r7, lr}
 8001922:	b088      	sub	sp, #32
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]

	printf("code=%02x\n", value);
 8001928:	6879      	ldr	r1, [r7, #4]
 800192a:	48c8      	ldr	r0, [pc, #800]	; (8001c4c <menu+0x32c>)
 800192c:	f009 f88c 	bl	800aa48 <iprintf>

	RTC_TimeTypeDef time = {0};
 8001930:	f107 030c 	add.w	r3, r7, #12
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	60da      	str	r2, [r3, #12]
 800193e:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef date = {0};
 8001940:	2300      	movs	r3, #0
 8001942:	60bb      	str	r3, [r7, #8]

	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8001944:	f107 030c 	add.w	r3, r7, #12
 8001948:	2200      	movs	r2, #0
 800194a:	4619      	mov	r1, r3
 800194c:	48c0      	ldr	r0, [pc, #768]	; (8001c50 <menu+0x330>)
 800194e:	f005 fa19 	bl	8006d84 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8001952:	f107 0308 	add.w	r3, r7, #8
 8001956:	2200      	movs	r2, #0
 8001958:	4619      	mov	r1, r3
 800195a:	48bd      	ldr	r0, [pc, #756]	; (8001c50 <menu+0x330>)
 800195c:	f005 faf5 	bl	8006f4a <HAL_RTC_GetDate>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	3b07      	subs	r3, #7
 8001964:	2b57      	cmp	r3, #87	; 0x57
 8001966:	f200 825d 	bhi.w	8001e24 <menu+0x504>
 800196a:	a201      	add	r2, pc, #4	; (adr r2, 8001970 <menu+0x50>)
 800196c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001970:	08001b45 	.word	0x08001b45
 8001974:	08001c69 	.word	0x08001c69
 8001978:	08001b15 	.word	0x08001b15
 800197c:	08001e25 	.word	0x08001e25
 8001980:	08001e25 	.word	0x08001e25
 8001984:	08001b75 	.word	0x08001b75
 8001988:	08001ad1 	.word	0x08001ad1
 800198c:	08001e25 	.word	0x08001e25
 8001990:	08001e25 	.word	0x08001e25
 8001994:	08001e25 	.word	0x08001e25
 8001998:	08001e25 	.word	0x08001e25
 800199c:	08001e25 	.word	0x08001e25
 80019a0:	08001e25 	.word	0x08001e25
 80019a4:	08001e25 	.word	0x08001e25
 80019a8:	08001b09 	.word	0x08001b09
 80019ac:	08001d49 	.word	0x08001d49
 80019b0:	08001e25 	.word	0x08001e25
 80019b4:	08001bc3 	.word	0x08001bc3
 80019b8:	08001ad1 	.word	0x08001ad1
 80019bc:	08001e25 	.word	0x08001e25
 80019c0:	08001e25 	.word	0x08001e25
 80019c4:	08001ca5 	.word	0x08001ca5
 80019c8:	08001e25 	.word	0x08001e25
 80019cc:	08001e25 	.word	0x08001e25
 80019d0:	08001e25 	.word	0x08001e25
 80019d4:	08001e25 	.word	0x08001e25
 80019d8:	08001e25 	.word	0x08001e25
 80019dc:	08001e25 	.word	0x08001e25
 80019e0:	08001e25 	.word	0x08001e25
 80019e4:	08001e25 	.word	0x08001e25
 80019e8:	08001e25 	.word	0x08001e25
 80019ec:	08001e25 	.word	0x08001e25
 80019f0:	08001e25 	.word	0x08001e25
 80019f4:	08001e25 	.word	0x08001e25
 80019f8:	08001e25 	.word	0x08001e25
 80019fc:	08001e25 	.word	0x08001e25
 8001a00:	08001e25 	.word	0x08001e25
 8001a04:	08001e25 	.word	0x08001e25
 8001a08:	08001e25 	.word	0x08001e25
 8001a0c:	08001e25 	.word	0x08001e25
 8001a10:	08001e25 	.word	0x08001e25
 8001a14:	08001e25 	.word	0x08001e25
 8001a18:	08001e25 	.word	0x08001e25
 8001a1c:	08001e25 	.word	0x08001e25
 8001a20:	08001e25 	.word	0x08001e25
 8001a24:	08001e25 	.word	0x08001e25
 8001a28:	08001e25 	.word	0x08001e25
 8001a2c:	08001e25 	.word	0x08001e25
 8001a30:	08001e25 	.word	0x08001e25
 8001a34:	08001e25 	.word	0x08001e25
 8001a38:	08001e25 	.word	0x08001e25
 8001a3c:	08001e25 	.word	0x08001e25
 8001a40:	08001e25 	.word	0x08001e25
 8001a44:	08001e25 	.word	0x08001e25
 8001a48:	08001e25 	.word	0x08001e25
 8001a4c:	08001e25 	.word	0x08001e25
 8001a50:	08001e25 	.word	0x08001e25
 8001a54:	08001e1b 	.word	0x08001e1b
 8001a58:	08001e25 	.word	0x08001e25
 8001a5c:	08001cfb 	.word	0x08001cfb
 8001a60:	08001e25 	.word	0x08001e25
 8001a64:	08001e25 	.word	0x08001e25
 8001a68:	08001e25 	.word	0x08001e25
 8001a6c:	08001e25 	.word	0x08001e25
 8001a70:	08001ad9 	.word	0x08001ad9
 8001a74:	08001e25 	.word	0x08001e25
 8001a78:	08001e25 	.word	0x08001e25
 8001a7c:	08001d2f 	.word	0x08001d2f
 8001a80:	08001e25 	.word	0x08001e25
 8001a84:	08001e25 	.word	0x08001e25
 8001a88:	08001e25 	.word	0x08001e25
 8001a8c:	08001e25 	.word	0x08001e25
 8001a90:	08001e25 	.word	0x08001e25
 8001a94:	08001e25 	.word	0x08001e25
 8001a98:	08001e25 	.word	0x08001e25
 8001a9c:	08001d15 	.word	0x08001d15
 8001aa0:	08001e25 	.word	0x08001e25
 8001aa4:	08001e25 	.word	0x08001e25
 8001aa8:	08001e25 	.word	0x08001e25
 8001aac:	08001e25 	.word	0x08001e25
 8001ab0:	08001e25 	.word	0x08001e25
 8001ab4:	08001e25 	.word	0x08001e25
 8001ab8:	08001e25 	.word	0x08001e25
 8001abc:	08001ce1 	.word	0x08001ce1
 8001ac0:	08001e25 	.word	0x08001e25
 8001ac4:	08001e25 	.word	0x08001e25
 8001ac8:	08001e25 	.word	0x08001e25
 8001acc:	08001c0b 	.word	0x08001c0b
//		time.Hours = hoursAdd;
//		time.Minutes = minutesAdd;
//		HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN);
//		break;
	case IR_CODE_CANCEL:
		flagColor = MENU_COLOR_LEVEL;
 8001ad0:	4b60      	ldr	r3, [pc, #384]	; (8001c54 <menu+0x334>)
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	601a      	str	r2, [r3, #0]
		break;
 8001ad6:	e1a5      	b.n	8001e24 <menu+0x504>



	case IR_CODE_MENU:
		if(flagMenu==MENU_TIME_LEVEL || flagMenu==MENU_TIME_MINUTE_LEVEL || flagMenu==MENU_TIME_MINUTE_SECOND_DIGIT){
 8001ad8:	4b5f      	ldr	r3, [pc, #380]	; (8001c58 <menu+0x338>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d007      	beq.n	8001af0 <menu+0x1d0>
 8001ae0:	4b5d      	ldr	r3, [pc, #372]	; (8001c58 <menu+0x338>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d003      	beq.n	8001af0 <menu+0x1d0>
 8001ae8:	4b5b      	ldr	r3, [pc, #364]	; (8001c58 <menu+0x338>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2b04      	cmp	r3, #4
 8001aee:	d105      	bne.n	8001afc <menu+0x1dc>
			mixColor();
 8001af0:	f000 fa8c 	bl	800200c <mixColor>
			flagMenu=MENU_DATE_DAY_FIRST_DIGIT;
 8001af4:	4b58      	ldr	r3, [pc, #352]	; (8001c58 <menu+0x338>)
 8001af6:	2207      	movs	r2, #7
 8001af8:	601a      	str	r2, [r3, #0]
		}else{
			backToColor();
			flagMenu=MENU_TIME_LEVEL;
			}

		break;
 8001afa:	e193      	b.n	8001e24 <menu+0x504>
			backToColor();
 8001afc:	f000 faa0 	bl	8002040 <backToColor>
			flagMenu=MENU_TIME_LEVEL;
 8001b00:	4b55      	ldr	r3, [pc, #340]	; (8001c58 <menu+0x338>)
 8001b02:	2201      	movs	r2, #1
 8001b04:	601a      	str	r2, [r3, #0]
		break;
 8001b06:	e18d      	b.n	8001e24 <menu+0x504>


	case IR_CODE_PLAY:
		backToColor();
 8001b08:	f000 fa9a 	bl	8002040 <backToColor>
		flagMenu=MENU_OFF;
 8001b0c:	4b52      	ldr	r3, [pc, #328]	; (8001c58 <menu+0x338>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]
		break;
 8001b12:	e187      	b.n	8001e24 <menu+0x504>


	case IR_CODE_FORWARD:
		if (flagMenu == MENU_TIME_LEVEL
 8001b14:	4b50      	ldr	r3, [pc, #320]	; (8001c58 <menu+0x338>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d003      	beq.n	8001b24 <menu+0x204>
				|| flagMenu == MENU_TIME_HOUR_SECOND_DIGIT) {
 8001b1c:	4b4e      	ldr	r3, [pc, #312]	; (8001c58 <menu+0x338>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2b03      	cmp	r3, #3
 8001b22:	d102      	bne.n	8001b2a <menu+0x20a>
			flagMenu = MENU_TIME_MINUTE_LEVEL;
 8001b24:	4b4c      	ldr	r3, [pc, #304]	; (8001c58 <menu+0x338>)
 8001b26:	2202      	movs	r2, #2
 8001b28:	601a      	str	r2, [r3, #0]
		}
		if (flagMenu == MENU_DATE_DAY_FIRST_DIGIT
 8001b2a:	4b4b      	ldr	r3, [pc, #300]	; (8001c58 <menu+0x338>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2b07      	cmp	r3, #7
 8001b30:	d004      	beq.n	8001b3c <menu+0x21c>
				|| flagMenu == MENU_DATE_DAY_SECOND_DIGIT) {
 8001b32:	4b49      	ldr	r3, [pc, #292]	; (8001c58 <menu+0x338>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2b08      	cmp	r3, #8
 8001b38:	f040 8171 	bne.w	8001e1e <menu+0x4fe>
			flagMenu = MENU_DATE_LEVEL;
 8001b3c:	4b46      	ldr	r3, [pc, #280]	; (8001c58 <menu+0x338>)
 8001b3e:	2205      	movs	r2, #5
 8001b40:	601a      	str	r2, [r3, #0]
		}
		break;
 8001b42:	e16c      	b.n	8001e1e <menu+0x4fe>

	case IR_CODE_REWIND:
		if (flagMenu == MENU_TIME_MINUTE_LEVEL
 8001b44:	4b44      	ldr	r3, [pc, #272]	; (8001c58 <menu+0x338>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d003      	beq.n	8001b54 <menu+0x234>
				|| flagMenu == MENU_TIME_MINUTE_SECOND_DIGIT) {
 8001b4c:	4b42      	ldr	r3, [pc, #264]	; (8001c58 <menu+0x338>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2b04      	cmp	r3, #4
 8001b52:	d102      	bne.n	8001b5a <menu+0x23a>
			flagMenu = MENU_TIME_LEVEL;
 8001b54:	4b40      	ldr	r3, [pc, #256]	; (8001c58 <menu+0x338>)
 8001b56:	2201      	movs	r2, #1
 8001b58:	601a      	str	r2, [r3, #0]
		}
		if (flagMenu == MENU_DATE_LEVEL
 8001b5a:	4b3f      	ldr	r3, [pc, #252]	; (8001c58 <menu+0x338>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2b05      	cmp	r3, #5
 8001b60:	d004      	beq.n	8001b6c <menu+0x24c>
				|| flagMenu == MENU_DATE_MONTH_SECOND_DIGIT) {
 8001b62:	4b3d      	ldr	r3, [pc, #244]	; (8001c58 <menu+0x338>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2b06      	cmp	r3, #6
 8001b68:	f040 815b 	bne.w	8001e22 <menu+0x502>
			flagMenu = MENU_DATE_DAY_FIRST_DIGIT;
 8001b6c:	4b3a      	ldr	r3, [pc, #232]	; (8001c58 <menu+0x338>)
 8001b6e:	2207      	movs	r2, #7
 8001b70:	601a      	str	r2, [r3, #0]
		}
		break;
 8001b72:	e156      	b.n	8001e22 <menu+0x502>



	case IR_CODE_1:
		// COLOR
		colorMenu(BLUE);
 8001b74:	4b39      	ldr	r3, [pc, #228]	; (8001c5c <menu+0x33c>)
 8001b76:	781a      	ldrb	r2, [r3, #0]
 8001b78:	7859      	ldrb	r1, [r3, #1]
 8001b7a:	0209      	lsls	r1, r1, #8
 8001b7c:	430a      	orrs	r2, r1
 8001b7e:	789b      	ldrb	r3, [r3, #2]
 8001b80:	041b      	lsls	r3, r3, #16
 8001b82:	431a      	orrs	r2, r3
 8001b84:	2300      	movs	r3, #0
 8001b86:	f362 0317 	bfi	r3, r2, #0, #24
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7ff fd9c 	bl	80016c8 <colorMenu>

		// FUNCTIONS MUST BE IN THIS ORDER

		// SECOND DIGIT_HOUR
		secondDigitHour(1);
 8001b90:	2001      	movs	r0, #1
 8001b92:	f7ff fdc7 	bl	8001724 <secondDigitHour>

		// FIRST DIGIT HOUR

		firstDigitHour(10);
 8001b96:	200a      	movs	r0, #10
 8001b98:	f7ff fdaa 	bl	80016f0 <firstDigitHour>

		// SECOND DIGIT MINUTE
		secondDigitMinute(1);
 8001b9c:	2001      	movs	r0, #1
 8001b9e:	f7ff fe07 	bl	80017b0 <secondDigitMinute>

		// FIRST DIGIT MINUTE
		firstDigitMinute(10);
 8001ba2:	200a      	movs	r0, #10
 8001ba4:	f7ff fdea 	bl	800177c <firstDigitMinute>



		// SECOND DIGIT MONTH
		secondDigitMonth(1);
 8001ba8:	2001      	movs	r0, #1
 8001baa:	f7ff fe47 	bl	800183c <secondDigitMonth>
		// FIRST DIGIT MONTH
		firstDigitMonth(10);
 8001bae:	200a      	movs	r0, #10
 8001bb0:	f7ff fe2a 	bl	8001808 <firstDigitMonth>
		// SECOND DIGIT DAY
		secondDigitDay(1);
 8001bb4:	2001      	movs	r0, #1
 8001bb6:	f7ff fe87 	bl	80018c8 <secondDigitDay>
		// FIRST DIGIT DAY
		firstDigitDay(10);
 8001bba:	200a      	movs	r0, #10
 8001bbc:	f7ff fe6a 	bl	8001894 <firstDigitDay>


		break;
 8001bc0:	e130      	b.n	8001e24 <menu+0x504>


	case IR_CODE_2:
		//COLOR
		colorMenu(RED);
 8001bc2:	4b27      	ldr	r3, [pc, #156]	; (8001c60 <menu+0x340>)
 8001bc4:	781a      	ldrb	r2, [r3, #0]
 8001bc6:	7859      	ldrb	r1, [r3, #1]
 8001bc8:	0209      	lsls	r1, r1, #8
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	789b      	ldrb	r3, [r3, #2]
 8001bce:	041b      	lsls	r3, r3, #16
 8001bd0:	431a      	orrs	r2, r3
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	f362 0317 	bfi	r3, r2, #0, #24
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff fd75 	bl	80016c8 <colorMenu>

		// FUNCTIONS MUST BE IN THIS ORDER

		// SECOND DIGIT_HOUR
		secondDigitHour(2);
 8001bde:	2002      	movs	r0, #2
 8001be0:	f7ff fda0 	bl	8001724 <secondDigitHour>

		// FIRST DIGIT HOUR

		firstDigitHour(20);
 8001be4:	2014      	movs	r0, #20
 8001be6:	f7ff fd83 	bl	80016f0 <firstDigitHour>

		// SECOND DIGIT MINUTE
		secondDigitMinute(2);
 8001bea:	2002      	movs	r0, #2
 8001bec:	f7ff fde0 	bl	80017b0 <secondDigitMinute>

		// FIRST DIGIT MINUTE
		firstDigitMinute(20);
 8001bf0:	2014      	movs	r0, #20
 8001bf2:	f7ff fdc3 	bl	800177c <firstDigitMinute>


		// SECOND DIGIT MONTH
		secondDigitMonth(2);
 8001bf6:	2002      	movs	r0, #2
 8001bf8:	f7ff fe20 	bl	800183c <secondDigitMonth>
		// FIRST DIGIT MONTH
		// NULL
		// SECOND DIGIT DAY
		secondDigitDay(2);
 8001bfc:	2002      	movs	r0, #2
 8001bfe:	f7ff fe63 	bl	80018c8 <secondDigitDay>
		// FIRST DIGIT DAY
		firstDigitDay(20);
 8001c02:	2014      	movs	r0, #20
 8001c04:	f7ff fe46 	bl	8001894 <firstDigitDay>

		break;
 8001c08:	e10c      	b.n	8001e24 <menu+0x504>


	case IR_CODE_3:
		// COLOR
		colorMenu(GREEN);
 8001c0a:	4b16      	ldr	r3, [pc, #88]	; (8001c64 <menu+0x344>)
 8001c0c:	781a      	ldrb	r2, [r3, #0]
 8001c0e:	7859      	ldrb	r1, [r3, #1]
 8001c10:	0209      	lsls	r1, r1, #8
 8001c12:	430a      	orrs	r2, r1
 8001c14:	789b      	ldrb	r3, [r3, #2]
 8001c16:	041b      	lsls	r3, r3, #16
 8001c18:	431a      	orrs	r2, r3
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	f362 0317 	bfi	r3, r2, #0, #24
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff fd51 	bl	80016c8 <colorMenu>

		// FUNCTIONS MUST BE IN THIS ORDER

		// SECOND DIGIT_HOUR
		secondDigitHour(3);
 8001c26:	2003      	movs	r0, #3
 8001c28:	f7ff fd7c 	bl	8001724 <secondDigitHour>
		// FIRST DIGIT HOUR

		// NULL

		// SECOND DIGIT MINUTE
		secondDigitMinute(3);
 8001c2c:	2003      	movs	r0, #3
 8001c2e:	f7ff fdbf 	bl	80017b0 <secondDigitMinute>

		// FIRST DIGIT MINUTE
		firstDigitMinute(30);
 8001c32:	201e      	movs	r0, #30
 8001c34:	f7ff fda2 	bl	800177c <firstDigitMinute>


		// SECOND DIGIT MONTH
		secondDigitMonth(3);
 8001c38:	2003      	movs	r0, #3
 8001c3a:	f7ff fdff 	bl	800183c <secondDigitMonth>
		// FIRST DIGIT MONTH
		// NULL
		// SECOND DIGIT DAY
		secondDigitDay(3);
 8001c3e:	2003      	movs	r0, #3
 8001c40:	f7ff fe42 	bl	80018c8 <secondDigitDay>
		// FIRST DIGIT DAY
		firstDigitDay(30);
 8001c44:	201e      	movs	r0, #30
 8001c46:	f7ff fe25 	bl	8001894 <firstDigitDay>

		break;
 8001c4a:	e0eb      	b.n	8001e24 <menu+0x504>
 8001c4c:	0800cf78 	.word	0x0800cf78
 8001c50:	200008e8 	.word	0x200008e8
 8001c54:	20000290 	.word	0x20000290
 8001c58:	20000294 	.word	0x20000294
 8001c5c:	20000078 	.word	0x20000078
 8001c60:	20000070 	.word	0x20000070
 8001c64:	20000074 	.word	0x20000074


	case IR_CODE_4:

		//COLOR
		colorMenu(YELLOW);
 8001c68:	4b70      	ldr	r3, [pc, #448]	; (8001e2c <menu+0x50c>)
 8001c6a:	781a      	ldrb	r2, [r3, #0]
 8001c6c:	7859      	ldrb	r1, [r3, #1]
 8001c6e:	0209      	lsls	r1, r1, #8
 8001c70:	430a      	orrs	r2, r1
 8001c72:	789b      	ldrb	r3, [r3, #2]
 8001c74:	041b      	lsls	r3, r3, #16
 8001c76:	431a      	orrs	r2, r3
 8001c78:	2300      	movs	r3, #0
 8001c7a:	f362 0317 	bfi	r3, r2, #0, #24
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff fd22 	bl	80016c8 <colorMenu>

		// FUNCTIONS MUST BE IN THIS ORDER

		// SECOND DIGIT_HOUR
		secondDigitHour(4);
 8001c84:	2004      	movs	r0, #4
 8001c86:	f7ff fd4d 	bl	8001724 <secondDigitHour>
		// FIRST DIGIT HOUR

		// NULL

		// SECOND DIGIT MINUTE
		secondDigitMinute(4);
 8001c8a:	2004      	movs	r0, #4
 8001c8c:	f7ff fd90 	bl	80017b0 <secondDigitMinute>

		// FIRST DIGIT MINUTE
		firstDigitMinute(40);
 8001c90:	2028      	movs	r0, #40	; 0x28
 8001c92:	f7ff fd73 	bl	800177c <firstDigitMinute>

		// SECOND DIGIT MONTH
		secondDigitMonth(4);
 8001c96:	2004      	movs	r0, #4
 8001c98:	f7ff fdd0 	bl	800183c <secondDigitMonth>
		// FIRST DIGIT MONTH
		// NULL
		// SECOND DIGIT DAY
		secondDigitDay(4);
 8001c9c:	2004      	movs	r0, #4
 8001c9e:	f7ff fe13 	bl	80018c8 <secondDigitDay>
		// FIRST DIGIT DAY
		// NULL


		break;
 8001ca2:	e0bf      	b.n	8001e24 <menu+0x504>


	case IR_CODE_5:
		//COLOR
		colorMenu(PINK);
 8001ca4:	4b62      	ldr	r3, [pc, #392]	; (8001e30 <menu+0x510>)
 8001ca6:	781a      	ldrb	r2, [r3, #0]
 8001ca8:	7859      	ldrb	r1, [r3, #1]
 8001caa:	0209      	lsls	r1, r1, #8
 8001cac:	430a      	orrs	r2, r1
 8001cae:	789b      	ldrb	r3, [r3, #2]
 8001cb0:	041b      	lsls	r3, r3, #16
 8001cb2:	431a      	orrs	r2, r3
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	f362 0317 	bfi	r3, r2, #0, #24
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff fd04 	bl	80016c8 <colorMenu>

		// FUNCTIONS MUST BE IN THIS ORDER

		// SECOND DIGIT_HOUR
		secondDigitHour(5);
 8001cc0:	2005      	movs	r0, #5
 8001cc2:	f7ff fd2f 	bl	8001724 <secondDigitHour>
		// FIRST DIGIT HOUR

		// NULL

		// SECOND DIGIT MINUTE
		secondDigitMinute(5);
 8001cc6:	2005      	movs	r0, #5
 8001cc8:	f7ff fd72 	bl	80017b0 <secondDigitMinute>

		// FIRST DIGIT MINUTE
		firstDigitMinute(50);
 8001ccc:	2032      	movs	r0, #50	; 0x32
 8001cce:	f7ff fd55 	bl	800177c <firstDigitMinute>


		// SECOND DIGIT MONTH
		secondDigitMonth(5);
 8001cd2:	2005      	movs	r0, #5
 8001cd4:	f7ff fdb2 	bl	800183c <secondDigitMonth>
		// FIRST DIGIT MONTH
		// NULL
		// SECOND DIGIT DAY
		secondDigitDay(5);
 8001cd8:	2005      	movs	r0, #5
 8001cda:	f7ff fdf5 	bl	80018c8 <secondDigitDay>
		// FIRST DIGIT DAY
		// NULL


		break;
 8001cde:	e0a1      	b.n	8001e24 <menu+0x504>
		//COLOR

		// FUNCTIONS MUST BE IN THIS ORDER

		// SECOND DIGIT_HOUR
		secondDigitHour(6);
 8001ce0:	2006      	movs	r0, #6
 8001ce2:	f7ff fd1f 	bl	8001724 <secondDigitHour>
		// FIRST DIGIT HOUR

		// NULL

		// SECOND DIGIT MINUTE
		secondDigitMinute(6);
 8001ce6:	2006      	movs	r0, #6
 8001ce8:	f7ff fd62 	bl	80017b0 <secondDigitMinute>

		// NULL


		// SECOND DIGIT MONTH
		secondDigitMonth(6);
 8001cec:	2006      	movs	r0, #6
 8001cee:	f7ff fda5 	bl	800183c <secondDigitMonth>
		// FIRST DIGIT MONTH
		// NULL
		// SECOND DIGIT DAY
		secondDigitDay(6);
 8001cf2:	2006      	movs	r0, #6
 8001cf4:	f7ff fde8 	bl	80018c8 <secondDigitDay>
		// FIRST DIGIT DAY
		// NULL

		break;
 8001cf8:	e094      	b.n	8001e24 <menu+0x504>
		//COLOR

		// FUNCTIONS MUST BE IN THIS ORDER

		// SECOND DIGIT_HOUR
		secondDigitHour(7);
 8001cfa:	2007      	movs	r0, #7
 8001cfc:	f7ff fd12 	bl	8001724 <secondDigitHour>
		// FIRST DIGIT HOUR

		// NULL

		// SECOND DIGIT MINUTE
		secondDigitMinute(7);
 8001d00:	2007      	movs	r0, #7
 8001d02:	f7ff fd55 	bl	80017b0 <secondDigitMinute>
		// FIRST DIGIT MINUTE

		// NULL

		// SECOND DIGIT MONTH
		secondDigitMonth(7);
 8001d06:	2007      	movs	r0, #7
 8001d08:	f7ff fd98 	bl	800183c <secondDigitMonth>
		// FIRST DIGIT MONTH
		// NULL
		// SECOND DIGIT DAY
		secondDigitDay(7);
 8001d0c:	2007      	movs	r0, #7
 8001d0e:	f7ff fddb 	bl	80018c8 <secondDigitDay>
		// FIRST DIGIT DAY
		// NULL

		break;
 8001d12:	e087      	b.n	8001e24 <menu+0x504>
		//COLOR

		// FUNCTIONS MUST BE IN THIS ORDER

		// SECOND DIGIT_HOUR
		secondDigitHour(8);
 8001d14:	2008      	movs	r0, #8
 8001d16:	f7ff fd05 	bl	8001724 <secondDigitHour>
		// FIRST DIGIT HOUR

		// NULL

		// SECOND DIGIT MINUTE
		secondDigitMinute(8);
 8001d1a:	2008      	movs	r0, #8
 8001d1c:	f7ff fd48 	bl	80017b0 <secondDigitMinute>

		// NULL


		// SECOND DIGIT MONTH
		secondDigitMonth(8);
 8001d20:	2008      	movs	r0, #8
 8001d22:	f7ff fd8b 	bl	800183c <secondDigitMonth>
		// FIRST DIGIT MONTH
		// NULL
		// SECOND DIGIT DAY
		secondDigitDay(8);
 8001d26:	2008      	movs	r0, #8
 8001d28:	f7ff fdce 	bl	80018c8 <secondDigitDay>
		// FIRST DIGIT DAY
		// NULL

		break;
 8001d2c:	e07a      	b.n	8001e24 <menu+0x504>
		//COLOR

		// FUNCTIONS MUST BE IN THIS ORDER

		// SECOND DIGIT_HOUR
		secondDigitHour(9);
 8001d2e:	2009      	movs	r0, #9
 8001d30:	f7ff fcf8 	bl	8001724 <secondDigitHour>
		// FIRST DIGIT HOUR

		// NULL

		// SECOND DIGIT MINUTE
		secondDigitMinute(9);
 8001d34:	2009      	movs	r0, #9
 8001d36:	f7ff fd3b 	bl	80017b0 <secondDigitMinute>

		// NULL


		// SECOND DIGIT MONTH
		secondDigitMonth(9);
 8001d3a:	2009      	movs	r0, #9
 8001d3c:	f7ff fd7e 	bl	800183c <secondDigitMonth>
		// FIRST DIGIT MONTH
		// NULL
		// SECOND DIGIT DAY
		secondDigitDay(9);
 8001d40:	2009      	movs	r0, #9
 8001d42:	f7ff fdc1 	bl	80018c8 <secondDigitDay>
		// FIRST DIGIT DAY
		// NULL

		break;
 8001d46:	e06d      	b.n	8001e24 <menu+0x504>

		// NULL

		// SECOND DIGIT_HOUR

		if (flagMenu == MENU_TIME_HOUR_SECOND_DIGIT) {
 8001d48:	4b3a      	ldr	r3, [pc, #232]	; (8001e34 <menu+0x514>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2b03      	cmp	r3, #3
 8001d4e:	d112      	bne.n	8001d76 <menu+0x456>

			if (isInRangeHours(hoursChange)) {
 8001d50:	4b39      	ldr	r3, [pc, #228]	; (8001e38 <menu+0x518>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff fc73 	bl	8001640 <isInRangeHours>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d002      	beq.n	8001d66 <menu+0x446>
				hoursChange = 0;
 8001d60:	4b35      	ldr	r3, [pc, #212]	; (8001e38 <menu+0x518>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	701a      	strb	r2, [r3, #0]
			}

			setHours(hoursChange);
 8001d66:	4b34      	ldr	r3, [pc, #208]	; (8001e38 <menu+0x518>)
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f000 fd34 	bl	80027d8 <setHours>
			flagMenu = MENU_TIME_LEVEL;
 8001d70:	4b30      	ldr	r3, [pc, #192]	; (8001e34 <menu+0x514>)
 8001d72:	2201      	movs	r2, #1
 8001d74:	601a      	str	r2, [r3, #0]



		// FIRST DIGIT HOUR

		firstDigitHour(0);
 8001d76:	2000      	movs	r0, #0
 8001d78:	f7ff fcba 	bl	80016f0 <firstDigitHour>

		// SECOND DIGIT MINUTE
		if (flagMenu == MENU_TIME_MINUTE_SECOND_DIGIT) {
 8001d7c:	4b2d      	ldr	r3, [pc, #180]	; (8001e34 <menu+0x514>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2b04      	cmp	r3, #4
 8001d82:	d112      	bne.n	8001daa <menu+0x48a>

			if (isInRangeMinute(minutesChange)) {
 8001d84:	4b2d      	ldr	r3, [pc, #180]	; (8001e3c <menu+0x51c>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff fc6a 	bl	8001662 <isInRangeMinute>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d002      	beq.n	8001d9a <menu+0x47a>
				minutesChange = 0;
 8001d94:	4b29      	ldr	r3, [pc, #164]	; (8001e3c <menu+0x51c>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	701a      	strb	r2, [r3, #0]
			}
			setMinutes(minutesChange);
 8001d9a:	4b28      	ldr	r3, [pc, #160]	; (8001e3c <menu+0x51c>)
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f000 fcec 	bl	800277c <setMinutes>
			flagMenu = MENU_TIME_MINUTE_LEVEL;
 8001da4:	4b23      	ldr	r3, [pc, #140]	; (8001e34 <menu+0x514>)
 8001da6:	2202      	movs	r2, #2
 8001da8:	601a      	str	r2, [r3, #0]



		// FIRST DIGIT MINUTE

		firstDigitMinute(0);
 8001daa:	2000      	movs	r0, #0
 8001dac:	f7ff fce6 	bl	800177c <firstDigitMinute>



		// SECOND DIGIT MONTH

				if (flagMenu == MENU_DATE_MONTH_SECOND_DIGIT) {
 8001db0:	4b20      	ldr	r3, [pc, #128]	; (8001e34 <menu+0x514>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2b06      	cmp	r3, #6
 8001db6:	d112      	bne.n	8001dde <menu+0x4be>

					if (isInRangeMonth(monthChange)) {
 8001db8:	4b21      	ldr	r3, [pc, #132]	; (8001e40 <menu+0x520>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff fc61 	bl	8001684 <isInRangeMonth>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d002      	beq.n	8001dce <menu+0x4ae>
						monthChange = 0;
 8001dc8:	4b1d      	ldr	r3, [pc, #116]	; (8001e40 <menu+0x520>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	701a      	strb	r2, [r3, #0]
					}

					setMonth(monthChange);
 8001dce:	4b1c      	ldr	r3, [pc, #112]	; (8001e40 <menu+0x520>)
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f000 fd2e 	bl	8002834 <setMonth>
					flagMenu = MENU_DATE_LEVEL;
 8001dd8:	4b16      	ldr	r3, [pc, #88]	; (8001e34 <menu+0x514>)
 8001dda:	2205      	movs	r2, #5
 8001ddc:	601a      	str	r2, [r3, #0]



				// FIRST DIGIT MONTH

				firstDigitMonth(0);
 8001dde:	2000      	movs	r0, #0
 8001de0:	f7ff fd12 	bl	8001808 <firstDigitMonth>

				// SECOND DIGIT DAY
				if (flagMenu == MENU_DATE_DAY_SECOND_DIGIT) {
 8001de4:	4b13      	ldr	r3, [pc, #76]	; (8001e34 <menu+0x514>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2b08      	cmp	r3, #8
 8001dea:	d112      	bne.n	8001e12 <menu+0x4f2>

					if (isInRangeDay(dayChange)) {
 8001dec:	4b15      	ldr	r3, [pc, #84]	; (8001e44 <menu+0x524>)
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff fc58 	bl	80016a6 <isInRangeDay>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d002      	beq.n	8001e02 <menu+0x4e2>
						dayChange=0;
 8001dfc:	4b11      	ldr	r3, [pc, #68]	; (8001e44 <menu+0x524>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	701a      	strb	r2, [r3, #0]
					}
					setDay(dayChange);
 8001e02:	4b10      	ldr	r3, [pc, #64]	; (8001e44 <menu+0x524>)
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f000 fd40 	bl	800288c <setDay>
					flagMenu = MENU_DATE_DAY_FIRST_DIGIT;
 8001e0c:	4b09      	ldr	r3, [pc, #36]	; (8001e34 <menu+0x514>)
 8001e0e:	2207      	movs	r2, #7
 8001e10:	601a      	str	r2, [r3, #0]



				// FIRST DIGIT DAY

				firstDigitDay(0);
 8001e12:	2000      	movs	r0, #0
 8001e14:	f7ff fd3e 	bl	8001894 <firstDigitDay>





		break;
 8001e18:	e004      	b.n	8001e24 <menu+0x504>
		break;
 8001e1a:	bf00      	nop
 8001e1c:	e002      	b.n	8001e24 <menu+0x504>
		break;
 8001e1e:	bf00      	nop
 8001e20:	e000      	b.n	8001e24 <menu+0x504>
		break;
 8001e22:	bf00      	nop

	}


}
 8001e24:	bf00      	nop
 8001e26:	3720      	adds	r7, #32
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	2000007c 	.word	0x2000007c
 8001e30:	20000080 	.word	0x20000080
 8001e34:	20000294 	.word	0x20000294
 8001e38:	20000299 	.word	0x20000299
 8001e3c:	20000298 	.word	0x20000298
 8001e40:	2000029b 	.word	0x2000029b
 8001e44:	2000029a 	.word	0x2000029a

08001e48 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b092      	sub	sp, #72	; 0x48
 8001e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001e4e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e52:	2200      	movs	r2, #0
 8001e54:	601a      	str	r2, [r3, #0]
 8001e56:	605a      	str	r2, [r3, #4]
 8001e58:	609a      	str	r2, [r3, #8]
 8001e5a:	60da      	str	r2, [r3, #12]
 8001e5c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001e5e:	2300      	movs	r3, #0
 8001e60:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 8001e62:	1d3b      	adds	r3, r7, #4
 8001e64:	222c      	movs	r2, #44	; 0x2c
 8001e66:	2100      	movs	r1, #0
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f008 f97b 	bl	800a164 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001e6e:	4b3c      	ldr	r3, [pc, #240]	; (8001f60 <MX_RTC_Init+0x118>)
 8001e70:	4a3c      	ldr	r2, [pc, #240]	; (8001f64 <MX_RTC_Init+0x11c>)
 8001e72:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001e74:	4b3a      	ldr	r3, [pc, #232]	; (8001f60 <MX_RTC_Init+0x118>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001e7a:	4b39      	ldr	r3, [pc, #228]	; (8001f60 <MX_RTC_Init+0x118>)
 8001e7c:	227f      	movs	r2, #127	; 0x7f
 8001e7e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001e80:	4b37      	ldr	r3, [pc, #220]	; (8001f60 <MX_RTC_Init+0x118>)
 8001e82:	22ff      	movs	r2, #255	; 0xff
 8001e84:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001e86:	4b36      	ldr	r3, [pc, #216]	; (8001f60 <MX_RTC_Init+0x118>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001e8c:	4b34      	ldr	r3, [pc, #208]	; (8001f60 <MX_RTC_Init+0x118>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001e92:	4b33      	ldr	r3, [pc, #204]	; (8001f60 <MX_RTC_Init+0x118>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001e98:	4b31      	ldr	r3, [pc, #196]	; (8001f60 <MX_RTC_Init+0x118>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001e9e:	4830      	ldr	r0, [pc, #192]	; (8001f60 <MX_RTC_Init+0x118>)
 8001ea0:	f004 fe58 	bl	8006b54 <HAL_RTC_Init>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001eaa:	f7ff fbb7 	bl	800161c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 00;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 00;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 00;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001ec8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ecc:	2200      	movs	r2, #0
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4823      	ldr	r0, [pc, #140]	; (8001f60 <MX_RTC_Init+0x118>)
 8001ed2:	f004 feba 	bl	8006c4a <HAL_RTC_SetTime>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8001edc:	f7ff fb9e 	bl	800161c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 8001ee0:	2307      	movs	r3, #7
 8001ee2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 00;
 8001eec:	2300      	movs	r3, #0
 8001eee:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 00;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001ef8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001efc:	2200      	movs	r2, #0
 8001efe:	4619      	mov	r1, r3
 8001f00:	4817      	ldr	r0, [pc, #92]	; (8001f60 <MX_RTC_Init+0x118>)
 8001f02:	f004 ff9b 	bl	8006e3c <HAL_RTC_SetDate>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8001f0c:	f7ff fb86 	bl	800161c <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 23;
 8001f10:	2317      	movs	r3, #23
 8001f12:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 59;
 8001f14:	233b      	movs	r3, #59	; 0x3b
 8001f16:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 55;
 8001f18:	2337      	movs	r3, #55	; 0x37
 8001f1a:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001f20:	2300      	movs	r3, #0
 8001f22:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001f24:	2300      	movs	r3, #0
 8001f26:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_ALL;
 8001f28:	f04f 3380 	mov.w	r3, #2155905152	; 0x80808080
 8001f2c:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001f32:	2300      	movs	r3, #0
 8001f34:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 1;
 8001f36:	2301      	movs	r3, #1
 8001f38:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8001f3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f40:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8001f42:	1d3b      	adds	r3, r7, #4
 8001f44:	2200      	movs	r2, #0
 8001f46:	4619      	mov	r1, r3
 8001f48:	4805      	ldr	r0, [pc, #20]	; (8001f60 <MX_RTC_Init+0x118>)
 8001f4a:	f005 f84b 	bl	8006fe4 <HAL_RTC_SetAlarm_IT>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <MX_RTC_Init+0x110>
  {
    Error_Handler();
 8001f54:	f7ff fb62 	bl	800161c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001f58:	bf00      	nop
 8001f5a:	3748      	adds	r7, #72	; 0x48
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	200008e8 	.word	0x200008e8
 8001f64:	40002800 	.word	0x40002800

08001f68 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b0a4      	sub	sp, #144	; 0x90
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f70:	f107 0308 	add.w	r3, r7, #8
 8001f74:	2288      	movs	r2, #136	; 0x88
 8001f76:	2100      	movs	r1, #0
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f008 f8f3 	bl	800a164 <memset>
  if(rtcHandle->Instance==RTC)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a10      	ldr	r2, [pc, #64]	; (8001fc4 <HAL_RTC_MspInit+0x5c>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d118      	bne.n	8001fba <HAL_RTC_MspInit+0x52>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001f88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f8c:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001f8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f96:	f107 0308 	add.w	r3, r7, #8
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f004 f90e 	bl	80061bc <HAL_RCCEx_PeriphCLKConfig>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001fa6:	f7ff fb39 	bl	800161c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001faa:	4b07      	ldr	r3, [pc, #28]	; (8001fc8 <HAL_RTC_MspInit+0x60>)
 8001fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fb0:	4a05      	ldr	r2, [pc, #20]	; (8001fc8 <HAL_RTC_MspInit+0x60>)
 8001fb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001fba:	bf00      	nop
 8001fbc:	3790      	adds	r7, #144	; 0x90
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40002800 	.word	0x40002800
 8001fc8:	40021000 	.word	0x40021000

08001fcc <changeColor>:




// Zmiana koloru na zawolanie
void changeColor(struct colorRgb newColor) {
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
	actualColor.blue = newColor.blue;
 8001fd4:	797a      	ldrb	r2, [r7, #5]
 8001fd6:	4b0b      	ldr	r3, [pc, #44]	; (8002004 <changeColor+0x38>)
 8001fd8:	705a      	strb	r2, [r3, #1]
	actualColor.red = newColor.red;
 8001fda:	793a      	ldrb	r2, [r7, #4]
 8001fdc:	4b09      	ldr	r3, [pc, #36]	; (8002004 <changeColor+0x38>)
 8001fde:	701a      	strb	r2, [r3, #0]
	actualColor.green = newColor.green;
 8001fe0:	79ba      	ldrb	r2, [r7, #6]
 8001fe2:	4b08      	ldr	r3, [pc, #32]	; (8002004 <changeColor+0x38>)
 8001fe4:	709a      	strb	r2, [r3, #2]

	colorInMemory.blue = newColor.blue;
 8001fe6:	797a      	ldrb	r2, [r7, #5]
 8001fe8:	4b07      	ldr	r3, [pc, #28]	; (8002008 <changeColor+0x3c>)
 8001fea:	705a      	strb	r2, [r3, #1]
	colorInMemory.red = newColor.red;
 8001fec:	793a      	ldrb	r2, [r7, #4]
 8001fee:	4b06      	ldr	r3, [pc, #24]	; (8002008 <changeColor+0x3c>)
 8001ff0:	701a      	strb	r2, [r3, #0]
	colorInMemory.green = newColor.green;
 8001ff2:	79ba      	ldrb	r2, [r7, #6]
 8001ff4:	4b04      	ldr	r3, [pc, #16]	; (8002008 <changeColor+0x3c>)
 8001ff6:	709a      	strb	r2, [r3, #2]

}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	2000090c 	.word	0x2000090c
 8002008:	20000910 	.word	0x20000910

0800200c <mixColor>:

void mixColor() {
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
	// Wymieszanie koloru
	struct colorRgb temp;
	temp.blue = actualColor.blue;
 8002012:	4b0a      	ldr	r3, [pc, #40]	; (800203c <mixColor+0x30>)
 8002014:	785b      	ldrb	r3, [r3, #1]
 8002016:	717b      	strb	r3, [r7, #5]

	actualColor.blue = actualColor.red;
 8002018:	4b08      	ldr	r3, [pc, #32]	; (800203c <mixColor+0x30>)
 800201a:	781a      	ldrb	r2, [r3, #0]
 800201c:	4b07      	ldr	r3, [pc, #28]	; (800203c <mixColor+0x30>)
 800201e:	705a      	strb	r2, [r3, #1]
	actualColor.red = actualColor.green;
 8002020:	4b06      	ldr	r3, [pc, #24]	; (800203c <mixColor+0x30>)
 8002022:	789a      	ldrb	r2, [r3, #2]
 8002024:	4b05      	ldr	r3, [pc, #20]	; (800203c <mixColor+0x30>)
 8002026:	701a      	strb	r2, [r3, #0]
	actualColor.green = temp.blue;
 8002028:	797a      	ldrb	r2, [r7, #5]
 800202a:	4b04      	ldr	r3, [pc, #16]	; (800203c <mixColor+0x30>)
 800202c:	709a      	strb	r2, [r3, #2]
}
 800202e:	bf00      	nop
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	2000090c 	.word	0x2000090c

08002040 <backToColor>:

// Powrot do koloru z pamieci
void backToColor() {
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
	actualColor.blue = colorInMemory.blue;
 8002044:	4b08      	ldr	r3, [pc, #32]	; (8002068 <backToColor+0x28>)
 8002046:	785a      	ldrb	r2, [r3, #1]
 8002048:	4b08      	ldr	r3, [pc, #32]	; (800206c <backToColor+0x2c>)
 800204a:	705a      	strb	r2, [r3, #1]
	actualColor.red = colorInMemory.red;
 800204c:	4b06      	ldr	r3, [pc, #24]	; (8002068 <backToColor+0x28>)
 800204e:	781a      	ldrb	r2, [r3, #0]
 8002050:	4b06      	ldr	r3, [pc, #24]	; (800206c <backToColor+0x2c>)
 8002052:	701a      	strb	r2, [r3, #0]
	actualColor.green = colorInMemory.green;
 8002054:	4b04      	ldr	r3, [pc, #16]	; (8002068 <backToColor+0x28>)
 8002056:	789a      	ldrb	r2, [r3, #2]
 8002058:	4b04      	ldr	r3, [pc, #16]	; (800206c <backToColor+0x2c>)
 800205a:	709a      	strb	r2, [r3, #2]
}
 800205c:	bf00      	nop
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	20000910 	.word	0x20000910
 800206c:	2000090c 	.word	0x2000090c

08002070 <firstSegment>:

void firstSegment(uint8_t number[]) {
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
	uint8_t x = 0;
 8002078:	2300      	movs	r3, #0
 800207a:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i <= 13; i++) {
 800207c:	2300      	movs	r3, #0
 800207e:	60bb      	str	r3, [r7, #8]
 8002080:	e01d      	b.n	80020be <firstSegment+0x4e>

		if (number[x] == i) {
 8002082:	7bfb      	ldrb	r3, [r7, #15]
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	4413      	add	r3, r2
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	461a      	mov	r2, r3
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	4293      	cmp	r3, r2
 8002090:	d10c      	bne.n	80020ac <firstSegment+0x3c>
			ws2811_set_color(i, actualColor.red, actualColor.green,
 8002092:	68b8      	ldr	r0, [r7, #8]
 8002094:	4b0e      	ldr	r3, [pc, #56]	; (80020d0 <firstSegment+0x60>)
 8002096:	7819      	ldrb	r1, [r3, #0]
 8002098:	4b0d      	ldr	r3, [pc, #52]	; (80020d0 <firstSegment+0x60>)
 800209a:	789a      	ldrb	r2, [r3, #2]
 800209c:	4b0c      	ldr	r3, [pc, #48]	; (80020d0 <firstSegment+0x60>)
 800209e:	785b      	ldrb	r3, [r3, #1]
 80020a0:	f001 f990 	bl	80033c4 <ws2811_set_color>
					actualColor.blue);
			x++;
 80020a4:	7bfb      	ldrb	r3, [r7, #15]
 80020a6:	3301      	adds	r3, #1
 80020a8:	73fb      	strb	r3, [r7, #15]
 80020aa:	e005      	b.n	80020b8 <firstSegment+0x48>
		} else {
			ws2811_set_color(i, 0, 0, 0);
 80020ac:	68b8      	ldr	r0, [r7, #8]
 80020ae:	2300      	movs	r3, #0
 80020b0:	2200      	movs	r2, #0
 80020b2:	2100      	movs	r1, #0
 80020b4:	f001 f986 	bl	80033c4 <ws2811_set_color>
	for (int i = 0; i <= 13; i++) {
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	3301      	adds	r3, #1
 80020bc:	60bb      	str	r3, [r7, #8]
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	2b0d      	cmp	r3, #13
 80020c2:	ddde      	ble.n	8002082 <firstSegment+0x12>
		}
	}
}
 80020c4:	bf00      	nop
 80020c6:	bf00      	nop
 80020c8:	3710      	adds	r7, #16
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	2000090c 	.word	0x2000090c

080020d4 <secondSegment>:

void secondSegment(uint8_t number[]) {
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
	uint8_t x = 0;
 80020dc:	2300      	movs	r3, #0
 80020de:	73fb      	strb	r3, [r7, #15]
	for (int i = 14; i <= 27; i++) {
 80020e0:	230e      	movs	r3, #14
 80020e2:	60bb      	str	r3, [r7, #8]
 80020e4:	e01e      	b.n	8002124 <secondSegment+0x50>

		if (number[x] == i - 14) {
 80020e6:	7bfb      	ldrb	r3, [r7, #15]
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	4413      	add	r3, r2
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	461a      	mov	r2, r3
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	3b0e      	subs	r3, #14
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d10c      	bne.n	8002112 <secondSegment+0x3e>
			ws2811_set_color(i, actualColor.red, actualColor.green,
 80020f8:	68b8      	ldr	r0, [r7, #8]
 80020fa:	4b0e      	ldr	r3, [pc, #56]	; (8002134 <secondSegment+0x60>)
 80020fc:	7819      	ldrb	r1, [r3, #0]
 80020fe:	4b0d      	ldr	r3, [pc, #52]	; (8002134 <secondSegment+0x60>)
 8002100:	789a      	ldrb	r2, [r3, #2]
 8002102:	4b0c      	ldr	r3, [pc, #48]	; (8002134 <secondSegment+0x60>)
 8002104:	785b      	ldrb	r3, [r3, #1]
 8002106:	f001 f95d 	bl	80033c4 <ws2811_set_color>
					actualColor.blue);
			x++;
 800210a:	7bfb      	ldrb	r3, [r7, #15]
 800210c:	3301      	adds	r3, #1
 800210e:	73fb      	strb	r3, [r7, #15]
 8002110:	e005      	b.n	800211e <secondSegment+0x4a>
		} else {
			ws2811_set_color(i, 0, 0, 0);
 8002112:	68b8      	ldr	r0, [r7, #8]
 8002114:	2300      	movs	r3, #0
 8002116:	2200      	movs	r2, #0
 8002118:	2100      	movs	r1, #0
 800211a:	f001 f953 	bl	80033c4 <ws2811_set_color>
	for (int i = 14; i <= 27; i++) {
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	3301      	adds	r3, #1
 8002122:	60bb      	str	r3, [r7, #8]
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	2b1b      	cmp	r3, #27
 8002128:	dddd      	ble.n	80020e6 <secondSegment+0x12>
		}
	}
}
 800212a:	bf00      	nop
 800212c:	bf00      	nop
 800212e:	3710      	adds	r7, #16
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	2000090c 	.word	0x2000090c

08002138 <dwukropekTurnOn>:

void dwukropekTurnOn() {
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0

	ws2811_set_color(28, actualColor.red, actualColor.green, actualColor.blue);
 800213c:	4b0c      	ldr	r3, [pc, #48]	; (8002170 <dwukropekTurnOn+0x38>)
 800213e:	7819      	ldrb	r1, [r3, #0]
 8002140:	4b0b      	ldr	r3, [pc, #44]	; (8002170 <dwukropekTurnOn+0x38>)
 8002142:	789a      	ldrb	r2, [r3, #2]
 8002144:	4b0a      	ldr	r3, [pc, #40]	; (8002170 <dwukropekTurnOn+0x38>)
 8002146:	785b      	ldrb	r3, [r3, #1]
 8002148:	201c      	movs	r0, #28
 800214a:	f001 f93b 	bl	80033c4 <ws2811_set_color>
	ws2811_set_color(29, actualColor.red, actualColor.green, actualColor.blue);
 800214e:	4b08      	ldr	r3, [pc, #32]	; (8002170 <dwukropekTurnOn+0x38>)
 8002150:	7819      	ldrb	r1, [r3, #0]
 8002152:	4b07      	ldr	r3, [pc, #28]	; (8002170 <dwukropekTurnOn+0x38>)
 8002154:	789a      	ldrb	r2, [r3, #2]
 8002156:	4b06      	ldr	r3, [pc, #24]	; (8002170 <dwukropekTurnOn+0x38>)
 8002158:	785b      	ldrb	r3, [r3, #1]
 800215a:	201d      	movs	r0, #29
 800215c:	f001 f932 	bl	80033c4 <ws2811_set_color>
	ws2811_update();
 8002160:	f001 f920 	bl	80033a4 <ws2811_update>
	doubleDot = 0;
 8002164:	4b03      	ldr	r3, [pc, #12]	; (8002174 <dwukropekTurnOn+0x3c>)
 8002166:	2200      	movs	r2, #0
 8002168:	601a      	str	r2, [r3, #0]

}
 800216a:	bf00      	nop
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	2000090c 	.word	0x2000090c
 8002174:	2000029c 	.word	0x2000029c

08002178 <dwukropekTurnOff>:

void dwukropekTurnOff() {
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0

	ws2811_set_color(28, 0, 0, 0);
 800217c:	2300      	movs	r3, #0
 800217e:	2200      	movs	r2, #0
 8002180:	2100      	movs	r1, #0
 8002182:	201c      	movs	r0, #28
 8002184:	f001 f91e 	bl	80033c4 <ws2811_set_color>
	ws2811_set_color(29, 0, 0, 0);
 8002188:	2300      	movs	r3, #0
 800218a:	2200      	movs	r2, #0
 800218c:	2100      	movs	r1, #0
 800218e:	201d      	movs	r0, #29
 8002190:	f001 f918 	bl	80033c4 <ws2811_set_color>
	ws2811_update();
 8002194:	f001 f906 	bl	80033a4 <ws2811_update>
	doubleDot = 1;
 8002198:	4b02      	ldr	r3, [pc, #8]	; (80021a4 <dwukropekTurnOff+0x2c>)
 800219a:	2201      	movs	r2, #1
 800219c:	601a      	str	r2, [r3, #0]
}
 800219e:	bf00      	nop
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	2000029c 	.word	0x2000029c

080021a8 <kropkaOn>:
// 51 52 53 54 55 56
void kropkaOn() {
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
	ws2811_set_color(28, 0, 0, 0);
 80021ac:	2300      	movs	r3, #0
 80021ae:	2200      	movs	r2, #0
 80021b0:	2100      	movs	r1, #0
 80021b2:	201c      	movs	r0, #28
 80021b4:	f001 f906 	bl	80033c4 <ws2811_set_color>
	ws2811_set_color(29, actualColor.red, actualColor.green, actualColor.blue);
 80021b8:	4b06      	ldr	r3, [pc, #24]	; (80021d4 <kropkaOn+0x2c>)
 80021ba:	7819      	ldrb	r1, [r3, #0]
 80021bc:	4b05      	ldr	r3, [pc, #20]	; (80021d4 <kropkaOn+0x2c>)
 80021be:	789a      	ldrb	r2, [r3, #2]
 80021c0:	4b04      	ldr	r3, [pc, #16]	; (80021d4 <kropkaOn+0x2c>)
 80021c2:	785b      	ldrb	r3, [r3, #1]
 80021c4:	201d      	movs	r0, #29
 80021c6:	f001 f8fd 	bl	80033c4 <ws2811_set_color>
	ws2811_update();
 80021ca:	f001 f8eb 	bl	80033a4 <ws2811_update>
}
 80021ce:	bf00      	nop
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	2000090c 	.word	0x2000090c

080021d8 <celsiusMark>:

void celsiusMark(){
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
	uint32_t i;
	for(i=50;i<=55;i++){
 80021de:	2332      	movs	r3, #50	; 0x32
 80021e0:	607b      	str	r3, [r7, #4]
 80021e2:	e00b      	b.n	80021fc <celsiusMark+0x24>
		ws2811_set_color(i, actualColor.red, actualColor.green, actualColor.blue);
 80021e4:	4b0a      	ldr	r3, [pc, #40]	; (8002210 <celsiusMark+0x38>)
 80021e6:	7819      	ldrb	r1, [r3, #0]
 80021e8:	4b09      	ldr	r3, [pc, #36]	; (8002210 <celsiusMark+0x38>)
 80021ea:	789a      	ldrb	r2, [r3, #2]
 80021ec:	4b08      	ldr	r3, [pc, #32]	; (8002210 <celsiusMark+0x38>)
 80021ee:	785b      	ldrb	r3, [r3, #1]
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f001 f8e7 	bl	80033c4 <ws2811_set_color>
	for(i=50;i<=55;i++){
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	3301      	adds	r3, #1
 80021fa:	607b      	str	r3, [r7, #4]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2b37      	cmp	r3, #55	; 0x37
 8002200:	d9f0      	bls.n	80021e4 <celsiusMark+0xc>
	}
	ws2811_update();
 8002202:	f001 f8cf 	bl	80033a4 <ws2811_update>
}
 8002206:	bf00      	nop
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	2000090c 	.word	0x2000090c

08002214 <dwukropekStart>:

void dwukropekStart(void) {
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
	if (doubleDot == 1) {
 8002218:	4b05      	ldr	r3, [pc, #20]	; (8002230 <dwukropekStart+0x1c>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2b01      	cmp	r3, #1
 800221e:	d102      	bne.n	8002226 <dwukropekStart+0x12>
		dwukropekTurnOn();
 8002220:	f7ff ff8a 	bl	8002138 <dwukropekTurnOn>
		//HAL_Delay(1000);
	} else {
		dwukropekTurnOff();
		//HAL_Delay(1000);
	}
}
 8002224:	e001      	b.n	800222a <dwukropekStart+0x16>
		dwukropekTurnOff();
 8002226:	f7ff ffa7 	bl	8002178 <dwukropekTurnOff>
}
 800222a:	bf00      	nop
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	2000029c 	.word	0x2000029c

08002234 <thirdSegment>:

void thirdSegment(uint8_t number[]) {
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
	uint8_t x = 0;
 800223c:	2300      	movs	r3, #0
 800223e:	73fb      	strb	r3, [r7, #15]
	for (int i = 30; i <= 43; i++) {
 8002240:	231e      	movs	r3, #30
 8002242:	60bb      	str	r3, [r7, #8]
 8002244:	e01e      	b.n	8002284 <thirdSegment+0x50>

		if (number[x] == i - 30) {
 8002246:	7bfb      	ldrb	r3, [r7, #15]
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	4413      	add	r3, r2
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	461a      	mov	r2, r3
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	3b1e      	subs	r3, #30
 8002254:	429a      	cmp	r2, r3
 8002256:	d10c      	bne.n	8002272 <thirdSegment+0x3e>
			ws2811_set_color(i, actualColor.red, actualColor.green,
 8002258:	68b8      	ldr	r0, [r7, #8]
 800225a:	4b0e      	ldr	r3, [pc, #56]	; (8002294 <thirdSegment+0x60>)
 800225c:	7819      	ldrb	r1, [r3, #0]
 800225e:	4b0d      	ldr	r3, [pc, #52]	; (8002294 <thirdSegment+0x60>)
 8002260:	789a      	ldrb	r2, [r3, #2]
 8002262:	4b0c      	ldr	r3, [pc, #48]	; (8002294 <thirdSegment+0x60>)
 8002264:	785b      	ldrb	r3, [r3, #1]
 8002266:	f001 f8ad 	bl	80033c4 <ws2811_set_color>
					actualColor.blue);
			x++;
 800226a:	7bfb      	ldrb	r3, [r7, #15]
 800226c:	3301      	adds	r3, #1
 800226e:	73fb      	strb	r3, [r7, #15]
 8002270:	e005      	b.n	800227e <thirdSegment+0x4a>
		} else {
			ws2811_set_color(i, 0, 0, 0);
 8002272:	68b8      	ldr	r0, [r7, #8]
 8002274:	2300      	movs	r3, #0
 8002276:	2200      	movs	r2, #0
 8002278:	2100      	movs	r1, #0
 800227a:	f001 f8a3 	bl	80033c4 <ws2811_set_color>
	for (int i = 30; i <= 43; i++) {
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	3301      	adds	r3, #1
 8002282:	60bb      	str	r3, [r7, #8]
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	2b2b      	cmp	r3, #43	; 0x2b
 8002288:	dddd      	ble.n	8002246 <thirdSegment+0x12>
		}
	}
}
 800228a:	bf00      	nop
 800228c:	bf00      	nop
 800228e:	3710      	adds	r7, #16
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	2000090c 	.word	0x2000090c

08002298 <fourthSegment>:

void fourthSegment(uint8_t number[]) {
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
	uint8_t x = 0;
 80022a0:	2300      	movs	r3, #0
 80022a2:	73fb      	strb	r3, [r7, #15]
	for (int i = 44; i <= 57; i++) {
 80022a4:	232c      	movs	r3, #44	; 0x2c
 80022a6:	60bb      	str	r3, [r7, #8]
 80022a8:	e01e      	b.n	80022e8 <fourthSegment+0x50>

		if (number[x] == i - 44) {
 80022aa:	7bfb      	ldrb	r3, [r7, #15]
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	4413      	add	r3, r2
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	461a      	mov	r2, r3
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	3b2c      	subs	r3, #44	; 0x2c
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d10c      	bne.n	80022d6 <fourthSegment+0x3e>
			ws2811_set_color(i, actualColor.red, actualColor.green,
 80022bc:	68b8      	ldr	r0, [r7, #8]
 80022be:	4b0e      	ldr	r3, [pc, #56]	; (80022f8 <fourthSegment+0x60>)
 80022c0:	7819      	ldrb	r1, [r3, #0]
 80022c2:	4b0d      	ldr	r3, [pc, #52]	; (80022f8 <fourthSegment+0x60>)
 80022c4:	789a      	ldrb	r2, [r3, #2]
 80022c6:	4b0c      	ldr	r3, [pc, #48]	; (80022f8 <fourthSegment+0x60>)
 80022c8:	785b      	ldrb	r3, [r3, #1]
 80022ca:	f001 f87b 	bl	80033c4 <ws2811_set_color>
					actualColor.blue);
			x++;
 80022ce:	7bfb      	ldrb	r3, [r7, #15]
 80022d0:	3301      	adds	r3, #1
 80022d2:	73fb      	strb	r3, [r7, #15]
 80022d4:	e005      	b.n	80022e2 <fourthSegment+0x4a>
		} else {
			ws2811_set_color(i, 0, 0, 0);
 80022d6:	68b8      	ldr	r0, [r7, #8]
 80022d8:	2300      	movs	r3, #0
 80022da:	2200      	movs	r2, #0
 80022dc:	2100      	movs	r1, #0
 80022de:	f001 f871 	bl	80033c4 <ws2811_set_color>
	for (int i = 44; i <= 57; i++) {
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	3301      	adds	r3, #1
 80022e6:	60bb      	str	r3, [r7, #8]
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	2b39      	cmp	r3, #57	; 0x39
 80022ec:	dddd      	ble.n	80022aa <fourthSegment+0x12>
		}
	}
}
 80022ee:	bf00      	nop
 80022f0:	bf00      	nop
 80022f2:	3710      	adds	r7, #16
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	2000090c 	.word	0x2000090c

080022fc <numberToMatrix>:

uint8_t* numberToMatrix(int number) {
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b09      	cmp	r3, #9
 8002308:	d82a      	bhi.n	8002360 <numberToMatrix+0x64>
 800230a:	a201      	add	r2, pc, #4	; (adr r2, 8002310 <numberToMatrix+0x14>)
 800230c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002310:	08002339 	.word	0x08002339
 8002314:	0800233d 	.word	0x0800233d
 8002318:	08002341 	.word	0x08002341
 800231c:	08002345 	.word	0x08002345
 8002320:	08002349 	.word	0x08002349
 8002324:	0800234d 	.word	0x0800234d
 8002328:	08002351 	.word	0x08002351
 800232c:	08002355 	.word	0x08002355
 8002330:	08002359 	.word	0x08002359
 8002334:	0800235d 	.word	0x0800235d
	switch (number) {
	case 0:
		return zero;
 8002338:	4b0d      	ldr	r3, [pc, #52]	; (8002370 <numberToMatrix+0x74>)
 800233a:	e012      	b.n	8002362 <numberToMatrix+0x66>
		break;
	case 1:
		return one;
 800233c:	4b0d      	ldr	r3, [pc, #52]	; (8002374 <numberToMatrix+0x78>)
 800233e:	e010      	b.n	8002362 <numberToMatrix+0x66>
		break;
	case 2:
		return two;
 8002340:	4b0d      	ldr	r3, [pc, #52]	; (8002378 <numberToMatrix+0x7c>)
 8002342:	e00e      	b.n	8002362 <numberToMatrix+0x66>
		break;
	case 3:
		return three;
 8002344:	4b0d      	ldr	r3, [pc, #52]	; (800237c <numberToMatrix+0x80>)
 8002346:	e00c      	b.n	8002362 <numberToMatrix+0x66>
		break;
	case 4:
		return four;
 8002348:	4b0d      	ldr	r3, [pc, #52]	; (8002380 <numberToMatrix+0x84>)
 800234a:	e00a      	b.n	8002362 <numberToMatrix+0x66>
		break;
	case 5:
		return five;
 800234c:	4b0d      	ldr	r3, [pc, #52]	; (8002384 <numberToMatrix+0x88>)
 800234e:	e008      	b.n	8002362 <numberToMatrix+0x66>
		break;
	case 6:
		return six;
 8002350:	4b0d      	ldr	r3, [pc, #52]	; (8002388 <numberToMatrix+0x8c>)
 8002352:	e006      	b.n	8002362 <numberToMatrix+0x66>
		break;
	case 7:
		return seven;
 8002354:	4b0d      	ldr	r3, [pc, #52]	; (800238c <numberToMatrix+0x90>)
 8002356:	e004      	b.n	8002362 <numberToMatrix+0x66>
		break;
	case 8:
		return eight;
 8002358:	4b0d      	ldr	r3, [pc, #52]	; (8002390 <numberToMatrix+0x94>)
 800235a:	e002      	b.n	8002362 <numberToMatrix+0x66>
		break;
	case 9:
		return nine;
 800235c:	4b0d      	ldr	r3, [pc, #52]	; (8002394 <numberToMatrix+0x98>)
 800235e:	e000      	b.n	8002362 <numberToMatrix+0x66>
		break;
	default:
		return 0;
 8002360:	2300      	movs	r3, #0
	}

}
 8002362:	4618      	mov	r0, r3
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	20000004 	.word	0x20000004
 8002374:	20000010 	.word	0x20000010
 8002378:	20000014 	.word	0x20000014
 800237c:	20000020 	.word	0x20000020
 8002380:	2000002c 	.word	0x2000002c
 8002384:	20000034 	.word	0x20000034
 8002388:	20000040 	.word	0x20000040
 800238c:	2000004c 	.word	0x2000004c
 8002390:	20000054 	.word	0x20000054
 8002394:	20000064 	.word	0x20000064

08002398 <destroy>:

struct manyNumber destroy(uint8_t numberToDestroy) {
 8002398:	b480      	push	{r7}
 800239a:	b085      	sub	sp, #20
 800239c:	af00      	add	r7, sp, #0
 800239e:	4603      	mov	r3, r0
 80023a0:	71fb      	strb	r3, [r7, #7]

	struct manyNumber temp;

	temp.firstNumber = numberToDestroy / 10;
 80023a2:	79fb      	ldrb	r3, [r7, #7]
 80023a4:	4a10      	ldr	r2, [pc, #64]	; (80023e8 <destroy+0x50>)
 80023a6:	fba2 2303 	umull	r2, r3, r2, r3
 80023aa:	08db      	lsrs	r3, r3, #3
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	723b      	strb	r3, [r7, #8]
	temp.secondNumber = numberToDestroy % 10;
 80023b0:	79fa      	ldrb	r2, [r7, #7]
 80023b2:	4b0d      	ldr	r3, [pc, #52]	; (80023e8 <destroy+0x50>)
 80023b4:	fba3 1302 	umull	r1, r3, r3, r2
 80023b8:	08d9      	lsrs	r1, r3, #3
 80023ba:	460b      	mov	r3, r1
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	440b      	add	r3, r1
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	727b      	strb	r3, [r7, #9]
	return temp;
 80023c8:	893b      	ldrh	r3, [r7, #8]
 80023ca:	81bb      	strh	r3, [r7, #12]
 80023cc:	2300      	movs	r3, #0
 80023ce:	7b3a      	ldrb	r2, [r7, #12]
 80023d0:	f362 0307 	bfi	r3, r2, #0, #8
 80023d4:	7b7a      	ldrb	r2, [r7, #13]
 80023d6:	f362 230f 	bfi	r3, r2, #8, #8
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3714      	adds	r7, #20
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	cccccccd 	.word	0xcccccccd

080023ec <destoryCelcius>:


struct manyNumberCelcius destoryCelcius(){
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b08a      	sub	sp, #40	; 0x28
 80023f0:	af00      	add	r7, sp, #0
	struct manyNumberCelcius temp;
	double temp1Temperature=temperatureMeasure();
 80023f2:	f000 fc5d 	bl	8002cb0 <temperatureMeasure>
 80023f6:	ed87 0b08 	vstr	d0, [r7, #32]
	int tempTemperature = (int)temperatureMeasure();
 80023fa:	f000 fc59 	bl	8002cb0 <temperatureMeasure>
 80023fe:	ec53 2b10 	vmov	r2, r3, d0
 8002402:	4610      	mov	r0, r2
 8002404:	4619      	mov	r1, r3
 8002406:	f7fe fba7 	bl	8000b58 <__aeabi_d2iz>
 800240a:	4603      	mov	r3, r0
 800240c:	61fb      	str	r3, [r7, #28]
	double temp2Temperature;
	int temp3Temperature;

	temp.firstNumber=tempTemperature/10;
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	4a2e      	ldr	r2, [pc, #184]	; (80024cc <destoryCelcius+0xe0>)
 8002412:	fb82 1203 	smull	r1, r2, r2, r3
 8002416:	1092      	asrs	r2, r2, #2
 8002418:	17db      	asrs	r3, r3, #31
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	b2db      	uxtb	r3, r3
 800241e:	713b      	strb	r3, [r7, #4]
	temp.secondNumber=tempTemperature%10;
 8002420:	69fa      	ldr	r2, [r7, #28]
 8002422:	4b2a      	ldr	r3, [pc, #168]	; (80024cc <destoryCelcius+0xe0>)
 8002424:	fb83 1302 	smull	r1, r3, r3, r2
 8002428:	1099      	asrs	r1, r3, #2
 800242a:	17d3      	asrs	r3, r2, #31
 800242c:	1ac9      	subs	r1, r1, r3
 800242e:	460b      	mov	r3, r1
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	440b      	add	r3, r1
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	1ad1      	subs	r1, r2, r3
 8002438:	b2cb      	uxtb	r3, r1
 800243a:	717b      	strb	r3, [r7, #5]
	temp2Temperature=temp1Temperature-tempTemperature;
 800243c:	69f8      	ldr	r0, [r7, #28]
 800243e:	f7fe f871 	bl	8000524 <__aeabi_i2d>
 8002442:	4602      	mov	r2, r0
 8002444:	460b      	mov	r3, r1
 8002446:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800244a:	f7fd ff1d 	bl	8000288 <__aeabi_dsub>
 800244e:	4602      	mov	r2, r0
 8002450:	460b      	mov	r3, r1
 8002452:	e9c7 2304 	strd	r2, r3, [r7, #16]
	temp2Temperature=temp2Temperature*10;
 8002456:	f04f 0200 	mov.w	r2, #0
 800245a:	4b1d      	ldr	r3, [pc, #116]	; (80024d0 <destoryCelcius+0xe4>)
 800245c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002460:	f7fe f8ca 	bl	80005f8 <__aeabi_dmul>
 8002464:	4602      	mov	r2, r0
 8002466:	460b      	mov	r3, r1
 8002468:	e9c7 2304 	strd	r2, r3, [r7, #16]
	temp3Temperature=(int)temp2Temperature%10;
 800246c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002470:	f7fe fb72 	bl	8000b58 <__aeabi_d2iz>
 8002474:	4602      	mov	r2, r0
 8002476:	4b15      	ldr	r3, [pc, #84]	; (80024cc <destoryCelcius+0xe0>)
 8002478:	fb83 1302 	smull	r1, r3, r3, r2
 800247c:	1099      	asrs	r1, r3, #2
 800247e:	17d3      	asrs	r3, r2, #31
 8002480:	1ac9      	subs	r1, r1, r3
 8002482:	460b      	mov	r3, r1
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	440b      	add	r3, r1
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	60fb      	str	r3, [r7, #12]
	// Zaokraglenie liczby po przecinku
	if(temp3Temperature<5){
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2b04      	cmp	r3, #4
 8002492:	dc02      	bgt.n	800249a <destoryCelcius+0xae>
		temp.numberAfterPoint=0;
 8002494:	2300      	movs	r3, #0
 8002496:	71bb      	strb	r3, [r7, #6]
 8002498:	e001      	b.n	800249e <destoryCelcius+0xb2>
	}else{
		temp.numberAfterPoint=5;
 800249a:	2305      	movs	r3, #5
 800249c:	71bb      	strb	r3, [r7, #6]
	}

	return temp;
 800249e:	f107 0308 	add.w	r3, r7, #8
 80024a2:	1d3a      	adds	r2, r7, #4
 80024a4:	6812      	ldr	r2, [r2, #0]
 80024a6:	4611      	mov	r1, r2
 80024a8:	8019      	strh	r1, [r3, #0]
 80024aa:	3302      	adds	r3, #2
 80024ac:	0c12      	lsrs	r2, r2, #16
 80024ae:	701a      	strb	r2, [r3, #0]
 80024b0:	2300      	movs	r3, #0
 80024b2:	7a3a      	ldrb	r2, [r7, #8]
 80024b4:	f362 0307 	bfi	r3, r2, #0, #8
 80024b8:	7a7a      	ldrb	r2, [r7, #9]
 80024ba:	f362 230f 	bfi	r3, r2, #8, #8
 80024be:	7aba      	ldrb	r2, [r7, #10]
 80024c0:	f362 4317 	bfi	r3, r2, #16, #8
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3728      	adds	r7, #40	; 0x28
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	66666667 	.word	0x66666667
 80024d0:	40240000 	.word	0x40240000

080024d4 <putMinutes>:



void putMinutes(uint8_t minutes) {
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	4603      	mov	r3, r0
 80024dc:	71fb      	strb	r3, [r7, #7]
	if (minutes <= 9) {
 80024de:	79fb      	ldrb	r3, [r7, #7]
 80024e0:	2b09      	cmp	r3, #9
 80024e2:	d812      	bhi.n	800250a <putMinutes+0x36>
		thirdSegment(zero);
 80024e4:	4816      	ldr	r0, [pc, #88]	; (8002540 <putMinutes+0x6c>)
 80024e6:	f7ff fea5 	bl	8002234 <thirdSegment>
		if (minutes == 0) {
 80024ea:	79fb      	ldrb	r3, [r7, #7]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d103      	bne.n	80024f8 <putMinutes+0x24>
			fourthSegment(zero);
 80024f0:	4813      	ldr	r0, [pc, #76]	; (8002540 <putMinutes+0x6c>)
 80024f2:	f7ff fed1 	bl	8002298 <fourthSegment>
	} else {
		struct manyNumber temp = destroy(minutes);
		thirdSegment(numberToMatrix(temp.firstNumber));
		fourthSegment(numberToMatrix(temp.secondNumber));
	}
}
 80024f6:	e01e      	b.n	8002536 <putMinutes+0x62>
			fourthSegment(numberToMatrix(minutes));
 80024f8:	79fb      	ldrb	r3, [r7, #7]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7ff fefe 	bl	80022fc <numberToMatrix>
 8002500:	4603      	mov	r3, r0
 8002502:	4618      	mov	r0, r3
 8002504:	f7ff fec8 	bl	8002298 <fourthSegment>
}
 8002508:	e015      	b.n	8002536 <putMinutes+0x62>
		struct manyNumber temp = destroy(minutes);
 800250a:	79fb      	ldrb	r3, [r7, #7]
 800250c:	4618      	mov	r0, r3
 800250e:	f7ff ff43 	bl	8002398 <destroy>
 8002512:	4603      	mov	r3, r0
 8002514:	81bb      	strh	r3, [r7, #12]
		thirdSegment(numberToMatrix(temp.firstNumber));
 8002516:	7b3b      	ldrb	r3, [r7, #12]
 8002518:	4618      	mov	r0, r3
 800251a:	f7ff feef 	bl	80022fc <numberToMatrix>
 800251e:	4603      	mov	r3, r0
 8002520:	4618      	mov	r0, r3
 8002522:	f7ff fe87 	bl	8002234 <thirdSegment>
		fourthSegment(numberToMatrix(temp.secondNumber));
 8002526:	7b7b      	ldrb	r3, [r7, #13]
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff fee7 	bl	80022fc <numberToMatrix>
 800252e:	4603      	mov	r3, r0
 8002530:	4618      	mov	r0, r3
 8002532:	f7ff feb1 	bl	8002298 <fourthSegment>
}
 8002536:	bf00      	nop
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	20000004 	.word	0x20000004

08002544 <putHours>:

void putHours(uint8_t hours, int isMenuOn) {
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	4603      	mov	r3, r0
 800254c:	6039      	str	r1, [r7, #0]
 800254e:	71fb      	strb	r3, [r7, #7]
	if (hours <= 9) {
 8002550:	79fb      	ldrb	r3, [r7, #7]
 8002552:	2b09      	cmp	r3, #9
 8002554:	d81c      	bhi.n	8002590 <putHours+0x4c>

		if(isMenuOn==MENU_ON){
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	2b01      	cmp	r3, #1
 800255a:	d103      	bne.n	8002564 <putHours+0x20>
			firstSegment(zero);
 800255c:	4819      	ldr	r0, [pc, #100]	; (80025c4 <putHours+0x80>)
 800255e:	f7ff fd87 	bl	8002070 <firstSegment>
 8002562:	e005      	b.n	8002570 <putHours+0x2c>
		}else if(isMenuOn==MENU_OFF){
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d102      	bne.n	8002570 <putHours+0x2c>
			firstSegment(noDigit);
 800256a:	4817      	ldr	r0, [pc, #92]	; (80025c8 <putHours+0x84>)
 800256c:	f7ff fd80 	bl	8002070 <firstSegment>
		}

		if (hours == 0) {
 8002570:	79fb      	ldrb	r3, [r7, #7]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d103      	bne.n	800257e <putHours+0x3a>
			secondSegment(zero);
 8002576:	4813      	ldr	r0, [pc, #76]	; (80025c4 <putHours+0x80>)
 8002578:	f7ff fdac 	bl	80020d4 <secondSegment>
	} else {
		struct manyNumber temp = destroy(hours);
		firstSegment(numberToMatrix(temp.firstNumber));
		secondSegment(numberToMatrix(temp.secondNumber));
	}
}
 800257c:	e01e      	b.n	80025bc <putHours+0x78>
			secondSegment(numberToMatrix(hours));
 800257e:	79fb      	ldrb	r3, [r7, #7]
 8002580:	4618      	mov	r0, r3
 8002582:	f7ff febb 	bl	80022fc <numberToMatrix>
 8002586:	4603      	mov	r3, r0
 8002588:	4618      	mov	r0, r3
 800258a:	f7ff fda3 	bl	80020d4 <secondSegment>
}
 800258e:	e015      	b.n	80025bc <putHours+0x78>
		struct manyNumber temp = destroy(hours);
 8002590:	79fb      	ldrb	r3, [r7, #7]
 8002592:	4618      	mov	r0, r3
 8002594:	f7ff ff00 	bl	8002398 <destroy>
 8002598:	4603      	mov	r3, r0
 800259a:	81bb      	strh	r3, [r7, #12]
		firstSegment(numberToMatrix(temp.firstNumber));
 800259c:	7b3b      	ldrb	r3, [r7, #12]
 800259e:	4618      	mov	r0, r3
 80025a0:	f7ff feac 	bl	80022fc <numberToMatrix>
 80025a4:	4603      	mov	r3, r0
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7ff fd62 	bl	8002070 <firstSegment>
		secondSegment(numberToMatrix(temp.secondNumber));
 80025ac:	7b7b      	ldrb	r3, [r7, #13]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7ff fea4 	bl	80022fc <numberToMatrix>
 80025b4:	4603      	mov	r3, r0
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7ff fd8c 	bl	80020d4 <secondSegment>
}
 80025bc:	bf00      	nop
 80025be:	3710      	adds	r7, #16
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	20000004 	.word	0x20000004
 80025c8:	20000000 	.word	0x20000000

080025cc <putMonth>:

void putMonth(uint8_t month) {
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	4603      	mov	r3, r0
 80025d4:	71fb      	strb	r3, [r7, #7]
	putMinutes(month);
 80025d6:	79fb      	ldrb	r3, [r7, #7]
 80025d8:	4618      	mov	r0, r3
 80025da:	f7ff ff7b 	bl	80024d4 <putMinutes>
}
 80025de:	bf00      	nop
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <putDay>:

void putDay(uint8_t day) {
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b082      	sub	sp, #8
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	4603      	mov	r3, r0
 80025ee:	71fb      	strb	r3, [r7, #7]
	putHours(day,MENU_ON);
 80025f0:	79fb      	ldrb	r3, [r7, #7]
 80025f2:	2101      	movs	r1, #1
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7ff ffa5 	bl	8002544 <putHours>
}
 80025fa:	bf00      	nop
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
	...

08002604 <normalDisplayStart>:

// bez pierwszej cyfry godziny
void normalDisplayStart() {
 8002604:	b580      	push	{r7, lr}
 8002606:	b088      	sub	sp, #32
 8002608:	af00      	add	r7, sp, #0

	RTC_TimeTypeDef time = { 0 };
 800260a:	f107 0308 	add.w	r3, r7, #8
 800260e:	2200      	movs	r2, #0
 8002610:	601a      	str	r2, [r3, #0]
 8002612:	605a      	str	r2, [r3, #4]
 8002614:	609a      	str	r2, [r3, #8]
 8002616:	60da      	str	r2, [r3, #12]
 8002618:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef date = { 0 };
 800261a:	2300      	movs	r3, #0
 800261c:	607b      	str	r3, [r7, #4]

	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 800261e:	f107 0308 	add.w	r3, r7, #8
 8002622:	2200      	movs	r2, #0
 8002624:	4619      	mov	r1, r3
 8002626:	480e      	ldr	r0, [pc, #56]	; (8002660 <normalDisplayStart+0x5c>)
 8002628:	f004 fbac 	bl	8006d84 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 800262c:	1d3b      	adds	r3, r7, #4
 800262e:	2200      	movs	r2, #0
 8002630:	4619      	mov	r1, r3
 8002632:	480b      	ldr	r0, [pc, #44]	; (8002660 <normalDisplayStart+0x5c>)
 8002634:	f004 fc89 	bl	8006f4a <HAL_RTC_GetDate>

	uint8_t hours = time.Hours;
 8002638:	7a3b      	ldrb	r3, [r7, #8]
 800263a:	77fb      	strb	r3, [r7, #31]
	uint8_t minutes = time.Minutes;
 800263c:	7a7b      	ldrb	r3, [r7, #9]
 800263e:	77bb      	strb	r3, [r7, #30]

	putHours(hours,MENU_OFF);
 8002640:	7ffb      	ldrb	r3, [r7, #31]
 8002642:	2100      	movs	r1, #0
 8002644:	4618      	mov	r0, r3
 8002646:	f7ff ff7d 	bl	8002544 <putHours>
	putMinutes(minutes);
 800264a:	7fbb      	ldrb	r3, [r7, #30]
 800264c:	4618      	mov	r0, r3
 800264e:	f7ff ff41 	bl	80024d4 <putMinutes>
	ws2811_update();
 8002652:	f000 fea7 	bl	80033a4 <ws2811_update>
}
 8002656:	bf00      	nop
 8002658:	3720      	adds	r7, #32
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	200008e8 	.word	0x200008e8

08002664 <menuDisplayStart>:

void menuDisplayStart(){
 8002664:	b580      	push	{r7, lr}
 8002666:	b088      	sub	sp, #32
 8002668:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef time = { 0 };
 800266a:	f107 0308 	add.w	r3, r7, #8
 800266e:	2200      	movs	r2, #0
 8002670:	601a      	str	r2, [r3, #0]
 8002672:	605a      	str	r2, [r3, #4]
 8002674:	609a      	str	r2, [r3, #8]
 8002676:	60da      	str	r2, [r3, #12]
 8002678:	611a      	str	r2, [r3, #16]
		RTC_DateTypeDef date = { 0 };
 800267a:	2300      	movs	r3, #0
 800267c:	607b      	str	r3, [r7, #4]

		HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 800267e:	f107 0308 	add.w	r3, r7, #8
 8002682:	2200      	movs	r2, #0
 8002684:	4619      	mov	r1, r3
 8002686:	480e      	ldr	r0, [pc, #56]	; (80026c0 <menuDisplayStart+0x5c>)
 8002688:	f004 fb7c 	bl	8006d84 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 800268c:	1d3b      	adds	r3, r7, #4
 800268e:	2200      	movs	r2, #0
 8002690:	4619      	mov	r1, r3
 8002692:	480b      	ldr	r0, [pc, #44]	; (80026c0 <menuDisplayStart+0x5c>)
 8002694:	f004 fc59 	bl	8006f4a <HAL_RTC_GetDate>

		uint8_t hours = time.Hours;
 8002698:	7a3b      	ldrb	r3, [r7, #8]
 800269a:	77fb      	strb	r3, [r7, #31]
		uint8_t minutes = time.Minutes;
 800269c:	7a7b      	ldrb	r3, [r7, #9]
 800269e:	77bb      	strb	r3, [r7, #30]

		putHours(hours,MENU_ON);
 80026a0:	7ffb      	ldrb	r3, [r7, #31]
 80026a2:	2101      	movs	r1, #1
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7ff ff4d 	bl	8002544 <putHours>
		putMinutes(minutes);
 80026aa:	7fbb      	ldrb	r3, [r7, #30]
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7ff ff11 	bl	80024d4 <putMinutes>
		ws2811_update();
 80026b2:	f000 fe77 	bl	80033a4 <ws2811_update>
}
 80026b6:	bf00      	nop
 80026b8:	3720      	adds	r7, #32
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	200008e8 	.word	0x200008e8

080026c4 <dateOnDisplay>:



void dateOnDisplay() {
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b088      	sub	sp, #32
 80026c8:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef time = { 0 };
 80026ca:	f107 0308 	add.w	r3, r7, #8
 80026ce:	2200      	movs	r2, #0
 80026d0:	601a      	str	r2, [r3, #0]
 80026d2:	605a      	str	r2, [r3, #4]
 80026d4:	609a      	str	r2, [r3, #8]
 80026d6:	60da      	str	r2, [r3, #12]
 80026d8:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef date = { 0 };
 80026da:	2300      	movs	r3, #0
 80026dc:	607b      	str	r3, [r7, #4]

	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 80026de:	f107 0308 	add.w	r3, r7, #8
 80026e2:	2200      	movs	r2, #0
 80026e4:	4619      	mov	r1, r3
 80026e6:	480d      	ldr	r0, [pc, #52]	; (800271c <dateOnDisplay+0x58>)
 80026e8:	f004 fb4c 	bl	8006d84 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 80026ec:	1d3b      	adds	r3, r7, #4
 80026ee:	2200      	movs	r2, #0
 80026f0:	4619      	mov	r1, r3
 80026f2:	480a      	ldr	r0, [pc, #40]	; (800271c <dateOnDisplay+0x58>)
 80026f4:	f004 fc29 	bl	8006f4a <HAL_RTC_GetDate>

	uint8_t month = date.Month;
 80026f8:	797b      	ldrb	r3, [r7, #5]
 80026fa:	77fb      	strb	r3, [r7, #31]
	uint8_t day = date.Date;
 80026fc:	79bb      	ldrb	r3, [r7, #6]
 80026fe:	77bb      	strb	r3, [r7, #30]

	putMonth(month);
 8002700:	7ffb      	ldrb	r3, [r7, #31]
 8002702:	4618      	mov	r0, r3
 8002704:	f7ff ff62 	bl	80025cc <putMonth>
	putDay(day);
 8002708:	7fbb      	ldrb	r3, [r7, #30]
 800270a:	4618      	mov	r0, r3
 800270c:	f7ff ff6b 	bl	80025e6 <putDay>
	ws2811_update();
 8002710:	f000 fe48 	bl	80033a4 <ws2811_update>
}
 8002714:	bf00      	nop
 8002716:	3720      	adds	r7, #32
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	200008e8 	.word	0x200008e8

08002720 <temperatureOnDisplay>:

void temperatureOnDisplay(){
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
	struct manyNumberCelcius result = destoryCelcius();
 8002726:	f7ff fe61 	bl	80023ec <destoryCelcius>
 800272a:	4603      	mov	r3, r0
 800272c:	461a      	mov	r2, r3
 800272e:	713a      	strb	r2, [r7, #4]
 8002730:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8002734:	717a      	strb	r2, [r7, #5]
 8002736:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800273a:	71bb      	strb	r3, [r7, #6]

	firstSegment(numberToMatrix(result.firstNumber));
 800273c:	793b      	ldrb	r3, [r7, #4]
 800273e:	4618      	mov	r0, r3
 8002740:	f7ff fddc 	bl	80022fc <numberToMatrix>
 8002744:	4603      	mov	r3, r0
 8002746:	4618      	mov	r0, r3
 8002748:	f7ff fc92 	bl	8002070 <firstSegment>
	secondSegment(numberToMatrix(result.secondNumber));
 800274c:	797b      	ldrb	r3, [r7, #5]
 800274e:	4618      	mov	r0, r3
 8002750:	f7ff fdd4 	bl	80022fc <numberToMatrix>
 8002754:	4603      	mov	r3, r0
 8002756:	4618      	mov	r0, r3
 8002758:	f7ff fcbc 	bl	80020d4 <secondSegment>
	thirdSegment(numberToMatrix(result.numberAfterPoint));
 800275c:	79bb      	ldrb	r3, [r7, #6]
 800275e:	4618      	mov	r0, r3
 8002760:	f7ff fdcc 	bl	80022fc <numberToMatrix>
 8002764:	4603      	mov	r3, r0
 8002766:	4618      	mov	r0, r3
 8002768:	f7ff fd64 	bl	8002234 <thirdSegment>
	celsiusMark();
 800276c:	f7ff fd34 	bl	80021d8 <celsiusMark>
	ws2811_update();
 8002770:	f000 fe18 	bl	80033a4 <ws2811_update>
}
 8002774:	bf00      	nop
 8002776:	3708      	adds	r7, #8
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <setMinutes>:

void setMinutes(uint8_t minute) {
 800277c:	b580      	push	{r7, lr}
 800277e:	b088      	sub	sp, #32
 8002780:	af00      	add	r7, sp, #0
 8002782:	4603      	mov	r3, r0
 8002784:	71fb      	strb	r3, [r7, #7]
	RTC_TimeTypeDef time = { 0 };
 8002786:	f107 030c 	add.w	r3, r7, #12
 800278a:	2200      	movs	r2, #0
 800278c:	601a      	str	r2, [r3, #0]
 800278e:	605a      	str	r2, [r3, #4]
 8002790:	609a      	str	r2, [r3, #8]
 8002792:	60da      	str	r2, [r3, #12]
 8002794:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef date = { 0 };
 8002796:	2300      	movs	r3, #0
 8002798:	60bb      	str	r3, [r7, #8]

	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 800279a:	f107 030c 	add.w	r3, r7, #12
 800279e:	2200      	movs	r2, #0
 80027a0:	4619      	mov	r1, r3
 80027a2:	480c      	ldr	r0, [pc, #48]	; (80027d4 <setMinutes+0x58>)
 80027a4:	f004 faee 	bl	8006d84 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 80027a8:	f107 0308 	add.w	r3, r7, #8
 80027ac:	2200      	movs	r2, #0
 80027ae:	4619      	mov	r1, r3
 80027b0:	4808      	ldr	r0, [pc, #32]	; (80027d4 <setMinutes+0x58>)
 80027b2:	f004 fbca 	bl	8006f4a <HAL_RTC_GetDate>

	time.Minutes = minute;
 80027b6:	79fb      	ldrb	r3, [r7, #7]
 80027b8:	737b      	strb	r3, [r7, #13]
	time.Seconds = 0;
 80027ba:	2300      	movs	r3, #0
 80027bc:	73bb      	strb	r3, [r7, #14]

	HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN);
 80027be:	f107 030c 	add.w	r3, r7, #12
 80027c2:	2200      	movs	r2, #0
 80027c4:	4619      	mov	r1, r3
 80027c6:	4803      	ldr	r0, [pc, #12]	; (80027d4 <setMinutes+0x58>)
 80027c8:	f004 fa3f 	bl	8006c4a <HAL_RTC_SetTime>
}
 80027cc:	bf00      	nop
 80027ce:	3720      	adds	r7, #32
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	200008e8 	.word	0x200008e8

080027d8 <setHours>:

void setHours(uint8_t hours) {
 80027d8:	b580      	push	{r7, lr}
 80027da:	b088      	sub	sp, #32
 80027dc:	af00      	add	r7, sp, #0
 80027de:	4603      	mov	r3, r0
 80027e0:	71fb      	strb	r3, [r7, #7]
	RTC_TimeTypeDef time = { 0 };
 80027e2:	f107 030c 	add.w	r3, r7, #12
 80027e6:	2200      	movs	r2, #0
 80027e8:	601a      	str	r2, [r3, #0]
 80027ea:	605a      	str	r2, [r3, #4]
 80027ec:	609a      	str	r2, [r3, #8]
 80027ee:	60da      	str	r2, [r3, #12]
 80027f0:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef date = { 0 };
 80027f2:	2300      	movs	r3, #0
 80027f4:	60bb      	str	r3, [r7, #8]

	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 80027f6:	f107 030c 	add.w	r3, r7, #12
 80027fa:	2200      	movs	r2, #0
 80027fc:	4619      	mov	r1, r3
 80027fe:	480c      	ldr	r0, [pc, #48]	; (8002830 <setHours+0x58>)
 8002800:	f004 fac0 	bl	8006d84 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8002804:	f107 0308 	add.w	r3, r7, #8
 8002808:	2200      	movs	r2, #0
 800280a:	4619      	mov	r1, r3
 800280c:	4808      	ldr	r0, [pc, #32]	; (8002830 <setHours+0x58>)
 800280e:	f004 fb9c 	bl	8006f4a <HAL_RTC_GetDate>

	time.Hours = hours;
 8002812:	79fb      	ldrb	r3, [r7, #7]
 8002814:	733b      	strb	r3, [r7, #12]
	time.Seconds = 0;
 8002816:	2300      	movs	r3, #0
 8002818:	73bb      	strb	r3, [r7, #14]

	HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN);
 800281a:	f107 030c 	add.w	r3, r7, #12
 800281e:	2200      	movs	r2, #0
 8002820:	4619      	mov	r1, r3
 8002822:	4803      	ldr	r0, [pc, #12]	; (8002830 <setHours+0x58>)
 8002824:	f004 fa11 	bl	8006c4a <HAL_RTC_SetTime>
}
 8002828:	bf00      	nop
 800282a:	3720      	adds	r7, #32
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	200008e8 	.word	0x200008e8

08002834 <setMonth>:

// DATA

void setMonth(uint8_t month) {
 8002834:	b580      	push	{r7, lr}
 8002836:	b088      	sub	sp, #32
 8002838:	af00      	add	r7, sp, #0
 800283a:	4603      	mov	r3, r0
 800283c:	71fb      	strb	r3, [r7, #7]
	RTC_TimeTypeDef time = { 0 };
 800283e:	f107 030c 	add.w	r3, r7, #12
 8002842:	2200      	movs	r2, #0
 8002844:	601a      	str	r2, [r3, #0]
 8002846:	605a      	str	r2, [r3, #4]
 8002848:	609a      	str	r2, [r3, #8]
 800284a:	60da      	str	r2, [r3, #12]
 800284c:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef date = { 0 };
 800284e:	2300      	movs	r3, #0
 8002850:	60bb      	str	r3, [r7, #8]

	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8002852:	f107 030c 	add.w	r3, r7, #12
 8002856:	2200      	movs	r2, #0
 8002858:	4619      	mov	r1, r3
 800285a:	480b      	ldr	r0, [pc, #44]	; (8002888 <setMonth+0x54>)
 800285c:	f004 fa92 	bl	8006d84 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8002860:	f107 0308 	add.w	r3, r7, #8
 8002864:	2200      	movs	r2, #0
 8002866:	4619      	mov	r1, r3
 8002868:	4807      	ldr	r0, [pc, #28]	; (8002888 <setMonth+0x54>)
 800286a:	f004 fb6e 	bl	8006f4a <HAL_RTC_GetDate>

	date.Month = month;
 800286e:	79fb      	ldrb	r3, [r7, #7]
 8002870:	727b      	strb	r3, [r7, #9]

	HAL_RTC_SetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8002872:	f107 0308 	add.w	r3, r7, #8
 8002876:	2200      	movs	r2, #0
 8002878:	4619      	mov	r1, r3
 800287a:	4803      	ldr	r0, [pc, #12]	; (8002888 <setMonth+0x54>)
 800287c:	f004 fade 	bl	8006e3c <HAL_RTC_SetDate>
}
 8002880:	bf00      	nop
 8002882:	3720      	adds	r7, #32
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	200008e8 	.word	0x200008e8

0800288c <setDay>:

void setDay(uint8_t day) {
 800288c:	b580      	push	{r7, lr}
 800288e:	b088      	sub	sp, #32
 8002890:	af00      	add	r7, sp, #0
 8002892:	4603      	mov	r3, r0
 8002894:	71fb      	strb	r3, [r7, #7]
	RTC_TimeTypeDef time = { 0 };
 8002896:	f107 030c 	add.w	r3, r7, #12
 800289a:	2200      	movs	r2, #0
 800289c:	601a      	str	r2, [r3, #0]
 800289e:	605a      	str	r2, [r3, #4]
 80028a0:	609a      	str	r2, [r3, #8]
 80028a2:	60da      	str	r2, [r3, #12]
 80028a4:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef date = { 0 };
 80028a6:	2300      	movs	r3, #0
 80028a8:	60bb      	str	r3, [r7, #8]

	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 80028aa:	f107 030c 	add.w	r3, r7, #12
 80028ae:	2200      	movs	r2, #0
 80028b0:	4619      	mov	r1, r3
 80028b2:	480b      	ldr	r0, [pc, #44]	; (80028e0 <setDay+0x54>)
 80028b4:	f004 fa66 	bl	8006d84 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 80028b8:	f107 0308 	add.w	r3, r7, #8
 80028bc:	2200      	movs	r2, #0
 80028be:	4619      	mov	r1, r3
 80028c0:	4807      	ldr	r0, [pc, #28]	; (80028e0 <setDay+0x54>)
 80028c2:	f004 fb42 	bl	8006f4a <HAL_RTC_GetDate>

	date.Date = day;
 80028c6:	79fb      	ldrb	r3, [r7, #7]
 80028c8:	72bb      	strb	r3, [r7, #10]

	HAL_RTC_SetDate(&hrtc, &date, RTC_FORMAT_BIN);
 80028ca:	f107 0308 	add.w	r3, r7, #8
 80028ce:	2200      	movs	r2, #0
 80028d0:	4619      	mov	r1, r3
 80028d2:	4803      	ldr	r0, [pc, #12]	; (80028e0 <setDay+0x54>)
 80028d4:	f004 fab2 	bl	8006e3c <HAL_RTC_SetDate>
}
 80028d8:	bf00      	nop
 80028da:	3720      	adds	r7, #32
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	200008e8 	.word	0x200008e8

080028e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028ea:	4b0f      	ldr	r3, [pc, #60]	; (8002928 <HAL_MspInit+0x44>)
 80028ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028ee:	4a0e      	ldr	r2, [pc, #56]	; (8002928 <HAL_MspInit+0x44>)
 80028f0:	f043 0301 	orr.w	r3, r3, #1
 80028f4:	6613      	str	r3, [r2, #96]	; 0x60
 80028f6:	4b0c      	ldr	r3, [pc, #48]	; (8002928 <HAL_MspInit+0x44>)
 80028f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	607b      	str	r3, [r7, #4]
 8002900:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002902:	4b09      	ldr	r3, [pc, #36]	; (8002928 <HAL_MspInit+0x44>)
 8002904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002906:	4a08      	ldr	r2, [pc, #32]	; (8002928 <HAL_MspInit+0x44>)
 8002908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800290c:	6593      	str	r3, [r2, #88]	; 0x58
 800290e:	4b06      	ldr	r3, [pc, #24]	; (8002928 <HAL_MspInit+0x44>)
 8002910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002916:	603b      	str	r3, [r7, #0]
 8002918:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800291a:	bf00      	nop
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	40021000 	.word	0x40021000

0800292c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002930:	e7fe      	b.n	8002930 <NMI_Handler+0x4>

08002932 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002932:	b480      	push	{r7}
 8002934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002936:	e7fe      	b.n	8002936 <HardFault_Handler+0x4>

08002938 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800293c:	e7fe      	b.n	800293c <MemManage_Handler+0x4>

0800293e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800293e:	b480      	push	{r7}
 8002940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002942:	e7fe      	b.n	8002942 <BusFault_Handler+0x4>

08002944 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002948:	e7fe      	b.n	8002948 <UsageFault_Handler+0x4>

0800294a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800294a:	b480      	push	{r7}
 800294c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800294e:	bf00      	nop
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800295c:	bf00      	nop
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr

08002966 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002966:	b480      	push	{r7}
 8002968:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800296a:	bf00      	nop
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002978:	f000 fdd8 	bl	800352c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800297c:	bf00      	nop
 800297e:	bd80      	pop	{r7, pc}

08002980 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8002984:	4802      	ldr	r0, [pc, #8]	; (8002990 <DMA1_Channel1_IRQHandler+0x10>)
 8002986:	f002 fb2f 	bl	8004fe8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800298a:	bf00      	nop
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	200009f8 	.word	0x200009f8

08002994 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002998:	4802      	ldr	r0, [pc, #8]	; (80029a4 <TIM2_IRQHandler+0x10>)
 800299a:	f005 fadf 	bl	8007f5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800299e:	bf00      	nop
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	200009ac 	.word	0x200009ac

080029a8 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80029ac:	4802      	ldr	r0, [pc, #8]	; (80029b8 <RTC_Alarm_IRQHandler+0x10>)
 80029ae:	f004 fc55 	bl	800725c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80029b2:	bf00      	nop
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	200008e8 	.word	0x200008e8

080029bc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80029c0:	4802      	ldr	r0, [pc, #8]	; (80029cc <TIM6_DAC_IRQHandler+0x10>)
 80029c2:	f005 facb 	bl	8007f5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80029c6:	bf00      	nop
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	20000960 	.word	0x20000960

080029d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
	return 1;
 80029d4:	2301      	movs	r3, #1
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <_kill>:

int _kill(int pid, int sig)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80029ea:	f007 fb91 	bl	800a110 <__errno>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2216      	movs	r2, #22
 80029f2:	601a      	str	r2, [r3, #0]
	return -1;
 80029f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3708      	adds	r7, #8
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <_exit>:

void _exit (int status)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002a08:	f04f 31ff 	mov.w	r1, #4294967295
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f7ff ffe7 	bl	80029e0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002a12:	e7fe      	b.n	8002a12 <_exit+0x12>

08002a14 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a20:	2300      	movs	r3, #0
 8002a22:	617b      	str	r3, [r7, #20]
 8002a24:	e00a      	b.n	8002a3c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002a26:	f3af 8000 	nop.w
 8002a2a:	4601      	mov	r1, r0
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	1c5a      	adds	r2, r3, #1
 8002a30:	60ba      	str	r2, [r7, #8]
 8002a32:	b2ca      	uxtb	r2, r1
 8002a34:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	3301      	adds	r3, #1
 8002a3a:	617b      	str	r3, [r7, #20]
 8002a3c:	697a      	ldr	r2, [r7, #20]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	dbf0      	blt.n	8002a26 <_read+0x12>
	}

return len;
 8002a44:	687b      	ldr	r3, [r7, #4]
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3718      	adds	r7, #24
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b086      	sub	sp, #24
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	60f8      	str	r0, [r7, #12]
 8002a56:	60b9      	str	r1, [r7, #8]
 8002a58:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	617b      	str	r3, [r7, #20]
 8002a5e:	e009      	b.n	8002a74 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	1c5a      	adds	r2, r3, #1
 8002a64:	60ba      	str	r2, [r7, #8]
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7fe fbf7 	bl	800125c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	3301      	adds	r3, #1
 8002a72:	617b      	str	r3, [r7, #20]
 8002a74:	697a      	ldr	r2, [r7, #20]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	dbf1      	blt.n	8002a60 <_write+0x12>
	}
	return len;
 8002a7c:	687b      	ldr	r3, [r7, #4]
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3718      	adds	r7, #24
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <_close>:

int _close(int file)
{
 8002a86:	b480      	push	{r7}
 8002a88:	b083      	sub	sp, #12
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
	return -1;
 8002a8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr

08002a9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	b083      	sub	sp, #12
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
 8002aa6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002aae:	605a      	str	r2, [r3, #4]
	return 0;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr

08002abe <_isatty>:

int _isatty(int file)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	b083      	sub	sp, #12
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
	return 1;
 8002ac6:	2301      	movs	r3, #1
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	607a      	str	r2, [r7, #4]
	return 0;
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3714      	adds	r7, #20
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
	...

08002af0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002af8:	4a14      	ldr	r2, [pc, #80]	; (8002b4c <_sbrk+0x5c>)
 8002afa:	4b15      	ldr	r3, [pc, #84]	; (8002b50 <_sbrk+0x60>)
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b04:	4b13      	ldr	r3, [pc, #76]	; (8002b54 <_sbrk+0x64>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d102      	bne.n	8002b12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b0c:	4b11      	ldr	r3, [pc, #68]	; (8002b54 <_sbrk+0x64>)
 8002b0e:	4a12      	ldr	r2, [pc, #72]	; (8002b58 <_sbrk+0x68>)
 8002b10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b12:	4b10      	ldr	r3, [pc, #64]	; (8002b54 <_sbrk+0x64>)
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4413      	add	r3, r2
 8002b1a:	693a      	ldr	r2, [r7, #16]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d207      	bcs.n	8002b30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b20:	f007 faf6 	bl	800a110 <__errno>
 8002b24:	4603      	mov	r3, r0
 8002b26:	220c      	movs	r2, #12
 8002b28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b2e:	e009      	b.n	8002b44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b30:	4b08      	ldr	r3, [pc, #32]	; (8002b54 <_sbrk+0x64>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b36:	4b07      	ldr	r3, [pc, #28]	; (8002b54 <_sbrk+0x64>)
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	4a05      	ldr	r2, [pc, #20]	; (8002b54 <_sbrk+0x64>)
 8002b40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b42:	68fb      	ldr	r3, [r7, #12]
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3718      	adds	r7, #24
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	20018000 	.word	0x20018000
 8002b50:	00000400 	.word	0x00000400
 8002b54:	200002a0 	.word	0x200002a0
 8002b58:	20000ad8 	.word	0x20000ad8

08002b5c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002b60:	4b15      	ldr	r3, [pc, #84]	; (8002bb8 <SystemInit+0x5c>)
 8002b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b66:	4a14      	ldr	r2, [pc, #80]	; (8002bb8 <SystemInit+0x5c>)
 8002b68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002b70:	4b12      	ldr	r3, [pc, #72]	; (8002bbc <SystemInit+0x60>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a11      	ldr	r2, [pc, #68]	; (8002bbc <SystemInit+0x60>)
 8002b76:	f043 0301 	orr.w	r3, r3, #1
 8002b7a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002b7c:	4b0f      	ldr	r3, [pc, #60]	; (8002bbc <SystemInit+0x60>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002b82:	4b0e      	ldr	r3, [pc, #56]	; (8002bbc <SystemInit+0x60>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a0d      	ldr	r2, [pc, #52]	; (8002bbc <SystemInit+0x60>)
 8002b88:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002b8c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002b90:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002b92:	4b0a      	ldr	r3, [pc, #40]	; (8002bbc <SystemInit+0x60>)
 8002b94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b98:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002b9a:	4b08      	ldr	r3, [pc, #32]	; (8002bbc <SystemInit+0x60>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a07      	ldr	r2, [pc, #28]	; (8002bbc <SystemInit+0x60>)
 8002ba0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ba4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002ba6:	4b05      	ldr	r3, [pc, #20]	; (8002bbc <SystemInit+0x60>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	619a      	str	r2, [r3, #24]
}
 8002bac:	bf00      	nop
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	e000ed00 	.word	0xe000ed00
 8002bbc:	40021000 	.word	0x40021000

08002bc0 <Thermister>:


#include "temperature_sensor.h"

// Wzor ze strony producenta
double Thermister(uint32_t RawADC) {
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  double Temp;
    Temp = log(((10240000 / (1024-RawADC)) - 10000));
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8002bce:	4a36      	ldr	r2, [pc, #216]	; (8002ca8 <Thermister+0xe8>)
 8002bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bd4:	f5a3 531c 	sub.w	r3, r3, #9984	; 0x2700
 8002bd8:	3b10      	subs	r3, #16
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7fd fc92 	bl	8000504 <__aeabi_ui2d>
 8002be0:	4602      	mov	r2, r0
 8002be2:	460b      	mov	r3, r1
 8002be4:	ec43 2b10 	vmov	d0, r2, r3
 8002be8:	f009 ffae 	bl	800cb48 <log>
 8002bec:	ed87 0b02 	vstr	d0, [r7, #8]
    Temp = 1 / (0.001129148 + (0.000234125 + (0.0000000876741 * Temp * Temp )) * Temp );
 8002bf0:	a325      	add	r3, pc, #148	; (adr r3, 8002c88 <Thermister+0xc8>)
 8002bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002bfa:	f7fd fcfd 	bl	80005f8 <__aeabi_dmul>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	460b      	mov	r3, r1
 8002c02:	4610      	mov	r0, r2
 8002c04:	4619      	mov	r1, r3
 8002c06:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c0a:	f7fd fcf5 	bl	80005f8 <__aeabi_dmul>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	460b      	mov	r3, r1
 8002c12:	4610      	mov	r0, r2
 8002c14:	4619      	mov	r1, r3
 8002c16:	a31e      	add	r3, pc, #120	; (adr r3, 8002c90 <Thermister+0xd0>)
 8002c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c1c:	f7fd fb36 	bl	800028c <__adddf3>
 8002c20:	4602      	mov	r2, r0
 8002c22:	460b      	mov	r3, r1
 8002c24:	4610      	mov	r0, r2
 8002c26:	4619      	mov	r1, r3
 8002c28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c2c:	f7fd fce4 	bl	80005f8 <__aeabi_dmul>
 8002c30:	4602      	mov	r2, r0
 8002c32:	460b      	mov	r3, r1
 8002c34:	4610      	mov	r0, r2
 8002c36:	4619      	mov	r1, r3
 8002c38:	a317      	add	r3, pc, #92	; (adr r3, 8002c98 <Thermister+0xd8>)
 8002c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c3e:	f7fd fb25 	bl	800028c <__adddf3>
 8002c42:	4602      	mov	r2, r0
 8002c44:	460b      	mov	r3, r1
 8002c46:	f04f 0000 	mov.w	r0, #0
 8002c4a:	4918      	ldr	r1, [pc, #96]	; (8002cac <Thermister+0xec>)
 8002c4c:	f7fd fdfe 	bl	800084c <__aeabi_ddiv>
 8002c50:	4602      	mov	r2, r0
 8002c52:	460b      	mov	r3, r1
 8002c54:	e9c7 2302 	strd	r2, r3, [r7, #8]
    Temp = Temp - 273.15;
 8002c58:	a311      	add	r3, pc, #68	; (adr r3, 8002ca0 <Thermister+0xe0>)
 8002c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c5e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002c62:	f7fd fb11 	bl	8000288 <__aeabi_dsub>
 8002c66:	4602      	mov	r2, r0
 8002c68:	460b      	mov	r3, r1
 8002c6a:	e9c7 2302 	strd	r2, r3, [r7, #8]
    return Temp;
 8002c6e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c72:	ec43 2b17 	vmov	d7, r2, r3
  return Temp;
}
 8002c76:	eeb0 0a47 	vmov.f32	s0, s14
 8002c7a:	eef0 0a67 	vmov.f32	s1, s15
 8002c7e:	3710      	adds	r7, #16
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	f3af 8000 	nop.w
 8002c88:	14170d19 	.word	0x14170d19
 8002c8c:	3e7788eb 	.word	0x3e7788eb
 8002c90:	6fb4c3c2 	.word	0x6fb4c3c2
 8002c94:	3f2eafee 	.word	0x3f2eafee
 8002c98:	6edeb890 	.word	0x6edeb890
 8002c9c:	3f527ffd 	.word	0x3f527ffd
 8002ca0:	66666666 	.word	0x66666666
 8002ca4:	40711266 	.word	0x40711266
 8002ca8:	009c4000 	.word	0x009c4000
 8002cac:	3ff00000 	.word	0x3ff00000

08002cb0 <temperatureMeasure>:



// Pomiar temperatury
double temperatureMeasure(){
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
	// Kalibracja
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8002cb6:	217f      	movs	r1, #127	; 0x7f
 8002cb8:	4812      	ldr	r0, [pc, #72]	; (8002d04 <temperatureMeasure+0x54>)
 8002cba:	f001 fe5b 	bl	8004974 <HAL_ADCEx_Calibration_Start>

	// Start pomiaru:
	HAL_ADC_Start(&hadc1);
 8002cbe:	4811      	ldr	r0, [pc, #68]	; (8002d04 <temperatureMeasure+0x54>)
 8002cc0:	f000 ffb4 	bl	8003c2c <HAL_ADC_Start>
	// Czekanie na wynik:
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8002cc4:	f04f 31ff 	mov.w	r1, #4294967295
 8002cc8:	480e      	ldr	r0, [pc, #56]	; (8002d04 <temperatureMeasure+0x54>)
 8002cca:	f001 f869 	bl	8003da0 <HAL_ADC_PollForConversion>

	// Pobranie wartosci napiecia z termistora
	uint32_t value=HAL_ADC_GetValue(&hadc1);
 8002cce:	480d      	ldr	r0, [pc, #52]	; (8002d04 <temperatureMeasure+0x54>)
 8002cd0:	f001 f93e 	bl	8003f50 <HAL_ADC_GetValue>
 8002cd4:	60f8      	str	r0, [r7, #12]

	// Przeksztalcenie na temperature
	double temperature =Thermister(value);
 8002cd6:	68f8      	ldr	r0, [r7, #12]
 8002cd8:	f7ff ff72 	bl	8002bc0 <Thermister>
 8002cdc:	ed87 0b00 	vstr	d0, [r7]


	printf("ADC= %lu temperature %lf \n, ", value, temperature);
 8002ce0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ce4:	68f9      	ldr	r1, [r7, #12]
 8002ce6:	4808      	ldr	r0, [pc, #32]	; (8002d08 <temperatureMeasure+0x58>)
 8002ce8:	f007 feae 	bl	800aa48 <iprintf>

	return temperature;
 8002cec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002cf0:	ec43 2b17 	vmov	d7, r2, r3

	}
 8002cf4:	eeb0 0a47 	vmov.f32	s0, s14
 8002cf8:	eef0 0a67 	vmov.f32	s1, s15
 8002cfc:	3710      	adds	r7, #16
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	20000884 	.word	0x20000884
 8002d08:	0800cf84 	.word	0x0800cf84

08002d0c <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
DMA_HandleTypeDef hdma_tim4_ch1;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b090      	sub	sp, #64	; 0x40
 8002d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d12:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002d16:	2200      	movs	r2, #0
 8002d18:	601a      	str	r2, [r3, #0]
 8002d1a:	605a      	str	r2, [r3, #4]
 8002d1c:	609a      	str	r2, [r3, #8]
 8002d1e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002d20:	f107 031c 	add.w	r3, r7, #28
 8002d24:	2200      	movs	r2, #0
 8002d26:	601a      	str	r2, [r3, #0]
 8002d28:	605a      	str	r2, [r3, #4]
 8002d2a:	609a      	str	r2, [r3, #8]
 8002d2c:	60da      	str	r2, [r3, #12]
 8002d2e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d30:	f107 0310 	add.w	r3, r7, #16
 8002d34:	2200      	movs	r2, #0
 8002d36:	601a      	str	r2, [r3, #0]
 8002d38:	605a      	str	r2, [r3, #4]
 8002d3a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002d3c:	463b      	mov	r3, r7
 8002d3e:	2200      	movs	r2, #0
 8002d40:	601a      	str	r2, [r3, #0]
 8002d42:	605a      	str	r2, [r3, #4]
 8002d44:	609a      	str	r2, [r3, #8]
 8002d46:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002d48:	4b35      	ldr	r3, [pc, #212]	; (8002e20 <MX_TIM2_Init+0x114>)
 8002d4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002d4e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8002d50:	4b33      	ldr	r3, [pc, #204]	; (8002e20 <MX_TIM2_Init+0x114>)
 8002d52:	224f      	movs	r2, #79	; 0x4f
 8002d54:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d56:	4b32      	ldr	r3, [pc, #200]	; (8002e20 <MX_TIM2_Init+0x114>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002d5c:	4b30      	ldr	r3, [pc, #192]	; (8002e20 <MX_TIM2_Init+0x114>)
 8002d5e:	f04f 32ff 	mov.w	r2, #4294967295
 8002d62:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d64:	4b2e      	ldr	r3, [pc, #184]	; (8002e20 <MX_TIM2_Init+0x114>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d6a:	4b2d      	ldr	r3, [pc, #180]	; (8002e20 <MX_TIM2_Init+0x114>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002d70:	482b      	ldr	r0, [pc, #172]	; (8002e20 <MX_TIM2_Init+0x114>)
 8002d72:	f004 fb95 	bl	80074a0 <HAL_TIM_Base_Init>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d001      	beq.n	8002d80 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8002d7c:	f7fe fc4e 	bl	800161c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d84:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002d86:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	4824      	ldr	r0, [pc, #144]	; (8002e20 <MX_TIM2_Init+0x114>)
 8002d8e:	f005 fbb5 	bl	80084fc <HAL_TIM_ConfigClockSource>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d001      	beq.n	8002d9c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8002d98:	f7fe fc40 	bl	800161c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002d9c:	4820      	ldr	r0, [pc, #128]	; (8002e20 <MX_TIM2_Init+0x114>)
 8002d9e:	f004 ff31 	bl	8007c04 <HAL_TIM_IC_Init>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d001      	beq.n	8002dac <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8002da8:	f7fe fc38 	bl	800161c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002dac:	2304      	movs	r3, #4
 8002dae:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 8002db0:	2340      	movs	r3, #64	; 0x40
 8002db2:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002db4:	2300      	movs	r3, #0
 8002db6:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8002db8:	2300      	movs	r3, #0
 8002dba:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8002dbc:	f107 031c 	add.w	r3, r7, #28
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	4817      	ldr	r0, [pc, #92]	; (8002e20 <MX_TIM2_Init+0x114>)
 8002dc4:	f005 fc63 	bl	800868e <HAL_TIM_SlaveConfigSynchro>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 8002dce:	f7fe fc25 	bl	800161c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002dda:	f107 0310 	add.w	r3, r7, #16
 8002dde:	4619      	mov	r1, r3
 8002de0:	480f      	ldr	r0, [pc, #60]	; (8002e20 <MX_TIM2_Init+0x114>)
 8002de2:	f006 fbd3 	bl	800958c <HAL_TIMEx_MasterConfigSynchronization>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d001      	beq.n	8002df0 <MX_TIM2_Init+0xe4>
  {
    Error_Handler();
 8002dec:	f7fe fc16 	bl	800161c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002df0:	2302      	movs	r3, #2
 8002df2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002df4:	2301      	movs	r3, #1
 8002df6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002e00:	463b      	mov	r3, r7
 8002e02:	2200      	movs	r2, #0
 8002e04:	4619      	mov	r1, r3
 8002e06:	4806      	ldr	r0, [pc, #24]	; (8002e20 <MX_TIM2_Init+0x114>)
 8002e08:	f005 f9c7 	bl	800819a <HAL_TIM_IC_ConfigChannel>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <MX_TIM2_Init+0x10a>
  {
    Error_Handler();
 8002e12:	f7fe fc03 	bl	800161c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002e16:	bf00      	nop
 8002e18:	3740      	adds	r7, #64	; 0x40
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	200009ac 	.word	0x200009ac

08002e24 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b08e      	sub	sp, #56	; 0x38
 8002e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e2e:	2200      	movs	r2, #0
 8002e30:	601a      	str	r2, [r3, #0]
 8002e32:	605a      	str	r2, [r3, #4]
 8002e34:	609a      	str	r2, [r3, #8]
 8002e36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e38:	f107 031c 	add.w	r3, r7, #28
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	601a      	str	r2, [r3, #0]
 8002e40:	605a      	str	r2, [r3, #4]
 8002e42:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e44:	463b      	mov	r3, r7
 8002e46:	2200      	movs	r2, #0
 8002e48:	601a      	str	r2, [r3, #0]
 8002e4a:	605a      	str	r2, [r3, #4]
 8002e4c:	609a      	str	r2, [r3, #8]
 8002e4e:	60da      	str	r2, [r3, #12]
 8002e50:	611a      	str	r2, [r3, #16]
 8002e52:	615a      	str	r2, [r3, #20]
 8002e54:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002e56:	4b2c      	ldr	r3, [pc, #176]	; (8002f08 <MX_TIM4_Init+0xe4>)
 8002e58:	4a2c      	ldr	r2, [pc, #176]	; (8002f0c <MX_TIM4_Init+0xe8>)
 8002e5a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002e5c:	4b2a      	ldr	r3, [pc, #168]	; (8002f08 <MX_TIM4_Init+0xe4>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e62:	4b29      	ldr	r3, [pc, #164]	; (8002f08 <MX_TIM4_Init+0xe4>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 199;
 8002e68:	4b27      	ldr	r3, [pc, #156]	; (8002f08 <MX_TIM4_Init+0xe4>)
 8002e6a:	22c7      	movs	r2, #199	; 0xc7
 8002e6c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e6e:	4b26      	ldr	r3, [pc, #152]	; (8002f08 <MX_TIM4_Init+0xe4>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e74:	4b24      	ldr	r3, [pc, #144]	; (8002f08 <MX_TIM4_Init+0xe4>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002e7a:	4823      	ldr	r0, [pc, #140]	; (8002f08 <MX_TIM4_Init+0xe4>)
 8002e7c:	f004 fb10 	bl	80074a0 <HAL_TIM_Base_Init>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8002e86:	f7fe fbc9 	bl	800161c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e8e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002e90:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e94:	4619      	mov	r1, r3
 8002e96:	481c      	ldr	r0, [pc, #112]	; (8002f08 <MX_TIM4_Init+0xe4>)
 8002e98:	f005 fb30 	bl	80084fc <HAL_TIM_ConfigClockSource>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8002ea2:	f7fe fbbb 	bl	800161c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002ea6:	4818      	ldr	r0, [pc, #96]	; (8002f08 <MX_TIM4_Init+0xe4>)
 8002ea8:	f004 fc2a 	bl	8007700 <HAL_TIM_PWM_Init>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d001      	beq.n	8002eb6 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8002eb2:	f7fe fbb3 	bl	800161c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002ebe:	f107 031c 	add.w	r3, r7, #28
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	4810      	ldr	r0, [pc, #64]	; (8002f08 <MX_TIM4_Init+0xe4>)
 8002ec6:	f006 fb61 	bl	800958c <HAL_TIMEx_MasterConfigSynchronization>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d001      	beq.n	8002ed4 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8002ed0:	f7fe fba4 	bl	800161c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ed4:	2360      	movs	r3, #96	; 0x60
 8002ed6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002edc:	2300      	movs	r3, #0
 8002ede:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ee4:	463b      	mov	r3, r7
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	4619      	mov	r1, r3
 8002eea:	4807      	ldr	r0, [pc, #28]	; (8002f08 <MX_TIM4_Init+0xe4>)
 8002eec:	f005 f9f2 	bl	80082d4 <HAL_TIM_PWM_ConfigChannel>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8002ef6:	f7fe fb91 	bl	800161c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002efa:	4803      	ldr	r0, [pc, #12]	; (8002f08 <MX_TIM4_Init+0xe4>)
 8002efc:	f000 f8d6 	bl	80030ac <HAL_TIM_MspPostInit>

}
 8002f00:	bf00      	nop
 8002f02:	3738      	adds	r7, #56	; 0x38
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	20000914 	.word	0x20000914
 8002f0c:	40000800 	.word	0x40000800

08002f10 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f16:	1d3b      	adds	r3, r7, #4
 8002f18:	2200      	movs	r2, #0
 8002f1a:	601a      	str	r2, [r3, #0]
 8002f1c:	605a      	str	r2, [r3, #4]
 8002f1e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002f20:	4b15      	ldr	r3, [pc, #84]	; (8002f78 <MX_TIM6_Init+0x68>)
 8002f22:	4a16      	ldr	r2, [pc, #88]	; (8002f7c <MX_TIM6_Init+0x6c>)
 8002f24:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 8002f26:	4b14      	ldr	r3, [pc, #80]	; (8002f78 <MX_TIM6_Init+0x68>)
 8002f28:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8002f2c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f2e:	4b12      	ldr	r3, [pc, #72]	; (8002f78 <MX_TIM6_Init+0x68>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 2999;
 8002f34:	4b10      	ldr	r3, [pc, #64]	; (8002f78 <MX_TIM6_Init+0x68>)
 8002f36:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8002f3a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f3c:	4b0e      	ldr	r3, [pc, #56]	; (8002f78 <MX_TIM6_Init+0x68>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002f42:	480d      	ldr	r0, [pc, #52]	; (8002f78 <MX_TIM6_Init+0x68>)
 8002f44:	f004 faac 	bl	80074a0 <HAL_TIM_Base_Init>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002f4e:	f7fe fb65 	bl	800161c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f52:	2300      	movs	r3, #0
 8002f54:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f56:	2300      	movs	r3, #0
 8002f58:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002f5a:	1d3b      	adds	r3, r7, #4
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	4806      	ldr	r0, [pc, #24]	; (8002f78 <MX_TIM6_Init+0x68>)
 8002f60:	f006 fb14 	bl	800958c <HAL_TIMEx_MasterConfigSynchronization>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d001      	beq.n	8002f6e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8002f6a:	f7fe fb57 	bl	800161c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002f6e:	bf00      	nop
 8002f70:	3710      	adds	r7, #16
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	20000960 	.word	0x20000960
 8002f7c:	40001000 	.word	0x40001000

08002f80 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b08c      	sub	sp, #48	; 0x30
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f88:	f107 031c 	add.w	r3, r7, #28
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	601a      	str	r2, [r3, #0]
 8002f90:	605a      	str	r2, [r3, #4]
 8002f92:	609a      	str	r2, [r3, #8]
 8002f94:	60da      	str	r2, [r3, #12]
 8002f96:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fa0:	d129      	bne.n	8002ff6 <HAL_TIM_Base_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002fa2:	4b3d      	ldr	r3, [pc, #244]	; (8003098 <HAL_TIM_Base_MspInit+0x118>)
 8002fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa6:	4a3c      	ldr	r2, [pc, #240]	; (8003098 <HAL_TIM_Base_MspInit+0x118>)
 8002fa8:	f043 0301 	orr.w	r3, r3, #1
 8002fac:	6593      	str	r3, [r2, #88]	; 0x58
 8002fae:	4b3a      	ldr	r3, [pc, #232]	; (8003098 <HAL_TIM_Base_MspInit+0x118>)
 8002fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	61bb      	str	r3, [r7, #24]
 8002fb8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fba:	4b37      	ldr	r3, [pc, #220]	; (8003098 <HAL_TIM_Base_MspInit+0x118>)
 8002fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fbe:	4a36      	ldr	r2, [pc, #216]	; (8003098 <HAL_TIM_Base_MspInit+0x118>)
 8002fc0:	f043 0301 	orr.w	r3, r3, #1
 8002fc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002fc6:	4b34      	ldr	r3, [pc, #208]	; (8003098 <HAL_TIM_Base_MspInit+0x118>)
 8002fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fca:	f003 0301 	and.w	r3, r3, #1
 8002fce:	617b      	str	r3, [r7, #20]
 8002fd0:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fd6:	2302      	movs	r3, #2
 8002fd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fe6:	f107 031c 	add.w	r3, r7, #28
 8002fea:	4619      	mov	r1, r3
 8002fec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ff0:	f002 f8da 	bl	80051a8 <HAL_GPIO_Init>
    __HAL_RCC_TIM6_CLK_ENABLE();
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8002ff4:	e04c      	b.n	8003090 <HAL_TIM_Base_MspInit+0x110>
  else if(tim_baseHandle->Instance==TIM4)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a28      	ldr	r2, [pc, #160]	; (800309c <HAL_TIM_Base_MspInit+0x11c>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d136      	bne.n	800306e <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003000:	4b25      	ldr	r3, [pc, #148]	; (8003098 <HAL_TIM_Base_MspInit+0x118>)
 8003002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003004:	4a24      	ldr	r2, [pc, #144]	; (8003098 <HAL_TIM_Base_MspInit+0x118>)
 8003006:	f043 0304 	orr.w	r3, r3, #4
 800300a:	6593      	str	r3, [r2, #88]	; 0x58
 800300c:	4b22      	ldr	r3, [pc, #136]	; (8003098 <HAL_TIM_Base_MspInit+0x118>)
 800300e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003010:	f003 0304 	and.w	r3, r3, #4
 8003014:	613b      	str	r3, [r7, #16]
 8003016:	693b      	ldr	r3, [r7, #16]
    hdma_tim4_ch1.Instance = DMA1_Channel1;
 8003018:	4b21      	ldr	r3, [pc, #132]	; (80030a0 <HAL_TIM_Base_MspInit+0x120>)
 800301a:	4a22      	ldr	r2, [pc, #136]	; (80030a4 <HAL_TIM_Base_MspInit+0x124>)
 800301c:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Request = DMA_REQUEST_6;
 800301e:	4b20      	ldr	r3, [pc, #128]	; (80030a0 <HAL_TIM_Base_MspInit+0x120>)
 8003020:	2206      	movs	r2, #6
 8003022:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003024:	4b1e      	ldr	r3, [pc, #120]	; (80030a0 <HAL_TIM_Base_MspInit+0x120>)
 8003026:	2210      	movs	r2, #16
 8003028:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800302a:	4b1d      	ldr	r3, [pc, #116]	; (80030a0 <HAL_TIM_Base_MspInit+0x120>)
 800302c:	2200      	movs	r2, #0
 800302e:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003030:	4b1b      	ldr	r3, [pc, #108]	; (80030a0 <HAL_TIM_Base_MspInit+0x120>)
 8003032:	2280      	movs	r2, #128	; 0x80
 8003034:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003036:	4b1a      	ldr	r3, [pc, #104]	; (80030a0 <HAL_TIM_Base_MspInit+0x120>)
 8003038:	f44f 7280 	mov.w	r2, #256	; 0x100
 800303c:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800303e:	4b18      	ldr	r3, [pc, #96]	; (80030a0 <HAL_TIM_Base_MspInit+0x120>)
 8003040:	2200      	movs	r2, #0
 8003042:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_NORMAL;
 8003044:	4b16      	ldr	r3, [pc, #88]	; (80030a0 <HAL_TIM_Base_MspInit+0x120>)
 8003046:	2200      	movs	r2, #0
 8003048:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800304a:	4b15      	ldr	r3, [pc, #84]	; (80030a0 <HAL_TIM_Base_MspInit+0x120>)
 800304c:	2200      	movs	r2, #0
 800304e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 8003050:	4813      	ldr	r0, [pc, #76]	; (80030a0 <HAL_TIM_Base_MspInit+0x120>)
 8003052:	f001 feb1 	bl	8004db8 <HAL_DMA_Init>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d001      	beq.n	8003060 <HAL_TIM_Base_MspInit+0xe0>
      Error_Handler();
 800305c:	f7fe fade 	bl	800161c <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4a0f      	ldr	r2, [pc, #60]	; (80030a0 <HAL_TIM_Base_MspInit+0x120>)
 8003064:	625a      	str	r2, [r3, #36]	; 0x24
 8003066:	4a0e      	ldr	r2, [pc, #56]	; (80030a0 <HAL_TIM_Base_MspInit+0x120>)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6293      	str	r3, [r2, #40]	; 0x28
}
 800306c:	e010      	b.n	8003090 <HAL_TIM_Base_MspInit+0x110>
  else if(tim_baseHandle->Instance==TIM6)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a0d      	ldr	r2, [pc, #52]	; (80030a8 <HAL_TIM_Base_MspInit+0x128>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d10b      	bne.n	8003090 <HAL_TIM_Base_MspInit+0x110>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003078:	4b07      	ldr	r3, [pc, #28]	; (8003098 <HAL_TIM_Base_MspInit+0x118>)
 800307a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800307c:	4a06      	ldr	r2, [pc, #24]	; (8003098 <HAL_TIM_Base_MspInit+0x118>)
 800307e:	f043 0310 	orr.w	r3, r3, #16
 8003082:	6593      	str	r3, [r2, #88]	; 0x58
 8003084:	4b04      	ldr	r3, [pc, #16]	; (8003098 <HAL_TIM_Base_MspInit+0x118>)
 8003086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003088:	f003 0310 	and.w	r3, r3, #16
 800308c:	60fb      	str	r3, [r7, #12]
 800308e:	68fb      	ldr	r3, [r7, #12]
}
 8003090:	bf00      	nop
 8003092:	3730      	adds	r7, #48	; 0x30
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	40021000 	.word	0x40021000
 800309c:	40000800 	.word	0x40000800
 80030a0:	200009f8 	.word	0x200009f8
 80030a4:	40020008 	.word	0x40020008
 80030a8:	40001000 	.word	0x40001000

080030ac <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b088      	sub	sp, #32
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030b4:	f107 030c 	add.w	r3, r7, #12
 80030b8:	2200      	movs	r2, #0
 80030ba:	601a      	str	r2, [r3, #0]
 80030bc:	605a      	str	r2, [r3, #4]
 80030be:	609a      	str	r2, [r3, #8]
 80030c0:	60da      	str	r2, [r3, #12]
 80030c2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a11      	ldr	r2, [pc, #68]	; (8003110 <HAL_TIM_MspPostInit+0x64>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d11b      	bne.n	8003106 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030ce:	4b11      	ldr	r3, [pc, #68]	; (8003114 <HAL_TIM_MspPostInit+0x68>)
 80030d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030d2:	4a10      	ldr	r2, [pc, #64]	; (8003114 <HAL_TIM_MspPostInit+0x68>)
 80030d4:	f043 0302 	orr.w	r3, r3, #2
 80030d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030da:	4b0e      	ldr	r3, [pc, #56]	; (8003114 <HAL_TIM_MspPostInit+0x68>)
 80030dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	60bb      	str	r3, [r7, #8]
 80030e4:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80030e6:	2340      	movs	r3, #64	; 0x40
 80030e8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ea:	2302      	movs	r3, #2
 80030ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ee:	2300      	movs	r3, #0
 80030f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030f2:	2300      	movs	r3, #0
 80030f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80030f6:	2302      	movs	r3, #2
 80030f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030fa:	f107 030c 	add.w	r3, r7, #12
 80030fe:	4619      	mov	r1, r3
 8003100:	4805      	ldr	r0, [pc, #20]	; (8003118 <HAL_TIM_MspPostInit+0x6c>)
 8003102:	f002 f851 	bl	80051a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003106:	bf00      	nop
 8003108:	3720      	adds	r7, #32
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	40000800 	.word	0x40000800
 8003114:	40021000 	.word	0x40021000
 8003118:	48000400 	.word	0x48000400

0800311c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003120:	4b14      	ldr	r3, [pc, #80]	; (8003174 <MX_USART2_UART_Init+0x58>)
 8003122:	4a15      	ldr	r2, [pc, #84]	; (8003178 <MX_USART2_UART_Init+0x5c>)
 8003124:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003126:	4b13      	ldr	r3, [pc, #76]	; (8003174 <MX_USART2_UART_Init+0x58>)
 8003128:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800312c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800312e:	4b11      	ldr	r3, [pc, #68]	; (8003174 <MX_USART2_UART_Init+0x58>)
 8003130:	2200      	movs	r2, #0
 8003132:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003134:	4b0f      	ldr	r3, [pc, #60]	; (8003174 <MX_USART2_UART_Init+0x58>)
 8003136:	2200      	movs	r2, #0
 8003138:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800313a:	4b0e      	ldr	r3, [pc, #56]	; (8003174 <MX_USART2_UART_Init+0x58>)
 800313c:	2200      	movs	r2, #0
 800313e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003140:	4b0c      	ldr	r3, [pc, #48]	; (8003174 <MX_USART2_UART_Init+0x58>)
 8003142:	220c      	movs	r2, #12
 8003144:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003146:	4b0b      	ldr	r3, [pc, #44]	; (8003174 <MX_USART2_UART_Init+0x58>)
 8003148:	2200      	movs	r2, #0
 800314a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800314c:	4b09      	ldr	r3, [pc, #36]	; (8003174 <MX_USART2_UART_Init+0x58>)
 800314e:	2200      	movs	r2, #0
 8003150:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003152:	4b08      	ldr	r3, [pc, #32]	; (8003174 <MX_USART2_UART_Init+0x58>)
 8003154:	2200      	movs	r2, #0
 8003156:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003158:	4b06      	ldr	r3, [pc, #24]	; (8003174 <MX_USART2_UART_Init+0x58>)
 800315a:	2200      	movs	r2, #0
 800315c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800315e:	4805      	ldr	r0, [pc, #20]	; (8003174 <MX_USART2_UART_Init+0x58>)
 8003160:	f006 faba 	bl	80096d8 <HAL_UART_Init>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d001      	beq.n	800316e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800316a:	f7fe fa57 	bl	800161c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800316e:	bf00      	nop
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	20000a40 	.word	0x20000a40
 8003178:	40004400 	.word	0x40004400

0800317c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b0ac      	sub	sp, #176	; 0xb0
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003184:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003188:	2200      	movs	r2, #0
 800318a:	601a      	str	r2, [r3, #0]
 800318c:	605a      	str	r2, [r3, #4]
 800318e:	609a      	str	r2, [r3, #8]
 8003190:	60da      	str	r2, [r3, #12]
 8003192:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003194:	f107 0314 	add.w	r3, r7, #20
 8003198:	2288      	movs	r2, #136	; 0x88
 800319a:	2100      	movs	r1, #0
 800319c:	4618      	mov	r0, r3
 800319e:	f006 ffe1 	bl	800a164 <memset>
  if(uartHandle->Instance==USART2)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a21      	ldr	r2, [pc, #132]	; (800322c <HAL_UART_MspInit+0xb0>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d13b      	bne.n	8003224 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80031ac:	2302      	movs	r3, #2
 80031ae:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80031b0:	2300      	movs	r3, #0
 80031b2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80031b4:	f107 0314 	add.w	r3, r7, #20
 80031b8:	4618      	mov	r0, r3
 80031ba:	f002 ffff 	bl	80061bc <HAL_RCCEx_PeriphCLKConfig>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d001      	beq.n	80031c8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80031c4:	f7fe fa2a 	bl	800161c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80031c8:	4b19      	ldr	r3, [pc, #100]	; (8003230 <HAL_UART_MspInit+0xb4>)
 80031ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031cc:	4a18      	ldr	r2, [pc, #96]	; (8003230 <HAL_UART_MspInit+0xb4>)
 80031ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031d2:	6593      	str	r3, [r2, #88]	; 0x58
 80031d4:	4b16      	ldr	r3, [pc, #88]	; (8003230 <HAL_UART_MspInit+0xb4>)
 80031d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031dc:	613b      	str	r3, [r7, #16]
 80031de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031e0:	4b13      	ldr	r3, [pc, #76]	; (8003230 <HAL_UART_MspInit+0xb4>)
 80031e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031e4:	4a12      	ldr	r2, [pc, #72]	; (8003230 <HAL_UART_MspInit+0xb4>)
 80031e6:	f043 0301 	orr.w	r3, r3, #1
 80031ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031ec:	4b10      	ldr	r3, [pc, #64]	; (8003230 <HAL_UART_MspInit+0xb4>)
 80031ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031f0:	f003 0301 	and.w	r3, r3, #1
 80031f4:	60fb      	str	r3, [r7, #12]
 80031f6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80031f8:	230c      	movs	r3, #12
 80031fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031fe:	2302      	movs	r3, #2
 8003200:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003204:	2300      	movs	r3, #0
 8003206:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800320a:	2303      	movs	r3, #3
 800320c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003210:	2307      	movs	r3, #7
 8003212:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003216:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800321a:	4619      	mov	r1, r3
 800321c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003220:	f001 ffc2 	bl	80051a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003224:	bf00      	nop
 8003226:	37b0      	adds	r7, #176	; 0xb0
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	40004400 	.word	0x40004400
 8003230:	40021000 	.word	0x40021000

08003234 <set_byte>:

static uint8_t led_buffer[RESET_LEN+24*LED_N+1];

// Konwertowanie 8 bitowej liczby na 8 bajtow;

static void set_byte(uint32_t pos, uint8_t value){
 8003234:	b480      	push	{r7}
 8003236:	b085      	sub	sp, #20
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	460b      	mov	r3, r1
 800323e:	70fb      	strb	r3, [r7, #3]
	int i;
	for(i=0; i<8;i++){
 8003240:	2300      	movs	r3, #0
 8003242:	60fb      	str	r3, [r7, #12]
 8003244:	e016      	b.n	8003274 <set_byte+0x40>
		if(value & 0x80){
 8003246:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800324a:	2b00      	cmp	r3, #0
 800324c:	da06      	bge.n	800325c <set_byte+0x28>
			led_buffer[pos+i]=BIT_1_TIME;
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4413      	add	r3, r2
 8003254:	4a0c      	ldr	r2, [pc, #48]	; (8003288 <set_byte+0x54>)
 8003256:	2140      	movs	r1, #64	; 0x40
 8003258:	54d1      	strb	r1, [r2, r3]
 800325a:	e005      	b.n	8003268 <set_byte+0x34>
		}else{
			led_buffer[pos+i]=BIT_0_TIME;
 800325c:	68fa      	ldr	r2, [r7, #12]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4413      	add	r3, r2
 8003262:	4a09      	ldr	r2, [pc, #36]	; (8003288 <set_byte+0x54>)
 8003264:	2120      	movs	r1, #32
 8003266:	54d1      	strb	r1, [r2, r3]
		}
		value<<=1;
 8003268:	78fb      	ldrb	r3, [r7, #3]
 800326a:	005b      	lsls	r3, r3, #1
 800326c:	70fb      	strb	r3, [r7, #3]
	for(i=0; i<8;i++){
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	3301      	adds	r3, #1
 8003272:	60fb      	str	r3, [r7, #12]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2b07      	cmp	r3, #7
 8003278:	dde5      	ble.n	8003246 <set_byte+0x12>
	}
}
 800327a:	bf00      	nop
 800327c:	bf00      	nop
 800327e:	3714      	adds	r7, #20
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr
 8003288:	200002a4 	.word	0x200002a4

0800328c <ws2811_init>:


// DEFINICJE FUNKCJI

void ws2811_init(void){
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
	int i;

	// Wysłanie resetu:
	for(i=0;i<RESET_LEN;i++){
 8003292:	2300      	movs	r3, #0
 8003294:	607b      	str	r3, [r7, #4]
 8003296:	e007      	b.n	80032a8 <ws2811_init+0x1c>
		led_buffer[i]=0;
 8003298:	4a13      	ldr	r2, [pc, #76]	; (80032e8 <ws2811_init+0x5c>)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4413      	add	r3, r2
 800329e:	2200      	movs	r2, #0
 80032a0:	701a      	strb	r2, [r3, #0]
	for(i=0;i<RESET_LEN;i++){
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	3301      	adds	r3, #1
 80032a6:	607b      	str	r3, [r7, #4]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2b63      	cmp	r3, #99	; 0x63
 80032ac:	ddf4      	ble.n	8003298 <ws2811_init+0xc>
	}

	// Zgaszenie wszystkich diod:
	for(i=0; i<24*LED_N;i++){
 80032ae:	2300      	movs	r3, #0
 80032b0:	607b      	str	r3, [r7, #4]
 80032b2:	e007      	b.n	80032c4 <ws2811_init+0x38>
		led_buffer[RESET_LEN+i]=BIT_0_TIME;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	3364      	adds	r3, #100	; 0x64
 80032b8:	4a0b      	ldr	r2, [pc, #44]	; (80032e8 <ws2811_init+0x5c>)
 80032ba:	2120      	movs	r1, #32
 80032bc:	54d1      	strb	r1, [r2, r3]
	for(i=0; i<24*LED_N;i++){
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	3301      	adds	r3, #1
 80032c2:	607b      	str	r3, [r7, #4]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f5b3 6fae 	cmp.w	r3, #1392	; 0x570
 80032ca:	dbf3      	blt.n	80032b4 <ws2811_init+0x28>
	}

	// Wypełnienie na koniec:

	led_buffer[RESET_LEN+24*LED_N]=100;
 80032cc:	4b06      	ldr	r3, [pc, #24]	; (80032e8 <ws2811_init+0x5c>)
 80032ce:	2264      	movs	r2, #100	; 0x64
 80032d0:	f883 25d4 	strb.w	r2, [r3, #1492]	; 0x5d4

	// Wlączenie timera:
	HAL_TIM_Base_Start(&htim4);
 80032d4:	4805      	ldr	r0, [pc, #20]	; (80032ec <ws2811_init+0x60>)
 80032d6:	f004 f93b 	bl	8007550 <HAL_TIM_Base_Start>
	// Zacznij odswiezanie:
	ws2811_update();
 80032da:	f000 f863 	bl	80033a4 <ws2811_update>

}
 80032de:	bf00      	nop
 80032e0:	3708      	adds	r7, #8
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	200002a4 	.word	0x200002a4
 80032ec:	20000914 	.word	0x20000914

080032f0 <ws2811_hourDisplayReset>:

void ws2811_hourDisplayReset(void){
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
	int i;

		// Wysłanie resetu:
		for(i=0;i<RESET_LEN;i++){
 80032f6:	2300      	movs	r3, #0
 80032f8:	607b      	str	r3, [r7, #4]
 80032fa:	e007      	b.n	800330c <ws2811_hourDisplayReset+0x1c>
			led_buffer[i]=0;
 80032fc:	4a11      	ldr	r2, [pc, #68]	; (8003344 <ws2811_hourDisplayReset+0x54>)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4413      	add	r3, r2
 8003302:	2200      	movs	r2, #0
 8003304:	701a      	strb	r2, [r3, #0]
		for(i=0;i<RESET_LEN;i++){
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	3301      	adds	r3, #1
 800330a:	607b      	str	r3, [r7, #4]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2b63      	cmp	r3, #99	; 0x63
 8003310:	ddf4      	ble.n	80032fc <ws2811_hourDisplayReset+0xc>
		}

		// Zgaszenie wszystkich diod:
		for(i=0; i<24*LED_N_HOURS_FOR_SECTOR;i++){
 8003312:	2300      	movs	r3, #0
 8003314:	607b      	str	r3, [r7, #4]
 8003316:	e007      	b.n	8003328 <ws2811_hourDisplayReset+0x38>
			led_buffer[RESET_LEN+i]=BIT_0_TIME;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	3364      	adds	r3, #100	; 0x64
 800331c:	4a09      	ldr	r2, [pc, #36]	; (8003344 <ws2811_hourDisplayReset+0x54>)
 800331e:	2120      	movs	r1, #32
 8003320:	54d1      	strb	r1, [r2, r3]
		for(i=0; i<24*LED_N_HOURS_FOR_SECTOR;i++){
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	3301      	adds	r3, #1
 8003326:	607b      	str	r3, [r7, #4]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f5b3 7f28 	cmp.w	r3, #672	; 0x2a0
 800332e:	dbf3      	blt.n	8003318 <ws2811_hourDisplayReset+0x28>
		}

		// Wypełnienie na koniec:

		led_buffer[RESET_LEN+24*LED_N]=100;
 8003330:	4b04      	ldr	r3, [pc, #16]	; (8003344 <ws2811_hourDisplayReset+0x54>)
 8003332:	2264      	movs	r2, #100	; 0x64
 8003334:	f883 25d4 	strb.w	r2, [r3, #1492]	; 0x5d4

		// Zacznij odswiezanie:
		ws2811_update();
 8003338:	f000 f834 	bl	80033a4 <ws2811_update>
}
 800333c:	bf00      	nop
 800333e:	3708      	adds	r7, #8
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	200002a4 	.word	0x200002a4

08003348 <ws2811_minuteDisplayReset>:

void ws2811_minuteDisplayReset(void){
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
	int i;

		// Wysłanie resetu:
		for(i=0;i<RESET_LEN;i++){
 800334e:	2300      	movs	r3, #0
 8003350:	607b      	str	r3, [r7, #4]
 8003352:	e007      	b.n	8003364 <ws2811_minuteDisplayReset+0x1c>
			led_buffer[i]=0;
 8003354:	4a12      	ldr	r2, [pc, #72]	; (80033a0 <ws2811_minuteDisplayReset+0x58>)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4413      	add	r3, r2
 800335a:	2200      	movs	r2, #0
 800335c:	701a      	strb	r2, [r3, #0]
		for(i=0;i<RESET_LEN;i++){
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	3301      	adds	r3, #1
 8003362:	607b      	str	r3, [r7, #4]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2b63      	cmp	r3, #99	; 0x63
 8003368:	ddf4      	ble.n	8003354 <ws2811_minuteDisplayReset+0xc>
		}

		// Zgaszenie wszystkich diod:
		for(i=0; i<24*LED_N_MINUTES_FOR_SECTOR;i++){
 800336a:	2300      	movs	r3, #0
 800336c:	607b      	str	r3, [r7, #4]
 800336e:	e008      	b.n	8003382 <ws2811_minuteDisplayReset+0x3a>
			led_buffer[RESET_LEN+24*LED_N_HOURS_FOR_SECTOR+24*2+i]=BIT_0_TIME;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8003376:	4a0a      	ldr	r2, [pc, #40]	; (80033a0 <ws2811_minuteDisplayReset+0x58>)
 8003378:	2120      	movs	r1, #32
 800337a:	54d1      	strb	r1, [r2, r3]
		for(i=0; i<24*LED_N_MINUTES_FOR_SECTOR;i++){
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	3301      	adds	r3, #1
 8003380:	607b      	str	r3, [r7, #4]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f5b3 7f28 	cmp.w	r3, #672	; 0x2a0
 8003388:	dbf2      	blt.n	8003370 <ws2811_minuteDisplayReset+0x28>
		}

		// Wypełnienie na koniec:

		led_buffer[RESET_LEN+24*LED_N]=100;
 800338a:	4b05      	ldr	r3, [pc, #20]	; (80033a0 <ws2811_minuteDisplayReset+0x58>)
 800338c:	2264      	movs	r2, #100	; 0x64
 800338e:	f883 25d4 	strb.w	r2, [r3, #1492]	; 0x5d4

		// Zacznij odswiezanie:
		ws2811_update();
 8003392:	f000 f807 	bl	80033a4 <ws2811_update>
}
 8003396:	bf00      	nop
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	200002a4 	.word	0x200002a4

080033a4 <ws2811_update>:

void ws2811_update(void){
 80033a4:	b580      	push	{r7, lr}
 80033a6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start_DMA(&htim4, TIM_CHANNEL_1, (uint32_t*)led_buffer, sizeof(led_buffer));
 80033a8:	f240 53d5 	movw	r3, #1493	; 0x5d5
 80033ac:	4a03      	ldr	r2, [pc, #12]	; (80033bc <ws2811_update+0x18>)
 80033ae:	2100      	movs	r1, #0
 80033b0:	4803      	ldr	r0, [pc, #12]	; (80033c0 <ws2811_update+0x1c>)
 80033b2:	f004 fa07 	bl	80077c4 <HAL_TIM_PWM_Start_DMA>
}
 80033b6:	bf00      	nop
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	200002a4 	.word	0x200002a4
 80033c0:	20000914 	.word	0x20000914

080033c4 <ws2811_set_color>:

	}
}


void ws2811_set_color(uint32_t led, uint8_t red, uint8_t green, uint8_t blue){
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	4608      	mov	r0, r1
 80033ce:	4611      	mov	r1, r2
 80033d0:	461a      	mov	r2, r3
 80033d2:	4603      	mov	r3, r0
 80033d4:	70fb      	strb	r3, [r7, #3]
 80033d6:	460b      	mov	r3, r1
 80033d8:	70bb      	strb	r3, [r7, #2]
 80033da:	4613      	mov	r3, r2
 80033dc:	707b      	strb	r3, [r7, #1]
	if(led<LED_N){
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2b39      	cmp	r3, #57	; 0x39
 80033e2:	d820      	bhi.n	8003426 <ws2811_set_color+0x62>
		set_byte(RESET_LEN+24*led, green);
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	4613      	mov	r3, r2
 80033e8:	005b      	lsls	r3, r3, #1
 80033ea:	4413      	add	r3, r2
 80033ec:	00db      	lsls	r3, r3, #3
 80033ee:	3364      	adds	r3, #100	; 0x64
 80033f0:	78ba      	ldrb	r2, [r7, #2]
 80033f2:	4611      	mov	r1, r2
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7ff ff1d 	bl	8003234 <set_byte>
		set_byte(RESET_LEN+24*led+8, red);
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	4613      	mov	r3, r2
 80033fe:	005b      	lsls	r3, r3, #1
 8003400:	4413      	add	r3, r2
 8003402:	00db      	lsls	r3, r3, #3
 8003404:	336c      	adds	r3, #108	; 0x6c
 8003406:	78fa      	ldrb	r2, [r7, #3]
 8003408:	4611      	mov	r1, r2
 800340a:	4618      	mov	r0, r3
 800340c:	f7ff ff12 	bl	8003234 <set_byte>
		set_byte(RESET_LEN+24*led+16, blue);
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	4613      	mov	r3, r2
 8003414:	005b      	lsls	r3, r3, #1
 8003416:	4413      	add	r3, r2
 8003418:	00db      	lsls	r3, r3, #3
 800341a:	3374      	adds	r3, #116	; 0x74
 800341c:	787a      	ldrb	r2, [r7, #1]
 800341e:	4611      	mov	r1, r2
 8003420:	4618      	mov	r0, r3
 8003422:	f7ff ff07 	bl	8003234 <set_byte>
	}
}
 8003426:	bf00      	nop
 8003428:	3708      	adds	r7, #8
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
	...

08003430 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003430:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003468 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003434:	f7ff fb92 	bl	8002b5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003438:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800343a:	e003      	b.n	8003444 <LoopCopyDataInit>

0800343c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800343c:	4b0b      	ldr	r3, [pc, #44]	; (800346c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800343e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003440:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003442:	3104      	adds	r1, #4

08003444 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003444:	480a      	ldr	r0, [pc, #40]	; (8003470 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003446:	4b0b      	ldr	r3, [pc, #44]	; (8003474 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003448:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800344a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800344c:	d3f6      	bcc.n	800343c <CopyDataInit>
	ldr	r2, =_sbss
 800344e:	4a0a      	ldr	r2, [pc, #40]	; (8003478 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003450:	e002      	b.n	8003458 <LoopFillZerobss>

08003452 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003452:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003454:	f842 3b04 	str.w	r3, [r2], #4

08003458 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003458:	4b08      	ldr	r3, [pc, #32]	; (800347c <LoopForever+0x16>)
	cmp	r2, r3
 800345a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800345c:	d3f9      	bcc.n	8003452 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800345e:	f006 fe5d 	bl	800a11c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003462:	f7fd ffcb 	bl	80013fc <main>

08003466 <LoopForever>:

LoopForever:
    b LoopForever
 8003466:	e7fe      	b.n	8003466 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003468:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800346c:	0800d3dc 	.word	0x0800d3dc
	ldr	r0, =_sdata
 8003470:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003474:	20000264 	.word	0x20000264
	ldr	r2, =_sbss
 8003478:	20000264 	.word	0x20000264
	ldr	r3, = _ebss
 800347c:	20000ad8 	.word	0x20000ad8

08003480 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003480:	e7fe      	b.n	8003480 <ADC1_2_IRQHandler>

08003482 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003482:	b580      	push	{r7, lr}
 8003484:	b082      	sub	sp, #8
 8003486:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003488:	2300      	movs	r3, #0
 800348a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800348c:	2003      	movs	r0, #3
 800348e:	f001 fc51 	bl	8004d34 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003492:	2000      	movs	r0, #0
 8003494:	f000 f80e 	bl	80034b4 <HAL_InitTick>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d002      	beq.n	80034a4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	71fb      	strb	r3, [r7, #7]
 80034a2:	e001      	b.n	80034a8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80034a4:	f7ff fa1e 	bl	80028e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80034a8:	79fb      	ldrb	r3, [r7, #7]
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3708      	adds	r7, #8
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
	...

080034b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80034bc:	2300      	movs	r3, #0
 80034be:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80034c0:	4b17      	ldr	r3, [pc, #92]	; (8003520 <HAL_InitTick+0x6c>)
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d023      	beq.n	8003510 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80034c8:	4b16      	ldr	r3, [pc, #88]	; (8003524 <HAL_InitTick+0x70>)
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	4b14      	ldr	r3, [pc, #80]	; (8003520 <HAL_InitTick+0x6c>)
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	4619      	mov	r1, r3
 80034d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80034da:	fbb2 f3f3 	udiv	r3, r2, r3
 80034de:	4618      	mov	r0, r3
 80034e0:	f001 fc5d 	bl	8004d9e <HAL_SYSTICK_Config>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d10f      	bne.n	800350a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2b0f      	cmp	r3, #15
 80034ee:	d809      	bhi.n	8003504 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034f0:	2200      	movs	r2, #0
 80034f2:	6879      	ldr	r1, [r7, #4]
 80034f4:	f04f 30ff 	mov.w	r0, #4294967295
 80034f8:	f001 fc27 	bl	8004d4a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80034fc:	4a0a      	ldr	r2, [pc, #40]	; (8003528 <HAL_InitTick+0x74>)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6013      	str	r3, [r2, #0]
 8003502:	e007      	b.n	8003514 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	73fb      	strb	r3, [r7, #15]
 8003508:	e004      	b.n	8003514 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	73fb      	strb	r3, [r7, #15]
 800350e:	e001      	b.n	8003514 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003514:	7bfb      	ldrb	r3, [r7, #15]
}
 8003516:	4618      	mov	r0, r3
 8003518:	3710      	adds	r7, #16
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	2000008c 	.word	0x2000008c
 8003524:	20000084 	.word	0x20000084
 8003528:	20000088 	.word	0x20000088

0800352c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800352c:	b480      	push	{r7}
 800352e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003530:	4b06      	ldr	r3, [pc, #24]	; (800354c <HAL_IncTick+0x20>)
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	461a      	mov	r2, r3
 8003536:	4b06      	ldr	r3, [pc, #24]	; (8003550 <HAL_IncTick+0x24>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4413      	add	r3, r2
 800353c:	4a04      	ldr	r2, [pc, #16]	; (8003550 <HAL_IncTick+0x24>)
 800353e:	6013      	str	r3, [r2, #0]
}
 8003540:	bf00      	nop
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	2000008c 	.word	0x2000008c
 8003550:	20000ac4 	.word	0x20000ac4

08003554 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003554:	b480      	push	{r7}
 8003556:	af00      	add	r7, sp, #0
  return uwTick;
 8003558:	4b03      	ldr	r3, [pc, #12]	; (8003568 <HAL_GetTick+0x14>)
 800355a:	681b      	ldr	r3, [r3, #0]
}
 800355c:	4618      	mov	r0, r3
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	20000ac4 	.word	0x20000ac4

0800356c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	431a      	orrs	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	609a      	str	r2, [r3, #8]
}
 8003586:	bf00      	nop
 8003588:	370c      	adds	r7, #12
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr

08003592 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003592:	b480      	push	{r7}
 8003594:	b083      	sub	sp, #12
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
 800359a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	431a      	orrs	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	609a      	str	r2, [r3, #8]
}
 80035ac:	bf00      	nop
 80035ae:	370c      	adds	r7, #12
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr

080035b8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b087      	sub	sp, #28
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	607a      	str	r2, [r7, #4]
 80035e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	3360      	adds	r3, #96	; 0x60
 80035e6:	461a      	mov	r2, r3
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	4413      	add	r3, r2
 80035ee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	4b08      	ldr	r3, [pc, #32]	; (8003618 <LL_ADC_SetOffset+0x44>)
 80035f6:	4013      	ands	r3, r2
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80035fe:	683a      	ldr	r2, [r7, #0]
 8003600:	430a      	orrs	r2, r1
 8003602:	4313      	orrs	r3, r2
 8003604:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800360c:	bf00      	nop
 800360e:	371c      	adds	r7, #28
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr
 8003618:	03fff000 	.word	0x03fff000

0800361c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800361c:	b480      	push	{r7}
 800361e:	b085      	sub	sp, #20
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	3360      	adds	r3, #96	; 0x60
 800362a:	461a      	mov	r2, r3
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	4413      	add	r3, r2
 8003632:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800363c:	4618      	mov	r0, r3
 800363e:	3714      	adds	r7, #20
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003648:	b480      	push	{r7}
 800364a:	b087      	sub	sp, #28
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	3360      	adds	r3, #96	; 0x60
 8003658:	461a      	mov	r2, r3
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	4413      	add	r3, r2
 8003660:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	431a      	orrs	r2, r3
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003672:	bf00      	nop
 8003674:	371c      	adds	r7, #28
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr

0800367e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800367e:	b480      	push	{r7}
 8003680:	b083      	sub	sp, #12
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800368e:	2b00      	cmp	r3, #0
 8003690:	d101      	bne.n	8003696 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003692:	2301      	movs	r3, #1
 8003694:	e000      	b.n	8003698 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003696:	2300      	movs	r3, #0
}
 8003698:	4618      	mov	r0, r3
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b087      	sub	sp, #28
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	3330      	adds	r3, #48	; 0x30
 80036b4:	461a      	mov	r2, r3
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	0a1b      	lsrs	r3, r3, #8
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	f003 030c 	and.w	r3, r3, #12
 80036c0:	4413      	add	r3, r2
 80036c2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	f003 031f 	and.w	r3, r3, #31
 80036ce:	211f      	movs	r1, #31
 80036d0:	fa01 f303 	lsl.w	r3, r1, r3
 80036d4:	43db      	mvns	r3, r3
 80036d6:	401a      	ands	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	0e9b      	lsrs	r3, r3, #26
 80036dc:	f003 011f 	and.w	r1, r3, #31
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	f003 031f 	and.w	r3, r3, #31
 80036e6:	fa01 f303 	lsl.w	r3, r1, r3
 80036ea:	431a      	orrs	r2, r3
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80036f0:	bf00      	nop
 80036f2:	371c      	adds	r7, #28
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b087      	sub	sp, #28
 8003700:	af00      	add	r7, sp, #0
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	3314      	adds	r3, #20
 800370c:	461a      	mov	r2, r3
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	0e5b      	lsrs	r3, r3, #25
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	f003 0304 	and.w	r3, r3, #4
 8003718:	4413      	add	r3, r2
 800371a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	0d1b      	lsrs	r3, r3, #20
 8003724:	f003 031f 	and.w	r3, r3, #31
 8003728:	2107      	movs	r1, #7
 800372a:	fa01 f303 	lsl.w	r3, r1, r3
 800372e:	43db      	mvns	r3, r3
 8003730:	401a      	ands	r2, r3
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	0d1b      	lsrs	r3, r3, #20
 8003736:	f003 031f 	and.w	r3, r3, #31
 800373a:	6879      	ldr	r1, [r7, #4]
 800373c:	fa01 f303 	lsl.w	r3, r1, r3
 8003740:	431a      	orrs	r2, r3
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003746:	bf00      	nop
 8003748:	371c      	adds	r7, #28
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
	...

08003754 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003754:	b480      	push	{r7}
 8003756:	b085      	sub	sp, #20
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800376c:	43db      	mvns	r3, r3
 800376e:	401a      	ands	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f003 0318 	and.w	r3, r3, #24
 8003776:	4908      	ldr	r1, [pc, #32]	; (8003798 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003778:	40d9      	lsrs	r1, r3
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	400b      	ands	r3, r1
 800377e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003782:	431a      	orrs	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800378a:	bf00      	nop
 800378c:	3714      	adds	r7, #20
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop
 8003798:	0007ffff 	.word	0x0007ffff

0800379c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f003 031f 	and.w	r3, r3, #31
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr

080037d4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80037e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	6093      	str	r3, [r2, #8]
}
 80037ec:	bf00      	nop
 80037ee:	370c      	adds	r7, #12
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003808:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800380c:	d101      	bne.n	8003812 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800380e:	2301      	movs	r3, #1
 8003810:	e000      	b.n	8003814 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003812:	2300      	movs	r3, #0
}
 8003814:	4618      	mov	r0, r3
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003830:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003834:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800383c:	bf00      	nop
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003858:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800385c:	d101      	bne.n	8003862 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800385e:	2301      	movs	r3, #1
 8003860:	e000      	b.n	8003864 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003880:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003884:	f043 0201 	orr.w	r2, r3, #1
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800388c:	bf00      	nop
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80038a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80038ac:	f043 0202 	orr.w	r2, r3, #2
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80038b4:	bf00      	nop
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr

080038c0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f003 0301 	and.w	r3, r3, #1
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d101      	bne.n	80038d8 <LL_ADC_IsEnabled+0x18>
 80038d4:	2301      	movs	r3, #1
 80038d6:	e000      	b.n	80038da <LL_ADC_IsEnabled+0x1a>
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr

080038e6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80038e6:	b480      	push	{r7}
 80038e8:	b083      	sub	sp, #12
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f003 0302 	and.w	r3, r3, #2
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d101      	bne.n	80038fe <LL_ADC_IsDisableOngoing+0x18>
 80038fa:	2301      	movs	r3, #1
 80038fc:	e000      	b.n	8003900 <LL_ADC_IsDisableOngoing+0x1a>
 80038fe:	2300      	movs	r3, #0
}
 8003900:	4618      	mov	r0, r3
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr

0800390c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800391c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003920:	f043 0204 	orr.w	r2, r3, #4
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f003 0304 	and.w	r3, r3, #4
 8003944:	2b04      	cmp	r3, #4
 8003946:	d101      	bne.n	800394c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003948:	2301      	movs	r3, #1
 800394a:	e000      	b.n	800394e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	370c      	adds	r7, #12
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr

0800395a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800395a:	b480      	push	{r7}
 800395c:	b083      	sub	sp, #12
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f003 0308 	and.w	r3, r3, #8
 800396a:	2b08      	cmp	r3, #8
 800396c:	d101      	bne.n	8003972 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800396e:	2301      	movs	r3, #1
 8003970:	e000      	b.n	8003974 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003980:	b590      	push	{r4, r7, lr}
 8003982:	b089      	sub	sp, #36	; 0x24
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003988:	2300      	movs	r3, #0
 800398a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800398c:	2300      	movs	r3, #0
 800398e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d101      	bne.n	800399a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e136      	b.n	8003c08 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d109      	bne.n	80039bc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f7fd fafb 	bl	8000fa4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4618      	mov	r0, r3
 80039c2:	f7ff ff19 	bl	80037f8 <LL_ADC_IsDeepPowerDownEnabled>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d004      	beq.n	80039d6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7ff feff 	bl	80037d4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4618      	mov	r0, r3
 80039dc:	f7ff ff34 	bl	8003848 <LL_ADC_IsInternalRegulatorEnabled>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d115      	bne.n	8003a12 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7ff ff18 	bl	8003820 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80039f0:	4b87      	ldr	r3, [pc, #540]	; (8003c10 <HAL_ADC_Init+0x290>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	099b      	lsrs	r3, r3, #6
 80039f6:	4a87      	ldr	r2, [pc, #540]	; (8003c14 <HAL_ADC_Init+0x294>)
 80039f8:	fba2 2303 	umull	r2, r3, r2, r3
 80039fc:	099b      	lsrs	r3, r3, #6
 80039fe:	3301      	adds	r3, #1
 8003a00:	005b      	lsls	r3, r3, #1
 8003a02:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003a04:	e002      	b.n	8003a0c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1f9      	bne.n	8003a06 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7ff ff16 	bl	8003848 <LL_ADC_IsInternalRegulatorEnabled>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d10d      	bne.n	8003a3e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a26:	f043 0210 	orr.w	r2, r3, #16
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a32:	f043 0201 	orr.w	r2, r3, #1
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7ff ff76 	bl	8003934 <LL_ADC_REG_IsConversionOngoing>
 8003a48:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a4e:	f003 0310 	and.w	r3, r3, #16
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	f040 80cf 	bne.w	8003bf6 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	f040 80cb 	bne.w	8003bf6 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a64:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003a68:	f043 0202 	orr.w	r2, r3, #2
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7ff ff23 	bl	80038c0 <LL_ADC_IsEnabled>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d115      	bne.n	8003aac <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a80:	4865      	ldr	r0, [pc, #404]	; (8003c18 <HAL_ADC_Init+0x298>)
 8003a82:	f7ff ff1d 	bl	80038c0 <LL_ADC_IsEnabled>
 8003a86:	4604      	mov	r4, r0
 8003a88:	4864      	ldr	r0, [pc, #400]	; (8003c1c <HAL_ADC_Init+0x29c>)
 8003a8a:	f7ff ff19 	bl	80038c0 <LL_ADC_IsEnabled>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	431c      	orrs	r4, r3
 8003a92:	4863      	ldr	r0, [pc, #396]	; (8003c20 <HAL_ADC_Init+0x2a0>)
 8003a94:	f7ff ff14 	bl	80038c0 <LL_ADC_IsEnabled>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	4323      	orrs	r3, r4
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d105      	bne.n	8003aac <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	485f      	ldr	r0, [pc, #380]	; (8003c24 <HAL_ADC_Init+0x2a4>)
 8003aa8:	f7ff fd60 	bl	800356c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	7e5b      	ldrb	r3, [r3, #25]
 8003ab0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003ab6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003abc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003ac2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003aca:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003acc:	4313      	orrs	r3, r2
 8003ace:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d106      	bne.n	8003ae8 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ade:	3b01      	subs	r3, #1
 8003ae0:	045b      	lsls	r3, r3, #17
 8003ae2:	69ba      	ldr	r2, [r7, #24]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d009      	beq.n	8003b04 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003afc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003afe:	69ba      	ldr	r2, [r7, #24]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	68da      	ldr	r2, [r3, #12]
 8003b0a:	4b47      	ldr	r3, [pc, #284]	; (8003c28 <HAL_ADC_Init+0x2a8>)
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	6812      	ldr	r2, [r2, #0]
 8003b12:	69b9      	ldr	r1, [r7, #24]
 8003b14:	430b      	orrs	r3, r1
 8003b16:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f7ff ff09 	bl	8003934 <LL_ADC_REG_IsConversionOngoing>
 8003b22:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7ff ff16 	bl	800395a <LL_ADC_INJ_IsConversionOngoing>
 8003b2e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d13d      	bne.n	8003bb2 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d13a      	bne.n	8003bb2 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003b40:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003b48:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b58:	f023 0302 	bic.w	r3, r3, #2
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	6812      	ldr	r2, [r2, #0]
 8003b60:	69b9      	ldr	r1, [r7, #24]
 8003b62:	430b      	orrs	r3, r1
 8003b64:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d118      	bne.n	8003ba2 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003b7a:	f023 0304 	bic.w	r3, r3, #4
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003b86:	4311      	orrs	r1, r2
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003b8c:	4311      	orrs	r1, r2
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003b92:	430a      	orrs	r2, r1
 8003b94:	431a      	orrs	r2, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f042 0201 	orr.w	r2, r2, #1
 8003b9e:	611a      	str	r2, [r3, #16]
 8003ba0:	e007      	b.n	8003bb2 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	691a      	ldr	r2, [r3, #16]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f022 0201 	bic.w	r2, r2, #1
 8003bb0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d10c      	bne.n	8003bd4 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc0:	f023 010f 	bic.w	r1, r3, #15
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	69db      	ldr	r3, [r3, #28]
 8003bc8:	1e5a      	subs	r2, r3, #1
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	631a      	str	r2, [r3, #48]	; 0x30
 8003bd2:	e007      	b.n	8003be4 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f022 020f 	bic.w	r2, r2, #15
 8003be2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be8:	f023 0303 	bic.w	r3, r3, #3
 8003bec:	f043 0201 	orr.w	r2, r3, #1
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	655a      	str	r2, [r3, #84]	; 0x54
 8003bf4:	e007      	b.n	8003c06 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bfa:	f043 0210 	orr.w	r2, r3, #16
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003c06:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3724      	adds	r7, #36	; 0x24
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd90      	pop	{r4, r7, pc}
 8003c10:	20000084 	.word	0x20000084
 8003c14:	053e2d63 	.word	0x053e2d63
 8003c18:	50040000 	.word	0x50040000
 8003c1c:	50040100 	.word	0x50040100
 8003c20:	50040200 	.word	0x50040200
 8003c24:	50040300 	.word	0x50040300
 8003c28:	fff0c007 	.word	0xfff0c007

08003c2c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b086      	sub	sp, #24
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c34:	4857      	ldr	r0, [pc, #348]	; (8003d94 <HAL_ADC_Start+0x168>)
 8003c36:	f7ff fdb1 	bl	800379c <LL_ADC_GetMultimode>
 8003c3a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4618      	mov	r0, r3
 8003c42:	f7ff fe77 	bl	8003934 <LL_ADC_REG_IsConversionOngoing>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	f040 809c 	bne.w	8003d86 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d101      	bne.n	8003c5c <HAL_ADC_Start+0x30>
 8003c58:	2302      	movs	r3, #2
 8003c5a:	e097      	b.n	8003d8c <HAL_ADC_Start+0x160>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f000 fd71 	bl	800474c <ADC_Enable>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003c6e:	7dfb      	ldrb	r3, [r7, #23]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	f040 8083 	bne.w	8003d7c <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c7a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003c7e:	f023 0301 	bic.w	r3, r3, #1
 8003c82:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a42      	ldr	r2, [pc, #264]	; (8003d98 <HAL_ADC_Start+0x16c>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d002      	beq.n	8003c9a <HAL_ADC_Start+0x6e>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	e000      	b.n	8003c9c <HAL_ADC_Start+0x70>
 8003c9a:	4b40      	ldr	r3, [pc, #256]	; (8003d9c <HAL_ADC_Start+0x170>)
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	6812      	ldr	r2, [r2, #0]
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d002      	beq.n	8003caa <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d105      	bne.n	8003cb6 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cc2:	d106      	bne.n	8003cd2 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cc8:	f023 0206 	bic.w	r2, r3, #6
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	659a      	str	r2, [r3, #88]	; 0x58
 8003cd0:	e002      	b.n	8003cd8 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	221c      	movs	r2, #28
 8003cde:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a2a      	ldr	r2, [pc, #168]	; (8003d98 <HAL_ADC_Start+0x16c>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d002      	beq.n	8003cf8 <HAL_ADC_Start+0xcc>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	e000      	b.n	8003cfa <HAL_ADC_Start+0xce>
 8003cf8:	4b28      	ldr	r3, [pc, #160]	; (8003d9c <HAL_ADC_Start+0x170>)
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	6812      	ldr	r2, [r2, #0]
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d008      	beq.n	8003d14 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d005      	beq.n	8003d14 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	2b05      	cmp	r3, #5
 8003d0c:	d002      	beq.n	8003d14 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	2b09      	cmp	r3, #9
 8003d12:	d114      	bne.n	8003d3e <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d007      	beq.n	8003d32 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d26:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003d2a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7ff fde8 	bl	800390c <LL_ADC_REG_StartConversion>
 8003d3c:	e025      	b.n	8003d8a <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d42:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a12      	ldr	r2, [pc, #72]	; (8003d98 <HAL_ADC_Start+0x16c>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d002      	beq.n	8003d5a <HAL_ADC_Start+0x12e>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	e000      	b.n	8003d5c <HAL_ADC_Start+0x130>
 8003d5a:	4b10      	ldr	r3, [pc, #64]	; (8003d9c <HAL_ADC_Start+0x170>)
 8003d5c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d00f      	beq.n	8003d8a <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d6e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003d72:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	655a      	str	r2, [r3, #84]	; 0x54
 8003d7a:	e006      	b.n	8003d8a <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003d84:	e001      	b.n	8003d8a <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003d86:	2302      	movs	r3, #2
 8003d88:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003d8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3718      	adds	r7, #24
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	50040300 	.word	0x50040300
 8003d98:	50040100 	.word	0x50040100
 8003d9c:	50040000 	.word	0x50040000

08003da0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b088      	sub	sp, #32
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003daa:	4866      	ldr	r0, [pc, #408]	; (8003f44 <HAL_ADC_PollForConversion+0x1a4>)
 8003dac:	f7ff fcf6 	bl	800379c <LL_ADC_GetMultimode>
 8003db0:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	2b08      	cmp	r3, #8
 8003db8:	d102      	bne.n	8003dc0 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003dba:	2308      	movs	r3, #8
 8003dbc:	61fb      	str	r3, [r7, #28]
 8003dbe:	e02a      	b.n	8003e16 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d005      	beq.n	8003dd2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	2b05      	cmp	r3, #5
 8003dca:	d002      	beq.n	8003dd2 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	2b09      	cmp	r3, #9
 8003dd0:	d111      	bne.n	8003df6 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	f003 0301 	and.w	r3, r3, #1
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d007      	beq.n	8003df0 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de4:	f043 0220 	orr.w	r2, r3, #32
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e0a4      	b.n	8003f3a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003df0:	2304      	movs	r3, #4
 8003df2:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003df4:	e00f      	b.n	8003e16 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003df6:	4853      	ldr	r0, [pc, #332]	; (8003f44 <HAL_ADC_PollForConversion+0x1a4>)
 8003df8:	f7ff fcde 	bl	80037b8 <LL_ADC_GetMultiDMATransfer>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d007      	beq.n	8003e12 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e06:	f043 0220 	orr.w	r2, r3, #32
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e093      	b.n	8003f3a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003e12:	2304      	movs	r3, #4
 8003e14:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003e16:	f7ff fb9d 	bl	8003554 <HAL_GetTick>
 8003e1a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003e1c:	e021      	b.n	8003e62 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e24:	d01d      	beq.n	8003e62 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003e26:	f7ff fb95 	bl	8003554 <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	683a      	ldr	r2, [r7, #0]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d302      	bcc.n	8003e3c <HAL_ADC_PollForConversion+0x9c>
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d112      	bne.n	8003e62 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	4013      	ands	r3, r2
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d10b      	bne.n	8003e62 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e4e:	f043 0204 	orr.w	r2, r3, #4
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e06b      	b.n	8003f3a <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d0d6      	beq.n	8003e1e <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e74:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4618      	mov	r0, r3
 8003e82:	f7ff fbfc 	bl	800367e <LL_ADC_REG_IsTriggerSourceSWStart>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d01c      	beq.n	8003ec6 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	7e5b      	ldrb	r3, [r3, #25]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d118      	bne.n	8003ec6 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0308 	and.w	r3, r3, #8
 8003e9e:	2b08      	cmp	r3, #8
 8003ea0:	d111      	bne.n	8003ec6 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d105      	bne.n	8003ec6 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ebe:	f043 0201 	orr.w	r2, r3, #1
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a1f      	ldr	r2, [pc, #124]	; (8003f48 <HAL_ADC_PollForConversion+0x1a8>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d002      	beq.n	8003ed6 <HAL_ADC_PollForConversion+0x136>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	e000      	b.n	8003ed8 <HAL_ADC_PollForConversion+0x138>
 8003ed6:	4b1d      	ldr	r3, [pc, #116]	; (8003f4c <HAL_ADC_PollForConversion+0x1ac>)
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	6812      	ldr	r2, [r2, #0]
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d008      	beq.n	8003ef2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d005      	beq.n	8003ef2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	2b05      	cmp	r3, #5
 8003eea:	d002      	beq.n	8003ef2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	2b09      	cmp	r3, #9
 8003ef0:	d104      	bne.n	8003efc <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	61bb      	str	r3, [r7, #24]
 8003efa:	e00c      	b.n	8003f16 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a11      	ldr	r2, [pc, #68]	; (8003f48 <HAL_ADC_PollForConversion+0x1a8>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d002      	beq.n	8003f0c <HAL_ADC_PollForConversion+0x16c>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	e000      	b.n	8003f0e <HAL_ADC_PollForConversion+0x16e>
 8003f0c:	4b0f      	ldr	r3, [pc, #60]	; (8003f4c <HAL_ADC_PollForConversion+0x1ac>)
 8003f0e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	2b08      	cmp	r3, #8
 8003f1a:	d104      	bne.n	8003f26 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2208      	movs	r2, #8
 8003f22:	601a      	str	r2, [r3, #0]
 8003f24:	e008      	b.n	8003f38 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d103      	bne.n	8003f38 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	220c      	movs	r2, #12
 8003f36:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003f38:	2300      	movs	r3, #0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3720      	adds	r7, #32
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	50040300 	.word	0x50040300
 8003f48:	50040100 	.word	0x50040100
 8003f4c:	50040000 	.word	0x50040000

08003f50 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	370c      	adds	r7, #12
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr
	...

08003f6c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b0b6      	sub	sp, #216	; 0xd8
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f76:	2300      	movs	r3, #0
 8003f78:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d101      	bne.n	8003f8e <HAL_ADC_ConfigChannel+0x22>
 8003f8a:	2302      	movs	r3, #2
 8003f8c:	e3c7      	b.n	800471e <HAL_ADC_ConfigChannel+0x7b2>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2201      	movs	r2, #1
 8003f92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f7ff fcca 	bl	8003934 <LL_ADC_REG_IsConversionOngoing>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	f040 83a8 	bne.w	80046f8 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	2b05      	cmp	r3, #5
 8003fae:	d824      	bhi.n	8003ffa <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	3b02      	subs	r3, #2
 8003fb6:	2b03      	cmp	r3, #3
 8003fb8:	d81b      	bhi.n	8003ff2 <HAL_ADC_ConfigChannel+0x86>
 8003fba:	a201      	add	r2, pc, #4	; (adr r2, 8003fc0 <HAL_ADC_ConfigChannel+0x54>)
 8003fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fc0:	08003fd1 	.word	0x08003fd1
 8003fc4:	08003fd9 	.word	0x08003fd9
 8003fc8:	08003fe1 	.word	0x08003fe1
 8003fcc:	08003fe9 	.word	0x08003fe9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	220c      	movs	r2, #12
 8003fd4:	605a      	str	r2, [r3, #4]
          break;
 8003fd6:	e011      	b.n	8003ffc <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	2212      	movs	r2, #18
 8003fdc:	605a      	str	r2, [r3, #4]
          break;
 8003fde:	e00d      	b.n	8003ffc <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	2218      	movs	r2, #24
 8003fe4:	605a      	str	r2, [r3, #4]
          break;
 8003fe6:	e009      	b.n	8003ffc <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fee:	605a      	str	r2, [r3, #4]
          break;
 8003ff0:	e004      	b.n	8003ffc <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	2206      	movs	r2, #6
 8003ff6:	605a      	str	r2, [r3, #4]
          break;
 8003ff8:	e000      	b.n	8003ffc <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8003ffa:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6818      	ldr	r0, [r3, #0]
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	6859      	ldr	r1, [r3, #4]
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	461a      	mov	r2, r3
 800400a:	f7ff fb4b 	bl	80036a4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4618      	mov	r0, r3
 8004014:	f7ff fc8e 	bl	8003934 <LL_ADC_REG_IsConversionOngoing>
 8004018:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4618      	mov	r0, r3
 8004022:	f7ff fc9a 	bl	800395a <LL_ADC_INJ_IsConversionOngoing>
 8004026:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800402a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800402e:	2b00      	cmp	r3, #0
 8004030:	f040 81a6 	bne.w	8004380 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004034:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004038:	2b00      	cmp	r3, #0
 800403a:	f040 81a1 	bne.w	8004380 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6818      	ldr	r0, [r3, #0]
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	6819      	ldr	r1, [r3, #0]
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	461a      	mov	r2, r3
 800404c:	f7ff fb56 	bl	80036fc <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	695a      	ldr	r2, [r3, #20]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	08db      	lsrs	r3, r3, #3
 800405c:	f003 0303 	and.w	r3, r3, #3
 8004060:	005b      	lsls	r3, r3, #1
 8004062:	fa02 f303 	lsl.w	r3, r2, r3
 8004066:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	2b04      	cmp	r3, #4
 8004070:	d00a      	beq.n	8004088 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6818      	ldr	r0, [r3, #0]
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	6919      	ldr	r1, [r3, #16]
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004082:	f7ff faa7 	bl	80035d4 <LL_ADC_SetOffset>
 8004086:	e17b      	b.n	8004380 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2100      	movs	r1, #0
 800408e:	4618      	mov	r0, r3
 8004090:	f7ff fac4 	bl	800361c <LL_ADC_GetOffsetChannel>
 8004094:	4603      	mov	r3, r0
 8004096:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800409a:	2b00      	cmp	r3, #0
 800409c:	d10a      	bne.n	80040b4 <HAL_ADC_ConfigChannel+0x148>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2100      	movs	r1, #0
 80040a4:	4618      	mov	r0, r3
 80040a6:	f7ff fab9 	bl	800361c <LL_ADC_GetOffsetChannel>
 80040aa:	4603      	mov	r3, r0
 80040ac:	0e9b      	lsrs	r3, r3, #26
 80040ae:	f003 021f 	and.w	r2, r3, #31
 80040b2:	e01e      	b.n	80040f2 <HAL_ADC_ConfigChannel+0x186>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2100      	movs	r1, #0
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7ff faae 	bl	800361c <LL_ADC_GetOffsetChannel>
 80040c0:	4603      	mov	r3, r0
 80040c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040c6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80040ca:	fa93 f3a3 	rbit	r3, r3
 80040ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80040d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80040d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80040da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d101      	bne.n	80040e6 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80040e2:	2320      	movs	r3, #32
 80040e4:	e004      	b.n	80040f0 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80040e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80040ea:	fab3 f383 	clz	r3, r3
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d105      	bne.n	800410a <HAL_ADC_ConfigChannel+0x19e>
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	0e9b      	lsrs	r3, r3, #26
 8004104:	f003 031f 	and.w	r3, r3, #31
 8004108:	e018      	b.n	800413c <HAL_ADC_ConfigChannel+0x1d0>
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004112:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004116:	fa93 f3a3 	rbit	r3, r3
 800411a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800411e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004122:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004126:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800412a:	2b00      	cmp	r3, #0
 800412c:	d101      	bne.n	8004132 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800412e:	2320      	movs	r3, #32
 8004130:	e004      	b.n	800413c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8004132:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004136:	fab3 f383 	clz	r3, r3
 800413a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800413c:	429a      	cmp	r2, r3
 800413e:	d106      	bne.n	800414e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2200      	movs	r2, #0
 8004146:	2100      	movs	r1, #0
 8004148:	4618      	mov	r0, r3
 800414a:	f7ff fa7d 	bl	8003648 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2101      	movs	r1, #1
 8004154:	4618      	mov	r0, r3
 8004156:	f7ff fa61 	bl	800361c <LL_ADC_GetOffsetChannel>
 800415a:	4603      	mov	r3, r0
 800415c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004160:	2b00      	cmp	r3, #0
 8004162:	d10a      	bne.n	800417a <HAL_ADC_ConfigChannel+0x20e>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	2101      	movs	r1, #1
 800416a:	4618      	mov	r0, r3
 800416c:	f7ff fa56 	bl	800361c <LL_ADC_GetOffsetChannel>
 8004170:	4603      	mov	r3, r0
 8004172:	0e9b      	lsrs	r3, r3, #26
 8004174:	f003 021f 	and.w	r2, r3, #31
 8004178:	e01e      	b.n	80041b8 <HAL_ADC_ConfigChannel+0x24c>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2101      	movs	r1, #1
 8004180:	4618      	mov	r0, r3
 8004182:	f7ff fa4b 	bl	800361c <LL_ADC_GetOffsetChannel>
 8004186:	4603      	mov	r3, r0
 8004188:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800418c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004190:	fa93 f3a3 	rbit	r3, r3
 8004194:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004198:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800419c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80041a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d101      	bne.n	80041ac <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80041a8:	2320      	movs	r3, #32
 80041aa:	e004      	b.n	80041b6 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80041ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80041b0:	fab3 f383 	clz	r3, r3
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d105      	bne.n	80041d0 <HAL_ADC_ConfigChannel+0x264>
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	0e9b      	lsrs	r3, r3, #26
 80041ca:	f003 031f 	and.w	r3, r3, #31
 80041ce:	e018      	b.n	8004202 <HAL_ADC_ConfigChannel+0x296>
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80041dc:	fa93 f3a3 	rbit	r3, r3
 80041e0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80041e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80041e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80041ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d101      	bne.n	80041f8 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80041f4:	2320      	movs	r3, #32
 80041f6:	e004      	b.n	8004202 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80041f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80041fc:	fab3 f383 	clz	r3, r3
 8004200:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004202:	429a      	cmp	r2, r3
 8004204:	d106      	bne.n	8004214 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	2200      	movs	r2, #0
 800420c:	2101      	movs	r1, #1
 800420e:	4618      	mov	r0, r3
 8004210:	f7ff fa1a 	bl	8003648 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2102      	movs	r1, #2
 800421a:	4618      	mov	r0, r3
 800421c:	f7ff f9fe 	bl	800361c <LL_ADC_GetOffsetChannel>
 8004220:	4603      	mov	r3, r0
 8004222:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004226:	2b00      	cmp	r3, #0
 8004228:	d10a      	bne.n	8004240 <HAL_ADC_ConfigChannel+0x2d4>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2102      	movs	r1, #2
 8004230:	4618      	mov	r0, r3
 8004232:	f7ff f9f3 	bl	800361c <LL_ADC_GetOffsetChannel>
 8004236:	4603      	mov	r3, r0
 8004238:	0e9b      	lsrs	r3, r3, #26
 800423a:	f003 021f 	and.w	r2, r3, #31
 800423e:	e01e      	b.n	800427e <HAL_ADC_ConfigChannel+0x312>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2102      	movs	r1, #2
 8004246:	4618      	mov	r0, r3
 8004248:	f7ff f9e8 	bl	800361c <LL_ADC_GetOffsetChannel>
 800424c:	4603      	mov	r3, r0
 800424e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004252:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004256:	fa93 f3a3 	rbit	r3, r3
 800425a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800425e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004262:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004266:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800426a:	2b00      	cmp	r3, #0
 800426c:	d101      	bne.n	8004272 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800426e:	2320      	movs	r3, #32
 8004270:	e004      	b.n	800427c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8004272:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004276:	fab3 f383 	clz	r3, r3
 800427a:	b2db      	uxtb	r3, r3
 800427c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004286:	2b00      	cmp	r3, #0
 8004288:	d105      	bne.n	8004296 <HAL_ADC_ConfigChannel+0x32a>
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	0e9b      	lsrs	r3, r3, #26
 8004290:	f003 031f 	and.w	r3, r3, #31
 8004294:	e016      	b.n	80042c4 <HAL_ADC_ConfigChannel+0x358>
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800429e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80042a2:	fa93 f3a3 	rbit	r3, r3
 80042a6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80042a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80042aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80042ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d101      	bne.n	80042ba <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80042b6:	2320      	movs	r3, #32
 80042b8:	e004      	b.n	80042c4 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80042ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80042be:	fab3 f383 	clz	r3, r3
 80042c2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d106      	bne.n	80042d6 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2200      	movs	r2, #0
 80042ce:	2102      	movs	r1, #2
 80042d0:	4618      	mov	r0, r3
 80042d2:	f7ff f9b9 	bl	8003648 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2103      	movs	r1, #3
 80042dc:	4618      	mov	r0, r3
 80042de:	f7ff f99d 	bl	800361c <LL_ADC_GetOffsetChannel>
 80042e2:	4603      	mov	r3, r0
 80042e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d10a      	bne.n	8004302 <HAL_ADC_ConfigChannel+0x396>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2103      	movs	r1, #3
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7ff f992 	bl	800361c <LL_ADC_GetOffsetChannel>
 80042f8:	4603      	mov	r3, r0
 80042fa:	0e9b      	lsrs	r3, r3, #26
 80042fc:	f003 021f 	and.w	r2, r3, #31
 8004300:	e017      	b.n	8004332 <HAL_ADC_ConfigChannel+0x3c6>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2103      	movs	r1, #3
 8004308:	4618      	mov	r0, r3
 800430a:	f7ff f987 	bl	800361c <LL_ADC_GetOffsetChannel>
 800430e:	4603      	mov	r3, r0
 8004310:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004312:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004314:	fa93 f3a3 	rbit	r3, r3
 8004318:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800431a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800431c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800431e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004320:	2b00      	cmp	r3, #0
 8004322:	d101      	bne.n	8004328 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8004324:	2320      	movs	r3, #32
 8004326:	e003      	b.n	8004330 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8004328:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800432a:	fab3 f383 	clz	r3, r3
 800432e:	b2db      	uxtb	r3, r3
 8004330:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800433a:	2b00      	cmp	r3, #0
 800433c:	d105      	bne.n	800434a <HAL_ADC_ConfigChannel+0x3de>
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	0e9b      	lsrs	r3, r3, #26
 8004344:	f003 031f 	and.w	r3, r3, #31
 8004348:	e011      	b.n	800436e <HAL_ADC_ConfigChannel+0x402>
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004350:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004352:	fa93 f3a3 	rbit	r3, r3
 8004356:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004358:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800435a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800435c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800435e:	2b00      	cmp	r3, #0
 8004360:	d101      	bne.n	8004366 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8004362:	2320      	movs	r3, #32
 8004364:	e003      	b.n	800436e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8004366:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004368:	fab3 f383 	clz	r3, r3
 800436c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800436e:	429a      	cmp	r2, r3
 8004370:	d106      	bne.n	8004380 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2200      	movs	r2, #0
 8004378:	2103      	movs	r1, #3
 800437a:	4618      	mov	r0, r3
 800437c:	f7ff f964 	bl	8003648 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4618      	mov	r0, r3
 8004386:	f7ff fa9b 	bl	80038c0 <LL_ADC_IsEnabled>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	f040 813f 	bne.w	8004610 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6818      	ldr	r0, [r3, #0]
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	6819      	ldr	r1, [r3, #0]
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	461a      	mov	r2, r3
 80043a0:	f7ff f9d8 	bl	8003754 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	4a8e      	ldr	r2, [pc, #568]	; (80045e4 <HAL_ADC_ConfigChannel+0x678>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	f040 8130 	bne.w	8004610 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d10b      	bne.n	80043d8 <HAL_ADC_ConfigChannel+0x46c>
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	0e9b      	lsrs	r3, r3, #26
 80043c6:	3301      	adds	r3, #1
 80043c8:	f003 031f 	and.w	r3, r3, #31
 80043cc:	2b09      	cmp	r3, #9
 80043ce:	bf94      	ite	ls
 80043d0:	2301      	movls	r3, #1
 80043d2:	2300      	movhi	r3, #0
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	e019      	b.n	800440c <HAL_ADC_ConfigChannel+0x4a0>
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043e0:	fa93 f3a3 	rbit	r3, r3
 80043e4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80043e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043e8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80043ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d101      	bne.n	80043f4 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80043f0:	2320      	movs	r3, #32
 80043f2:	e003      	b.n	80043fc <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80043f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043f6:	fab3 f383 	clz	r3, r3
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	3301      	adds	r3, #1
 80043fe:	f003 031f 	and.w	r3, r3, #31
 8004402:	2b09      	cmp	r3, #9
 8004404:	bf94      	ite	ls
 8004406:	2301      	movls	r3, #1
 8004408:	2300      	movhi	r3, #0
 800440a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800440c:	2b00      	cmp	r3, #0
 800440e:	d079      	beq.n	8004504 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004418:	2b00      	cmp	r3, #0
 800441a:	d107      	bne.n	800442c <HAL_ADC_ConfigChannel+0x4c0>
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	0e9b      	lsrs	r3, r3, #26
 8004422:	3301      	adds	r3, #1
 8004424:	069b      	lsls	r3, r3, #26
 8004426:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800442a:	e015      	b.n	8004458 <HAL_ADC_ConfigChannel+0x4ec>
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004432:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004434:	fa93 f3a3 	rbit	r3, r3
 8004438:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800443a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800443c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800443e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004440:	2b00      	cmp	r3, #0
 8004442:	d101      	bne.n	8004448 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8004444:	2320      	movs	r3, #32
 8004446:	e003      	b.n	8004450 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8004448:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800444a:	fab3 f383 	clz	r3, r3
 800444e:	b2db      	uxtb	r3, r3
 8004450:	3301      	adds	r3, #1
 8004452:	069b      	lsls	r3, r3, #26
 8004454:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004460:	2b00      	cmp	r3, #0
 8004462:	d109      	bne.n	8004478 <HAL_ADC_ConfigChannel+0x50c>
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	0e9b      	lsrs	r3, r3, #26
 800446a:	3301      	adds	r3, #1
 800446c:	f003 031f 	and.w	r3, r3, #31
 8004470:	2101      	movs	r1, #1
 8004472:	fa01 f303 	lsl.w	r3, r1, r3
 8004476:	e017      	b.n	80044a8 <HAL_ADC_ConfigChannel+0x53c>
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800447e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004480:	fa93 f3a3 	rbit	r3, r3
 8004484:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004486:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004488:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800448a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800448c:	2b00      	cmp	r3, #0
 800448e:	d101      	bne.n	8004494 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8004490:	2320      	movs	r3, #32
 8004492:	e003      	b.n	800449c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8004494:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004496:	fab3 f383 	clz	r3, r3
 800449a:	b2db      	uxtb	r3, r3
 800449c:	3301      	adds	r3, #1
 800449e:	f003 031f 	and.w	r3, r3, #31
 80044a2:	2101      	movs	r1, #1
 80044a4:	fa01 f303 	lsl.w	r3, r1, r3
 80044a8:	ea42 0103 	orr.w	r1, r2, r3
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d10a      	bne.n	80044ce <HAL_ADC_ConfigChannel+0x562>
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	0e9b      	lsrs	r3, r3, #26
 80044be:	3301      	adds	r3, #1
 80044c0:	f003 021f 	and.w	r2, r3, #31
 80044c4:	4613      	mov	r3, r2
 80044c6:	005b      	lsls	r3, r3, #1
 80044c8:	4413      	add	r3, r2
 80044ca:	051b      	lsls	r3, r3, #20
 80044cc:	e018      	b.n	8004500 <HAL_ADC_ConfigChannel+0x594>
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044d6:	fa93 f3a3 	rbit	r3, r3
 80044da:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80044dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044de:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80044e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d101      	bne.n	80044ea <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80044e6:	2320      	movs	r3, #32
 80044e8:	e003      	b.n	80044f2 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80044ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044ec:	fab3 f383 	clz	r3, r3
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	3301      	adds	r3, #1
 80044f4:	f003 021f 	and.w	r2, r3, #31
 80044f8:	4613      	mov	r3, r2
 80044fa:	005b      	lsls	r3, r3, #1
 80044fc:	4413      	add	r3, r2
 80044fe:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004500:	430b      	orrs	r3, r1
 8004502:	e080      	b.n	8004606 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800450c:	2b00      	cmp	r3, #0
 800450e:	d107      	bne.n	8004520 <HAL_ADC_ConfigChannel+0x5b4>
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	0e9b      	lsrs	r3, r3, #26
 8004516:	3301      	adds	r3, #1
 8004518:	069b      	lsls	r3, r3, #26
 800451a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800451e:	e015      	b.n	800454c <HAL_ADC_ConfigChannel+0x5e0>
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004528:	fa93 f3a3 	rbit	r3, r3
 800452c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800452e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004530:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004534:	2b00      	cmp	r3, #0
 8004536:	d101      	bne.n	800453c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8004538:	2320      	movs	r3, #32
 800453a:	e003      	b.n	8004544 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 800453c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800453e:	fab3 f383 	clz	r3, r3
 8004542:	b2db      	uxtb	r3, r3
 8004544:	3301      	adds	r3, #1
 8004546:	069b      	lsls	r3, r3, #26
 8004548:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004554:	2b00      	cmp	r3, #0
 8004556:	d109      	bne.n	800456c <HAL_ADC_ConfigChannel+0x600>
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	0e9b      	lsrs	r3, r3, #26
 800455e:	3301      	adds	r3, #1
 8004560:	f003 031f 	and.w	r3, r3, #31
 8004564:	2101      	movs	r1, #1
 8004566:	fa01 f303 	lsl.w	r3, r1, r3
 800456a:	e017      	b.n	800459c <HAL_ADC_ConfigChannel+0x630>
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004572:	6a3b      	ldr	r3, [r7, #32]
 8004574:	fa93 f3a3 	rbit	r3, r3
 8004578:	61fb      	str	r3, [r7, #28]
  return result;
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800457e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004580:	2b00      	cmp	r3, #0
 8004582:	d101      	bne.n	8004588 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8004584:	2320      	movs	r3, #32
 8004586:	e003      	b.n	8004590 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8004588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458a:	fab3 f383 	clz	r3, r3
 800458e:	b2db      	uxtb	r3, r3
 8004590:	3301      	adds	r3, #1
 8004592:	f003 031f 	and.w	r3, r3, #31
 8004596:	2101      	movs	r1, #1
 8004598:	fa01 f303 	lsl.w	r3, r1, r3
 800459c:	ea42 0103 	orr.w	r1, r2, r3
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d10d      	bne.n	80045c8 <HAL_ADC_ConfigChannel+0x65c>
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	0e9b      	lsrs	r3, r3, #26
 80045b2:	3301      	adds	r3, #1
 80045b4:	f003 021f 	and.w	r2, r3, #31
 80045b8:	4613      	mov	r3, r2
 80045ba:	005b      	lsls	r3, r3, #1
 80045bc:	4413      	add	r3, r2
 80045be:	3b1e      	subs	r3, #30
 80045c0:	051b      	lsls	r3, r3, #20
 80045c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80045c6:	e01d      	b.n	8004604 <HAL_ADC_ConfigChannel+0x698>
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	fa93 f3a3 	rbit	r3, r3
 80045d4:	613b      	str	r3, [r7, #16]
  return result;
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d103      	bne.n	80045e8 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80045e0:	2320      	movs	r3, #32
 80045e2:	e005      	b.n	80045f0 <HAL_ADC_ConfigChannel+0x684>
 80045e4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	fab3 f383 	clz	r3, r3
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	3301      	adds	r3, #1
 80045f2:	f003 021f 	and.w	r2, r3, #31
 80045f6:	4613      	mov	r3, r2
 80045f8:	005b      	lsls	r3, r3, #1
 80045fa:	4413      	add	r3, r2
 80045fc:	3b1e      	subs	r3, #30
 80045fe:	051b      	lsls	r3, r3, #20
 8004600:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004604:	430b      	orrs	r3, r1
 8004606:	683a      	ldr	r2, [r7, #0]
 8004608:	6892      	ldr	r2, [r2, #8]
 800460a:	4619      	mov	r1, r3
 800460c:	f7ff f876 	bl	80036fc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	4b44      	ldr	r3, [pc, #272]	; (8004728 <HAL_ADC_ConfigChannel+0x7bc>)
 8004616:	4013      	ands	r3, r2
 8004618:	2b00      	cmp	r3, #0
 800461a:	d07a      	beq.n	8004712 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800461c:	4843      	ldr	r0, [pc, #268]	; (800472c <HAL_ADC_ConfigChannel+0x7c0>)
 800461e:	f7fe ffcb 	bl	80035b8 <LL_ADC_GetCommonPathInternalCh>
 8004622:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a41      	ldr	r2, [pc, #260]	; (8004730 <HAL_ADC_ConfigChannel+0x7c4>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d12c      	bne.n	800468a <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004630:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004634:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004638:	2b00      	cmp	r3, #0
 800463a:	d126      	bne.n	800468a <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a3c      	ldr	r2, [pc, #240]	; (8004734 <HAL_ADC_ConfigChannel+0x7c8>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d004      	beq.n	8004650 <HAL_ADC_ConfigChannel+0x6e4>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a3b      	ldr	r2, [pc, #236]	; (8004738 <HAL_ADC_ConfigChannel+0x7cc>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d15d      	bne.n	800470c <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004650:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004654:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004658:	4619      	mov	r1, r3
 800465a:	4834      	ldr	r0, [pc, #208]	; (800472c <HAL_ADC_ConfigChannel+0x7c0>)
 800465c:	f7fe ff99 	bl	8003592 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004660:	4b36      	ldr	r3, [pc, #216]	; (800473c <HAL_ADC_ConfigChannel+0x7d0>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	099b      	lsrs	r3, r3, #6
 8004666:	4a36      	ldr	r2, [pc, #216]	; (8004740 <HAL_ADC_ConfigChannel+0x7d4>)
 8004668:	fba2 2303 	umull	r2, r3, r2, r3
 800466c:	099b      	lsrs	r3, r3, #6
 800466e:	1c5a      	adds	r2, r3, #1
 8004670:	4613      	mov	r3, r2
 8004672:	005b      	lsls	r3, r3, #1
 8004674:	4413      	add	r3, r2
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800467a:	e002      	b.n	8004682 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	3b01      	subs	r3, #1
 8004680:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d1f9      	bne.n	800467c <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004688:	e040      	b.n	800470c <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a2d      	ldr	r2, [pc, #180]	; (8004744 <HAL_ADC_ConfigChannel+0x7d8>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d118      	bne.n	80046c6 <HAL_ADC_ConfigChannel+0x75a>
 8004694:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004698:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d112      	bne.n	80046c6 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a23      	ldr	r2, [pc, #140]	; (8004734 <HAL_ADC_ConfigChannel+0x7c8>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d004      	beq.n	80046b4 <HAL_ADC_ConfigChannel+0x748>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a22      	ldr	r2, [pc, #136]	; (8004738 <HAL_ADC_ConfigChannel+0x7cc>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d12d      	bne.n	8004710 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80046b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80046b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046bc:	4619      	mov	r1, r3
 80046be:	481b      	ldr	r0, [pc, #108]	; (800472c <HAL_ADC_ConfigChannel+0x7c0>)
 80046c0:	f7fe ff67 	bl	8003592 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80046c4:	e024      	b.n	8004710 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a1f      	ldr	r2, [pc, #124]	; (8004748 <HAL_ADC_ConfigChannel+0x7dc>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d120      	bne.n	8004712 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80046d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80046d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d11a      	bne.n	8004712 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a14      	ldr	r2, [pc, #80]	; (8004734 <HAL_ADC_ConfigChannel+0x7c8>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d115      	bne.n	8004712 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80046e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80046ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80046ee:	4619      	mov	r1, r3
 80046f0:	480e      	ldr	r0, [pc, #56]	; (800472c <HAL_ADC_ConfigChannel+0x7c0>)
 80046f2:	f7fe ff4e 	bl	8003592 <LL_ADC_SetCommonPathInternalCh>
 80046f6:	e00c      	b.n	8004712 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046fc:	f043 0220 	orr.w	r2, r3, #32
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800470a:	e002      	b.n	8004712 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800470c:	bf00      	nop
 800470e:	e000      	b.n	8004712 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004710:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800471a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800471e:	4618      	mov	r0, r3
 8004720:	37d8      	adds	r7, #216	; 0xd8
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	80080000 	.word	0x80080000
 800472c:	50040300 	.word	0x50040300
 8004730:	c7520000 	.word	0xc7520000
 8004734:	50040000 	.word	0x50040000
 8004738:	50040200 	.word	0x50040200
 800473c:	20000084 	.word	0x20000084
 8004740:	053e2d63 	.word	0x053e2d63
 8004744:	cb840000 	.word	0xcb840000
 8004748:	80000001 	.word	0x80000001

0800474c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4618      	mov	r0, r3
 800475a:	f7ff f8b1 	bl	80038c0 <LL_ADC_IsEnabled>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d14d      	bne.n	8004800 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	689a      	ldr	r2, [r3, #8]
 800476a:	4b28      	ldr	r3, [pc, #160]	; (800480c <ADC_Enable+0xc0>)
 800476c:	4013      	ands	r3, r2
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00d      	beq.n	800478e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004776:	f043 0210 	orr.w	r2, r3, #16
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004782:	f043 0201 	orr.w	r2, r3, #1
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e039      	b.n	8004802 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4618      	mov	r0, r3
 8004794:	f7ff f86c 	bl	8003870 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004798:	f7fe fedc 	bl	8003554 <HAL_GetTick>
 800479c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800479e:	e028      	b.n	80047f2 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4618      	mov	r0, r3
 80047a6:	f7ff f88b 	bl	80038c0 <LL_ADC_IsEnabled>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d104      	bne.n	80047ba <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4618      	mov	r0, r3
 80047b6:	f7ff f85b 	bl	8003870 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80047ba:	f7fe fecb 	bl	8003554 <HAL_GetTick>
 80047be:	4602      	mov	r2, r0
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	d914      	bls.n	80047f2 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0301 	and.w	r3, r3, #1
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d00d      	beq.n	80047f2 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047da:	f043 0210 	orr.w	r2, r3, #16
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047e6:	f043 0201 	orr.w	r2, r3, #1
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e007      	b.n	8004802 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0301 	and.w	r3, r3, #1
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d1cf      	bne.n	80047a0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	3710      	adds	r7, #16
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	8000003f 	.word	0x8000003f

08004810 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4618      	mov	r0, r3
 800481e:	f7ff f862 	bl	80038e6 <LL_ADC_IsDisableOngoing>
 8004822:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4618      	mov	r0, r3
 800482a:	f7ff f849 	bl	80038c0 <LL_ADC_IsEnabled>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d047      	beq.n	80048c4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d144      	bne.n	80048c4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	f003 030d 	and.w	r3, r3, #13
 8004844:	2b01      	cmp	r3, #1
 8004846:	d10c      	bne.n	8004862 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4618      	mov	r0, r3
 800484e:	f7ff f823 	bl	8003898 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2203      	movs	r2, #3
 8004858:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800485a:	f7fe fe7b 	bl	8003554 <HAL_GetTick>
 800485e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004860:	e029      	b.n	80048b6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004866:	f043 0210 	orr.w	r2, r3, #16
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004872:	f043 0201 	orr.w	r2, r3, #1
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e023      	b.n	80048c6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800487e:	f7fe fe69 	bl	8003554 <HAL_GetTick>
 8004882:	4602      	mov	r2, r0
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	2b02      	cmp	r3, #2
 800488a:	d914      	bls.n	80048b6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f003 0301 	and.w	r3, r3, #1
 8004896:	2b00      	cmp	r3, #0
 8004898:	d00d      	beq.n	80048b6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800489e:	f043 0210 	orr.w	r2, r3, #16
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048aa:	f043 0201 	orr.w	r2, r3, #1
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e007      	b.n	80048c6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	f003 0301 	and.w	r3, r3, #1
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d1dc      	bne.n	800487e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3710      	adds	r7, #16
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}

080048ce <LL_ADC_IsEnabled>:
{
 80048ce:	b480      	push	{r7}
 80048d0:	b083      	sub	sp, #12
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	f003 0301 	and.w	r3, r3, #1
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d101      	bne.n	80048e6 <LL_ADC_IsEnabled+0x18>
 80048e2:	2301      	movs	r3, #1
 80048e4:	e000      	b.n	80048e8 <LL_ADC_IsEnabled+0x1a>
 80048e6:	2300      	movs	r3, #0
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	370c      	adds	r7, #12
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <LL_ADC_StartCalibration>:
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8004906:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800490a:	683a      	ldr	r2, [r7, #0]
 800490c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004910:	4313      	orrs	r3, r2
 8004912:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	609a      	str	r2, [r3, #8]
}
 800491a:	bf00      	nop
 800491c:	370c      	adds	r7, #12
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr

08004926 <LL_ADC_IsCalibrationOnGoing>:
{
 8004926:	b480      	push	{r7}
 8004928:	b083      	sub	sp, #12
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004936:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800493a:	d101      	bne.n	8004940 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800493c:	2301      	movs	r3, #1
 800493e:	e000      	b.n	8004942 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004940:	2300      	movs	r3, #0
}
 8004942:	4618      	mov	r0, r3
 8004944:	370c      	adds	r7, #12
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr

0800494e <LL_ADC_REG_IsConversionOngoing>:
{
 800494e:	b480      	push	{r7}
 8004950:	b083      	sub	sp, #12
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	f003 0304 	and.w	r3, r3, #4
 800495e:	2b04      	cmp	r3, #4
 8004960:	d101      	bne.n	8004966 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004962:	2301      	movs	r3, #1
 8004964:	e000      	b.n	8004968 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004966:	2300      	movs	r3, #0
}
 8004968:	4618      	mov	r0, r3
 800496a:	370c      	adds	r7, #12
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800497e:	2300      	movs	r3, #0
 8004980:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004988:	2b01      	cmp	r3, #1
 800498a:	d101      	bne.n	8004990 <HAL_ADCEx_Calibration_Start+0x1c>
 800498c:	2302      	movs	r3, #2
 800498e:	e04d      	b.n	8004a2c <HAL_ADCEx_Calibration_Start+0xb8>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f7ff ff39 	bl	8004810 <ADC_Disable>
 800499e:	4603      	mov	r3, r0
 80049a0:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80049a2:	7bfb      	ldrb	r3, [r7, #15]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d136      	bne.n	8004a16 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ac:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80049b0:	f023 0302 	bic.w	r3, r3, #2
 80049b4:	f043 0202 	orr.w	r2, r3, #2
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	6839      	ldr	r1, [r7, #0]
 80049c2:	4618      	mov	r0, r3
 80049c4:	f7ff ff96 	bl	80048f4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80049c8:	e014      	b.n	80049f4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	3301      	adds	r3, #1
 80049ce:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 80049d6:	d30d      	bcc.n	80049f4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049dc:	f023 0312 	bic.w	r3, r3, #18
 80049e0:	f043 0210 	orr.w	r2, r3, #16
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e01b      	b.n	8004a2c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4618      	mov	r0, r3
 80049fa:	f7ff ff94 	bl	8004926 <LL_ADC_IsCalibrationOnGoing>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d1e2      	bne.n	80049ca <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a08:	f023 0303 	bic.w	r3, r3, #3
 8004a0c:	f043 0201 	orr.w	r2, r3, #1
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	655a      	str	r2, [r3, #84]	; 0x54
 8004a14:	e005      	b.n	8004a22 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a1a:	f043 0210 	orr.w	r2, r3, #16
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3710      	adds	r7, #16
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004a34:	b590      	push	{r4, r7, lr}
 8004a36:	b09f      	sub	sp, #124	; 0x7c
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d101      	bne.n	8004a52 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004a4e:	2302      	movs	r3, #2
 8004a50:	e093      	b.n	8004b7a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2201      	movs	r2, #1
 8004a56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8004a5e:	2300      	movs	r3, #0
 8004a60:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a47      	ldr	r2, [pc, #284]	; (8004b84 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d102      	bne.n	8004a72 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004a6c:	4b46      	ldr	r3, [pc, #280]	; (8004b88 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004a6e:	60bb      	str	r3, [r7, #8]
 8004a70:	e001      	b.n	8004a76 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004a72:	2300      	movs	r3, #0
 8004a74:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d10b      	bne.n	8004a94 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a80:	f043 0220 	orr.w	r2, r3, #32
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e072      	b.n	8004b7a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	4618      	mov	r0, r3
 8004a98:	f7ff ff59 	bl	800494e <LL_ADC_REG_IsConversionOngoing>
 8004a9c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f7ff ff53 	bl	800494e <LL_ADC_REG_IsConversionOngoing>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d154      	bne.n	8004b58 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004aae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d151      	bne.n	8004b58 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004ab4:	4b35      	ldr	r3, [pc, #212]	; (8004b8c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8004ab6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d02c      	beq.n	8004b1a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004ac0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	6859      	ldr	r1, [r3, #4]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004ad2:	035b      	lsls	r3, r3, #13
 8004ad4:	430b      	orrs	r3, r1
 8004ad6:	431a      	orrs	r2, r3
 8004ad8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ada:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004adc:	4829      	ldr	r0, [pc, #164]	; (8004b84 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004ade:	f7ff fef6 	bl	80048ce <LL_ADC_IsEnabled>
 8004ae2:	4604      	mov	r4, r0
 8004ae4:	4828      	ldr	r0, [pc, #160]	; (8004b88 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004ae6:	f7ff fef2 	bl	80048ce <LL_ADC_IsEnabled>
 8004aea:	4603      	mov	r3, r0
 8004aec:	431c      	orrs	r4, r3
 8004aee:	4828      	ldr	r0, [pc, #160]	; (8004b90 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8004af0:	f7ff feed 	bl	80048ce <LL_ADC_IsEnabled>
 8004af4:	4603      	mov	r3, r0
 8004af6:	4323      	orrs	r3, r4
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d137      	bne.n	8004b6c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004afc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004b04:	f023 030f 	bic.w	r3, r3, #15
 8004b08:	683a      	ldr	r2, [r7, #0]
 8004b0a:	6811      	ldr	r1, [r2, #0]
 8004b0c:	683a      	ldr	r2, [r7, #0]
 8004b0e:	6892      	ldr	r2, [r2, #8]
 8004b10:	430a      	orrs	r2, r1
 8004b12:	431a      	orrs	r2, r3
 8004b14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b16:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004b18:	e028      	b.n	8004b6c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004b1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b24:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004b26:	4817      	ldr	r0, [pc, #92]	; (8004b84 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004b28:	f7ff fed1 	bl	80048ce <LL_ADC_IsEnabled>
 8004b2c:	4604      	mov	r4, r0
 8004b2e:	4816      	ldr	r0, [pc, #88]	; (8004b88 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004b30:	f7ff fecd 	bl	80048ce <LL_ADC_IsEnabled>
 8004b34:	4603      	mov	r3, r0
 8004b36:	431c      	orrs	r4, r3
 8004b38:	4815      	ldr	r0, [pc, #84]	; (8004b90 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8004b3a:	f7ff fec8 	bl	80048ce <LL_ADC_IsEnabled>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	4323      	orrs	r3, r4
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d112      	bne.n	8004b6c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004b46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004b4e:	f023 030f 	bic.w	r3, r3, #15
 8004b52:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004b54:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004b56:	e009      	b.n	8004b6c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b5c:	f043 0220 	orr.w	r2, r3, #32
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004b6a:	e000      	b.n	8004b6e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004b6c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004b76:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	377c      	adds	r7, #124	; 0x7c
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd90      	pop	{r4, r7, pc}
 8004b82:	bf00      	nop
 8004b84:	50040000 	.word	0x50040000
 8004b88:	50040100 	.word	0x50040100
 8004b8c:	50040300 	.word	0x50040300
 8004b90:	50040200 	.word	0x50040200

08004b94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b085      	sub	sp, #20
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f003 0307 	and.w	r3, r3, #7
 8004ba2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ba4:	4b0c      	ldr	r3, [pc, #48]	; (8004bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004baa:	68ba      	ldr	r2, [r7, #8]
 8004bac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004bbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004bc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004bc6:	4a04      	ldr	r2, [pc, #16]	; (8004bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	60d3      	str	r3, [r2, #12]
}
 8004bcc:	bf00      	nop
 8004bce:	3714      	adds	r7, #20
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr
 8004bd8:	e000ed00 	.word	0xe000ed00

08004bdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004be0:	4b04      	ldr	r3, [pc, #16]	; (8004bf4 <__NVIC_GetPriorityGrouping+0x18>)
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	0a1b      	lsrs	r3, r3, #8
 8004be6:	f003 0307 	and.w	r3, r3, #7
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr
 8004bf4:	e000ed00 	.word	0xe000ed00

08004bf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	4603      	mov	r3, r0
 8004c00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	db0b      	blt.n	8004c22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c0a:	79fb      	ldrb	r3, [r7, #7]
 8004c0c:	f003 021f 	and.w	r2, r3, #31
 8004c10:	4907      	ldr	r1, [pc, #28]	; (8004c30 <__NVIC_EnableIRQ+0x38>)
 8004c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c16:	095b      	lsrs	r3, r3, #5
 8004c18:	2001      	movs	r0, #1
 8004c1a:	fa00 f202 	lsl.w	r2, r0, r2
 8004c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004c22:	bf00      	nop
 8004c24:	370c      	adds	r7, #12
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
 8004c2e:	bf00      	nop
 8004c30:	e000e100 	.word	0xe000e100

08004c34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	6039      	str	r1, [r7, #0]
 8004c3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	db0a      	blt.n	8004c5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	b2da      	uxtb	r2, r3
 8004c4c:	490c      	ldr	r1, [pc, #48]	; (8004c80 <__NVIC_SetPriority+0x4c>)
 8004c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c52:	0112      	lsls	r2, r2, #4
 8004c54:	b2d2      	uxtb	r2, r2
 8004c56:	440b      	add	r3, r1
 8004c58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c5c:	e00a      	b.n	8004c74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	b2da      	uxtb	r2, r3
 8004c62:	4908      	ldr	r1, [pc, #32]	; (8004c84 <__NVIC_SetPriority+0x50>)
 8004c64:	79fb      	ldrb	r3, [r7, #7]
 8004c66:	f003 030f 	and.w	r3, r3, #15
 8004c6a:	3b04      	subs	r3, #4
 8004c6c:	0112      	lsls	r2, r2, #4
 8004c6e:	b2d2      	uxtb	r2, r2
 8004c70:	440b      	add	r3, r1
 8004c72:	761a      	strb	r2, [r3, #24]
}
 8004c74:	bf00      	nop
 8004c76:	370c      	adds	r7, #12
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr
 8004c80:	e000e100 	.word	0xe000e100
 8004c84:	e000ed00 	.word	0xe000ed00

08004c88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b089      	sub	sp, #36	; 0x24
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f003 0307 	and.w	r3, r3, #7
 8004c9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c9c:	69fb      	ldr	r3, [r7, #28]
 8004c9e:	f1c3 0307 	rsb	r3, r3, #7
 8004ca2:	2b04      	cmp	r3, #4
 8004ca4:	bf28      	it	cs
 8004ca6:	2304      	movcs	r3, #4
 8004ca8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	3304      	adds	r3, #4
 8004cae:	2b06      	cmp	r3, #6
 8004cb0:	d902      	bls.n	8004cb8 <NVIC_EncodePriority+0x30>
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	3b03      	subs	r3, #3
 8004cb6:	e000      	b.n	8004cba <NVIC_EncodePriority+0x32>
 8004cb8:	2300      	movs	r3, #0
 8004cba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8004cc0:	69bb      	ldr	r3, [r7, #24]
 8004cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc6:	43da      	mvns	r2, r3
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	401a      	ands	r2, r3
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004cd0:	f04f 31ff 	mov.w	r1, #4294967295
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8004cda:	43d9      	mvns	r1, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ce0:	4313      	orrs	r3, r2
         );
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3724      	adds	r7, #36	; 0x24
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
	...

08004cf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b082      	sub	sp, #8
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d00:	d301      	bcc.n	8004d06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004d02:	2301      	movs	r3, #1
 8004d04:	e00f      	b.n	8004d26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d06:	4a0a      	ldr	r2, [pc, #40]	; (8004d30 <SysTick_Config+0x40>)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d0e:	210f      	movs	r1, #15
 8004d10:	f04f 30ff 	mov.w	r0, #4294967295
 8004d14:	f7ff ff8e 	bl	8004c34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d18:	4b05      	ldr	r3, [pc, #20]	; (8004d30 <SysTick_Config+0x40>)
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d1e:	4b04      	ldr	r3, [pc, #16]	; (8004d30 <SysTick_Config+0x40>)
 8004d20:	2207      	movs	r2, #7
 8004d22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d24:	2300      	movs	r3, #0
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3708      	adds	r7, #8
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	bf00      	nop
 8004d30:	e000e010 	.word	0xe000e010

08004d34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b082      	sub	sp, #8
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f7ff ff29 	bl	8004b94 <__NVIC_SetPriorityGrouping>
}
 8004d42:	bf00      	nop
 8004d44:	3708      	adds	r7, #8
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}

08004d4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d4a:	b580      	push	{r7, lr}
 8004d4c:	b086      	sub	sp, #24
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	4603      	mov	r3, r0
 8004d52:	60b9      	str	r1, [r7, #8]
 8004d54:	607a      	str	r2, [r7, #4]
 8004d56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004d5c:	f7ff ff3e 	bl	8004bdc <__NVIC_GetPriorityGrouping>
 8004d60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	68b9      	ldr	r1, [r7, #8]
 8004d66:	6978      	ldr	r0, [r7, #20]
 8004d68:	f7ff ff8e 	bl	8004c88 <NVIC_EncodePriority>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d72:	4611      	mov	r1, r2
 8004d74:	4618      	mov	r0, r3
 8004d76:	f7ff ff5d 	bl	8004c34 <__NVIC_SetPriority>
}
 8004d7a:	bf00      	nop
 8004d7c:	3718      	adds	r7, #24
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}

08004d82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d82:	b580      	push	{r7, lr}
 8004d84:	b082      	sub	sp, #8
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	4603      	mov	r3, r0
 8004d8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d90:	4618      	mov	r0, r3
 8004d92:	f7ff ff31 	bl	8004bf8 <__NVIC_EnableIRQ>
}
 8004d96:	bf00      	nop
 8004d98:	3708      	adds	r7, #8
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}

08004d9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d9e:	b580      	push	{r7, lr}
 8004da0:	b082      	sub	sp, #8
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f7ff ffa2 	bl	8004cf0 <SysTick_Config>
 8004dac:	4603      	mov	r3, r0
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3708      	adds	r7, #8
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
	...

08004db8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b085      	sub	sp, #20
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d101      	bne.n	8004dca <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e098      	b.n	8004efc <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	461a      	mov	r2, r3
 8004dd0:	4b4d      	ldr	r3, [pc, #308]	; (8004f08 <HAL_DMA_Init+0x150>)
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d80f      	bhi.n	8004df6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	461a      	mov	r2, r3
 8004ddc:	4b4b      	ldr	r3, [pc, #300]	; (8004f0c <HAL_DMA_Init+0x154>)
 8004dde:	4413      	add	r3, r2
 8004de0:	4a4b      	ldr	r2, [pc, #300]	; (8004f10 <HAL_DMA_Init+0x158>)
 8004de2:	fba2 2303 	umull	r2, r3, r2, r3
 8004de6:	091b      	lsrs	r3, r3, #4
 8004de8:	009a      	lsls	r2, r3, #2
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a48      	ldr	r2, [pc, #288]	; (8004f14 <HAL_DMA_Init+0x15c>)
 8004df2:	641a      	str	r2, [r3, #64]	; 0x40
 8004df4:	e00e      	b.n	8004e14 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	4b46      	ldr	r3, [pc, #280]	; (8004f18 <HAL_DMA_Init+0x160>)
 8004dfe:	4413      	add	r3, r2
 8004e00:	4a43      	ldr	r2, [pc, #268]	; (8004f10 <HAL_DMA_Init+0x158>)
 8004e02:	fba2 2303 	umull	r2, r3, r2, r3
 8004e06:	091b      	lsrs	r3, r3, #4
 8004e08:	009a      	lsls	r2, r3, #2
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a42      	ldr	r2, [pc, #264]	; (8004f1c <HAL_DMA_Init+0x164>)
 8004e12:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2202      	movs	r2, #2
 8004e18:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e2e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004e38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	699b      	ldr	r3, [r3, #24]
 8004e4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a1b      	ldr	r3, [r3, #32]
 8004e56:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004e58:	68fa      	ldr	r2, [r7, #12]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e6e:	d039      	beq.n	8004ee4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e74:	4a27      	ldr	r2, [pc, #156]	; (8004f14 <HAL_DMA_Init+0x15c>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d11a      	bne.n	8004eb0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004e7a:	4b29      	ldr	r3, [pc, #164]	; (8004f20 <HAL_DMA_Init+0x168>)
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e82:	f003 031c 	and.w	r3, r3, #28
 8004e86:	210f      	movs	r1, #15
 8004e88:	fa01 f303 	lsl.w	r3, r1, r3
 8004e8c:	43db      	mvns	r3, r3
 8004e8e:	4924      	ldr	r1, [pc, #144]	; (8004f20 <HAL_DMA_Init+0x168>)
 8004e90:	4013      	ands	r3, r2
 8004e92:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004e94:	4b22      	ldr	r3, [pc, #136]	; (8004f20 <HAL_DMA_Init+0x168>)
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6859      	ldr	r1, [r3, #4]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ea0:	f003 031c 	and.w	r3, r3, #28
 8004ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ea8:	491d      	ldr	r1, [pc, #116]	; (8004f20 <HAL_DMA_Init+0x168>)
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	600b      	str	r3, [r1, #0]
 8004eae:	e019      	b.n	8004ee4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004eb0:	4b1c      	ldr	r3, [pc, #112]	; (8004f24 <HAL_DMA_Init+0x16c>)
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eb8:	f003 031c 	and.w	r3, r3, #28
 8004ebc:	210f      	movs	r1, #15
 8004ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8004ec2:	43db      	mvns	r3, r3
 8004ec4:	4917      	ldr	r1, [pc, #92]	; (8004f24 <HAL_DMA_Init+0x16c>)
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004eca:	4b16      	ldr	r3, [pc, #88]	; (8004f24 <HAL_DMA_Init+0x16c>)
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6859      	ldr	r1, [r3, #4]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ed6:	f003 031c 	and.w	r3, r3, #28
 8004eda:	fa01 f303 	lsl.w	r3, r1, r3
 8004ede:	4911      	ldr	r1, [pc, #68]	; (8004f24 <HAL_DMA_Init+0x16c>)
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2201      	movs	r2, #1
 8004eee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004efa:	2300      	movs	r3, #0
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3714      	adds	r7, #20
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr
 8004f08:	40020407 	.word	0x40020407
 8004f0c:	bffdfff8 	.word	0xbffdfff8
 8004f10:	cccccccd 	.word	0xcccccccd
 8004f14:	40020000 	.word	0x40020000
 8004f18:	bffdfbf8 	.word	0xbffdfbf8
 8004f1c:	40020400 	.word	0x40020400
 8004f20:	400200a8 	.word	0x400200a8
 8004f24:	400204a8 	.word	0x400204a8

08004f28 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b086      	sub	sp, #24
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	607a      	str	r2, [r7, #4]
 8004f34:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f36:	2300      	movs	r3, #0
 8004f38:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d101      	bne.n	8004f48 <HAL_DMA_Start_IT+0x20>
 8004f44:	2302      	movs	r3, #2
 8004f46:	e04b      	b.n	8004fe0 <HAL_DMA_Start_IT+0xb8>
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d13a      	bne.n	8004fd2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2202      	movs	r2, #2
 8004f60:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2200      	movs	r2, #0
 8004f68:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f022 0201 	bic.w	r2, r2, #1
 8004f78:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	68b9      	ldr	r1, [r7, #8]
 8004f80:	68f8      	ldr	r0, [r7, #12]
 8004f82:	f000 f8e0 	bl	8005146 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d008      	beq.n	8004fa0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f042 020e 	orr.w	r2, r2, #14
 8004f9c:	601a      	str	r2, [r3, #0]
 8004f9e:	e00f      	b.n	8004fc0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f022 0204 	bic.w	r2, r2, #4
 8004fae:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f042 020a 	orr.w	r2, r2, #10
 8004fbe:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f042 0201 	orr.w	r2, r2, #1
 8004fce:	601a      	str	r2, [r3, #0]
 8004fd0:	e005      	b.n	8004fde <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004fda:	2302      	movs	r3, #2
 8004fdc:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004fde:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3718      	adds	r7, #24
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005004:	f003 031c 	and.w	r3, r3, #28
 8005008:	2204      	movs	r2, #4
 800500a:	409a      	lsls	r2, r3
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	4013      	ands	r3, r2
 8005010:	2b00      	cmp	r3, #0
 8005012:	d026      	beq.n	8005062 <HAL_DMA_IRQHandler+0x7a>
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	f003 0304 	and.w	r3, r3, #4
 800501a:	2b00      	cmp	r3, #0
 800501c:	d021      	beq.n	8005062 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0320 	and.w	r3, r3, #32
 8005028:	2b00      	cmp	r3, #0
 800502a:	d107      	bne.n	800503c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f022 0204 	bic.w	r2, r2, #4
 800503a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005040:	f003 021c 	and.w	r2, r3, #28
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005048:	2104      	movs	r1, #4
 800504a:	fa01 f202 	lsl.w	r2, r1, r2
 800504e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005054:	2b00      	cmp	r3, #0
 8005056:	d071      	beq.n	800513c <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8005060:	e06c      	b.n	800513c <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005066:	f003 031c 	and.w	r3, r3, #28
 800506a:	2202      	movs	r2, #2
 800506c:	409a      	lsls	r2, r3
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	4013      	ands	r3, r2
 8005072:	2b00      	cmp	r3, #0
 8005074:	d02e      	beq.n	80050d4 <HAL_DMA_IRQHandler+0xec>
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	f003 0302 	and.w	r3, r3, #2
 800507c:	2b00      	cmp	r3, #0
 800507e:	d029      	beq.n	80050d4 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 0320 	and.w	r3, r3, #32
 800508a:	2b00      	cmp	r3, #0
 800508c:	d10b      	bne.n	80050a6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f022 020a 	bic.w	r2, r2, #10
 800509c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2201      	movs	r2, #1
 80050a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050aa:	f003 021c 	and.w	r2, r3, #28
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b2:	2102      	movs	r1, #2
 80050b4:	fa01 f202 	lsl.w	r2, r1, r2
 80050b8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d038      	beq.n	800513c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80050d2:	e033      	b.n	800513c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050d8:	f003 031c 	and.w	r3, r3, #28
 80050dc:	2208      	movs	r2, #8
 80050de:	409a      	lsls	r2, r3
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	4013      	ands	r3, r2
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d02a      	beq.n	800513e <HAL_DMA_IRQHandler+0x156>
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	f003 0308 	and.w	r3, r3, #8
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d025      	beq.n	800513e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f022 020e 	bic.w	r2, r2, #14
 8005100:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005106:	f003 021c 	and.w	r2, r3, #28
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510e:	2101      	movs	r1, #1
 8005110:	fa01 f202 	lsl.w	r2, r1, r2
 8005114:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2201      	movs	r2, #1
 800511a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005130:	2b00      	cmp	r3, #0
 8005132:	d004      	beq.n	800513e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800513c:	bf00      	nop
 800513e:	bf00      	nop
}
 8005140:	3710      	adds	r7, #16
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}

08005146 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005146:	b480      	push	{r7}
 8005148:	b085      	sub	sp, #20
 800514a:	af00      	add	r7, sp, #0
 800514c:	60f8      	str	r0, [r7, #12]
 800514e:	60b9      	str	r1, [r7, #8]
 8005150:	607a      	str	r2, [r7, #4]
 8005152:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005158:	f003 021c 	and.w	r2, r3, #28
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005160:	2101      	movs	r1, #1
 8005162:	fa01 f202 	lsl.w	r2, r1, r2
 8005166:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	683a      	ldr	r2, [r7, #0]
 800516e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	2b10      	cmp	r3, #16
 8005176:	d108      	bne.n	800518a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	68ba      	ldr	r2, [r7, #8]
 8005186:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005188:	e007      	b.n	800519a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	68ba      	ldr	r2, [r7, #8]
 8005190:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	60da      	str	r2, [r3, #12]
}
 800519a:	bf00      	nop
 800519c:	3714      	adds	r7, #20
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr
	...

080051a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b087      	sub	sp, #28
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80051b2:	2300      	movs	r3, #0
 80051b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80051b6:	e17f      	b.n	80054b8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	2101      	movs	r1, #1
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	fa01 f303 	lsl.w	r3, r1, r3
 80051c4:	4013      	ands	r3, r2
 80051c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	f000 8171 	beq.w	80054b2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	f003 0303 	and.w	r3, r3, #3
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d005      	beq.n	80051e8 <HAL_GPIO_Init+0x40>
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	f003 0303 	and.w	r3, r3, #3
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	d130      	bne.n	800524a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	005b      	lsls	r3, r3, #1
 80051f2:	2203      	movs	r2, #3
 80051f4:	fa02 f303 	lsl.w	r3, r2, r3
 80051f8:	43db      	mvns	r3, r3
 80051fa:	693a      	ldr	r2, [r7, #16]
 80051fc:	4013      	ands	r3, r2
 80051fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	68da      	ldr	r2, [r3, #12]
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	005b      	lsls	r3, r3, #1
 8005208:	fa02 f303 	lsl.w	r3, r2, r3
 800520c:	693a      	ldr	r2, [r7, #16]
 800520e:	4313      	orrs	r3, r2
 8005210:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	693a      	ldr	r2, [r7, #16]
 8005216:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800521e:	2201      	movs	r2, #1
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	fa02 f303 	lsl.w	r3, r2, r3
 8005226:	43db      	mvns	r3, r3
 8005228:	693a      	ldr	r2, [r7, #16]
 800522a:	4013      	ands	r3, r2
 800522c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	091b      	lsrs	r3, r3, #4
 8005234:	f003 0201 	and.w	r2, r3, #1
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	fa02 f303 	lsl.w	r3, r2, r3
 800523e:	693a      	ldr	r2, [r7, #16]
 8005240:	4313      	orrs	r3, r2
 8005242:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	693a      	ldr	r2, [r7, #16]
 8005248:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	f003 0303 	and.w	r3, r3, #3
 8005252:	2b03      	cmp	r3, #3
 8005254:	d118      	bne.n	8005288 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800525a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800525c:	2201      	movs	r2, #1
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	fa02 f303 	lsl.w	r3, r2, r3
 8005264:	43db      	mvns	r3, r3
 8005266:	693a      	ldr	r2, [r7, #16]
 8005268:	4013      	ands	r3, r2
 800526a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	08db      	lsrs	r3, r3, #3
 8005272:	f003 0201 	and.w	r2, r3, #1
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	fa02 f303 	lsl.w	r3, r2, r3
 800527c:	693a      	ldr	r2, [r7, #16]
 800527e:	4313      	orrs	r3, r2
 8005280:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	693a      	ldr	r2, [r7, #16]
 8005286:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	f003 0303 	and.w	r3, r3, #3
 8005290:	2b03      	cmp	r3, #3
 8005292:	d017      	beq.n	80052c4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	005b      	lsls	r3, r3, #1
 800529e:	2203      	movs	r2, #3
 80052a0:	fa02 f303 	lsl.w	r3, r2, r3
 80052a4:	43db      	mvns	r3, r3
 80052a6:	693a      	ldr	r2, [r7, #16]
 80052a8:	4013      	ands	r3, r2
 80052aa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	689a      	ldr	r2, [r3, #8]
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	005b      	lsls	r3, r3, #1
 80052b4:	fa02 f303 	lsl.w	r3, r2, r3
 80052b8:	693a      	ldr	r2, [r7, #16]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	693a      	ldr	r2, [r7, #16]
 80052c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	f003 0303 	and.w	r3, r3, #3
 80052cc:	2b02      	cmp	r3, #2
 80052ce:	d123      	bne.n	8005318 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	08da      	lsrs	r2, r3, #3
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	3208      	adds	r2, #8
 80052d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	f003 0307 	and.w	r3, r3, #7
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	220f      	movs	r2, #15
 80052e8:	fa02 f303 	lsl.w	r3, r2, r3
 80052ec:	43db      	mvns	r3, r3
 80052ee:	693a      	ldr	r2, [r7, #16]
 80052f0:	4013      	ands	r3, r2
 80052f2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	691a      	ldr	r2, [r3, #16]
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	f003 0307 	and.w	r3, r3, #7
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	fa02 f303 	lsl.w	r3, r2, r3
 8005304:	693a      	ldr	r2, [r7, #16]
 8005306:	4313      	orrs	r3, r2
 8005308:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	08da      	lsrs	r2, r3, #3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	3208      	adds	r2, #8
 8005312:	6939      	ldr	r1, [r7, #16]
 8005314:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	005b      	lsls	r3, r3, #1
 8005322:	2203      	movs	r2, #3
 8005324:	fa02 f303 	lsl.w	r3, r2, r3
 8005328:	43db      	mvns	r3, r3
 800532a:	693a      	ldr	r2, [r7, #16]
 800532c:	4013      	ands	r3, r2
 800532e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	f003 0203 	and.w	r2, r3, #3
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	005b      	lsls	r3, r3, #1
 800533c:	fa02 f303 	lsl.w	r3, r2, r3
 8005340:	693a      	ldr	r2, [r7, #16]
 8005342:	4313      	orrs	r3, r2
 8005344:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	693a      	ldr	r2, [r7, #16]
 800534a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005354:	2b00      	cmp	r3, #0
 8005356:	f000 80ac 	beq.w	80054b2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800535a:	4b5f      	ldr	r3, [pc, #380]	; (80054d8 <HAL_GPIO_Init+0x330>)
 800535c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800535e:	4a5e      	ldr	r2, [pc, #376]	; (80054d8 <HAL_GPIO_Init+0x330>)
 8005360:	f043 0301 	orr.w	r3, r3, #1
 8005364:	6613      	str	r3, [r2, #96]	; 0x60
 8005366:	4b5c      	ldr	r3, [pc, #368]	; (80054d8 <HAL_GPIO_Init+0x330>)
 8005368:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800536a:	f003 0301 	and.w	r3, r3, #1
 800536e:	60bb      	str	r3, [r7, #8]
 8005370:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005372:	4a5a      	ldr	r2, [pc, #360]	; (80054dc <HAL_GPIO_Init+0x334>)
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	089b      	lsrs	r3, r3, #2
 8005378:	3302      	adds	r3, #2
 800537a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800537e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	f003 0303 	and.w	r3, r3, #3
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	220f      	movs	r2, #15
 800538a:	fa02 f303 	lsl.w	r3, r2, r3
 800538e:	43db      	mvns	r3, r3
 8005390:	693a      	ldr	r2, [r7, #16]
 8005392:	4013      	ands	r3, r2
 8005394:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800539c:	d025      	beq.n	80053ea <HAL_GPIO_Init+0x242>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a4f      	ldr	r2, [pc, #316]	; (80054e0 <HAL_GPIO_Init+0x338>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d01f      	beq.n	80053e6 <HAL_GPIO_Init+0x23e>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a4e      	ldr	r2, [pc, #312]	; (80054e4 <HAL_GPIO_Init+0x33c>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d019      	beq.n	80053e2 <HAL_GPIO_Init+0x23a>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a4d      	ldr	r2, [pc, #308]	; (80054e8 <HAL_GPIO_Init+0x340>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d013      	beq.n	80053de <HAL_GPIO_Init+0x236>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a4c      	ldr	r2, [pc, #304]	; (80054ec <HAL_GPIO_Init+0x344>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d00d      	beq.n	80053da <HAL_GPIO_Init+0x232>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a4b      	ldr	r2, [pc, #300]	; (80054f0 <HAL_GPIO_Init+0x348>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d007      	beq.n	80053d6 <HAL_GPIO_Init+0x22e>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a4a      	ldr	r2, [pc, #296]	; (80054f4 <HAL_GPIO_Init+0x34c>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d101      	bne.n	80053d2 <HAL_GPIO_Init+0x22a>
 80053ce:	2306      	movs	r3, #6
 80053d0:	e00c      	b.n	80053ec <HAL_GPIO_Init+0x244>
 80053d2:	2307      	movs	r3, #7
 80053d4:	e00a      	b.n	80053ec <HAL_GPIO_Init+0x244>
 80053d6:	2305      	movs	r3, #5
 80053d8:	e008      	b.n	80053ec <HAL_GPIO_Init+0x244>
 80053da:	2304      	movs	r3, #4
 80053dc:	e006      	b.n	80053ec <HAL_GPIO_Init+0x244>
 80053de:	2303      	movs	r3, #3
 80053e0:	e004      	b.n	80053ec <HAL_GPIO_Init+0x244>
 80053e2:	2302      	movs	r3, #2
 80053e4:	e002      	b.n	80053ec <HAL_GPIO_Init+0x244>
 80053e6:	2301      	movs	r3, #1
 80053e8:	e000      	b.n	80053ec <HAL_GPIO_Init+0x244>
 80053ea:	2300      	movs	r3, #0
 80053ec:	697a      	ldr	r2, [r7, #20]
 80053ee:	f002 0203 	and.w	r2, r2, #3
 80053f2:	0092      	lsls	r2, r2, #2
 80053f4:	4093      	lsls	r3, r2
 80053f6:	693a      	ldr	r2, [r7, #16]
 80053f8:	4313      	orrs	r3, r2
 80053fa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80053fc:	4937      	ldr	r1, [pc, #220]	; (80054dc <HAL_GPIO_Init+0x334>)
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	089b      	lsrs	r3, r3, #2
 8005402:	3302      	adds	r3, #2
 8005404:	693a      	ldr	r2, [r7, #16]
 8005406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800540a:	4b3b      	ldr	r3, [pc, #236]	; (80054f8 <HAL_GPIO_Init+0x350>)
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	43db      	mvns	r3, r3
 8005414:	693a      	ldr	r2, [r7, #16]
 8005416:	4013      	ands	r3, r2
 8005418:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005422:	2b00      	cmp	r3, #0
 8005424:	d003      	beq.n	800542e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8005426:	693a      	ldr	r2, [r7, #16]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	4313      	orrs	r3, r2
 800542c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800542e:	4a32      	ldr	r2, [pc, #200]	; (80054f8 <HAL_GPIO_Init+0x350>)
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005434:	4b30      	ldr	r3, [pc, #192]	; (80054f8 <HAL_GPIO_Init+0x350>)
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	43db      	mvns	r3, r3
 800543e:	693a      	ldr	r2, [r7, #16]
 8005440:	4013      	ands	r3, r2
 8005442:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800544c:	2b00      	cmp	r3, #0
 800544e:	d003      	beq.n	8005458 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8005450:	693a      	ldr	r2, [r7, #16]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	4313      	orrs	r3, r2
 8005456:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005458:	4a27      	ldr	r2, [pc, #156]	; (80054f8 <HAL_GPIO_Init+0x350>)
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800545e:	4b26      	ldr	r3, [pc, #152]	; (80054f8 <HAL_GPIO_Init+0x350>)
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	43db      	mvns	r3, r3
 8005468:	693a      	ldr	r2, [r7, #16]
 800546a:	4013      	ands	r3, r2
 800546c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d003      	beq.n	8005482 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800547a:	693a      	ldr	r2, [r7, #16]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	4313      	orrs	r3, r2
 8005480:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005482:	4a1d      	ldr	r2, [pc, #116]	; (80054f8 <HAL_GPIO_Init+0x350>)
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005488:	4b1b      	ldr	r3, [pc, #108]	; (80054f8 <HAL_GPIO_Init+0x350>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	43db      	mvns	r3, r3
 8005492:	693a      	ldr	r2, [r7, #16]
 8005494:	4013      	ands	r3, r2
 8005496:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d003      	beq.n	80054ac <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80054a4:	693a      	ldr	r2, [r7, #16]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80054ac:	4a12      	ldr	r2, [pc, #72]	; (80054f8 <HAL_GPIO_Init+0x350>)
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	3301      	adds	r3, #1
 80054b6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	fa22 f303 	lsr.w	r3, r2, r3
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	f47f ae78 	bne.w	80051b8 <HAL_GPIO_Init+0x10>
  }
}
 80054c8:	bf00      	nop
 80054ca:	bf00      	nop
 80054cc:	371c      	adds	r7, #28
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr
 80054d6:	bf00      	nop
 80054d8:	40021000 	.word	0x40021000
 80054dc:	40010000 	.word	0x40010000
 80054e0:	48000400 	.word	0x48000400
 80054e4:	48000800 	.word	0x48000800
 80054e8:	48000c00 	.word	0x48000c00
 80054ec:	48001000 	.word	0x48001000
 80054f0:	48001400 	.word	0x48001400
 80054f4:	48001800 	.word	0x48001800
 80054f8:	40010400 	.word	0x40010400

080054fc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80054fc:	b480      	push	{r7}
 80054fe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005500:	4b05      	ldr	r3, [pc, #20]	; (8005518 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a04      	ldr	r2, [pc, #16]	; (8005518 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005506:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800550a:	6013      	str	r3, [r2, #0]
}
 800550c:	bf00      	nop
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr
 8005516:	bf00      	nop
 8005518:	40007000 	.word	0x40007000

0800551c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800551c:	b480      	push	{r7}
 800551e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005520:	4b04      	ldr	r3, [pc, #16]	; (8005534 <HAL_PWREx_GetVoltageRange+0x18>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005528:	4618      	mov	r0, r3
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop
 8005534:	40007000 	.word	0x40007000

08005538 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005538:	b480      	push	{r7}
 800553a:	b085      	sub	sp, #20
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005546:	d130      	bne.n	80055aa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005548:	4b23      	ldr	r3, [pc, #140]	; (80055d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005550:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005554:	d038      	beq.n	80055c8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005556:	4b20      	ldr	r3, [pc, #128]	; (80055d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800555e:	4a1e      	ldr	r2, [pc, #120]	; (80055d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005560:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005564:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005566:	4b1d      	ldr	r3, [pc, #116]	; (80055dc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2232      	movs	r2, #50	; 0x32
 800556c:	fb02 f303 	mul.w	r3, r2, r3
 8005570:	4a1b      	ldr	r2, [pc, #108]	; (80055e0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005572:	fba2 2303 	umull	r2, r3, r2, r3
 8005576:	0c9b      	lsrs	r3, r3, #18
 8005578:	3301      	adds	r3, #1
 800557a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800557c:	e002      	b.n	8005584 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	3b01      	subs	r3, #1
 8005582:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005584:	4b14      	ldr	r3, [pc, #80]	; (80055d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005586:	695b      	ldr	r3, [r3, #20]
 8005588:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800558c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005590:	d102      	bne.n	8005598 <HAL_PWREx_ControlVoltageScaling+0x60>
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d1f2      	bne.n	800557e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005598:	4b0f      	ldr	r3, [pc, #60]	; (80055d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800559a:	695b      	ldr	r3, [r3, #20]
 800559c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055a4:	d110      	bne.n	80055c8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80055a6:	2303      	movs	r3, #3
 80055a8:	e00f      	b.n	80055ca <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80055aa:	4b0b      	ldr	r3, [pc, #44]	; (80055d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80055b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055b6:	d007      	beq.n	80055c8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80055b8:	4b07      	ldr	r3, [pc, #28]	; (80055d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80055c0:	4a05      	ldr	r2, [pc, #20]	; (80055d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80055c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80055c6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3714      	adds	r7, #20
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr
 80055d6:	bf00      	nop
 80055d8:	40007000 	.word	0x40007000
 80055dc:	20000084 	.word	0x20000084
 80055e0:	431bde83 	.word	0x431bde83

080055e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b088      	sub	sp, #32
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d101      	bne.n	80055f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e3d4      	b.n	8005da0 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055f6:	4ba1      	ldr	r3, [pc, #644]	; (800587c <HAL_RCC_OscConfig+0x298>)
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	f003 030c 	and.w	r3, r3, #12
 80055fe:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005600:	4b9e      	ldr	r3, [pc, #632]	; (800587c <HAL_RCC_OscConfig+0x298>)
 8005602:	68db      	ldr	r3, [r3, #12]
 8005604:	f003 0303 	and.w	r3, r3, #3
 8005608:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 0310 	and.w	r3, r3, #16
 8005612:	2b00      	cmp	r3, #0
 8005614:	f000 80e4 	beq.w	80057e0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005618:	69bb      	ldr	r3, [r7, #24]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d007      	beq.n	800562e <HAL_RCC_OscConfig+0x4a>
 800561e:	69bb      	ldr	r3, [r7, #24]
 8005620:	2b0c      	cmp	r3, #12
 8005622:	f040 808b 	bne.w	800573c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	2b01      	cmp	r3, #1
 800562a:	f040 8087 	bne.w	800573c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800562e:	4b93      	ldr	r3, [pc, #588]	; (800587c <HAL_RCC_OscConfig+0x298>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 0302 	and.w	r3, r3, #2
 8005636:	2b00      	cmp	r3, #0
 8005638:	d005      	beq.n	8005646 <HAL_RCC_OscConfig+0x62>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	699b      	ldr	r3, [r3, #24]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d101      	bne.n	8005646 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	e3ac      	b.n	8005da0 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a1a      	ldr	r2, [r3, #32]
 800564a:	4b8c      	ldr	r3, [pc, #560]	; (800587c <HAL_RCC_OscConfig+0x298>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 0308 	and.w	r3, r3, #8
 8005652:	2b00      	cmp	r3, #0
 8005654:	d004      	beq.n	8005660 <HAL_RCC_OscConfig+0x7c>
 8005656:	4b89      	ldr	r3, [pc, #548]	; (800587c <HAL_RCC_OscConfig+0x298>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800565e:	e005      	b.n	800566c <HAL_RCC_OscConfig+0x88>
 8005660:	4b86      	ldr	r3, [pc, #536]	; (800587c <HAL_RCC_OscConfig+0x298>)
 8005662:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005666:	091b      	lsrs	r3, r3, #4
 8005668:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800566c:	4293      	cmp	r3, r2
 800566e:	d223      	bcs.n	80056b8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6a1b      	ldr	r3, [r3, #32]
 8005674:	4618      	mov	r0, r3
 8005676:	f000 fd41 	bl	80060fc <RCC_SetFlashLatencyFromMSIRange>
 800567a:	4603      	mov	r3, r0
 800567c:	2b00      	cmp	r3, #0
 800567e:	d001      	beq.n	8005684 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	e38d      	b.n	8005da0 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005684:	4b7d      	ldr	r3, [pc, #500]	; (800587c <HAL_RCC_OscConfig+0x298>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a7c      	ldr	r2, [pc, #496]	; (800587c <HAL_RCC_OscConfig+0x298>)
 800568a:	f043 0308 	orr.w	r3, r3, #8
 800568e:	6013      	str	r3, [r2, #0]
 8005690:	4b7a      	ldr	r3, [pc, #488]	; (800587c <HAL_RCC_OscConfig+0x298>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6a1b      	ldr	r3, [r3, #32]
 800569c:	4977      	ldr	r1, [pc, #476]	; (800587c <HAL_RCC_OscConfig+0x298>)
 800569e:	4313      	orrs	r3, r2
 80056a0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80056a2:	4b76      	ldr	r3, [pc, #472]	; (800587c <HAL_RCC_OscConfig+0x298>)
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	69db      	ldr	r3, [r3, #28]
 80056ae:	021b      	lsls	r3, r3, #8
 80056b0:	4972      	ldr	r1, [pc, #456]	; (800587c <HAL_RCC_OscConfig+0x298>)
 80056b2:	4313      	orrs	r3, r2
 80056b4:	604b      	str	r3, [r1, #4]
 80056b6:	e025      	b.n	8005704 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80056b8:	4b70      	ldr	r3, [pc, #448]	; (800587c <HAL_RCC_OscConfig+0x298>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a6f      	ldr	r2, [pc, #444]	; (800587c <HAL_RCC_OscConfig+0x298>)
 80056be:	f043 0308 	orr.w	r3, r3, #8
 80056c2:	6013      	str	r3, [r2, #0]
 80056c4:	4b6d      	ldr	r3, [pc, #436]	; (800587c <HAL_RCC_OscConfig+0x298>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6a1b      	ldr	r3, [r3, #32]
 80056d0:	496a      	ldr	r1, [pc, #424]	; (800587c <HAL_RCC_OscConfig+0x298>)
 80056d2:	4313      	orrs	r3, r2
 80056d4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80056d6:	4b69      	ldr	r3, [pc, #420]	; (800587c <HAL_RCC_OscConfig+0x298>)
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	69db      	ldr	r3, [r3, #28]
 80056e2:	021b      	lsls	r3, r3, #8
 80056e4:	4965      	ldr	r1, [pc, #404]	; (800587c <HAL_RCC_OscConfig+0x298>)
 80056e6:	4313      	orrs	r3, r2
 80056e8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80056ea:	69bb      	ldr	r3, [r7, #24]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d109      	bne.n	8005704 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6a1b      	ldr	r3, [r3, #32]
 80056f4:	4618      	mov	r0, r3
 80056f6:	f000 fd01 	bl	80060fc <RCC_SetFlashLatencyFromMSIRange>
 80056fa:	4603      	mov	r3, r0
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d001      	beq.n	8005704 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	e34d      	b.n	8005da0 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005704:	f000 fc36 	bl	8005f74 <HAL_RCC_GetSysClockFreq>
 8005708:	4602      	mov	r2, r0
 800570a:	4b5c      	ldr	r3, [pc, #368]	; (800587c <HAL_RCC_OscConfig+0x298>)
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	091b      	lsrs	r3, r3, #4
 8005710:	f003 030f 	and.w	r3, r3, #15
 8005714:	495a      	ldr	r1, [pc, #360]	; (8005880 <HAL_RCC_OscConfig+0x29c>)
 8005716:	5ccb      	ldrb	r3, [r1, r3]
 8005718:	f003 031f 	and.w	r3, r3, #31
 800571c:	fa22 f303 	lsr.w	r3, r2, r3
 8005720:	4a58      	ldr	r2, [pc, #352]	; (8005884 <HAL_RCC_OscConfig+0x2a0>)
 8005722:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005724:	4b58      	ldr	r3, [pc, #352]	; (8005888 <HAL_RCC_OscConfig+0x2a4>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4618      	mov	r0, r3
 800572a:	f7fd fec3 	bl	80034b4 <HAL_InitTick>
 800572e:	4603      	mov	r3, r0
 8005730:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005732:	7bfb      	ldrb	r3, [r7, #15]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d052      	beq.n	80057de <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005738:	7bfb      	ldrb	r3, [r7, #15]
 800573a:	e331      	b.n	8005da0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	699b      	ldr	r3, [r3, #24]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d032      	beq.n	80057aa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005744:	4b4d      	ldr	r3, [pc, #308]	; (800587c <HAL_RCC_OscConfig+0x298>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a4c      	ldr	r2, [pc, #304]	; (800587c <HAL_RCC_OscConfig+0x298>)
 800574a:	f043 0301 	orr.w	r3, r3, #1
 800574e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005750:	f7fd ff00 	bl	8003554 <HAL_GetTick>
 8005754:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005756:	e008      	b.n	800576a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005758:	f7fd fefc 	bl	8003554 <HAL_GetTick>
 800575c:	4602      	mov	r2, r0
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	2b02      	cmp	r3, #2
 8005764:	d901      	bls.n	800576a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8005766:	2303      	movs	r3, #3
 8005768:	e31a      	b.n	8005da0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800576a:	4b44      	ldr	r3, [pc, #272]	; (800587c <HAL_RCC_OscConfig+0x298>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 0302 	and.w	r3, r3, #2
 8005772:	2b00      	cmp	r3, #0
 8005774:	d0f0      	beq.n	8005758 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005776:	4b41      	ldr	r3, [pc, #260]	; (800587c <HAL_RCC_OscConfig+0x298>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a40      	ldr	r2, [pc, #256]	; (800587c <HAL_RCC_OscConfig+0x298>)
 800577c:	f043 0308 	orr.w	r3, r3, #8
 8005780:	6013      	str	r3, [r2, #0]
 8005782:	4b3e      	ldr	r3, [pc, #248]	; (800587c <HAL_RCC_OscConfig+0x298>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6a1b      	ldr	r3, [r3, #32]
 800578e:	493b      	ldr	r1, [pc, #236]	; (800587c <HAL_RCC_OscConfig+0x298>)
 8005790:	4313      	orrs	r3, r2
 8005792:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005794:	4b39      	ldr	r3, [pc, #228]	; (800587c <HAL_RCC_OscConfig+0x298>)
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	69db      	ldr	r3, [r3, #28]
 80057a0:	021b      	lsls	r3, r3, #8
 80057a2:	4936      	ldr	r1, [pc, #216]	; (800587c <HAL_RCC_OscConfig+0x298>)
 80057a4:	4313      	orrs	r3, r2
 80057a6:	604b      	str	r3, [r1, #4]
 80057a8:	e01a      	b.n	80057e0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80057aa:	4b34      	ldr	r3, [pc, #208]	; (800587c <HAL_RCC_OscConfig+0x298>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a33      	ldr	r2, [pc, #204]	; (800587c <HAL_RCC_OscConfig+0x298>)
 80057b0:	f023 0301 	bic.w	r3, r3, #1
 80057b4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80057b6:	f7fd fecd 	bl	8003554 <HAL_GetTick>
 80057ba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80057bc:	e008      	b.n	80057d0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80057be:	f7fd fec9 	bl	8003554 <HAL_GetTick>
 80057c2:	4602      	mov	r2, r0
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	1ad3      	subs	r3, r2, r3
 80057c8:	2b02      	cmp	r3, #2
 80057ca:	d901      	bls.n	80057d0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80057cc:	2303      	movs	r3, #3
 80057ce:	e2e7      	b.n	8005da0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80057d0:	4b2a      	ldr	r3, [pc, #168]	; (800587c <HAL_RCC_OscConfig+0x298>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 0302 	and.w	r3, r3, #2
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d1f0      	bne.n	80057be <HAL_RCC_OscConfig+0x1da>
 80057dc:	e000      	b.n	80057e0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80057de:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 0301 	and.w	r3, r3, #1
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d074      	beq.n	80058d6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80057ec:	69bb      	ldr	r3, [r7, #24]
 80057ee:	2b08      	cmp	r3, #8
 80057f0:	d005      	beq.n	80057fe <HAL_RCC_OscConfig+0x21a>
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	2b0c      	cmp	r3, #12
 80057f6:	d10e      	bne.n	8005816 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	2b03      	cmp	r3, #3
 80057fc:	d10b      	bne.n	8005816 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057fe:	4b1f      	ldr	r3, [pc, #124]	; (800587c <HAL_RCC_OscConfig+0x298>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005806:	2b00      	cmp	r3, #0
 8005808:	d064      	beq.n	80058d4 <HAL_RCC_OscConfig+0x2f0>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d160      	bne.n	80058d4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	e2c4      	b.n	8005da0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800581e:	d106      	bne.n	800582e <HAL_RCC_OscConfig+0x24a>
 8005820:	4b16      	ldr	r3, [pc, #88]	; (800587c <HAL_RCC_OscConfig+0x298>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a15      	ldr	r2, [pc, #84]	; (800587c <HAL_RCC_OscConfig+0x298>)
 8005826:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800582a:	6013      	str	r3, [r2, #0]
 800582c:	e01d      	b.n	800586a <HAL_RCC_OscConfig+0x286>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005836:	d10c      	bne.n	8005852 <HAL_RCC_OscConfig+0x26e>
 8005838:	4b10      	ldr	r3, [pc, #64]	; (800587c <HAL_RCC_OscConfig+0x298>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a0f      	ldr	r2, [pc, #60]	; (800587c <HAL_RCC_OscConfig+0x298>)
 800583e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005842:	6013      	str	r3, [r2, #0]
 8005844:	4b0d      	ldr	r3, [pc, #52]	; (800587c <HAL_RCC_OscConfig+0x298>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a0c      	ldr	r2, [pc, #48]	; (800587c <HAL_RCC_OscConfig+0x298>)
 800584a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800584e:	6013      	str	r3, [r2, #0]
 8005850:	e00b      	b.n	800586a <HAL_RCC_OscConfig+0x286>
 8005852:	4b0a      	ldr	r3, [pc, #40]	; (800587c <HAL_RCC_OscConfig+0x298>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a09      	ldr	r2, [pc, #36]	; (800587c <HAL_RCC_OscConfig+0x298>)
 8005858:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800585c:	6013      	str	r3, [r2, #0]
 800585e:	4b07      	ldr	r3, [pc, #28]	; (800587c <HAL_RCC_OscConfig+0x298>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a06      	ldr	r2, [pc, #24]	; (800587c <HAL_RCC_OscConfig+0x298>)
 8005864:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005868:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d01c      	beq.n	80058ac <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005872:	f7fd fe6f 	bl	8003554 <HAL_GetTick>
 8005876:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005878:	e011      	b.n	800589e <HAL_RCC_OscConfig+0x2ba>
 800587a:	bf00      	nop
 800587c:	40021000 	.word	0x40021000
 8005880:	0800cfa4 	.word	0x0800cfa4
 8005884:	20000084 	.word	0x20000084
 8005888:	20000088 	.word	0x20000088
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800588c:	f7fd fe62 	bl	8003554 <HAL_GetTick>
 8005890:	4602      	mov	r2, r0
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	2b64      	cmp	r3, #100	; 0x64
 8005898:	d901      	bls.n	800589e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800589a:	2303      	movs	r3, #3
 800589c:	e280      	b.n	8005da0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800589e:	4baf      	ldr	r3, [pc, #700]	; (8005b5c <HAL_RCC_OscConfig+0x578>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d0f0      	beq.n	800588c <HAL_RCC_OscConfig+0x2a8>
 80058aa:	e014      	b.n	80058d6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058ac:	f7fd fe52 	bl	8003554 <HAL_GetTick>
 80058b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80058b2:	e008      	b.n	80058c6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058b4:	f7fd fe4e 	bl	8003554 <HAL_GetTick>
 80058b8:	4602      	mov	r2, r0
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	1ad3      	subs	r3, r2, r3
 80058be:	2b64      	cmp	r3, #100	; 0x64
 80058c0:	d901      	bls.n	80058c6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80058c2:	2303      	movs	r3, #3
 80058c4:	e26c      	b.n	8005da0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80058c6:	4ba5      	ldr	r3, [pc, #660]	; (8005b5c <HAL_RCC_OscConfig+0x578>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d1f0      	bne.n	80058b4 <HAL_RCC_OscConfig+0x2d0>
 80058d2:	e000      	b.n	80058d6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f003 0302 	and.w	r3, r3, #2
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d060      	beq.n	80059a4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	2b04      	cmp	r3, #4
 80058e6:	d005      	beq.n	80058f4 <HAL_RCC_OscConfig+0x310>
 80058e8:	69bb      	ldr	r3, [r7, #24]
 80058ea:	2b0c      	cmp	r3, #12
 80058ec:	d119      	bne.n	8005922 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	2b02      	cmp	r3, #2
 80058f2:	d116      	bne.n	8005922 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80058f4:	4b99      	ldr	r3, [pc, #612]	; (8005b5c <HAL_RCC_OscConfig+0x578>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d005      	beq.n	800590c <HAL_RCC_OscConfig+0x328>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d101      	bne.n	800590c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	e249      	b.n	8005da0 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800590c:	4b93      	ldr	r3, [pc, #588]	; (8005b5c <HAL_RCC_OscConfig+0x578>)
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	691b      	ldr	r3, [r3, #16]
 8005918:	061b      	lsls	r3, r3, #24
 800591a:	4990      	ldr	r1, [pc, #576]	; (8005b5c <HAL_RCC_OscConfig+0x578>)
 800591c:	4313      	orrs	r3, r2
 800591e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005920:	e040      	b.n	80059a4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d023      	beq.n	8005972 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800592a:	4b8c      	ldr	r3, [pc, #560]	; (8005b5c <HAL_RCC_OscConfig+0x578>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a8b      	ldr	r2, [pc, #556]	; (8005b5c <HAL_RCC_OscConfig+0x578>)
 8005930:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005934:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005936:	f7fd fe0d 	bl	8003554 <HAL_GetTick>
 800593a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800593c:	e008      	b.n	8005950 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800593e:	f7fd fe09 	bl	8003554 <HAL_GetTick>
 8005942:	4602      	mov	r2, r0
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	1ad3      	subs	r3, r2, r3
 8005948:	2b02      	cmp	r3, #2
 800594a:	d901      	bls.n	8005950 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800594c:	2303      	movs	r3, #3
 800594e:	e227      	b.n	8005da0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005950:	4b82      	ldr	r3, [pc, #520]	; (8005b5c <HAL_RCC_OscConfig+0x578>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005958:	2b00      	cmp	r3, #0
 800595a:	d0f0      	beq.n	800593e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800595c:	4b7f      	ldr	r3, [pc, #508]	; (8005b5c <HAL_RCC_OscConfig+0x578>)
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	691b      	ldr	r3, [r3, #16]
 8005968:	061b      	lsls	r3, r3, #24
 800596a:	497c      	ldr	r1, [pc, #496]	; (8005b5c <HAL_RCC_OscConfig+0x578>)
 800596c:	4313      	orrs	r3, r2
 800596e:	604b      	str	r3, [r1, #4]
 8005970:	e018      	b.n	80059a4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005972:	4b7a      	ldr	r3, [pc, #488]	; (8005b5c <HAL_RCC_OscConfig+0x578>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a79      	ldr	r2, [pc, #484]	; (8005b5c <HAL_RCC_OscConfig+0x578>)
 8005978:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800597c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800597e:	f7fd fde9 	bl	8003554 <HAL_GetTick>
 8005982:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005984:	e008      	b.n	8005998 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005986:	f7fd fde5 	bl	8003554 <HAL_GetTick>
 800598a:	4602      	mov	r2, r0
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	1ad3      	subs	r3, r2, r3
 8005990:	2b02      	cmp	r3, #2
 8005992:	d901      	bls.n	8005998 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005994:	2303      	movs	r3, #3
 8005996:	e203      	b.n	8005da0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005998:	4b70      	ldr	r3, [pc, #448]	; (8005b5c <HAL_RCC_OscConfig+0x578>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d1f0      	bne.n	8005986 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 0308 	and.w	r3, r3, #8
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d03c      	beq.n	8005a2a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	695b      	ldr	r3, [r3, #20]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d01c      	beq.n	80059f2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059b8:	4b68      	ldr	r3, [pc, #416]	; (8005b5c <HAL_RCC_OscConfig+0x578>)
 80059ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059be:	4a67      	ldr	r2, [pc, #412]	; (8005b5c <HAL_RCC_OscConfig+0x578>)
 80059c0:	f043 0301 	orr.w	r3, r3, #1
 80059c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059c8:	f7fd fdc4 	bl	8003554 <HAL_GetTick>
 80059cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80059ce:	e008      	b.n	80059e2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059d0:	f7fd fdc0 	bl	8003554 <HAL_GetTick>
 80059d4:	4602      	mov	r2, r0
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	1ad3      	subs	r3, r2, r3
 80059da:	2b02      	cmp	r3, #2
 80059dc:	d901      	bls.n	80059e2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80059de:	2303      	movs	r3, #3
 80059e0:	e1de      	b.n	8005da0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80059e2:	4b5e      	ldr	r3, [pc, #376]	; (8005b5c <HAL_RCC_OscConfig+0x578>)
 80059e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059e8:	f003 0302 	and.w	r3, r3, #2
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d0ef      	beq.n	80059d0 <HAL_RCC_OscConfig+0x3ec>
 80059f0:	e01b      	b.n	8005a2a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059f2:	4b5a      	ldr	r3, [pc, #360]	; (8005b5c <HAL_RCC_OscConfig+0x578>)
 80059f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059f8:	4a58      	ldr	r2, [pc, #352]	; (8005b5c <HAL_RCC_OscConfig+0x578>)
 80059fa:	f023 0301 	bic.w	r3, r3, #1
 80059fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a02:	f7fd fda7 	bl	8003554 <HAL_GetTick>
 8005a06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005a08:	e008      	b.n	8005a1c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a0a:	f7fd fda3 	bl	8003554 <HAL_GetTick>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	1ad3      	subs	r3, r2, r3
 8005a14:	2b02      	cmp	r3, #2
 8005a16:	d901      	bls.n	8005a1c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005a18:	2303      	movs	r3, #3
 8005a1a:	e1c1      	b.n	8005da0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005a1c:	4b4f      	ldr	r3, [pc, #316]	; (8005b5c <HAL_RCC_OscConfig+0x578>)
 8005a1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a22:	f003 0302 	and.w	r3, r3, #2
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d1ef      	bne.n	8005a0a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 0304 	and.w	r3, r3, #4
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	f000 80a6 	beq.w	8005b84 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005a3c:	4b47      	ldr	r3, [pc, #284]	; (8005b5c <HAL_RCC_OscConfig+0x578>)
 8005a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d10d      	bne.n	8005a64 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a48:	4b44      	ldr	r3, [pc, #272]	; (8005b5c <HAL_RCC_OscConfig+0x578>)
 8005a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a4c:	4a43      	ldr	r2, [pc, #268]	; (8005b5c <HAL_RCC_OscConfig+0x578>)
 8005a4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a52:	6593      	str	r3, [r2, #88]	; 0x58
 8005a54:	4b41      	ldr	r3, [pc, #260]	; (8005b5c <HAL_RCC_OscConfig+0x578>)
 8005a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a5c:	60bb      	str	r3, [r7, #8]
 8005a5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a60:	2301      	movs	r3, #1
 8005a62:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a64:	4b3e      	ldr	r3, [pc, #248]	; (8005b60 <HAL_RCC_OscConfig+0x57c>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d118      	bne.n	8005aa2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a70:	4b3b      	ldr	r3, [pc, #236]	; (8005b60 <HAL_RCC_OscConfig+0x57c>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a3a      	ldr	r2, [pc, #232]	; (8005b60 <HAL_RCC_OscConfig+0x57c>)
 8005a76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a7a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a7c:	f7fd fd6a 	bl	8003554 <HAL_GetTick>
 8005a80:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a82:	e008      	b.n	8005a96 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a84:	f7fd fd66 	bl	8003554 <HAL_GetTick>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	1ad3      	subs	r3, r2, r3
 8005a8e:	2b02      	cmp	r3, #2
 8005a90:	d901      	bls.n	8005a96 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005a92:	2303      	movs	r3, #3
 8005a94:	e184      	b.n	8005da0 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a96:	4b32      	ldr	r3, [pc, #200]	; (8005b60 <HAL_RCC_OscConfig+0x57c>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d0f0      	beq.n	8005a84 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d108      	bne.n	8005abc <HAL_RCC_OscConfig+0x4d8>
 8005aaa:	4b2c      	ldr	r3, [pc, #176]	; (8005b5c <HAL_RCC_OscConfig+0x578>)
 8005aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ab0:	4a2a      	ldr	r2, [pc, #168]	; (8005b5c <HAL_RCC_OscConfig+0x578>)
 8005ab2:	f043 0301 	orr.w	r3, r3, #1
 8005ab6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005aba:	e024      	b.n	8005b06 <HAL_RCC_OscConfig+0x522>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	2b05      	cmp	r3, #5
 8005ac2:	d110      	bne.n	8005ae6 <HAL_RCC_OscConfig+0x502>
 8005ac4:	4b25      	ldr	r3, [pc, #148]	; (8005b5c <HAL_RCC_OscConfig+0x578>)
 8005ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aca:	4a24      	ldr	r2, [pc, #144]	; (8005b5c <HAL_RCC_OscConfig+0x578>)
 8005acc:	f043 0304 	orr.w	r3, r3, #4
 8005ad0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005ad4:	4b21      	ldr	r3, [pc, #132]	; (8005b5c <HAL_RCC_OscConfig+0x578>)
 8005ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ada:	4a20      	ldr	r2, [pc, #128]	; (8005b5c <HAL_RCC_OscConfig+0x578>)
 8005adc:	f043 0301 	orr.w	r3, r3, #1
 8005ae0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005ae4:	e00f      	b.n	8005b06 <HAL_RCC_OscConfig+0x522>
 8005ae6:	4b1d      	ldr	r3, [pc, #116]	; (8005b5c <HAL_RCC_OscConfig+0x578>)
 8005ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aec:	4a1b      	ldr	r2, [pc, #108]	; (8005b5c <HAL_RCC_OscConfig+0x578>)
 8005aee:	f023 0301 	bic.w	r3, r3, #1
 8005af2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005af6:	4b19      	ldr	r3, [pc, #100]	; (8005b5c <HAL_RCC_OscConfig+0x578>)
 8005af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005afc:	4a17      	ldr	r2, [pc, #92]	; (8005b5c <HAL_RCC_OscConfig+0x578>)
 8005afe:	f023 0304 	bic.w	r3, r3, #4
 8005b02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d016      	beq.n	8005b3c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b0e:	f7fd fd21 	bl	8003554 <HAL_GetTick>
 8005b12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b14:	e00a      	b.n	8005b2c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b16:	f7fd fd1d 	bl	8003554 <HAL_GetTick>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	1ad3      	subs	r3, r2, r3
 8005b20:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d901      	bls.n	8005b2c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8005b28:	2303      	movs	r3, #3
 8005b2a:	e139      	b.n	8005da0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b2c:	4b0b      	ldr	r3, [pc, #44]	; (8005b5c <HAL_RCC_OscConfig+0x578>)
 8005b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b32:	f003 0302 	and.w	r3, r3, #2
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d0ed      	beq.n	8005b16 <HAL_RCC_OscConfig+0x532>
 8005b3a:	e01a      	b.n	8005b72 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b3c:	f7fd fd0a 	bl	8003554 <HAL_GetTick>
 8005b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005b42:	e00f      	b.n	8005b64 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b44:	f7fd fd06 	bl	8003554 <HAL_GetTick>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	1ad3      	subs	r3, r2, r3
 8005b4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d906      	bls.n	8005b64 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005b56:	2303      	movs	r3, #3
 8005b58:	e122      	b.n	8005da0 <HAL_RCC_OscConfig+0x7bc>
 8005b5a:	bf00      	nop
 8005b5c:	40021000 	.word	0x40021000
 8005b60:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005b64:	4b90      	ldr	r3, [pc, #576]	; (8005da8 <HAL_RCC_OscConfig+0x7c4>)
 8005b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b6a:	f003 0302 	and.w	r3, r3, #2
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d1e8      	bne.n	8005b44 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005b72:	7ffb      	ldrb	r3, [r7, #31]
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d105      	bne.n	8005b84 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b78:	4b8b      	ldr	r3, [pc, #556]	; (8005da8 <HAL_RCC_OscConfig+0x7c4>)
 8005b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b7c:	4a8a      	ldr	r2, [pc, #552]	; (8005da8 <HAL_RCC_OscConfig+0x7c4>)
 8005b7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b82:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	f000 8108 	beq.w	8005d9e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b92:	2b02      	cmp	r3, #2
 8005b94:	f040 80d0 	bne.w	8005d38 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005b98:	4b83      	ldr	r3, [pc, #524]	; (8005da8 <HAL_RCC_OscConfig+0x7c4>)
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	f003 0203 	and.w	r2, r3, #3
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d130      	bne.n	8005c0e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bb6:	3b01      	subs	r3, #1
 8005bb8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d127      	bne.n	8005c0e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bc8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d11f      	bne.n	8005c0e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bd4:	687a      	ldr	r2, [r7, #4]
 8005bd6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005bd8:	2a07      	cmp	r2, #7
 8005bda:	bf14      	ite	ne
 8005bdc:	2201      	movne	r2, #1
 8005bde:	2200      	moveq	r2, #0
 8005be0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d113      	bne.n	8005c0e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bf0:	085b      	lsrs	r3, r3, #1
 8005bf2:	3b01      	subs	r3, #1
 8005bf4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d109      	bne.n	8005c0e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c04:	085b      	lsrs	r3, r3, #1
 8005c06:	3b01      	subs	r3, #1
 8005c08:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d06e      	beq.n	8005cec <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005c0e:	69bb      	ldr	r3, [r7, #24]
 8005c10:	2b0c      	cmp	r3, #12
 8005c12:	d069      	beq.n	8005ce8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005c14:	4b64      	ldr	r3, [pc, #400]	; (8005da8 <HAL_RCC_OscConfig+0x7c4>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d105      	bne.n	8005c2c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005c20:	4b61      	ldr	r3, [pc, #388]	; (8005da8 <HAL_RCC_OscConfig+0x7c4>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d001      	beq.n	8005c30 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e0b7      	b.n	8005da0 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005c30:	4b5d      	ldr	r3, [pc, #372]	; (8005da8 <HAL_RCC_OscConfig+0x7c4>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a5c      	ldr	r2, [pc, #368]	; (8005da8 <HAL_RCC_OscConfig+0x7c4>)
 8005c36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c3a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005c3c:	f7fd fc8a 	bl	8003554 <HAL_GetTick>
 8005c40:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c42:	e008      	b.n	8005c56 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c44:	f7fd fc86 	bl	8003554 <HAL_GetTick>
 8005c48:	4602      	mov	r2, r0
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	1ad3      	subs	r3, r2, r3
 8005c4e:	2b02      	cmp	r3, #2
 8005c50:	d901      	bls.n	8005c56 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005c52:	2303      	movs	r3, #3
 8005c54:	e0a4      	b.n	8005da0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c56:	4b54      	ldr	r3, [pc, #336]	; (8005da8 <HAL_RCC_OscConfig+0x7c4>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d1f0      	bne.n	8005c44 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c62:	4b51      	ldr	r3, [pc, #324]	; (8005da8 <HAL_RCC_OscConfig+0x7c4>)
 8005c64:	68da      	ldr	r2, [r3, #12]
 8005c66:	4b51      	ldr	r3, [pc, #324]	; (8005dac <HAL_RCC_OscConfig+0x7c8>)
 8005c68:	4013      	ands	r3, r2
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005c72:	3a01      	subs	r2, #1
 8005c74:	0112      	lsls	r2, r2, #4
 8005c76:	4311      	orrs	r1, r2
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005c7c:	0212      	lsls	r2, r2, #8
 8005c7e:	4311      	orrs	r1, r2
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005c84:	0852      	lsrs	r2, r2, #1
 8005c86:	3a01      	subs	r2, #1
 8005c88:	0552      	lsls	r2, r2, #21
 8005c8a:	4311      	orrs	r1, r2
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005c90:	0852      	lsrs	r2, r2, #1
 8005c92:	3a01      	subs	r2, #1
 8005c94:	0652      	lsls	r2, r2, #25
 8005c96:	4311      	orrs	r1, r2
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005c9c:	0912      	lsrs	r2, r2, #4
 8005c9e:	0452      	lsls	r2, r2, #17
 8005ca0:	430a      	orrs	r2, r1
 8005ca2:	4941      	ldr	r1, [pc, #260]	; (8005da8 <HAL_RCC_OscConfig+0x7c4>)
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005ca8:	4b3f      	ldr	r3, [pc, #252]	; (8005da8 <HAL_RCC_OscConfig+0x7c4>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a3e      	ldr	r2, [pc, #248]	; (8005da8 <HAL_RCC_OscConfig+0x7c4>)
 8005cae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005cb2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005cb4:	4b3c      	ldr	r3, [pc, #240]	; (8005da8 <HAL_RCC_OscConfig+0x7c4>)
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	4a3b      	ldr	r2, [pc, #236]	; (8005da8 <HAL_RCC_OscConfig+0x7c4>)
 8005cba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005cbe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005cc0:	f7fd fc48 	bl	8003554 <HAL_GetTick>
 8005cc4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005cc6:	e008      	b.n	8005cda <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cc8:	f7fd fc44 	bl	8003554 <HAL_GetTick>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	1ad3      	subs	r3, r2, r3
 8005cd2:	2b02      	cmp	r3, #2
 8005cd4:	d901      	bls.n	8005cda <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005cd6:	2303      	movs	r3, #3
 8005cd8:	e062      	b.n	8005da0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005cda:	4b33      	ldr	r3, [pc, #204]	; (8005da8 <HAL_RCC_OscConfig+0x7c4>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d0f0      	beq.n	8005cc8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005ce6:	e05a      	b.n	8005d9e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e059      	b.n	8005da0 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005cec:	4b2e      	ldr	r3, [pc, #184]	; (8005da8 <HAL_RCC_OscConfig+0x7c4>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d152      	bne.n	8005d9e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005cf8:	4b2b      	ldr	r3, [pc, #172]	; (8005da8 <HAL_RCC_OscConfig+0x7c4>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a2a      	ldr	r2, [pc, #168]	; (8005da8 <HAL_RCC_OscConfig+0x7c4>)
 8005cfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d02:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005d04:	4b28      	ldr	r3, [pc, #160]	; (8005da8 <HAL_RCC_OscConfig+0x7c4>)
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	4a27      	ldr	r2, [pc, #156]	; (8005da8 <HAL_RCC_OscConfig+0x7c4>)
 8005d0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d0e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005d10:	f7fd fc20 	bl	8003554 <HAL_GetTick>
 8005d14:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d16:	e008      	b.n	8005d2a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d18:	f7fd fc1c 	bl	8003554 <HAL_GetTick>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	1ad3      	subs	r3, r2, r3
 8005d22:	2b02      	cmp	r3, #2
 8005d24:	d901      	bls.n	8005d2a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005d26:	2303      	movs	r3, #3
 8005d28:	e03a      	b.n	8005da0 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d2a:	4b1f      	ldr	r3, [pc, #124]	; (8005da8 <HAL_RCC_OscConfig+0x7c4>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d0f0      	beq.n	8005d18 <HAL_RCC_OscConfig+0x734>
 8005d36:	e032      	b.n	8005d9e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005d38:	69bb      	ldr	r3, [r7, #24]
 8005d3a:	2b0c      	cmp	r3, #12
 8005d3c:	d02d      	beq.n	8005d9a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d3e:	4b1a      	ldr	r3, [pc, #104]	; (8005da8 <HAL_RCC_OscConfig+0x7c4>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a19      	ldr	r2, [pc, #100]	; (8005da8 <HAL_RCC_OscConfig+0x7c4>)
 8005d44:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d48:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8005d4a:	4b17      	ldr	r3, [pc, #92]	; (8005da8 <HAL_RCC_OscConfig+0x7c4>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d105      	bne.n	8005d62 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005d56:	4b14      	ldr	r3, [pc, #80]	; (8005da8 <HAL_RCC_OscConfig+0x7c4>)
 8005d58:	68db      	ldr	r3, [r3, #12]
 8005d5a:	4a13      	ldr	r2, [pc, #76]	; (8005da8 <HAL_RCC_OscConfig+0x7c4>)
 8005d5c:	f023 0303 	bic.w	r3, r3, #3
 8005d60:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005d62:	4b11      	ldr	r3, [pc, #68]	; (8005da8 <HAL_RCC_OscConfig+0x7c4>)
 8005d64:	68db      	ldr	r3, [r3, #12]
 8005d66:	4a10      	ldr	r2, [pc, #64]	; (8005da8 <HAL_RCC_OscConfig+0x7c4>)
 8005d68:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005d6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d70:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d72:	f7fd fbef 	bl	8003554 <HAL_GetTick>
 8005d76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d78:	e008      	b.n	8005d8c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d7a:	f7fd fbeb 	bl	8003554 <HAL_GetTick>
 8005d7e:	4602      	mov	r2, r0
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	1ad3      	subs	r3, r2, r3
 8005d84:	2b02      	cmp	r3, #2
 8005d86:	d901      	bls.n	8005d8c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8005d88:	2303      	movs	r3, #3
 8005d8a:	e009      	b.n	8005da0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d8c:	4b06      	ldr	r3, [pc, #24]	; (8005da8 <HAL_RCC_OscConfig+0x7c4>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d1f0      	bne.n	8005d7a <HAL_RCC_OscConfig+0x796>
 8005d98:	e001      	b.n	8005d9e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e000      	b.n	8005da0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8005d9e:	2300      	movs	r3, #0
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3720      	adds	r7, #32
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}
 8005da8:	40021000 	.word	0x40021000
 8005dac:	f99d808c 	.word	0xf99d808c

08005db0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b084      	sub	sp, #16
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d101      	bne.n	8005dc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e0c8      	b.n	8005f56 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005dc4:	4b66      	ldr	r3, [pc, #408]	; (8005f60 <HAL_RCC_ClockConfig+0x1b0>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 0307 	and.w	r3, r3, #7
 8005dcc:	683a      	ldr	r2, [r7, #0]
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d910      	bls.n	8005df4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dd2:	4b63      	ldr	r3, [pc, #396]	; (8005f60 <HAL_RCC_ClockConfig+0x1b0>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f023 0207 	bic.w	r2, r3, #7
 8005dda:	4961      	ldr	r1, [pc, #388]	; (8005f60 <HAL_RCC_ClockConfig+0x1b0>)
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005de2:	4b5f      	ldr	r3, [pc, #380]	; (8005f60 <HAL_RCC_ClockConfig+0x1b0>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f003 0307 	and.w	r3, r3, #7
 8005dea:	683a      	ldr	r2, [r7, #0]
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d001      	beq.n	8005df4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	e0b0      	b.n	8005f56 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f003 0301 	and.w	r3, r3, #1
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d04c      	beq.n	8005e9a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	2b03      	cmp	r3, #3
 8005e06:	d107      	bne.n	8005e18 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e08:	4b56      	ldr	r3, [pc, #344]	; (8005f64 <HAL_RCC_ClockConfig+0x1b4>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d121      	bne.n	8005e58 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	e09e      	b.n	8005f56 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	2b02      	cmp	r3, #2
 8005e1e:	d107      	bne.n	8005e30 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e20:	4b50      	ldr	r3, [pc, #320]	; (8005f64 <HAL_RCC_ClockConfig+0x1b4>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d115      	bne.n	8005e58 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e092      	b.n	8005f56 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d107      	bne.n	8005e48 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005e38:	4b4a      	ldr	r3, [pc, #296]	; (8005f64 <HAL_RCC_ClockConfig+0x1b4>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 0302 	and.w	r3, r3, #2
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d109      	bne.n	8005e58 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	e086      	b.n	8005f56 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e48:	4b46      	ldr	r3, [pc, #280]	; (8005f64 <HAL_RCC_ClockConfig+0x1b4>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d101      	bne.n	8005e58 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	e07e      	b.n	8005f56 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005e58:	4b42      	ldr	r3, [pc, #264]	; (8005f64 <HAL_RCC_ClockConfig+0x1b4>)
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	f023 0203 	bic.w	r2, r3, #3
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	493f      	ldr	r1, [pc, #252]	; (8005f64 <HAL_RCC_ClockConfig+0x1b4>)
 8005e66:	4313      	orrs	r3, r2
 8005e68:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e6a:	f7fd fb73 	bl	8003554 <HAL_GetTick>
 8005e6e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e70:	e00a      	b.n	8005e88 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e72:	f7fd fb6f 	bl	8003554 <HAL_GetTick>
 8005e76:	4602      	mov	r2, r0
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	1ad3      	subs	r3, r2, r3
 8005e7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d901      	bls.n	8005e88 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8005e84:	2303      	movs	r3, #3
 8005e86:	e066      	b.n	8005f56 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e88:	4b36      	ldr	r3, [pc, #216]	; (8005f64 <HAL_RCC_ClockConfig+0x1b4>)
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	f003 020c 	and.w	r2, r3, #12
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d1eb      	bne.n	8005e72 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f003 0302 	and.w	r3, r3, #2
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d008      	beq.n	8005eb8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ea6:	4b2f      	ldr	r3, [pc, #188]	; (8005f64 <HAL_RCC_ClockConfig+0x1b4>)
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	492c      	ldr	r1, [pc, #176]	; (8005f64 <HAL_RCC_ClockConfig+0x1b4>)
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005eb8:	4b29      	ldr	r3, [pc, #164]	; (8005f60 <HAL_RCC_ClockConfig+0x1b0>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f003 0307 	and.w	r3, r3, #7
 8005ec0:	683a      	ldr	r2, [r7, #0]
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d210      	bcs.n	8005ee8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ec6:	4b26      	ldr	r3, [pc, #152]	; (8005f60 <HAL_RCC_ClockConfig+0x1b0>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f023 0207 	bic.w	r2, r3, #7
 8005ece:	4924      	ldr	r1, [pc, #144]	; (8005f60 <HAL_RCC_ClockConfig+0x1b0>)
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ed6:	4b22      	ldr	r3, [pc, #136]	; (8005f60 <HAL_RCC_ClockConfig+0x1b0>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f003 0307 	and.w	r3, r3, #7
 8005ede:	683a      	ldr	r2, [r7, #0]
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d001      	beq.n	8005ee8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e036      	b.n	8005f56 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f003 0304 	and.w	r3, r3, #4
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d008      	beq.n	8005f06 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ef4:	4b1b      	ldr	r3, [pc, #108]	; (8005f64 <HAL_RCC_ClockConfig+0x1b4>)
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	4918      	ldr	r1, [pc, #96]	; (8005f64 <HAL_RCC_ClockConfig+0x1b4>)
 8005f02:	4313      	orrs	r3, r2
 8005f04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f003 0308 	and.w	r3, r3, #8
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d009      	beq.n	8005f26 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f12:	4b14      	ldr	r3, [pc, #80]	; (8005f64 <HAL_RCC_ClockConfig+0x1b4>)
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	00db      	lsls	r3, r3, #3
 8005f20:	4910      	ldr	r1, [pc, #64]	; (8005f64 <HAL_RCC_ClockConfig+0x1b4>)
 8005f22:	4313      	orrs	r3, r2
 8005f24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005f26:	f000 f825 	bl	8005f74 <HAL_RCC_GetSysClockFreq>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	4b0d      	ldr	r3, [pc, #52]	; (8005f64 <HAL_RCC_ClockConfig+0x1b4>)
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	091b      	lsrs	r3, r3, #4
 8005f32:	f003 030f 	and.w	r3, r3, #15
 8005f36:	490c      	ldr	r1, [pc, #48]	; (8005f68 <HAL_RCC_ClockConfig+0x1b8>)
 8005f38:	5ccb      	ldrb	r3, [r1, r3]
 8005f3a:	f003 031f 	and.w	r3, r3, #31
 8005f3e:	fa22 f303 	lsr.w	r3, r2, r3
 8005f42:	4a0a      	ldr	r2, [pc, #40]	; (8005f6c <HAL_RCC_ClockConfig+0x1bc>)
 8005f44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005f46:	4b0a      	ldr	r3, [pc, #40]	; (8005f70 <HAL_RCC_ClockConfig+0x1c0>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f7fd fab2 	bl	80034b4 <HAL_InitTick>
 8005f50:	4603      	mov	r3, r0
 8005f52:	72fb      	strb	r3, [r7, #11]

  return status;
 8005f54:	7afb      	ldrb	r3, [r7, #11]
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3710      	adds	r7, #16
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
 8005f5e:	bf00      	nop
 8005f60:	40022000 	.word	0x40022000
 8005f64:	40021000 	.word	0x40021000
 8005f68:	0800cfa4 	.word	0x0800cfa4
 8005f6c:	20000084 	.word	0x20000084
 8005f70:	20000088 	.word	0x20000088

08005f74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b089      	sub	sp, #36	; 0x24
 8005f78:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	61fb      	str	r3, [r7, #28]
 8005f7e:	2300      	movs	r3, #0
 8005f80:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f82:	4b3e      	ldr	r3, [pc, #248]	; (800607c <HAL_RCC_GetSysClockFreq+0x108>)
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	f003 030c 	and.w	r3, r3, #12
 8005f8a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005f8c:	4b3b      	ldr	r3, [pc, #236]	; (800607c <HAL_RCC_GetSysClockFreq+0x108>)
 8005f8e:	68db      	ldr	r3, [r3, #12]
 8005f90:	f003 0303 	and.w	r3, r3, #3
 8005f94:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d005      	beq.n	8005fa8 <HAL_RCC_GetSysClockFreq+0x34>
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	2b0c      	cmp	r3, #12
 8005fa0:	d121      	bne.n	8005fe6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d11e      	bne.n	8005fe6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005fa8:	4b34      	ldr	r3, [pc, #208]	; (800607c <HAL_RCC_GetSysClockFreq+0x108>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f003 0308 	and.w	r3, r3, #8
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d107      	bne.n	8005fc4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005fb4:	4b31      	ldr	r3, [pc, #196]	; (800607c <HAL_RCC_GetSysClockFreq+0x108>)
 8005fb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005fba:	0a1b      	lsrs	r3, r3, #8
 8005fbc:	f003 030f 	and.w	r3, r3, #15
 8005fc0:	61fb      	str	r3, [r7, #28]
 8005fc2:	e005      	b.n	8005fd0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005fc4:	4b2d      	ldr	r3, [pc, #180]	; (800607c <HAL_RCC_GetSysClockFreq+0x108>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	091b      	lsrs	r3, r3, #4
 8005fca:	f003 030f 	and.w	r3, r3, #15
 8005fce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005fd0:	4a2b      	ldr	r2, [pc, #172]	; (8006080 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005fd2:	69fb      	ldr	r3, [r7, #28]
 8005fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fd8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d10d      	bne.n	8005ffc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005fe0:	69fb      	ldr	r3, [r7, #28]
 8005fe2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005fe4:	e00a      	b.n	8005ffc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	2b04      	cmp	r3, #4
 8005fea:	d102      	bne.n	8005ff2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005fec:	4b25      	ldr	r3, [pc, #148]	; (8006084 <HAL_RCC_GetSysClockFreq+0x110>)
 8005fee:	61bb      	str	r3, [r7, #24]
 8005ff0:	e004      	b.n	8005ffc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	2b08      	cmp	r3, #8
 8005ff6:	d101      	bne.n	8005ffc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005ff8:	4b23      	ldr	r3, [pc, #140]	; (8006088 <HAL_RCC_GetSysClockFreq+0x114>)
 8005ffa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	2b0c      	cmp	r3, #12
 8006000:	d134      	bne.n	800606c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006002:	4b1e      	ldr	r3, [pc, #120]	; (800607c <HAL_RCC_GetSysClockFreq+0x108>)
 8006004:	68db      	ldr	r3, [r3, #12]
 8006006:	f003 0303 	and.w	r3, r3, #3
 800600a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	2b02      	cmp	r3, #2
 8006010:	d003      	beq.n	800601a <HAL_RCC_GetSysClockFreq+0xa6>
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	2b03      	cmp	r3, #3
 8006016:	d003      	beq.n	8006020 <HAL_RCC_GetSysClockFreq+0xac>
 8006018:	e005      	b.n	8006026 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800601a:	4b1a      	ldr	r3, [pc, #104]	; (8006084 <HAL_RCC_GetSysClockFreq+0x110>)
 800601c:	617b      	str	r3, [r7, #20]
      break;
 800601e:	e005      	b.n	800602c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006020:	4b19      	ldr	r3, [pc, #100]	; (8006088 <HAL_RCC_GetSysClockFreq+0x114>)
 8006022:	617b      	str	r3, [r7, #20]
      break;
 8006024:	e002      	b.n	800602c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006026:	69fb      	ldr	r3, [r7, #28]
 8006028:	617b      	str	r3, [r7, #20]
      break;
 800602a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800602c:	4b13      	ldr	r3, [pc, #76]	; (800607c <HAL_RCC_GetSysClockFreq+0x108>)
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	091b      	lsrs	r3, r3, #4
 8006032:	f003 0307 	and.w	r3, r3, #7
 8006036:	3301      	adds	r3, #1
 8006038:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800603a:	4b10      	ldr	r3, [pc, #64]	; (800607c <HAL_RCC_GetSysClockFreq+0x108>)
 800603c:	68db      	ldr	r3, [r3, #12]
 800603e:	0a1b      	lsrs	r3, r3, #8
 8006040:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006044:	697a      	ldr	r2, [r7, #20]
 8006046:	fb02 f203 	mul.w	r2, r2, r3
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006050:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006052:	4b0a      	ldr	r3, [pc, #40]	; (800607c <HAL_RCC_GetSysClockFreq+0x108>)
 8006054:	68db      	ldr	r3, [r3, #12]
 8006056:	0e5b      	lsrs	r3, r3, #25
 8006058:	f003 0303 	and.w	r3, r3, #3
 800605c:	3301      	adds	r3, #1
 800605e:	005b      	lsls	r3, r3, #1
 8006060:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006062:	697a      	ldr	r2, [r7, #20]
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	fbb2 f3f3 	udiv	r3, r2, r3
 800606a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800606c:	69bb      	ldr	r3, [r7, #24]
}
 800606e:	4618      	mov	r0, r3
 8006070:	3724      	adds	r7, #36	; 0x24
 8006072:	46bd      	mov	sp, r7
 8006074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006078:	4770      	bx	lr
 800607a:	bf00      	nop
 800607c:	40021000 	.word	0x40021000
 8006080:	0800cfbc 	.word	0x0800cfbc
 8006084:	00f42400 	.word	0x00f42400
 8006088:	007a1200 	.word	0x007a1200

0800608c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800608c:	b480      	push	{r7}
 800608e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006090:	4b03      	ldr	r3, [pc, #12]	; (80060a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8006092:	681b      	ldr	r3, [r3, #0]
}
 8006094:	4618      	mov	r0, r3
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr
 800609e:	bf00      	nop
 80060a0:	20000084 	.word	0x20000084

080060a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80060a8:	f7ff fff0 	bl	800608c <HAL_RCC_GetHCLKFreq>
 80060ac:	4602      	mov	r2, r0
 80060ae:	4b06      	ldr	r3, [pc, #24]	; (80060c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	0a1b      	lsrs	r3, r3, #8
 80060b4:	f003 0307 	and.w	r3, r3, #7
 80060b8:	4904      	ldr	r1, [pc, #16]	; (80060cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80060ba:	5ccb      	ldrb	r3, [r1, r3]
 80060bc:	f003 031f 	and.w	r3, r3, #31
 80060c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	bd80      	pop	{r7, pc}
 80060c8:	40021000 	.word	0x40021000
 80060cc:	0800cfb4 	.word	0x0800cfb4

080060d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80060d4:	f7ff ffda 	bl	800608c <HAL_RCC_GetHCLKFreq>
 80060d8:	4602      	mov	r2, r0
 80060da:	4b06      	ldr	r3, [pc, #24]	; (80060f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	0adb      	lsrs	r3, r3, #11
 80060e0:	f003 0307 	and.w	r3, r3, #7
 80060e4:	4904      	ldr	r1, [pc, #16]	; (80060f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80060e6:	5ccb      	ldrb	r3, [r1, r3]
 80060e8:	f003 031f 	and.w	r3, r3, #31
 80060ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	bd80      	pop	{r7, pc}
 80060f4:	40021000 	.word	0x40021000
 80060f8:	0800cfb4 	.word	0x0800cfb4

080060fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b086      	sub	sp, #24
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006104:	2300      	movs	r3, #0
 8006106:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006108:	4b2a      	ldr	r3, [pc, #168]	; (80061b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800610a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800610c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006110:	2b00      	cmp	r3, #0
 8006112:	d003      	beq.n	800611c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006114:	f7ff fa02 	bl	800551c <HAL_PWREx_GetVoltageRange>
 8006118:	6178      	str	r0, [r7, #20]
 800611a:	e014      	b.n	8006146 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800611c:	4b25      	ldr	r3, [pc, #148]	; (80061b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800611e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006120:	4a24      	ldr	r2, [pc, #144]	; (80061b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006122:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006126:	6593      	str	r3, [r2, #88]	; 0x58
 8006128:	4b22      	ldr	r3, [pc, #136]	; (80061b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800612a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800612c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006130:	60fb      	str	r3, [r7, #12]
 8006132:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006134:	f7ff f9f2 	bl	800551c <HAL_PWREx_GetVoltageRange>
 8006138:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800613a:	4b1e      	ldr	r3, [pc, #120]	; (80061b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800613c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800613e:	4a1d      	ldr	r2, [pc, #116]	; (80061b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006140:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006144:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800614c:	d10b      	bne.n	8006166 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2b80      	cmp	r3, #128	; 0x80
 8006152:	d919      	bls.n	8006188 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2ba0      	cmp	r3, #160	; 0xa0
 8006158:	d902      	bls.n	8006160 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800615a:	2302      	movs	r3, #2
 800615c:	613b      	str	r3, [r7, #16]
 800615e:	e013      	b.n	8006188 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006160:	2301      	movs	r3, #1
 8006162:	613b      	str	r3, [r7, #16]
 8006164:	e010      	b.n	8006188 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2b80      	cmp	r3, #128	; 0x80
 800616a:	d902      	bls.n	8006172 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800616c:	2303      	movs	r3, #3
 800616e:	613b      	str	r3, [r7, #16]
 8006170:	e00a      	b.n	8006188 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2b80      	cmp	r3, #128	; 0x80
 8006176:	d102      	bne.n	800617e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006178:	2302      	movs	r3, #2
 800617a:	613b      	str	r3, [r7, #16]
 800617c:	e004      	b.n	8006188 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2b70      	cmp	r3, #112	; 0x70
 8006182:	d101      	bne.n	8006188 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006184:	2301      	movs	r3, #1
 8006186:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006188:	4b0b      	ldr	r3, [pc, #44]	; (80061b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f023 0207 	bic.w	r2, r3, #7
 8006190:	4909      	ldr	r1, [pc, #36]	; (80061b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	4313      	orrs	r3, r2
 8006196:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006198:	4b07      	ldr	r3, [pc, #28]	; (80061b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f003 0307 	and.w	r3, r3, #7
 80061a0:	693a      	ldr	r2, [r7, #16]
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d001      	beq.n	80061aa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	e000      	b.n	80061ac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80061aa:	2300      	movs	r3, #0
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3718      	adds	r7, #24
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}
 80061b4:	40021000 	.word	0x40021000
 80061b8:	40022000 	.word	0x40022000

080061bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b086      	sub	sp, #24
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80061c4:	2300      	movs	r3, #0
 80061c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80061c8:	2300      	movs	r3, #0
 80061ca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d041      	beq.n	800625c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061dc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80061e0:	d02a      	beq.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80061e2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80061e6:	d824      	bhi.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80061e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80061ec:	d008      	beq.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80061ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80061f2:	d81e      	bhi.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d00a      	beq.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x52>
 80061f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061fc:	d010      	beq.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80061fe:	e018      	b.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006200:	4b86      	ldr	r3, [pc, #536]	; (800641c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006202:	68db      	ldr	r3, [r3, #12]
 8006204:	4a85      	ldr	r2, [pc, #532]	; (800641c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006206:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800620a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800620c:	e015      	b.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	3304      	adds	r3, #4
 8006212:	2100      	movs	r1, #0
 8006214:	4618      	mov	r0, r3
 8006216:	f000 facb 	bl	80067b0 <RCCEx_PLLSAI1_Config>
 800621a:	4603      	mov	r3, r0
 800621c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800621e:	e00c      	b.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	3320      	adds	r3, #32
 8006224:	2100      	movs	r1, #0
 8006226:	4618      	mov	r0, r3
 8006228:	f000 fbb6 	bl	8006998 <RCCEx_PLLSAI2_Config>
 800622c:	4603      	mov	r3, r0
 800622e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006230:	e003      	b.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	74fb      	strb	r3, [r7, #19]
      break;
 8006236:	e000      	b.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006238:	bf00      	nop
    }

    if(ret == HAL_OK)
 800623a:	7cfb      	ldrb	r3, [r7, #19]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d10b      	bne.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006240:	4b76      	ldr	r3, [pc, #472]	; (800641c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006246:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800624e:	4973      	ldr	r1, [pc, #460]	; (800641c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006250:	4313      	orrs	r3, r2
 8006252:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006256:	e001      	b.n	800625c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006258:	7cfb      	ldrb	r3, [r7, #19]
 800625a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006264:	2b00      	cmp	r3, #0
 8006266:	d041      	beq.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800626c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006270:	d02a      	beq.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8006272:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006276:	d824      	bhi.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006278:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800627c:	d008      	beq.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800627e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006282:	d81e      	bhi.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006284:	2b00      	cmp	r3, #0
 8006286:	d00a      	beq.n	800629e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8006288:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800628c:	d010      	beq.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800628e:	e018      	b.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006290:	4b62      	ldr	r3, [pc, #392]	; (800641c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	4a61      	ldr	r2, [pc, #388]	; (800641c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006296:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800629a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800629c:	e015      	b.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	3304      	adds	r3, #4
 80062a2:	2100      	movs	r1, #0
 80062a4:	4618      	mov	r0, r3
 80062a6:	f000 fa83 	bl	80067b0 <RCCEx_PLLSAI1_Config>
 80062aa:	4603      	mov	r3, r0
 80062ac:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80062ae:	e00c      	b.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	3320      	adds	r3, #32
 80062b4:	2100      	movs	r1, #0
 80062b6:	4618      	mov	r0, r3
 80062b8:	f000 fb6e 	bl	8006998 <RCCEx_PLLSAI2_Config>
 80062bc:	4603      	mov	r3, r0
 80062be:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80062c0:	e003      	b.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	74fb      	strb	r3, [r7, #19]
      break;
 80062c6:	e000      	b.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80062c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062ca:	7cfb      	ldrb	r3, [r7, #19]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d10b      	bne.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80062d0:	4b52      	ldr	r3, [pc, #328]	; (800641c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062d6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062de:	494f      	ldr	r1, [pc, #316]	; (800641c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062e0:	4313      	orrs	r3, r2
 80062e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80062e6:	e001      	b.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062e8:	7cfb      	ldrb	r3, [r7, #19]
 80062ea:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	f000 80a0 	beq.w	800643a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80062fa:	2300      	movs	r3, #0
 80062fc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80062fe:	4b47      	ldr	r3, [pc, #284]	; (800641c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006306:	2b00      	cmp	r3, #0
 8006308:	d101      	bne.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800630a:	2301      	movs	r3, #1
 800630c:	e000      	b.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800630e:	2300      	movs	r3, #0
 8006310:	2b00      	cmp	r3, #0
 8006312:	d00d      	beq.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006314:	4b41      	ldr	r3, [pc, #260]	; (800641c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006318:	4a40      	ldr	r2, [pc, #256]	; (800641c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800631a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800631e:	6593      	str	r3, [r2, #88]	; 0x58
 8006320:	4b3e      	ldr	r3, [pc, #248]	; (800641c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006324:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006328:	60bb      	str	r3, [r7, #8]
 800632a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800632c:	2301      	movs	r3, #1
 800632e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006330:	4b3b      	ldr	r3, [pc, #236]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a3a      	ldr	r2, [pc, #232]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006336:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800633a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800633c:	f7fd f90a 	bl	8003554 <HAL_GetTick>
 8006340:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006342:	e009      	b.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006344:	f7fd f906 	bl	8003554 <HAL_GetTick>
 8006348:	4602      	mov	r2, r0
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	1ad3      	subs	r3, r2, r3
 800634e:	2b02      	cmp	r3, #2
 8006350:	d902      	bls.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8006352:	2303      	movs	r3, #3
 8006354:	74fb      	strb	r3, [r7, #19]
        break;
 8006356:	e005      	b.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006358:	4b31      	ldr	r3, [pc, #196]	; (8006420 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006360:	2b00      	cmp	r3, #0
 8006362:	d0ef      	beq.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8006364:	7cfb      	ldrb	r3, [r7, #19]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d15c      	bne.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800636a:	4b2c      	ldr	r3, [pc, #176]	; (800641c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800636c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006370:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006374:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d01f      	beq.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006382:	697a      	ldr	r2, [r7, #20]
 8006384:	429a      	cmp	r2, r3
 8006386:	d019      	beq.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006388:	4b24      	ldr	r3, [pc, #144]	; (800641c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800638a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800638e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006392:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006394:	4b21      	ldr	r3, [pc, #132]	; (800641c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800639a:	4a20      	ldr	r2, [pc, #128]	; (800641c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800639c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80063a4:	4b1d      	ldr	r3, [pc, #116]	; (800641c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063aa:	4a1c      	ldr	r2, [pc, #112]	; (800641c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80063b4:	4a19      	ldr	r2, [pc, #100]	; (800641c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	f003 0301 	and.w	r3, r3, #1
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d016      	beq.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063c6:	f7fd f8c5 	bl	8003554 <HAL_GetTick>
 80063ca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80063cc:	e00b      	b.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80063ce:	f7fd f8c1 	bl	8003554 <HAL_GetTick>
 80063d2:	4602      	mov	r2, r0
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	1ad3      	subs	r3, r2, r3
 80063d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80063dc:	4293      	cmp	r3, r2
 80063de:	d902      	bls.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80063e0:	2303      	movs	r3, #3
 80063e2:	74fb      	strb	r3, [r7, #19]
            break;
 80063e4:	e006      	b.n	80063f4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80063e6:	4b0d      	ldr	r3, [pc, #52]	; (800641c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063ec:	f003 0302 	and.w	r3, r3, #2
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d0ec      	beq.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80063f4:	7cfb      	ldrb	r3, [r7, #19]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d10c      	bne.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80063fa:	4b08      	ldr	r3, [pc, #32]	; (800641c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006400:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800640a:	4904      	ldr	r1, [pc, #16]	; (800641c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800640c:	4313      	orrs	r3, r2
 800640e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006412:	e009      	b.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006414:	7cfb      	ldrb	r3, [r7, #19]
 8006416:	74bb      	strb	r3, [r7, #18]
 8006418:	e006      	b.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800641a:	bf00      	nop
 800641c:	40021000 	.word	0x40021000
 8006420:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006424:	7cfb      	ldrb	r3, [r7, #19]
 8006426:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006428:	7c7b      	ldrb	r3, [r7, #17]
 800642a:	2b01      	cmp	r3, #1
 800642c:	d105      	bne.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800642e:	4b9e      	ldr	r3, [pc, #632]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006432:	4a9d      	ldr	r2, [pc, #628]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006434:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006438:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f003 0301 	and.w	r3, r3, #1
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00a      	beq.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006446:	4b98      	ldr	r3, [pc, #608]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800644c:	f023 0203 	bic.w	r2, r3, #3
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006454:	4994      	ldr	r1, [pc, #592]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006456:	4313      	orrs	r3, r2
 8006458:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f003 0302 	and.w	r3, r3, #2
 8006464:	2b00      	cmp	r3, #0
 8006466:	d00a      	beq.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006468:	4b8f      	ldr	r3, [pc, #572]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800646a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800646e:	f023 020c 	bic.w	r2, r3, #12
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006476:	498c      	ldr	r1, [pc, #560]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006478:	4313      	orrs	r3, r2
 800647a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f003 0304 	and.w	r3, r3, #4
 8006486:	2b00      	cmp	r3, #0
 8006488:	d00a      	beq.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800648a:	4b87      	ldr	r3, [pc, #540]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800648c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006490:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006498:	4983      	ldr	r1, [pc, #524]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800649a:	4313      	orrs	r3, r2
 800649c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f003 0308 	and.w	r3, r3, #8
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d00a      	beq.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80064ac:	4b7e      	ldr	r3, [pc, #504]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064b2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064ba:	497b      	ldr	r1, [pc, #492]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064bc:	4313      	orrs	r3, r2
 80064be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f003 0310 	and.w	r3, r3, #16
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d00a      	beq.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80064ce:	4b76      	ldr	r3, [pc, #472]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064dc:	4972      	ldr	r1, [pc, #456]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064de:	4313      	orrs	r3, r2
 80064e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f003 0320 	and.w	r3, r3, #32
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d00a      	beq.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80064f0:	4b6d      	ldr	r3, [pc, #436]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80064f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064f6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064fe:	496a      	ldr	r1, [pc, #424]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006500:	4313      	orrs	r3, r2
 8006502:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800650e:	2b00      	cmp	r3, #0
 8006510:	d00a      	beq.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006512:	4b65      	ldr	r3, [pc, #404]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006518:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006520:	4961      	ldr	r1, [pc, #388]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006522:	4313      	orrs	r3, r2
 8006524:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006530:	2b00      	cmp	r3, #0
 8006532:	d00a      	beq.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006534:	4b5c      	ldr	r3, [pc, #368]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800653a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006542:	4959      	ldr	r1, [pc, #356]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006544:	4313      	orrs	r3, r2
 8006546:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006552:	2b00      	cmp	r3, #0
 8006554:	d00a      	beq.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006556:	4b54      	ldr	r3, [pc, #336]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800655c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006564:	4950      	ldr	r1, [pc, #320]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006566:	4313      	orrs	r3, r2
 8006568:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006574:	2b00      	cmp	r3, #0
 8006576:	d00a      	beq.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006578:	4b4b      	ldr	r3, [pc, #300]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800657a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800657e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006586:	4948      	ldr	r1, [pc, #288]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006588:	4313      	orrs	r3, r2
 800658a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006596:	2b00      	cmp	r3, #0
 8006598:	d00a      	beq.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800659a:	4b43      	ldr	r3, [pc, #268]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800659c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065a8:	493f      	ldr	r1, [pc, #252]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065aa:	4313      	orrs	r3, r2
 80065ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d028      	beq.n	800660e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80065bc:	4b3a      	ldr	r3, [pc, #232]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065ca:	4937      	ldr	r1, [pc, #220]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065cc:	4313      	orrs	r3, r2
 80065ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80065da:	d106      	bne.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065dc:	4b32      	ldr	r3, [pc, #200]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065de:	68db      	ldr	r3, [r3, #12]
 80065e0:	4a31      	ldr	r2, [pc, #196]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065e6:	60d3      	str	r3, [r2, #12]
 80065e8:	e011      	b.n	800660e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80065f2:	d10c      	bne.n	800660e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	3304      	adds	r3, #4
 80065f8:	2101      	movs	r1, #1
 80065fa:	4618      	mov	r0, r3
 80065fc:	f000 f8d8 	bl	80067b0 <RCCEx_PLLSAI1_Config>
 8006600:	4603      	mov	r3, r0
 8006602:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006604:	7cfb      	ldrb	r3, [r7, #19]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d001      	beq.n	800660e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800660a:	7cfb      	ldrb	r3, [r7, #19]
 800660c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006616:	2b00      	cmp	r3, #0
 8006618:	d028      	beq.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800661a:	4b23      	ldr	r3, [pc, #140]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800661c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006620:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006628:	491f      	ldr	r1, [pc, #124]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800662a:	4313      	orrs	r3, r2
 800662c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006634:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006638:	d106      	bne.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800663a:	4b1b      	ldr	r3, [pc, #108]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800663c:	68db      	ldr	r3, [r3, #12]
 800663e:	4a1a      	ldr	r2, [pc, #104]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006640:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006644:	60d3      	str	r3, [r2, #12]
 8006646:	e011      	b.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800664c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006650:	d10c      	bne.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	3304      	adds	r3, #4
 8006656:	2101      	movs	r1, #1
 8006658:	4618      	mov	r0, r3
 800665a:	f000 f8a9 	bl	80067b0 <RCCEx_PLLSAI1_Config>
 800665e:	4603      	mov	r3, r0
 8006660:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006662:	7cfb      	ldrb	r3, [r7, #19]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d001      	beq.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8006668:	7cfb      	ldrb	r3, [r7, #19]
 800666a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006674:	2b00      	cmp	r3, #0
 8006676:	d02b      	beq.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006678:	4b0b      	ldr	r3, [pc, #44]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800667a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800667e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006686:	4908      	ldr	r1, [pc, #32]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006688:	4313      	orrs	r3, r2
 800668a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006692:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006696:	d109      	bne.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006698:	4b03      	ldr	r3, [pc, #12]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	4a02      	ldr	r2, [pc, #8]	; (80066a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800669e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80066a2:	60d3      	str	r3, [r2, #12]
 80066a4:	e014      	b.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80066a6:	bf00      	nop
 80066a8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80066b4:	d10c      	bne.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	3304      	adds	r3, #4
 80066ba:	2101      	movs	r1, #1
 80066bc:	4618      	mov	r0, r3
 80066be:	f000 f877 	bl	80067b0 <RCCEx_PLLSAI1_Config>
 80066c2:	4603      	mov	r3, r0
 80066c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80066c6:	7cfb      	ldrb	r3, [r7, #19]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d001      	beq.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80066cc:	7cfb      	ldrb	r3, [r7, #19]
 80066ce:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d02f      	beq.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80066dc:	4b2b      	ldr	r3, [pc, #172]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80066de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066e2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066ea:	4928      	ldr	r1, [pc, #160]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80066ec:	4313      	orrs	r3, r2
 80066ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066fa:	d10d      	bne.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	3304      	adds	r3, #4
 8006700:	2102      	movs	r1, #2
 8006702:	4618      	mov	r0, r3
 8006704:	f000 f854 	bl	80067b0 <RCCEx_PLLSAI1_Config>
 8006708:	4603      	mov	r3, r0
 800670a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800670c:	7cfb      	ldrb	r3, [r7, #19]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d014      	beq.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006712:	7cfb      	ldrb	r3, [r7, #19]
 8006714:	74bb      	strb	r3, [r7, #18]
 8006716:	e011      	b.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800671c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006720:	d10c      	bne.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	3320      	adds	r3, #32
 8006726:	2102      	movs	r1, #2
 8006728:	4618      	mov	r0, r3
 800672a:	f000 f935 	bl	8006998 <RCCEx_PLLSAI2_Config>
 800672e:	4603      	mov	r3, r0
 8006730:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006732:	7cfb      	ldrb	r3, [r7, #19]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d001      	beq.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006738:	7cfb      	ldrb	r3, [r7, #19]
 800673a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006744:	2b00      	cmp	r3, #0
 8006746:	d00a      	beq.n	800675e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006748:	4b10      	ldr	r3, [pc, #64]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800674a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800674e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006756:	490d      	ldr	r1, [pc, #52]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006758:	4313      	orrs	r3, r2
 800675a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006766:	2b00      	cmp	r3, #0
 8006768:	d00b      	beq.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800676a:	4b08      	ldr	r3, [pc, #32]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800676c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006770:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800677a:	4904      	ldr	r1, [pc, #16]	; (800678c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800677c:	4313      	orrs	r3, r2
 800677e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006782:	7cbb      	ldrb	r3, [r7, #18]
}
 8006784:	4618      	mov	r0, r3
 8006786:	3718      	adds	r7, #24
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}
 800678c:	40021000 	.word	0x40021000

08006790 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006790:	b480      	push	{r7}
 8006792:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006794:	4b05      	ldr	r3, [pc, #20]	; (80067ac <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a04      	ldr	r2, [pc, #16]	; (80067ac <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800679a:	f043 0304 	orr.w	r3, r3, #4
 800679e:	6013      	str	r3, [r2, #0]
}
 80067a0:	bf00      	nop
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr
 80067aa:	bf00      	nop
 80067ac:	40021000 	.word	0x40021000

080067b0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b084      	sub	sp, #16
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80067ba:	2300      	movs	r3, #0
 80067bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80067be:	4b75      	ldr	r3, [pc, #468]	; (8006994 <RCCEx_PLLSAI1_Config+0x1e4>)
 80067c0:	68db      	ldr	r3, [r3, #12]
 80067c2:	f003 0303 	and.w	r3, r3, #3
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d018      	beq.n	80067fc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80067ca:	4b72      	ldr	r3, [pc, #456]	; (8006994 <RCCEx_PLLSAI1_Config+0x1e4>)
 80067cc:	68db      	ldr	r3, [r3, #12]
 80067ce:	f003 0203 	and.w	r2, r3, #3
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d10d      	bne.n	80067f6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
       ||
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d009      	beq.n	80067f6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80067e2:	4b6c      	ldr	r3, [pc, #432]	; (8006994 <RCCEx_PLLSAI1_Config+0x1e4>)
 80067e4:	68db      	ldr	r3, [r3, #12]
 80067e6:	091b      	lsrs	r3, r3, #4
 80067e8:	f003 0307 	and.w	r3, r3, #7
 80067ec:	1c5a      	adds	r2, r3, #1
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	685b      	ldr	r3, [r3, #4]
       ||
 80067f2:	429a      	cmp	r2, r3
 80067f4:	d047      	beq.n	8006886 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	73fb      	strb	r3, [r7, #15]
 80067fa:	e044      	b.n	8006886 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	2b03      	cmp	r3, #3
 8006802:	d018      	beq.n	8006836 <RCCEx_PLLSAI1_Config+0x86>
 8006804:	2b03      	cmp	r3, #3
 8006806:	d825      	bhi.n	8006854 <RCCEx_PLLSAI1_Config+0xa4>
 8006808:	2b01      	cmp	r3, #1
 800680a:	d002      	beq.n	8006812 <RCCEx_PLLSAI1_Config+0x62>
 800680c:	2b02      	cmp	r3, #2
 800680e:	d009      	beq.n	8006824 <RCCEx_PLLSAI1_Config+0x74>
 8006810:	e020      	b.n	8006854 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006812:	4b60      	ldr	r3, [pc, #384]	; (8006994 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f003 0302 	and.w	r3, r3, #2
 800681a:	2b00      	cmp	r3, #0
 800681c:	d11d      	bne.n	800685a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006822:	e01a      	b.n	800685a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006824:	4b5b      	ldr	r3, [pc, #364]	; (8006994 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800682c:	2b00      	cmp	r3, #0
 800682e:	d116      	bne.n	800685e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006834:	e013      	b.n	800685e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006836:	4b57      	ldr	r3, [pc, #348]	; (8006994 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800683e:	2b00      	cmp	r3, #0
 8006840:	d10f      	bne.n	8006862 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006842:	4b54      	ldr	r3, [pc, #336]	; (8006994 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800684a:	2b00      	cmp	r3, #0
 800684c:	d109      	bne.n	8006862 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006852:	e006      	b.n	8006862 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	73fb      	strb	r3, [r7, #15]
      break;
 8006858:	e004      	b.n	8006864 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800685a:	bf00      	nop
 800685c:	e002      	b.n	8006864 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800685e:	bf00      	nop
 8006860:	e000      	b.n	8006864 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006862:	bf00      	nop
    }

    if(status == HAL_OK)
 8006864:	7bfb      	ldrb	r3, [r7, #15]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d10d      	bne.n	8006886 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800686a:	4b4a      	ldr	r3, [pc, #296]	; (8006994 <RCCEx_PLLSAI1_Config+0x1e4>)
 800686c:	68db      	ldr	r3, [r3, #12]
 800686e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6819      	ldr	r1, [r3, #0]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	3b01      	subs	r3, #1
 800687c:	011b      	lsls	r3, r3, #4
 800687e:	430b      	orrs	r3, r1
 8006880:	4944      	ldr	r1, [pc, #272]	; (8006994 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006882:	4313      	orrs	r3, r2
 8006884:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006886:	7bfb      	ldrb	r3, [r7, #15]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d17d      	bne.n	8006988 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800688c:	4b41      	ldr	r3, [pc, #260]	; (8006994 <RCCEx_PLLSAI1_Config+0x1e4>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a40      	ldr	r2, [pc, #256]	; (8006994 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006892:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006896:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006898:	f7fc fe5c 	bl	8003554 <HAL_GetTick>
 800689c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800689e:	e009      	b.n	80068b4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80068a0:	f7fc fe58 	bl	8003554 <HAL_GetTick>
 80068a4:	4602      	mov	r2, r0
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	1ad3      	subs	r3, r2, r3
 80068aa:	2b02      	cmp	r3, #2
 80068ac:	d902      	bls.n	80068b4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80068ae:	2303      	movs	r3, #3
 80068b0:	73fb      	strb	r3, [r7, #15]
        break;
 80068b2:	e005      	b.n	80068c0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80068b4:	4b37      	ldr	r3, [pc, #220]	; (8006994 <RCCEx_PLLSAI1_Config+0x1e4>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d1ef      	bne.n	80068a0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80068c0:	7bfb      	ldrb	r3, [r7, #15]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d160      	bne.n	8006988 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d111      	bne.n	80068f0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80068cc:	4b31      	ldr	r3, [pc, #196]	; (8006994 <RCCEx_PLLSAI1_Config+0x1e4>)
 80068ce:	691b      	ldr	r3, [r3, #16]
 80068d0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80068d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068d8:	687a      	ldr	r2, [r7, #4]
 80068da:	6892      	ldr	r2, [r2, #8]
 80068dc:	0211      	lsls	r1, r2, #8
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	68d2      	ldr	r2, [r2, #12]
 80068e2:	0912      	lsrs	r2, r2, #4
 80068e4:	0452      	lsls	r2, r2, #17
 80068e6:	430a      	orrs	r2, r1
 80068e8:	492a      	ldr	r1, [pc, #168]	; (8006994 <RCCEx_PLLSAI1_Config+0x1e4>)
 80068ea:	4313      	orrs	r3, r2
 80068ec:	610b      	str	r3, [r1, #16]
 80068ee:	e027      	b.n	8006940 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	d112      	bne.n	800691c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80068f6:	4b27      	ldr	r3, [pc, #156]	; (8006994 <RCCEx_PLLSAI1_Config+0x1e4>)
 80068f8:	691b      	ldr	r3, [r3, #16]
 80068fa:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80068fe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006902:	687a      	ldr	r2, [r7, #4]
 8006904:	6892      	ldr	r2, [r2, #8]
 8006906:	0211      	lsls	r1, r2, #8
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	6912      	ldr	r2, [r2, #16]
 800690c:	0852      	lsrs	r2, r2, #1
 800690e:	3a01      	subs	r2, #1
 8006910:	0552      	lsls	r2, r2, #21
 8006912:	430a      	orrs	r2, r1
 8006914:	491f      	ldr	r1, [pc, #124]	; (8006994 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006916:	4313      	orrs	r3, r2
 8006918:	610b      	str	r3, [r1, #16]
 800691a:	e011      	b.n	8006940 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800691c:	4b1d      	ldr	r3, [pc, #116]	; (8006994 <RCCEx_PLLSAI1_Config+0x1e4>)
 800691e:	691b      	ldr	r3, [r3, #16]
 8006920:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006924:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	6892      	ldr	r2, [r2, #8]
 800692c:	0211      	lsls	r1, r2, #8
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	6952      	ldr	r2, [r2, #20]
 8006932:	0852      	lsrs	r2, r2, #1
 8006934:	3a01      	subs	r2, #1
 8006936:	0652      	lsls	r2, r2, #25
 8006938:	430a      	orrs	r2, r1
 800693a:	4916      	ldr	r1, [pc, #88]	; (8006994 <RCCEx_PLLSAI1_Config+0x1e4>)
 800693c:	4313      	orrs	r3, r2
 800693e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006940:	4b14      	ldr	r3, [pc, #80]	; (8006994 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a13      	ldr	r2, [pc, #76]	; (8006994 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006946:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800694a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800694c:	f7fc fe02 	bl	8003554 <HAL_GetTick>
 8006950:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006952:	e009      	b.n	8006968 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006954:	f7fc fdfe 	bl	8003554 <HAL_GetTick>
 8006958:	4602      	mov	r2, r0
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	1ad3      	subs	r3, r2, r3
 800695e:	2b02      	cmp	r3, #2
 8006960:	d902      	bls.n	8006968 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8006962:	2303      	movs	r3, #3
 8006964:	73fb      	strb	r3, [r7, #15]
          break;
 8006966:	e005      	b.n	8006974 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006968:	4b0a      	ldr	r3, [pc, #40]	; (8006994 <RCCEx_PLLSAI1_Config+0x1e4>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006970:	2b00      	cmp	r3, #0
 8006972:	d0ef      	beq.n	8006954 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006974:	7bfb      	ldrb	r3, [r7, #15]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d106      	bne.n	8006988 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800697a:	4b06      	ldr	r3, [pc, #24]	; (8006994 <RCCEx_PLLSAI1_Config+0x1e4>)
 800697c:	691a      	ldr	r2, [r3, #16]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	699b      	ldr	r3, [r3, #24]
 8006982:	4904      	ldr	r1, [pc, #16]	; (8006994 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006984:	4313      	orrs	r3, r2
 8006986:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006988:	7bfb      	ldrb	r3, [r7, #15]
}
 800698a:	4618      	mov	r0, r3
 800698c:	3710      	adds	r7, #16
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
 8006992:	bf00      	nop
 8006994:	40021000 	.word	0x40021000

08006998 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b084      	sub	sp, #16
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80069a2:	2300      	movs	r3, #0
 80069a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80069a6:	4b6a      	ldr	r3, [pc, #424]	; (8006b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 80069a8:	68db      	ldr	r3, [r3, #12]
 80069aa:	f003 0303 	and.w	r3, r3, #3
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d018      	beq.n	80069e4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80069b2:	4b67      	ldr	r3, [pc, #412]	; (8006b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 80069b4:	68db      	ldr	r3, [r3, #12]
 80069b6:	f003 0203 	and.w	r2, r3, #3
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	429a      	cmp	r2, r3
 80069c0:	d10d      	bne.n	80069de <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
       ||
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d009      	beq.n	80069de <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80069ca:	4b61      	ldr	r3, [pc, #388]	; (8006b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	091b      	lsrs	r3, r3, #4
 80069d0:	f003 0307 	and.w	r3, r3, #7
 80069d4:	1c5a      	adds	r2, r3, #1
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	685b      	ldr	r3, [r3, #4]
       ||
 80069da:	429a      	cmp	r2, r3
 80069dc:	d047      	beq.n	8006a6e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	73fb      	strb	r3, [r7, #15]
 80069e2:	e044      	b.n	8006a6e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	2b03      	cmp	r3, #3
 80069ea:	d018      	beq.n	8006a1e <RCCEx_PLLSAI2_Config+0x86>
 80069ec:	2b03      	cmp	r3, #3
 80069ee:	d825      	bhi.n	8006a3c <RCCEx_PLLSAI2_Config+0xa4>
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d002      	beq.n	80069fa <RCCEx_PLLSAI2_Config+0x62>
 80069f4:	2b02      	cmp	r3, #2
 80069f6:	d009      	beq.n	8006a0c <RCCEx_PLLSAI2_Config+0x74>
 80069f8:	e020      	b.n	8006a3c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80069fa:	4b55      	ldr	r3, [pc, #340]	; (8006b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f003 0302 	and.w	r3, r3, #2
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d11d      	bne.n	8006a42 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a0a:	e01a      	b.n	8006a42 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006a0c:	4b50      	ldr	r3, [pc, #320]	; (8006b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d116      	bne.n	8006a46 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a1c:	e013      	b.n	8006a46 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006a1e:	4b4c      	ldr	r3, [pc, #304]	; (8006b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d10f      	bne.n	8006a4a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006a2a:	4b49      	ldr	r3, [pc, #292]	; (8006b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d109      	bne.n	8006a4a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006a36:	2301      	movs	r3, #1
 8006a38:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006a3a:	e006      	b.n	8006a4a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	73fb      	strb	r3, [r7, #15]
      break;
 8006a40:	e004      	b.n	8006a4c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006a42:	bf00      	nop
 8006a44:	e002      	b.n	8006a4c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006a46:	bf00      	nop
 8006a48:	e000      	b.n	8006a4c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006a4a:	bf00      	nop
    }

    if(status == HAL_OK)
 8006a4c:	7bfb      	ldrb	r3, [r7, #15]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d10d      	bne.n	8006a6e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006a52:	4b3f      	ldr	r3, [pc, #252]	; (8006b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a54:	68db      	ldr	r3, [r3, #12]
 8006a56:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6819      	ldr	r1, [r3, #0]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	3b01      	subs	r3, #1
 8006a64:	011b      	lsls	r3, r3, #4
 8006a66:	430b      	orrs	r3, r1
 8006a68:	4939      	ldr	r1, [pc, #228]	; (8006b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006a6e:	7bfb      	ldrb	r3, [r7, #15]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d167      	bne.n	8006b44 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006a74:	4b36      	ldr	r3, [pc, #216]	; (8006b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a35      	ldr	r2, [pc, #212]	; (8006b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a80:	f7fc fd68 	bl	8003554 <HAL_GetTick>
 8006a84:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006a86:	e009      	b.n	8006a9c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006a88:	f7fc fd64 	bl	8003554 <HAL_GetTick>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	1ad3      	subs	r3, r2, r3
 8006a92:	2b02      	cmp	r3, #2
 8006a94:	d902      	bls.n	8006a9c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006a96:	2303      	movs	r3, #3
 8006a98:	73fb      	strb	r3, [r7, #15]
        break;
 8006a9a:	e005      	b.n	8006aa8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006a9c:	4b2c      	ldr	r3, [pc, #176]	; (8006b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d1ef      	bne.n	8006a88 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006aa8:	7bfb      	ldrb	r3, [r7, #15]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d14a      	bne.n	8006b44 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d111      	bne.n	8006ad8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006ab4:	4b26      	ldr	r3, [pc, #152]	; (8006b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ab6:	695b      	ldr	r3, [r3, #20]
 8006ab8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006abc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ac0:	687a      	ldr	r2, [r7, #4]
 8006ac2:	6892      	ldr	r2, [r2, #8]
 8006ac4:	0211      	lsls	r1, r2, #8
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	68d2      	ldr	r2, [r2, #12]
 8006aca:	0912      	lsrs	r2, r2, #4
 8006acc:	0452      	lsls	r2, r2, #17
 8006ace:	430a      	orrs	r2, r1
 8006ad0:	491f      	ldr	r1, [pc, #124]	; (8006b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	614b      	str	r3, [r1, #20]
 8006ad6:	e011      	b.n	8006afc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006ad8:	4b1d      	ldr	r3, [pc, #116]	; (8006b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ada:	695b      	ldr	r3, [r3, #20]
 8006adc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006ae0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	6892      	ldr	r2, [r2, #8]
 8006ae8:	0211      	lsls	r1, r2, #8
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	6912      	ldr	r2, [r2, #16]
 8006aee:	0852      	lsrs	r2, r2, #1
 8006af0:	3a01      	subs	r2, #1
 8006af2:	0652      	lsls	r2, r2, #25
 8006af4:	430a      	orrs	r2, r1
 8006af6:	4916      	ldr	r1, [pc, #88]	; (8006b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006af8:	4313      	orrs	r3, r2
 8006afa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006afc:	4b14      	ldr	r3, [pc, #80]	; (8006b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a13      	ldr	r2, [pc, #76]	; (8006b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b06:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b08:	f7fc fd24 	bl	8003554 <HAL_GetTick>
 8006b0c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006b0e:	e009      	b.n	8006b24 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006b10:	f7fc fd20 	bl	8003554 <HAL_GetTick>
 8006b14:	4602      	mov	r2, r0
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	1ad3      	subs	r3, r2, r3
 8006b1a:	2b02      	cmp	r3, #2
 8006b1c:	d902      	bls.n	8006b24 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8006b1e:	2303      	movs	r3, #3
 8006b20:	73fb      	strb	r3, [r7, #15]
          break;
 8006b22:	e005      	b.n	8006b30 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006b24:	4b0a      	ldr	r3, [pc, #40]	; (8006b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d0ef      	beq.n	8006b10 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006b30:	7bfb      	ldrb	r3, [r7, #15]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d106      	bne.n	8006b44 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006b36:	4b06      	ldr	r3, [pc, #24]	; (8006b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b38:	695a      	ldr	r2, [r3, #20]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	695b      	ldr	r3, [r3, #20]
 8006b3e:	4904      	ldr	r1, [pc, #16]	; (8006b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b40:	4313      	orrs	r3, r2
 8006b42:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3710      	adds	r7, #16
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
 8006b4e:	bf00      	nop
 8006b50:	40021000 	.word	0x40021000

08006b54 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b084      	sub	sp, #16
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d06c      	beq.n	8006c40 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d106      	bne.n	8006b80 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f7fb f9f4 	bl	8001f68 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2202      	movs	r2, #2
 8006b84:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	22ca      	movs	r2, #202	; 0xca
 8006b8e:	625a      	str	r2, [r3, #36]	; 0x24
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	2253      	movs	r2, #83	; 0x53
 8006b96:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f000 fbcb 	bl	8007334 <RTC_EnterInitMode>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8006ba2:	7bfb      	ldrb	r3, [r7, #15]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d14b      	bne.n	8006c40 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	6812      	ldr	r2, [r2, #0]
 8006bb2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006bb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bba:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	6899      	ldr	r1, [r3, #8]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	685a      	ldr	r2, [r3, #4]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	691b      	ldr	r3, [r3, #16]
 8006bca:	431a      	orrs	r2, r3
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	699b      	ldr	r3, [r3, #24]
 8006bd0:	431a      	orrs	r2, r3
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	430a      	orrs	r2, r1
 8006bd8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	68d2      	ldr	r2, [r2, #12]
 8006be2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	6919      	ldr	r1, [r3, #16]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	041a      	lsls	r2, r3, #16
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	430a      	orrs	r2, r1
 8006bf6:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f000 fbcf 	bl	800739c <RTC_ExitInitMode>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8006c02:	7bfb      	ldrb	r3, [r7, #15]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d11b      	bne.n	8006c40 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f022 0203 	bic.w	r2, r2, #3
 8006c16:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	69da      	ldr	r2, [r3, #28]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	695b      	ldr	r3, [r3, #20]
 8006c26:	431a      	orrs	r2, r3
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	430a      	orrs	r2, r1
 8006c2e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	22ff      	movs	r2, #255	; 0xff
 8006c36:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8006c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3710      	adds	r7, #16
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}

08006c4a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006c4a:	b590      	push	{r4, r7, lr}
 8006c4c:	b087      	sub	sp, #28
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	60f8      	str	r0, [r7, #12]
 8006c52:	60b9      	str	r1, [r7, #8]
 8006c54:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	d101      	bne.n	8006c64 <HAL_RTC_SetTime+0x1a>
 8006c60:	2302      	movs	r3, #2
 8006c62:	e08b      	b.n	8006d7c <HAL_RTC_SetTime+0x132>
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2201      	movs	r2, #1
 8006c68:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2202      	movs	r2, #2
 8006c70:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	22ca      	movs	r2, #202	; 0xca
 8006c7a:	625a      	str	r2, [r3, #36]	; 0x24
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	2253      	movs	r2, #83	; 0x53
 8006c82:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006c84:	68f8      	ldr	r0, [r7, #12]
 8006c86:	f000 fb55 	bl	8007334 <RTC_EnterInitMode>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8006c8e:	7cfb      	ldrb	r3, [r7, #19]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d163      	bne.n	8006d5c <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d126      	bne.n	8006ce8 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d102      	bne.n	8006cae <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	2200      	movs	r2, #0
 8006cac:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f000 fbb0 	bl	8007418 <RTC_ByteToBcd2>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	785b      	ldrb	r3, [r3, #1]
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f000 fba9 	bl	8007418 <RTC_ByteToBcd2>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006cca:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	789b      	ldrb	r3, [r3, #2]
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f000 fba1 	bl	8007418 <RTC_ByteToBcd2>
 8006cd6:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006cd8:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	78db      	ldrb	r3, [r3, #3]
 8006ce0:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	617b      	str	r3, [r7, #20]
 8006ce6:	e018      	b.n	8006d1a <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d102      	bne.n	8006cfc <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	785b      	ldrb	r3, [r3, #1]
 8006d06:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006d08:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006d0a:	68ba      	ldr	r2, [r7, #8]
 8006d0c:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006d0e:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	78db      	ldrb	r3, [r3, #3]
 8006d14:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006d16:	4313      	orrs	r3, r2
 8006d18:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006d24:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006d28:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	689a      	ldr	r2, [r3, #8]
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006d38:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	6899      	ldr	r1, [r3, #8]
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	68da      	ldr	r2, [r3, #12]
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	691b      	ldr	r3, [r3, #16]
 8006d48:	431a      	orrs	r2, r3
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	430a      	orrs	r2, r1
 8006d50:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006d52:	68f8      	ldr	r0, [r7, #12]
 8006d54:	f000 fb22 	bl	800739c <RTC_ExitInitMode>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	22ff      	movs	r2, #255	; 0xff
 8006d62:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8006d64:	7cfb      	ldrb	r3, [r7, #19]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d103      	bne.n	8006d72 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2200      	movs	r2, #0
 8006d76:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8006d7a:	7cfb      	ldrb	r3, [r7, #19]
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	371c      	adds	r7, #28
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd90      	pop	{r4, r7, pc}

08006d84 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b086      	sub	sp, #24
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	60f8      	str	r0, [r7, #12]
 8006d8c:	60b9      	str	r1, [r7, #8]
 8006d8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	691b      	ldr	r3, [r3, #16]
 8006da0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006db2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006db6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	0c1b      	lsrs	r3, r3, #16
 8006dbc:	b2db      	uxtb	r3, r3
 8006dbe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006dc2:	b2da      	uxtb	r2, r3
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	0a1b      	lsrs	r3, r3, #8
 8006dcc:	b2db      	uxtb	r3, r3
 8006dce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dd2:	b2da      	uxtb	r2, r3
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006de0:	b2da      	uxtb	r2, r3
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	0d9b      	lsrs	r3, r3, #22
 8006dea:	b2db      	uxtb	r3, r3
 8006dec:	f003 0301 	and.w	r3, r3, #1
 8006df0:	b2da      	uxtb	r2, r3
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d11a      	bne.n	8006e32 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	4618      	mov	r0, r3
 8006e02:	f000 fb29 	bl	8007458 <RTC_Bcd2ToByte>
 8006e06:	4603      	mov	r3, r0
 8006e08:	461a      	mov	r2, r3
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	785b      	ldrb	r3, [r3, #1]
 8006e12:	4618      	mov	r0, r3
 8006e14:	f000 fb20 	bl	8007458 <RTC_Bcd2ToByte>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	789b      	ldrb	r3, [r3, #2]
 8006e24:	4618      	mov	r0, r3
 8006e26:	f000 fb17 	bl	8007458 <RTC_Bcd2ToByte>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006e32:	2300      	movs	r3, #0
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	3718      	adds	r7, #24
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}

08006e3c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006e3c:	b590      	push	{r4, r7, lr}
 8006e3e:	b087      	sub	sp, #28
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	60f8      	str	r0, [r7, #12]
 8006e44:	60b9      	str	r1, [r7, #8]
 8006e46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d101      	bne.n	8006e56 <HAL_RTC_SetDate+0x1a>
 8006e52:	2302      	movs	r3, #2
 8006e54:	e075      	b.n	8006f42 <HAL_RTC_SetDate+0x106>
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2201      	movs	r2, #1
 8006e5a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2202      	movs	r2, #2
 8006e62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d10e      	bne.n	8006e8a <HAL_RTC_SetDate+0x4e>
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	785b      	ldrb	r3, [r3, #1]
 8006e70:	f003 0310 	and.w	r3, r3, #16
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d008      	beq.n	8006e8a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	785b      	ldrb	r3, [r3, #1]
 8006e7c:	f023 0310 	bic.w	r3, r3, #16
 8006e80:	b2db      	uxtb	r3, r3
 8006e82:	330a      	adds	r3, #10
 8006e84:	b2da      	uxtb	r2, r3
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d11c      	bne.n	8006eca <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	78db      	ldrb	r3, [r3, #3]
 8006e94:	4618      	mov	r0, r3
 8006e96:	f000 fabf 	bl	8007418 <RTC_ByteToBcd2>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	785b      	ldrb	r3, [r3, #1]
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f000 fab8 	bl	8007418 <RTC_ByteToBcd2>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006eac:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	789b      	ldrb	r3, [r3, #2]
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f000 fab0 	bl	8007418 <RTC_ByteToBcd2>
 8006eb8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006eba:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	781b      	ldrb	r3, [r3, #0]
 8006ec2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	617b      	str	r3, [r7, #20]
 8006ec8:	e00e      	b.n	8006ee8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	78db      	ldrb	r3, [r3, #3]
 8006ece:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	785b      	ldrb	r3, [r3, #1]
 8006ed4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006ed6:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8006ed8:	68ba      	ldr	r2, [r7, #8]
 8006eda:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006edc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	781b      	ldrb	r3, [r3, #0]
 8006ee2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	22ca      	movs	r2, #202	; 0xca
 8006eee:	625a      	str	r2, [r3, #36]	; 0x24
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	2253      	movs	r2, #83	; 0x53
 8006ef6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006ef8:	68f8      	ldr	r0, [r7, #12]
 8006efa:	f000 fa1b 	bl	8007334 <RTC_EnterInitMode>
 8006efe:	4603      	mov	r3, r0
 8006f00:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8006f02:	7cfb      	ldrb	r3, [r7, #19]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d10c      	bne.n	8006f22 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681a      	ldr	r2, [r3, #0]
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006f12:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006f16:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006f18:	68f8      	ldr	r0, [r7, #12]
 8006f1a:	f000 fa3f 	bl	800739c <RTC_ExitInitMode>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	22ff      	movs	r2, #255	; 0xff
 8006f28:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8006f2a:	7cfb      	ldrb	r3, [r7, #19]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d103      	bne.n	8006f38 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2201      	movs	r2, #1
 8006f34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8006f40:	7cfb      	ldrb	r3, [r7, #19]
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	371c      	adds	r7, #28
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd90      	pop	{r4, r7, pc}

08006f4a <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006f4a:	b580      	push	{r7, lr}
 8006f4c:	b086      	sub	sp, #24
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	60f8      	str	r0, [r7, #12]
 8006f52:	60b9      	str	r1, [r7, #8]
 8006f54:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006f60:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006f64:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	0c1b      	lsrs	r3, r3, #16
 8006f6a:	b2da      	uxtb	r2, r3
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	0a1b      	lsrs	r3, r3, #8
 8006f74:	b2db      	uxtb	r3, r3
 8006f76:	f003 031f 	and.w	r3, r3, #31
 8006f7a:	b2da      	uxtb	r2, r3
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f88:	b2da      	uxtb	r2, r3
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	0b5b      	lsrs	r3, r3, #13
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	f003 0307 	and.w	r3, r3, #7
 8006f98:	b2da      	uxtb	r2, r3
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d11a      	bne.n	8006fda <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	78db      	ldrb	r3, [r3, #3]
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f000 fa55 	bl	8007458 <RTC_Bcd2ToByte>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	785b      	ldrb	r3, [r3, #1]
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f000 fa4c 	bl	8007458 <RTC_Bcd2ToByte>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	789b      	ldrb	r3, [r3, #2]
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f000 fa43 	bl	8007458 <RTC_Bcd2ToByte>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006fda:	2300      	movs	r3, #0
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3718      	adds	r7, #24
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}

08006fe4 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006fe4:	b590      	push	{r4, r7, lr}
 8006fe6:	b089      	sub	sp, #36	; 0x24
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	60f8      	str	r0, [r7, #12]
 8006fec:	60b9      	str	r1, [r7, #8]
 8006fee:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006ff6:	2b01      	cmp	r3, #1
 8006ff8:	d101      	bne.n	8006ffe <HAL_RTC_SetAlarm_IT+0x1a>
 8006ffa:	2302      	movs	r3, #2
 8006ffc:	e127      	b.n	800724e <HAL_RTC_SetAlarm_IT+0x26a>
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2201      	movs	r2, #1
 8007002:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2202      	movs	r2, #2
 800700a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d137      	bne.n	8007084 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800701e:	2b00      	cmp	r3, #0
 8007020:	d102      	bne.n	8007028 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	2200      	movs	r2, #0
 8007026:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	781b      	ldrb	r3, [r3, #0]
 800702c:	4618      	mov	r0, r3
 800702e:	f000 f9f3 	bl	8007418 <RTC_ByteToBcd2>
 8007032:	4603      	mov	r3, r0
 8007034:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	785b      	ldrb	r3, [r3, #1]
 800703a:	4618      	mov	r0, r3
 800703c:	f000 f9ec 	bl	8007418 <RTC_ByteToBcd2>
 8007040:	4603      	mov	r3, r0
 8007042:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007044:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	789b      	ldrb	r3, [r3, #2]
 800704a:	4618      	mov	r0, r3
 800704c:	f000 f9e4 	bl	8007418 <RTC_ByteToBcd2>
 8007050:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007052:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	78db      	ldrb	r3, [r3, #3]
 800705a:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800705c:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007066:	4618      	mov	r0, r3
 8007068:	f000 f9d6 	bl	8007418 <RTC_ByteToBcd2>
 800706c:	4603      	mov	r3, r0
 800706e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8007070:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8007078:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800707e:	4313      	orrs	r3, r2
 8007080:	61fb      	str	r3, [r7, #28]
 8007082:	e023      	b.n	80070cc <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800708e:	2b00      	cmp	r3, #0
 8007090:	d102      	bne.n	8007098 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	2200      	movs	r2, #0
 8007096:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	781b      	ldrb	r3, [r3, #0]
 800709c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	785b      	ldrb	r3, [r3, #1]
 80070a2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80070a4:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80070a6:	68ba      	ldr	r2, [r7, #8]
 80070a8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80070aa:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	78db      	ldrb	r3, [r3, #3]
 80070b0:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80070b2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80070ba:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80070bc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80070c2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80070c8:	4313      	orrs	r3, r2
 80070ca:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	685a      	ldr	r2, [r3, #4]
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	69db      	ldr	r3, [r3, #28]
 80070d4:	4313      	orrs	r3, r2
 80070d6:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	22ca      	movs	r2, #202	; 0xca
 80070de:	625a      	str	r2, [r3, #36]	; 0x24
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	2253      	movs	r2, #83	; 0x53
 80070e6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070f0:	d14a      	bne.n	8007188 <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	689a      	ldr	r2, [r3, #8]
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007100:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	68db      	ldr	r3, [r3, #12]
 8007108:	b2da      	uxtb	r2, r3
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8007112:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 8007114:	f7fc fa1e 	bl	8003554 <HAL_GetTick>
 8007118:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800711a:	e015      	b.n	8007148 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800711c:	f7fc fa1a 	bl	8003554 <HAL_GetTick>
 8007120:	4602      	mov	r2, r0
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	1ad3      	subs	r3, r2, r3
 8007126:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800712a:	d90d      	bls.n	8007148 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	22ff      	movs	r2, #255	; 0xff
 8007132:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2203      	movs	r2, #3
 8007138:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2200      	movs	r2, #0
 8007140:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8007144:	2303      	movs	r3, #3
 8007146:	e082      	b.n	800724e <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	68db      	ldr	r3, [r3, #12]
 800714e:	f003 0301 	and.w	r3, r3, #1
 8007152:	2b00      	cmp	r3, #0
 8007154:	d0e2      	beq.n	800711c <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	69fa      	ldr	r2, [r7, #28]
 800715c:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	69ba      	ldr	r2, [r7, #24]
 8007164:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	689a      	ldr	r2, [r3, #8]
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007174:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	689a      	ldr	r2, [r3, #8]
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007184:	609a      	str	r2, [r3, #8]
 8007186:	e049      	b.n	800721c <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	689a      	ldr	r2, [r3, #8]
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007196:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	68db      	ldr	r3, [r3, #12]
 800719e:	b2da      	uxtb	r2, r3
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f462 7220 	orn	r2, r2, #640	; 0x280
 80071a8:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 80071aa:	f7fc f9d3 	bl	8003554 <HAL_GetTick>
 80071ae:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80071b0:	e015      	b.n	80071de <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80071b2:	f7fc f9cf 	bl	8003554 <HAL_GetTick>
 80071b6:	4602      	mov	r2, r0
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	1ad3      	subs	r3, r2, r3
 80071bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80071c0:	d90d      	bls.n	80071de <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	22ff      	movs	r2, #255	; 0xff
 80071c8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2203      	movs	r2, #3
 80071ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2200      	movs	r2, #0
 80071d6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80071da:	2303      	movs	r3, #3
 80071dc:	e037      	b.n	800724e <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	68db      	ldr	r3, [r3, #12]
 80071e4:	f003 0302 	and.w	r3, r3, #2
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d0e2      	beq.n	80071b2 <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	69fa      	ldr	r2, [r7, #28]
 80071f2:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	69ba      	ldr	r2, [r7, #24]
 80071fa:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	689a      	ldr	r2, [r3, #8]
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800720a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	689a      	ldr	r2, [r3, #8]
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800721a:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800721c:	4b0e      	ldr	r3, [pc, #56]	; (8007258 <HAL_RTC_SetAlarm_IT+0x274>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a0d      	ldr	r2, [pc, #52]	; (8007258 <HAL_RTC_SetAlarm_IT+0x274>)
 8007222:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007226:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8007228:	4b0b      	ldr	r3, [pc, #44]	; (8007258 <HAL_RTC_SetAlarm_IT+0x274>)
 800722a:	689b      	ldr	r3, [r3, #8]
 800722c:	4a0a      	ldr	r2, [pc, #40]	; (8007258 <HAL_RTC_SetAlarm_IT+0x274>)
 800722e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007232:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	22ff      	movs	r2, #255	; 0xff
 800723a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2201      	movs	r2, #1
 8007240:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2200      	movs	r2, #0
 8007248:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800724c:	2300      	movs	r3, #0
}
 800724e:	4618      	mov	r0, r3
 8007250:	3724      	adds	r7, #36	; 0x24
 8007252:	46bd      	mov	sp, r7
 8007254:	bd90      	pop	{r4, r7, pc}
 8007256:	bf00      	nop
 8007258:	40010400 	.word	0x40010400

0800725c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b082      	sub	sp, #8
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8007264:	4b1f      	ldr	r3, [pc, #124]	; (80072e4 <HAL_RTC_AlarmIRQHandler+0x88>)
 8007266:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800726a:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	689b      	ldr	r3, [r3, #8]
 8007272:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007276:	2b00      	cmp	r3, #0
 8007278:	d012      	beq.n	80072a0 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	68db      	ldr	r3, [r3, #12]
 8007280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007284:	2b00      	cmp	r3, #0
 8007286:	d00b      	beq.n	80072a0 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	68db      	ldr	r3, [r3, #12]
 800728e:	b2da      	uxtb	r2, r3
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8007298:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f7f9 fff6 	bl	800128c <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d012      	beq.n	80072d4 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	68db      	ldr	r3, [r3, #12]
 80072b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d00b      	beq.n	80072d4 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	68db      	ldr	r3, [r3, #12]
 80072c2:	b2da      	uxtb	r2, r3
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f462 7220 	orn	r2, r2, #640	; 0x280
 80072cc:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 f8dc 	bl	800748c <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2201      	movs	r2, #1
 80072d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 80072dc:	bf00      	nop
 80072de:	3708      	adds	r7, #8
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}
 80072e4:	40010400 	.word	0x40010400

080072e8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b084      	sub	sp, #16
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	68da      	ldr	r2, [r3, #12]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80072fe:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8007300:	f7fc f928 	bl	8003554 <HAL_GetTick>
 8007304:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007306:	e009      	b.n	800731c <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007308:	f7fc f924 	bl	8003554 <HAL_GetTick>
 800730c:	4602      	mov	r2, r0
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	1ad3      	subs	r3, r2, r3
 8007312:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007316:	d901      	bls.n	800731c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8007318:	2303      	movs	r3, #3
 800731a:	e007      	b.n	800732c <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	68db      	ldr	r3, [r3, #12]
 8007322:	f003 0320 	and.w	r3, r3, #32
 8007326:	2b00      	cmp	r3, #0
 8007328:	d0ee      	beq.n	8007308 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800732a:	2300      	movs	r3, #0
}
 800732c:	4618      	mov	r0, r3
 800732e:	3710      	adds	r7, #16
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}

08007334 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b084      	sub	sp, #16
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800733c:	2300      	movs	r3, #0
 800733e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	68db      	ldr	r3, [r3, #12]
 8007346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800734a:	2b00      	cmp	r3, #0
 800734c:	d120      	bne.n	8007390 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f04f 32ff 	mov.w	r2, #4294967295
 8007356:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007358:	f7fc f8fc 	bl	8003554 <HAL_GetTick>
 800735c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800735e:	e00d      	b.n	800737c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007360:	f7fc f8f8 	bl	8003554 <HAL_GetTick>
 8007364:	4602      	mov	r2, r0
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	1ad3      	subs	r3, r2, r3
 800736a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800736e:	d905      	bls.n	800737c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8007370:	2303      	movs	r3, #3
 8007372:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2203      	movs	r2, #3
 8007378:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	68db      	ldr	r3, [r3, #12]
 8007382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007386:	2b00      	cmp	r3, #0
 8007388:	d102      	bne.n	8007390 <RTC_EnterInitMode+0x5c>
 800738a:	7bfb      	ldrb	r3, [r7, #15]
 800738c:	2b03      	cmp	r3, #3
 800738e:	d1e7      	bne.n	8007360 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8007390:	7bfb      	ldrb	r3, [r7, #15]
}
 8007392:	4618      	mov	r0, r3
 8007394:	3710      	adds	r7, #16
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}
	...

0800739c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b084      	sub	sp, #16
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80073a4:	2300      	movs	r3, #0
 80073a6:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80073a8:	4b1a      	ldr	r3, [pc, #104]	; (8007414 <RTC_ExitInitMode+0x78>)
 80073aa:	68db      	ldr	r3, [r3, #12]
 80073ac:	4a19      	ldr	r2, [pc, #100]	; (8007414 <RTC_ExitInitMode+0x78>)
 80073ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073b2:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80073b4:	4b17      	ldr	r3, [pc, #92]	; (8007414 <RTC_ExitInitMode+0x78>)
 80073b6:	689b      	ldr	r3, [r3, #8]
 80073b8:	f003 0320 	and.w	r3, r3, #32
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d10c      	bne.n	80073da <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f7ff ff91 	bl	80072e8 <HAL_RTC_WaitForSynchro>
 80073c6:	4603      	mov	r3, r0
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d01e      	beq.n	800740a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2203      	movs	r2, #3
 80073d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80073d4:	2303      	movs	r3, #3
 80073d6:	73fb      	strb	r3, [r7, #15]
 80073d8:	e017      	b.n	800740a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80073da:	4b0e      	ldr	r3, [pc, #56]	; (8007414 <RTC_ExitInitMode+0x78>)
 80073dc:	689b      	ldr	r3, [r3, #8]
 80073de:	4a0d      	ldr	r2, [pc, #52]	; (8007414 <RTC_ExitInitMode+0x78>)
 80073e0:	f023 0320 	bic.w	r3, r3, #32
 80073e4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f7ff ff7e 	bl	80072e8 <HAL_RTC_WaitForSynchro>
 80073ec:	4603      	mov	r3, r0
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d005      	beq.n	80073fe <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2203      	movs	r2, #3
 80073f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80073fa:	2303      	movs	r3, #3
 80073fc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80073fe:	4b05      	ldr	r3, [pc, #20]	; (8007414 <RTC_ExitInitMode+0x78>)
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	4a04      	ldr	r2, [pc, #16]	; (8007414 <RTC_ExitInitMode+0x78>)
 8007404:	f043 0320 	orr.w	r3, r3, #32
 8007408:	6093      	str	r3, [r2, #8]
  }

  return status;
 800740a:	7bfb      	ldrb	r3, [r7, #15]
}
 800740c:	4618      	mov	r0, r3
 800740e:	3710      	adds	r7, #16
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}
 8007414:	40002800 	.word	0x40002800

08007418 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007418:	b480      	push	{r7}
 800741a:	b085      	sub	sp, #20
 800741c:	af00      	add	r7, sp, #0
 800741e:	4603      	mov	r3, r0
 8007420:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007422:	2300      	movs	r3, #0
 8007424:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8007426:	79fb      	ldrb	r3, [r7, #7]
 8007428:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800742a:	e005      	b.n	8007438 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	3301      	adds	r3, #1
 8007430:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8007432:	7afb      	ldrb	r3, [r7, #11]
 8007434:	3b0a      	subs	r3, #10
 8007436:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8007438:	7afb      	ldrb	r3, [r7, #11]
 800743a:	2b09      	cmp	r3, #9
 800743c:	d8f6      	bhi.n	800742c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	b2db      	uxtb	r3, r3
 8007442:	011b      	lsls	r3, r3, #4
 8007444:	b2da      	uxtb	r2, r3
 8007446:	7afb      	ldrb	r3, [r7, #11]
 8007448:	4313      	orrs	r3, r2
 800744a:	b2db      	uxtb	r3, r3
}
 800744c:	4618      	mov	r0, r3
 800744e:	3714      	adds	r7, #20
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr

08007458 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8007458:	b480      	push	{r7}
 800745a:	b085      	sub	sp, #20
 800745c:	af00      	add	r7, sp, #0
 800745e:	4603      	mov	r3, r0
 8007460:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8007462:	79fb      	ldrb	r3, [r7, #7]
 8007464:	091b      	lsrs	r3, r3, #4
 8007466:	b2db      	uxtb	r3, r3
 8007468:	461a      	mov	r2, r3
 800746a:	0092      	lsls	r2, r2, #2
 800746c:	4413      	add	r3, r2
 800746e:	005b      	lsls	r3, r3, #1
 8007470:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8007472:	79fb      	ldrb	r3, [r7, #7]
 8007474:	f003 030f 	and.w	r3, r3, #15
 8007478:	b2da      	uxtb	r2, r3
 800747a:	7bfb      	ldrb	r3, [r7, #15]
 800747c:	4413      	add	r3, r2
 800747e:	b2db      	uxtb	r3, r3
}
 8007480:	4618      	mov	r0, r3
 8007482:	3714      	adds	r7, #20
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr

0800748c <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800748c:	b480      	push	{r7}
 800748e:	b083      	sub	sp, #12
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8007494:	bf00      	nop
 8007496:	370c      	adds	r7, #12
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr

080074a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b082      	sub	sp, #8
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d101      	bne.n	80074b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80074ae:	2301      	movs	r3, #1
 80074b0:	e049      	b.n	8007546 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074b8:	b2db      	uxtb	r3, r3
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d106      	bne.n	80074cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2200      	movs	r2, #0
 80074c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f7fb fd5a 	bl	8002f80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2202      	movs	r2, #2
 80074d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681a      	ldr	r2, [r3, #0]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	3304      	adds	r3, #4
 80074dc:	4619      	mov	r1, r3
 80074de:	4610      	mov	r0, r2
 80074e0:	f001 fa6c 	bl	80089bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2201      	movs	r2, #1
 80074e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2201      	movs	r2, #1
 80074f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2201      	movs	r2, #1
 80074f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2201      	movs	r2, #1
 8007500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2201      	movs	r2, #1
 8007508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2201      	movs	r2, #1
 8007510:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2201      	movs	r2, #1
 8007518:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2201      	movs	r2, #1
 8007520:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2201      	movs	r2, #1
 8007528:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2201      	movs	r2, #1
 8007530:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2201      	movs	r2, #1
 8007538:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2201      	movs	r2, #1
 8007540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007544:	2300      	movs	r3, #0
}
 8007546:	4618      	mov	r0, r3
 8007548:	3708      	adds	r7, #8
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}
	...

08007550 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007550:	b480      	push	{r7}
 8007552:	b085      	sub	sp, #20
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800755e:	b2db      	uxtb	r3, r3
 8007560:	2b01      	cmp	r3, #1
 8007562:	d001      	beq.n	8007568 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007564:	2301      	movs	r3, #1
 8007566:	e047      	b.n	80075f8 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2202      	movs	r2, #2
 800756c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a23      	ldr	r2, [pc, #140]	; (8007604 <HAL_TIM_Base_Start+0xb4>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d01d      	beq.n	80075b6 <HAL_TIM_Base_Start+0x66>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007582:	d018      	beq.n	80075b6 <HAL_TIM_Base_Start+0x66>
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a1f      	ldr	r2, [pc, #124]	; (8007608 <HAL_TIM_Base_Start+0xb8>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d013      	beq.n	80075b6 <HAL_TIM_Base_Start+0x66>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a1e      	ldr	r2, [pc, #120]	; (800760c <HAL_TIM_Base_Start+0xbc>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d00e      	beq.n	80075b6 <HAL_TIM_Base_Start+0x66>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a1c      	ldr	r2, [pc, #112]	; (8007610 <HAL_TIM_Base_Start+0xc0>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d009      	beq.n	80075b6 <HAL_TIM_Base_Start+0x66>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a1b      	ldr	r2, [pc, #108]	; (8007614 <HAL_TIM_Base_Start+0xc4>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d004      	beq.n	80075b6 <HAL_TIM_Base_Start+0x66>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a19      	ldr	r2, [pc, #100]	; (8007618 <HAL_TIM_Base_Start+0xc8>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d115      	bne.n	80075e2 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	689a      	ldr	r2, [r3, #8]
 80075bc:	4b17      	ldr	r3, [pc, #92]	; (800761c <HAL_TIM_Base_Start+0xcc>)
 80075be:	4013      	ands	r3, r2
 80075c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2b06      	cmp	r3, #6
 80075c6:	d015      	beq.n	80075f4 <HAL_TIM_Base_Start+0xa4>
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075ce:	d011      	beq.n	80075f4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	681a      	ldr	r2, [r3, #0]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f042 0201 	orr.w	r2, r2, #1
 80075de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075e0:	e008      	b.n	80075f4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	681a      	ldr	r2, [r3, #0]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f042 0201 	orr.w	r2, r2, #1
 80075f0:	601a      	str	r2, [r3, #0]
 80075f2:	e000      	b.n	80075f6 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075f4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80075f6:	2300      	movs	r3, #0
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3714      	adds	r7, #20
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr
 8007604:	40012c00 	.word	0x40012c00
 8007608:	40000400 	.word	0x40000400
 800760c:	40000800 	.word	0x40000800
 8007610:	40000c00 	.word	0x40000c00
 8007614:	40013400 	.word	0x40013400
 8007618:	40014000 	.word	0x40014000
 800761c:	00010007 	.word	0x00010007

08007620 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007620:	b480      	push	{r7}
 8007622:	b085      	sub	sp, #20
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800762e:	b2db      	uxtb	r3, r3
 8007630:	2b01      	cmp	r3, #1
 8007632:	d001      	beq.n	8007638 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007634:	2301      	movs	r3, #1
 8007636:	e04f      	b.n	80076d8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2202      	movs	r2, #2
 800763c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	68da      	ldr	r2, [r3, #12]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f042 0201 	orr.w	r2, r2, #1
 800764e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a23      	ldr	r2, [pc, #140]	; (80076e4 <HAL_TIM_Base_Start_IT+0xc4>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d01d      	beq.n	8007696 <HAL_TIM_Base_Start_IT+0x76>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007662:	d018      	beq.n	8007696 <HAL_TIM_Base_Start_IT+0x76>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a1f      	ldr	r2, [pc, #124]	; (80076e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d013      	beq.n	8007696 <HAL_TIM_Base_Start_IT+0x76>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a1e      	ldr	r2, [pc, #120]	; (80076ec <HAL_TIM_Base_Start_IT+0xcc>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d00e      	beq.n	8007696 <HAL_TIM_Base_Start_IT+0x76>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a1c      	ldr	r2, [pc, #112]	; (80076f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d009      	beq.n	8007696 <HAL_TIM_Base_Start_IT+0x76>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	4a1b      	ldr	r2, [pc, #108]	; (80076f4 <HAL_TIM_Base_Start_IT+0xd4>)
 8007688:	4293      	cmp	r3, r2
 800768a:	d004      	beq.n	8007696 <HAL_TIM_Base_Start_IT+0x76>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a19      	ldr	r2, [pc, #100]	; (80076f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d115      	bne.n	80076c2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	689a      	ldr	r2, [r3, #8]
 800769c:	4b17      	ldr	r3, [pc, #92]	; (80076fc <HAL_TIM_Base_Start_IT+0xdc>)
 800769e:	4013      	ands	r3, r2
 80076a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2b06      	cmp	r3, #6
 80076a6:	d015      	beq.n	80076d4 <HAL_TIM_Base_Start_IT+0xb4>
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076ae:	d011      	beq.n	80076d4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	681a      	ldr	r2, [r3, #0]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f042 0201 	orr.w	r2, r2, #1
 80076be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076c0:	e008      	b.n	80076d4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	681a      	ldr	r2, [r3, #0]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f042 0201 	orr.w	r2, r2, #1
 80076d0:	601a      	str	r2, [r3, #0]
 80076d2:	e000      	b.n	80076d6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076d4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80076d6:	2300      	movs	r3, #0
}
 80076d8:	4618      	mov	r0, r3
 80076da:	3714      	adds	r7, #20
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr
 80076e4:	40012c00 	.word	0x40012c00
 80076e8:	40000400 	.word	0x40000400
 80076ec:	40000800 	.word	0x40000800
 80076f0:	40000c00 	.word	0x40000c00
 80076f4:	40013400 	.word	0x40013400
 80076f8:	40014000 	.word	0x40014000
 80076fc:	00010007 	.word	0x00010007

08007700 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b082      	sub	sp, #8
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d101      	bne.n	8007712 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800770e:	2301      	movs	r3, #1
 8007710:	e049      	b.n	80077a6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007718:	b2db      	uxtb	r3, r3
 800771a:	2b00      	cmp	r3, #0
 800771c:	d106      	bne.n	800772c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2200      	movs	r2, #0
 8007722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f000 f841 	bl	80077ae <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2202      	movs	r2, #2
 8007730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	3304      	adds	r3, #4
 800773c:	4619      	mov	r1, r3
 800773e:	4610      	mov	r0, r2
 8007740:	f001 f93c 	bl	80089bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2201      	movs	r2, #1
 8007748:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2201      	movs	r2, #1
 8007750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2201      	movs	r2, #1
 8007758:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2201      	movs	r2, #1
 8007760:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2201      	movs	r2, #1
 8007768:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2201      	movs	r2, #1
 8007770:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2201      	movs	r2, #1
 8007778:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2201      	movs	r2, #1
 8007780:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2201      	movs	r2, #1
 8007788:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2201      	movs	r2, #1
 8007790:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2201      	movs	r2, #1
 8007798:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2201      	movs	r2, #1
 80077a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80077a4:	2300      	movs	r3, #0
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3708      	adds	r7, #8
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}

080077ae <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80077ae:	b480      	push	{r7}
 80077b0:	b083      	sub	sp, #12
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80077b6:	bf00      	nop
 80077b8:	370c      	adds	r7, #12
 80077ba:	46bd      	mov	sp, r7
 80077bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c0:	4770      	bx	lr
	...

080077c4 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b086      	sub	sp, #24
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	60f8      	str	r0, [r7, #12]
 80077cc:	60b9      	str	r1, [r7, #8]
 80077ce:	607a      	str	r2, [r7, #4]
 80077d0:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80077d2:	2300      	movs	r3, #0
 80077d4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d109      	bne.n	80077f0 <HAL_TIM_PWM_Start_DMA+0x2c>
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80077e2:	b2db      	uxtb	r3, r3
 80077e4:	2b02      	cmp	r3, #2
 80077e6:	bf0c      	ite	eq
 80077e8:	2301      	moveq	r3, #1
 80077ea:	2300      	movne	r3, #0
 80077ec:	b2db      	uxtb	r3, r3
 80077ee:	e03c      	b.n	800786a <HAL_TIM_PWM_Start_DMA+0xa6>
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	2b04      	cmp	r3, #4
 80077f4:	d109      	bne.n	800780a <HAL_TIM_PWM_Start_DMA+0x46>
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80077fc:	b2db      	uxtb	r3, r3
 80077fe:	2b02      	cmp	r3, #2
 8007800:	bf0c      	ite	eq
 8007802:	2301      	moveq	r3, #1
 8007804:	2300      	movne	r3, #0
 8007806:	b2db      	uxtb	r3, r3
 8007808:	e02f      	b.n	800786a <HAL_TIM_PWM_Start_DMA+0xa6>
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	2b08      	cmp	r3, #8
 800780e:	d109      	bne.n	8007824 <HAL_TIM_PWM_Start_DMA+0x60>
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007816:	b2db      	uxtb	r3, r3
 8007818:	2b02      	cmp	r3, #2
 800781a:	bf0c      	ite	eq
 800781c:	2301      	moveq	r3, #1
 800781e:	2300      	movne	r3, #0
 8007820:	b2db      	uxtb	r3, r3
 8007822:	e022      	b.n	800786a <HAL_TIM_PWM_Start_DMA+0xa6>
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	2b0c      	cmp	r3, #12
 8007828:	d109      	bne.n	800783e <HAL_TIM_PWM_Start_DMA+0x7a>
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007830:	b2db      	uxtb	r3, r3
 8007832:	2b02      	cmp	r3, #2
 8007834:	bf0c      	ite	eq
 8007836:	2301      	moveq	r3, #1
 8007838:	2300      	movne	r3, #0
 800783a:	b2db      	uxtb	r3, r3
 800783c:	e015      	b.n	800786a <HAL_TIM_PWM_Start_DMA+0xa6>
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	2b10      	cmp	r3, #16
 8007842:	d109      	bne.n	8007858 <HAL_TIM_PWM_Start_DMA+0x94>
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800784a:	b2db      	uxtb	r3, r3
 800784c:	2b02      	cmp	r3, #2
 800784e:	bf0c      	ite	eq
 8007850:	2301      	moveq	r3, #1
 8007852:	2300      	movne	r3, #0
 8007854:	b2db      	uxtb	r3, r3
 8007856:	e008      	b.n	800786a <HAL_TIM_PWM_Start_DMA+0xa6>
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800785e:	b2db      	uxtb	r3, r3
 8007860:	2b02      	cmp	r3, #2
 8007862:	bf0c      	ite	eq
 8007864:	2301      	moveq	r3, #1
 8007866:	2300      	movne	r3, #0
 8007868:	b2db      	uxtb	r3, r3
 800786a:	2b00      	cmp	r3, #0
 800786c:	d001      	beq.n	8007872 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800786e:	2302      	movs	r3, #2
 8007870:	e1ab      	b.n	8007bca <HAL_TIM_PWM_Start_DMA+0x406>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d109      	bne.n	800788c <HAL_TIM_PWM_Start_DMA+0xc8>
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800787e:	b2db      	uxtb	r3, r3
 8007880:	2b01      	cmp	r3, #1
 8007882:	bf0c      	ite	eq
 8007884:	2301      	moveq	r3, #1
 8007886:	2300      	movne	r3, #0
 8007888:	b2db      	uxtb	r3, r3
 800788a:	e03c      	b.n	8007906 <HAL_TIM_PWM_Start_DMA+0x142>
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	2b04      	cmp	r3, #4
 8007890:	d109      	bne.n	80078a6 <HAL_TIM_PWM_Start_DMA+0xe2>
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007898:	b2db      	uxtb	r3, r3
 800789a:	2b01      	cmp	r3, #1
 800789c:	bf0c      	ite	eq
 800789e:	2301      	moveq	r3, #1
 80078a0:	2300      	movne	r3, #0
 80078a2:	b2db      	uxtb	r3, r3
 80078a4:	e02f      	b.n	8007906 <HAL_TIM_PWM_Start_DMA+0x142>
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	2b08      	cmp	r3, #8
 80078aa:	d109      	bne.n	80078c0 <HAL_TIM_PWM_Start_DMA+0xfc>
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80078b2:	b2db      	uxtb	r3, r3
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	bf0c      	ite	eq
 80078b8:	2301      	moveq	r3, #1
 80078ba:	2300      	movne	r3, #0
 80078bc:	b2db      	uxtb	r3, r3
 80078be:	e022      	b.n	8007906 <HAL_TIM_PWM_Start_DMA+0x142>
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	2b0c      	cmp	r3, #12
 80078c4:	d109      	bne.n	80078da <HAL_TIM_PWM_Start_DMA+0x116>
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078cc:	b2db      	uxtb	r3, r3
 80078ce:	2b01      	cmp	r3, #1
 80078d0:	bf0c      	ite	eq
 80078d2:	2301      	moveq	r3, #1
 80078d4:	2300      	movne	r3, #0
 80078d6:	b2db      	uxtb	r3, r3
 80078d8:	e015      	b.n	8007906 <HAL_TIM_PWM_Start_DMA+0x142>
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	2b10      	cmp	r3, #16
 80078de:	d109      	bne.n	80078f4 <HAL_TIM_PWM_Start_DMA+0x130>
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80078e6:	b2db      	uxtb	r3, r3
 80078e8:	2b01      	cmp	r3, #1
 80078ea:	bf0c      	ite	eq
 80078ec:	2301      	moveq	r3, #1
 80078ee:	2300      	movne	r3, #0
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	e008      	b.n	8007906 <HAL_TIM_PWM_Start_DMA+0x142>
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80078fa:	b2db      	uxtb	r3, r3
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	bf0c      	ite	eq
 8007900:	2301      	moveq	r3, #1
 8007902:	2300      	movne	r3, #0
 8007904:	b2db      	uxtb	r3, r3
 8007906:	2b00      	cmp	r3, #0
 8007908:	d034      	beq.n	8007974 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) && (Length > 0U))
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d104      	bne.n	800791a <HAL_TIM_PWM_Start_DMA+0x156>
 8007910:	887b      	ldrh	r3, [r7, #2]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d001      	beq.n	800791a <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8007916:	2301      	movs	r3, #1
 8007918:	e157      	b.n	8007bca <HAL_TIM_PWM_Start_DMA+0x406>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d104      	bne.n	800792a <HAL_TIM_PWM_Start_DMA+0x166>
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2202      	movs	r2, #2
 8007924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007928:	e026      	b.n	8007978 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	2b04      	cmp	r3, #4
 800792e:	d104      	bne.n	800793a <HAL_TIM_PWM_Start_DMA+0x176>
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2202      	movs	r2, #2
 8007934:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007938:	e01e      	b.n	8007978 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	2b08      	cmp	r3, #8
 800793e:	d104      	bne.n	800794a <HAL_TIM_PWM_Start_DMA+0x186>
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2202      	movs	r2, #2
 8007944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007948:	e016      	b.n	8007978 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	2b0c      	cmp	r3, #12
 800794e:	d104      	bne.n	800795a <HAL_TIM_PWM_Start_DMA+0x196>
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2202      	movs	r2, #2
 8007954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007958:	e00e      	b.n	8007978 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	2b10      	cmp	r3, #16
 800795e:	d104      	bne.n	800796a <HAL_TIM_PWM_Start_DMA+0x1a6>
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2202      	movs	r2, #2
 8007964:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007968:	e006      	b.n	8007978 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	2202      	movs	r2, #2
 800796e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007972:	e001      	b.n	8007978 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8007974:	2301      	movs	r3, #1
 8007976:	e128      	b.n	8007bca <HAL_TIM_PWM_Start_DMA+0x406>
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	2b0c      	cmp	r3, #12
 800797c:	f200 80ae 	bhi.w	8007adc <HAL_TIM_PWM_Start_DMA+0x318>
 8007980:	a201      	add	r2, pc, #4	; (adr r2, 8007988 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8007982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007986:	bf00      	nop
 8007988:	080079bd 	.word	0x080079bd
 800798c:	08007add 	.word	0x08007add
 8007990:	08007add 	.word	0x08007add
 8007994:	08007add 	.word	0x08007add
 8007998:	08007a05 	.word	0x08007a05
 800799c:	08007add 	.word	0x08007add
 80079a0:	08007add 	.word	0x08007add
 80079a4:	08007add 	.word	0x08007add
 80079a8:	08007a4d 	.word	0x08007a4d
 80079ac:	08007add 	.word	0x08007add
 80079b0:	08007add 	.word	0x08007add
 80079b4:	08007add 	.word	0x08007add
 80079b8:	08007a95 	.word	0x08007a95
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c0:	4a84      	ldr	r2, [pc, #528]	; (8007bd4 <HAL_TIM_PWM_Start_DMA+0x410>)
 80079c2:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c8:	4a83      	ldr	r2, [pc, #524]	; (8007bd8 <HAL_TIM_PWM_Start_DMA+0x414>)
 80079ca:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d0:	4a82      	ldr	r2, [pc, #520]	; (8007bdc <HAL_TIM_PWM_Start_DMA+0x418>)
 80079d2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80079d8:	6879      	ldr	r1, [r7, #4]
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	3334      	adds	r3, #52	; 0x34
 80079e0:	461a      	mov	r2, r3
 80079e2:	887b      	ldrh	r3, [r7, #2]
 80079e4:	f7fd faa0 	bl	8004f28 <HAL_DMA_Start_IT>
 80079e8:	4603      	mov	r3, r0
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d001      	beq.n	80079f2 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80079ee:	2301      	movs	r3, #1
 80079f0:	e0eb      	b.n	8007bca <HAL_TIM_PWM_Start_DMA+0x406>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	68da      	ldr	r2, [r3, #12]
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a00:	60da      	str	r2, [r3, #12]
      break;
 8007a02:	e06e      	b.n	8007ae2 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a08:	4a72      	ldr	r2, [pc, #456]	; (8007bd4 <HAL_TIM_PWM_Start_DMA+0x410>)
 8007a0a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a10:	4a71      	ldr	r2, [pc, #452]	; (8007bd8 <HAL_TIM_PWM_Start_DMA+0x414>)
 8007a12:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a18:	4a70      	ldr	r2, [pc, #448]	; (8007bdc <HAL_TIM_PWM_Start_DMA+0x418>)
 8007a1a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8007a20:	6879      	ldr	r1, [r7, #4]
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	3338      	adds	r3, #56	; 0x38
 8007a28:	461a      	mov	r2, r3
 8007a2a:	887b      	ldrh	r3, [r7, #2]
 8007a2c:	f7fd fa7c 	bl	8004f28 <HAL_DMA_Start_IT>
 8007a30:	4603      	mov	r3, r0
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d001      	beq.n	8007a3a <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007a36:	2301      	movs	r3, #1
 8007a38:	e0c7      	b.n	8007bca <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	68da      	ldr	r2, [r3, #12]
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007a48:	60da      	str	r2, [r3, #12]
      break;
 8007a4a:	e04a      	b.n	8007ae2 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a50:	4a60      	ldr	r2, [pc, #384]	; (8007bd4 <HAL_TIM_PWM_Start_DMA+0x410>)
 8007a52:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a58:	4a5f      	ldr	r2, [pc, #380]	; (8007bd8 <HAL_TIM_PWM_Start_DMA+0x414>)
 8007a5a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a60:	4a5e      	ldr	r2, [pc, #376]	; (8007bdc <HAL_TIM_PWM_Start_DMA+0x418>)
 8007a62:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007a68:	6879      	ldr	r1, [r7, #4]
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	333c      	adds	r3, #60	; 0x3c
 8007a70:	461a      	mov	r2, r3
 8007a72:	887b      	ldrh	r3, [r7, #2]
 8007a74:	f7fd fa58 	bl	8004f28 <HAL_DMA_Start_IT>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d001      	beq.n	8007a82 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	e0a3      	b.n	8007bca <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	68da      	ldr	r2, [r3, #12]
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a90:	60da      	str	r2, [r3, #12]
      break;
 8007a92:	e026      	b.n	8007ae2 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a98:	4a4e      	ldr	r2, [pc, #312]	; (8007bd4 <HAL_TIM_PWM_Start_DMA+0x410>)
 8007a9a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aa0:	4a4d      	ldr	r2, [pc, #308]	; (8007bd8 <HAL_TIM_PWM_Start_DMA+0x414>)
 8007aa2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aa8:	4a4c      	ldr	r2, [pc, #304]	; (8007bdc <HAL_TIM_PWM_Start_DMA+0x418>)
 8007aaa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007ab0:	6879      	ldr	r1, [r7, #4]
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	3340      	adds	r3, #64	; 0x40
 8007ab8:	461a      	mov	r2, r3
 8007aba:	887b      	ldrh	r3, [r7, #2]
 8007abc:	f7fd fa34 	bl	8004f28 <HAL_DMA_Start_IT>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d001      	beq.n	8007aca <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	e07f      	b.n	8007bca <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	68da      	ldr	r2, [r3, #12]
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007ad8:	60da      	str	r2, [r3, #12]
      break;
 8007ada:	e002      	b.n	8007ae2 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8007adc:	2301      	movs	r3, #1
 8007ade:	75fb      	strb	r3, [r7, #23]
      break;
 8007ae0:	bf00      	nop
  }

  if (status == HAL_OK)
 8007ae2:	7dfb      	ldrb	r3, [r7, #23]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d16f      	bne.n	8007bc8 <HAL_TIM_PWM_Start_DMA+0x404>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	2201      	movs	r2, #1
 8007aee:	68b9      	ldr	r1, [r7, #8]
 8007af0:	4618      	mov	r0, r3
 8007af2:	f001 fd25 	bl	8009540 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a39      	ldr	r2, [pc, #228]	; (8007be0 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d013      	beq.n	8007b28 <HAL_TIM_PWM_Start_DMA+0x364>
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a37      	ldr	r2, [pc, #220]	; (8007be4 <HAL_TIM_PWM_Start_DMA+0x420>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d00e      	beq.n	8007b28 <HAL_TIM_PWM_Start_DMA+0x364>
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a36      	ldr	r2, [pc, #216]	; (8007be8 <HAL_TIM_PWM_Start_DMA+0x424>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d009      	beq.n	8007b28 <HAL_TIM_PWM_Start_DMA+0x364>
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a34      	ldr	r2, [pc, #208]	; (8007bec <HAL_TIM_PWM_Start_DMA+0x428>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d004      	beq.n	8007b28 <HAL_TIM_PWM_Start_DMA+0x364>
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a33      	ldr	r2, [pc, #204]	; (8007bf0 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d101      	bne.n	8007b2c <HAL_TIM_PWM_Start_DMA+0x368>
 8007b28:	2301      	movs	r3, #1
 8007b2a:	e000      	b.n	8007b2e <HAL_TIM_PWM_Start_DMA+0x36a>
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d007      	beq.n	8007b42 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007b40:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4a26      	ldr	r2, [pc, #152]	; (8007be0 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d01d      	beq.n	8007b88 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b54:	d018      	beq.n	8007b88 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4a26      	ldr	r2, [pc, #152]	; (8007bf4 <HAL_TIM_PWM_Start_DMA+0x430>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d013      	beq.n	8007b88 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a24      	ldr	r2, [pc, #144]	; (8007bf8 <HAL_TIM_PWM_Start_DMA+0x434>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d00e      	beq.n	8007b88 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4a23      	ldr	r2, [pc, #140]	; (8007bfc <HAL_TIM_PWM_Start_DMA+0x438>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d009      	beq.n	8007b88 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4a1a      	ldr	r2, [pc, #104]	; (8007be4 <HAL_TIM_PWM_Start_DMA+0x420>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d004      	beq.n	8007b88 <HAL_TIM_PWM_Start_DMA+0x3c4>
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4a19      	ldr	r2, [pc, #100]	; (8007be8 <HAL_TIM_PWM_Start_DMA+0x424>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d115      	bne.n	8007bb4 <HAL_TIM_PWM_Start_DMA+0x3f0>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	689a      	ldr	r2, [r3, #8]
 8007b8e:	4b1c      	ldr	r3, [pc, #112]	; (8007c00 <HAL_TIM_PWM_Start_DMA+0x43c>)
 8007b90:	4013      	ands	r3, r2
 8007b92:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	2b06      	cmp	r3, #6
 8007b98:	d015      	beq.n	8007bc6 <HAL_TIM_PWM_Start_DMA+0x402>
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ba0:	d011      	beq.n	8007bc6 <HAL_TIM_PWM_Start_DMA+0x402>
      {
        __HAL_TIM_ENABLE(htim);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	681a      	ldr	r2, [r3, #0]
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f042 0201 	orr.w	r2, r2, #1
 8007bb0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bb2:	e008      	b.n	8007bc6 <HAL_TIM_PWM_Start_DMA+0x402>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	681a      	ldr	r2, [r3, #0]
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f042 0201 	orr.w	r2, r2, #1
 8007bc2:	601a      	str	r2, [r3, #0]
 8007bc4:	e000      	b.n	8007bc8 <HAL_TIM_PWM_Start_DMA+0x404>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bc6:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8007bc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3718      	adds	r7, #24
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}
 8007bd2:	bf00      	nop
 8007bd4:	080088ab 	.word	0x080088ab
 8007bd8:	08008953 	.word	0x08008953
 8007bdc:	08008819 	.word	0x08008819
 8007be0:	40012c00 	.word	0x40012c00
 8007be4:	40013400 	.word	0x40013400
 8007be8:	40014000 	.word	0x40014000
 8007bec:	40014400 	.word	0x40014400
 8007bf0:	40014800 	.word	0x40014800
 8007bf4:	40000400 	.word	0x40000400
 8007bf8:	40000800 	.word	0x40000800
 8007bfc:	40000c00 	.word	0x40000c00
 8007c00:	00010007 	.word	0x00010007

08007c04 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b082      	sub	sp, #8
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d101      	bne.n	8007c16 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007c12:	2301      	movs	r3, #1
 8007c14:	e049      	b.n	8007caa <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c1c:	b2db      	uxtb	r3, r3
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d106      	bne.n	8007c30 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2200      	movs	r2, #0
 8007c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 f841 	bl	8007cb2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2202      	movs	r2, #2
 8007c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681a      	ldr	r2, [r3, #0]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	3304      	adds	r3, #4
 8007c40:	4619      	mov	r1, r3
 8007c42:	4610      	mov	r0, r2
 8007c44:	f000 feba 	bl	80089bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2201      	movs	r2, #1
 8007c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2201      	movs	r2, #1
 8007c64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2201      	movs	r2, #1
 8007c74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2201      	movs	r2, #1
 8007c84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2201      	movs	r2, #1
 8007c94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007ca8:	2300      	movs	r3, #0
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3708      	adds	r7, #8
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}

08007cb2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007cb2:	b480      	push	{r7}
 8007cb4:	b083      	sub	sp, #12
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007cba:	bf00      	nop
 8007cbc:	370c      	adds	r7, #12
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc4:	4770      	bx	lr
	...

08007cc8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b084      	sub	sp, #16
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d104      	bne.n	8007ce6 <HAL_TIM_IC_Start_IT+0x1e>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ce2:	b2db      	uxtb	r3, r3
 8007ce4:	e023      	b.n	8007d2e <HAL_TIM_IC_Start_IT+0x66>
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	2b04      	cmp	r3, #4
 8007cea:	d104      	bne.n	8007cf6 <HAL_TIM_IC_Start_IT+0x2e>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007cf2:	b2db      	uxtb	r3, r3
 8007cf4:	e01b      	b.n	8007d2e <HAL_TIM_IC_Start_IT+0x66>
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	2b08      	cmp	r3, #8
 8007cfa:	d104      	bne.n	8007d06 <HAL_TIM_IC_Start_IT+0x3e>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007d02:	b2db      	uxtb	r3, r3
 8007d04:	e013      	b.n	8007d2e <HAL_TIM_IC_Start_IT+0x66>
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	2b0c      	cmp	r3, #12
 8007d0a:	d104      	bne.n	8007d16 <HAL_TIM_IC_Start_IT+0x4e>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d12:	b2db      	uxtb	r3, r3
 8007d14:	e00b      	b.n	8007d2e <HAL_TIM_IC_Start_IT+0x66>
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	2b10      	cmp	r3, #16
 8007d1a:	d104      	bne.n	8007d26 <HAL_TIM_IC_Start_IT+0x5e>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007d22:	b2db      	uxtb	r3, r3
 8007d24:	e003      	b.n	8007d2e <HAL_TIM_IC_Start_IT+0x66>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007d2c:	b2db      	uxtb	r3, r3
 8007d2e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d104      	bne.n	8007d40 <HAL_TIM_IC_Start_IT+0x78>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d3c:	b2db      	uxtb	r3, r3
 8007d3e:	e013      	b.n	8007d68 <HAL_TIM_IC_Start_IT+0xa0>
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	2b04      	cmp	r3, #4
 8007d44:	d104      	bne.n	8007d50 <HAL_TIM_IC_Start_IT+0x88>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d4c:	b2db      	uxtb	r3, r3
 8007d4e:	e00b      	b.n	8007d68 <HAL_TIM_IC_Start_IT+0xa0>
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	2b08      	cmp	r3, #8
 8007d54:	d104      	bne.n	8007d60 <HAL_TIM_IC_Start_IT+0x98>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	e003      	b.n	8007d68 <HAL_TIM_IC_Start_IT+0xa0>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d6a:	7bbb      	ldrb	r3, [r7, #14]
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	d102      	bne.n	8007d76 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007d70:	7b7b      	ldrb	r3, [r7, #13]
 8007d72:	2b01      	cmp	r3, #1
 8007d74:	d001      	beq.n	8007d7a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8007d76:	2301      	movs	r3, #1
 8007d78:	e0dd      	b.n	8007f36 <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d104      	bne.n	8007d8a <HAL_TIM_IC_Start_IT+0xc2>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2202      	movs	r2, #2
 8007d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d88:	e023      	b.n	8007dd2 <HAL_TIM_IC_Start_IT+0x10a>
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	2b04      	cmp	r3, #4
 8007d8e:	d104      	bne.n	8007d9a <HAL_TIM_IC_Start_IT+0xd2>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2202      	movs	r2, #2
 8007d94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d98:	e01b      	b.n	8007dd2 <HAL_TIM_IC_Start_IT+0x10a>
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	2b08      	cmp	r3, #8
 8007d9e:	d104      	bne.n	8007daa <HAL_TIM_IC_Start_IT+0xe2>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2202      	movs	r2, #2
 8007da4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007da8:	e013      	b.n	8007dd2 <HAL_TIM_IC_Start_IT+0x10a>
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	2b0c      	cmp	r3, #12
 8007dae:	d104      	bne.n	8007dba <HAL_TIM_IC_Start_IT+0xf2>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2202      	movs	r2, #2
 8007db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007db8:	e00b      	b.n	8007dd2 <HAL_TIM_IC_Start_IT+0x10a>
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	2b10      	cmp	r3, #16
 8007dbe:	d104      	bne.n	8007dca <HAL_TIM_IC_Start_IT+0x102>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2202      	movs	r2, #2
 8007dc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007dc8:	e003      	b.n	8007dd2 <HAL_TIM_IC_Start_IT+0x10a>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2202      	movs	r2, #2
 8007dce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d104      	bne.n	8007de2 <HAL_TIM_IC_Start_IT+0x11a>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2202      	movs	r2, #2
 8007ddc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007de0:	e013      	b.n	8007e0a <HAL_TIM_IC_Start_IT+0x142>
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	2b04      	cmp	r3, #4
 8007de6:	d104      	bne.n	8007df2 <HAL_TIM_IC_Start_IT+0x12a>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2202      	movs	r2, #2
 8007dec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007df0:	e00b      	b.n	8007e0a <HAL_TIM_IC_Start_IT+0x142>
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	2b08      	cmp	r3, #8
 8007df6:	d104      	bne.n	8007e02 <HAL_TIM_IC_Start_IT+0x13a>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2202      	movs	r2, #2
 8007dfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007e00:	e003      	b.n	8007e0a <HAL_TIM_IC_Start_IT+0x142>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2202      	movs	r2, #2
 8007e06:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	2b0c      	cmp	r3, #12
 8007e0e:	d841      	bhi.n	8007e94 <HAL_TIM_IC_Start_IT+0x1cc>
 8007e10:	a201      	add	r2, pc, #4	; (adr r2, 8007e18 <HAL_TIM_IC_Start_IT+0x150>)
 8007e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e16:	bf00      	nop
 8007e18:	08007e4d 	.word	0x08007e4d
 8007e1c:	08007e95 	.word	0x08007e95
 8007e20:	08007e95 	.word	0x08007e95
 8007e24:	08007e95 	.word	0x08007e95
 8007e28:	08007e5f 	.word	0x08007e5f
 8007e2c:	08007e95 	.word	0x08007e95
 8007e30:	08007e95 	.word	0x08007e95
 8007e34:	08007e95 	.word	0x08007e95
 8007e38:	08007e71 	.word	0x08007e71
 8007e3c:	08007e95 	.word	0x08007e95
 8007e40:	08007e95 	.word	0x08007e95
 8007e44:	08007e95 	.word	0x08007e95
 8007e48:	08007e83 	.word	0x08007e83
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	68da      	ldr	r2, [r3, #12]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f042 0202 	orr.w	r2, r2, #2
 8007e5a:	60da      	str	r2, [r3, #12]
      break;
 8007e5c:	e01d      	b.n	8007e9a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	68da      	ldr	r2, [r3, #12]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f042 0204 	orr.w	r2, r2, #4
 8007e6c:	60da      	str	r2, [r3, #12]
      break;
 8007e6e:	e014      	b.n	8007e9a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	68da      	ldr	r2, [r3, #12]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f042 0208 	orr.w	r2, r2, #8
 8007e7e:	60da      	str	r2, [r3, #12]
      break;
 8007e80:	e00b      	b.n	8007e9a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	68da      	ldr	r2, [r3, #12]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f042 0210 	orr.w	r2, r2, #16
 8007e90:	60da      	str	r2, [r3, #12]
      break;
 8007e92:	e002      	b.n	8007e9a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8007e94:	2301      	movs	r3, #1
 8007e96:	73fb      	strb	r3, [r7, #15]
      break;
 8007e98:	bf00      	nop
  }

  if (status == HAL_OK)
 8007e9a:	7bfb      	ldrb	r3, [r7, #15]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d149      	bne.n	8007f34 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	6839      	ldr	r1, [r7, #0]
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f001 fb49 	bl	8009540 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4a23      	ldr	r2, [pc, #140]	; (8007f40 <HAL_TIM_IC_Start_IT+0x278>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d01d      	beq.n	8007ef4 <HAL_TIM_IC_Start_IT+0x22c>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ec0:	d018      	beq.n	8007ef4 <HAL_TIM_IC_Start_IT+0x22c>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4a1f      	ldr	r2, [pc, #124]	; (8007f44 <HAL_TIM_IC_Start_IT+0x27c>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d013      	beq.n	8007ef4 <HAL_TIM_IC_Start_IT+0x22c>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a1d      	ldr	r2, [pc, #116]	; (8007f48 <HAL_TIM_IC_Start_IT+0x280>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d00e      	beq.n	8007ef4 <HAL_TIM_IC_Start_IT+0x22c>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4a1c      	ldr	r2, [pc, #112]	; (8007f4c <HAL_TIM_IC_Start_IT+0x284>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d009      	beq.n	8007ef4 <HAL_TIM_IC_Start_IT+0x22c>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4a1a      	ldr	r2, [pc, #104]	; (8007f50 <HAL_TIM_IC_Start_IT+0x288>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d004      	beq.n	8007ef4 <HAL_TIM_IC_Start_IT+0x22c>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4a19      	ldr	r2, [pc, #100]	; (8007f54 <HAL_TIM_IC_Start_IT+0x28c>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d115      	bne.n	8007f20 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	689a      	ldr	r2, [r3, #8]
 8007efa:	4b17      	ldr	r3, [pc, #92]	; (8007f58 <HAL_TIM_IC_Start_IT+0x290>)
 8007efc:	4013      	ands	r3, r2
 8007efe:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	2b06      	cmp	r3, #6
 8007f04:	d015      	beq.n	8007f32 <HAL_TIM_IC_Start_IT+0x26a>
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f0c:	d011      	beq.n	8007f32 <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	681a      	ldr	r2, [r3, #0]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f042 0201 	orr.w	r2, r2, #1
 8007f1c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f1e:	e008      	b.n	8007f32 <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	681a      	ldr	r2, [r3, #0]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f042 0201 	orr.w	r2, r2, #1
 8007f2e:	601a      	str	r2, [r3, #0]
 8007f30:	e000      	b.n	8007f34 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f32:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8007f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3710      	adds	r7, #16
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}
 8007f3e:	bf00      	nop
 8007f40:	40012c00 	.word	0x40012c00
 8007f44:	40000400 	.word	0x40000400
 8007f48:	40000800 	.word	0x40000800
 8007f4c:	40000c00 	.word	0x40000c00
 8007f50:	40013400 	.word	0x40013400
 8007f54:	40014000 	.word	0x40014000
 8007f58:	00010007 	.word	0x00010007

08007f5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b082      	sub	sp, #8
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	691b      	ldr	r3, [r3, #16]
 8007f6a:	f003 0302 	and.w	r3, r3, #2
 8007f6e:	2b02      	cmp	r3, #2
 8007f70:	d122      	bne.n	8007fb8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	68db      	ldr	r3, [r3, #12]
 8007f78:	f003 0302 	and.w	r3, r3, #2
 8007f7c:	2b02      	cmp	r3, #2
 8007f7e:	d11b      	bne.n	8007fb8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f06f 0202 	mvn.w	r2, #2
 8007f88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2201      	movs	r2, #1
 8007f8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	699b      	ldr	r3, [r3, #24]
 8007f96:	f003 0303 	and.w	r3, r3, #3
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d003      	beq.n	8007fa6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f7f9 f996 	bl	80012d0 <HAL_TIM_IC_CaptureCallback>
 8007fa4:	e005      	b.n	8007fb2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f000 fbf8 	bl	800879c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f000 fbff 	bl	80087b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	691b      	ldr	r3, [r3, #16]
 8007fbe:	f003 0304 	and.w	r3, r3, #4
 8007fc2:	2b04      	cmp	r3, #4
 8007fc4:	d122      	bne.n	800800c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	68db      	ldr	r3, [r3, #12]
 8007fcc:	f003 0304 	and.w	r3, r3, #4
 8007fd0:	2b04      	cmp	r3, #4
 8007fd2:	d11b      	bne.n	800800c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f06f 0204 	mvn.w	r2, #4
 8007fdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2202      	movs	r2, #2
 8007fe2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	699b      	ldr	r3, [r3, #24]
 8007fea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d003      	beq.n	8007ffa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f7f9 f96c 	bl	80012d0 <HAL_TIM_IC_CaptureCallback>
 8007ff8:	e005      	b.n	8008006 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f000 fbce 	bl	800879c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f000 fbd5 	bl	80087b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2200      	movs	r2, #0
 800800a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	691b      	ldr	r3, [r3, #16]
 8008012:	f003 0308 	and.w	r3, r3, #8
 8008016:	2b08      	cmp	r3, #8
 8008018:	d122      	bne.n	8008060 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	68db      	ldr	r3, [r3, #12]
 8008020:	f003 0308 	and.w	r3, r3, #8
 8008024:	2b08      	cmp	r3, #8
 8008026:	d11b      	bne.n	8008060 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f06f 0208 	mvn.w	r2, #8
 8008030:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2204      	movs	r2, #4
 8008036:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	69db      	ldr	r3, [r3, #28]
 800803e:	f003 0303 	and.w	r3, r3, #3
 8008042:	2b00      	cmp	r3, #0
 8008044:	d003      	beq.n	800804e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f7f9 f942 	bl	80012d0 <HAL_TIM_IC_CaptureCallback>
 800804c:	e005      	b.n	800805a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f000 fba4 	bl	800879c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f000 fbab 	bl	80087b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2200      	movs	r2, #0
 800805e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	691b      	ldr	r3, [r3, #16]
 8008066:	f003 0310 	and.w	r3, r3, #16
 800806a:	2b10      	cmp	r3, #16
 800806c:	d122      	bne.n	80080b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	68db      	ldr	r3, [r3, #12]
 8008074:	f003 0310 	and.w	r3, r3, #16
 8008078:	2b10      	cmp	r3, #16
 800807a:	d11b      	bne.n	80080b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f06f 0210 	mvn.w	r2, #16
 8008084:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2208      	movs	r2, #8
 800808a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	69db      	ldr	r3, [r3, #28]
 8008092:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008096:	2b00      	cmp	r3, #0
 8008098:	d003      	beq.n	80080a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f7f9 f918 	bl	80012d0 <HAL_TIM_IC_CaptureCallback>
 80080a0:	e005      	b.n	80080ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f000 fb7a 	bl	800879c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f000 fb81 	bl	80087b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2200      	movs	r2, #0
 80080b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	691b      	ldr	r3, [r3, #16]
 80080ba:	f003 0301 	and.w	r3, r3, #1
 80080be:	2b01      	cmp	r3, #1
 80080c0:	d10e      	bne.n	80080e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	68db      	ldr	r3, [r3, #12]
 80080c8:	f003 0301 	and.w	r3, r3, #1
 80080cc:	2b01      	cmp	r3, #1
 80080ce:	d107      	bne.n	80080e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f06f 0201 	mvn.w	r2, #1
 80080d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f7f9 f912 	bl	8001304 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	691b      	ldr	r3, [r3, #16]
 80080e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080ea:	2b80      	cmp	r3, #128	; 0x80
 80080ec:	d10e      	bne.n	800810c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	68db      	ldr	r3, [r3, #12]
 80080f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080f8:	2b80      	cmp	r3, #128	; 0x80
 80080fa:	d107      	bne.n	800810c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008104:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f001 fad2 	bl	80096b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	691b      	ldr	r3, [r3, #16]
 8008112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008116:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800811a:	d10e      	bne.n	800813a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	68db      	ldr	r3, [r3, #12]
 8008122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008126:	2b80      	cmp	r3, #128	; 0x80
 8008128:	d107      	bne.n	800813a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008132:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f001 fac5 	bl	80096c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	691b      	ldr	r3, [r3, #16]
 8008140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008144:	2b40      	cmp	r3, #64	; 0x40
 8008146:	d10e      	bne.n	8008166 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	68db      	ldr	r3, [r3, #12]
 800814e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008152:	2b40      	cmp	r3, #64	; 0x40
 8008154:	d107      	bne.n	8008166 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800815e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f000 fb39 	bl	80087d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	691b      	ldr	r3, [r3, #16]
 800816c:	f003 0320 	and.w	r3, r3, #32
 8008170:	2b20      	cmp	r3, #32
 8008172:	d10e      	bne.n	8008192 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	68db      	ldr	r3, [r3, #12]
 800817a:	f003 0320 	and.w	r3, r3, #32
 800817e:	2b20      	cmp	r3, #32
 8008180:	d107      	bne.n	8008192 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f06f 0220 	mvn.w	r2, #32
 800818a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f001 fa85 	bl	800969c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008192:	bf00      	nop
 8008194:	3708      	adds	r7, #8
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}

0800819a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800819a:	b580      	push	{r7, lr}
 800819c:	b086      	sub	sp, #24
 800819e:	af00      	add	r7, sp, #0
 80081a0:	60f8      	str	r0, [r7, #12]
 80081a2:	60b9      	str	r1, [r7, #8]
 80081a4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80081a6:	2300      	movs	r3, #0
 80081a8:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d101      	bne.n	80081b8 <HAL_TIM_IC_ConfigChannel+0x1e>
 80081b4:	2302      	movs	r3, #2
 80081b6:	e088      	b.n	80082ca <HAL_TIM_IC_ConfigChannel+0x130>
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2201      	movs	r2, #1
 80081bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d11b      	bne.n	80081fe <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	6818      	ldr	r0, [r3, #0]
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	6819      	ldr	r1, [r3, #0]
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	685a      	ldr	r2, [r3, #4]
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	68db      	ldr	r3, [r3, #12]
 80081d6:	f000 fff5 	bl	80091c4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	699a      	ldr	r2, [r3, #24]
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f022 020c 	bic.w	r2, r2, #12
 80081e8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	6999      	ldr	r1, [r3, #24]
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	689a      	ldr	r2, [r3, #8]
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	430a      	orrs	r2, r1
 80081fa:	619a      	str	r2, [r3, #24]
 80081fc:	e060      	b.n	80082c0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2b04      	cmp	r3, #4
 8008202:	d11c      	bne.n	800823e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	6818      	ldr	r0, [r3, #0]
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	6819      	ldr	r1, [r3, #0]
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	685a      	ldr	r2, [r3, #4]
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	68db      	ldr	r3, [r3, #12]
 8008214:	f001 f873 	bl	80092fe <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	699a      	ldr	r2, [r3, #24]
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008226:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	6999      	ldr	r1, [r3, #24]
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	689b      	ldr	r3, [r3, #8]
 8008232:	021a      	lsls	r2, r3, #8
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	430a      	orrs	r2, r1
 800823a:	619a      	str	r2, [r3, #24]
 800823c:	e040      	b.n	80082c0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2b08      	cmp	r3, #8
 8008242:	d11b      	bne.n	800827c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	6818      	ldr	r0, [r3, #0]
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	6819      	ldr	r1, [r3, #0]
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	685a      	ldr	r2, [r3, #4]
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	68db      	ldr	r3, [r3, #12]
 8008254:	f001 f8c0 	bl	80093d8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	69da      	ldr	r2, [r3, #28]
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f022 020c 	bic.w	r2, r2, #12
 8008266:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	69d9      	ldr	r1, [r3, #28]
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	689a      	ldr	r2, [r3, #8]
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	430a      	orrs	r2, r1
 8008278:	61da      	str	r2, [r3, #28]
 800827a:	e021      	b.n	80082c0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2b0c      	cmp	r3, #12
 8008280:	d11c      	bne.n	80082bc <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	6818      	ldr	r0, [r3, #0]
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	6819      	ldr	r1, [r3, #0]
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	685a      	ldr	r2, [r3, #4]
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	68db      	ldr	r3, [r3, #12]
 8008292:	f001 f8dd 	bl	8009450 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	69da      	ldr	r2, [r3, #28]
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80082a4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	69d9      	ldr	r1, [r3, #28]
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	689b      	ldr	r3, [r3, #8]
 80082b0:	021a      	lsls	r2, r3, #8
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	430a      	orrs	r2, r1
 80082b8:	61da      	str	r2, [r3, #28]
 80082ba:	e001      	b.n	80082c0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80082bc:	2301      	movs	r3, #1
 80082be:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	2200      	movs	r2, #0
 80082c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80082c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3718      	adds	r7, #24
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
	...

080082d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b086      	sub	sp, #24
 80082d8:	af00      	add	r7, sp, #0
 80082da:	60f8      	str	r0, [r7, #12]
 80082dc:	60b9      	str	r1, [r7, #8]
 80082de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80082e0:	2300      	movs	r3, #0
 80082e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082ea:	2b01      	cmp	r3, #1
 80082ec:	d101      	bne.n	80082f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80082ee:	2302      	movs	r3, #2
 80082f0:	e0ff      	b.n	80084f2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2201      	movs	r2, #1
 80082f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2b14      	cmp	r3, #20
 80082fe:	f200 80f0 	bhi.w	80084e2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008302:	a201      	add	r2, pc, #4	; (adr r2, 8008308 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008308:	0800835d 	.word	0x0800835d
 800830c:	080084e3 	.word	0x080084e3
 8008310:	080084e3 	.word	0x080084e3
 8008314:	080084e3 	.word	0x080084e3
 8008318:	0800839d 	.word	0x0800839d
 800831c:	080084e3 	.word	0x080084e3
 8008320:	080084e3 	.word	0x080084e3
 8008324:	080084e3 	.word	0x080084e3
 8008328:	080083df 	.word	0x080083df
 800832c:	080084e3 	.word	0x080084e3
 8008330:	080084e3 	.word	0x080084e3
 8008334:	080084e3 	.word	0x080084e3
 8008338:	0800841f 	.word	0x0800841f
 800833c:	080084e3 	.word	0x080084e3
 8008340:	080084e3 	.word	0x080084e3
 8008344:	080084e3 	.word	0x080084e3
 8008348:	08008461 	.word	0x08008461
 800834c:	080084e3 	.word	0x080084e3
 8008350:	080084e3 	.word	0x080084e3
 8008354:	080084e3 	.word	0x080084e3
 8008358:	080084a1 	.word	0x080084a1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	68b9      	ldr	r1, [r7, #8]
 8008362:	4618      	mov	r0, r3
 8008364:	f000 fbc4 	bl	8008af0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	699a      	ldr	r2, [r3, #24]
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f042 0208 	orr.w	r2, r2, #8
 8008376:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	699a      	ldr	r2, [r3, #24]
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f022 0204 	bic.w	r2, r2, #4
 8008386:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	6999      	ldr	r1, [r3, #24]
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	691a      	ldr	r2, [r3, #16]
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	430a      	orrs	r2, r1
 8008398:	619a      	str	r2, [r3, #24]
      break;
 800839a:	e0a5      	b.n	80084e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	68b9      	ldr	r1, [r7, #8]
 80083a2:	4618      	mov	r0, r3
 80083a4:	f000 fc34 	bl	8008c10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	699a      	ldr	r2, [r3, #24]
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80083b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	699a      	ldr	r2, [r3, #24]
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	6999      	ldr	r1, [r3, #24]
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	691b      	ldr	r3, [r3, #16]
 80083d2:	021a      	lsls	r2, r3, #8
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	430a      	orrs	r2, r1
 80083da:	619a      	str	r2, [r3, #24]
      break;
 80083dc:	e084      	b.n	80084e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	68b9      	ldr	r1, [r7, #8]
 80083e4:	4618      	mov	r0, r3
 80083e6:	f000 fc9d 	bl	8008d24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	69da      	ldr	r2, [r3, #28]
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f042 0208 	orr.w	r2, r2, #8
 80083f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	69da      	ldr	r2, [r3, #28]
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f022 0204 	bic.w	r2, r2, #4
 8008408:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	69d9      	ldr	r1, [r3, #28]
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	691a      	ldr	r2, [r3, #16]
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	430a      	orrs	r2, r1
 800841a:	61da      	str	r2, [r3, #28]
      break;
 800841c:	e064      	b.n	80084e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	68b9      	ldr	r1, [r7, #8]
 8008424:	4618      	mov	r0, r3
 8008426:	f000 fd05 	bl	8008e34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	69da      	ldr	r2, [r3, #28]
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008438:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	69da      	ldr	r2, [r3, #28]
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008448:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	69d9      	ldr	r1, [r3, #28]
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	691b      	ldr	r3, [r3, #16]
 8008454:	021a      	lsls	r2, r3, #8
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	430a      	orrs	r2, r1
 800845c:	61da      	str	r2, [r3, #28]
      break;
 800845e:	e043      	b.n	80084e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	68b9      	ldr	r1, [r7, #8]
 8008466:	4618      	mov	r0, r3
 8008468:	f000 fd4e 	bl	8008f08 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f042 0208 	orr.w	r2, r2, #8
 800847a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f022 0204 	bic.w	r2, r2, #4
 800848a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	691a      	ldr	r2, [r3, #16]
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	430a      	orrs	r2, r1
 800849c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800849e:	e023      	b.n	80084e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	68b9      	ldr	r1, [r7, #8]
 80084a6:	4618      	mov	r0, r3
 80084a8:	f000 fd92 	bl	8008fd0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80084ba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80084ca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	691b      	ldr	r3, [r3, #16]
 80084d6:	021a      	lsls	r2, r3, #8
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	430a      	orrs	r2, r1
 80084de:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80084e0:	e002      	b.n	80084e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80084e2:	2301      	movs	r3, #1
 80084e4:	75fb      	strb	r3, [r7, #23]
      break;
 80084e6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	2200      	movs	r2, #0
 80084ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80084f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3718      	adds	r7, #24
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}
 80084fa:	bf00      	nop

080084fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b084      	sub	sp, #16
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
 8008504:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008506:	2300      	movs	r3, #0
 8008508:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008510:	2b01      	cmp	r3, #1
 8008512:	d101      	bne.n	8008518 <HAL_TIM_ConfigClockSource+0x1c>
 8008514:	2302      	movs	r3, #2
 8008516:	e0b6      	b.n	8008686 <HAL_TIM_ConfigClockSource+0x18a>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2201      	movs	r2, #1
 800851c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2202      	movs	r2, #2
 8008524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	689b      	ldr	r3, [r3, #8]
 800852e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008536:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800853a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008542:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	68ba      	ldr	r2, [r7, #8]
 800854a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008554:	d03e      	beq.n	80085d4 <HAL_TIM_ConfigClockSource+0xd8>
 8008556:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800855a:	f200 8087 	bhi.w	800866c <HAL_TIM_ConfigClockSource+0x170>
 800855e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008562:	f000 8086 	beq.w	8008672 <HAL_TIM_ConfigClockSource+0x176>
 8008566:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800856a:	d87f      	bhi.n	800866c <HAL_TIM_ConfigClockSource+0x170>
 800856c:	2b70      	cmp	r3, #112	; 0x70
 800856e:	d01a      	beq.n	80085a6 <HAL_TIM_ConfigClockSource+0xaa>
 8008570:	2b70      	cmp	r3, #112	; 0x70
 8008572:	d87b      	bhi.n	800866c <HAL_TIM_ConfigClockSource+0x170>
 8008574:	2b60      	cmp	r3, #96	; 0x60
 8008576:	d050      	beq.n	800861a <HAL_TIM_ConfigClockSource+0x11e>
 8008578:	2b60      	cmp	r3, #96	; 0x60
 800857a:	d877      	bhi.n	800866c <HAL_TIM_ConfigClockSource+0x170>
 800857c:	2b50      	cmp	r3, #80	; 0x50
 800857e:	d03c      	beq.n	80085fa <HAL_TIM_ConfigClockSource+0xfe>
 8008580:	2b50      	cmp	r3, #80	; 0x50
 8008582:	d873      	bhi.n	800866c <HAL_TIM_ConfigClockSource+0x170>
 8008584:	2b40      	cmp	r3, #64	; 0x40
 8008586:	d058      	beq.n	800863a <HAL_TIM_ConfigClockSource+0x13e>
 8008588:	2b40      	cmp	r3, #64	; 0x40
 800858a:	d86f      	bhi.n	800866c <HAL_TIM_ConfigClockSource+0x170>
 800858c:	2b30      	cmp	r3, #48	; 0x30
 800858e:	d064      	beq.n	800865a <HAL_TIM_ConfigClockSource+0x15e>
 8008590:	2b30      	cmp	r3, #48	; 0x30
 8008592:	d86b      	bhi.n	800866c <HAL_TIM_ConfigClockSource+0x170>
 8008594:	2b20      	cmp	r3, #32
 8008596:	d060      	beq.n	800865a <HAL_TIM_ConfigClockSource+0x15e>
 8008598:	2b20      	cmp	r3, #32
 800859a:	d867      	bhi.n	800866c <HAL_TIM_ConfigClockSource+0x170>
 800859c:	2b00      	cmp	r3, #0
 800859e:	d05c      	beq.n	800865a <HAL_TIM_ConfigClockSource+0x15e>
 80085a0:	2b10      	cmp	r3, #16
 80085a2:	d05a      	beq.n	800865a <HAL_TIM_ConfigClockSource+0x15e>
 80085a4:	e062      	b.n	800866c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6818      	ldr	r0, [r3, #0]
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	6899      	ldr	r1, [r3, #8]
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	685a      	ldr	r2, [r3, #4]
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	68db      	ldr	r3, [r3, #12]
 80085b6:	f000 ffa3 	bl	8009500 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	689b      	ldr	r3, [r3, #8]
 80085c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80085c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	68ba      	ldr	r2, [r7, #8]
 80085d0:	609a      	str	r2, [r3, #8]
      break;
 80085d2:	e04f      	b.n	8008674 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6818      	ldr	r0, [r3, #0]
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	6899      	ldr	r1, [r3, #8]
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	685a      	ldr	r2, [r3, #4]
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	68db      	ldr	r3, [r3, #12]
 80085e4:	f000 ff8c 	bl	8009500 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	689a      	ldr	r2, [r3, #8]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80085f6:	609a      	str	r2, [r3, #8]
      break;
 80085f8:	e03c      	b.n	8008674 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6818      	ldr	r0, [r3, #0]
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	6859      	ldr	r1, [r3, #4]
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	68db      	ldr	r3, [r3, #12]
 8008606:	461a      	mov	r2, r3
 8008608:	f000 fe4a 	bl	80092a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	2150      	movs	r1, #80	; 0x50
 8008612:	4618      	mov	r0, r3
 8008614:	f000 ff59 	bl	80094ca <TIM_ITRx_SetConfig>
      break;
 8008618:	e02c      	b.n	8008674 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6818      	ldr	r0, [r3, #0]
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	6859      	ldr	r1, [r3, #4]
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	68db      	ldr	r3, [r3, #12]
 8008626:	461a      	mov	r2, r3
 8008628:	f000 fea6 	bl	8009378 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	2160      	movs	r1, #96	; 0x60
 8008632:	4618      	mov	r0, r3
 8008634:	f000 ff49 	bl	80094ca <TIM_ITRx_SetConfig>
      break;
 8008638:	e01c      	b.n	8008674 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6818      	ldr	r0, [r3, #0]
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	6859      	ldr	r1, [r3, #4]
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	68db      	ldr	r3, [r3, #12]
 8008646:	461a      	mov	r2, r3
 8008648:	f000 fe2a 	bl	80092a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	2140      	movs	r1, #64	; 0x40
 8008652:	4618      	mov	r0, r3
 8008654:	f000 ff39 	bl	80094ca <TIM_ITRx_SetConfig>
      break;
 8008658:	e00c      	b.n	8008674 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681a      	ldr	r2, [r3, #0]
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4619      	mov	r1, r3
 8008664:	4610      	mov	r0, r2
 8008666:	f000 ff30 	bl	80094ca <TIM_ITRx_SetConfig>
      break;
 800866a:	e003      	b.n	8008674 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800866c:	2301      	movs	r3, #1
 800866e:	73fb      	strb	r3, [r7, #15]
      break;
 8008670:	e000      	b.n	8008674 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8008672:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2201      	movs	r2, #1
 8008678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2200      	movs	r2, #0
 8008680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008684:	7bfb      	ldrb	r3, [r7, #15]
}
 8008686:	4618      	mov	r0, r3
 8008688:	3710      	adds	r7, #16
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}

0800868e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800868e:	b580      	push	{r7, lr}
 8008690:	b082      	sub	sp, #8
 8008692:	af00      	add	r7, sp, #0
 8008694:	6078      	str	r0, [r7, #4]
 8008696:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800869e:	2b01      	cmp	r3, #1
 80086a0:	d101      	bne.n	80086a6 <HAL_TIM_SlaveConfigSynchro+0x18>
 80086a2:	2302      	movs	r3, #2
 80086a4:	e031      	b.n	800870a <HAL_TIM_SlaveConfigSynchro+0x7c>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2201      	movs	r2, #1
 80086aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2202      	movs	r2, #2
 80086b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80086b6:	6839      	ldr	r1, [r7, #0]
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f000 fcef 	bl	800909c <TIM_SlaveTimer_SetConfig>
 80086be:	4603      	mov	r3, r0
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d009      	beq.n	80086d8 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2201      	movs	r2, #1
 80086c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2200      	movs	r2, #0
 80086d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80086d4:	2301      	movs	r3, #1
 80086d6:	e018      	b.n	800870a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	68da      	ldr	r2, [r3, #12]
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80086e6:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	68da      	ldr	r2, [r3, #12]
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80086f6:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2201      	movs	r2, #1
 80086fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2200      	movs	r2, #0
 8008704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008708:	2300      	movs	r3, #0
}
 800870a:	4618      	mov	r0, r3
 800870c:	3708      	adds	r7, #8
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}
	...

08008714 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008714:	b480      	push	{r7}
 8008716:	b085      	sub	sp, #20
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800871e:	2300      	movs	r3, #0
 8008720:	60fb      	str	r3, [r7, #12]
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	2b0c      	cmp	r3, #12
 8008726:	d831      	bhi.n	800878c <HAL_TIM_ReadCapturedValue+0x78>
 8008728:	a201      	add	r2, pc, #4	; (adr r2, 8008730 <HAL_TIM_ReadCapturedValue+0x1c>)
 800872a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800872e:	bf00      	nop
 8008730:	08008765 	.word	0x08008765
 8008734:	0800878d 	.word	0x0800878d
 8008738:	0800878d 	.word	0x0800878d
 800873c:	0800878d 	.word	0x0800878d
 8008740:	0800876f 	.word	0x0800876f
 8008744:	0800878d 	.word	0x0800878d
 8008748:	0800878d 	.word	0x0800878d
 800874c:	0800878d 	.word	0x0800878d
 8008750:	08008779 	.word	0x08008779
 8008754:	0800878d 	.word	0x0800878d
 8008758:	0800878d 	.word	0x0800878d
 800875c:	0800878d 	.word	0x0800878d
 8008760:	08008783 	.word	0x08008783
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800876a:	60fb      	str	r3, [r7, #12]

      break;
 800876c:	e00f      	b.n	800878e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008774:	60fb      	str	r3, [r7, #12]

      break;
 8008776:	e00a      	b.n	800878e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800877e:	60fb      	str	r3, [r7, #12]

      break;
 8008780:	e005      	b.n	800878e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008788:	60fb      	str	r3, [r7, #12]

      break;
 800878a:	e000      	b.n	800878e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800878c:	bf00      	nop
  }

  return tmpreg;
 800878e:	68fb      	ldr	r3, [r7, #12]
}
 8008790:	4618      	mov	r0, r3
 8008792:	3714      	adds	r7, #20
 8008794:	46bd      	mov	sp, r7
 8008796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879a:	4770      	bx	lr

0800879c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800879c:	b480      	push	{r7}
 800879e:	b083      	sub	sp, #12
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80087a4:	bf00      	nop
 80087a6:	370c      	adds	r7, #12
 80087a8:	46bd      	mov	sp, r7
 80087aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ae:	4770      	bx	lr

080087b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80087b0:	b480      	push	{r7}
 80087b2:	b083      	sub	sp, #12
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80087b8:	bf00      	nop
 80087ba:	370c      	adds	r7, #12
 80087bc:	46bd      	mov	sp, r7
 80087be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c2:	4770      	bx	lr

080087c4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b083      	sub	sp, #12
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80087cc:	bf00      	nop
 80087ce:	370c      	adds	r7, #12
 80087d0:	46bd      	mov	sp, r7
 80087d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d6:	4770      	bx	lr

080087d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80087d8:	b480      	push	{r7}
 80087da:	b083      	sub	sp, #12
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80087e0:	bf00      	nop
 80087e2:	370c      	adds	r7, #12
 80087e4:	46bd      	mov	sp, r7
 80087e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ea:	4770      	bx	lr

080087ec <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b083      	sub	sp, #12
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80087f4:	bf00      	nop
 80087f6:	370c      	adds	r7, #12
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr

08008800 <HAL_TIM_GetActiveChannel>:
  * @brief  Return the TIM Encoder Mode handle state.
  * @param  htim TIM handle
  * @retval Active channel
  */
HAL_TIM_ActiveChannel HAL_TIM_GetActiveChannel(TIM_HandleTypeDef *htim)
{
 8008800:	b480      	push	{r7}
 8008802:	b083      	sub	sp, #12
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  return htim->Channel;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	7f1b      	ldrb	r3, [r3, #28]
}
 800880c:	4618      	mov	r0, r3
 800880e:	370c      	adds	r7, #12
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr

08008818 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b084      	sub	sp, #16
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008824:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800882a:	687a      	ldr	r2, [r7, #4]
 800882c:	429a      	cmp	r2, r3
 800882e:	d107      	bne.n	8008840 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	2201      	movs	r2, #1
 8008834:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2201      	movs	r2, #1
 800883a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800883e:	e02a      	b.n	8008896 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008844:	687a      	ldr	r2, [r7, #4]
 8008846:	429a      	cmp	r2, r3
 8008848:	d107      	bne.n	800885a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	2202      	movs	r2, #2
 800884e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	2201      	movs	r2, #1
 8008854:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008858:	e01d      	b.n	8008896 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800885e:	687a      	ldr	r2, [r7, #4]
 8008860:	429a      	cmp	r2, r3
 8008862:	d107      	bne.n	8008874 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2204      	movs	r2, #4
 8008868:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	2201      	movs	r2, #1
 800886e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008872:	e010      	b.n	8008896 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008878:	687a      	ldr	r2, [r7, #4]
 800887a:	429a      	cmp	r2, r3
 800887c:	d107      	bne.n	800888e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	2208      	movs	r2, #8
 8008882:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	2201      	movs	r2, #1
 8008888:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800888c:	e003      	b.n	8008896 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2201      	movs	r2, #1
 8008892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8008896:	68f8      	ldr	r0, [r7, #12]
 8008898:	f7ff ffa8 	bl	80087ec <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	2200      	movs	r2, #0
 80088a0:	771a      	strb	r2, [r3, #28]
}
 80088a2:	bf00      	nop
 80088a4:	3710      	adds	r7, #16
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}

080088aa <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80088aa:	b580      	push	{r7, lr}
 80088ac:	b084      	sub	sp, #16
 80088ae:	af00      	add	r7, sp, #0
 80088b0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088b6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088bc:	687a      	ldr	r2, [r7, #4]
 80088be:	429a      	cmp	r2, r3
 80088c0:	d10b      	bne.n	80088da <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	2201      	movs	r2, #1
 80088c6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	69db      	ldr	r3, [r3, #28]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d136      	bne.n	800893e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2201      	movs	r2, #1
 80088d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80088d8:	e031      	b.n	800893e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088de:	687a      	ldr	r2, [r7, #4]
 80088e0:	429a      	cmp	r2, r3
 80088e2:	d10b      	bne.n	80088fc <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	2202      	movs	r2, #2
 80088e8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	69db      	ldr	r3, [r3, #28]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d125      	bne.n	800893e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2201      	movs	r2, #1
 80088f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80088fa:	e020      	b.n	800893e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008900:	687a      	ldr	r2, [r7, #4]
 8008902:	429a      	cmp	r2, r3
 8008904:	d10b      	bne.n	800891e <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	2204      	movs	r2, #4
 800890a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	69db      	ldr	r3, [r3, #28]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d114      	bne.n	800893e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	2201      	movs	r2, #1
 8008918:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800891c:	e00f      	b.n	800893e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008922:	687a      	ldr	r2, [r7, #4]
 8008924:	429a      	cmp	r2, r3
 8008926:	d10a      	bne.n	800893e <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	2208      	movs	r2, #8
 800892c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	69db      	ldr	r3, [r3, #28]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d103      	bne.n	800893e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	2201      	movs	r2, #1
 800893a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800893e:	68f8      	ldr	r0, [r7, #12]
 8008940:	f7ff ff36 	bl	80087b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2200      	movs	r2, #0
 8008948:	771a      	strb	r2, [r3, #28]
}
 800894a:	bf00      	nop
 800894c:	3710      	adds	r7, #16
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}

08008952 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008952:	b580      	push	{r7, lr}
 8008954:	b084      	sub	sp, #16
 8008956:	af00      	add	r7, sp, #0
 8008958:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800895e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008964:	687a      	ldr	r2, [r7, #4]
 8008966:	429a      	cmp	r2, r3
 8008968:	d103      	bne.n	8008972 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	2201      	movs	r2, #1
 800896e:	771a      	strb	r2, [r3, #28]
 8008970:	e019      	b.n	80089a6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008976:	687a      	ldr	r2, [r7, #4]
 8008978:	429a      	cmp	r2, r3
 800897a:	d103      	bne.n	8008984 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	2202      	movs	r2, #2
 8008980:	771a      	strb	r2, [r3, #28]
 8008982:	e010      	b.n	80089a6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008988:	687a      	ldr	r2, [r7, #4]
 800898a:	429a      	cmp	r2, r3
 800898c:	d103      	bne.n	8008996 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2204      	movs	r2, #4
 8008992:	771a      	strb	r2, [r3, #28]
 8008994:	e007      	b.n	80089a6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800899a:	687a      	ldr	r2, [r7, #4]
 800899c:	429a      	cmp	r2, r3
 800899e:	d102      	bne.n	80089a6 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	2208      	movs	r2, #8
 80089a4:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80089a6:	68f8      	ldr	r0, [r7, #12]
 80089a8:	f7ff ff0c 	bl	80087c4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	2200      	movs	r2, #0
 80089b0:	771a      	strb	r2, [r3, #28]
}
 80089b2:	bf00      	nop
 80089b4:	3710      	adds	r7, #16
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}
	...

080089bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80089bc:	b480      	push	{r7}
 80089be:	b085      	sub	sp, #20
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
 80089c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	4a40      	ldr	r2, [pc, #256]	; (8008ad0 <TIM_Base_SetConfig+0x114>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d013      	beq.n	80089fc <TIM_Base_SetConfig+0x40>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089da:	d00f      	beq.n	80089fc <TIM_Base_SetConfig+0x40>
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	4a3d      	ldr	r2, [pc, #244]	; (8008ad4 <TIM_Base_SetConfig+0x118>)
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d00b      	beq.n	80089fc <TIM_Base_SetConfig+0x40>
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	4a3c      	ldr	r2, [pc, #240]	; (8008ad8 <TIM_Base_SetConfig+0x11c>)
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d007      	beq.n	80089fc <TIM_Base_SetConfig+0x40>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	4a3b      	ldr	r2, [pc, #236]	; (8008adc <TIM_Base_SetConfig+0x120>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d003      	beq.n	80089fc <TIM_Base_SetConfig+0x40>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	4a3a      	ldr	r2, [pc, #232]	; (8008ae0 <TIM_Base_SetConfig+0x124>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d108      	bne.n	8008a0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	685b      	ldr	r3, [r3, #4]
 8008a08:	68fa      	ldr	r2, [r7, #12]
 8008a0a:	4313      	orrs	r3, r2
 8008a0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	4a2f      	ldr	r2, [pc, #188]	; (8008ad0 <TIM_Base_SetConfig+0x114>)
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d01f      	beq.n	8008a56 <TIM_Base_SetConfig+0x9a>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a1c:	d01b      	beq.n	8008a56 <TIM_Base_SetConfig+0x9a>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	4a2c      	ldr	r2, [pc, #176]	; (8008ad4 <TIM_Base_SetConfig+0x118>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d017      	beq.n	8008a56 <TIM_Base_SetConfig+0x9a>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	4a2b      	ldr	r2, [pc, #172]	; (8008ad8 <TIM_Base_SetConfig+0x11c>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d013      	beq.n	8008a56 <TIM_Base_SetConfig+0x9a>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	4a2a      	ldr	r2, [pc, #168]	; (8008adc <TIM_Base_SetConfig+0x120>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d00f      	beq.n	8008a56 <TIM_Base_SetConfig+0x9a>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	4a29      	ldr	r2, [pc, #164]	; (8008ae0 <TIM_Base_SetConfig+0x124>)
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d00b      	beq.n	8008a56 <TIM_Base_SetConfig+0x9a>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	4a28      	ldr	r2, [pc, #160]	; (8008ae4 <TIM_Base_SetConfig+0x128>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d007      	beq.n	8008a56 <TIM_Base_SetConfig+0x9a>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	4a27      	ldr	r2, [pc, #156]	; (8008ae8 <TIM_Base_SetConfig+0x12c>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d003      	beq.n	8008a56 <TIM_Base_SetConfig+0x9a>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	4a26      	ldr	r2, [pc, #152]	; (8008aec <TIM_Base_SetConfig+0x130>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d108      	bne.n	8008a68 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	68db      	ldr	r3, [r3, #12]
 8008a62:	68fa      	ldr	r2, [r7, #12]
 8008a64:	4313      	orrs	r3, r2
 8008a66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	695b      	ldr	r3, [r3, #20]
 8008a72:	4313      	orrs	r3, r2
 8008a74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	68fa      	ldr	r2, [r7, #12]
 8008a7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	689a      	ldr	r2, [r3, #8]
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	681a      	ldr	r2, [r3, #0]
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	4a10      	ldr	r2, [pc, #64]	; (8008ad0 <TIM_Base_SetConfig+0x114>)
 8008a90:	4293      	cmp	r3, r2
 8008a92:	d00f      	beq.n	8008ab4 <TIM_Base_SetConfig+0xf8>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	4a12      	ldr	r2, [pc, #72]	; (8008ae0 <TIM_Base_SetConfig+0x124>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d00b      	beq.n	8008ab4 <TIM_Base_SetConfig+0xf8>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	4a11      	ldr	r2, [pc, #68]	; (8008ae4 <TIM_Base_SetConfig+0x128>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d007      	beq.n	8008ab4 <TIM_Base_SetConfig+0xf8>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	4a10      	ldr	r2, [pc, #64]	; (8008ae8 <TIM_Base_SetConfig+0x12c>)
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	d003      	beq.n	8008ab4 <TIM_Base_SetConfig+0xf8>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	4a0f      	ldr	r2, [pc, #60]	; (8008aec <TIM_Base_SetConfig+0x130>)
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d103      	bne.n	8008abc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	691a      	ldr	r2, [r3, #16]
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2201      	movs	r2, #1
 8008ac0:	615a      	str	r2, [r3, #20]
}
 8008ac2:	bf00      	nop
 8008ac4:	3714      	adds	r7, #20
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008acc:	4770      	bx	lr
 8008ace:	bf00      	nop
 8008ad0:	40012c00 	.word	0x40012c00
 8008ad4:	40000400 	.word	0x40000400
 8008ad8:	40000800 	.word	0x40000800
 8008adc:	40000c00 	.word	0x40000c00
 8008ae0:	40013400 	.word	0x40013400
 8008ae4:	40014000 	.word	0x40014000
 8008ae8:	40014400 	.word	0x40014400
 8008aec:	40014800 	.word	0x40014800

08008af0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b087      	sub	sp, #28
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
 8008af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6a1b      	ldr	r3, [r3, #32]
 8008afe:	f023 0201 	bic.w	r2, r3, #1
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6a1b      	ldr	r3, [r3, #32]
 8008b0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	685b      	ldr	r3, [r3, #4]
 8008b10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	699b      	ldr	r3, [r3, #24]
 8008b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	f023 0303 	bic.w	r3, r3, #3
 8008b2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	68fa      	ldr	r2, [r7, #12]
 8008b32:	4313      	orrs	r3, r2
 8008b34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	f023 0302 	bic.w	r3, r3, #2
 8008b3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	689b      	ldr	r3, [r3, #8]
 8008b42:	697a      	ldr	r2, [r7, #20]
 8008b44:	4313      	orrs	r3, r2
 8008b46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	4a2c      	ldr	r2, [pc, #176]	; (8008bfc <TIM_OC1_SetConfig+0x10c>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d00f      	beq.n	8008b70 <TIM_OC1_SetConfig+0x80>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	4a2b      	ldr	r2, [pc, #172]	; (8008c00 <TIM_OC1_SetConfig+0x110>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d00b      	beq.n	8008b70 <TIM_OC1_SetConfig+0x80>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	4a2a      	ldr	r2, [pc, #168]	; (8008c04 <TIM_OC1_SetConfig+0x114>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d007      	beq.n	8008b70 <TIM_OC1_SetConfig+0x80>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	4a29      	ldr	r2, [pc, #164]	; (8008c08 <TIM_OC1_SetConfig+0x118>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d003      	beq.n	8008b70 <TIM_OC1_SetConfig+0x80>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	4a28      	ldr	r2, [pc, #160]	; (8008c0c <TIM_OC1_SetConfig+0x11c>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d10c      	bne.n	8008b8a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008b70:	697b      	ldr	r3, [r7, #20]
 8008b72:	f023 0308 	bic.w	r3, r3, #8
 8008b76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	68db      	ldr	r3, [r3, #12]
 8008b7c:	697a      	ldr	r2, [r7, #20]
 8008b7e:	4313      	orrs	r3, r2
 8008b80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	f023 0304 	bic.w	r3, r3, #4
 8008b88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	4a1b      	ldr	r2, [pc, #108]	; (8008bfc <TIM_OC1_SetConfig+0x10c>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d00f      	beq.n	8008bb2 <TIM_OC1_SetConfig+0xc2>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	4a1a      	ldr	r2, [pc, #104]	; (8008c00 <TIM_OC1_SetConfig+0x110>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d00b      	beq.n	8008bb2 <TIM_OC1_SetConfig+0xc2>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	4a19      	ldr	r2, [pc, #100]	; (8008c04 <TIM_OC1_SetConfig+0x114>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d007      	beq.n	8008bb2 <TIM_OC1_SetConfig+0xc2>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	4a18      	ldr	r2, [pc, #96]	; (8008c08 <TIM_OC1_SetConfig+0x118>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d003      	beq.n	8008bb2 <TIM_OC1_SetConfig+0xc2>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	4a17      	ldr	r2, [pc, #92]	; (8008c0c <TIM_OC1_SetConfig+0x11c>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d111      	bne.n	8008bd6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008bb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008bba:	693b      	ldr	r3, [r7, #16]
 8008bbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008bc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	695b      	ldr	r3, [r3, #20]
 8008bc6:	693a      	ldr	r2, [r7, #16]
 8008bc8:	4313      	orrs	r3, r2
 8008bca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	699b      	ldr	r3, [r3, #24]
 8008bd0:	693a      	ldr	r2, [r7, #16]
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	693a      	ldr	r2, [r7, #16]
 8008bda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	68fa      	ldr	r2, [r7, #12]
 8008be0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	685a      	ldr	r2, [r3, #4]
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	697a      	ldr	r2, [r7, #20]
 8008bee:	621a      	str	r2, [r3, #32]
}
 8008bf0:	bf00      	nop
 8008bf2:	371c      	adds	r7, #28
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfa:	4770      	bx	lr
 8008bfc:	40012c00 	.word	0x40012c00
 8008c00:	40013400 	.word	0x40013400
 8008c04:	40014000 	.word	0x40014000
 8008c08:	40014400 	.word	0x40014400
 8008c0c:	40014800 	.word	0x40014800

08008c10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b087      	sub	sp, #28
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6a1b      	ldr	r3, [r3, #32]
 8008c1e:	f023 0210 	bic.w	r2, r3, #16
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6a1b      	ldr	r3, [r3, #32]
 8008c2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	685b      	ldr	r3, [r3, #4]
 8008c30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	699b      	ldr	r3, [r3, #24]
 8008c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008c3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	021b      	lsls	r3, r3, #8
 8008c52:	68fa      	ldr	r2, [r7, #12]
 8008c54:	4313      	orrs	r3, r2
 8008c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008c58:	697b      	ldr	r3, [r7, #20]
 8008c5a:	f023 0320 	bic.w	r3, r3, #32
 8008c5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	689b      	ldr	r3, [r3, #8]
 8008c64:	011b      	lsls	r3, r3, #4
 8008c66:	697a      	ldr	r2, [r7, #20]
 8008c68:	4313      	orrs	r3, r2
 8008c6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	4a28      	ldr	r2, [pc, #160]	; (8008d10 <TIM_OC2_SetConfig+0x100>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d003      	beq.n	8008c7c <TIM_OC2_SetConfig+0x6c>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	4a27      	ldr	r2, [pc, #156]	; (8008d14 <TIM_OC2_SetConfig+0x104>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d10d      	bne.n	8008c98 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	68db      	ldr	r3, [r3, #12]
 8008c88:	011b      	lsls	r3, r3, #4
 8008c8a:	697a      	ldr	r2, [r7, #20]
 8008c8c:	4313      	orrs	r3, r2
 8008c8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c96:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	4a1d      	ldr	r2, [pc, #116]	; (8008d10 <TIM_OC2_SetConfig+0x100>)
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d00f      	beq.n	8008cc0 <TIM_OC2_SetConfig+0xb0>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	4a1c      	ldr	r2, [pc, #112]	; (8008d14 <TIM_OC2_SetConfig+0x104>)
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d00b      	beq.n	8008cc0 <TIM_OC2_SetConfig+0xb0>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	4a1b      	ldr	r2, [pc, #108]	; (8008d18 <TIM_OC2_SetConfig+0x108>)
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d007      	beq.n	8008cc0 <TIM_OC2_SetConfig+0xb0>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	4a1a      	ldr	r2, [pc, #104]	; (8008d1c <TIM_OC2_SetConfig+0x10c>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d003      	beq.n	8008cc0 <TIM_OC2_SetConfig+0xb0>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	4a19      	ldr	r2, [pc, #100]	; (8008d20 <TIM_OC2_SetConfig+0x110>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d113      	bne.n	8008ce8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008cc0:	693b      	ldr	r3, [r7, #16]
 8008cc2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008cc6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008cce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	695b      	ldr	r3, [r3, #20]
 8008cd4:	009b      	lsls	r3, r3, #2
 8008cd6:	693a      	ldr	r2, [r7, #16]
 8008cd8:	4313      	orrs	r3, r2
 8008cda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	699b      	ldr	r3, [r3, #24]
 8008ce0:	009b      	lsls	r3, r3, #2
 8008ce2:	693a      	ldr	r2, [r7, #16]
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	693a      	ldr	r2, [r7, #16]
 8008cec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	68fa      	ldr	r2, [r7, #12]
 8008cf2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	685a      	ldr	r2, [r3, #4]
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	697a      	ldr	r2, [r7, #20]
 8008d00:	621a      	str	r2, [r3, #32]
}
 8008d02:	bf00      	nop
 8008d04:	371c      	adds	r7, #28
 8008d06:	46bd      	mov	sp, r7
 8008d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0c:	4770      	bx	lr
 8008d0e:	bf00      	nop
 8008d10:	40012c00 	.word	0x40012c00
 8008d14:	40013400 	.word	0x40013400
 8008d18:	40014000 	.word	0x40014000
 8008d1c:	40014400 	.word	0x40014400
 8008d20:	40014800 	.word	0x40014800

08008d24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b087      	sub	sp, #28
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
 8008d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6a1b      	ldr	r3, [r3, #32]
 8008d32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6a1b      	ldr	r3, [r3, #32]
 8008d3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	69db      	ldr	r3, [r3, #28]
 8008d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	f023 0303 	bic.w	r3, r3, #3
 8008d5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	68fa      	ldr	r2, [r7, #12]
 8008d66:	4313      	orrs	r3, r2
 8008d68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008d70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	689b      	ldr	r3, [r3, #8]
 8008d76:	021b      	lsls	r3, r3, #8
 8008d78:	697a      	ldr	r2, [r7, #20]
 8008d7a:	4313      	orrs	r3, r2
 8008d7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	4a27      	ldr	r2, [pc, #156]	; (8008e20 <TIM_OC3_SetConfig+0xfc>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d003      	beq.n	8008d8e <TIM_OC3_SetConfig+0x6a>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	4a26      	ldr	r2, [pc, #152]	; (8008e24 <TIM_OC3_SetConfig+0x100>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d10d      	bne.n	8008daa <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008d94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	68db      	ldr	r3, [r3, #12]
 8008d9a:	021b      	lsls	r3, r3, #8
 8008d9c:	697a      	ldr	r2, [r7, #20]
 8008d9e:	4313      	orrs	r3, r2
 8008da0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008da8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	4a1c      	ldr	r2, [pc, #112]	; (8008e20 <TIM_OC3_SetConfig+0xfc>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d00f      	beq.n	8008dd2 <TIM_OC3_SetConfig+0xae>
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	4a1b      	ldr	r2, [pc, #108]	; (8008e24 <TIM_OC3_SetConfig+0x100>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d00b      	beq.n	8008dd2 <TIM_OC3_SetConfig+0xae>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	4a1a      	ldr	r2, [pc, #104]	; (8008e28 <TIM_OC3_SetConfig+0x104>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d007      	beq.n	8008dd2 <TIM_OC3_SetConfig+0xae>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	4a19      	ldr	r2, [pc, #100]	; (8008e2c <TIM_OC3_SetConfig+0x108>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d003      	beq.n	8008dd2 <TIM_OC3_SetConfig+0xae>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	4a18      	ldr	r2, [pc, #96]	; (8008e30 <TIM_OC3_SetConfig+0x10c>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d113      	bne.n	8008dfa <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008dd2:	693b      	ldr	r3, [r7, #16]
 8008dd4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008dd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008dda:	693b      	ldr	r3, [r7, #16]
 8008ddc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008de0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	695b      	ldr	r3, [r3, #20]
 8008de6:	011b      	lsls	r3, r3, #4
 8008de8:	693a      	ldr	r2, [r7, #16]
 8008dea:	4313      	orrs	r3, r2
 8008dec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	699b      	ldr	r3, [r3, #24]
 8008df2:	011b      	lsls	r3, r3, #4
 8008df4:	693a      	ldr	r2, [r7, #16]
 8008df6:	4313      	orrs	r3, r2
 8008df8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	693a      	ldr	r2, [r7, #16]
 8008dfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	68fa      	ldr	r2, [r7, #12]
 8008e04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	685a      	ldr	r2, [r3, #4]
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	697a      	ldr	r2, [r7, #20]
 8008e12:	621a      	str	r2, [r3, #32]
}
 8008e14:	bf00      	nop
 8008e16:	371c      	adds	r7, #28
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1e:	4770      	bx	lr
 8008e20:	40012c00 	.word	0x40012c00
 8008e24:	40013400 	.word	0x40013400
 8008e28:	40014000 	.word	0x40014000
 8008e2c:	40014400 	.word	0x40014400
 8008e30:	40014800 	.word	0x40014800

08008e34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008e34:	b480      	push	{r7}
 8008e36:	b087      	sub	sp, #28
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
 8008e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6a1b      	ldr	r3, [r3, #32]
 8008e42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6a1b      	ldr	r3, [r3, #32]
 8008e4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	685b      	ldr	r3, [r3, #4]
 8008e54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	69db      	ldr	r3, [r3, #28]
 8008e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008e62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	021b      	lsls	r3, r3, #8
 8008e76:	68fa      	ldr	r2, [r7, #12]
 8008e78:	4313      	orrs	r3, r2
 8008e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008e7c:	693b      	ldr	r3, [r7, #16]
 8008e7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008e82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	689b      	ldr	r3, [r3, #8]
 8008e88:	031b      	lsls	r3, r3, #12
 8008e8a:	693a      	ldr	r2, [r7, #16]
 8008e8c:	4313      	orrs	r3, r2
 8008e8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	4a18      	ldr	r2, [pc, #96]	; (8008ef4 <TIM_OC4_SetConfig+0xc0>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d00f      	beq.n	8008eb8 <TIM_OC4_SetConfig+0x84>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	4a17      	ldr	r2, [pc, #92]	; (8008ef8 <TIM_OC4_SetConfig+0xc4>)
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d00b      	beq.n	8008eb8 <TIM_OC4_SetConfig+0x84>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	4a16      	ldr	r2, [pc, #88]	; (8008efc <TIM_OC4_SetConfig+0xc8>)
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d007      	beq.n	8008eb8 <TIM_OC4_SetConfig+0x84>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	4a15      	ldr	r2, [pc, #84]	; (8008f00 <TIM_OC4_SetConfig+0xcc>)
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d003      	beq.n	8008eb8 <TIM_OC4_SetConfig+0x84>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	4a14      	ldr	r2, [pc, #80]	; (8008f04 <TIM_OC4_SetConfig+0xd0>)
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d109      	bne.n	8008ecc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008eb8:	697b      	ldr	r3, [r7, #20]
 8008eba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ebe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	695b      	ldr	r3, [r3, #20]
 8008ec4:	019b      	lsls	r3, r3, #6
 8008ec6:	697a      	ldr	r2, [r7, #20]
 8008ec8:	4313      	orrs	r3, r2
 8008eca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	697a      	ldr	r2, [r7, #20]
 8008ed0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	68fa      	ldr	r2, [r7, #12]
 8008ed6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	685a      	ldr	r2, [r3, #4]
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	693a      	ldr	r2, [r7, #16]
 8008ee4:	621a      	str	r2, [r3, #32]
}
 8008ee6:	bf00      	nop
 8008ee8:	371c      	adds	r7, #28
 8008eea:	46bd      	mov	sp, r7
 8008eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef0:	4770      	bx	lr
 8008ef2:	bf00      	nop
 8008ef4:	40012c00 	.word	0x40012c00
 8008ef8:	40013400 	.word	0x40013400
 8008efc:	40014000 	.word	0x40014000
 8008f00:	40014400 	.word	0x40014400
 8008f04:	40014800 	.word	0x40014800

08008f08 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b087      	sub	sp, #28
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6a1b      	ldr	r3, [r3, #32]
 8008f16:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6a1b      	ldr	r3, [r3, #32]
 8008f22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	685b      	ldr	r3, [r3, #4]
 8008f28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	68fa      	ldr	r2, [r7, #12]
 8008f42:	4313      	orrs	r3, r2
 8008f44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008f46:	693b      	ldr	r3, [r7, #16]
 8008f48:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008f4c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	689b      	ldr	r3, [r3, #8]
 8008f52:	041b      	lsls	r3, r3, #16
 8008f54:	693a      	ldr	r2, [r7, #16]
 8008f56:	4313      	orrs	r3, r2
 8008f58:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	4a17      	ldr	r2, [pc, #92]	; (8008fbc <TIM_OC5_SetConfig+0xb4>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d00f      	beq.n	8008f82 <TIM_OC5_SetConfig+0x7a>
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	4a16      	ldr	r2, [pc, #88]	; (8008fc0 <TIM_OC5_SetConfig+0xb8>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d00b      	beq.n	8008f82 <TIM_OC5_SetConfig+0x7a>
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	4a15      	ldr	r2, [pc, #84]	; (8008fc4 <TIM_OC5_SetConfig+0xbc>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d007      	beq.n	8008f82 <TIM_OC5_SetConfig+0x7a>
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	4a14      	ldr	r2, [pc, #80]	; (8008fc8 <TIM_OC5_SetConfig+0xc0>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d003      	beq.n	8008f82 <TIM_OC5_SetConfig+0x7a>
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	4a13      	ldr	r2, [pc, #76]	; (8008fcc <TIM_OC5_SetConfig+0xc4>)
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d109      	bne.n	8008f96 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f88:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	695b      	ldr	r3, [r3, #20]
 8008f8e:	021b      	lsls	r3, r3, #8
 8008f90:	697a      	ldr	r2, [r7, #20]
 8008f92:	4313      	orrs	r3, r2
 8008f94:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	697a      	ldr	r2, [r7, #20]
 8008f9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	68fa      	ldr	r2, [r7, #12]
 8008fa0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	685a      	ldr	r2, [r3, #4]
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	693a      	ldr	r2, [r7, #16]
 8008fae:	621a      	str	r2, [r3, #32]
}
 8008fb0:	bf00      	nop
 8008fb2:	371c      	adds	r7, #28
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fba:	4770      	bx	lr
 8008fbc:	40012c00 	.word	0x40012c00
 8008fc0:	40013400 	.word	0x40013400
 8008fc4:	40014000 	.word	0x40014000
 8008fc8:	40014400 	.word	0x40014400
 8008fcc:	40014800 	.word	0x40014800

08008fd0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b087      	sub	sp, #28
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
 8008fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6a1b      	ldr	r3, [r3, #32]
 8008fde:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6a1b      	ldr	r3, [r3, #32]
 8008fea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	685b      	ldr	r3, [r3, #4]
 8008ff0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008ffe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009002:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	021b      	lsls	r3, r3, #8
 800900a:	68fa      	ldr	r2, [r7, #12]
 800900c:	4313      	orrs	r3, r2
 800900e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009016:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	689b      	ldr	r3, [r3, #8]
 800901c:	051b      	lsls	r3, r3, #20
 800901e:	693a      	ldr	r2, [r7, #16]
 8009020:	4313      	orrs	r3, r2
 8009022:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	4a18      	ldr	r2, [pc, #96]	; (8009088 <TIM_OC6_SetConfig+0xb8>)
 8009028:	4293      	cmp	r3, r2
 800902a:	d00f      	beq.n	800904c <TIM_OC6_SetConfig+0x7c>
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	4a17      	ldr	r2, [pc, #92]	; (800908c <TIM_OC6_SetConfig+0xbc>)
 8009030:	4293      	cmp	r3, r2
 8009032:	d00b      	beq.n	800904c <TIM_OC6_SetConfig+0x7c>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	4a16      	ldr	r2, [pc, #88]	; (8009090 <TIM_OC6_SetConfig+0xc0>)
 8009038:	4293      	cmp	r3, r2
 800903a:	d007      	beq.n	800904c <TIM_OC6_SetConfig+0x7c>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	4a15      	ldr	r2, [pc, #84]	; (8009094 <TIM_OC6_SetConfig+0xc4>)
 8009040:	4293      	cmp	r3, r2
 8009042:	d003      	beq.n	800904c <TIM_OC6_SetConfig+0x7c>
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	4a14      	ldr	r2, [pc, #80]	; (8009098 <TIM_OC6_SetConfig+0xc8>)
 8009048:	4293      	cmp	r3, r2
 800904a:	d109      	bne.n	8009060 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800904c:	697b      	ldr	r3, [r7, #20]
 800904e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009052:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	695b      	ldr	r3, [r3, #20]
 8009058:	029b      	lsls	r3, r3, #10
 800905a:	697a      	ldr	r2, [r7, #20]
 800905c:	4313      	orrs	r3, r2
 800905e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	697a      	ldr	r2, [r7, #20]
 8009064:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	68fa      	ldr	r2, [r7, #12]
 800906a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	685a      	ldr	r2, [r3, #4]
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	693a      	ldr	r2, [r7, #16]
 8009078:	621a      	str	r2, [r3, #32]
}
 800907a:	bf00      	nop
 800907c:	371c      	adds	r7, #28
 800907e:	46bd      	mov	sp, r7
 8009080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009084:	4770      	bx	lr
 8009086:	bf00      	nop
 8009088:	40012c00 	.word	0x40012c00
 800908c:	40013400 	.word	0x40013400
 8009090:	40014000 	.word	0x40014000
 8009094:	40014400 	.word	0x40014400
 8009098:	40014800 	.word	0x40014800

0800909c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b086      	sub	sp, #24
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
 80090a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80090a6:	2300      	movs	r3, #0
 80090a8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	689b      	ldr	r3, [r3, #8]
 80090b0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80090b2:	693b      	ldr	r3, [r7, #16]
 80090b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090b8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	685b      	ldr	r3, [r3, #4]
 80090be:	693a      	ldr	r2, [r7, #16]
 80090c0:	4313      	orrs	r3, r2
 80090c2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80090c4:	693b      	ldr	r3, [r7, #16]
 80090c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80090ca:	f023 0307 	bic.w	r3, r3, #7
 80090ce:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	693a      	ldr	r2, [r7, #16]
 80090d6:	4313      	orrs	r3, r2
 80090d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	693a      	ldr	r2, [r7, #16]
 80090e0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	685b      	ldr	r3, [r3, #4]
 80090e6:	2b70      	cmp	r3, #112	; 0x70
 80090e8:	d01a      	beq.n	8009120 <TIM_SlaveTimer_SetConfig+0x84>
 80090ea:	2b70      	cmp	r3, #112	; 0x70
 80090ec:	d860      	bhi.n	80091b0 <TIM_SlaveTimer_SetConfig+0x114>
 80090ee:	2b60      	cmp	r3, #96	; 0x60
 80090f0:	d054      	beq.n	800919c <TIM_SlaveTimer_SetConfig+0x100>
 80090f2:	2b60      	cmp	r3, #96	; 0x60
 80090f4:	d85c      	bhi.n	80091b0 <TIM_SlaveTimer_SetConfig+0x114>
 80090f6:	2b50      	cmp	r3, #80	; 0x50
 80090f8:	d046      	beq.n	8009188 <TIM_SlaveTimer_SetConfig+0xec>
 80090fa:	2b50      	cmp	r3, #80	; 0x50
 80090fc:	d858      	bhi.n	80091b0 <TIM_SlaveTimer_SetConfig+0x114>
 80090fe:	2b40      	cmp	r3, #64	; 0x40
 8009100:	d019      	beq.n	8009136 <TIM_SlaveTimer_SetConfig+0x9a>
 8009102:	2b40      	cmp	r3, #64	; 0x40
 8009104:	d854      	bhi.n	80091b0 <TIM_SlaveTimer_SetConfig+0x114>
 8009106:	2b30      	cmp	r3, #48	; 0x30
 8009108:	d055      	beq.n	80091b6 <TIM_SlaveTimer_SetConfig+0x11a>
 800910a:	2b30      	cmp	r3, #48	; 0x30
 800910c:	d850      	bhi.n	80091b0 <TIM_SlaveTimer_SetConfig+0x114>
 800910e:	2b20      	cmp	r3, #32
 8009110:	d051      	beq.n	80091b6 <TIM_SlaveTimer_SetConfig+0x11a>
 8009112:	2b20      	cmp	r3, #32
 8009114:	d84c      	bhi.n	80091b0 <TIM_SlaveTimer_SetConfig+0x114>
 8009116:	2b00      	cmp	r3, #0
 8009118:	d04d      	beq.n	80091b6 <TIM_SlaveTimer_SetConfig+0x11a>
 800911a:	2b10      	cmp	r3, #16
 800911c:	d04b      	beq.n	80091b6 <TIM_SlaveTimer_SetConfig+0x11a>
 800911e:	e047      	b.n	80091b0 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6818      	ldr	r0, [r3, #0]
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	68d9      	ldr	r1, [r3, #12]
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	689a      	ldr	r2, [r3, #8]
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	691b      	ldr	r3, [r3, #16]
 8009130:	f000 f9e6 	bl	8009500 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8009134:	e040      	b.n	80091b8 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	2b05      	cmp	r3, #5
 800913c:	d101      	bne.n	8009142 <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 800913e:	2301      	movs	r3, #1
 8009140:	e03b      	b.n	80091ba <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	6a1b      	ldr	r3, [r3, #32]
 8009148:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	6a1a      	ldr	r2, [r3, #32]
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f022 0201 	bic.w	r2, r2, #1
 8009158:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	699b      	ldr	r3, [r3, #24]
 8009160:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009168:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	691b      	ldr	r3, [r3, #16]
 800916e:	011b      	lsls	r3, r3, #4
 8009170:	68ba      	ldr	r2, [r7, #8]
 8009172:	4313      	orrs	r3, r2
 8009174:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	68ba      	ldr	r2, [r7, #8]
 800917c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	68fa      	ldr	r2, [r7, #12]
 8009184:	621a      	str	r2, [r3, #32]
      break;
 8009186:	e017      	b.n	80091b8 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6818      	ldr	r0, [r3, #0]
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	6899      	ldr	r1, [r3, #8]
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	691b      	ldr	r3, [r3, #16]
 8009194:	461a      	mov	r2, r3
 8009196:	f000 f883 	bl	80092a0 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800919a:	e00d      	b.n	80091b8 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	6818      	ldr	r0, [r3, #0]
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	6899      	ldr	r1, [r3, #8]
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	691b      	ldr	r3, [r3, #16]
 80091a8:	461a      	mov	r2, r3
 80091aa:	f000 f8e5 	bl	8009378 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80091ae:	e003      	b.n	80091b8 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80091b0:	2301      	movs	r3, #1
 80091b2:	75fb      	strb	r3, [r7, #23]
      break;
 80091b4:	e000      	b.n	80091b8 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 80091b6:	bf00      	nop
  }

  return status;
 80091b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80091ba:	4618      	mov	r0, r3
 80091bc:	3718      	adds	r7, #24
 80091be:	46bd      	mov	sp, r7
 80091c0:	bd80      	pop	{r7, pc}
	...

080091c4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80091c4:	b480      	push	{r7}
 80091c6:	b087      	sub	sp, #28
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	60f8      	str	r0, [r7, #12]
 80091cc:	60b9      	str	r1, [r7, #8]
 80091ce:	607a      	str	r2, [r7, #4]
 80091d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	6a1b      	ldr	r3, [r3, #32]
 80091d6:	f023 0201 	bic.w	r2, r3, #1
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	699b      	ldr	r3, [r3, #24]
 80091e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	6a1b      	ldr	r3, [r3, #32]
 80091e8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	4a26      	ldr	r2, [pc, #152]	; (8009288 <TIM_TI1_SetConfig+0xc4>)
 80091ee:	4293      	cmp	r3, r2
 80091f0:	d017      	beq.n	8009222 <TIM_TI1_SetConfig+0x5e>
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091f8:	d013      	beq.n	8009222 <TIM_TI1_SetConfig+0x5e>
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	4a23      	ldr	r2, [pc, #140]	; (800928c <TIM_TI1_SetConfig+0xc8>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	d00f      	beq.n	8009222 <TIM_TI1_SetConfig+0x5e>
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	4a22      	ldr	r2, [pc, #136]	; (8009290 <TIM_TI1_SetConfig+0xcc>)
 8009206:	4293      	cmp	r3, r2
 8009208:	d00b      	beq.n	8009222 <TIM_TI1_SetConfig+0x5e>
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	4a21      	ldr	r2, [pc, #132]	; (8009294 <TIM_TI1_SetConfig+0xd0>)
 800920e:	4293      	cmp	r3, r2
 8009210:	d007      	beq.n	8009222 <TIM_TI1_SetConfig+0x5e>
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	4a20      	ldr	r2, [pc, #128]	; (8009298 <TIM_TI1_SetConfig+0xd4>)
 8009216:	4293      	cmp	r3, r2
 8009218:	d003      	beq.n	8009222 <TIM_TI1_SetConfig+0x5e>
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	4a1f      	ldr	r2, [pc, #124]	; (800929c <TIM_TI1_SetConfig+0xd8>)
 800921e:	4293      	cmp	r3, r2
 8009220:	d101      	bne.n	8009226 <TIM_TI1_SetConfig+0x62>
 8009222:	2301      	movs	r3, #1
 8009224:	e000      	b.n	8009228 <TIM_TI1_SetConfig+0x64>
 8009226:	2300      	movs	r3, #0
 8009228:	2b00      	cmp	r3, #0
 800922a:	d008      	beq.n	800923e <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800922c:	697b      	ldr	r3, [r7, #20]
 800922e:	f023 0303 	bic.w	r3, r3, #3
 8009232:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009234:	697a      	ldr	r2, [r7, #20]
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	4313      	orrs	r3, r2
 800923a:	617b      	str	r3, [r7, #20]
 800923c:	e003      	b.n	8009246 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800923e:	697b      	ldr	r3, [r7, #20]
 8009240:	f043 0301 	orr.w	r3, r3, #1
 8009244:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009246:	697b      	ldr	r3, [r7, #20]
 8009248:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800924c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	011b      	lsls	r3, r3, #4
 8009252:	b2db      	uxtb	r3, r3
 8009254:	697a      	ldr	r2, [r7, #20]
 8009256:	4313      	orrs	r3, r2
 8009258:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	f023 030a 	bic.w	r3, r3, #10
 8009260:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	f003 030a 	and.w	r3, r3, #10
 8009268:	693a      	ldr	r2, [r7, #16]
 800926a:	4313      	orrs	r3, r2
 800926c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	697a      	ldr	r2, [r7, #20]
 8009272:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	693a      	ldr	r2, [r7, #16]
 8009278:	621a      	str	r2, [r3, #32]
}
 800927a:	bf00      	nop
 800927c:	371c      	adds	r7, #28
 800927e:	46bd      	mov	sp, r7
 8009280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009284:	4770      	bx	lr
 8009286:	bf00      	nop
 8009288:	40012c00 	.word	0x40012c00
 800928c:	40000400 	.word	0x40000400
 8009290:	40000800 	.word	0x40000800
 8009294:	40000c00 	.word	0x40000c00
 8009298:	40013400 	.word	0x40013400
 800929c:	40014000 	.word	0x40014000

080092a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80092a0:	b480      	push	{r7}
 80092a2:	b087      	sub	sp, #28
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	60f8      	str	r0, [r7, #12]
 80092a8:	60b9      	str	r1, [r7, #8]
 80092aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	6a1b      	ldr	r3, [r3, #32]
 80092b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	6a1b      	ldr	r3, [r3, #32]
 80092b6:	f023 0201 	bic.w	r2, r3, #1
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	699b      	ldr	r3, [r3, #24]
 80092c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80092c4:	693b      	ldr	r3, [r7, #16]
 80092c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80092ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	011b      	lsls	r3, r3, #4
 80092d0:	693a      	ldr	r2, [r7, #16]
 80092d2:	4313      	orrs	r3, r2
 80092d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	f023 030a 	bic.w	r3, r3, #10
 80092dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80092de:	697a      	ldr	r2, [r7, #20]
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	4313      	orrs	r3, r2
 80092e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	693a      	ldr	r2, [r7, #16]
 80092ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	697a      	ldr	r2, [r7, #20]
 80092f0:	621a      	str	r2, [r3, #32]
}
 80092f2:	bf00      	nop
 80092f4:	371c      	adds	r7, #28
 80092f6:	46bd      	mov	sp, r7
 80092f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fc:	4770      	bx	lr

080092fe <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80092fe:	b480      	push	{r7}
 8009300:	b087      	sub	sp, #28
 8009302:	af00      	add	r7, sp, #0
 8009304:	60f8      	str	r0, [r7, #12]
 8009306:	60b9      	str	r1, [r7, #8]
 8009308:	607a      	str	r2, [r7, #4]
 800930a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	6a1b      	ldr	r3, [r3, #32]
 8009310:	f023 0210 	bic.w	r2, r3, #16
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	699b      	ldr	r3, [r3, #24]
 800931c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	6a1b      	ldr	r3, [r3, #32]
 8009322:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009324:	697b      	ldr	r3, [r7, #20]
 8009326:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800932a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	021b      	lsls	r3, r3, #8
 8009330:	697a      	ldr	r2, [r7, #20]
 8009332:	4313      	orrs	r3, r2
 8009334:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800933c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	031b      	lsls	r3, r3, #12
 8009342:	b29b      	uxth	r3, r3
 8009344:	697a      	ldr	r2, [r7, #20]
 8009346:	4313      	orrs	r3, r2
 8009348:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800934a:	693b      	ldr	r3, [r7, #16]
 800934c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009350:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	011b      	lsls	r3, r3, #4
 8009356:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800935a:	693a      	ldr	r2, [r7, #16]
 800935c:	4313      	orrs	r3, r2
 800935e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	697a      	ldr	r2, [r7, #20]
 8009364:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	693a      	ldr	r2, [r7, #16]
 800936a:	621a      	str	r2, [r3, #32]
}
 800936c:	bf00      	nop
 800936e:	371c      	adds	r7, #28
 8009370:	46bd      	mov	sp, r7
 8009372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009376:	4770      	bx	lr

08009378 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009378:	b480      	push	{r7}
 800937a:	b087      	sub	sp, #28
 800937c:	af00      	add	r7, sp, #0
 800937e:	60f8      	str	r0, [r7, #12]
 8009380:	60b9      	str	r1, [r7, #8]
 8009382:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	6a1b      	ldr	r3, [r3, #32]
 8009388:	f023 0210 	bic.w	r2, r3, #16
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	699b      	ldr	r3, [r3, #24]
 8009394:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	6a1b      	ldr	r3, [r3, #32]
 800939a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800939c:	697b      	ldr	r3, [r7, #20]
 800939e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80093a2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	031b      	lsls	r3, r3, #12
 80093a8:	697a      	ldr	r2, [r7, #20]
 80093aa:	4313      	orrs	r3, r2
 80093ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80093ae:	693b      	ldr	r3, [r7, #16]
 80093b0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80093b4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	011b      	lsls	r3, r3, #4
 80093ba:	693a      	ldr	r2, [r7, #16]
 80093bc:	4313      	orrs	r3, r2
 80093be:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	697a      	ldr	r2, [r7, #20]
 80093c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	693a      	ldr	r2, [r7, #16]
 80093ca:	621a      	str	r2, [r3, #32]
}
 80093cc:	bf00      	nop
 80093ce:	371c      	adds	r7, #28
 80093d0:	46bd      	mov	sp, r7
 80093d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d6:	4770      	bx	lr

080093d8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80093d8:	b480      	push	{r7}
 80093da:	b087      	sub	sp, #28
 80093dc:	af00      	add	r7, sp, #0
 80093de:	60f8      	str	r0, [r7, #12]
 80093e0:	60b9      	str	r1, [r7, #8]
 80093e2:	607a      	str	r2, [r7, #4]
 80093e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	6a1b      	ldr	r3, [r3, #32]
 80093ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	69db      	ldr	r3, [r3, #28]
 80093f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	6a1b      	ldr	r3, [r3, #32]
 80093fc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80093fe:	697b      	ldr	r3, [r7, #20]
 8009400:	f023 0303 	bic.w	r3, r3, #3
 8009404:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8009406:	697a      	ldr	r2, [r7, #20]
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	4313      	orrs	r3, r2
 800940c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009414:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	011b      	lsls	r3, r3, #4
 800941a:	b2db      	uxtb	r3, r3
 800941c:	697a      	ldr	r2, [r7, #20]
 800941e:	4313      	orrs	r3, r2
 8009420:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8009422:	693b      	ldr	r3, [r7, #16]
 8009424:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8009428:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	021b      	lsls	r3, r3, #8
 800942e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8009432:	693a      	ldr	r2, [r7, #16]
 8009434:	4313      	orrs	r3, r2
 8009436:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	697a      	ldr	r2, [r7, #20]
 800943c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	693a      	ldr	r2, [r7, #16]
 8009442:	621a      	str	r2, [r3, #32]
}
 8009444:	bf00      	nop
 8009446:	371c      	adds	r7, #28
 8009448:	46bd      	mov	sp, r7
 800944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944e:	4770      	bx	lr

08009450 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009450:	b480      	push	{r7}
 8009452:	b087      	sub	sp, #28
 8009454:	af00      	add	r7, sp, #0
 8009456:	60f8      	str	r0, [r7, #12]
 8009458:	60b9      	str	r1, [r7, #8]
 800945a:	607a      	str	r2, [r7, #4]
 800945c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	6a1b      	ldr	r3, [r3, #32]
 8009462:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	69db      	ldr	r3, [r3, #28]
 800946e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	6a1b      	ldr	r3, [r3, #32]
 8009474:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800947c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	021b      	lsls	r3, r3, #8
 8009482:	697a      	ldr	r2, [r7, #20]
 8009484:	4313      	orrs	r3, r2
 8009486:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009488:	697b      	ldr	r3, [r7, #20]
 800948a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800948e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	031b      	lsls	r3, r3, #12
 8009494:	b29b      	uxth	r3, r3
 8009496:	697a      	ldr	r2, [r7, #20]
 8009498:	4313      	orrs	r3, r2
 800949a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80094a2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	031b      	lsls	r3, r3, #12
 80094a8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80094ac:	693a      	ldr	r2, [r7, #16]
 80094ae:	4313      	orrs	r3, r2
 80094b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	697a      	ldr	r2, [r7, #20]
 80094b6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	693a      	ldr	r2, [r7, #16]
 80094bc:	621a      	str	r2, [r3, #32]
}
 80094be:	bf00      	nop
 80094c0:	371c      	adds	r7, #28
 80094c2:	46bd      	mov	sp, r7
 80094c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c8:	4770      	bx	lr

080094ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80094ca:	b480      	push	{r7}
 80094cc:	b085      	sub	sp, #20
 80094ce:	af00      	add	r7, sp, #0
 80094d0:	6078      	str	r0, [r7, #4]
 80094d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	689b      	ldr	r3, [r3, #8]
 80094d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80094e2:	683a      	ldr	r2, [r7, #0]
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	4313      	orrs	r3, r2
 80094e8:	f043 0307 	orr.w	r3, r3, #7
 80094ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	68fa      	ldr	r2, [r7, #12]
 80094f2:	609a      	str	r2, [r3, #8]
}
 80094f4:	bf00      	nop
 80094f6:	3714      	adds	r7, #20
 80094f8:	46bd      	mov	sp, r7
 80094fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fe:	4770      	bx	lr

08009500 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009500:	b480      	push	{r7}
 8009502:	b087      	sub	sp, #28
 8009504:	af00      	add	r7, sp, #0
 8009506:	60f8      	str	r0, [r7, #12]
 8009508:	60b9      	str	r1, [r7, #8]
 800950a:	607a      	str	r2, [r7, #4]
 800950c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	689b      	ldr	r3, [r3, #8]
 8009512:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009514:	697b      	ldr	r3, [r7, #20]
 8009516:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800951a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	021a      	lsls	r2, r3, #8
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	431a      	orrs	r2, r3
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	4313      	orrs	r3, r2
 8009528:	697a      	ldr	r2, [r7, #20]
 800952a:	4313      	orrs	r3, r2
 800952c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	697a      	ldr	r2, [r7, #20]
 8009532:	609a      	str	r2, [r3, #8]
}
 8009534:	bf00      	nop
 8009536:	371c      	adds	r7, #28
 8009538:	46bd      	mov	sp, r7
 800953a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953e:	4770      	bx	lr

08009540 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009540:	b480      	push	{r7}
 8009542:	b087      	sub	sp, #28
 8009544:	af00      	add	r7, sp, #0
 8009546:	60f8      	str	r0, [r7, #12]
 8009548:	60b9      	str	r1, [r7, #8]
 800954a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	f003 031f 	and.w	r3, r3, #31
 8009552:	2201      	movs	r2, #1
 8009554:	fa02 f303 	lsl.w	r3, r2, r3
 8009558:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	6a1a      	ldr	r2, [r3, #32]
 800955e:	697b      	ldr	r3, [r7, #20]
 8009560:	43db      	mvns	r3, r3
 8009562:	401a      	ands	r2, r3
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	6a1a      	ldr	r2, [r3, #32]
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	f003 031f 	and.w	r3, r3, #31
 8009572:	6879      	ldr	r1, [r7, #4]
 8009574:	fa01 f303 	lsl.w	r3, r1, r3
 8009578:	431a      	orrs	r2, r3
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	621a      	str	r2, [r3, #32]
}
 800957e:	bf00      	nop
 8009580:	371c      	adds	r7, #28
 8009582:	46bd      	mov	sp, r7
 8009584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009588:	4770      	bx	lr
	...

0800958c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800958c:	b480      	push	{r7}
 800958e:	b085      	sub	sp, #20
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
 8009594:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800959c:	2b01      	cmp	r3, #1
 800959e:	d101      	bne.n	80095a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80095a0:	2302      	movs	r3, #2
 80095a2:	e068      	b.n	8009676 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2201      	movs	r2, #1
 80095a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2202      	movs	r2, #2
 80095b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	685b      	ldr	r3, [r3, #4]
 80095ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	689b      	ldr	r3, [r3, #8]
 80095c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	4a2e      	ldr	r2, [pc, #184]	; (8009684 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80095ca:	4293      	cmp	r3, r2
 80095cc:	d004      	beq.n	80095d8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	4a2d      	ldr	r2, [pc, #180]	; (8009688 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80095d4:	4293      	cmp	r3, r2
 80095d6:	d108      	bne.n	80095ea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80095de:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	685b      	ldr	r3, [r3, #4]
 80095e4:	68fa      	ldr	r2, [r7, #12]
 80095e6:	4313      	orrs	r3, r2
 80095e8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095f0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	68fa      	ldr	r2, [r7, #12]
 80095f8:	4313      	orrs	r3, r2
 80095fa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	68fa      	ldr	r2, [r7, #12]
 8009602:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	4a1e      	ldr	r2, [pc, #120]	; (8009684 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800960a:	4293      	cmp	r3, r2
 800960c:	d01d      	beq.n	800964a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009616:	d018      	beq.n	800964a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	4a1b      	ldr	r2, [pc, #108]	; (800968c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800961e:	4293      	cmp	r3, r2
 8009620:	d013      	beq.n	800964a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	4a1a      	ldr	r2, [pc, #104]	; (8009690 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009628:	4293      	cmp	r3, r2
 800962a:	d00e      	beq.n	800964a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	4a18      	ldr	r2, [pc, #96]	; (8009694 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009632:	4293      	cmp	r3, r2
 8009634:	d009      	beq.n	800964a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	4a13      	ldr	r2, [pc, #76]	; (8009688 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800963c:	4293      	cmp	r3, r2
 800963e:	d004      	beq.n	800964a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	4a14      	ldr	r2, [pc, #80]	; (8009698 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009646:	4293      	cmp	r3, r2
 8009648:	d10c      	bne.n	8009664 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009650:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	689b      	ldr	r3, [r3, #8]
 8009656:	68ba      	ldr	r2, [r7, #8]
 8009658:	4313      	orrs	r3, r2
 800965a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	68ba      	ldr	r2, [r7, #8]
 8009662:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2201      	movs	r2, #1
 8009668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2200      	movs	r2, #0
 8009670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009674:	2300      	movs	r3, #0
}
 8009676:	4618      	mov	r0, r3
 8009678:	3714      	adds	r7, #20
 800967a:	46bd      	mov	sp, r7
 800967c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009680:	4770      	bx	lr
 8009682:	bf00      	nop
 8009684:	40012c00 	.word	0x40012c00
 8009688:	40013400 	.word	0x40013400
 800968c:	40000400 	.word	0x40000400
 8009690:	40000800 	.word	0x40000800
 8009694:	40000c00 	.word	0x40000c00
 8009698:	40014000 	.word	0x40014000

0800969c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800969c:	b480      	push	{r7}
 800969e:	b083      	sub	sp, #12
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80096a4:	bf00      	nop
 80096a6:	370c      	adds	r7, #12
 80096a8:	46bd      	mov	sp, r7
 80096aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ae:	4770      	bx	lr

080096b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80096b0:	b480      	push	{r7}
 80096b2:	b083      	sub	sp, #12
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80096b8:	bf00      	nop
 80096ba:	370c      	adds	r7, #12
 80096bc:	46bd      	mov	sp, r7
 80096be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c2:	4770      	bx	lr

080096c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80096c4:	b480      	push	{r7}
 80096c6:	b083      	sub	sp, #12
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80096cc:	bf00      	nop
 80096ce:	370c      	adds	r7, #12
 80096d0:	46bd      	mov	sp, r7
 80096d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d6:	4770      	bx	lr

080096d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b082      	sub	sp, #8
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d101      	bne.n	80096ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80096e6:	2301      	movs	r3, #1
 80096e8:	e040      	b.n	800976c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d106      	bne.n	8009700 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2200      	movs	r2, #0
 80096f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f7f9 fd3e 	bl	800317c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2224      	movs	r2, #36	; 0x24
 8009704:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	681a      	ldr	r2, [r3, #0]
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f022 0201 	bic.w	r2, r2, #1
 8009714:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f000 f8c0 	bl	800989c <UART_SetConfig>
 800971c:	4603      	mov	r3, r0
 800971e:	2b01      	cmp	r3, #1
 8009720:	d101      	bne.n	8009726 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009722:	2301      	movs	r3, #1
 8009724:	e022      	b.n	800976c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800972a:	2b00      	cmp	r3, #0
 800972c:	d002      	beq.n	8009734 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f000 fb3e 	bl	8009db0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	685a      	ldr	r2, [r3, #4]
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009742:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	689a      	ldr	r2, [r3, #8]
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009752:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	681a      	ldr	r2, [r3, #0]
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f042 0201 	orr.w	r2, r2, #1
 8009762:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f000 fbc5 	bl	8009ef4 <UART_CheckIdleState>
 800976a:	4603      	mov	r3, r0
}
 800976c:	4618      	mov	r0, r3
 800976e:	3708      	adds	r7, #8
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}

08009774 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b08a      	sub	sp, #40	; 0x28
 8009778:	af02      	add	r7, sp, #8
 800977a:	60f8      	str	r0, [r7, #12]
 800977c:	60b9      	str	r1, [r7, #8]
 800977e:	603b      	str	r3, [r7, #0]
 8009780:	4613      	mov	r3, r2
 8009782:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009788:	2b20      	cmp	r3, #32
 800978a:	f040 8082 	bne.w	8009892 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d002      	beq.n	800979a <HAL_UART_Transmit+0x26>
 8009794:	88fb      	ldrh	r3, [r7, #6]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d101      	bne.n	800979e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800979a:	2301      	movs	r3, #1
 800979c:	e07a      	b.n	8009894 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80097a4:	2b01      	cmp	r3, #1
 80097a6:	d101      	bne.n	80097ac <HAL_UART_Transmit+0x38>
 80097a8:	2302      	movs	r3, #2
 80097aa:	e073      	b.n	8009894 <HAL_UART_Transmit+0x120>
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	2201      	movs	r2, #1
 80097b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	2200      	movs	r2, #0
 80097b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	2221      	movs	r2, #33	; 0x21
 80097c0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80097c2:	f7f9 fec7 	bl	8003554 <HAL_GetTick>
 80097c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	88fa      	ldrh	r2, [r7, #6]
 80097cc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	88fa      	ldrh	r2, [r7, #6]
 80097d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	689b      	ldr	r3, [r3, #8]
 80097dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097e0:	d108      	bne.n	80097f4 <HAL_UART_Transmit+0x80>
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	691b      	ldr	r3, [r3, #16]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d104      	bne.n	80097f4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80097ea:	2300      	movs	r3, #0
 80097ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	61bb      	str	r3, [r7, #24]
 80097f2:	e003      	b.n	80097fc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80097f8:	2300      	movs	r3, #0
 80097fa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	2200      	movs	r2, #0
 8009800:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8009804:	e02d      	b.n	8009862 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	9300      	str	r3, [sp, #0]
 800980a:	697b      	ldr	r3, [r7, #20]
 800980c:	2200      	movs	r2, #0
 800980e:	2180      	movs	r1, #128	; 0x80
 8009810:	68f8      	ldr	r0, [r7, #12]
 8009812:	f000 fbb8 	bl	8009f86 <UART_WaitOnFlagUntilTimeout>
 8009816:	4603      	mov	r3, r0
 8009818:	2b00      	cmp	r3, #0
 800981a:	d001      	beq.n	8009820 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800981c:	2303      	movs	r3, #3
 800981e:	e039      	b.n	8009894 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8009820:	69fb      	ldr	r3, [r7, #28]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d10b      	bne.n	800983e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009826:	69bb      	ldr	r3, [r7, #24]
 8009828:	881a      	ldrh	r2, [r3, #0]
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009832:	b292      	uxth	r2, r2
 8009834:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009836:	69bb      	ldr	r3, [r7, #24]
 8009838:	3302      	adds	r3, #2
 800983a:	61bb      	str	r3, [r7, #24]
 800983c:	e008      	b.n	8009850 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800983e:	69fb      	ldr	r3, [r7, #28]
 8009840:	781a      	ldrb	r2, [r3, #0]
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	b292      	uxth	r2, r2
 8009848:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800984a:	69fb      	ldr	r3, [r7, #28]
 800984c:	3301      	adds	r3, #1
 800984e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009856:	b29b      	uxth	r3, r3
 8009858:	3b01      	subs	r3, #1
 800985a:	b29a      	uxth	r2, r3
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009868:	b29b      	uxth	r3, r3
 800986a:	2b00      	cmp	r3, #0
 800986c:	d1cb      	bne.n	8009806 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	9300      	str	r3, [sp, #0]
 8009872:	697b      	ldr	r3, [r7, #20]
 8009874:	2200      	movs	r2, #0
 8009876:	2140      	movs	r1, #64	; 0x40
 8009878:	68f8      	ldr	r0, [r7, #12]
 800987a:	f000 fb84 	bl	8009f86 <UART_WaitOnFlagUntilTimeout>
 800987e:	4603      	mov	r3, r0
 8009880:	2b00      	cmp	r3, #0
 8009882:	d001      	beq.n	8009888 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8009884:	2303      	movs	r3, #3
 8009886:	e005      	b.n	8009894 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	2220      	movs	r2, #32
 800988c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800988e:	2300      	movs	r3, #0
 8009890:	e000      	b.n	8009894 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8009892:	2302      	movs	r3, #2
  }
}
 8009894:	4618      	mov	r0, r3
 8009896:	3720      	adds	r7, #32
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}

0800989c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800989c:	b5b0      	push	{r4, r5, r7, lr}
 800989e:	b088      	sub	sp, #32
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80098a4:	2300      	movs	r3, #0
 80098a6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	689a      	ldr	r2, [r3, #8]
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	691b      	ldr	r3, [r3, #16]
 80098b0:	431a      	orrs	r2, r3
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	695b      	ldr	r3, [r3, #20]
 80098b6:	431a      	orrs	r2, r3
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	69db      	ldr	r3, [r3, #28]
 80098bc:	4313      	orrs	r3, r2
 80098be:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	681a      	ldr	r2, [r3, #0]
 80098c6:	4bad      	ldr	r3, [pc, #692]	; (8009b7c <UART_SetConfig+0x2e0>)
 80098c8:	4013      	ands	r3, r2
 80098ca:	687a      	ldr	r2, [r7, #4]
 80098cc:	6812      	ldr	r2, [r2, #0]
 80098ce:	69f9      	ldr	r1, [r7, #28]
 80098d0:	430b      	orrs	r3, r1
 80098d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	685b      	ldr	r3, [r3, #4]
 80098da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	68da      	ldr	r2, [r3, #12]
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	430a      	orrs	r2, r1
 80098e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	699b      	ldr	r3, [r3, #24]
 80098ee:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	4aa2      	ldr	r2, [pc, #648]	; (8009b80 <UART_SetConfig+0x2e4>)
 80098f6:	4293      	cmp	r3, r2
 80098f8:	d004      	beq.n	8009904 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6a1b      	ldr	r3, [r3, #32]
 80098fe:	69fa      	ldr	r2, [r7, #28]
 8009900:	4313      	orrs	r3, r2
 8009902:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	689b      	ldr	r3, [r3, #8]
 800990a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	69fa      	ldr	r2, [r7, #28]
 8009914:	430a      	orrs	r2, r1
 8009916:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	4a99      	ldr	r2, [pc, #612]	; (8009b84 <UART_SetConfig+0x2e8>)
 800991e:	4293      	cmp	r3, r2
 8009920:	d121      	bne.n	8009966 <UART_SetConfig+0xca>
 8009922:	4b99      	ldr	r3, [pc, #612]	; (8009b88 <UART_SetConfig+0x2ec>)
 8009924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009928:	f003 0303 	and.w	r3, r3, #3
 800992c:	2b03      	cmp	r3, #3
 800992e:	d817      	bhi.n	8009960 <UART_SetConfig+0xc4>
 8009930:	a201      	add	r2, pc, #4	; (adr r2, 8009938 <UART_SetConfig+0x9c>)
 8009932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009936:	bf00      	nop
 8009938:	08009949 	.word	0x08009949
 800993c:	08009955 	.word	0x08009955
 8009940:	0800994f 	.word	0x0800994f
 8009944:	0800995b 	.word	0x0800995b
 8009948:	2301      	movs	r3, #1
 800994a:	76fb      	strb	r3, [r7, #27]
 800994c:	e0e7      	b.n	8009b1e <UART_SetConfig+0x282>
 800994e:	2302      	movs	r3, #2
 8009950:	76fb      	strb	r3, [r7, #27]
 8009952:	e0e4      	b.n	8009b1e <UART_SetConfig+0x282>
 8009954:	2304      	movs	r3, #4
 8009956:	76fb      	strb	r3, [r7, #27]
 8009958:	e0e1      	b.n	8009b1e <UART_SetConfig+0x282>
 800995a:	2308      	movs	r3, #8
 800995c:	76fb      	strb	r3, [r7, #27]
 800995e:	e0de      	b.n	8009b1e <UART_SetConfig+0x282>
 8009960:	2310      	movs	r3, #16
 8009962:	76fb      	strb	r3, [r7, #27]
 8009964:	e0db      	b.n	8009b1e <UART_SetConfig+0x282>
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	4a88      	ldr	r2, [pc, #544]	; (8009b8c <UART_SetConfig+0x2f0>)
 800996c:	4293      	cmp	r3, r2
 800996e:	d132      	bne.n	80099d6 <UART_SetConfig+0x13a>
 8009970:	4b85      	ldr	r3, [pc, #532]	; (8009b88 <UART_SetConfig+0x2ec>)
 8009972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009976:	f003 030c 	and.w	r3, r3, #12
 800997a:	2b0c      	cmp	r3, #12
 800997c:	d828      	bhi.n	80099d0 <UART_SetConfig+0x134>
 800997e:	a201      	add	r2, pc, #4	; (adr r2, 8009984 <UART_SetConfig+0xe8>)
 8009980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009984:	080099b9 	.word	0x080099b9
 8009988:	080099d1 	.word	0x080099d1
 800998c:	080099d1 	.word	0x080099d1
 8009990:	080099d1 	.word	0x080099d1
 8009994:	080099c5 	.word	0x080099c5
 8009998:	080099d1 	.word	0x080099d1
 800999c:	080099d1 	.word	0x080099d1
 80099a0:	080099d1 	.word	0x080099d1
 80099a4:	080099bf 	.word	0x080099bf
 80099a8:	080099d1 	.word	0x080099d1
 80099ac:	080099d1 	.word	0x080099d1
 80099b0:	080099d1 	.word	0x080099d1
 80099b4:	080099cb 	.word	0x080099cb
 80099b8:	2300      	movs	r3, #0
 80099ba:	76fb      	strb	r3, [r7, #27]
 80099bc:	e0af      	b.n	8009b1e <UART_SetConfig+0x282>
 80099be:	2302      	movs	r3, #2
 80099c0:	76fb      	strb	r3, [r7, #27]
 80099c2:	e0ac      	b.n	8009b1e <UART_SetConfig+0x282>
 80099c4:	2304      	movs	r3, #4
 80099c6:	76fb      	strb	r3, [r7, #27]
 80099c8:	e0a9      	b.n	8009b1e <UART_SetConfig+0x282>
 80099ca:	2308      	movs	r3, #8
 80099cc:	76fb      	strb	r3, [r7, #27]
 80099ce:	e0a6      	b.n	8009b1e <UART_SetConfig+0x282>
 80099d0:	2310      	movs	r3, #16
 80099d2:	76fb      	strb	r3, [r7, #27]
 80099d4:	e0a3      	b.n	8009b1e <UART_SetConfig+0x282>
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	4a6d      	ldr	r2, [pc, #436]	; (8009b90 <UART_SetConfig+0x2f4>)
 80099dc:	4293      	cmp	r3, r2
 80099de:	d120      	bne.n	8009a22 <UART_SetConfig+0x186>
 80099e0:	4b69      	ldr	r3, [pc, #420]	; (8009b88 <UART_SetConfig+0x2ec>)
 80099e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099e6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80099ea:	2b30      	cmp	r3, #48	; 0x30
 80099ec:	d013      	beq.n	8009a16 <UART_SetConfig+0x17a>
 80099ee:	2b30      	cmp	r3, #48	; 0x30
 80099f0:	d814      	bhi.n	8009a1c <UART_SetConfig+0x180>
 80099f2:	2b20      	cmp	r3, #32
 80099f4:	d009      	beq.n	8009a0a <UART_SetConfig+0x16e>
 80099f6:	2b20      	cmp	r3, #32
 80099f8:	d810      	bhi.n	8009a1c <UART_SetConfig+0x180>
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d002      	beq.n	8009a04 <UART_SetConfig+0x168>
 80099fe:	2b10      	cmp	r3, #16
 8009a00:	d006      	beq.n	8009a10 <UART_SetConfig+0x174>
 8009a02:	e00b      	b.n	8009a1c <UART_SetConfig+0x180>
 8009a04:	2300      	movs	r3, #0
 8009a06:	76fb      	strb	r3, [r7, #27]
 8009a08:	e089      	b.n	8009b1e <UART_SetConfig+0x282>
 8009a0a:	2302      	movs	r3, #2
 8009a0c:	76fb      	strb	r3, [r7, #27]
 8009a0e:	e086      	b.n	8009b1e <UART_SetConfig+0x282>
 8009a10:	2304      	movs	r3, #4
 8009a12:	76fb      	strb	r3, [r7, #27]
 8009a14:	e083      	b.n	8009b1e <UART_SetConfig+0x282>
 8009a16:	2308      	movs	r3, #8
 8009a18:	76fb      	strb	r3, [r7, #27]
 8009a1a:	e080      	b.n	8009b1e <UART_SetConfig+0x282>
 8009a1c:	2310      	movs	r3, #16
 8009a1e:	76fb      	strb	r3, [r7, #27]
 8009a20:	e07d      	b.n	8009b1e <UART_SetConfig+0x282>
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	4a5b      	ldr	r2, [pc, #364]	; (8009b94 <UART_SetConfig+0x2f8>)
 8009a28:	4293      	cmp	r3, r2
 8009a2a:	d120      	bne.n	8009a6e <UART_SetConfig+0x1d2>
 8009a2c:	4b56      	ldr	r3, [pc, #344]	; (8009b88 <UART_SetConfig+0x2ec>)
 8009a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a32:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009a36:	2bc0      	cmp	r3, #192	; 0xc0
 8009a38:	d013      	beq.n	8009a62 <UART_SetConfig+0x1c6>
 8009a3a:	2bc0      	cmp	r3, #192	; 0xc0
 8009a3c:	d814      	bhi.n	8009a68 <UART_SetConfig+0x1cc>
 8009a3e:	2b80      	cmp	r3, #128	; 0x80
 8009a40:	d009      	beq.n	8009a56 <UART_SetConfig+0x1ba>
 8009a42:	2b80      	cmp	r3, #128	; 0x80
 8009a44:	d810      	bhi.n	8009a68 <UART_SetConfig+0x1cc>
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d002      	beq.n	8009a50 <UART_SetConfig+0x1b4>
 8009a4a:	2b40      	cmp	r3, #64	; 0x40
 8009a4c:	d006      	beq.n	8009a5c <UART_SetConfig+0x1c0>
 8009a4e:	e00b      	b.n	8009a68 <UART_SetConfig+0x1cc>
 8009a50:	2300      	movs	r3, #0
 8009a52:	76fb      	strb	r3, [r7, #27]
 8009a54:	e063      	b.n	8009b1e <UART_SetConfig+0x282>
 8009a56:	2302      	movs	r3, #2
 8009a58:	76fb      	strb	r3, [r7, #27]
 8009a5a:	e060      	b.n	8009b1e <UART_SetConfig+0x282>
 8009a5c:	2304      	movs	r3, #4
 8009a5e:	76fb      	strb	r3, [r7, #27]
 8009a60:	e05d      	b.n	8009b1e <UART_SetConfig+0x282>
 8009a62:	2308      	movs	r3, #8
 8009a64:	76fb      	strb	r3, [r7, #27]
 8009a66:	e05a      	b.n	8009b1e <UART_SetConfig+0x282>
 8009a68:	2310      	movs	r3, #16
 8009a6a:	76fb      	strb	r3, [r7, #27]
 8009a6c:	e057      	b.n	8009b1e <UART_SetConfig+0x282>
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	4a49      	ldr	r2, [pc, #292]	; (8009b98 <UART_SetConfig+0x2fc>)
 8009a74:	4293      	cmp	r3, r2
 8009a76:	d125      	bne.n	8009ac4 <UART_SetConfig+0x228>
 8009a78:	4b43      	ldr	r3, [pc, #268]	; (8009b88 <UART_SetConfig+0x2ec>)
 8009a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009a86:	d017      	beq.n	8009ab8 <UART_SetConfig+0x21c>
 8009a88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009a8c:	d817      	bhi.n	8009abe <UART_SetConfig+0x222>
 8009a8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a92:	d00b      	beq.n	8009aac <UART_SetConfig+0x210>
 8009a94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a98:	d811      	bhi.n	8009abe <UART_SetConfig+0x222>
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d003      	beq.n	8009aa6 <UART_SetConfig+0x20a>
 8009a9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009aa2:	d006      	beq.n	8009ab2 <UART_SetConfig+0x216>
 8009aa4:	e00b      	b.n	8009abe <UART_SetConfig+0x222>
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	76fb      	strb	r3, [r7, #27]
 8009aaa:	e038      	b.n	8009b1e <UART_SetConfig+0x282>
 8009aac:	2302      	movs	r3, #2
 8009aae:	76fb      	strb	r3, [r7, #27]
 8009ab0:	e035      	b.n	8009b1e <UART_SetConfig+0x282>
 8009ab2:	2304      	movs	r3, #4
 8009ab4:	76fb      	strb	r3, [r7, #27]
 8009ab6:	e032      	b.n	8009b1e <UART_SetConfig+0x282>
 8009ab8:	2308      	movs	r3, #8
 8009aba:	76fb      	strb	r3, [r7, #27]
 8009abc:	e02f      	b.n	8009b1e <UART_SetConfig+0x282>
 8009abe:	2310      	movs	r3, #16
 8009ac0:	76fb      	strb	r3, [r7, #27]
 8009ac2:	e02c      	b.n	8009b1e <UART_SetConfig+0x282>
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	4a2d      	ldr	r2, [pc, #180]	; (8009b80 <UART_SetConfig+0x2e4>)
 8009aca:	4293      	cmp	r3, r2
 8009acc:	d125      	bne.n	8009b1a <UART_SetConfig+0x27e>
 8009ace:	4b2e      	ldr	r3, [pc, #184]	; (8009b88 <UART_SetConfig+0x2ec>)
 8009ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ad4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009ad8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009adc:	d017      	beq.n	8009b0e <UART_SetConfig+0x272>
 8009ade:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009ae2:	d817      	bhi.n	8009b14 <UART_SetConfig+0x278>
 8009ae4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ae8:	d00b      	beq.n	8009b02 <UART_SetConfig+0x266>
 8009aea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009aee:	d811      	bhi.n	8009b14 <UART_SetConfig+0x278>
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d003      	beq.n	8009afc <UART_SetConfig+0x260>
 8009af4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009af8:	d006      	beq.n	8009b08 <UART_SetConfig+0x26c>
 8009afa:	e00b      	b.n	8009b14 <UART_SetConfig+0x278>
 8009afc:	2300      	movs	r3, #0
 8009afe:	76fb      	strb	r3, [r7, #27]
 8009b00:	e00d      	b.n	8009b1e <UART_SetConfig+0x282>
 8009b02:	2302      	movs	r3, #2
 8009b04:	76fb      	strb	r3, [r7, #27]
 8009b06:	e00a      	b.n	8009b1e <UART_SetConfig+0x282>
 8009b08:	2304      	movs	r3, #4
 8009b0a:	76fb      	strb	r3, [r7, #27]
 8009b0c:	e007      	b.n	8009b1e <UART_SetConfig+0x282>
 8009b0e:	2308      	movs	r3, #8
 8009b10:	76fb      	strb	r3, [r7, #27]
 8009b12:	e004      	b.n	8009b1e <UART_SetConfig+0x282>
 8009b14:	2310      	movs	r3, #16
 8009b16:	76fb      	strb	r3, [r7, #27]
 8009b18:	e001      	b.n	8009b1e <UART_SetConfig+0x282>
 8009b1a:	2310      	movs	r3, #16
 8009b1c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	4a17      	ldr	r2, [pc, #92]	; (8009b80 <UART_SetConfig+0x2e4>)
 8009b24:	4293      	cmp	r3, r2
 8009b26:	f040 8087 	bne.w	8009c38 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009b2a:	7efb      	ldrb	r3, [r7, #27]
 8009b2c:	2b08      	cmp	r3, #8
 8009b2e:	d837      	bhi.n	8009ba0 <UART_SetConfig+0x304>
 8009b30:	a201      	add	r2, pc, #4	; (adr r2, 8009b38 <UART_SetConfig+0x29c>)
 8009b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b36:	bf00      	nop
 8009b38:	08009b5d 	.word	0x08009b5d
 8009b3c:	08009ba1 	.word	0x08009ba1
 8009b40:	08009b65 	.word	0x08009b65
 8009b44:	08009ba1 	.word	0x08009ba1
 8009b48:	08009b6b 	.word	0x08009b6b
 8009b4c:	08009ba1 	.word	0x08009ba1
 8009b50:	08009ba1 	.word	0x08009ba1
 8009b54:	08009ba1 	.word	0x08009ba1
 8009b58:	08009b73 	.word	0x08009b73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009b5c:	f7fc faa2 	bl	80060a4 <HAL_RCC_GetPCLK1Freq>
 8009b60:	6178      	str	r0, [r7, #20]
        break;
 8009b62:	e022      	b.n	8009baa <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009b64:	4b0d      	ldr	r3, [pc, #52]	; (8009b9c <UART_SetConfig+0x300>)
 8009b66:	617b      	str	r3, [r7, #20]
        break;
 8009b68:	e01f      	b.n	8009baa <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009b6a:	f7fc fa03 	bl	8005f74 <HAL_RCC_GetSysClockFreq>
 8009b6e:	6178      	str	r0, [r7, #20]
        break;
 8009b70:	e01b      	b.n	8009baa <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b76:	617b      	str	r3, [r7, #20]
        break;
 8009b78:	e017      	b.n	8009baa <UART_SetConfig+0x30e>
 8009b7a:	bf00      	nop
 8009b7c:	efff69f3 	.word	0xefff69f3
 8009b80:	40008000 	.word	0x40008000
 8009b84:	40013800 	.word	0x40013800
 8009b88:	40021000 	.word	0x40021000
 8009b8c:	40004400 	.word	0x40004400
 8009b90:	40004800 	.word	0x40004800
 8009b94:	40004c00 	.word	0x40004c00
 8009b98:	40005000 	.word	0x40005000
 8009b9c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	76bb      	strb	r3, [r7, #26]
        break;
 8009ba8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009baa:	697b      	ldr	r3, [r7, #20]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	f000 80f1 	beq.w	8009d94 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	685a      	ldr	r2, [r3, #4]
 8009bb6:	4613      	mov	r3, r2
 8009bb8:	005b      	lsls	r3, r3, #1
 8009bba:	4413      	add	r3, r2
 8009bbc:	697a      	ldr	r2, [r7, #20]
 8009bbe:	429a      	cmp	r2, r3
 8009bc0:	d305      	bcc.n	8009bce <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	685b      	ldr	r3, [r3, #4]
 8009bc6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009bc8:	697a      	ldr	r2, [r7, #20]
 8009bca:	429a      	cmp	r2, r3
 8009bcc:	d902      	bls.n	8009bd4 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8009bce:	2301      	movs	r3, #1
 8009bd0:	76bb      	strb	r3, [r7, #26]
 8009bd2:	e0df      	b.n	8009d94 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8009bd4:	697b      	ldr	r3, [r7, #20]
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	f04f 0100 	mov.w	r1, #0
 8009bdc:	f04f 0200 	mov.w	r2, #0
 8009be0:	f04f 0300 	mov.w	r3, #0
 8009be4:	020b      	lsls	r3, r1, #8
 8009be6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009bea:	0202      	lsls	r2, r0, #8
 8009bec:	6879      	ldr	r1, [r7, #4]
 8009bee:	6849      	ldr	r1, [r1, #4]
 8009bf0:	0849      	lsrs	r1, r1, #1
 8009bf2:	4608      	mov	r0, r1
 8009bf4:	f04f 0100 	mov.w	r1, #0
 8009bf8:	1814      	adds	r4, r2, r0
 8009bfa:	eb43 0501 	adc.w	r5, r3, r1
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	685b      	ldr	r3, [r3, #4]
 8009c02:	461a      	mov	r2, r3
 8009c04:	f04f 0300 	mov.w	r3, #0
 8009c08:	4620      	mov	r0, r4
 8009c0a:	4629      	mov	r1, r5
 8009c0c:	f7f6 ffcc 	bl	8000ba8 <__aeabi_uldivmod>
 8009c10:	4602      	mov	r2, r0
 8009c12:	460b      	mov	r3, r1
 8009c14:	4613      	mov	r3, r2
 8009c16:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009c18:	693b      	ldr	r3, [r7, #16]
 8009c1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009c1e:	d308      	bcc.n	8009c32 <UART_SetConfig+0x396>
 8009c20:	693b      	ldr	r3, [r7, #16]
 8009c22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c26:	d204      	bcs.n	8009c32 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	693a      	ldr	r2, [r7, #16]
 8009c2e:	60da      	str	r2, [r3, #12]
 8009c30:	e0b0      	b.n	8009d94 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8009c32:	2301      	movs	r3, #1
 8009c34:	76bb      	strb	r3, [r7, #26]
 8009c36:	e0ad      	b.n	8009d94 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	69db      	ldr	r3, [r3, #28]
 8009c3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c40:	d15b      	bne.n	8009cfa <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8009c42:	7efb      	ldrb	r3, [r7, #27]
 8009c44:	2b08      	cmp	r3, #8
 8009c46:	d828      	bhi.n	8009c9a <UART_SetConfig+0x3fe>
 8009c48:	a201      	add	r2, pc, #4	; (adr r2, 8009c50 <UART_SetConfig+0x3b4>)
 8009c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c4e:	bf00      	nop
 8009c50:	08009c75 	.word	0x08009c75
 8009c54:	08009c7d 	.word	0x08009c7d
 8009c58:	08009c85 	.word	0x08009c85
 8009c5c:	08009c9b 	.word	0x08009c9b
 8009c60:	08009c8b 	.word	0x08009c8b
 8009c64:	08009c9b 	.word	0x08009c9b
 8009c68:	08009c9b 	.word	0x08009c9b
 8009c6c:	08009c9b 	.word	0x08009c9b
 8009c70:	08009c93 	.word	0x08009c93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c74:	f7fc fa16 	bl	80060a4 <HAL_RCC_GetPCLK1Freq>
 8009c78:	6178      	str	r0, [r7, #20]
        break;
 8009c7a:	e013      	b.n	8009ca4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c7c:	f7fc fa28 	bl	80060d0 <HAL_RCC_GetPCLK2Freq>
 8009c80:	6178      	str	r0, [r7, #20]
        break;
 8009c82:	e00f      	b.n	8009ca4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009c84:	4b49      	ldr	r3, [pc, #292]	; (8009dac <UART_SetConfig+0x510>)
 8009c86:	617b      	str	r3, [r7, #20]
        break;
 8009c88:	e00c      	b.n	8009ca4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009c8a:	f7fc f973 	bl	8005f74 <HAL_RCC_GetSysClockFreq>
 8009c8e:	6178      	str	r0, [r7, #20]
        break;
 8009c90:	e008      	b.n	8009ca4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c96:	617b      	str	r3, [r7, #20]
        break;
 8009c98:	e004      	b.n	8009ca4 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	76bb      	strb	r3, [r7, #26]
        break;
 8009ca2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009ca4:	697b      	ldr	r3, [r7, #20]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d074      	beq.n	8009d94 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009caa:	697b      	ldr	r3, [r7, #20]
 8009cac:	005a      	lsls	r2, r3, #1
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	685b      	ldr	r3, [r3, #4]
 8009cb2:	085b      	lsrs	r3, r3, #1
 8009cb4:	441a      	add	r2, r3
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	685b      	ldr	r3, [r3, #4]
 8009cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cbe:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009cc0:	693b      	ldr	r3, [r7, #16]
 8009cc2:	2b0f      	cmp	r3, #15
 8009cc4:	d916      	bls.n	8009cf4 <UART_SetConfig+0x458>
 8009cc6:	693b      	ldr	r3, [r7, #16]
 8009cc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ccc:	d212      	bcs.n	8009cf4 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009cce:	693b      	ldr	r3, [r7, #16]
 8009cd0:	b29b      	uxth	r3, r3
 8009cd2:	f023 030f 	bic.w	r3, r3, #15
 8009cd6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009cd8:	693b      	ldr	r3, [r7, #16]
 8009cda:	085b      	lsrs	r3, r3, #1
 8009cdc:	b29b      	uxth	r3, r3
 8009cde:	f003 0307 	and.w	r3, r3, #7
 8009ce2:	b29a      	uxth	r2, r3
 8009ce4:	89fb      	ldrh	r3, [r7, #14]
 8009ce6:	4313      	orrs	r3, r2
 8009ce8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	89fa      	ldrh	r2, [r7, #14]
 8009cf0:	60da      	str	r2, [r3, #12]
 8009cf2:	e04f      	b.n	8009d94 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8009cf4:	2301      	movs	r3, #1
 8009cf6:	76bb      	strb	r3, [r7, #26]
 8009cf8:	e04c      	b.n	8009d94 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009cfa:	7efb      	ldrb	r3, [r7, #27]
 8009cfc:	2b08      	cmp	r3, #8
 8009cfe:	d828      	bhi.n	8009d52 <UART_SetConfig+0x4b6>
 8009d00:	a201      	add	r2, pc, #4	; (adr r2, 8009d08 <UART_SetConfig+0x46c>)
 8009d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d06:	bf00      	nop
 8009d08:	08009d2d 	.word	0x08009d2d
 8009d0c:	08009d35 	.word	0x08009d35
 8009d10:	08009d3d 	.word	0x08009d3d
 8009d14:	08009d53 	.word	0x08009d53
 8009d18:	08009d43 	.word	0x08009d43
 8009d1c:	08009d53 	.word	0x08009d53
 8009d20:	08009d53 	.word	0x08009d53
 8009d24:	08009d53 	.word	0x08009d53
 8009d28:	08009d4b 	.word	0x08009d4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009d2c:	f7fc f9ba 	bl	80060a4 <HAL_RCC_GetPCLK1Freq>
 8009d30:	6178      	str	r0, [r7, #20]
        break;
 8009d32:	e013      	b.n	8009d5c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009d34:	f7fc f9cc 	bl	80060d0 <HAL_RCC_GetPCLK2Freq>
 8009d38:	6178      	str	r0, [r7, #20]
        break;
 8009d3a:	e00f      	b.n	8009d5c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009d3c:	4b1b      	ldr	r3, [pc, #108]	; (8009dac <UART_SetConfig+0x510>)
 8009d3e:	617b      	str	r3, [r7, #20]
        break;
 8009d40:	e00c      	b.n	8009d5c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009d42:	f7fc f917 	bl	8005f74 <HAL_RCC_GetSysClockFreq>
 8009d46:	6178      	str	r0, [r7, #20]
        break;
 8009d48:	e008      	b.n	8009d5c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009d4e:	617b      	str	r3, [r7, #20]
        break;
 8009d50:	e004      	b.n	8009d5c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8009d52:	2300      	movs	r3, #0
 8009d54:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8009d56:	2301      	movs	r3, #1
 8009d58:	76bb      	strb	r3, [r7, #26]
        break;
 8009d5a:	bf00      	nop
    }

    if (pclk != 0U)
 8009d5c:	697b      	ldr	r3, [r7, #20]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d018      	beq.n	8009d94 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	685b      	ldr	r3, [r3, #4]
 8009d66:	085a      	lsrs	r2, r3, #1
 8009d68:	697b      	ldr	r3, [r7, #20]
 8009d6a:	441a      	add	r2, r3
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	685b      	ldr	r3, [r3, #4]
 8009d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d74:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d76:	693b      	ldr	r3, [r7, #16]
 8009d78:	2b0f      	cmp	r3, #15
 8009d7a:	d909      	bls.n	8009d90 <UART_SetConfig+0x4f4>
 8009d7c:	693b      	ldr	r3, [r7, #16]
 8009d7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d82:	d205      	bcs.n	8009d90 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009d84:	693b      	ldr	r3, [r7, #16]
 8009d86:	b29a      	uxth	r2, r3
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	60da      	str	r2, [r3, #12]
 8009d8e:	e001      	b.n	8009d94 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8009d90:	2301      	movs	r3, #1
 8009d92:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2200      	movs	r2, #0
 8009d98:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009da0:	7ebb      	ldrb	r3, [r7, #26]
}
 8009da2:	4618      	mov	r0, r3
 8009da4:	3720      	adds	r7, #32
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bdb0      	pop	{r4, r5, r7, pc}
 8009daa:	bf00      	nop
 8009dac:	00f42400 	.word	0x00f42400

08009db0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009db0:	b480      	push	{r7}
 8009db2:	b083      	sub	sp, #12
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dbc:	f003 0301 	and.w	r3, r3, #1
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d00a      	beq.n	8009dda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	685b      	ldr	r3, [r3, #4]
 8009dca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	430a      	orrs	r2, r1
 8009dd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dde:	f003 0302 	and.w	r3, r3, #2
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d00a      	beq.n	8009dfc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	685b      	ldr	r3, [r3, #4]
 8009dec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	430a      	orrs	r2, r1
 8009dfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e00:	f003 0304 	and.w	r3, r3, #4
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d00a      	beq.n	8009e1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	685b      	ldr	r3, [r3, #4]
 8009e0e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	430a      	orrs	r2, r1
 8009e1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e22:	f003 0308 	and.w	r3, r3, #8
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d00a      	beq.n	8009e40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	685b      	ldr	r3, [r3, #4]
 8009e30:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	430a      	orrs	r2, r1
 8009e3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e44:	f003 0310 	and.w	r3, r3, #16
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d00a      	beq.n	8009e62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	689b      	ldr	r3, [r3, #8]
 8009e52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	430a      	orrs	r2, r1
 8009e60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e66:	f003 0320 	and.w	r3, r3, #32
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d00a      	beq.n	8009e84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	689b      	ldr	r3, [r3, #8]
 8009e74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	430a      	orrs	r2, r1
 8009e82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d01a      	beq.n	8009ec6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	685b      	ldr	r3, [r3, #4]
 8009e96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	430a      	orrs	r2, r1
 8009ea4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009eae:	d10a      	bne.n	8009ec6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	685b      	ldr	r3, [r3, #4]
 8009eb6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	430a      	orrs	r2, r1
 8009ec4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d00a      	beq.n	8009ee8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	685b      	ldr	r3, [r3, #4]
 8009ed8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	430a      	orrs	r2, r1
 8009ee6:	605a      	str	r2, [r3, #4]
  }
}
 8009ee8:	bf00      	nop
 8009eea:	370c      	adds	r7, #12
 8009eec:	46bd      	mov	sp, r7
 8009eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef2:	4770      	bx	lr

08009ef4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b086      	sub	sp, #24
 8009ef8:	af02      	add	r7, sp, #8
 8009efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2200      	movs	r2, #0
 8009f00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009f04:	f7f9 fb26 	bl	8003554 <HAL_GetTick>
 8009f08:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	f003 0308 	and.w	r3, r3, #8
 8009f14:	2b08      	cmp	r3, #8
 8009f16:	d10e      	bne.n	8009f36 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009f1c:	9300      	str	r3, [sp, #0]
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	2200      	movs	r2, #0
 8009f22:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	f000 f82d 	bl	8009f86 <UART_WaitOnFlagUntilTimeout>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d001      	beq.n	8009f36 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009f32:	2303      	movs	r3, #3
 8009f34:	e023      	b.n	8009f7e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f003 0304 	and.w	r3, r3, #4
 8009f40:	2b04      	cmp	r3, #4
 8009f42:	d10e      	bne.n	8009f62 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009f48:	9300      	str	r3, [sp, #0]
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009f52:	6878      	ldr	r0, [r7, #4]
 8009f54:	f000 f817 	bl	8009f86 <UART_WaitOnFlagUntilTimeout>
 8009f58:	4603      	mov	r3, r0
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d001      	beq.n	8009f62 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009f5e:	2303      	movs	r3, #3
 8009f60:	e00d      	b.n	8009f7e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2220      	movs	r2, #32
 8009f66:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2220      	movs	r2, #32
 8009f6c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2200      	movs	r2, #0
 8009f72:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2200      	movs	r2, #0
 8009f78:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009f7c:	2300      	movs	r3, #0
}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	3710      	adds	r7, #16
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}

08009f86 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009f86:	b580      	push	{r7, lr}
 8009f88:	b09c      	sub	sp, #112	; 0x70
 8009f8a:	af00      	add	r7, sp, #0
 8009f8c:	60f8      	str	r0, [r7, #12]
 8009f8e:	60b9      	str	r1, [r7, #8]
 8009f90:	603b      	str	r3, [r7, #0]
 8009f92:	4613      	mov	r3, r2
 8009f94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f96:	e0a5      	b.n	800a0e4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f9e:	f000 80a1 	beq.w	800a0e4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009fa2:	f7f9 fad7 	bl	8003554 <HAL_GetTick>
 8009fa6:	4602      	mov	r2, r0
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	1ad3      	subs	r3, r2, r3
 8009fac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009fae:	429a      	cmp	r2, r3
 8009fb0:	d302      	bcc.n	8009fb8 <UART_WaitOnFlagUntilTimeout+0x32>
 8009fb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d13e      	bne.n	800a036 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009fc0:	e853 3f00 	ldrex	r3, [r3]
 8009fc4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009fc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fc8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009fcc:	667b      	str	r3, [r7, #100]	; 0x64
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	461a      	mov	r2, r3
 8009fd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009fd6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009fd8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fda:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009fdc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009fde:	e841 2300 	strex	r3, r2, [r1]
 8009fe2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009fe4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d1e6      	bne.n	8009fb8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	3308      	adds	r3, #8
 8009ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ff4:	e853 3f00 	ldrex	r3, [r3]
 8009ff8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ffc:	f023 0301 	bic.w	r3, r3, #1
 800a000:	663b      	str	r3, [r7, #96]	; 0x60
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	3308      	adds	r3, #8
 800a008:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a00a:	64ba      	str	r2, [r7, #72]	; 0x48
 800a00c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a00e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a010:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a012:	e841 2300 	strex	r3, r2, [r1]
 800a016:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a018:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d1e5      	bne.n	8009fea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	2220      	movs	r2, #32
 800a022:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	2220      	movs	r2, #32
 800a028:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	2200      	movs	r2, #0
 800a02e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800a032:	2303      	movs	r3, #3
 800a034:	e067      	b.n	800a106 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f003 0304 	and.w	r3, r3, #4
 800a040:	2b00      	cmp	r3, #0
 800a042:	d04f      	beq.n	800a0e4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	69db      	ldr	r3, [r3, #28]
 800a04a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a04e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a052:	d147      	bne.n	800a0e4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a05c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a066:	e853 3f00 	ldrex	r3, [r3]
 800a06a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a06c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a06e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a072:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	461a      	mov	r2, r3
 800a07a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a07c:	637b      	str	r3, [r7, #52]	; 0x34
 800a07e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a080:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a082:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a084:	e841 2300 	strex	r3, r2, [r1]
 800a088:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a08a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d1e6      	bne.n	800a05e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	3308      	adds	r3, #8
 800a096:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a098:	697b      	ldr	r3, [r7, #20]
 800a09a:	e853 3f00 	ldrex	r3, [r3]
 800a09e:	613b      	str	r3, [r7, #16]
   return(result);
 800a0a0:	693b      	ldr	r3, [r7, #16]
 800a0a2:	f023 0301 	bic.w	r3, r3, #1
 800a0a6:	66bb      	str	r3, [r7, #104]	; 0x68
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	3308      	adds	r3, #8
 800a0ae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a0b0:	623a      	str	r2, [r7, #32]
 800a0b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0b4:	69f9      	ldr	r1, [r7, #28]
 800a0b6:	6a3a      	ldr	r2, [r7, #32]
 800a0b8:	e841 2300 	strex	r3, r2, [r1]
 800a0bc:	61bb      	str	r3, [r7, #24]
   return(result);
 800a0be:	69bb      	ldr	r3, [r7, #24]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d1e5      	bne.n	800a090 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	2220      	movs	r2, #32
 800a0c8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	2220      	movs	r2, #32
 800a0ce:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	2220      	movs	r2, #32
 800a0d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	2200      	movs	r2, #0
 800a0dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800a0e0:	2303      	movs	r3, #3
 800a0e2:	e010      	b.n	800a106 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	69da      	ldr	r2, [r3, #28]
 800a0ea:	68bb      	ldr	r3, [r7, #8]
 800a0ec:	4013      	ands	r3, r2
 800a0ee:	68ba      	ldr	r2, [r7, #8]
 800a0f0:	429a      	cmp	r2, r3
 800a0f2:	bf0c      	ite	eq
 800a0f4:	2301      	moveq	r3, #1
 800a0f6:	2300      	movne	r3, #0
 800a0f8:	b2db      	uxtb	r3, r3
 800a0fa:	461a      	mov	r2, r3
 800a0fc:	79fb      	ldrb	r3, [r7, #7]
 800a0fe:	429a      	cmp	r2, r3
 800a100:	f43f af4a 	beq.w	8009f98 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a104:	2300      	movs	r3, #0
}
 800a106:	4618      	mov	r0, r3
 800a108:	3770      	adds	r7, #112	; 0x70
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}
	...

0800a110 <__errno>:
 800a110:	4b01      	ldr	r3, [pc, #4]	; (800a118 <__errno+0x8>)
 800a112:	6818      	ldr	r0, [r3, #0]
 800a114:	4770      	bx	lr
 800a116:	bf00      	nop
 800a118:	20000090 	.word	0x20000090

0800a11c <__libc_init_array>:
 800a11c:	b570      	push	{r4, r5, r6, lr}
 800a11e:	4d0d      	ldr	r5, [pc, #52]	; (800a154 <__libc_init_array+0x38>)
 800a120:	4c0d      	ldr	r4, [pc, #52]	; (800a158 <__libc_init_array+0x3c>)
 800a122:	1b64      	subs	r4, r4, r5
 800a124:	10a4      	asrs	r4, r4, #2
 800a126:	2600      	movs	r6, #0
 800a128:	42a6      	cmp	r6, r4
 800a12a:	d109      	bne.n	800a140 <__libc_init_array+0x24>
 800a12c:	4d0b      	ldr	r5, [pc, #44]	; (800a15c <__libc_init_array+0x40>)
 800a12e:	4c0c      	ldr	r4, [pc, #48]	; (800a160 <__libc_init_array+0x44>)
 800a130:	f002 ff16 	bl	800cf60 <_init>
 800a134:	1b64      	subs	r4, r4, r5
 800a136:	10a4      	asrs	r4, r4, #2
 800a138:	2600      	movs	r6, #0
 800a13a:	42a6      	cmp	r6, r4
 800a13c:	d105      	bne.n	800a14a <__libc_init_array+0x2e>
 800a13e:	bd70      	pop	{r4, r5, r6, pc}
 800a140:	f855 3b04 	ldr.w	r3, [r5], #4
 800a144:	4798      	blx	r3
 800a146:	3601      	adds	r6, #1
 800a148:	e7ee      	b.n	800a128 <__libc_init_array+0xc>
 800a14a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a14e:	4798      	blx	r3
 800a150:	3601      	adds	r6, #1
 800a152:	e7f2      	b.n	800a13a <__libc_init_array+0x1e>
 800a154:	0800d3d4 	.word	0x0800d3d4
 800a158:	0800d3d4 	.word	0x0800d3d4
 800a15c:	0800d3d4 	.word	0x0800d3d4
 800a160:	0800d3d8 	.word	0x0800d3d8

0800a164 <memset>:
 800a164:	4402      	add	r2, r0
 800a166:	4603      	mov	r3, r0
 800a168:	4293      	cmp	r3, r2
 800a16a:	d100      	bne.n	800a16e <memset+0xa>
 800a16c:	4770      	bx	lr
 800a16e:	f803 1b01 	strb.w	r1, [r3], #1
 800a172:	e7f9      	b.n	800a168 <memset+0x4>

0800a174 <__cvt>:
 800a174:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a178:	ec55 4b10 	vmov	r4, r5, d0
 800a17c:	2d00      	cmp	r5, #0
 800a17e:	460e      	mov	r6, r1
 800a180:	4619      	mov	r1, r3
 800a182:	462b      	mov	r3, r5
 800a184:	bfbb      	ittet	lt
 800a186:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a18a:	461d      	movlt	r5, r3
 800a18c:	2300      	movge	r3, #0
 800a18e:	232d      	movlt	r3, #45	; 0x2d
 800a190:	700b      	strb	r3, [r1, #0]
 800a192:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a194:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a198:	4691      	mov	r9, r2
 800a19a:	f023 0820 	bic.w	r8, r3, #32
 800a19e:	bfbc      	itt	lt
 800a1a0:	4622      	movlt	r2, r4
 800a1a2:	4614      	movlt	r4, r2
 800a1a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a1a8:	d005      	beq.n	800a1b6 <__cvt+0x42>
 800a1aa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a1ae:	d100      	bne.n	800a1b2 <__cvt+0x3e>
 800a1b0:	3601      	adds	r6, #1
 800a1b2:	2102      	movs	r1, #2
 800a1b4:	e000      	b.n	800a1b8 <__cvt+0x44>
 800a1b6:	2103      	movs	r1, #3
 800a1b8:	ab03      	add	r3, sp, #12
 800a1ba:	9301      	str	r3, [sp, #4]
 800a1bc:	ab02      	add	r3, sp, #8
 800a1be:	9300      	str	r3, [sp, #0]
 800a1c0:	ec45 4b10 	vmov	d0, r4, r5
 800a1c4:	4653      	mov	r3, sl
 800a1c6:	4632      	mov	r2, r6
 800a1c8:	f000 fce2 	bl	800ab90 <_dtoa_r>
 800a1cc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a1d0:	4607      	mov	r7, r0
 800a1d2:	d102      	bne.n	800a1da <__cvt+0x66>
 800a1d4:	f019 0f01 	tst.w	r9, #1
 800a1d8:	d022      	beq.n	800a220 <__cvt+0xac>
 800a1da:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a1de:	eb07 0906 	add.w	r9, r7, r6
 800a1e2:	d110      	bne.n	800a206 <__cvt+0x92>
 800a1e4:	783b      	ldrb	r3, [r7, #0]
 800a1e6:	2b30      	cmp	r3, #48	; 0x30
 800a1e8:	d10a      	bne.n	800a200 <__cvt+0x8c>
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	4620      	mov	r0, r4
 800a1f0:	4629      	mov	r1, r5
 800a1f2:	f7f6 fc69 	bl	8000ac8 <__aeabi_dcmpeq>
 800a1f6:	b918      	cbnz	r0, 800a200 <__cvt+0x8c>
 800a1f8:	f1c6 0601 	rsb	r6, r6, #1
 800a1fc:	f8ca 6000 	str.w	r6, [sl]
 800a200:	f8da 3000 	ldr.w	r3, [sl]
 800a204:	4499      	add	r9, r3
 800a206:	2200      	movs	r2, #0
 800a208:	2300      	movs	r3, #0
 800a20a:	4620      	mov	r0, r4
 800a20c:	4629      	mov	r1, r5
 800a20e:	f7f6 fc5b 	bl	8000ac8 <__aeabi_dcmpeq>
 800a212:	b108      	cbz	r0, 800a218 <__cvt+0xa4>
 800a214:	f8cd 900c 	str.w	r9, [sp, #12]
 800a218:	2230      	movs	r2, #48	; 0x30
 800a21a:	9b03      	ldr	r3, [sp, #12]
 800a21c:	454b      	cmp	r3, r9
 800a21e:	d307      	bcc.n	800a230 <__cvt+0xbc>
 800a220:	9b03      	ldr	r3, [sp, #12]
 800a222:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a224:	1bdb      	subs	r3, r3, r7
 800a226:	4638      	mov	r0, r7
 800a228:	6013      	str	r3, [r2, #0]
 800a22a:	b004      	add	sp, #16
 800a22c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a230:	1c59      	adds	r1, r3, #1
 800a232:	9103      	str	r1, [sp, #12]
 800a234:	701a      	strb	r2, [r3, #0]
 800a236:	e7f0      	b.n	800a21a <__cvt+0xa6>

0800a238 <__exponent>:
 800a238:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a23a:	4603      	mov	r3, r0
 800a23c:	2900      	cmp	r1, #0
 800a23e:	bfb8      	it	lt
 800a240:	4249      	neglt	r1, r1
 800a242:	f803 2b02 	strb.w	r2, [r3], #2
 800a246:	bfb4      	ite	lt
 800a248:	222d      	movlt	r2, #45	; 0x2d
 800a24a:	222b      	movge	r2, #43	; 0x2b
 800a24c:	2909      	cmp	r1, #9
 800a24e:	7042      	strb	r2, [r0, #1]
 800a250:	dd2a      	ble.n	800a2a8 <__exponent+0x70>
 800a252:	f10d 0407 	add.w	r4, sp, #7
 800a256:	46a4      	mov	ip, r4
 800a258:	270a      	movs	r7, #10
 800a25a:	46a6      	mov	lr, r4
 800a25c:	460a      	mov	r2, r1
 800a25e:	fb91 f6f7 	sdiv	r6, r1, r7
 800a262:	fb07 1516 	mls	r5, r7, r6, r1
 800a266:	3530      	adds	r5, #48	; 0x30
 800a268:	2a63      	cmp	r2, #99	; 0x63
 800a26a:	f104 34ff 	add.w	r4, r4, #4294967295
 800a26e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a272:	4631      	mov	r1, r6
 800a274:	dcf1      	bgt.n	800a25a <__exponent+0x22>
 800a276:	3130      	adds	r1, #48	; 0x30
 800a278:	f1ae 0502 	sub.w	r5, lr, #2
 800a27c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a280:	1c44      	adds	r4, r0, #1
 800a282:	4629      	mov	r1, r5
 800a284:	4561      	cmp	r1, ip
 800a286:	d30a      	bcc.n	800a29e <__exponent+0x66>
 800a288:	f10d 0209 	add.w	r2, sp, #9
 800a28c:	eba2 020e 	sub.w	r2, r2, lr
 800a290:	4565      	cmp	r5, ip
 800a292:	bf88      	it	hi
 800a294:	2200      	movhi	r2, #0
 800a296:	4413      	add	r3, r2
 800a298:	1a18      	subs	r0, r3, r0
 800a29a:	b003      	add	sp, #12
 800a29c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a29e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a2a2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a2a6:	e7ed      	b.n	800a284 <__exponent+0x4c>
 800a2a8:	2330      	movs	r3, #48	; 0x30
 800a2aa:	3130      	adds	r1, #48	; 0x30
 800a2ac:	7083      	strb	r3, [r0, #2]
 800a2ae:	70c1      	strb	r1, [r0, #3]
 800a2b0:	1d03      	adds	r3, r0, #4
 800a2b2:	e7f1      	b.n	800a298 <__exponent+0x60>

0800a2b4 <_printf_float>:
 800a2b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2b8:	ed2d 8b02 	vpush	{d8}
 800a2bc:	b08d      	sub	sp, #52	; 0x34
 800a2be:	460c      	mov	r4, r1
 800a2c0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a2c4:	4616      	mov	r6, r2
 800a2c6:	461f      	mov	r7, r3
 800a2c8:	4605      	mov	r5, r0
 800a2ca:	f001 fb43 	bl	800b954 <_localeconv_r>
 800a2ce:	f8d0 a000 	ldr.w	sl, [r0]
 800a2d2:	4650      	mov	r0, sl
 800a2d4:	f7f5 ff7c 	bl	80001d0 <strlen>
 800a2d8:	2300      	movs	r3, #0
 800a2da:	930a      	str	r3, [sp, #40]	; 0x28
 800a2dc:	6823      	ldr	r3, [r4, #0]
 800a2de:	9305      	str	r3, [sp, #20]
 800a2e0:	f8d8 3000 	ldr.w	r3, [r8]
 800a2e4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a2e8:	3307      	adds	r3, #7
 800a2ea:	f023 0307 	bic.w	r3, r3, #7
 800a2ee:	f103 0208 	add.w	r2, r3, #8
 800a2f2:	f8c8 2000 	str.w	r2, [r8]
 800a2f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2fa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a2fe:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a302:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a306:	9307      	str	r3, [sp, #28]
 800a308:	f8cd 8018 	str.w	r8, [sp, #24]
 800a30c:	ee08 0a10 	vmov	s16, r0
 800a310:	4b9f      	ldr	r3, [pc, #636]	; (800a590 <_printf_float+0x2dc>)
 800a312:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a316:	f04f 32ff 	mov.w	r2, #4294967295
 800a31a:	f7f6 fc07 	bl	8000b2c <__aeabi_dcmpun>
 800a31e:	bb88      	cbnz	r0, 800a384 <_printf_float+0xd0>
 800a320:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a324:	4b9a      	ldr	r3, [pc, #616]	; (800a590 <_printf_float+0x2dc>)
 800a326:	f04f 32ff 	mov.w	r2, #4294967295
 800a32a:	f7f6 fbe1 	bl	8000af0 <__aeabi_dcmple>
 800a32e:	bb48      	cbnz	r0, 800a384 <_printf_float+0xd0>
 800a330:	2200      	movs	r2, #0
 800a332:	2300      	movs	r3, #0
 800a334:	4640      	mov	r0, r8
 800a336:	4649      	mov	r1, r9
 800a338:	f7f6 fbd0 	bl	8000adc <__aeabi_dcmplt>
 800a33c:	b110      	cbz	r0, 800a344 <_printf_float+0x90>
 800a33e:	232d      	movs	r3, #45	; 0x2d
 800a340:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a344:	4b93      	ldr	r3, [pc, #588]	; (800a594 <_printf_float+0x2e0>)
 800a346:	4894      	ldr	r0, [pc, #592]	; (800a598 <_printf_float+0x2e4>)
 800a348:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a34c:	bf94      	ite	ls
 800a34e:	4698      	movls	r8, r3
 800a350:	4680      	movhi	r8, r0
 800a352:	2303      	movs	r3, #3
 800a354:	6123      	str	r3, [r4, #16]
 800a356:	9b05      	ldr	r3, [sp, #20]
 800a358:	f023 0204 	bic.w	r2, r3, #4
 800a35c:	6022      	str	r2, [r4, #0]
 800a35e:	f04f 0900 	mov.w	r9, #0
 800a362:	9700      	str	r7, [sp, #0]
 800a364:	4633      	mov	r3, r6
 800a366:	aa0b      	add	r2, sp, #44	; 0x2c
 800a368:	4621      	mov	r1, r4
 800a36a:	4628      	mov	r0, r5
 800a36c:	f000 f9d8 	bl	800a720 <_printf_common>
 800a370:	3001      	adds	r0, #1
 800a372:	f040 8090 	bne.w	800a496 <_printf_float+0x1e2>
 800a376:	f04f 30ff 	mov.w	r0, #4294967295
 800a37a:	b00d      	add	sp, #52	; 0x34
 800a37c:	ecbd 8b02 	vpop	{d8}
 800a380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a384:	4642      	mov	r2, r8
 800a386:	464b      	mov	r3, r9
 800a388:	4640      	mov	r0, r8
 800a38a:	4649      	mov	r1, r9
 800a38c:	f7f6 fbce 	bl	8000b2c <__aeabi_dcmpun>
 800a390:	b140      	cbz	r0, 800a3a4 <_printf_float+0xf0>
 800a392:	464b      	mov	r3, r9
 800a394:	2b00      	cmp	r3, #0
 800a396:	bfbc      	itt	lt
 800a398:	232d      	movlt	r3, #45	; 0x2d
 800a39a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a39e:	487f      	ldr	r0, [pc, #508]	; (800a59c <_printf_float+0x2e8>)
 800a3a0:	4b7f      	ldr	r3, [pc, #508]	; (800a5a0 <_printf_float+0x2ec>)
 800a3a2:	e7d1      	b.n	800a348 <_printf_float+0x94>
 800a3a4:	6863      	ldr	r3, [r4, #4]
 800a3a6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a3aa:	9206      	str	r2, [sp, #24]
 800a3ac:	1c5a      	adds	r2, r3, #1
 800a3ae:	d13f      	bne.n	800a430 <_printf_float+0x17c>
 800a3b0:	2306      	movs	r3, #6
 800a3b2:	6063      	str	r3, [r4, #4]
 800a3b4:	9b05      	ldr	r3, [sp, #20]
 800a3b6:	6861      	ldr	r1, [r4, #4]
 800a3b8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a3bc:	2300      	movs	r3, #0
 800a3be:	9303      	str	r3, [sp, #12]
 800a3c0:	ab0a      	add	r3, sp, #40	; 0x28
 800a3c2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a3c6:	ab09      	add	r3, sp, #36	; 0x24
 800a3c8:	ec49 8b10 	vmov	d0, r8, r9
 800a3cc:	9300      	str	r3, [sp, #0]
 800a3ce:	6022      	str	r2, [r4, #0]
 800a3d0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a3d4:	4628      	mov	r0, r5
 800a3d6:	f7ff fecd 	bl	800a174 <__cvt>
 800a3da:	9b06      	ldr	r3, [sp, #24]
 800a3dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a3de:	2b47      	cmp	r3, #71	; 0x47
 800a3e0:	4680      	mov	r8, r0
 800a3e2:	d108      	bne.n	800a3f6 <_printf_float+0x142>
 800a3e4:	1cc8      	adds	r0, r1, #3
 800a3e6:	db02      	blt.n	800a3ee <_printf_float+0x13a>
 800a3e8:	6863      	ldr	r3, [r4, #4]
 800a3ea:	4299      	cmp	r1, r3
 800a3ec:	dd41      	ble.n	800a472 <_printf_float+0x1be>
 800a3ee:	f1ab 0b02 	sub.w	fp, fp, #2
 800a3f2:	fa5f fb8b 	uxtb.w	fp, fp
 800a3f6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a3fa:	d820      	bhi.n	800a43e <_printf_float+0x18a>
 800a3fc:	3901      	subs	r1, #1
 800a3fe:	465a      	mov	r2, fp
 800a400:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a404:	9109      	str	r1, [sp, #36]	; 0x24
 800a406:	f7ff ff17 	bl	800a238 <__exponent>
 800a40a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a40c:	1813      	adds	r3, r2, r0
 800a40e:	2a01      	cmp	r2, #1
 800a410:	4681      	mov	r9, r0
 800a412:	6123      	str	r3, [r4, #16]
 800a414:	dc02      	bgt.n	800a41c <_printf_float+0x168>
 800a416:	6822      	ldr	r2, [r4, #0]
 800a418:	07d2      	lsls	r2, r2, #31
 800a41a:	d501      	bpl.n	800a420 <_printf_float+0x16c>
 800a41c:	3301      	adds	r3, #1
 800a41e:	6123      	str	r3, [r4, #16]
 800a420:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a424:	2b00      	cmp	r3, #0
 800a426:	d09c      	beq.n	800a362 <_printf_float+0xae>
 800a428:	232d      	movs	r3, #45	; 0x2d
 800a42a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a42e:	e798      	b.n	800a362 <_printf_float+0xae>
 800a430:	9a06      	ldr	r2, [sp, #24]
 800a432:	2a47      	cmp	r2, #71	; 0x47
 800a434:	d1be      	bne.n	800a3b4 <_printf_float+0x100>
 800a436:	2b00      	cmp	r3, #0
 800a438:	d1bc      	bne.n	800a3b4 <_printf_float+0x100>
 800a43a:	2301      	movs	r3, #1
 800a43c:	e7b9      	b.n	800a3b2 <_printf_float+0xfe>
 800a43e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a442:	d118      	bne.n	800a476 <_printf_float+0x1c2>
 800a444:	2900      	cmp	r1, #0
 800a446:	6863      	ldr	r3, [r4, #4]
 800a448:	dd0b      	ble.n	800a462 <_printf_float+0x1ae>
 800a44a:	6121      	str	r1, [r4, #16]
 800a44c:	b913      	cbnz	r3, 800a454 <_printf_float+0x1a0>
 800a44e:	6822      	ldr	r2, [r4, #0]
 800a450:	07d0      	lsls	r0, r2, #31
 800a452:	d502      	bpl.n	800a45a <_printf_float+0x1a6>
 800a454:	3301      	adds	r3, #1
 800a456:	440b      	add	r3, r1
 800a458:	6123      	str	r3, [r4, #16]
 800a45a:	65a1      	str	r1, [r4, #88]	; 0x58
 800a45c:	f04f 0900 	mov.w	r9, #0
 800a460:	e7de      	b.n	800a420 <_printf_float+0x16c>
 800a462:	b913      	cbnz	r3, 800a46a <_printf_float+0x1b6>
 800a464:	6822      	ldr	r2, [r4, #0]
 800a466:	07d2      	lsls	r2, r2, #31
 800a468:	d501      	bpl.n	800a46e <_printf_float+0x1ba>
 800a46a:	3302      	adds	r3, #2
 800a46c:	e7f4      	b.n	800a458 <_printf_float+0x1a4>
 800a46e:	2301      	movs	r3, #1
 800a470:	e7f2      	b.n	800a458 <_printf_float+0x1a4>
 800a472:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a476:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a478:	4299      	cmp	r1, r3
 800a47a:	db05      	blt.n	800a488 <_printf_float+0x1d4>
 800a47c:	6823      	ldr	r3, [r4, #0]
 800a47e:	6121      	str	r1, [r4, #16]
 800a480:	07d8      	lsls	r0, r3, #31
 800a482:	d5ea      	bpl.n	800a45a <_printf_float+0x1a6>
 800a484:	1c4b      	adds	r3, r1, #1
 800a486:	e7e7      	b.n	800a458 <_printf_float+0x1a4>
 800a488:	2900      	cmp	r1, #0
 800a48a:	bfd4      	ite	le
 800a48c:	f1c1 0202 	rsble	r2, r1, #2
 800a490:	2201      	movgt	r2, #1
 800a492:	4413      	add	r3, r2
 800a494:	e7e0      	b.n	800a458 <_printf_float+0x1a4>
 800a496:	6823      	ldr	r3, [r4, #0]
 800a498:	055a      	lsls	r2, r3, #21
 800a49a:	d407      	bmi.n	800a4ac <_printf_float+0x1f8>
 800a49c:	6923      	ldr	r3, [r4, #16]
 800a49e:	4642      	mov	r2, r8
 800a4a0:	4631      	mov	r1, r6
 800a4a2:	4628      	mov	r0, r5
 800a4a4:	47b8      	blx	r7
 800a4a6:	3001      	adds	r0, #1
 800a4a8:	d12c      	bne.n	800a504 <_printf_float+0x250>
 800a4aa:	e764      	b.n	800a376 <_printf_float+0xc2>
 800a4ac:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a4b0:	f240 80e0 	bls.w	800a674 <_printf_float+0x3c0>
 800a4b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	f7f6 fb04 	bl	8000ac8 <__aeabi_dcmpeq>
 800a4c0:	2800      	cmp	r0, #0
 800a4c2:	d034      	beq.n	800a52e <_printf_float+0x27a>
 800a4c4:	4a37      	ldr	r2, [pc, #220]	; (800a5a4 <_printf_float+0x2f0>)
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	4631      	mov	r1, r6
 800a4ca:	4628      	mov	r0, r5
 800a4cc:	47b8      	blx	r7
 800a4ce:	3001      	adds	r0, #1
 800a4d0:	f43f af51 	beq.w	800a376 <_printf_float+0xc2>
 800a4d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a4d8:	429a      	cmp	r2, r3
 800a4da:	db02      	blt.n	800a4e2 <_printf_float+0x22e>
 800a4dc:	6823      	ldr	r3, [r4, #0]
 800a4de:	07d8      	lsls	r0, r3, #31
 800a4e0:	d510      	bpl.n	800a504 <_printf_float+0x250>
 800a4e2:	ee18 3a10 	vmov	r3, s16
 800a4e6:	4652      	mov	r2, sl
 800a4e8:	4631      	mov	r1, r6
 800a4ea:	4628      	mov	r0, r5
 800a4ec:	47b8      	blx	r7
 800a4ee:	3001      	adds	r0, #1
 800a4f0:	f43f af41 	beq.w	800a376 <_printf_float+0xc2>
 800a4f4:	f04f 0800 	mov.w	r8, #0
 800a4f8:	f104 091a 	add.w	r9, r4, #26
 800a4fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4fe:	3b01      	subs	r3, #1
 800a500:	4543      	cmp	r3, r8
 800a502:	dc09      	bgt.n	800a518 <_printf_float+0x264>
 800a504:	6823      	ldr	r3, [r4, #0]
 800a506:	079b      	lsls	r3, r3, #30
 800a508:	f100 8105 	bmi.w	800a716 <_printf_float+0x462>
 800a50c:	68e0      	ldr	r0, [r4, #12]
 800a50e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a510:	4298      	cmp	r0, r3
 800a512:	bfb8      	it	lt
 800a514:	4618      	movlt	r0, r3
 800a516:	e730      	b.n	800a37a <_printf_float+0xc6>
 800a518:	2301      	movs	r3, #1
 800a51a:	464a      	mov	r2, r9
 800a51c:	4631      	mov	r1, r6
 800a51e:	4628      	mov	r0, r5
 800a520:	47b8      	blx	r7
 800a522:	3001      	adds	r0, #1
 800a524:	f43f af27 	beq.w	800a376 <_printf_float+0xc2>
 800a528:	f108 0801 	add.w	r8, r8, #1
 800a52c:	e7e6      	b.n	800a4fc <_printf_float+0x248>
 800a52e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a530:	2b00      	cmp	r3, #0
 800a532:	dc39      	bgt.n	800a5a8 <_printf_float+0x2f4>
 800a534:	4a1b      	ldr	r2, [pc, #108]	; (800a5a4 <_printf_float+0x2f0>)
 800a536:	2301      	movs	r3, #1
 800a538:	4631      	mov	r1, r6
 800a53a:	4628      	mov	r0, r5
 800a53c:	47b8      	blx	r7
 800a53e:	3001      	adds	r0, #1
 800a540:	f43f af19 	beq.w	800a376 <_printf_float+0xc2>
 800a544:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a548:	4313      	orrs	r3, r2
 800a54a:	d102      	bne.n	800a552 <_printf_float+0x29e>
 800a54c:	6823      	ldr	r3, [r4, #0]
 800a54e:	07d9      	lsls	r1, r3, #31
 800a550:	d5d8      	bpl.n	800a504 <_printf_float+0x250>
 800a552:	ee18 3a10 	vmov	r3, s16
 800a556:	4652      	mov	r2, sl
 800a558:	4631      	mov	r1, r6
 800a55a:	4628      	mov	r0, r5
 800a55c:	47b8      	blx	r7
 800a55e:	3001      	adds	r0, #1
 800a560:	f43f af09 	beq.w	800a376 <_printf_float+0xc2>
 800a564:	f04f 0900 	mov.w	r9, #0
 800a568:	f104 0a1a 	add.w	sl, r4, #26
 800a56c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a56e:	425b      	negs	r3, r3
 800a570:	454b      	cmp	r3, r9
 800a572:	dc01      	bgt.n	800a578 <_printf_float+0x2c4>
 800a574:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a576:	e792      	b.n	800a49e <_printf_float+0x1ea>
 800a578:	2301      	movs	r3, #1
 800a57a:	4652      	mov	r2, sl
 800a57c:	4631      	mov	r1, r6
 800a57e:	4628      	mov	r0, r5
 800a580:	47b8      	blx	r7
 800a582:	3001      	adds	r0, #1
 800a584:	f43f aef7 	beq.w	800a376 <_printf_float+0xc2>
 800a588:	f109 0901 	add.w	r9, r9, #1
 800a58c:	e7ee      	b.n	800a56c <_printf_float+0x2b8>
 800a58e:	bf00      	nop
 800a590:	7fefffff 	.word	0x7fefffff
 800a594:	0800cff0 	.word	0x0800cff0
 800a598:	0800cff4 	.word	0x0800cff4
 800a59c:	0800cffc 	.word	0x0800cffc
 800a5a0:	0800cff8 	.word	0x0800cff8
 800a5a4:	0800d000 	.word	0x0800d000
 800a5a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a5aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a5ac:	429a      	cmp	r2, r3
 800a5ae:	bfa8      	it	ge
 800a5b0:	461a      	movge	r2, r3
 800a5b2:	2a00      	cmp	r2, #0
 800a5b4:	4691      	mov	r9, r2
 800a5b6:	dc37      	bgt.n	800a628 <_printf_float+0x374>
 800a5b8:	f04f 0b00 	mov.w	fp, #0
 800a5bc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a5c0:	f104 021a 	add.w	r2, r4, #26
 800a5c4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a5c6:	9305      	str	r3, [sp, #20]
 800a5c8:	eba3 0309 	sub.w	r3, r3, r9
 800a5cc:	455b      	cmp	r3, fp
 800a5ce:	dc33      	bgt.n	800a638 <_printf_float+0x384>
 800a5d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a5d4:	429a      	cmp	r2, r3
 800a5d6:	db3b      	blt.n	800a650 <_printf_float+0x39c>
 800a5d8:	6823      	ldr	r3, [r4, #0]
 800a5da:	07da      	lsls	r2, r3, #31
 800a5dc:	d438      	bmi.n	800a650 <_printf_float+0x39c>
 800a5de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a5e0:	9b05      	ldr	r3, [sp, #20]
 800a5e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a5e4:	1ad3      	subs	r3, r2, r3
 800a5e6:	eba2 0901 	sub.w	r9, r2, r1
 800a5ea:	4599      	cmp	r9, r3
 800a5ec:	bfa8      	it	ge
 800a5ee:	4699      	movge	r9, r3
 800a5f0:	f1b9 0f00 	cmp.w	r9, #0
 800a5f4:	dc35      	bgt.n	800a662 <_printf_float+0x3ae>
 800a5f6:	f04f 0800 	mov.w	r8, #0
 800a5fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a5fe:	f104 0a1a 	add.w	sl, r4, #26
 800a602:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a606:	1a9b      	subs	r3, r3, r2
 800a608:	eba3 0309 	sub.w	r3, r3, r9
 800a60c:	4543      	cmp	r3, r8
 800a60e:	f77f af79 	ble.w	800a504 <_printf_float+0x250>
 800a612:	2301      	movs	r3, #1
 800a614:	4652      	mov	r2, sl
 800a616:	4631      	mov	r1, r6
 800a618:	4628      	mov	r0, r5
 800a61a:	47b8      	blx	r7
 800a61c:	3001      	adds	r0, #1
 800a61e:	f43f aeaa 	beq.w	800a376 <_printf_float+0xc2>
 800a622:	f108 0801 	add.w	r8, r8, #1
 800a626:	e7ec      	b.n	800a602 <_printf_float+0x34e>
 800a628:	4613      	mov	r3, r2
 800a62a:	4631      	mov	r1, r6
 800a62c:	4642      	mov	r2, r8
 800a62e:	4628      	mov	r0, r5
 800a630:	47b8      	blx	r7
 800a632:	3001      	adds	r0, #1
 800a634:	d1c0      	bne.n	800a5b8 <_printf_float+0x304>
 800a636:	e69e      	b.n	800a376 <_printf_float+0xc2>
 800a638:	2301      	movs	r3, #1
 800a63a:	4631      	mov	r1, r6
 800a63c:	4628      	mov	r0, r5
 800a63e:	9205      	str	r2, [sp, #20]
 800a640:	47b8      	blx	r7
 800a642:	3001      	adds	r0, #1
 800a644:	f43f ae97 	beq.w	800a376 <_printf_float+0xc2>
 800a648:	9a05      	ldr	r2, [sp, #20]
 800a64a:	f10b 0b01 	add.w	fp, fp, #1
 800a64e:	e7b9      	b.n	800a5c4 <_printf_float+0x310>
 800a650:	ee18 3a10 	vmov	r3, s16
 800a654:	4652      	mov	r2, sl
 800a656:	4631      	mov	r1, r6
 800a658:	4628      	mov	r0, r5
 800a65a:	47b8      	blx	r7
 800a65c:	3001      	adds	r0, #1
 800a65e:	d1be      	bne.n	800a5de <_printf_float+0x32a>
 800a660:	e689      	b.n	800a376 <_printf_float+0xc2>
 800a662:	9a05      	ldr	r2, [sp, #20]
 800a664:	464b      	mov	r3, r9
 800a666:	4442      	add	r2, r8
 800a668:	4631      	mov	r1, r6
 800a66a:	4628      	mov	r0, r5
 800a66c:	47b8      	blx	r7
 800a66e:	3001      	adds	r0, #1
 800a670:	d1c1      	bne.n	800a5f6 <_printf_float+0x342>
 800a672:	e680      	b.n	800a376 <_printf_float+0xc2>
 800a674:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a676:	2a01      	cmp	r2, #1
 800a678:	dc01      	bgt.n	800a67e <_printf_float+0x3ca>
 800a67a:	07db      	lsls	r3, r3, #31
 800a67c:	d538      	bpl.n	800a6f0 <_printf_float+0x43c>
 800a67e:	2301      	movs	r3, #1
 800a680:	4642      	mov	r2, r8
 800a682:	4631      	mov	r1, r6
 800a684:	4628      	mov	r0, r5
 800a686:	47b8      	blx	r7
 800a688:	3001      	adds	r0, #1
 800a68a:	f43f ae74 	beq.w	800a376 <_printf_float+0xc2>
 800a68e:	ee18 3a10 	vmov	r3, s16
 800a692:	4652      	mov	r2, sl
 800a694:	4631      	mov	r1, r6
 800a696:	4628      	mov	r0, r5
 800a698:	47b8      	blx	r7
 800a69a:	3001      	adds	r0, #1
 800a69c:	f43f ae6b 	beq.w	800a376 <_printf_float+0xc2>
 800a6a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	f7f6 fa0e 	bl	8000ac8 <__aeabi_dcmpeq>
 800a6ac:	b9d8      	cbnz	r0, 800a6e6 <_printf_float+0x432>
 800a6ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6b0:	f108 0201 	add.w	r2, r8, #1
 800a6b4:	3b01      	subs	r3, #1
 800a6b6:	4631      	mov	r1, r6
 800a6b8:	4628      	mov	r0, r5
 800a6ba:	47b8      	blx	r7
 800a6bc:	3001      	adds	r0, #1
 800a6be:	d10e      	bne.n	800a6de <_printf_float+0x42a>
 800a6c0:	e659      	b.n	800a376 <_printf_float+0xc2>
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	4652      	mov	r2, sl
 800a6c6:	4631      	mov	r1, r6
 800a6c8:	4628      	mov	r0, r5
 800a6ca:	47b8      	blx	r7
 800a6cc:	3001      	adds	r0, #1
 800a6ce:	f43f ae52 	beq.w	800a376 <_printf_float+0xc2>
 800a6d2:	f108 0801 	add.w	r8, r8, #1
 800a6d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6d8:	3b01      	subs	r3, #1
 800a6da:	4543      	cmp	r3, r8
 800a6dc:	dcf1      	bgt.n	800a6c2 <_printf_float+0x40e>
 800a6de:	464b      	mov	r3, r9
 800a6e0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a6e4:	e6dc      	b.n	800a4a0 <_printf_float+0x1ec>
 800a6e6:	f04f 0800 	mov.w	r8, #0
 800a6ea:	f104 0a1a 	add.w	sl, r4, #26
 800a6ee:	e7f2      	b.n	800a6d6 <_printf_float+0x422>
 800a6f0:	2301      	movs	r3, #1
 800a6f2:	4642      	mov	r2, r8
 800a6f4:	e7df      	b.n	800a6b6 <_printf_float+0x402>
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	464a      	mov	r2, r9
 800a6fa:	4631      	mov	r1, r6
 800a6fc:	4628      	mov	r0, r5
 800a6fe:	47b8      	blx	r7
 800a700:	3001      	adds	r0, #1
 800a702:	f43f ae38 	beq.w	800a376 <_printf_float+0xc2>
 800a706:	f108 0801 	add.w	r8, r8, #1
 800a70a:	68e3      	ldr	r3, [r4, #12]
 800a70c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a70e:	1a5b      	subs	r3, r3, r1
 800a710:	4543      	cmp	r3, r8
 800a712:	dcf0      	bgt.n	800a6f6 <_printf_float+0x442>
 800a714:	e6fa      	b.n	800a50c <_printf_float+0x258>
 800a716:	f04f 0800 	mov.w	r8, #0
 800a71a:	f104 0919 	add.w	r9, r4, #25
 800a71e:	e7f4      	b.n	800a70a <_printf_float+0x456>

0800a720 <_printf_common>:
 800a720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a724:	4616      	mov	r6, r2
 800a726:	4699      	mov	r9, r3
 800a728:	688a      	ldr	r2, [r1, #8]
 800a72a:	690b      	ldr	r3, [r1, #16]
 800a72c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a730:	4293      	cmp	r3, r2
 800a732:	bfb8      	it	lt
 800a734:	4613      	movlt	r3, r2
 800a736:	6033      	str	r3, [r6, #0]
 800a738:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a73c:	4607      	mov	r7, r0
 800a73e:	460c      	mov	r4, r1
 800a740:	b10a      	cbz	r2, 800a746 <_printf_common+0x26>
 800a742:	3301      	adds	r3, #1
 800a744:	6033      	str	r3, [r6, #0]
 800a746:	6823      	ldr	r3, [r4, #0]
 800a748:	0699      	lsls	r1, r3, #26
 800a74a:	bf42      	ittt	mi
 800a74c:	6833      	ldrmi	r3, [r6, #0]
 800a74e:	3302      	addmi	r3, #2
 800a750:	6033      	strmi	r3, [r6, #0]
 800a752:	6825      	ldr	r5, [r4, #0]
 800a754:	f015 0506 	ands.w	r5, r5, #6
 800a758:	d106      	bne.n	800a768 <_printf_common+0x48>
 800a75a:	f104 0a19 	add.w	sl, r4, #25
 800a75e:	68e3      	ldr	r3, [r4, #12]
 800a760:	6832      	ldr	r2, [r6, #0]
 800a762:	1a9b      	subs	r3, r3, r2
 800a764:	42ab      	cmp	r3, r5
 800a766:	dc26      	bgt.n	800a7b6 <_printf_common+0x96>
 800a768:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a76c:	1e13      	subs	r3, r2, #0
 800a76e:	6822      	ldr	r2, [r4, #0]
 800a770:	bf18      	it	ne
 800a772:	2301      	movne	r3, #1
 800a774:	0692      	lsls	r2, r2, #26
 800a776:	d42b      	bmi.n	800a7d0 <_printf_common+0xb0>
 800a778:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a77c:	4649      	mov	r1, r9
 800a77e:	4638      	mov	r0, r7
 800a780:	47c0      	blx	r8
 800a782:	3001      	adds	r0, #1
 800a784:	d01e      	beq.n	800a7c4 <_printf_common+0xa4>
 800a786:	6823      	ldr	r3, [r4, #0]
 800a788:	68e5      	ldr	r5, [r4, #12]
 800a78a:	6832      	ldr	r2, [r6, #0]
 800a78c:	f003 0306 	and.w	r3, r3, #6
 800a790:	2b04      	cmp	r3, #4
 800a792:	bf08      	it	eq
 800a794:	1aad      	subeq	r5, r5, r2
 800a796:	68a3      	ldr	r3, [r4, #8]
 800a798:	6922      	ldr	r2, [r4, #16]
 800a79a:	bf0c      	ite	eq
 800a79c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a7a0:	2500      	movne	r5, #0
 800a7a2:	4293      	cmp	r3, r2
 800a7a4:	bfc4      	itt	gt
 800a7a6:	1a9b      	subgt	r3, r3, r2
 800a7a8:	18ed      	addgt	r5, r5, r3
 800a7aa:	2600      	movs	r6, #0
 800a7ac:	341a      	adds	r4, #26
 800a7ae:	42b5      	cmp	r5, r6
 800a7b0:	d11a      	bne.n	800a7e8 <_printf_common+0xc8>
 800a7b2:	2000      	movs	r0, #0
 800a7b4:	e008      	b.n	800a7c8 <_printf_common+0xa8>
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	4652      	mov	r2, sl
 800a7ba:	4649      	mov	r1, r9
 800a7bc:	4638      	mov	r0, r7
 800a7be:	47c0      	blx	r8
 800a7c0:	3001      	adds	r0, #1
 800a7c2:	d103      	bne.n	800a7cc <_printf_common+0xac>
 800a7c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a7c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7cc:	3501      	adds	r5, #1
 800a7ce:	e7c6      	b.n	800a75e <_printf_common+0x3e>
 800a7d0:	18e1      	adds	r1, r4, r3
 800a7d2:	1c5a      	adds	r2, r3, #1
 800a7d4:	2030      	movs	r0, #48	; 0x30
 800a7d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a7da:	4422      	add	r2, r4
 800a7dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a7e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a7e4:	3302      	adds	r3, #2
 800a7e6:	e7c7      	b.n	800a778 <_printf_common+0x58>
 800a7e8:	2301      	movs	r3, #1
 800a7ea:	4622      	mov	r2, r4
 800a7ec:	4649      	mov	r1, r9
 800a7ee:	4638      	mov	r0, r7
 800a7f0:	47c0      	blx	r8
 800a7f2:	3001      	adds	r0, #1
 800a7f4:	d0e6      	beq.n	800a7c4 <_printf_common+0xa4>
 800a7f6:	3601      	adds	r6, #1
 800a7f8:	e7d9      	b.n	800a7ae <_printf_common+0x8e>
	...

0800a7fc <_printf_i>:
 800a7fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a800:	460c      	mov	r4, r1
 800a802:	4691      	mov	r9, r2
 800a804:	7e27      	ldrb	r7, [r4, #24]
 800a806:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a808:	2f78      	cmp	r7, #120	; 0x78
 800a80a:	4680      	mov	r8, r0
 800a80c:	469a      	mov	sl, r3
 800a80e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a812:	d807      	bhi.n	800a824 <_printf_i+0x28>
 800a814:	2f62      	cmp	r7, #98	; 0x62
 800a816:	d80a      	bhi.n	800a82e <_printf_i+0x32>
 800a818:	2f00      	cmp	r7, #0
 800a81a:	f000 80d8 	beq.w	800a9ce <_printf_i+0x1d2>
 800a81e:	2f58      	cmp	r7, #88	; 0x58
 800a820:	f000 80a3 	beq.w	800a96a <_printf_i+0x16e>
 800a824:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a828:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a82c:	e03a      	b.n	800a8a4 <_printf_i+0xa8>
 800a82e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a832:	2b15      	cmp	r3, #21
 800a834:	d8f6      	bhi.n	800a824 <_printf_i+0x28>
 800a836:	a001      	add	r0, pc, #4	; (adr r0, 800a83c <_printf_i+0x40>)
 800a838:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a83c:	0800a895 	.word	0x0800a895
 800a840:	0800a8a9 	.word	0x0800a8a9
 800a844:	0800a825 	.word	0x0800a825
 800a848:	0800a825 	.word	0x0800a825
 800a84c:	0800a825 	.word	0x0800a825
 800a850:	0800a825 	.word	0x0800a825
 800a854:	0800a8a9 	.word	0x0800a8a9
 800a858:	0800a825 	.word	0x0800a825
 800a85c:	0800a825 	.word	0x0800a825
 800a860:	0800a825 	.word	0x0800a825
 800a864:	0800a825 	.word	0x0800a825
 800a868:	0800a9b5 	.word	0x0800a9b5
 800a86c:	0800a8d9 	.word	0x0800a8d9
 800a870:	0800a997 	.word	0x0800a997
 800a874:	0800a825 	.word	0x0800a825
 800a878:	0800a825 	.word	0x0800a825
 800a87c:	0800a9d7 	.word	0x0800a9d7
 800a880:	0800a825 	.word	0x0800a825
 800a884:	0800a8d9 	.word	0x0800a8d9
 800a888:	0800a825 	.word	0x0800a825
 800a88c:	0800a825 	.word	0x0800a825
 800a890:	0800a99f 	.word	0x0800a99f
 800a894:	680b      	ldr	r3, [r1, #0]
 800a896:	1d1a      	adds	r2, r3, #4
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	600a      	str	r2, [r1, #0]
 800a89c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a8a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a8a4:	2301      	movs	r3, #1
 800a8a6:	e0a3      	b.n	800a9f0 <_printf_i+0x1f4>
 800a8a8:	6825      	ldr	r5, [r4, #0]
 800a8aa:	6808      	ldr	r0, [r1, #0]
 800a8ac:	062e      	lsls	r6, r5, #24
 800a8ae:	f100 0304 	add.w	r3, r0, #4
 800a8b2:	d50a      	bpl.n	800a8ca <_printf_i+0xce>
 800a8b4:	6805      	ldr	r5, [r0, #0]
 800a8b6:	600b      	str	r3, [r1, #0]
 800a8b8:	2d00      	cmp	r5, #0
 800a8ba:	da03      	bge.n	800a8c4 <_printf_i+0xc8>
 800a8bc:	232d      	movs	r3, #45	; 0x2d
 800a8be:	426d      	negs	r5, r5
 800a8c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a8c4:	485e      	ldr	r0, [pc, #376]	; (800aa40 <_printf_i+0x244>)
 800a8c6:	230a      	movs	r3, #10
 800a8c8:	e019      	b.n	800a8fe <_printf_i+0x102>
 800a8ca:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a8ce:	6805      	ldr	r5, [r0, #0]
 800a8d0:	600b      	str	r3, [r1, #0]
 800a8d2:	bf18      	it	ne
 800a8d4:	b22d      	sxthne	r5, r5
 800a8d6:	e7ef      	b.n	800a8b8 <_printf_i+0xbc>
 800a8d8:	680b      	ldr	r3, [r1, #0]
 800a8da:	6825      	ldr	r5, [r4, #0]
 800a8dc:	1d18      	adds	r0, r3, #4
 800a8de:	6008      	str	r0, [r1, #0]
 800a8e0:	0628      	lsls	r0, r5, #24
 800a8e2:	d501      	bpl.n	800a8e8 <_printf_i+0xec>
 800a8e4:	681d      	ldr	r5, [r3, #0]
 800a8e6:	e002      	b.n	800a8ee <_printf_i+0xf2>
 800a8e8:	0669      	lsls	r1, r5, #25
 800a8ea:	d5fb      	bpl.n	800a8e4 <_printf_i+0xe8>
 800a8ec:	881d      	ldrh	r5, [r3, #0]
 800a8ee:	4854      	ldr	r0, [pc, #336]	; (800aa40 <_printf_i+0x244>)
 800a8f0:	2f6f      	cmp	r7, #111	; 0x6f
 800a8f2:	bf0c      	ite	eq
 800a8f4:	2308      	moveq	r3, #8
 800a8f6:	230a      	movne	r3, #10
 800a8f8:	2100      	movs	r1, #0
 800a8fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a8fe:	6866      	ldr	r6, [r4, #4]
 800a900:	60a6      	str	r6, [r4, #8]
 800a902:	2e00      	cmp	r6, #0
 800a904:	bfa2      	ittt	ge
 800a906:	6821      	ldrge	r1, [r4, #0]
 800a908:	f021 0104 	bicge.w	r1, r1, #4
 800a90c:	6021      	strge	r1, [r4, #0]
 800a90e:	b90d      	cbnz	r5, 800a914 <_printf_i+0x118>
 800a910:	2e00      	cmp	r6, #0
 800a912:	d04d      	beq.n	800a9b0 <_printf_i+0x1b4>
 800a914:	4616      	mov	r6, r2
 800a916:	fbb5 f1f3 	udiv	r1, r5, r3
 800a91a:	fb03 5711 	mls	r7, r3, r1, r5
 800a91e:	5dc7      	ldrb	r7, [r0, r7]
 800a920:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a924:	462f      	mov	r7, r5
 800a926:	42bb      	cmp	r3, r7
 800a928:	460d      	mov	r5, r1
 800a92a:	d9f4      	bls.n	800a916 <_printf_i+0x11a>
 800a92c:	2b08      	cmp	r3, #8
 800a92e:	d10b      	bne.n	800a948 <_printf_i+0x14c>
 800a930:	6823      	ldr	r3, [r4, #0]
 800a932:	07df      	lsls	r7, r3, #31
 800a934:	d508      	bpl.n	800a948 <_printf_i+0x14c>
 800a936:	6923      	ldr	r3, [r4, #16]
 800a938:	6861      	ldr	r1, [r4, #4]
 800a93a:	4299      	cmp	r1, r3
 800a93c:	bfde      	ittt	le
 800a93e:	2330      	movle	r3, #48	; 0x30
 800a940:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a944:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a948:	1b92      	subs	r2, r2, r6
 800a94a:	6122      	str	r2, [r4, #16]
 800a94c:	f8cd a000 	str.w	sl, [sp]
 800a950:	464b      	mov	r3, r9
 800a952:	aa03      	add	r2, sp, #12
 800a954:	4621      	mov	r1, r4
 800a956:	4640      	mov	r0, r8
 800a958:	f7ff fee2 	bl	800a720 <_printf_common>
 800a95c:	3001      	adds	r0, #1
 800a95e:	d14c      	bne.n	800a9fa <_printf_i+0x1fe>
 800a960:	f04f 30ff 	mov.w	r0, #4294967295
 800a964:	b004      	add	sp, #16
 800a966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a96a:	4835      	ldr	r0, [pc, #212]	; (800aa40 <_printf_i+0x244>)
 800a96c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a970:	6823      	ldr	r3, [r4, #0]
 800a972:	680e      	ldr	r6, [r1, #0]
 800a974:	061f      	lsls	r7, r3, #24
 800a976:	f856 5b04 	ldr.w	r5, [r6], #4
 800a97a:	600e      	str	r6, [r1, #0]
 800a97c:	d514      	bpl.n	800a9a8 <_printf_i+0x1ac>
 800a97e:	07d9      	lsls	r1, r3, #31
 800a980:	bf44      	itt	mi
 800a982:	f043 0320 	orrmi.w	r3, r3, #32
 800a986:	6023      	strmi	r3, [r4, #0]
 800a988:	b91d      	cbnz	r5, 800a992 <_printf_i+0x196>
 800a98a:	6823      	ldr	r3, [r4, #0]
 800a98c:	f023 0320 	bic.w	r3, r3, #32
 800a990:	6023      	str	r3, [r4, #0]
 800a992:	2310      	movs	r3, #16
 800a994:	e7b0      	b.n	800a8f8 <_printf_i+0xfc>
 800a996:	6823      	ldr	r3, [r4, #0]
 800a998:	f043 0320 	orr.w	r3, r3, #32
 800a99c:	6023      	str	r3, [r4, #0]
 800a99e:	2378      	movs	r3, #120	; 0x78
 800a9a0:	4828      	ldr	r0, [pc, #160]	; (800aa44 <_printf_i+0x248>)
 800a9a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a9a6:	e7e3      	b.n	800a970 <_printf_i+0x174>
 800a9a8:	065e      	lsls	r6, r3, #25
 800a9aa:	bf48      	it	mi
 800a9ac:	b2ad      	uxthmi	r5, r5
 800a9ae:	e7e6      	b.n	800a97e <_printf_i+0x182>
 800a9b0:	4616      	mov	r6, r2
 800a9b2:	e7bb      	b.n	800a92c <_printf_i+0x130>
 800a9b4:	680b      	ldr	r3, [r1, #0]
 800a9b6:	6826      	ldr	r6, [r4, #0]
 800a9b8:	6960      	ldr	r0, [r4, #20]
 800a9ba:	1d1d      	adds	r5, r3, #4
 800a9bc:	600d      	str	r5, [r1, #0]
 800a9be:	0635      	lsls	r5, r6, #24
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	d501      	bpl.n	800a9c8 <_printf_i+0x1cc>
 800a9c4:	6018      	str	r0, [r3, #0]
 800a9c6:	e002      	b.n	800a9ce <_printf_i+0x1d2>
 800a9c8:	0671      	lsls	r1, r6, #25
 800a9ca:	d5fb      	bpl.n	800a9c4 <_printf_i+0x1c8>
 800a9cc:	8018      	strh	r0, [r3, #0]
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	6123      	str	r3, [r4, #16]
 800a9d2:	4616      	mov	r6, r2
 800a9d4:	e7ba      	b.n	800a94c <_printf_i+0x150>
 800a9d6:	680b      	ldr	r3, [r1, #0]
 800a9d8:	1d1a      	adds	r2, r3, #4
 800a9da:	600a      	str	r2, [r1, #0]
 800a9dc:	681e      	ldr	r6, [r3, #0]
 800a9de:	6862      	ldr	r2, [r4, #4]
 800a9e0:	2100      	movs	r1, #0
 800a9e2:	4630      	mov	r0, r6
 800a9e4:	f7f5 fbfc 	bl	80001e0 <memchr>
 800a9e8:	b108      	cbz	r0, 800a9ee <_printf_i+0x1f2>
 800a9ea:	1b80      	subs	r0, r0, r6
 800a9ec:	6060      	str	r0, [r4, #4]
 800a9ee:	6863      	ldr	r3, [r4, #4]
 800a9f0:	6123      	str	r3, [r4, #16]
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a9f8:	e7a8      	b.n	800a94c <_printf_i+0x150>
 800a9fa:	6923      	ldr	r3, [r4, #16]
 800a9fc:	4632      	mov	r2, r6
 800a9fe:	4649      	mov	r1, r9
 800aa00:	4640      	mov	r0, r8
 800aa02:	47d0      	blx	sl
 800aa04:	3001      	adds	r0, #1
 800aa06:	d0ab      	beq.n	800a960 <_printf_i+0x164>
 800aa08:	6823      	ldr	r3, [r4, #0]
 800aa0a:	079b      	lsls	r3, r3, #30
 800aa0c:	d413      	bmi.n	800aa36 <_printf_i+0x23a>
 800aa0e:	68e0      	ldr	r0, [r4, #12]
 800aa10:	9b03      	ldr	r3, [sp, #12]
 800aa12:	4298      	cmp	r0, r3
 800aa14:	bfb8      	it	lt
 800aa16:	4618      	movlt	r0, r3
 800aa18:	e7a4      	b.n	800a964 <_printf_i+0x168>
 800aa1a:	2301      	movs	r3, #1
 800aa1c:	4632      	mov	r2, r6
 800aa1e:	4649      	mov	r1, r9
 800aa20:	4640      	mov	r0, r8
 800aa22:	47d0      	blx	sl
 800aa24:	3001      	adds	r0, #1
 800aa26:	d09b      	beq.n	800a960 <_printf_i+0x164>
 800aa28:	3501      	adds	r5, #1
 800aa2a:	68e3      	ldr	r3, [r4, #12]
 800aa2c:	9903      	ldr	r1, [sp, #12]
 800aa2e:	1a5b      	subs	r3, r3, r1
 800aa30:	42ab      	cmp	r3, r5
 800aa32:	dcf2      	bgt.n	800aa1a <_printf_i+0x21e>
 800aa34:	e7eb      	b.n	800aa0e <_printf_i+0x212>
 800aa36:	2500      	movs	r5, #0
 800aa38:	f104 0619 	add.w	r6, r4, #25
 800aa3c:	e7f5      	b.n	800aa2a <_printf_i+0x22e>
 800aa3e:	bf00      	nop
 800aa40:	0800d002 	.word	0x0800d002
 800aa44:	0800d013 	.word	0x0800d013

0800aa48 <iprintf>:
 800aa48:	b40f      	push	{r0, r1, r2, r3}
 800aa4a:	4b0a      	ldr	r3, [pc, #40]	; (800aa74 <iprintf+0x2c>)
 800aa4c:	b513      	push	{r0, r1, r4, lr}
 800aa4e:	681c      	ldr	r4, [r3, #0]
 800aa50:	b124      	cbz	r4, 800aa5c <iprintf+0x14>
 800aa52:	69a3      	ldr	r3, [r4, #24]
 800aa54:	b913      	cbnz	r3, 800aa5c <iprintf+0x14>
 800aa56:	4620      	mov	r0, r4
 800aa58:	f000 fede 	bl	800b818 <__sinit>
 800aa5c:	ab05      	add	r3, sp, #20
 800aa5e:	9a04      	ldr	r2, [sp, #16]
 800aa60:	68a1      	ldr	r1, [r4, #8]
 800aa62:	9301      	str	r3, [sp, #4]
 800aa64:	4620      	mov	r0, r4
 800aa66:	f001 fbf5 	bl	800c254 <_vfiprintf_r>
 800aa6a:	b002      	add	sp, #8
 800aa6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa70:	b004      	add	sp, #16
 800aa72:	4770      	bx	lr
 800aa74:	20000090 	.word	0x20000090

0800aa78 <quorem>:
 800aa78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa7c:	6903      	ldr	r3, [r0, #16]
 800aa7e:	690c      	ldr	r4, [r1, #16]
 800aa80:	42a3      	cmp	r3, r4
 800aa82:	4607      	mov	r7, r0
 800aa84:	f2c0 8081 	blt.w	800ab8a <quorem+0x112>
 800aa88:	3c01      	subs	r4, #1
 800aa8a:	f101 0814 	add.w	r8, r1, #20
 800aa8e:	f100 0514 	add.w	r5, r0, #20
 800aa92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aa96:	9301      	str	r3, [sp, #4]
 800aa98:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800aa9c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aaa0:	3301      	adds	r3, #1
 800aaa2:	429a      	cmp	r2, r3
 800aaa4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800aaa8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800aaac:	fbb2 f6f3 	udiv	r6, r2, r3
 800aab0:	d331      	bcc.n	800ab16 <quorem+0x9e>
 800aab2:	f04f 0e00 	mov.w	lr, #0
 800aab6:	4640      	mov	r0, r8
 800aab8:	46ac      	mov	ip, r5
 800aaba:	46f2      	mov	sl, lr
 800aabc:	f850 2b04 	ldr.w	r2, [r0], #4
 800aac0:	b293      	uxth	r3, r2
 800aac2:	fb06 e303 	mla	r3, r6, r3, lr
 800aac6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800aaca:	b29b      	uxth	r3, r3
 800aacc:	ebaa 0303 	sub.w	r3, sl, r3
 800aad0:	0c12      	lsrs	r2, r2, #16
 800aad2:	f8dc a000 	ldr.w	sl, [ip]
 800aad6:	fb06 e202 	mla	r2, r6, r2, lr
 800aada:	fa13 f38a 	uxtah	r3, r3, sl
 800aade:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800aae2:	fa1f fa82 	uxth.w	sl, r2
 800aae6:	f8dc 2000 	ldr.w	r2, [ip]
 800aaea:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800aaee:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800aaf2:	b29b      	uxth	r3, r3
 800aaf4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aaf8:	4581      	cmp	r9, r0
 800aafa:	f84c 3b04 	str.w	r3, [ip], #4
 800aafe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ab02:	d2db      	bcs.n	800aabc <quorem+0x44>
 800ab04:	f855 300b 	ldr.w	r3, [r5, fp]
 800ab08:	b92b      	cbnz	r3, 800ab16 <quorem+0x9e>
 800ab0a:	9b01      	ldr	r3, [sp, #4]
 800ab0c:	3b04      	subs	r3, #4
 800ab0e:	429d      	cmp	r5, r3
 800ab10:	461a      	mov	r2, r3
 800ab12:	d32e      	bcc.n	800ab72 <quorem+0xfa>
 800ab14:	613c      	str	r4, [r7, #16]
 800ab16:	4638      	mov	r0, r7
 800ab18:	f001 f9b8 	bl	800be8c <__mcmp>
 800ab1c:	2800      	cmp	r0, #0
 800ab1e:	db24      	blt.n	800ab6a <quorem+0xf2>
 800ab20:	3601      	adds	r6, #1
 800ab22:	4628      	mov	r0, r5
 800ab24:	f04f 0c00 	mov.w	ip, #0
 800ab28:	f858 2b04 	ldr.w	r2, [r8], #4
 800ab2c:	f8d0 e000 	ldr.w	lr, [r0]
 800ab30:	b293      	uxth	r3, r2
 800ab32:	ebac 0303 	sub.w	r3, ip, r3
 800ab36:	0c12      	lsrs	r2, r2, #16
 800ab38:	fa13 f38e 	uxtah	r3, r3, lr
 800ab3c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ab40:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ab44:	b29b      	uxth	r3, r3
 800ab46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ab4a:	45c1      	cmp	r9, r8
 800ab4c:	f840 3b04 	str.w	r3, [r0], #4
 800ab50:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ab54:	d2e8      	bcs.n	800ab28 <quorem+0xb0>
 800ab56:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ab5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ab5e:	b922      	cbnz	r2, 800ab6a <quorem+0xf2>
 800ab60:	3b04      	subs	r3, #4
 800ab62:	429d      	cmp	r5, r3
 800ab64:	461a      	mov	r2, r3
 800ab66:	d30a      	bcc.n	800ab7e <quorem+0x106>
 800ab68:	613c      	str	r4, [r7, #16]
 800ab6a:	4630      	mov	r0, r6
 800ab6c:	b003      	add	sp, #12
 800ab6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab72:	6812      	ldr	r2, [r2, #0]
 800ab74:	3b04      	subs	r3, #4
 800ab76:	2a00      	cmp	r2, #0
 800ab78:	d1cc      	bne.n	800ab14 <quorem+0x9c>
 800ab7a:	3c01      	subs	r4, #1
 800ab7c:	e7c7      	b.n	800ab0e <quorem+0x96>
 800ab7e:	6812      	ldr	r2, [r2, #0]
 800ab80:	3b04      	subs	r3, #4
 800ab82:	2a00      	cmp	r2, #0
 800ab84:	d1f0      	bne.n	800ab68 <quorem+0xf0>
 800ab86:	3c01      	subs	r4, #1
 800ab88:	e7eb      	b.n	800ab62 <quorem+0xea>
 800ab8a:	2000      	movs	r0, #0
 800ab8c:	e7ee      	b.n	800ab6c <quorem+0xf4>
	...

0800ab90 <_dtoa_r>:
 800ab90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab94:	ed2d 8b02 	vpush	{d8}
 800ab98:	ec57 6b10 	vmov	r6, r7, d0
 800ab9c:	b095      	sub	sp, #84	; 0x54
 800ab9e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800aba0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800aba4:	9105      	str	r1, [sp, #20]
 800aba6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800abaa:	4604      	mov	r4, r0
 800abac:	9209      	str	r2, [sp, #36]	; 0x24
 800abae:	930f      	str	r3, [sp, #60]	; 0x3c
 800abb0:	b975      	cbnz	r5, 800abd0 <_dtoa_r+0x40>
 800abb2:	2010      	movs	r0, #16
 800abb4:	f000 fed6 	bl	800b964 <malloc>
 800abb8:	4602      	mov	r2, r0
 800abba:	6260      	str	r0, [r4, #36]	; 0x24
 800abbc:	b920      	cbnz	r0, 800abc8 <_dtoa_r+0x38>
 800abbe:	4bb2      	ldr	r3, [pc, #712]	; (800ae88 <_dtoa_r+0x2f8>)
 800abc0:	21ea      	movs	r1, #234	; 0xea
 800abc2:	48b2      	ldr	r0, [pc, #712]	; (800ae8c <_dtoa_r+0x2fc>)
 800abc4:	f001 fd9c 	bl	800c700 <__assert_func>
 800abc8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800abcc:	6005      	str	r5, [r0, #0]
 800abce:	60c5      	str	r5, [r0, #12]
 800abd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800abd2:	6819      	ldr	r1, [r3, #0]
 800abd4:	b151      	cbz	r1, 800abec <_dtoa_r+0x5c>
 800abd6:	685a      	ldr	r2, [r3, #4]
 800abd8:	604a      	str	r2, [r1, #4]
 800abda:	2301      	movs	r3, #1
 800abdc:	4093      	lsls	r3, r2
 800abde:	608b      	str	r3, [r1, #8]
 800abe0:	4620      	mov	r0, r4
 800abe2:	f000 ff15 	bl	800ba10 <_Bfree>
 800abe6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800abe8:	2200      	movs	r2, #0
 800abea:	601a      	str	r2, [r3, #0]
 800abec:	1e3b      	subs	r3, r7, #0
 800abee:	bfb9      	ittee	lt
 800abf0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800abf4:	9303      	strlt	r3, [sp, #12]
 800abf6:	2300      	movge	r3, #0
 800abf8:	f8c8 3000 	strge.w	r3, [r8]
 800abfc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800ac00:	4ba3      	ldr	r3, [pc, #652]	; (800ae90 <_dtoa_r+0x300>)
 800ac02:	bfbc      	itt	lt
 800ac04:	2201      	movlt	r2, #1
 800ac06:	f8c8 2000 	strlt.w	r2, [r8]
 800ac0a:	ea33 0309 	bics.w	r3, r3, r9
 800ac0e:	d11b      	bne.n	800ac48 <_dtoa_r+0xb8>
 800ac10:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ac12:	f242 730f 	movw	r3, #9999	; 0x270f
 800ac16:	6013      	str	r3, [r2, #0]
 800ac18:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ac1c:	4333      	orrs	r3, r6
 800ac1e:	f000 857a 	beq.w	800b716 <_dtoa_r+0xb86>
 800ac22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ac24:	b963      	cbnz	r3, 800ac40 <_dtoa_r+0xb0>
 800ac26:	4b9b      	ldr	r3, [pc, #620]	; (800ae94 <_dtoa_r+0x304>)
 800ac28:	e024      	b.n	800ac74 <_dtoa_r+0xe4>
 800ac2a:	4b9b      	ldr	r3, [pc, #620]	; (800ae98 <_dtoa_r+0x308>)
 800ac2c:	9300      	str	r3, [sp, #0]
 800ac2e:	3308      	adds	r3, #8
 800ac30:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ac32:	6013      	str	r3, [r2, #0]
 800ac34:	9800      	ldr	r0, [sp, #0]
 800ac36:	b015      	add	sp, #84	; 0x54
 800ac38:	ecbd 8b02 	vpop	{d8}
 800ac3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac40:	4b94      	ldr	r3, [pc, #592]	; (800ae94 <_dtoa_r+0x304>)
 800ac42:	9300      	str	r3, [sp, #0]
 800ac44:	3303      	adds	r3, #3
 800ac46:	e7f3      	b.n	800ac30 <_dtoa_r+0xa0>
 800ac48:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	ec51 0b17 	vmov	r0, r1, d7
 800ac52:	2300      	movs	r3, #0
 800ac54:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800ac58:	f7f5 ff36 	bl	8000ac8 <__aeabi_dcmpeq>
 800ac5c:	4680      	mov	r8, r0
 800ac5e:	b158      	cbz	r0, 800ac78 <_dtoa_r+0xe8>
 800ac60:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ac62:	2301      	movs	r3, #1
 800ac64:	6013      	str	r3, [r2, #0]
 800ac66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	f000 8551 	beq.w	800b710 <_dtoa_r+0xb80>
 800ac6e:	488b      	ldr	r0, [pc, #556]	; (800ae9c <_dtoa_r+0x30c>)
 800ac70:	6018      	str	r0, [r3, #0]
 800ac72:	1e43      	subs	r3, r0, #1
 800ac74:	9300      	str	r3, [sp, #0]
 800ac76:	e7dd      	b.n	800ac34 <_dtoa_r+0xa4>
 800ac78:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800ac7c:	aa12      	add	r2, sp, #72	; 0x48
 800ac7e:	a913      	add	r1, sp, #76	; 0x4c
 800ac80:	4620      	mov	r0, r4
 800ac82:	f001 f9a7 	bl	800bfd4 <__d2b>
 800ac86:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ac8a:	4683      	mov	fp, r0
 800ac8c:	2d00      	cmp	r5, #0
 800ac8e:	d07c      	beq.n	800ad8a <_dtoa_r+0x1fa>
 800ac90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac92:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800ac96:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ac9a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800ac9e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800aca2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800aca6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800acaa:	4b7d      	ldr	r3, [pc, #500]	; (800aea0 <_dtoa_r+0x310>)
 800acac:	2200      	movs	r2, #0
 800acae:	4630      	mov	r0, r6
 800acb0:	4639      	mov	r1, r7
 800acb2:	f7f5 fae9 	bl	8000288 <__aeabi_dsub>
 800acb6:	a36e      	add	r3, pc, #440	; (adr r3, 800ae70 <_dtoa_r+0x2e0>)
 800acb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acbc:	f7f5 fc9c 	bl	80005f8 <__aeabi_dmul>
 800acc0:	a36d      	add	r3, pc, #436	; (adr r3, 800ae78 <_dtoa_r+0x2e8>)
 800acc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acc6:	f7f5 fae1 	bl	800028c <__adddf3>
 800acca:	4606      	mov	r6, r0
 800accc:	4628      	mov	r0, r5
 800acce:	460f      	mov	r7, r1
 800acd0:	f7f5 fc28 	bl	8000524 <__aeabi_i2d>
 800acd4:	a36a      	add	r3, pc, #424	; (adr r3, 800ae80 <_dtoa_r+0x2f0>)
 800acd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acda:	f7f5 fc8d 	bl	80005f8 <__aeabi_dmul>
 800acde:	4602      	mov	r2, r0
 800ace0:	460b      	mov	r3, r1
 800ace2:	4630      	mov	r0, r6
 800ace4:	4639      	mov	r1, r7
 800ace6:	f7f5 fad1 	bl	800028c <__adddf3>
 800acea:	4606      	mov	r6, r0
 800acec:	460f      	mov	r7, r1
 800acee:	f7f5 ff33 	bl	8000b58 <__aeabi_d2iz>
 800acf2:	2200      	movs	r2, #0
 800acf4:	4682      	mov	sl, r0
 800acf6:	2300      	movs	r3, #0
 800acf8:	4630      	mov	r0, r6
 800acfa:	4639      	mov	r1, r7
 800acfc:	f7f5 feee 	bl	8000adc <__aeabi_dcmplt>
 800ad00:	b148      	cbz	r0, 800ad16 <_dtoa_r+0x186>
 800ad02:	4650      	mov	r0, sl
 800ad04:	f7f5 fc0e 	bl	8000524 <__aeabi_i2d>
 800ad08:	4632      	mov	r2, r6
 800ad0a:	463b      	mov	r3, r7
 800ad0c:	f7f5 fedc 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad10:	b908      	cbnz	r0, 800ad16 <_dtoa_r+0x186>
 800ad12:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ad16:	f1ba 0f16 	cmp.w	sl, #22
 800ad1a:	d854      	bhi.n	800adc6 <_dtoa_r+0x236>
 800ad1c:	4b61      	ldr	r3, [pc, #388]	; (800aea4 <_dtoa_r+0x314>)
 800ad1e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ad22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad26:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ad2a:	f7f5 fed7 	bl	8000adc <__aeabi_dcmplt>
 800ad2e:	2800      	cmp	r0, #0
 800ad30:	d04b      	beq.n	800adca <_dtoa_r+0x23a>
 800ad32:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ad36:	2300      	movs	r3, #0
 800ad38:	930e      	str	r3, [sp, #56]	; 0x38
 800ad3a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ad3c:	1b5d      	subs	r5, r3, r5
 800ad3e:	1e6b      	subs	r3, r5, #1
 800ad40:	9304      	str	r3, [sp, #16]
 800ad42:	bf43      	ittte	mi
 800ad44:	2300      	movmi	r3, #0
 800ad46:	f1c5 0801 	rsbmi	r8, r5, #1
 800ad4a:	9304      	strmi	r3, [sp, #16]
 800ad4c:	f04f 0800 	movpl.w	r8, #0
 800ad50:	f1ba 0f00 	cmp.w	sl, #0
 800ad54:	db3b      	blt.n	800adce <_dtoa_r+0x23e>
 800ad56:	9b04      	ldr	r3, [sp, #16]
 800ad58:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800ad5c:	4453      	add	r3, sl
 800ad5e:	9304      	str	r3, [sp, #16]
 800ad60:	2300      	movs	r3, #0
 800ad62:	9306      	str	r3, [sp, #24]
 800ad64:	9b05      	ldr	r3, [sp, #20]
 800ad66:	2b09      	cmp	r3, #9
 800ad68:	d869      	bhi.n	800ae3e <_dtoa_r+0x2ae>
 800ad6a:	2b05      	cmp	r3, #5
 800ad6c:	bfc4      	itt	gt
 800ad6e:	3b04      	subgt	r3, #4
 800ad70:	9305      	strgt	r3, [sp, #20]
 800ad72:	9b05      	ldr	r3, [sp, #20]
 800ad74:	f1a3 0302 	sub.w	r3, r3, #2
 800ad78:	bfcc      	ite	gt
 800ad7a:	2500      	movgt	r5, #0
 800ad7c:	2501      	movle	r5, #1
 800ad7e:	2b03      	cmp	r3, #3
 800ad80:	d869      	bhi.n	800ae56 <_dtoa_r+0x2c6>
 800ad82:	e8df f003 	tbb	[pc, r3]
 800ad86:	4e2c      	.short	0x4e2c
 800ad88:	5a4c      	.short	0x5a4c
 800ad8a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800ad8e:	441d      	add	r5, r3
 800ad90:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ad94:	2b20      	cmp	r3, #32
 800ad96:	bfc1      	itttt	gt
 800ad98:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ad9c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ada0:	fa09 f303 	lslgt.w	r3, r9, r3
 800ada4:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ada8:	bfda      	itte	le
 800adaa:	f1c3 0320 	rsble	r3, r3, #32
 800adae:	fa06 f003 	lslle.w	r0, r6, r3
 800adb2:	4318      	orrgt	r0, r3
 800adb4:	f7f5 fba6 	bl	8000504 <__aeabi_ui2d>
 800adb8:	2301      	movs	r3, #1
 800adba:	4606      	mov	r6, r0
 800adbc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800adc0:	3d01      	subs	r5, #1
 800adc2:	9310      	str	r3, [sp, #64]	; 0x40
 800adc4:	e771      	b.n	800acaa <_dtoa_r+0x11a>
 800adc6:	2301      	movs	r3, #1
 800adc8:	e7b6      	b.n	800ad38 <_dtoa_r+0x1a8>
 800adca:	900e      	str	r0, [sp, #56]	; 0x38
 800adcc:	e7b5      	b.n	800ad3a <_dtoa_r+0x1aa>
 800adce:	f1ca 0300 	rsb	r3, sl, #0
 800add2:	9306      	str	r3, [sp, #24]
 800add4:	2300      	movs	r3, #0
 800add6:	eba8 080a 	sub.w	r8, r8, sl
 800adda:	930d      	str	r3, [sp, #52]	; 0x34
 800addc:	e7c2      	b.n	800ad64 <_dtoa_r+0x1d4>
 800adde:	2300      	movs	r3, #0
 800ade0:	9308      	str	r3, [sp, #32]
 800ade2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	dc39      	bgt.n	800ae5c <_dtoa_r+0x2cc>
 800ade8:	f04f 0901 	mov.w	r9, #1
 800adec:	f8cd 9004 	str.w	r9, [sp, #4]
 800adf0:	464b      	mov	r3, r9
 800adf2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800adf6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800adf8:	2200      	movs	r2, #0
 800adfa:	6042      	str	r2, [r0, #4]
 800adfc:	2204      	movs	r2, #4
 800adfe:	f102 0614 	add.w	r6, r2, #20
 800ae02:	429e      	cmp	r6, r3
 800ae04:	6841      	ldr	r1, [r0, #4]
 800ae06:	d92f      	bls.n	800ae68 <_dtoa_r+0x2d8>
 800ae08:	4620      	mov	r0, r4
 800ae0a:	f000 fdc1 	bl	800b990 <_Balloc>
 800ae0e:	9000      	str	r0, [sp, #0]
 800ae10:	2800      	cmp	r0, #0
 800ae12:	d14b      	bne.n	800aeac <_dtoa_r+0x31c>
 800ae14:	4b24      	ldr	r3, [pc, #144]	; (800aea8 <_dtoa_r+0x318>)
 800ae16:	4602      	mov	r2, r0
 800ae18:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ae1c:	e6d1      	b.n	800abc2 <_dtoa_r+0x32>
 800ae1e:	2301      	movs	r3, #1
 800ae20:	e7de      	b.n	800ade0 <_dtoa_r+0x250>
 800ae22:	2300      	movs	r3, #0
 800ae24:	9308      	str	r3, [sp, #32]
 800ae26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae28:	eb0a 0903 	add.w	r9, sl, r3
 800ae2c:	f109 0301 	add.w	r3, r9, #1
 800ae30:	2b01      	cmp	r3, #1
 800ae32:	9301      	str	r3, [sp, #4]
 800ae34:	bfb8      	it	lt
 800ae36:	2301      	movlt	r3, #1
 800ae38:	e7dd      	b.n	800adf6 <_dtoa_r+0x266>
 800ae3a:	2301      	movs	r3, #1
 800ae3c:	e7f2      	b.n	800ae24 <_dtoa_r+0x294>
 800ae3e:	2501      	movs	r5, #1
 800ae40:	2300      	movs	r3, #0
 800ae42:	9305      	str	r3, [sp, #20]
 800ae44:	9508      	str	r5, [sp, #32]
 800ae46:	f04f 39ff 	mov.w	r9, #4294967295
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	f8cd 9004 	str.w	r9, [sp, #4]
 800ae50:	2312      	movs	r3, #18
 800ae52:	9209      	str	r2, [sp, #36]	; 0x24
 800ae54:	e7cf      	b.n	800adf6 <_dtoa_r+0x266>
 800ae56:	2301      	movs	r3, #1
 800ae58:	9308      	str	r3, [sp, #32]
 800ae5a:	e7f4      	b.n	800ae46 <_dtoa_r+0x2b6>
 800ae5c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800ae60:	f8cd 9004 	str.w	r9, [sp, #4]
 800ae64:	464b      	mov	r3, r9
 800ae66:	e7c6      	b.n	800adf6 <_dtoa_r+0x266>
 800ae68:	3101      	adds	r1, #1
 800ae6a:	6041      	str	r1, [r0, #4]
 800ae6c:	0052      	lsls	r2, r2, #1
 800ae6e:	e7c6      	b.n	800adfe <_dtoa_r+0x26e>
 800ae70:	636f4361 	.word	0x636f4361
 800ae74:	3fd287a7 	.word	0x3fd287a7
 800ae78:	8b60c8b3 	.word	0x8b60c8b3
 800ae7c:	3fc68a28 	.word	0x3fc68a28
 800ae80:	509f79fb 	.word	0x509f79fb
 800ae84:	3fd34413 	.word	0x3fd34413
 800ae88:	0800d031 	.word	0x0800d031
 800ae8c:	0800d048 	.word	0x0800d048
 800ae90:	7ff00000 	.word	0x7ff00000
 800ae94:	0800d02d 	.word	0x0800d02d
 800ae98:	0800d024 	.word	0x0800d024
 800ae9c:	0800d001 	.word	0x0800d001
 800aea0:	3ff80000 	.word	0x3ff80000
 800aea4:	0800d1a0 	.word	0x0800d1a0
 800aea8:	0800d0a7 	.word	0x0800d0a7
 800aeac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aeae:	9a00      	ldr	r2, [sp, #0]
 800aeb0:	601a      	str	r2, [r3, #0]
 800aeb2:	9b01      	ldr	r3, [sp, #4]
 800aeb4:	2b0e      	cmp	r3, #14
 800aeb6:	f200 80ad 	bhi.w	800b014 <_dtoa_r+0x484>
 800aeba:	2d00      	cmp	r5, #0
 800aebc:	f000 80aa 	beq.w	800b014 <_dtoa_r+0x484>
 800aec0:	f1ba 0f00 	cmp.w	sl, #0
 800aec4:	dd36      	ble.n	800af34 <_dtoa_r+0x3a4>
 800aec6:	4ac3      	ldr	r2, [pc, #780]	; (800b1d4 <_dtoa_r+0x644>)
 800aec8:	f00a 030f 	and.w	r3, sl, #15
 800aecc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800aed0:	ed93 7b00 	vldr	d7, [r3]
 800aed4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800aed8:	ea4f 172a 	mov.w	r7, sl, asr #4
 800aedc:	eeb0 8a47 	vmov.f32	s16, s14
 800aee0:	eef0 8a67 	vmov.f32	s17, s15
 800aee4:	d016      	beq.n	800af14 <_dtoa_r+0x384>
 800aee6:	4bbc      	ldr	r3, [pc, #752]	; (800b1d8 <_dtoa_r+0x648>)
 800aee8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800aeec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800aef0:	f7f5 fcac 	bl	800084c <__aeabi_ddiv>
 800aef4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aef8:	f007 070f 	and.w	r7, r7, #15
 800aefc:	2503      	movs	r5, #3
 800aefe:	4eb6      	ldr	r6, [pc, #728]	; (800b1d8 <_dtoa_r+0x648>)
 800af00:	b957      	cbnz	r7, 800af18 <_dtoa_r+0x388>
 800af02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af06:	ec53 2b18 	vmov	r2, r3, d8
 800af0a:	f7f5 fc9f 	bl	800084c <__aeabi_ddiv>
 800af0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af12:	e029      	b.n	800af68 <_dtoa_r+0x3d8>
 800af14:	2502      	movs	r5, #2
 800af16:	e7f2      	b.n	800aefe <_dtoa_r+0x36e>
 800af18:	07f9      	lsls	r1, r7, #31
 800af1a:	d508      	bpl.n	800af2e <_dtoa_r+0x39e>
 800af1c:	ec51 0b18 	vmov	r0, r1, d8
 800af20:	e9d6 2300 	ldrd	r2, r3, [r6]
 800af24:	f7f5 fb68 	bl	80005f8 <__aeabi_dmul>
 800af28:	ec41 0b18 	vmov	d8, r0, r1
 800af2c:	3501      	adds	r5, #1
 800af2e:	107f      	asrs	r7, r7, #1
 800af30:	3608      	adds	r6, #8
 800af32:	e7e5      	b.n	800af00 <_dtoa_r+0x370>
 800af34:	f000 80a6 	beq.w	800b084 <_dtoa_r+0x4f4>
 800af38:	f1ca 0600 	rsb	r6, sl, #0
 800af3c:	4ba5      	ldr	r3, [pc, #660]	; (800b1d4 <_dtoa_r+0x644>)
 800af3e:	4fa6      	ldr	r7, [pc, #664]	; (800b1d8 <_dtoa_r+0x648>)
 800af40:	f006 020f 	and.w	r2, r6, #15
 800af44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800af48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af4c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800af50:	f7f5 fb52 	bl	80005f8 <__aeabi_dmul>
 800af54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af58:	1136      	asrs	r6, r6, #4
 800af5a:	2300      	movs	r3, #0
 800af5c:	2502      	movs	r5, #2
 800af5e:	2e00      	cmp	r6, #0
 800af60:	f040 8085 	bne.w	800b06e <_dtoa_r+0x4de>
 800af64:	2b00      	cmp	r3, #0
 800af66:	d1d2      	bne.n	800af0e <_dtoa_r+0x37e>
 800af68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	f000 808c 	beq.w	800b088 <_dtoa_r+0x4f8>
 800af70:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800af74:	4b99      	ldr	r3, [pc, #612]	; (800b1dc <_dtoa_r+0x64c>)
 800af76:	2200      	movs	r2, #0
 800af78:	4630      	mov	r0, r6
 800af7a:	4639      	mov	r1, r7
 800af7c:	f7f5 fdae 	bl	8000adc <__aeabi_dcmplt>
 800af80:	2800      	cmp	r0, #0
 800af82:	f000 8081 	beq.w	800b088 <_dtoa_r+0x4f8>
 800af86:	9b01      	ldr	r3, [sp, #4]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d07d      	beq.n	800b088 <_dtoa_r+0x4f8>
 800af8c:	f1b9 0f00 	cmp.w	r9, #0
 800af90:	dd3c      	ble.n	800b00c <_dtoa_r+0x47c>
 800af92:	f10a 33ff 	add.w	r3, sl, #4294967295
 800af96:	9307      	str	r3, [sp, #28]
 800af98:	2200      	movs	r2, #0
 800af9a:	4b91      	ldr	r3, [pc, #580]	; (800b1e0 <_dtoa_r+0x650>)
 800af9c:	4630      	mov	r0, r6
 800af9e:	4639      	mov	r1, r7
 800afa0:	f7f5 fb2a 	bl	80005f8 <__aeabi_dmul>
 800afa4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800afa8:	3501      	adds	r5, #1
 800afaa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800afae:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800afb2:	4628      	mov	r0, r5
 800afb4:	f7f5 fab6 	bl	8000524 <__aeabi_i2d>
 800afb8:	4632      	mov	r2, r6
 800afba:	463b      	mov	r3, r7
 800afbc:	f7f5 fb1c 	bl	80005f8 <__aeabi_dmul>
 800afc0:	4b88      	ldr	r3, [pc, #544]	; (800b1e4 <_dtoa_r+0x654>)
 800afc2:	2200      	movs	r2, #0
 800afc4:	f7f5 f962 	bl	800028c <__adddf3>
 800afc8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800afcc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800afd0:	9303      	str	r3, [sp, #12]
 800afd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d15c      	bne.n	800b092 <_dtoa_r+0x502>
 800afd8:	4b83      	ldr	r3, [pc, #524]	; (800b1e8 <_dtoa_r+0x658>)
 800afda:	2200      	movs	r2, #0
 800afdc:	4630      	mov	r0, r6
 800afde:	4639      	mov	r1, r7
 800afe0:	f7f5 f952 	bl	8000288 <__aeabi_dsub>
 800afe4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800afe8:	4606      	mov	r6, r0
 800afea:	460f      	mov	r7, r1
 800afec:	f7f5 fd94 	bl	8000b18 <__aeabi_dcmpgt>
 800aff0:	2800      	cmp	r0, #0
 800aff2:	f040 8296 	bne.w	800b522 <_dtoa_r+0x992>
 800aff6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800affa:	4630      	mov	r0, r6
 800affc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b000:	4639      	mov	r1, r7
 800b002:	f7f5 fd6b 	bl	8000adc <__aeabi_dcmplt>
 800b006:	2800      	cmp	r0, #0
 800b008:	f040 8288 	bne.w	800b51c <_dtoa_r+0x98c>
 800b00c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b010:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b014:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b016:	2b00      	cmp	r3, #0
 800b018:	f2c0 8158 	blt.w	800b2cc <_dtoa_r+0x73c>
 800b01c:	f1ba 0f0e 	cmp.w	sl, #14
 800b020:	f300 8154 	bgt.w	800b2cc <_dtoa_r+0x73c>
 800b024:	4b6b      	ldr	r3, [pc, #428]	; (800b1d4 <_dtoa_r+0x644>)
 800b026:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b02a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b02e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b030:	2b00      	cmp	r3, #0
 800b032:	f280 80e3 	bge.w	800b1fc <_dtoa_r+0x66c>
 800b036:	9b01      	ldr	r3, [sp, #4]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	f300 80df 	bgt.w	800b1fc <_dtoa_r+0x66c>
 800b03e:	f040 826d 	bne.w	800b51c <_dtoa_r+0x98c>
 800b042:	4b69      	ldr	r3, [pc, #420]	; (800b1e8 <_dtoa_r+0x658>)
 800b044:	2200      	movs	r2, #0
 800b046:	4640      	mov	r0, r8
 800b048:	4649      	mov	r1, r9
 800b04a:	f7f5 fad5 	bl	80005f8 <__aeabi_dmul>
 800b04e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b052:	f7f5 fd57 	bl	8000b04 <__aeabi_dcmpge>
 800b056:	9e01      	ldr	r6, [sp, #4]
 800b058:	4637      	mov	r7, r6
 800b05a:	2800      	cmp	r0, #0
 800b05c:	f040 8243 	bne.w	800b4e6 <_dtoa_r+0x956>
 800b060:	9d00      	ldr	r5, [sp, #0]
 800b062:	2331      	movs	r3, #49	; 0x31
 800b064:	f805 3b01 	strb.w	r3, [r5], #1
 800b068:	f10a 0a01 	add.w	sl, sl, #1
 800b06c:	e23f      	b.n	800b4ee <_dtoa_r+0x95e>
 800b06e:	07f2      	lsls	r2, r6, #31
 800b070:	d505      	bpl.n	800b07e <_dtoa_r+0x4ee>
 800b072:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b076:	f7f5 fabf 	bl	80005f8 <__aeabi_dmul>
 800b07a:	3501      	adds	r5, #1
 800b07c:	2301      	movs	r3, #1
 800b07e:	1076      	asrs	r6, r6, #1
 800b080:	3708      	adds	r7, #8
 800b082:	e76c      	b.n	800af5e <_dtoa_r+0x3ce>
 800b084:	2502      	movs	r5, #2
 800b086:	e76f      	b.n	800af68 <_dtoa_r+0x3d8>
 800b088:	9b01      	ldr	r3, [sp, #4]
 800b08a:	f8cd a01c 	str.w	sl, [sp, #28]
 800b08e:	930c      	str	r3, [sp, #48]	; 0x30
 800b090:	e78d      	b.n	800afae <_dtoa_r+0x41e>
 800b092:	9900      	ldr	r1, [sp, #0]
 800b094:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b096:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b098:	4b4e      	ldr	r3, [pc, #312]	; (800b1d4 <_dtoa_r+0x644>)
 800b09a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b09e:	4401      	add	r1, r0
 800b0a0:	9102      	str	r1, [sp, #8]
 800b0a2:	9908      	ldr	r1, [sp, #32]
 800b0a4:	eeb0 8a47 	vmov.f32	s16, s14
 800b0a8:	eef0 8a67 	vmov.f32	s17, s15
 800b0ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b0b0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b0b4:	2900      	cmp	r1, #0
 800b0b6:	d045      	beq.n	800b144 <_dtoa_r+0x5b4>
 800b0b8:	494c      	ldr	r1, [pc, #304]	; (800b1ec <_dtoa_r+0x65c>)
 800b0ba:	2000      	movs	r0, #0
 800b0bc:	f7f5 fbc6 	bl	800084c <__aeabi_ddiv>
 800b0c0:	ec53 2b18 	vmov	r2, r3, d8
 800b0c4:	f7f5 f8e0 	bl	8000288 <__aeabi_dsub>
 800b0c8:	9d00      	ldr	r5, [sp, #0]
 800b0ca:	ec41 0b18 	vmov	d8, r0, r1
 800b0ce:	4639      	mov	r1, r7
 800b0d0:	4630      	mov	r0, r6
 800b0d2:	f7f5 fd41 	bl	8000b58 <__aeabi_d2iz>
 800b0d6:	900c      	str	r0, [sp, #48]	; 0x30
 800b0d8:	f7f5 fa24 	bl	8000524 <__aeabi_i2d>
 800b0dc:	4602      	mov	r2, r0
 800b0de:	460b      	mov	r3, r1
 800b0e0:	4630      	mov	r0, r6
 800b0e2:	4639      	mov	r1, r7
 800b0e4:	f7f5 f8d0 	bl	8000288 <__aeabi_dsub>
 800b0e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b0ea:	3330      	adds	r3, #48	; 0x30
 800b0ec:	f805 3b01 	strb.w	r3, [r5], #1
 800b0f0:	ec53 2b18 	vmov	r2, r3, d8
 800b0f4:	4606      	mov	r6, r0
 800b0f6:	460f      	mov	r7, r1
 800b0f8:	f7f5 fcf0 	bl	8000adc <__aeabi_dcmplt>
 800b0fc:	2800      	cmp	r0, #0
 800b0fe:	d165      	bne.n	800b1cc <_dtoa_r+0x63c>
 800b100:	4632      	mov	r2, r6
 800b102:	463b      	mov	r3, r7
 800b104:	4935      	ldr	r1, [pc, #212]	; (800b1dc <_dtoa_r+0x64c>)
 800b106:	2000      	movs	r0, #0
 800b108:	f7f5 f8be 	bl	8000288 <__aeabi_dsub>
 800b10c:	ec53 2b18 	vmov	r2, r3, d8
 800b110:	f7f5 fce4 	bl	8000adc <__aeabi_dcmplt>
 800b114:	2800      	cmp	r0, #0
 800b116:	f040 80b9 	bne.w	800b28c <_dtoa_r+0x6fc>
 800b11a:	9b02      	ldr	r3, [sp, #8]
 800b11c:	429d      	cmp	r5, r3
 800b11e:	f43f af75 	beq.w	800b00c <_dtoa_r+0x47c>
 800b122:	4b2f      	ldr	r3, [pc, #188]	; (800b1e0 <_dtoa_r+0x650>)
 800b124:	ec51 0b18 	vmov	r0, r1, d8
 800b128:	2200      	movs	r2, #0
 800b12a:	f7f5 fa65 	bl	80005f8 <__aeabi_dmul>
 800b12e:	4b2c      	ldr	r3, [pc, #176]	; (800b1e0 <_dtoa_r+0x650>)
 800b130:	ec41 0b18 	vmov	d8, r0, r1
 800b134:	2200      	movs	r2, #0
 800b136:	4630      	mov	r0, r6
 800b138:	4639      	mov	r1, r7
 800b13a:	f7f5 fa5d 	bl	80005f8 <__aeabi_dmul>
 800b13e:	4606      	mov	r6, r0
 800b140:	460f      	mov	r7, r1
 800b142:	e7c4      	b.n	800b0ce <_dtoa_r+0x53e>
 800b144:	ec51 0b17 	vmov	r0, r1, d7
 800b148:	f7f5 fa56 	bl	80005f8 <__aeabi_dmul>
 800b14c:	9b02      	ldr	r3, [sp, #8]
 800b14e:	9d00      	ldr	r5, [sp, #0]
 800b150:	930c      	str	r3, [sp, #48]	; 0x30
 800b152:	ec41 0b18 	vmov	d8, r0, r1
 800b156:	4639      	mov	r1, r7
 800b158:	4630      	mov	r0, r6
 800b15a:	f7f5 fcfd 	bl	8000b58 <__aeabi_d2iz>
 800b15e:	9011      	str	r0, [sp, #68]	; 0x44
 800b160:	f7f5 f9e0 	bl	8000524 <__aeabi_i2d>
 800b164:	4602      	mov	r2, r0
 800b166:	460b      	mov	r3, r1
 800b168:	4630      	mov	r0, r6
 800b16a:	4639      	mov	r1, r7
 800b16c:	f7f5 f88c 	bl	8000288 <__aeabi_dsub>
 800b170:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b172:	3330      	adds	r3, #48	; 0x30
 800b174:	f805 3b01 	strb.w	r3, [r5], #1
 800b178:	9b02      	ldr	r3, [sp, #8]
 800b17a:	429d      	cmp	r5, r3
 800b17c:	4606      	mov	r6, r0
 800b17e:	460f      	mov	r7, r1
 800b180:	f04f 0200 	mov.w	r2, #0
 800b184:	d134      	bne.n	800b1f0 <_dtoa_r+0x660>
 800b186:	4b19      	ldr	r3, [pc, #100]	; (800b1ec <_dtoa_r+0x65c>)
 800b188:	ec51 0b18 	vmov	r0, r1, d8
 800b18c:	f7f5 f87e 	bl	800028c <__adddf3>
 800b190:	4602      	mov	r2, r0
 800b192:	460b      	mov	r3, r1
 800b194:	4630      	mov	r0, r6
 800b196:	4639      	mov	r1, r7
 800b198:	f7f5 fcbe 	bl	8000b18 <__aeabi_dcmpgt>
 800b19c:	2800      	cmp	r0, #0
 800b19e:	d175      	bne.n	800b28c <_dtoa_r+0x6fc>
 800b1a0:	ec53 2b18 	vmov	r2, r3, d8
 800b1a4:	4911      	ldr	r1, [pc, #68]	; (800b1ec <_dtoa_r+0x65c>)
 800b1a6:	2000      	movs	r0, #0
 800b1a8:	f7f5 f86e 	bl	8000288 <__aeabi_dsub>
 800b1ac:	4602      	mov	r2, r0
 800b1ae:	460b      	mov	r3, r1
 800b1b0:	4630      	mov	r0, r6
 800b1b2:	4639      	mov	r1, r7
 800b1b4:	f7f5 fc92 	bl	8000adc <__aeabi_dcmplt>
 800b1b8:	2800      	cmp	r0, #0
 800b1ba:	f43f af27 	beq.w	800b00c <_dtoa_r+0x47c>
 800b1be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b1c0:	1e6b      	subs	r3, r5, #1
 800b1c2:	930c      	str	r3, [sp, #48]	; 0x30
 800b1c4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b1c8:	2b30      	cmp	r3, #48	; 0x30
 800b1ca:	d0f8      	beq.n	800b1be <_dtoa_r+0x62e>
 800b1cc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b1d0:	e04a      	b.n	800b268 <_dtoa_r+0x6d8>
 800b1d2:	bf00      	nop
 800b1d4:	0800d1a0 	.word	0x0800d1a0
 800b1d8:	0800d178 	.word	0x0800d178
 800b1dc:	3ff00000 	.word	0x3ff00000
 800b1e0:	40240000 	.word	0x40240000
 800b1e4:	401c0000 	.word	0x401c0000
 800b1e8:	40140000 	.word	0x40140000
 800b1ec:	3fe00000 	.word	0x3fe00000
 800b1f0:	4baf      	ldr	r3, [pc, #700]	; (800b4b0 <_dtoa_r+0x920>)
 800b1f2:	f7f5 fa01 	bl	80005f8 <__aeabi_dmul>
 800b1f6:	4606      	mov	r6, r0
 800b1f8:	460f      	mov	r7, r1
 800b1fa:	e7ac      	b.n	800b156 <_dtoa_r+0x5c6>
 800b1fc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b200:	9d00      	ldr	r5, [sp, #0]
 800b202:	4642      	mov	r2, r8
 800b204:	464b      	mov	r3, r9
 800b206:	4630      	mov	r0, r6
 800b208:	4639      	mov	r1, r7
 800b20a:	f7f5 fb1f 	bl	800084c <__aeabi_ddiv>
 800b20e:	f7f5 fca3 	bl	8000b58 <__aeabi_d2iz>
 800b212:	9002      	str	r0, [sp, #8]
 800b214:	f7f5 f986 	bl	8000524 <__aeabi_i2d>
 800b218:	4642      	mov	r2, r8
 800b21a:	464b      	mov	r3, r9
 800b21c:	f7f5 f9ec 	bl	80005f8 <__aeabi_dmul>
 800b220:	4602      	mov	r2, r0
 800b222:	460b      	mov	r3, r1
 800b224:	4630      	mov	r0, r6
 800b226:	4639      	mov	r1, r7
 800b228:	f7f5 f82e 	bl	8000288 <__aeabi_dsub>
 800b22c:	9e02      	ldr	r6, [sp, #8]
 800b22e:	9f01      	ldr	r7, [sp, #4]
 800b230:	3630      	adds	r6, #48	; 0x30
 800b232:	f805 6b01 	strb.w	r6, [r5], #1
 800b236:	9e00      	ldr	r6, [sp, #0]
 800b238:	1bae      	subs	r6, r5, r6
 800b23a:	42b7      	cmp	r7, r6
 800b23c:	4602      	mov	r2, r0
 800b23e:	460b      	mov	r3, r1
 800b240:	d137      	bne.n	800b2b2 <_dtoa_r+0x722>
 800b242:	f7f5 f823 	bl	800028c <__adddf3>
 800b246:	4642      	mov	r2, r8
 800b248:	464b      	mov	r3, r9
 800b24a:	4606      	mov	r6, r0
 800b24c:	460f      	mov	r7, r1
 800b24e:	f7f5 fc63 	bl	8000b18 <__aeabi_dcmpgt>
 800b252:	b9c8      	cbnz	r0, 800b288 <_dtoa_r+0x6f8>
 800b254:	4642      	mov	r2, r8
 800b256:	464b      	mov	r3, r9
 800b258:	4630      	mov	r0, r6
 800b25a:	4639      	mov	r1, r7
 800b25c:	f7f5 fc34 	bl	8000ac8 <__aeabi_dcmpeq>
 800b260:	b110      	cbz	r0, 800b268 <_dtoa_r+0x6d8>
 800b262:	9b02      	ldr	r3, [sp, #8]
 800b264:	07d9      	lsls	r1, r3, #31
 800b266:	d40f      	bmi.n	800b288 <_dtoa_r+0x6f8>
 800b268:	4620      	mov	r0, r4
 800b26a:	4659      	mov	r1, fp
 800b26c:	f000 fbd0 	bl	800ba10 <_Bfree>
 800b270:	2300      	movs	r3, #0
 800b272:	702b      	strb	r3, [r5, #0]
 800b274:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b276:	f10a 0001 	add.w	r0, sl, #1
 800b27a:	6018      	str	r0, [r3, #0]
 800b27c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b27e:	2b00      	cmp	r3, #0
 800b280:	f43f acd8 	beq.w	800ac34 <_dtoa_r+0xa4>
 800b284:	601d      	str	r5, [r3, #0]
 800b286:	e4d5      	b.n	800ac34 <_dtoa_r+0xa4>
 800b288:	f8cd a01c 	str.w	sl, [sp, #28]
 800b28c:	462b      	mov	r3, r5
 800b28e:	461d      	mov	r5, r3
 800b290:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b294:	2a39      	cmp	r2, #57	; 0x39
 800b296:	d108      	bne.n	800b2aa <_dtoa_r+0x71a>
 800b298:	9a00      	ldr	r2, [sp, #0]
 800b29a:	429a      	cmp	r2, r3
 800b29c:	d1f7      	bne.n	800b28e <_dtoa_r+0x6fe>
 800b29e:	9a07      	ldr	r2, [sp, #28]
 800b2a0:	9900      	ldr	r1, [sp, #0]
 800b2a2:	3201      	adds	r2, #1
 800b2a4:	9207      	str	r2, [sp, #28]
 800b2a6:	2230      	movs	r2, #48	; 0x30
 800b2a8:	700a      	strb	r2, [r1, #0]
 800b2aa:	781a      	ldrb	r2, [r3, #0]
 800b2ac:	3201      	adds	r2, #1
 800b2ae:	701a      	strb	r2, [r3, #0]
 800b2b0:	e78c      	b.n	800b1cc <_dtoa_r+0x63c>
 800b2b2:	4b7f      	ldr	r3, [pc, #508]	; (800b4b0 <_dtoa_r+0x920>)
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	f7f5 f99f 	bl	80005f8 <__aeabi_dmul>
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	2300      	movs	r3, #0
 800b2be:	4606      	mov	r6, r0
 800b2c0:	460f      	mov	r7, r1
 800b2c2:	f7f5 fc01 	bl	8000ac8 <__aeabi_dcmpeq>
 800b2c6:	2800      	cmp	r0, #0
 800b2c8:	d09b      	beq.n	800b202 <_dtoa_r+0x672>
 800b2ca:	e7cd      	b.n	800b268 <_dtoa_r+0x6d8>
 800b2cc:	9a08      	ldr	r2, [sp, #32]
 800b2ce:	2a00      	cmp	r2, #0
 800b2d0:	f000 80c4 	beq.w	800b45c <_dtoa_r+0x8cc>
 800b2d4:	9a05      	ldr	r2, [sp, #20]
 800b2d6:	2a01      	cmp	r2, #1
 800b2d8:	f300 80a8 	bgt.w	800b42c <_dtoa_r+0x89c>
 800b2dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b2de:	2a00      	cmp	r2, #0
 800b2e0:	f000 80a0 	beq.w	800b424 <_dtoa_r+0x894>
 800b2e4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b2e8:	9e06      	ldr	r6, [sp, #24]
 800b2ea:	4645      	mov	r5, r8
 800b2ec:	9a04      	ldr	r2, [sp, #16]
 800b2ee:	2101      	movs	r1, #1
 800b2f0:	441a      	add	r2, r3
 800b2f2:	4620      	mov	r0, r4
 800b2f4:	4498      	add	r8, r3
 800b2f6:	9204      	str	r2, [sp, #16]
 800b2f8:	f000 fc46 	bl	800bb88 <__i2b>
 800b2fc:	4607      	mov	r7, r0
 800b2fe:	2d00      	cmp	r5, #0
 800b300:	dd0b      	ble.n	800b31a <_dtoa_r+0x78a>
 800b302:	9b04      	ldr	r3, [sp, #16]
 800b304:	2b00      	cmp	r3, #0
 800b306:	dd08      	ble.n	800b31a <_dtoa_r+0x78a>
 800b308:	42ab      	cmp	r3, r5
 800b30a:	9a04      	ldr	r2, [sp, #16]
 800b30c:	bfa8      	it	ge
 800b30e:	462b      	movge	r3, r5
 800b310:	eba8 0803 	sub.w	r8, r8, r3
 800b314:	1aed      	subs	r5, r5, r3
 800b316:	1ad3      	subs	r3, r2, r3
 800b318:	9304      	str	r3, [sp, #16]
 800b31a:	9b06      	ldr	r3, [sp, #24]
 800b31c:	b1fb      	cbz	r3, 800b35e <_dtoa_r+0x7ce>
 800b31e:	9b08      	ldr	r3, [sp, #32]
 800b320:	2b00      	cmp	r3, #0
 800b322:	f000 809f 	beq.w	800b464 <_dtoa_r+0x8d4>
 800b326:	2e00      	cmp	r6, #0
 800b328:	dd11      	ble.n	800b34e <_dtoa_r+0x7be>
 800b32a:	4639      	mov	r1, r7
 800b32c:	4632      	mov	r2, r6
 800b32e:	4620      	mov	r0, r4
 800b330:	f000 fce6 	bl	800bd00 <__pow5mult>
 800b334:	465a      	mov	r2, fp
 800b336:	4601      	mov	r1, r0
 800b338:	4607      	mov	r7, r0
 800b33a:	4620      	mov	r0, r4
 800b33c:	f000 fc3a 	bl	800bbb4 <__multiply>
 800b340:	4659      	mov	r1, fp
 800b342:	9007      	str	r0, [sp, #28]
 800b344:	4620      	mov	r0, r4
 800b346:	f000 fb63 	bl	800ba10 <_Bfree>
 800b34a:	9b07      	ldr	r3, [sp, #28]
 800b34c:	469b      	mov	fp, r3
 800b34e:	9b06      	ldr	r3, [sp, #24]
 800b350:	1b9a      	subs	r2, r3, r6
 800b352:	d004      	beq.n	800b35e <_dtoa_r+0x7ce>
 800b354:	4659      	mov	r1, fp
 800b356:	4620      	mov	r0, r4
 800b358:	f000 fcd2 	bl	800bd00 <__pow5mult>
 800b35c:	4683      	mov	fp, r0
 800b35e:	2101      	movs	r1, #1
 800b360:	4620      	mov	r0, r4
 800b362:	f000 fc11 	bl	800bb88 <__i2b>
 800b366:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b368:	2b00      	cmp	r3, #0
 800b36a:	4606      	mov	r6, r0
 800b36c:	dd7c      	ble.n	800b468 <_dtoa_r+0x8d8>
 800b36e:	461a      	mov	r2, r3
 800b370:	4601      	mov	r1, r0
 800b372:	4620      	mov	r0, r4
 800b374:	f000 fcc4 	bl	800bd00 <__pow5mult>
 800b378:	9b05      	ldr	r3, [sp, #20]
 800b37a:	2b01      	cmp	r3, #1
 800b37c:	4606      	mov	r6, r0
 800b37e:	dd76      	ble.n	800b46e <_dtoa_r+0x8de>
 800b380:	2300      	movs	r3, #0
 800b382:	9306      	str	r3, [sp, #24]
 800b384:	6933      	ldr	r3, [r6, #16]
 800b386:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b38a:	6918      	ldr	r0, [r3, #16]
 800b38c:	f000 fbac 	bl	800bae8 <__hi0bits>
 800b390:	f1c0 0020 	rsb	r0, r0, #32
 800b394:	9b04      	ldr	r3, [sp, #16]
 800b396:	4418      	add	r0, r3
 800b398:	f010 001f 	ands.w	r0, r0, #31
 800b39c:	f000 8086 	beq.w	800b4ac <_dtoa_r+0x91c>
 800b3a0:	f1c0 0320 	rsb	r3, r0, #32
 800b3a4:	2b04      	cmp	r3, #4
 800b3a6:	dd7f      	ble.n	800b4a8 <_dtoa_r+0x918>
 800b3a8:	f1c0 001c 	rsb	r0, r0, #28
 800b3ac:	9b04      	ldr	r3, [sp, #16]
 800b3ae:	4403      	add	r3, r0
 800b3b0:	4480      	add	r8, r0
 800b3b2:	4405      	add	r5, r0
 800b3b4:	9304      	str	r3, [sp, #16]
 800b3b6:	f1b8 0f00 	cmp.w	r8, #0
 800b3ba:	dd05      	ble.n	800b3c8 <_dtoa_r+0x838>
 800b3bc:	4659      	mov	r1, fp
 800b3be:	4642      	mov	r2, r8
 800b3c0:	4620      	mov	r0, r4
 800b3c2:	f000 fcf7 	bl	800bdb4 <__lshift>
 800b3c6:	4683      	mov	fp, r0
 800b3c8:	9b04      	ldr	r3, [sp, #16]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	dd05      	ble.n	800b3da <_dtoa_r+0x84a>
 800b3ce:	4631      	mov	r1, r6
 800b3d0:	461a      	mov	r2, r3
 800b3d2:	4620      	mov	r0, r4
 800b3d4:	f000 fcee 	bl	800bdb4 <__lshift>
 800b3d8:	4606      	mov	r6, r0
 800b3da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d069      	beq.n	800b4b4 <_dtoa_r+0x924>
 800b3e0:	4631      	mov	r1, r6
 800b3e2:	4658      	mov	r0, fp
 800b3e4:	f000 fd52 	bl	800be8c <__mcmp>
 800b3e8:	2800      	cmp	r0, #0
 800b3ea:	da63      	bge.n	800b4b4 <_dtoa_r+0x924>
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	4659      	mov	r1, fp
 800b3f0:	220a      	movs	r2, #10
 800b3f2:	4620      	mov	r0, r4
 800b3f4:	f000 fb2e 	bl	800ba54 <__multadd>
 800b3f8:	9b08      	ldr	r3, [sp, #32]
 800b3fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b3fe:	4683      	mov	fp, r0
 800b400:	2b00      	cmp	r3, #0
 800b402:	f000 818f 	beq.w	800b724 <_dtoa_r+0xb94>
 800b406:	4639      	mov	r1, r7
 800b408:	2300      	movs	r3, #0
 800b40a:	220a      	movs	r2, #10
 800b40c:	4620      	mov	r0, r4
 800b40e:	f000 fb21 	bl	800ba54 <__multadd>
 800b412:	f1b9 0f00 	cmp.w	r9, #0
 800b416:	4607      	mov	r7, r0
 800b418:	f300 808e 	bgt.w	800b538 <_dtoa_r+0x9a8>
 800b41c:	9b05      	ldr	r3, [sp, #20]
 800b41e:	2b02      	cmp	r3, #2
 800b420:	dc50      	bgt.n	800b4c4 <_dtoa_r+0x934>
 800b422:	e089      	b.n	800b538 <_dtoa_r+0x9a8>
 800b424:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b426:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b42a:	e75d      	b.n	800b2e8 <_dtoa_r+0x758>
 800b42c:	9b01      	ldr	r3, [sp, #4]
 800b42e:	1e5e      	subs	r6, r3, #1
 800b430:	9b06      	ldr	r3, [sp, #24]
 800b432:	42b3      	cmp	r3, r6
 800b434:	bfbf      	itttt	lt
 800b436:	9b06      	ldrlt	r3, [sp, #24]
 800b438:	9606      	strlt	r6, [sp, #24]
 800b43a:	1af2      	sublt	r2, r6, r3
 800b43c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800b43e:	bfb6      	itet	lt
 800b440:	189b      	addlt	r3, r3, r2
 800b442:	1b9e      	subge	r6, r3, r6
 800b444:	930d      	strlt	r3, [sp, #52]	; 0x34
 800b446:	9b01      	ldr	r3, [sp, #4]
 800b448:	bfb8      	it	lt
 800b44a:	2600      	movlt	r6, #0
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	bfb5      	itete	lt
 800b450:	eba8 0503 	sublt.w	r5, r8, r3
 800b454:	9b01      	ldrge	r3, [sp, #4]
 800b456:	2300      	movlt	r3, #0
 800b458:	4645      	movge	r5, r8
 800b45a:	e747      	b.n	800b2ec <_dtoa_r+0x75c>
 800b45c:	9e06      	ldr	r6, [sp, #24]
 800b45e:	9f08      	ldr	r7, [sp, #32]
 800b460:	4645      	mov	r5, r8
 800b462:	e74c      	b.n	800b2fe <_dtoa_r+0x76e>
 800b464:	9a06      	ldr	r2, [sp, #24]
 800b466:	e775      	b.n	800b354 <_dtoa_r+0x7c4>
 800b468:	9b05      	ldr	r3, [sp, #20]
 800b46a:	2b01      	cmp	r3, #1
 800b46c:	dc18      	bgt.n	800b4a0 <_dtoa_r+0x910>
 800b46e:	9b02      	ldr	r3, [sp, #8]
 800b470:	b9b3      	cbnz	r3, 800b4a0 <_dtoa_r+0x910>
 800b472:	9b03      	ldr	r3, [sp, #12]
 800b474:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b478:	b9a3      	cbnz	r3, 800b4a4 <_dtoa_r+0x914>
 800b47a:	9b03      	ldr	r3, [sp, #12]
 800b47c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b480:	0d1b      	lsrs	r3, r3, #20
 800b482:	051b      	lsls	r3, r3, #20
 800b484:	b12b      	cbz	r3, 800b492 <_dtoa_r+0x902>
 800b486:	9b04      	ldr	r3, [sp, #16]
 800b488:	3301      	adds	r3, #1
 800b48a:	9304      	str	r3, [sp, #16]
 800b48c:	f108 0801 	add.w	r8, r8, #1
 800b490:	2301      	movs	r3, #1
 800b492:	9306      	str	r3, [sp, #24]
 800b494:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b496:	2b00      	cmp	r3, #0
 800b498:	f47f af74 	bne.w	800b384 <_dtoa_r+0x7f4>
 800b49c:	2001      	movs	r0, #1
 800b49e:	e779      	b.n	800b394 <_dtoa_r+0x804>
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	e7f6      	b.n	800b492 <_dtoa_r+0x902>
 800b4a4:	9b02      	ldr	r3, [sp, #8]
 800b4a6:	e7f4      	b.n	800b492 <_dtoa_r+0x902>
 800b4a8:	d085      	beq.n	800b3b6 <_dtoa_r+0x826>
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	301c      	adds	r0, #28
 800b4ae:	e77d      	b.n	800b3ac <_dtoa_r+0x81c>
 800b4b0:	40240000 	.word	0x40240000
 800b4b4:	9b01      	ldr	r3, [sp, #4]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	dc38      	bgt.n	800b52c <_dtoa_r+0x99c>
 800b4ba:	9b05      	ldr	r3, [sp, #20]
 800b4bc:	2b02      	cmp	r3, #2
 800b4be:	dd35      	ble.n	800b52c <_dtoa_r+0x99c>
 800b4c0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b4c4:	f1b9 0f00 	cmp.w	r9, #0
 800b4c8:	d10d      	bne.n	800b4e6 <_dtoa_r+0x956>
 800b4ca:	4631      	mov	r1, r6
 800b4cc:	464b      	mov	r3, r9
 800b4ce:	2205      	movs	r2, #5
 800b4d0:	4620      	mov	r0, r4
 800b4d2:	f000 fabf 	bl	800ba54 <__multadd>
 800b4d6:	4601      	mov	r1, r0
 800b4d8:	4606      	mov	r6, r0
 800b4da:	4658      	mov	r0, fp
 800b4dc:	f000 fcd6 	bl	800be8c <__mcmp>
 800b4e0:	2800      	cmp	r0, #0
 800b4e2:	f73f adbd 	bgt.w	800b060 <_dtoa_r+0x4d0>
 800b4e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4e8:	9d00      	ldr	r5, [sp, #0]
 800b4ea:	ea6f 0a03 	mvn.w	sl, r3
 800b4ee:	f04f 0800 	mov.w	r8, #0
 800b4f2:	4631      	mov	r1, r6
 800b4f4:	4620      	mov	r0, r4
 800b4f6:	f000 fa8b 	bl	800ba10 <_Bfree>
 800b4fa:	2f00      	cmp	r7, #0
 800b4fc:	f43f aeb4 	beq.w	800b268 <_dtoa_r+0x6d8>
 800b500:	f1b8 0f00 	cmp.w	r8, #0
 800b504:	d005      	beq.n	800b512 <_dtoa_r+0x982>
 800b506:	45b8      	cmp	r8, r7
 800b508:	d003      	beq.n	800b512 <_dtoa_r+0x982>
 800b50a:	4641      	mov	r1, r8
 800b50c:	4620      	mov	r0, r4
 800b50e:	f000 fa7f 	bl	800ba10 <_Bfree>
 800b512:	4639      	mov	r1, r7
 800b514:	4620      	mov	r0, r4
 800b516:	f000 fa7b 	bl	800ba10 <_Bfree>
 800b51a:	e6a5      	b.n	800b268 <_dtoa_r+0x6d8>
 800b51c:	2600      	movs	r6, #0
 800b51e:	4637      	mov	r7, r6
 800b520:	e7e1      	b.n	800b4e6 <_dtoa_r+0x956>
 800b522:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b524:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b528:	4637      	mov	r7, r6
 800b52a:	e599      	b.n	800b060 <_dtoa_r+0x4d0>
 800b52c:	9b08      	ldr	r3, [sp, #32]
 800b52e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b532:	2b00      	cmp	r3, #0
 800b534:	f000 80fd 	beq.w	800b732 <_dtoa_r+0xba2>
 800b538:	2d00      	cmp	r5, #0
 800b53a:	dd05      	ble.n	800b548 <_dtoa_r+0x9b8>
 800b53c:	4639      	mov	r1, r7
 800b53e:	462a      	mov	r2, r5
 800b540:	4620      	mov	r0, r4
 800b542:	f000 fc37 	bl	800bdb4 <__lshift>
 800b546:	4607      	mov	r7, r0
 800b548:	9b06      	ldr	r3, [sp, #24]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d05c      	beq.n	800b608 <_dtoa_r+0xa78>
 800b54e:	6879      	ldr	r1, [r7, #4]
 800b550:	4620      	mov	r0, r4
 800b552:	f000 fa1d 	bl	800b990 <_Balloc>
 800b556:	4605      	mov	r5, r0
 800b558:	b928      	cbnz	r0, 800b566 <_dtoa_r+0x9d6>
 800b55a:	4b80      	ldr	r3, [pc, #512]	; (800b75c <_dtoa_r+0xbcc>)
 800b55c:	4602      	mov	r2, r0
 800b55e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b562:	f7ff bb2e 	b.w	800abc2 <_dtoa_r+0x32>
 800b566:	693a      	ldr	r2, [r7, #16]
 800b568:	3202      	adds	r2, #2
 800b56a:	0092      	lsls	r2, r2, #2
 800b56c:	f107 010c 	add.w	r1, r7, #12
 800b570:	300c      	adds	r0, #12
 800b572:	f000 f9ff 	bl	800b974 <memcpy>
 800b576:	2201      	movs	r2, #1
 800b578:	4629      	mov	r1, r5
 800b57a:	4620      	mov	r0, r4
 800b57c:	f000 fc1a 	bl	800bdb4 <__lshift>
 800b580:	9b00      	ldr	r3, [sp, #0]
 800b582:	3301      	adds	r3, #1
 800b584:	9301      	str	r3, [sp, #4]
 800b586:	9b00      	ldr	r3, [sp, #0]
 800b588:	444b      	add	r3, r9
 800b58a:	9307      	str	r3, [sp, #28]
 800b58c:	9b02      	ldr	r3, [sp, #8]
 800b58e:	f003 0301 	and.w	r3, r3, #1
 800b592:	46b8      	mov	r8, r7
 800b594:	9306      	str	r3, [sp, #24]
 800b596:	4607      	mov	r7, r0
 800b598:	9b01      	ldr	r3, [sp, #4]
 800b59a:	4631      	mov	r1, r6
 800b59c:	3b01      	subs	r3, #1
 800b59e:	4658      	mov	r0, fp
 800b5a0:	9302      	str	r3, [sp, #8]
 800b5a2:	f7ff fa69 	bl	800aa78 <quorem>
 800b5a6:	4603      	mov	r3, r0
 800b5a8:	3330      	adds	r3, #48	; 0x30
 800b5aa:	9004      	str	r0, [sp, #16]
 800b5ac:	4641      	mov	r1, r8
 800b5ae:	4658      	mov	r0, fp
 800b5b0:	9308      	str	r3, [sp, #32]
 800b5b2:	f000 fc6b 	bl	800be8c <__mcmp>
 800b5b6:	463a      	mov	r2, r7
 800b5b8:	4681      	mov	r9, r0
 800b5ba:	4631      	mov	r1, r6
 800b5bc:	4620      	mov	r0, r4
 800b5be:	f000 fc81 	bl	800bec4 <__mdiff>
 800b5c2:	68c2      	ldr	r2, [r0, #12]
 800b5c4:	9b08      	ldr	r3, [sp, #32]
 800b5c6:	4605      	mov	r5, r0
 800b5c8:	bb02      	cbnz	r2, 800b60c <_dtoa_r+0xa7c>
 800b5ca:	4601      	mov	r1, r0
 800b5cc:	4658      	mov	r0, fp
 800b5ce:	f000 fc5d 	bl	800be8c <__mcmp>
 800b5d2:	9b08      	ldr	r3, [sp, #32]
 800b5d4:	4602      	mov	r2, r0
 800b5d6:	4629      	mov	r1, r5
 800b5d8:	4620      	mov	r0, r4
 800b5da:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800b5de:	f000 fa17 	bl	800ba10 <_Bfree>
 800b5e2:	9b05      	ldr	r3, [sp, #20]
 800b5e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b5e6:	9d01      	ldr	r5, [sp, #4]
 800b5e8:	ea43 0102 	orr.w	r1, r3, r2
 800b5ec:	9b06      	ldr	r3, [sp, #24]
 800b5ee:	430b      	orrs	r3, r1
 800b5f0:	9b08      	ldr	r3, [sp, #32]
 800b5f2:	d10d      	bne.n	800b610 <_dtoa_r+0xa80>
 800b5f4:	2b39      	cmp	r3, #57	; 0x39
 800b5f6:	d029      	beq.n	800b64c <_dtoa_r+0xabc>
 800b5f8:	f1b9 0f00 	cmp.w	r9, #0
 800b5fc:	dd01      	ble.n	800b602 <_dtoa_r+0xa72>
 800b5fe:	9b04      	ldr	r3, [sp, #16]
 800b600:	3331      	adds	r3, #49	; 0x31
 800b602:	9a02      	ldr	r2, [sp, #8]
 800b604:	7013      	strb	r3, [r2, #0]
 800b606:	e774      	b.n	800b4f2 <_dtoa_r+0x962>
 800b608:	4638      	mov	r0, r7
 800b60a:	e7b9      	b.n	800b580 <_dtoa_r+0x9f0>
 800b60c:	2201      	movs	r2, #1
 800b60e:	e7e2      	b.n	800b5d6 <_dtoa_r+0xa46>
 800b610:	f1b9 0f00 	cmp.w	r9, #0
 800b614:	db06      	blt.n	800b624 <_dtoa_r+0xa94>
 800b616:	9905      	ldr	r1, [sp, #20]
 800b618:	ea41 0909 	orr.w	r9, r1, r9
 800b61c:	9906      	ldr	r1, [sp, #24]
 800b61e:	ea59 0101 	orrs.w	r1, r9, r1
 800b622:	d120      	bne.n	800b666 <_dtoa_r+0xad6>
 800b624:	2a00      	cmp	r2, #0
 800b626:	ddec      	ble.n	800b602 <_dtoa_r+0xa72>
 800b628:	4659      	mov	r1, fp
 800b62a:	2201      	movs	r2, #1
 800b62c:	4620      	mov	r0, r4
 800b62e:	9301      	str	r3, [sp, #4]
 800b630:	f000 fbc0 	bl	800bdb4 <__lshift>
 800b634:	4631      	mov	r1, r6
 800b636:	4683      	mov	fp, r0
 800b638:	f000 fc28 	bl	800be8c <__mcmp>
 800b63c:	2800      	cmp	r0, #0
 800b63e:	9b01      	ldr	r3, [sp, #4]
 800b640:	dc02      	bgt.n	800b648 <_dtoa_r+0xab8>
 800b642:	d1de      	bne.n	800b602 <_dtoa_r+0xa72>
 800b644:	07da      	lsls	r2, r3, #31
 800b646:	d5dc      	bpl.n	800b602 <_dtoa_r+0xa72>
 800b648:	2b39      	cmp	r3, #57	; 0x39
 800b64a:	d1d8      	bne.n	800b5fe <_dtoa_r+0xa6e>
 800b64c:	9a02      	ldr	r2, [sp, #8]
 800b64e:	2339      	movs	r3, #57	; 0x39
 800b650:	7013      	strb	r3, [r2, #0]
 800b652:	462b      	mov	r3, r5
 800b654:	461d      	mov	r5, r3
 800b656:	3b01      	subs	r3, #1
 800b658:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b65c:	2a39      	cmp	r2, #57	; 0x39
 800b65e:	d050      	beq.n	800b702 <_dtoa_r+0xb72>
 800b660:	3201      	adds	r2, #1
 800b662:	701a      	strb	r2, [r3, #0]
 800b664:	e745      	b.n	800b4f2 <_dtoa_r+0x962>
 800b666:	2a00      	cmp	r2, #0
 800b668:	dd03      	ble.n	800b672 <_dtoa_r+0xae2>
 800b66a:	2b39      	cmp	r3, #57	; 0x39
 800b66c:	d0ee      	beq.n	800b64c <_dtoa_r+0xabc>
 800b66e:	3301      	adds	r3, #1
 800b670:	e7c7      	b.n	800b602 <_dtoa_r+0xa72>
 800b672:	9a01      	ldr	r2, [sp, #4]
 800b674:	9907      	ldr	r1, [sp, #28]
 800b676:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b67a:	428a      	cmp	r2, r1
 800b67c:	d02a      	beq.n	800b6d4 <_dtoa_r+0xb44>
 800b67e:	4659      	mov	r1, fp
 800b680:	2300      	movs	r3, #0
 800b682:	220a      	movs	r2, #10
 800b684:	4620      	mov	r0, r4
 800b686:	f000 f9e5 	bl	800ba54 <__multadd>
 800b68a:	45b8      	cmp	r8, r7
 800b68c:	4683      	mov	fp, r0
 800b68e:	f04f 0300 	mov.w	r3, #0
 800b692:	f04f 020a 	mov.w	r2, #10
 800b696:	4641      	mov	r1, r8
 800b698:	4620      	mov	r0, r4
 800b69a:	d107      	bne.n	800b6ac <_dtoa_r+0xb1c>
 800b69c:	f000 f9da 	bl	800ba54 <__multadd>
 800b6a0:	4680      	mov	r8, r0
 800b6a2:	4607      	mov	r7, r0
 800b6a4:	9b01      	ldr	r3, [sp, #4]
 800b6a6:	3301      	adds	r3, #1
 800b6a8:	9301      	str	r3, [sp, #4]
 800b6aa:	e775      	b.n	800b598 <_dtoa_r+0xa08>
 800b6ac:	f000 f9d2 	bl	800ba54 <__multadd>
 800b6b0:	4639      	mov	r1, r7
 800b6b2:	4680      	mov	r8, r0
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	220a      	movs	r2, #10
 800b6b8:	4620      	mov	r0, r4
 800b6ba:	f000 f9cb 	bl	800ba54 <__multadd>
 800b6be:	4607      	mov	r7, r0
 800b6c0:	e7f0      	b.n	800b6a4 <_dtoa_r+0xb14>
 800b6c2:	f1b9 0f00 	cmp.w	r9, #0
 800b6c6:	9a00      	ldr	r2, [sp, #0]
 800b6c8:	bfcc      	ite	gt
 800b6ca:	464d      	movgt	r5, r9
 800b6cc:	2501      	movle	r5, #1
 800b6ce:	4415      	add	r5, r2
 800b6d0:	f04f 0800 	mov.w	r8, #0
 800b6d4:	4659      	mov	r1, fp
 800b6d6:	2201      	movs	r2, #1
 800b6d8:	4620      	mov	r0, r4
 800b6da:	9301      	str	r3, [sp, #4]
 800b6dc:	f000 fb6a 	bl	800bdb4 <__lshift>
 800b6e0:	4631      	mov	r1, r6
 800b6e2:	4683      	mov	fp, r0
 800b6e4:	f000 fbd2 	bl	800be8c <__mcmp>
 800b6e8:	2800      	cmp	r0, #0
 800b6ea:	dcb2      	bgt.n	800b652 <_dtoa_r+0xac2>
 800b6ec:	d102      	bne.n	800b6f4 <_dtoa_r+0xb64>
 800b6ee:	9b01      	ldr	r3, [sp, #4]
 800b6f0:	07db      	lsls	r3, r3, #31
 800b6f2:	d4ae      	bmi.n	800b652 <_dtoa_r+0xac2>
 800b6f4:	462b      	mov	r3, r5
 800b6f6:	461d      	mov	r5, r3
 800b6f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b6fc:	2a30      	cmp	r2, #48	; 0x30
 800b6fe:	d0fa      	beq.n	800b6f6 <_dtoa_r+0xb66>
 800b700:	e6f7      	b.n	800b4f2 <_dtoa_r+0x962>
 800b702:	9a00      	ldr	r2, [sp, #0]
 800b704:	429a      	cmp	r2, r3
 800b706:	d1a5      	bne.n	800b654 <_dtoa_r+0xac4>
 800b708:	f10a 0a01 	add.w	sl, sl, #1
 800b70c:	2331      	movs	r3, #49	; 0x31
 800b70e:	e779      	b.n	800b604 <_dtoa_r+0xa74>
 800b710:	4b13      	ldr	r3, [pc, #76]	; (800b760 <_dtoa_r+0xbd0>)
 800b712:	f7ff baaf 	b.w	800ac74 <_dtoa_r+0xe4>
 800b716:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b718:	2b00      	cmp	r3, #0
 800b71a:	f47f aa86 	bne.w	800ac2a <_dtoa_r+0x9a>
 800b71e:	4b11      	ldr	r3, [pc, #68]	; (800b764 <_dtoa_r+0xbd4>)
 800b720:	f7ff baa8 	b.w	800ac74 <_dtoa_r+0xe4>
 800b724:	f1b9 0f00 	cmp.w	r9, #0
 800b728:	dc03      	bgt.n	800b732 <_dtoa_r+0xba2>
 800b72a:	9b05      	ldr	r3, [sp, #20]
 800b72c:	2b02      	cmp	r3, #2
 800b72e:	f73f aec9 	bgt.w	800b4c4 <_dtoa_r+0x934>
 800b732:	9d00      	ldr	r5, [sp, #0]
 800b734:	4631      	mov	r1, r6
 800b736:	4658      	mov	r0, fp
 800b738:	f7ff f99e 	bl	800aa78 <quorem>
 800b73c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b740:	f805 3b01 	strb.w	r3, [r5], #1
 800b744:	9a00      	ldr	r2, [sp, #0]
 800b746:	1aaa      	subs	r2, r5, r2
 800b748:	4591      	cmp	r9, r2
 800b74a:	ddba      	ble.n	800b6c2 <_dtoa_r+0xb32>
 800b74c:	4659      	mov	r1, fp
 800b74e:	2300      	movs	r3, #0
 800b750:	220a      	movs	r2, #10
 800b752:	4620      	mov	r0, r4
 800b754:	f000 f97e 	bl	800ba54 <__multadd>
 800b758:	4683      	mov	fp, r0
 800b75a:	e7eb      	b.n	800b734 <_dtoa_r+0xba4>
 800b75c:	0800d0a7 	.word	0x0800d0a7
 800b760:	0800d000 	.word	0x0800d000
 800b764:	0800d024 	.word	0x0800d024

0800b768 <std>:
 800b768:	2300      	movs	r3, #0
 800b76a:	b510      	push	{r4, lr}
 800b76c:	4604      	mov	r4, r0
 800b76e:	e9c0 3300 	strd	r3, r3, [r0]
 800b772:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b776:	6083      	str	r3, [r0, #8]
 800b778:	8181      	strh	r1, [r0, #12]
 800b77a:	6643      	str	r3, [r0, #100]	; 0x64
 800b77c:	81c2      	strh	r2, [r0, #14]
 800b77e:	6183      	str	r3, [r0, #24]
 800b780:	4619      	mov	r1, r3
 800b782:	2208      	movs	r2, #8
 800b784:	305c      	adds	r0, #92	; 0x5c
 800b786:	f7fe fced 	bl	800a164 <memset>
 800b78a:	4b05      	ldr	r3, [pc, #20]	; (800b7a0 <std+0x38>)
 800b78c:	6263      	str	r3, [r4, #36]	; 0x24
 800b78e:	4b05      	ldr	r3, [pc, #20]	; (800b7a4 <std+0x3c>)
 800b790:	62a3      	str	r3, [r4, #40]	; 0x28
 800b792:	4b05      	ldr	r3, [pc, #20]	; (800b7a8 <std+0x40>)
 800b794:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b796:	4b05      	ldr	r3, [pc, #20]	; (800b7ac <std+0x44>)
 800b798:	6224      	str	r4, [r4, #32]
 800b79a:	6323      	str	r3, [r4, #48]	; 0x30
 800b79c:	bd10      	pop	{r4, pc}
 800b79e:	bf00      	nop
 800b7a0:	0800c4d5 	.word	0x0800c4d5
 800b7a4:	0800c4f7 	.word	0x0800c4f7
 800b7a8:	0800c52f 	.word	0x0800c52f
 800b7ac:	0800c553 	.word	0x0800c553

0800b7b0 <_cleanup_r>:
 800b7b0:	4901      	ldr	r1, [pc, #4]	; (800b7b8 <_cleanup_r+0x8>)
 800b7b2:	f000 b8af 	b.w	800b914 <_fwalk_reent>
 800b7b6:	bf00      	nop
 800b7b8:	0800c869 	.word	0x0800c869

0800b7bc <__sfmoreglue>:
 800b7bc:	b570      	push	{r4, r5, r6, lr}
 800b7be:	1e4a      	subs	r2, r1, #1
 800b7c0:	2568      	movs	r5, #104	; 0x68
 800b7c2:	4355      	muls	r5, r2
 800b7c4:	460e      	mov	r6, r1
 800b7c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b7ca:	f000 fcbf 	bl	800c14c <_malloc_r>
 800b7ce:	4604      	mov	r4, r0
 800b7d0:	b140      	cbz	r0, 800b7e4 <__sfmoreglue+0x28>
 800b7d2:	2100      	movs	r1, #0
 800b7d4:	e9c0 1600 	strd	r1, r6, [r0]
 800b7d8:	300c      	adds	r0, #12
 800b7da:	60a0      	str	r0, [r4, #8]
 800b7dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b7e0:	f7fe fcc0 	bl	800a164 <memset>
 800b7e4:	4620      	mov	r0, r4
 800b7e6:	bd70      	pop	{r4, r5, r6, pc}

0800b7e8 <__sfp_lock_acquire>:
 800b7e8:	4801      	ldr	r0, [pc, #4]	; (800b7f0 <__sfp_lock_acquire+0x8>)
 800b7ea:	f000 b8b8 	b.w	800b95e <__retarget_lock_acquire_recursive>
 800b7ee:	bf00      	nop
 800b7f0:	20000ad0 	.word	0x20000ad0

0800b7f4 <__sfp_lock_release>:
 800b7f4:	4801      	ldr	r0, [pc, #4]	; (800b7fc <__sfp_lock_release+0x8>)
 800b7f6:	f000 b8b3 	b.w	800b960 <__retarget_lock_release_recursive>
 800b7fa:	bf00      	nop
 800b7fc:	20000ad0 	.word	0x20000ad0

0800b800 <__sinit_lock_acquire>:
 800b800:	4801      	ldr	r0, [pc, #4]	; (800b808 <__sinit_lock_acquire+0x8>)
 800b802:	f000 b8ac 	b.w	800b95e <__retarget_lock_acquire_recursive>
 800b806:	bf00      	nop
 800b808:	20000acb 	.word	0x20000acb

0800b80c <__sinit_lock_release>:
 800b80c:	4801      	ldr	r0, [pc, #4]	; (800b814 <__sinit_lock_release+0x8>)
 800b80e:	f000 b8a7 	b.w	800b960 <__retarget_lock_release_recursive>
 800b812:	bf00      	nop
 800b814:	20000acb 	.word	0x20000acb

0800b818 <__sinit>:
 800b818:	b510      	push	{r4, lr}
 800b81a:	4604      	mov	r4, r0
 800b81c:	f7ff fff0 	bl	800b800 <__sinit_lock_acquire>
 800b820:	69a3      	ldr	r3, [r4, #24]
 800b822:	b11b      	cbz	r3, 800b82c <__sinit+0x14>
 800b824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b828:	f7ff bff0 	b.w	800b80c <__sinit_lock_release>
 800b82c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b830:	6523      	str	r3, [r4, #80]	; 0x50
 800b832:	4b13      	ldr	r3, [pc, #76]	; (800b880 <__sinit+0x68>)
 800b834:	4a13      	ldr	r2, [pc, #76]	; (800b884 <__sinit+0x6c>)
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	62a2      	str	r2, [r4, #40]	; 0x28
 800b83a:	42a3      	cmp	r3, r4
 800b83c:	bf04      	itt	eq
 800b83e:	2301      	moveq	r3, #1
 800b840:	61a3      	streq	r3, [r4, #24]
 800b842:	4620      	mov	r0, r4
 800b844:	f000 f820 	bl	800b888 <__sfp>
 800b848:	6060      	str	r0, [r4, #4]
 800b84a:	4620      	mov	r0, r4
 800b84c:	f000 f81c 	bl	800b888 <__sfp>
 800b850:	60a0      	str	r0, [r4, #8]
 800b852:	4620      	mov	r0, r4
 800b854:	f000 f818 	bl	800b888 <__sfp>
 800b858:	2200      	movs	r2, #0
 800b85a:	60e0      	str	r0, [r4, #12]
 800b85c:	2104      	movs	r1, #4
 800b85e:	6860      	ldr	r0, [r4, #4]
 800b860:	f7ff ff82 	bl	800b768 <std>
 800b864:	68a0      	ldr	r0, [r4, #8]
 800b866:	2201      	movs	r2, #1
 800b868:	2109      	movs	r1, #9
 800b86a:	f7ff ff7d 	bl	800b768 <std>
 800b86e:	68e0      	ldr	r0, [r4, #12]
 800b870:	2202      	movs	r2, #2
 800b872:	2112      	movs	r1, #18
 800b874:	f7ff ff78 	bl	800b768 <std>
 800b878:	2301      	movs	r3, #1
 800b87a:	61a3      	str	r3, [r4, #24]
 800b87c:	e7d2      	b.n	800b824 <__sinit+0xc>
 800b87e:	bf00      	nop
 800b880:	0800cfec 	.word	0x0800cfec
 800b884:	0800b7b1 	.word	0x0800b7b1

0800b888 <__sfp>:
 800b888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b88a:	4607      	mov	r7, r0
 800b88c:	f7ff ffac 	bl	800b7e8 <__sfp_lock_acquire>
 800b890:	4b1e      	ldr	r3, [pc, #120]	; (800b90c <__sfp+0x84>)
 800b892:	681e      	ldr	r6, [r3, #0]
 800b894:	69b3      	ldr	r3, [r6, #24]
 800b896:	b913      	cbnz	r3, 800b89e <__sfp+0x16>
 800b898:	4630      	mov	r0, r6
 800b89a:	f7ff ffbd 	bl	800b818 <__sinit>
 800b89e:	3648      	adds	r6, #72	; 0x48
 800b8a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b8a4:	3b01      	subs	r3, #1
 800b8a6:	d503      	bpl.n	800b8b0 <__sfp+0x28>
 800b8a8:	6833      	ldr	r3, [r6, #0]
 800b8aa:	b30b      	cbz	r3, 800b8f0 <__sfp+0x68>
 800b8ac:	6836      	ldr	r6, [r6, #0]
 800b8ae:	e7f7      	b.n	800b8a0 <__sfp+0x18>
 800b8b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b8b4:	b9d5      	cbnz	r5, 800b8ec <__sfp+0x64>
 800b8b6:	4b16      	ldr	r3, [pc, #88]	; (800b910 <__sfp+0x88>)
 800b8b8:	60e3      	str	r3, [r4, #12]
 800b8ba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b8be:	6665      	str	r5, [r4, #100]	; 0x64
 800b8c0:	f000 f84c 	bl	800b95c <__retarget_lock_init_recursive>
 800b8c4:	f7ff ff96 	bl	800b7f4 <__sfp_lock_release>
 800b8c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b8cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b8d0:	6025      	str	r5, [r4, #0]
 800b8d2:	61a5      	str	r5, [r4, #24]
 800b8d4:	2208      	movs	r2, #8
 800b8d6:	4629      	mov	r1, r5
 800b8d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b8dc:	f7fe fc42 	bl	800a164 <memset>
 800b8e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b8e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b8e8:	4620      	mov	r0, r4
 800b8ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8ec:	3468      	adds	r4, #104	; 0x68
 800b8ee:	e7d9      	b.n	800b8a4 <__sfp+0x1c>
 800b8f0:	2104      	movs	r1, #4
 800b8f2:	4638      	mov	r0, r7
 800b8f4:	f7ff ff62 	bl	800b7bc <__sfmoreglue>
 800b8f8:	4604      	mov	r4, r0
 800b8fa:	6030      	str	r0, [r6, #0]
 800b8fc:	2800      	cmp	r0, #0
 800b8fe:	d1d5      	bne.n	800b8ac <__sfp+0x24>
 800b900:	f7ff ff78 	bl	800b7f4 <__sfp_lock_release>
 800b904:	230c      	movs	r3, #12
 800b906:	603b      	str	r3, [r7, #0]
 800b908:	e7ee      	b.n	800b8e8 <__sfp+0x60>
 800b90a:	bf00      	nop
 800b90c:	0800cfec 	.word	0x0800cfec
 800b910:	ffff0001 	.word	0xffff0001

0800b914 <_fwalk_reent>:
 800b914:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b918:	4606      	mov	r6, r0
 800b91a:	4688      	mov	r8, r1
 800b91c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b920:	2700      	movs	r7, #0
 800b922:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b926:	f1b9 0901 	subs.w	r9, r9, #1
 800b92a:	d505      	bpl.n	800b938 <_fwalk_reent+0x24>
 800b92c:	6824      	ldr	r4, [r4, #0]
 800b92e:	2c00      	cmp	r4, #0
 800b930:	d1f7      	bne.n	800b922 <_fwalk_reent+0xe>
 800b932:	4638      	mov	r0, r7
 800b934:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b938:	89ab      	ldrh	r3, [r5, #12]
 800b93a:	2b01      	cmp	r3, #1
 800b93c:	d907      	bls.n	800b94e <_fwalk_reent+0x3a>
 800b93e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b942:	3301      	adds	r3, #1
 800b944:	d003      	beq.n	800b94e <_fwalk_reent+0x3a>
 800b946:	4629      	mov	r1, r5
 800b948:	4630      	mov	r0, r6
 800b94a:	47c0      	blx	r8
 800b94c:	4307      	orrs	r7, r0
 800b94e:	3568      	adds	r5, #104	; 0x68
 800b950:	e7e9      	b.n	800b926 <_fwalk_reent+0x12>
	...

0800b954 <_localeconv_r>:
 800b954:	4800      	ldr	r0, [pc, #0]	; (800b958 <_localeconv_r+0x4>)
 800b956:	4770      	bx	lr
 800b958:	200001e4 	.word	0x200001e4

0800b95c <__retarget_lock_init_recursive>:
 800b95c:	4770      	bx	lr

0800b95e <__retarget_lock_acquire_recursive>:
 800b95e:	4770      	bx	lr

0800b960 <__retarget_lock_release_recursive>:
 800b960:	4770      	bx	lr
	...

0800b964 <malloc>:
 800b964:	4b02      	ldr	r3, [pc, #8]	; (800b970 <malloc+0xc>)
 800b966:	4601      	mov	r1, r0
 800b968:	6818      	ldr	r0, [r3, #0]
 800b96a:	f000 bbef 	b.w	800c14c <_malloc_r>
 800b96e:	bf00      	nop
 800b970:	20000090 	.word	0x20000090

0800b974 <memcpy>:
 800b974:	440a      	add	r2, r1
 800b976:	4291      	cmp	r1, r2
 800b978:	f100 33ff 	add.w	r3, r0, #4294967295
 800b97c:	d100      	bne.n	800b980 <memcpy+0xc>
 800b97e:	4770      	bx	lr
 800b980:	b510      	push	{r4, lr}
 800b982:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b986:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b98a:	4291      	cmp	r1, r2
 800b98c:	d1f9      	bne.n	800b982 <memcpy+0xe>
 800b98e:	bd10      	pop	{r4, pc}

0800b990 <_Balloc>:
 800b990:	b570      	push	{r4, r5, r6, lr}
 800b992:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b994:	4604      	mov	r4, r0
 800b996:	460d      	mov	r5, r1
 800b998:	b976      	cbnz	r6, 800b9b8 <_Balloc+0x28>
 800b99a:	2010      	movs	r0, #16
 800b99c:	f7ff ffe2 	bl	800b964 <malloc>
 800b9a0:	4602      	mov	r2, r0
 800b9a2:	6260      	str	r0, [r4, #36]	; 0x24
 800b9a4:	b920      	cbnz	r0, 800b9b0 <_Balloc+0x20>
 800b9a6:	4b18      	ldr	r3, [pc, #96]	; (800ba08 <_Balloc+0x78>)
 800b9a8:	4818      	ldr	r0, [pc, #96]	; (800ba0c <_Balloc+0x7c>)
 800b9aa:	2166      	movs	r1, #102	; 0x66
 800b9ac:	f000 fea8 	bl	800c700 <__assert_func>
 800b9b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b9b4:	6006      	str	r6, [r0, #0]
 800b9b6:	60c6      	str	r6, [r0, #12]
 800b9b8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b9ba:	68f3      	ldr	r3, [r6, #12]
 800b9bc:	b183      	cbz	r3, 800b9e0 <_Balloc+0x50>
 800b9be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b9c0:	68db      	ldr	r3, [r3, #12]
 800b9c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b9c6:	b9b8      	cbnz	r0, 800b9f8 <_Balloc+0x68>
 800b9c8:	2101      	movs	r1, #1
 800b9ca:	fa01 f605 	lsl.w	r6, r1, r5
 800b9ce:	1d72      	adds	r2, r6, #5
 800b9d0:	0092      	lsls	r2, r2, #2
 800b9d2:	4620      	mov	r0, r4
 800b9d4:	f000 fb5a 	bl	800c08c <_calloc_r>
 800b9d8:	b160      	cbz	r0, 800b9f4 <_Balloc+0x64>
 800b9da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b9de:	e00e      	b.n	800b9fe <_Balloc+0x6e>
 800b9e0:	2221      	movs	r2, #33	; 0x21
 800b9e2:	2104      	movs	r1, #4
 800b9e4:	4620      	mov	r0, r4
 800b9e6:	f000 fb51 	bl	800c08c <_calloc_r>
 800b9ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b9ec:	60f0      	str	r0, [r6, #12]
 800b9ee:	68db      	ldr	r3, [r3, #12]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d1e4      	bne.n	800b9be <_Balloc+0x2e>
 800b9f4:	2000      	movs	r0, #0
 800b9f6:	bd70      	pop	{r4, r5, r6, pc}
 800b9f8:	6802      	ldr	r2, [r0, #0]
 800b9fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b9fe:	2300      	movs	r3, #0
 800ba00:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ba04:	e7f7      	b.n	800b9f6 <_Balloc+0x66>
 800ba06:	bf00      	nop
 800ba08:	0800d031 	.word	0x0800d031
 800ba0c:	0800d118 	.word	0x0800d118

0800ba10 <_Bfree>:
 800ba10:	b570      	push	{r4, r5, r6, lr}
 800ba12:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ba14:	4605      	mov	r5, r0
 800ba16:	460c      	mov	r4, r1
 800ba18:	b976      	cbnz	r6, 800ba38 <_Bfree+0x28>
 800ba1a:	2010      	movs	r0, #16
 800ba1c:	f7ff ffa2 	bl	800b964 <malloc>
 800ba20:	4602      	mov	r2, r0
 800ba22:	6268      	str	r0, [r5, #36]	; 0x24
 800ba24:	b920      	cbnz	r0, 800ba30 <_Bfree+0x20>
 800ba26:	4b09      	ldr	r3, [pc, #36]	; (800ba4c <_Bfree+0x3c>)
 800ba28:	4809      	ldr	r0, [pc, #36]	; (800ba50 <_Bfree+0x40>)
 800ba2a:	218a      	movs	r1, #138	; 0x8a
 800ba2c:	f000 fe68 	bl	800c700 <__assert_func>
 800ba30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ba34:	6006      	str	r6, [r0, #0]
 800ba36:	60c6      	str	r6, [r0, #12]
 800ba38:	b13c      	cbz	r4, 800ba4a <_Bfree+0x3a>
 800ba3a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ba3c:	6862      	ldr	r2, [r4, #4]
 800ba3e:	68db      	ldr	r3, [r3, #12]
 800ba40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ba44:	6021      	str	r1, [r4, #0]
 800ba46:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ba4a:	bd70      	pop	{r4, r5, r6, pc}
 800ba4c:	0800d031 	.word	0x0800d031
 800ba50:	0800d118 	.word	0x0800d118

0800ba54 <__multadd>:
 800ba54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba58:	690e      	ldr	r6, [r1, #16]
 800ba5a:	4607      	mov	r7, r0
 800ba5c:	4698      	mov	r8, r3
 800ba5e:	460c      	mov	r4, r1
 800ba60:	f101 0014 	add.w	r0, r1, #20
 800ba64:	2300      	movs	r3, #0
 800ba66:	6805      	ldr	r5, [r0, #0]
 800ba68:	b2a9      	uxth	r1, r5
 800ba6a:	fb02 8101 	mla	r1, r2, r1, r8
 800ba6e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800ba72:	0c2d      	lsrs	r5, r5, #16
 800ba74:	fb02 c505 	mla	r5, r2, r5, ip
 800ba78:	b289      	uxth	r1, r1
 800ba7a:	3301      	adds	r3, #1
 800ba7c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800ba80:	429e      	cmp	r6, r3
 800ba82:	f840 1b04 	str.w	r1, [r0], #4
 800ba86:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800ba8a:	dcec      	bgt.n	800ba66 <__multadd+0x12>
 800ba8c:	f1b8 0f00 	cmp.w	r8, #0
 800ba90:	d022      	beq.n	800bad8 <__multadd+0x84>
 800ba92:	68a3      	ldr	r3, [r4, #8]
 800ba94:	42b3      	cmp	r3, r6
 800ba96:	dc19      	bgt.n	800bacc <__multadd+0x78>
 800ba98:	6861      	ldr	r1, [r4, #4]
 800ba9a:	4638      	mov	r0, r7
 800ba9c:	3101      	adds	r1, #1
 800ba9e:	f7ff ff77 	bl	800b990 <_Balloc>
 800baa2:	4605      	mov	r5, r0
 800baa4:	b928      	cbnz	r0, 800bab2 <__multadd+0x5e>
 800baa6:	4602      	mov	r2, r0
 800baa8:	4b0d      	ldr	r3, [pc, #52]	; (800bae0 <__multadd+0x8c>)
 800baaa:	480e      	ldr	r0, [pc, #56]	; (800bae4 <__multadd+0x90>)
 800baac:	21b5      	movs	r1, #181	; 0xb5
 800baae:	f000 fe27 	bl	800c700 <__assert_func>
 800bab2:	6922      	ldr	r2, [r4, #16]
 800bab4:	3202      	adds	r2, #2
 800bab6:	f104 010c 	add.w	r1, r4, #12
 800baba:	0092      	lsls	r2, r2, #2
 800babc:	300c      	adds	r0, #12
 800babe:	f7ff ff59 	bl	800b974 <memcpy>
 800bac2:	4621      	mov	r1, r4
 800bac4:	4638      	mov	r0, r7
 800bac6:	f7ff ffa3 	bl	800ba10 <_Bfree>
 800baca:	462c      	mov	r4, r5
 800bacc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800bad0:	3601      	adds	r6, #1
 800bad2:	f8c3 8014 	str.w	r8, [r3, #20]
 800bad6:	6126      	str	r6, [r4, #16]
 800bad8:	4620      	mov	r0, r4
 800bada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bade:	bf00      	nop
 800bae0:	0800d0a7 	.word	0x0800d0a7
 800bae4:	0800d118 	.word	0x0800d118

0800bae8 <__hi0bits>:
 800bae8:	0c03      	lsrs	r3, r0, #16
 800baea:	041b      	lsls	r3, r3, #16
 800baec:	b9d3      	cbnz	r3, 800bb24 <__hi0bits+0x3c>
 800baee:	0400      	lsls	r0, r0, #16
 800baf0:	2310      	movs	r3, #16
 800baf2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800baf6:	bf04      	itt	eq
 800baf8:	0200      	lsleq	r0, r0, #8
 800bafa:	3308      	addeq	r3, #8
 800bafc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bb00:	bf04      	itt	eq
 800bb02:	0100      	lsleq	r0, r0, #4
 800bb04:	3304      	addeq	r3, #4
 800bb06:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bb0a:	bf04      	itt	eq
 800bb0c:	0080      	lsleq	r0, r0, #2
 800bb0e:	3302      	addeq	r3, #2
 800bb10:	2800      	cmp	r0, #0
 800bb12:	db05      	blt.n	800bb20 <__hi0bits+0x38>
 800bb14:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bb18:	f103 0301 	add.w	r3, r3, #1
 800bb1c:	bf08      	it	eq
 800bb1e:	2320      	moveq	r3, #32
 800bb20:	4618      	mov	r0, r3
 800bb22:	4770      	bx	lr
 800bb24:	2300      	movs	r3, #0
 800bb26:	e7e4      	b.n	800baf2 <__hi0bits+0xa>

0800bb28 <__lo0bits>:
 800bb28:	6803      	ldr	r3, [r0, #0]
 800bb2a:	f013 0207 	ands.w	r2, r3, #7
 800bb2e:	4601      	mov	r1, r0
 800bb30:	d00b      	beq.n	800bb4a <__lo0bits+0x22>
 800bb32:	07da      	lsls	r2, r3, #31
 800bb34:	d424      	bmi.n	800bb80 <__lo0bits+0x58>
 800bb36:	0798      	lsls	r0, r3, #30
 800bb38:	bf49      	itett	mi
 800bb3a:	085b      	lsrmi	r3, r3, #1
 800bb3c:	089b      	lsrpl	r3, r3, #2
 800bb3e:	2001      	movmi	r0, #1
 800bb40:	600b      	strmi	r3, [r1, #0]
 800bb42:	bf5c      	itt	pl
 800bb44:	600b      	strpl	r3, [r1, #0]
 800bb46:	2002      	movpl	r0, #2
 800bb48:	4770      	bx	lr
 800bb4a:	b298      	uxth	r0, r3
 800bb4c:	b9b0      	cbnz	r0, 800bb7c <__lo0bits+0x54>
 800bb4e:	0c1b      	lsrs	r3, r3, #16
 800bb50:	2010      	movs	r0, #16
 800bb52:	f013 0fff 	tst.w	r3, #255	; 0xff
 800bb56:	bf04      	itt	eq
 800bb58:	0a1b      	lsreq	r3, r3, #8
 800bb5a:	3008      	addeq	r0, #8
 800bb5c:	071a      	lsls	r2, r3, #28
 800bb5e:	bf04      	itt	eq
 800bb60:	091b      	lsreq	r3, r3, #4
 800bb62:	3004      	addeq	r0, #4
 800bb64:	079a      	lsls	r2, r3, #30
 800bb66:	bf04      	itt	eq
 800bb68:	089b      	lsreq	r3, r3, #2
 800bb6a:	3002      	addeq	r0, #2
 800bb6c:	07da      	lsls	r2, r3, #31
 800bb6e:	d403      	bmi.n	800bb78 <__lo0bits+0x50>
 800bb70:	085b      	lsrs	r3, r3, #1
 800bb72:	f100 0001 	add.w	r0, r0, #1
 800bb76:	d005      	beq.n	800bb84 <__lo0bits+0x5c>
 800bb78:	600b      	str	r3, [r1, #0]
 800bb7a:	4770      	bx	lr
 800bb7c:	4610      	mov	r0, r2
 800bb7e:	e7e8      	b.n	800bb52 <__lo0bits+0x2a>
 800bb80:	2000      	movs	r0, #0
 800bb82:	4770      	bx	lr
 800bb84:	2020      	movs	r0, #32
 800bb86:	4770      	bx	lr

0800bb88 <__i2b>:
 800bb88:	b510      	push	{r4, lr}
 800bb8a:	460c      	mov	r4, r1
 800bb8c:	2101      	movs	r1, #1
 800bb8e:	f7ff feff 	bl	800b990 <_Balloc>
 800bb92:	4602      	mov	r2, r0
 800bb94:	b928      	cbnz	r0, 800bba2 <__i2b+0x1a>
 800bb96:	4b05      	ldr	r3, [pc, #20]	; (800bbac <__i2b+0x24>)
 800bb98:	4805      	ldr	r0, [pc, #20]	; (800bbb0 <__i2b+0x28>)
 800bb9a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bb9e:	f000 fdaf 	bl	800c700 <__assert_func>
 800bba2:	2301      	movs	r3, #1
 800bba4:	6144      	str	r4, [r0, #20]
 800bba6:	6103      	str	r3, [r0, #16]
 800bba8:	bd10      	pop	{r4, pc}
 800bbaa:	bf00      	nop
 800bbac:	0800d0a7 	.word	0x0800d0a7
 800bbb0:	0800d118 	.word	0x0800d118

0800bbb4 <__multiply>:
 800bbb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbb8:	4614      	mov	r4, r2
 800bbba:	690a      	ldr	r2, [r1, #16]
 800bbbc:	6923      	ldr	r3, [r4, #16]
 800bbbe:	429a      	cmp	r2, r3
 800bbc0:	bfb8      	it	lt
 800bbc2:	460b      	movlt	r3, r1
 800bbc4:	460d      	mov	r5, r1
 800bbc6:	bfbc      	itt	lt
 800bbc8:	4625      	movlt	r5, r4
 800bbca:	461c      	movlt	r4, r3
 800bbcc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800bbd0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800bbd4:	68ab      	ldr	r3, [r5, #8]
 800bbd6:	6869      	ldr	r1, [r5, #4]
 800bbd8:	eb0a 0709 	add.w	r7, sl, r9
 800bbdc:	42bb      	cmp	r3, r7
 800bbde:	b085      	sub	sp, #20
 800bbe0:	bfb8      	it	lt
 800bbe2:	3101      	addlt	r1, #1
 800bbe4:	f7ff fed4 	bl	800b990 <_Balloc>
 800bbe8:	b930      	cbnz	r0, 800bbf8 <__multiply+0x44>
 800bbea:	4602      	mov	r2, r0
 800bbec:	4b42      	ldr	r3, [pc, #264]	; (800bcf8 <__multiply+0x144>)
 800bbee:	4843      	ldr	r0, [pc, #268]	; (800bcfc <__multiply+0x148>)
 800bbf0:	f240 115d 	movw	r1, #349	; 0x15d
 800bbf4:	f000 fd84 	bl	800c700 <__assert_func>
 800bbf8:	f100 0614 	add.w	r6, r0, #20
 800bbfc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800bc00:	4633      	mov	r3, r6
 800bc02:	2200      	movs	r2, #0
 800bc04:	4543      	cmp	r3, r8
 800bc06:	d31e      	bcc.n	800bc46 <__multiply+0x92>
 800bc08:	f105 0c14 	add.w	ip, r5, #20
 800bc0c:	f104 0314 	add.w	r3, r4, #20
 800bc10:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800bc14:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800bc18:	9202      	str	r2, [sp, #8]
 800bc1a:	ebac 0205 	sub.w	r2, ip, r5
 800bc1e:	3a15      	subs	r2, #21
 800bc20:	f022 0203 	bic.w	r2, r2, #3
 800bc24:	3204      	adds	r2, #4
 800bc26:	f105 0115 	add.w	r1, r5, #21
 800bc2a:	458c      	cmp	ip, r1
 800bc2c:	bf38      	it	cc
 800bc2e:	2204      	movcc	r2, #4
 800bc30:	9201      	str	r2, [sp, #4]
 800bc32:	9a02      	ldr	r2, [sp, #8]
 800bc34:	9303      	str	r3, [sp, #12]
 800bc36:	429a      	cmp	r2, r3
 800bc38:	d808      	bhi.n	800bc4c <__multiply+0x98>
 800bc3a:	2f00      	cmp	r7, #0
 800bc3c:	dc55      	bgt.n	800bcea <__multiply+0x136>
 800bc3e:	6107      	str	r7, [r0, #16]
 800bc40:	b005      	add	sp, #20
 800bc42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc46:	f843 2b04 	str.w	r2, [r3], #4
 800bc4a:	e7db      	b.n	800bc04 <__multiply+0x50>
 800bc4c:	f8b3 a000 	ldrh.w	sl, [r3]
 800bc50:	f1ba 0f00 	cmp.w	sl, #0
 800bc54:	d020      	beq.n	800bc98 <__multiply+0xe4>
 800bc56:	f105 0e14 	add.w	lr, r5, #20
 800bc5a:	46b1      	mov	r9, r6
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	f85e 4b04 	ldr.w	r4, [lr], #4
 800bc62:	f8d9 b000 	ldr.w	fp, [r9]
 800bc66:	b2a1      	uxth	r1, r4
 800bc68:	fa1f fb8b 	uxth.w	fp, fp
 800bc6c:	fb0a b101 	mla	r1, sl, r1, fp
 800bc70:	4411      	add	r1, r2
 800bc72:	f8d9 2000 	ldr.w	r2, [r9]
 800bc76:	0c24      	lsrs	r4, r4, #16
 800bc78:	0c12      	lsrs	r2, r2, #16
 800bc7a:	fb0a 2404 	mla	r4, sl, r4, r2
 800bc7e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800bc82:	b289      	uxth	r1, r1
 800bc84:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800bc88:	45f4      	cmp	ip, lr
 800bc8a:	f849 1b04 	str.w	r1, [r9], #4
 800bc8e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800bc92:	d8e4      	bhi.n	800bc5e <__multiply+0xaa>
 800bc94:	9901      	ldr	r1, [sp, #4]
 800bc96:	5072      	str	r2, [r6, r1]
 800bc98:	9a03      	ldr	r2, [sp, #12]
 800bc9a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bc9e:	3304      	adds	r3, #4
 800bca0:	f1b9 0f00 	cmp.w	r9, #0
 800bca4:	d01f      	beq.n	800bce6 <__multiply+0x132>
 800bca6:	6834      	ldr	r4, [r6, #0]
 800bca8:	f105 0114 	add.w	r1, r5, #20
 800bcac:	46b6      	mov	lr, r6
 800bcae:	f04f 0a00 	mov.w	sl, #0
 800bcb2:	880a      	ldrh	r2, [r1, #0]
 800bcb4:	f8be b002 	ldrh.w	fp, [lr, #2]
 800bcb8:	fb09 b202 	mla	r2, r9, r2, fp
 800bcbc:	4492      	add	sl, r2
 800bcbe:	b2a4      	uxth	r4, r4
 800bcc0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800bcc4:	f84e 4b04 	str.w	r4, [lr], #4
 800bcc8:	f851 4b04 	ldr.w	r4, [r1], #4
 800bccc:	f8be 2000 	ldrh.w	r2, [lr]
 800bcd0:	0c24      	lsrs	r4, r4, #16
 800bcd2:	fb09 2404 	mla	r4, r9, r4, r2
 800bcd6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800bcda:	458c      	cmp	ip, r1
 800bcdc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800bce0:	d8e7      	bhi.n	800bcb2 <__multiply+0xfe>
 800bce2:	9a01      	ldr	r2, [sp, #4]
 800bce4:	50b4      	str	r4, [r6, r2]
 800bce6:	3604      	adds	r6, #4
 800bce8:	e7a3      	b.n	800bc32 <__multiply+0x7e>
 800bcea:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d1a5      	bne.n	800bc3e <__multiply+0x8a>
 800bcf2:	3f01      	subs	r7, #1
 800bcf4:	e7a1      	b.n	800bc3a <__multiply+0x86>
 800bcf6:	bf00      	nop
 800bcf8:	0800d0a7 	.word	0x0800d0a7
 800bcfc:	0800d118 	.word	0x0800d118

0800bd00 <__pow5mult>:
 800bd00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd04:	4615      	mov	r5, r2
 800bd06:	f012 0203 	ands.w	r2, r2, #3
 800bd0a:	4606      	mov	r6, r0
 800bd0c:	460f      	mov	r7, r1
 800bd0e:	d007      	beq.n	800bd20 <__pow5mult+0x20>
 800bd10:	4c25      	ldr	r4, [pc, #148]	; (800bda8 <__pow5mult+0xa8>)
 800bd12:	3a01      	subs	r2, #1
 800bd14:	2300      	movs	r3, #0
 800bd16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bd1a:	f7ff fe9b 	bl	800ba54 <__multadd>
 800bd1e:	4607      	mov	r7, r0
 800bd20:	10ad      	asrs	r5, r5, #2
 800bd22:	d03d      	beq.n	800bda0 <__pow5mult+0xa0>
 800bd24:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bd26:	b97c      	cbnz	r4, 800bd48 <__pow5mult+0x48>
 800bd28:	2010      	movs	r0, #16
 800bd2a:	f7ff fe1b 	bl	800b964 <malloc>
 800bd2e:	4602      	mov	r2, r0
 800bd30:	6270      	str	r0, [r6, #36]	; 0x24
 800bd32:	b928      	cbnz	r0, 800bd40 <__pow5mult+0x40>
 800bd34:	4b1d      	ldr	r3, [pc, #116]	; (800bdac <__pow5mult+0xac>)
 800bd36:	481e      	ldr	r0, [pc, #120]	; (800bdb0 <__pow5mult+0xb0>)
 800bd38:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bd3c:	f000 fce0 	bl	800c700 <__assert_func>
 800bd40:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bd44:	6004      	str	r4, [r0, #0]
 800bd46:	60c4      	str	r4, [r0, #12]
 800bd48:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bd4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bd50:	b94c      	cbnz	r4, 800bd66 <__pow5mult+0x66>
 800bd52:	f240 2171 	movw	r1, #625	; 0x271
 800bd56:	4630      	mov	r0, r6
 800bd58:	f7ff ff16 	bl	800bb88 <__i2b>
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	f8c8 0008 	str.w	r0, [r8, #8]
 800bd62:	4604      	mov	r4, r0
 800bd64:	6003      	str	r3, [r0, #0]
 800bd66:	f04f 0900 	mov.w	r9, #0
 800bd6a:	07eb      	lsls	r3, r5, #31
 800bd6c:	d50a      	bpl.n	800bd84 <__pow5mult+0x84>
 800bd6e:	4639      	mov	r1, r7
 800bd70:	4622      	mov	r2, r4
 800bd72:	4630      	mov	r0, r6
 800bd74:	f7ff ff1e 	bl	800bbb4 <__multiply>
 800bd78:	4639      	mov	r1, r7
 800bd7a:	4680      	mov	r8, r0
 800bd7c:	4630      	mov	r0, r6
 800bd7e:	f7ff fe47 	bl	800ba10 <_Bfree>
 800bd82:	4647      	mov	r7, r8
 800bd84:	106d      	asrs	r5, r5, #1
 800bd86:	d00b      	beq.n	800bda0 <__pow5mult+0xa0>
 800bd88:	6820      	ldr	r0, [r4, #0]
 800bd8a:	b938      	cbnz	r0, 800bd9c <__pow5mult+0x9c>
 800bd8c:	4622      	mov	r2, r4
 800bd8e:	4621      	mov	r1, r4
 800bd90:	4630      	mov	r0, r6
 800bd92:	f7ff ff0f 	bl	800bbb4 <__multiply>
 800bd96:	6020      	str	r0, [r4, #0]
 800bd98:	f8c0 9000 	str.w	r9, [r0]
 800bd9c:	4604      	mov	r4, r0
 800bd9e:	e7e4      	b.n	800bd6a <__pow5mult+0x6a>
 800bda0:	4638      	mov	r0, r7
 800bda2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bda6:	bf00      	nop
 800bda8:	0800d268 	.word	0x0800d268
 800bdac:	0800d031 	.word	0x0800d031
 800bdb0:	0800d118 	.word	0x0800d118

0800bdb4 <__lshift>:
 800bdb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bdb8:	460c      	mov	r4, r1
 800bdba:	6849      	ldr	r1, [r1, #4]
 800bdbc:	6923      	ldr	r3, [r4, #16]
 800bdbe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bdc2:	68a3      	ldr	r3, [r4, #8]
 800bdc4:	4607      	mov	r7, r0
 800bdc6:	4691      	mov	r9, r2
 800bdc8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bdcc:	f108 0601 	add.w	r6, r8, #1
 800bdd0:	42b3      	cmp	r3, r6
 800bdd2:	db0b      	blt.n	800bdec <__lshift+0x38>
 800bdd4:	4638      	mov	r0, r7
 800bdd6:	f7ff fddb 	bl	800b990 <_Balloc>
 800bdda:	4605      	mov	r5, r0
 800bddc:	b948      	cbnz	r0, 800bdf2 <__lshift+0x3e>
 800bdde:	4602      	mov	r2, r0
 800bde0:	4b28      	ldr	r3, [pc, #160]	; (800be84 <__lshift+0xd0>)
 800bde2:	4829      	ldr	r0, [pc, #164]	; (800be88 <__lshift+0xd4>)
 800bde4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bde8:	f000 fc8a 	bl	800c700 <__assert_func>
 800bdec:	3101      	adds	r1, #1
 800bdee:	005b      	lsls	r3, r3, #1
 800bdf0:	e7ee      	b.n	800bdd0 <__lshift+0x1c>
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	f100 0114 	add.w	r1, r0, #20
 800bdf8:	f100 0210 	add.w	r2, r0, #16
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	4553      	cmp	r3, sl
 800be00:	db33      	blt.n	800be6a <__lshift+0xb6>
 800be02:	6920      	ldr	r0, [r4, #16]
 800be04:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800be08:	f104 0314 	add.w	r3, r4, #20
 800be0c:	f019 091f 	ands.w	r9, r9, #31
 800be10:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800be14:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800be18:	d02b      	beq.n	800be72 <__lshift+0xbe>
 800be1a:	f1c9 0e20 	rsb	lr, r9, #32
 800be1e:	468a      	mov	sl, r1
 800be20:	2200      	movs	r2, #0
 800be22:	6818      	ldr	r0, [r3, #0]
 800be24:	fa00 f009 	lsl.w	r0, r0, r9
 800be28:	4302      	orrs	r2, r0
 800be2a:	f84a 2b04 	str.w	r2, [sl], #4
 800be2e:	f853 2b04 	ldr.w	r2, [r3], #4
 800be32:	459c      	cmp	ip, r3
 800be34:	fa22 f20e 	lsr.w	r2, r2, lr
 800be38:	d8f3      	bhi.n	800be22 <__lshift+0x6e>
 800be3a:	ebac 0304 	sub.w	r3, ip, r4
 800be3e:	3b15      	subs	r3, #21
 800be40:	f023 0303 	bic.w	r3, r3, #3
 800be44:	3304      	adds	r3, #4
 800be46:	f104 0015 	add.w	r0, r4, #21
 800be4a:	4584      	cmp	ip, r0
 800be4c:	bf38      	it	cc
 800be4e:	2304      	movcc	r3, #4
 800be50:	50ca      	str	r2, [r1, r3]
 800be52:	b10a      	cbz	r2, 800be58 <__lshift+0xa4>
 800be54:	f108 0602 	add.w	r6, r8, #2
 800be58:	3e01      	subs	r6, #1
 800be5a:	4638      	mov	r0, r7
 800be5c:	612e      	str	r6, [r5, #16]
 800be5e:	4621      	mov	r1, r4
 800be60:	f7ff fdd6 	bl	800ba10 <_Bfree>
 800be64:	4628      	mov	r0, r5
 800be66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be6a:	f842 0f04 	str.w	r0, [r2, #4]!
 800be6e:	3301      	adds	r3, #1
 800be70:	e7c5      	b.n	800bdfe <__lshift+0x4a>
 800be72:	3904      	subs	r1, #4
 800be74:	f853 2b04 	ldr.w	r2, [r3], #4
 800be78:	f841 2f04 	str.w	r2, [r1, #4]!
 800be7c:	459c      	cmp	ip, r3
 800be7e:	d8f9      	bhi.n	800be74 <__lshift+0xc0>
 800be80:	e7ea      	b.n	800be58 <__lshift+0xa4>
 800be82:	bf00      	nop
 800be84:	0800d0a7 	.word	0x0800d0a7
 800be88:	0800d118 	.word	0x0800d118

0800be8c <__mcmp>:
 800be8c:	b530      	push	{r4, r5, lr}
 800be8e:	6902      	ldr	r2, [r0, #16]
 800be90:	690c      	ldr	r4, [r1, #16]
 800be92:	1b12      	subs	r2, r2, r4
 800be94:	d10e      	bne.n	800beb4 <__mcmp+0x28>
 800be96:	f100 0314 	add.w	r3, r0, #20
 800be9a:	3114      	adds	r1, #20
 800be9c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bea0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bea4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bea8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800beac:	42a5      	cmp	r5, r4
 800beae:	d003      	beq.n	800beb8 <__mcmp+0x2c>
 800beb0:	d305      	bcc.n	800bebe <__mcmp+0x32>
 800beb2:	2201      	movs	r2, #1
 800beb4:	4610      	mov	r0, r2
 800beb6:	bd30      	pop	{r4, r5, pc}
 800beb8:	4283      	cmp	r3, r0
 800beba:	d3f3      	bcc.n	800bea4 <__mcmp+0x18>
 800bebc:	e7fa      	b.n	800beb4 <__mcmp+0x28>
 800bebe:	f04f 32ff 	mov.w	r2, #4294967295
 800bec2:	e7f7      	b.n	800beb4 <__mcmp+0x28>

0800bec4 <__mdiff>:
 800bec4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bec8:	460c      	mov	r4, r1
 800beca:	4606      	mov	r6, r0
 800becc:	4611      	mov	r1, r2
 800bece:	4620      	mov	r0, r4
 800bed0:	4617      	mov	r7, r2
 800bed2:	f7ff ffdb 	bl	800be8c <__mcmp>
 800bed6:	1e05      	subs	r5, r0, #0
 800bed8:	d110      	bne.n	800befc <__mdiff+0x38>
 800beda:	4629      	mov	r1, r5
 800bedc:	4630      	mov	r0, r6
 800bede:	f7ff fd57 	bl	800b990 <_Balloc>
 800bee2:	b930      	cbnz	r0, 800bef2 <__mdiff+0x2e>
 800bee4:	4b39      	ldr	r3, [pc, #228]	; (800bfcc <__mdiff+0x108>)
 800bee6:	4602      	mov	r2, r0
 800bee8:	f240 2132 	movw	r1, #562	; 0x232
 800beec:	4838      	ldr	r0, [pc, #224]	; (800bfd0 <__mdiff+0x10c>)
 800beee:	f000 fc07 	bl	800c700 <__assert_func>
 800bef2:	2301      	movs	r3, #1
 800bef4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bef8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800befc:	bfa4      	itt	ge
 800befe:	463b      	movge	r3, r7
 800bf00:	4627      	movge	r7, r4
 800bf02:	4630      	mov	r0, r6
 800bf04:	6879      	ldr	r1, [r7, #4]
 800bf06:	bfa6      	itte	ge
 800bf08:	461c      	movge	r4, r3
 800bf0a:	2500      	movge	r5, #0
 800bf0c:	2501      	movlt	r5, #1
 800bf0e:	f7ff fd3f 	bl	800b990 <_Balloc>
 800bf12:	b920      	cbnz	r0, 800bf1e <__mdiff+0x5a>
 800bf14:	4b2d      	ldr	r3, [pc, #180]	; (800bfcc <__mdiff+0x108>)
 800bf16:	4602      	mov	r2, r0
 800bf18:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bf1c:	e7e6      	b.n	800beec <__mdiff+0x28>
 800bf1e:	693e      	ldr	r6, [r7, #16]
 800bf20:	60c5      	str	r5, [r0, #12]
 800bf22:	6925      	ldr	r5, [r4, #16]
 800bf24:	f107 0114 	add.w	r1, r7, #20
 800bf28:	f104 0914 	add.w	r9, r4, #20
 800bf2c:	f100 0e14 	add.w	lr, r0, #20
 800bf30:	f107 0210 	add.w	r2, r7, #16
 800bf34:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800bf38:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800bf3c:	46f2      	mov	sl, lr
 800bf3e:	2700      	movs	r7, #0
 800bf40:	f859 3b04 	ldr.w	r3, [r9], #4
 800bf44:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bf48:	fa1f f883 	uxth.w	r8, r3
 800bf4c:	fa17 f78b 	uxtah	r7, r7, fp
 800bf50:	0c1b      	lsrs	r3, r3, #16
 800bf52:	eba7 0808 	sub.w	r8, r7, r8
 800bf56:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bf5a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bf5e:	fa1f f888 	uxth.w	r8, r8
 800bf62:	141f      	asrs	r7, r3, #16
 800bf64:	454d      	cmp	r5, r9
 800bf66:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bf6a:	f84a 3b04 	str.w	r3, [sl], #4
 800bf6e:	d8e7      	bhi.n	800bf40 <__mdiff+0x7c>
 800bf70:	1b2b      	subs	r3, r5, r4
 800bf72:	3b15      	subs	r3, #21
 800bf74:	f023 0303 	bic.w	r3, r3, #3
 800bf78:	3304      	adds	r3, #4
 800bf7a:	3415      	adds	r4, #21
 800bf7c:	42a5      	cmp	r5, r4
 800bf7e:	bf38      	it	cc
 800bf80:	2304      	movcc	r3, #4
 800bf82:	4419      	add	r1, r3
 800bf84:	4473      	add	r3, lr
 800bf86:	469e      	mov	lr, r3
 800bf88:	460d      	mov	r5, r1
 800bf8a:	4565      	cmp	r5, ip
 800bf8c:	d30e      	bcc.n	800bfac <__mdiff+0xe8>
 800bf8e:	f10c 0203 	add.w	r2, ip, #3
 800bf92:	1a52      	subs	r2, r2, r1
 800bf94:	f022 0203 	bic.w	r2, r2, #3
 800bf98:	3903      	subs	r1, #3
 800bf9a:	458c      	cmp	ip, r1
 800bf9c:	bf38      	it	cc
 800bf9e:	2200      	movcc	r2, #0
 800bfa0:	441a      	add	r2, r3
 800bfa2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800bfa6:	b17b      	cbz	r3, 800bfc8 <__mdiff+0x104>
 800bfa8:	6106      	str	r6, [r0, #16]
 800bfaa:	e7a5      	b.n	800bef8 <__mdiff+0x34>
 800bfac:	f855 8b04 	ldr.w	r8, [r5], #4
 800bfb0:	fa17 f488 	uxtah	r4, r7, r8
 800bfb4:	1422      	asrs	r2, r4, #16
 800bfb6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800bfba:	b2a4      	uxth	r4, r4
 800bfbc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800bfc0:	f84e 4b04 	str.w	r4, [lr], #4
 800bfc4:	1417      	asrs	r7, r2, #16
 800bfc6:	e7e0      	b.n	800bf8a <__mdiff+0xc6>
 800bfc8:	3e01      	subs	r6, #1
 800bfca:	e7ea      	b.n	800bfa2 <__mdiff+0xde>
 800bfcc:	0800d0a7 	.word	0x0800d0a7
 800bfd0:	0800d118 	.word	0x0800d118

0800bfd4 <__d2b>:
 800bfd4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bfd8:	4689      	mov	r9, r1
 800bfda:	2101      	movs	r1, #1
 800bfdc:	ec57 6b10 	vmov	r6, r7, d0
 800bfe0:	4690      	mov	r8, r2
 800bfe2:	f7ff fcd5 	bl	800b990 <_Balloc>
 800bfe6:	4604      	mov	r4, r0
 800bfe8:	b930      	cbnz	r0, 800bff8 <__d2b+0x24>
 800bfea:	4602      	mov	r2, r0
 800bfec:	4b25      	ldr	r3, [pc, #148]	; (800c084 <__d2b+0xb0>)
 800bfee:	4826      	ldr	r0, [pc, #152]	; (800c088 <__d2b+0xb4>)
 800bff0:	f240 310a 	movw	r1, #778	; 0x30a
 800bff4:	f000 fb84 	bl	800c700 <__assert_func>
 800bff8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800bffc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c000:	bb35      	cbnz	r5, 800c050 <__d2b+0x7c>
 800c002:	2e00      	cmp	r6, #0
 800c004:	9301      	str	r3, [sp, #4]
 800c006:	d028      	beq.n	800c05a <__d2b+0x86>
 800c008:	4668      	mov	r0, sp
 800c00a:	9600      	str	r6, [sp, #0]
 800c00c:	f7ff fd8c 	bl	800bb28 <__lo0bits>
 800c010:	9900      	ldr	r1, [sp, #0]
 800c012:	b300      	cbz	r0, 800c056 <__d2b+0x82>
 800c014:	9a01      	ldr	r2, [sp, #4]
 800c016:	f1c0 0320 	rsb	r3, r0, #32
 800c01a:	fa02 f303 	lsl.w	r3, r2, r3
 800c01e:	430b      	orrs	r3, r1
 800c020:	40c2      	lsrs	r2, r0
 800c022:	6163      	str	r3, [r4, #20]
 800c024:	9201      	str	r2, [sp, #4]
 800c026:	9b01      	ldr	r3, [sp, #4]
 800c028:	61a3      	str	r3, [r4, #24]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	bf14      	ite	ne
 800c02e:	2202      	movne	r2, #2
 800c030:	2201      	moveq	r2, #1
 800c032:	6122      	str	r2, [r4, #16]
 800c034:	b1d5      	cbz	r5, 800c06c <__d2b+0x98>
 800c036:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c03a:	4405      	add	r5, r0
 800c03c:	f8c9 5000 	str.w	r5, [r9]
 800c040:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c044:	f8c8 0000 	str.w	r0, [r8]
 800c048:	4620      	mov	r0, r4
 800c04a:	b003      	add	sp, #12
 800c04c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c050:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c054:	e7d5      	b.n	800c002 <__d2b+0x2e>
 800c056:	6161      	str	r1, [r4, #20]
 800c058:	e7e5      	b.n	800c026 <__d2b+0x52>
 800c05a:	a801      	add	r0, sp, #4
 800c05c:	f7ff fd64 	bl	800bb28 <__lo0bits>
 800c060:	9b01      	ldr	r3, [sp, #4]
 800c062:	6163      	str	r3, [r4, #20]
 800c064:	2201      	movs	r2, #1
 800c066:	6122      	str	r2, [r4, #16]
 800c068:	3020      	adds	r0, #32
 800c06a:	e7e3      	b.n	800c034 <__d2b+0x60>
 800c06c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c070:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c074:	f8c9 0000 	str.w	r0, [r9]
 800c078:	6918      	ldr	r0, [r3, #16]
 800c07a:	f7ff fd35 	bl	800bae8 <__hi0bits>
 800c07e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c082:	e7df      	b.n	800c044 <__d2b+0x70>
 800c084:	0800d0a7 	.word	0x0800d0a7
 800c088:	0800d118 	.word	0x0800d118

0800c08c <_calloc_r>:
 800c08c:	b513      	push	{r0, r1, r4, lr}
 800c08e:	434a      	muls	r2, r1
 800c090:	4611      	mov	r1, r2
 800c092:	9201      	str	r2, [sp, #4]
 800c094:	f000 f85a 	bl	800c14c <_malloc_r>
 800c098:	4604      	mov	r4, r0
 800c09a:	b118      	cbz	r0, 800c0a4 <_calloc_r+0x18>
 800c09c:	9a01      	ldr	r2, [sp, #4]
 800c09e:	2100      	movs	r1, #0
 800c0a0:	f7fe f860 	bl	800a164 <memset>
 800c0a4:	4620      	mov	r0, r4
 800c0a6:	b002      	add	sp, #8
 800c0a8:	bd10      	pop	{r4, pc}
	...

0800c0ac <_free_r>:
 800c0ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c0ae:	2900      	cmp	r1, #0
 800c0b0:	d048      	beq.n	800c144 <_free_r+0x98>
 800c0b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c0b6:	9001      	str	r0, [sp, #4]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	f1a1 0404 	sub.w	r4, r1, #4
 800c0be:	bfb8      	it	lt
 800c0c0:	18e4      	addlt	r4, r4, r3
 800c0c2:	f000 fca7 	bl	800ca14 <__malloc_lock>
 800c0c6:	4a20      	ldr	r2, [pc, #128]	; (800c148 <_free_r+0x9c>)
 800c0c8:	9801      	ldr	r0, [sp, #4]
 800c0ca:	6813      	ldr	r3, [r2, #0]
 800c0cc:	4615      	mov	r5, r2
 800c0ce:	b933      	cbnz	r3, 800c0de <_free_r+0x32>
 800c0d0:	6063      	str	r3, [r4, #4]
 800c0d2:	6014      	str	r4, [r2, #0]
 800c0d4:	b003      	add	sp, #12
 800c0d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c0da:	f000 bca1 	b.w	800ca20 <__malloc_unlock>
 800c0de:	42a3      	cmp	r3, r4
 800c0e0:	d90b      	bls.n	800c0fa <_free_r+0x4e>
 800c0e2:	6821      	ldr	r1, [r4, #0]
 800c0e4:	1862      	adds	r2, r4, r1
 800c0e6:	4293      	cmp	r3, r2
 800c0e8:	bf04      	itt	eq
 800c0ea:	681a      	ldreq	r2, [r3, #0]
 800c0ec:	685b      	ldreq	r3, [r3, #4]
 800c0ee:	6063      	str	r3, [r4, #4]
 800c0f0:	bf04      	itt	eq
 800c0f2:	1852      	addeq	r2, r2, r1
 800c0f4:	6022      	streq	r2, [r4, #0]
 800c0f6:	602c      	str	r4, [r5, #0]
 800c0f8:	e7ec      	b.n	800c0d4 <_free_r+0x28>
 800c0fa:	461a      	mov	r2, r3
 800c0fc:	685b      	ldr	r3, [r3, #4]
 800c0fe:	b10b      	cbz	r3, 800c104 <_free_r+0x58>
 800c100:	42a3      	cmp	r3, r4
 800c102:	d9fa      	bls.n	800c0fa <_free_r+0x4e>
 800c104:	6811      	ldr	r1, [r2, #0]
 800c106:	1855      	adds	r5, r2, r1
 800c108:	42a5      	cmp	r5, r4
 800c10a:	d10b      	bne.n	800c124 <_free_r+0x78>
 800c10c:	6824      	ldr	r4, [r4, #0]
 800c10e:	4421      	add	r1, r4
 800c110:	1854      	adds	r4, r2, r1
 800c112:	42a3      	cmp	r3, r4
 800c114:	6011      	str	r1, [r2, #0]
 800c116:	d1dd      	bne.n	800c0d4 <_free_r+0x28>
 800c118:	681c      	ldr	r4, [r3, #0]
 800c11a:	685b      	ldr	r3, [r3, #4]
 800c11c:	6053      	str	r3, [r2, #4]
 800c11e:	4421      	add	r1, r4
 800c120:	6011      	str	r1, [r2, #0]
 800c122:	e7d7      	b.n	800c0d4 <_free_r+0x28>
 800c124:	d902      	bls.n	800c12c <_free_r+0x80>
 800c126:	230c      	movs	r3, #12
 800c128:	6003      	str	r3, [r0, #0]
 800c12a:	e7d3      	b.n	800c0d4 <_free_r+0x28>
 800c12c:	6825      	ldr	r5, [r4, #0]
 800c12e:	1961      	adds	r1, r4, r5
 800c130:	428b      	cmp	r3, r1
 800c132:	bf04      	itt	eq
 800c134:	6819      	ldreq	r1, [r3, #0]
 800c136:	685b      	ldreq	r3, [r3, #4]
 800c138:	6063      	str	r3, [r4, #4]
 800c13a:	bf04      	itt	eq
 800c13c:	1949      	addeq	r1, r1, r5
 800c13e:	6021      	streq	r1, [r4, #0]
 800c140:	6054      	str	r4, [r2, #4]
 800c142:	e7c7      	b.n	800c0d4 <_free_r+0x28>
 800c144:	b003      	add	sp, #12
 800c146:	bd30      	pop	{r4, r5, pc}
 800c148:	2000087c 	.word	0x2000087c

0800c14c <_malloc_r>:
 800c14c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c14e:	1ccd      	adds	r5, r1, #3
 800c150:	f025 0503 	bic.w	r5, r5, #3
 800c154:	3508      	adds	r5, #8
 800c156:	2d0c      	cmp	r5, #12
 800c158:	bf38      	it	cc
 800c15a:	250c      	movcc	r5, #12
 800c15c:	2d00      	cmp	r5, #0
 800c15e:	4606      	mov	r6, r0
 800c160:	db01      	blt.n	800c166 <_malloc_r+0x1a>
 800c162:	42a9      	cmp	r1, r5
 800c164:	d903      	bls.n	800c16e <_malloc_r+0x22>
 800c166:	230c      	movs	r3, #12
 800c168:	6033      	str	r3, [r6, #0]
 800c16a:	2000      	movs	r0, #0
 800c16c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c16e:	f000 fc51 	bl	800ca14 <__malloc_lock>
 800c172:	4921      	ldr	r1, [pc, #132]	; (800c1f8 <_malloc_r+0xac>)
 800c174:	680a      	ldr	r2, [r1, #0]
 800c176:	4614      	mov	r4, r2
 800c178:	b99c      	cbnz	r4, 800c1a2 <_malloc_r+0x56>
 800c17a:	4f20      	ldr	r7, [pc, #128]	; (800c1fc <_malloc_r+0xb0>)
 800c17c:	683b      	ldr	r3, [r7, #0]
 800c17e:	b923      	cbnz	r3, 800c18a <_malloc_r+0x3e>
 800c180:	4621      	mov	r1, r4
 800c182:	4630      	mov	r0, r6
 800c184:	f000 f996 	bl	800c4b4 <_sbrk_r>
 800c188:	6038      	str	r0, [r7, #0]
 800c18a:	4629      	mov	r1, r5
 800c18c:	4630      	mov	r0, r6
 800c18e:	f000 f991 	bl	800c4b4 <_sbrk_r>
 800c192:	1c43      	adds	r3, r0, #1
 800c194:	d123      	bne.n	800c1de <_malloc_r+0x92>
 800c196:	230c      	movs	r3, #12
 800c198:	6033      	str	r3, [r6, #0]
 800c19a:	4630      	mov	r0, r6
 800c19c:	f000 fc40 	bl	800ca20 <__malloc_unlock>
 800c1a0:	e7e3      	b.n	800c16a <_malloc_r+0x1e>
 800c1a2:	6823      	ldr	r3, [r4, #0]
 800c1a4:	1b5b      	subs	r3, r3, r5
 800c1a6:	d417      	bmi.n	800c1d8 <_malloc_r+0x8c>
 800c1a8:	2b0b      	cmp	r3, #11
 800c1aa:	d903      	bls.n	800c1b4 <_malloc_r+0x68>
 800c1ac:	6023      	str	r3, [r4, #0]
 800c1ae:	441c      	add	r4, r3
 800c1b0:	6025      	str	r5, [r4, #0]
 800c1b2:	e004      	b.n	800c1be <_malloc_r+0x72>
 800c1b4:	6863      	ldr	r3, [r4, #4]
 800c1b6:	42a2      	cmp	r2, r4
 800c1b8:	bf0c      	ite	eq
 800c1ba:	600b      	streq	r3, [r1, #0]
 800c1bc:	6053      	strne	r3, [r2, #4]
 800c1be:	4630      	mov	r0, r6
 800c1c0:	f000 fc2e 	bl	800ca20 <__malloc_unlock>
 800c1c4:	f104 000b 	add.w	r0, r4, #11
 800c1c8:	1d23      	adds	r3, r4, #4
 800c1ca:	f020 0007 	bic.w	r0, r0, #7
 800c1ce:	1ac2      	subs	r2, r0, r3
 800c1d0:	d0cc      	beq.n	800c16c <_malloc_r+0x20>
 800c1d2:	1a1b      	subs	r3, r3, r0
 800c1d4:	50a3      	str	r3, [r4, r2]
 800c1d6:	e7c9      	b.n	800c16c <_malloc_r+0x20>
 800c1d8:	4622      	mov	r2, r4
 800c1da:	6864      	ldr	r4, [r4, #4]
 800c1dc:	e7cc      	b.n	800c178 <_malloc_r+0x2c>
 800c1de:	1cc4      	adds	r4, r0, #3
 800c1e0:	f024 0403 	bic.w	r4, r4, #3
 800c1e4:	42a0      	cmp	r0, r4
 800c1e6:	d0e3      	beq.n	800c1b0 <_malloc_r+0x64>
 800c1e8:	1a21      	subs	r1, r4, r0
 800c1ea:	4630      	mov	r0, r6
 800c1ec:	f000 f962 	bl	800c4b4 <_sbrk_r>
 800c1f0:	3001      	adds	r0, #1
 800c1f2:	d1dd      	bne.n	800c1b0 <_malloc_r+0x64>
 800c1f4:	e7cf      	b.n	800c196 <_malloc_r+0x4a>
 800c1f6:	bf00      	nop
 800c1f8:	2000087c 	.word	0x2000087c
 800c1fc:	20000880 	.word	0x20000880

0800c200 <__sfputc_r>:
 800c200:	6893      	ldr	r3, [r2, #8]
 800c202:	3b01      	subs	r3, #1
 800c204:	2b00      	cmp	r3, #0
 800c206:	b410      	push	{r4}
 800c208:	6093      	str	r3, [r2, #8]
 800c20a:	da08      	bge.n	800c21e <__sfputc_r+0x1e>
 800c20c:	6994      	ldr	r4, [r2, #24]
 800c20e:	42a3      	cmp	r3, r4
 800c210:	db01      	blt.n	800c216 <__sfputc_r+0x16>
 800c212:	290a      	cmp	r1, #10
 800c214:	d103      	bne.n	800c21e <__sfputc_r+0x1e>
 800c216:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c21a:	f000 b99f 	b.w	800c55c <__swbuf_r>
 800c21e:	6813      	ldr	r3, [r2, #0]
 800c220:	1c58      	adds	r0, r3, #1
 800c222:	6010      	str	r0, [r2, #0]
 800c224:	7019      	strb	r1, [r3, #0]
 800c226:	4608      	mov	r0, r1
 800c228:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c22c:	4770      	bx	lr

0800c22e <__sfputs_r>:
 800c22e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c230:	4606      	mov	r6, r0
 800c232:	460f      	mov	r7, r1
 800c234:	4614      	mov	r4, r2
 800c236:	18d5      	adds	r5, r2, r3
 800c238:	42ac      	cmp	r4, r5
 800c23a:	d101      	bne.n	800c240 <__sfputs_r+0x12>
 800c23c:	2000      	movs	r0, #0
 800c23e:	e007      	b.n	800c250 <__sfputs_r+0x22>
 800c240:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c244:	463a      	mov	r2, r7
 800c246:	4630      	mov	r0, r6
 800c248:	f7ff ffda 	bl	800c200 <__sfputc_r>
 800c24c:	1c43      	adds	r3, r0, #1
 800c24e:	d1f3      	bne.n	800c238 <__sfputs_r+0xa>
 800c250:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c254 <_vfiprintf_r>:
 800c254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c258:	460d      	mov	r5, r1
 800c25a:	b09d      	sub	sp, #116	; 0x74
 800c25c:	4614      	mov	r4, r2
 800c25e:	4698      	mov	r8, r3
 800c260:	4606      	mov	r6, r0
 800c262:	b118      	cbz	r0, 800c26c <_vfiprintf_r+0x18>
 800c264:	6983      	ldr	r3, [r0, #24]
 800c266:	b90b      	cbnz	r3, 800c26c <_vfiprintf_r+0x18>
 800c268:	f7ff fad6 	bl	800b818 <__sinit>
 800c26c:	4b89      	ldr	r3, [pc, #548]	; (800c494 <_vfiprintf_r+0x240>)
 800c26e:	429d      	cmp	r5, r3
 800c270:	d11b      	bne.n	800c2aa <_vfiprintf_r+0x56>
 800c272:	6875      	ldr	r5, [r6, #4]
 800c274:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c276:	07d9      	lsls	r1, r3, #31
 800c278:	d405      	bmi.n	800c286 <_vfiprintf_r+0x32>
 800c27a:	89ab      	ldrh	r3, [r5, #12]
 800c27c:	059a      	lsls	r2, r3, #22
 800c27e:	d402      	bmi.n	800c286 <_vfiprintf_r+0x32>
 800c280:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c282:	f7ff fb6c 	bl	800b95e <__retarget_lock_acquire_recursive>
 800c286:	89ab      	ldrh	r3, [r5, #12]
 800c288:	071b      	lsls	r3, r3, #28
 800c28a:	d501      	bpl.n	800c290 <_vfiprintf_r+0x3c>
 800c28c:	692b      	ldr	r3, [r5, #16]
 800c28e:	b9eb      	cbnz	r3, 800c2cc <_vfiprintf_r+0x78>
 800c290:	4629      	mov	r1, r5
 800c292:	4630      	mov	r0, r6
 800c294:	f000 f9c6 	bl	800c624 <__swsetup_r>
 800c298:	b1c0      	cbz	r0, 800c2cc <_vfiprintf_r+0x78>
 800c29a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c29c:	07dc      	lsls	r4, r3, #31
 800c29e:	d50e      	bpl.n	800c2be <_vfiprintf_r+0x6a>
 800c2a0:	f04f 30ff 	mov.w	r0, #4294967295
 800c2a4:	b01d      	add	sp, #116	; 0x74
 800c2a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2aa:	4b7b      	ldr	r3, [pc, #492]	; (800c498 <_vfiprintf_r+0x244>)
 800c2ac:	429d      	cmp	r5, r3
 800c2ae:	d101      	bne.n	800c2b4 <_vfiprintf_r+0x60>
 800c2b0:	68b5      	ldr	r5, [r6, #8]
 800c2b2:	e7df      	b.n	800c274 <_vfiprintf_r+0x20>
 800c2b4:	4b79      	ldr	r3, [pc, #484]	; (800c49c <_vfiprintf_r+0x248>)
 800c2b6:	429d      	cmp	r5, r3
 800c2b8:	bf08      	it	eq
 800c2ba:	68f5      	ldreq	r5, [r6, #12]
 800c2bc:	e7da      	b.n	800c274 <_vfiprintf_r+0x20>
 800c2be:	89ab      	ldrh	r3, [r5, #12]
 800c2c0:	0598      	lsls	r0, r3, #22
 800c2c2:	d4ed      	bmi.n	800c2a0 <_vfiprintf_r+0x4c>
 800c2c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c2c6:	f7ff fb4b 	bl	800b960 <__retarget_lock_release_recursive>
 800c2ca:	e7e9      	b.n	800c2a0 <_vfiprintf_r+0x4c>
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	9309      	str	r3, [sp, #36]	; 0x24
 800c2d0:	2320      	movs	r3, #32
 800c2d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c2d6:	f8cd 800c 	str.w	r8, [sp, #12]
 800c2da:	2330      	movs	r3, #48	; 0x30
 800c2dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c4a0 <_vfiprintf_r+0x24c>
 800c2e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c2e4:	f04f 0901 	mov.w	r9, #1
 800c2e8:	4623      	mov	r3, r4
 800c2ea:	469a      	mov	sl, r3
 800c2ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c2f0:	b10a      	cbz	r2, 800c2f6 <_vfiprintf_r+0xa2>
 800c2f2:	2a25      	cmp	r2, #37	; 0x25
 800c2f4:	d1f9      	bne.n	800c2ea <_vfiprintf_r+0x96>
 800c2f6:	ebba 0b04 	subs.w	fp, sl, r4
 800c2fa:	d00b      	beq.n	800c314 <_vfiprintf_r+0xc0>
 800c2fc:	465b      	mov	r3, fp
 800c2fe:	4622      	mov	r2, r4
 800c300:	4629      	mov	r1, r5
 800c302:	4630      	mov	r0, r6
 800c304:	f7ff ff93 	bl	800c22e <__sfputs_r>
 800c308:	3001      	adds	r0, #1
 800c30a:	f000 80aa 	beq.w	800c462 <_vfiprintf_r+0x20e>
 800c30e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c310:	445a      	add	r2, fp
 800c312:	9209      	str	r2, [sp, #36]	; 0x24
 800c314:	f89a 3000 	ldrb.w	r3, [sl]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	f000 80a2 	beq.w	800c462 <_vfiprintf_r+0x20e>
 800c31e:	2300      	movs	r3, #0
 800c320:	f04f 32ff 	mov.w	r2, #4294967295
 800c324:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c328:	f10a 0a01 	add.w	sl, sl, #1
 800c32c:	9304      	str	r3, [sp, #16]
 800c32e:	9307      	str	r3, [sp, #28]
 800c330:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c334:	931a      	str	r3, [sp, #104]	; 0x68
 800c336:	4654      	mov	r4, sl
 800c338:	2205      	movs	r2, #5
 800c33a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c33e:	4858      	ldr	r0, [pc, #352]	; (800c4a0 <_vfiprintf_r+0x24c>)
 800c340:	f7f3 ff4e 	bl	80001e0 <memchr>
 800c344:	9a04      	ldr	r2, [sp, #16]
 800c346:	b9d8      	cbnz	r0, 800c380 <_vfiprintf_r+0x12c>
 800c348:	06d1      	lsls	r1, r2, #27
 800c34a:	bf44      	itt	mi
 800c34c:	2320      	movmi	r3, #32
 800c34e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c352:	0713      	lsls	r3, r2, #28
 800c354:	bf44      	itt	mi
 800c356:	232b      	movmi	r3, #43	; 0x2b
 800c358:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c35c:	f89a 3000 	ldrb.w	r3, [sl]
 800c360:	2b2a      	cmp	r3, #42	; 0x2a
 800c362:	d015      	beq.n	800c390 <_vfiprintf_r+0x13c>
 800c364:	9a07      	ldr	r2, [sp, #28]
 800c366:	4654      	mov	r4, sl
 800c368:	2000      	movs	r0, #0
 800c36a:	f04f 0c0a 	mov.w	ip, #10
 800c36e:	4621      	mov	r1, r4
 800c370:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c374:	3b30      	subs	r3, #48	; 0x30
 800c376:	2b09      	cmp	r3, #9
 800c378:	d94e      	bls.n	800c418 <_vfiprintf_r+0x1c4>
 800c37a:	b1b0      	cbz	r0, 800c3aa <_vfiprintf_r+0x156>
 800c37c:	9207      	str	r2, [sp, #28]
 800c37e:	e014      	b.n	800c3aa <_vfiprintf_r+0x156>
 800c380:	eba0 0308 	sub.w	r3, r0, r8
 800c384:	fa09 f303 	lsl.w	r3, r9, r3
 800c388:	4313      	orrs	r3, r2
 800c38a:	9304      	str	r3, [sp, #16]
 800c38c:	46a2      	mov	sl, r4
 800c38e:	e7d2      	b.n	800c336 <_vfiprintf_r+0xe2>
 800c390:	9b03      	ldr	r3, [sp, #12]
 800c392:	1d19      	adds	r1, r3, #4
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	9103      	str	r1, [sp, #12]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	bfbb      	ittet	lt
 800c39c:	425b      	neglt	r3, r3
 800c39e:	f042 0202 	orrlt.w	r2, r2, #2
 800c3a2:	9307      	strge	r3, [sp, #28]
 800c3a4:	9307      	strlt	r3, [sp, #28]
 800c3a6:	bfb8      	it	lt
 800c3a8:	9204      	strlt	r2, [sp, #16]
 800c3aa:	7823      	ldrb	r3, [r4, #0]
 800c3ac:	2b2e      	cmp	r3, #46	; 0x2e
 800c3ae:	d10c      	bne.n	800c3ca <_vfiprintf_r+0x176>
 800c3b0:	7863      	ldrb	r3, [r4, #1]
 800c3b2:	2b2a      	cmp	r3, #42	; 0x2a
 800c3b4:	d135      	bne.n	800c422 <_vfiprintf_r+0x1ce>
 800c3b6:	9b03      	ldr	r3, [sp, #12]
 800c3b8:	1d1a      	adds	r2, r3, #4
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	9203      	str	r2, [sp, #12]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	bfb8      	it	lt
 800c3c2:	f04f 33ff 	movlt.w	r3, #4294967295
 800c3c6:	3402      	adds	r4, #2
 800c3c8:	9305      	str	r3, [sp, #20]
 800c3ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c4b0 <_vfiprintf_r+0x25c>
 800c3ce:	7821      	ldrb	r1, [r4, #0]
 800c3d0:	2203      	movs	r2, #3
 800c3d2:	4650      	mov	r0, sl
 800c3d4:	f7f3 ff04 	bl	80001e0 <memchr>
 800c3d8:	b140      	cbz	r0, 800c3ec <_vfiprintf_r+0x198>
 800c3da:	2340      	movs	r3, #64	; 0x40
 800c3dc:	eba0 000a 	sub.w	r0, r0, sl
 800c3e0:	fa03 f000 	lsl.w	r0, r3, r0
 800c3e4:	9b04      	ldr	r3, [sp, #16]
 800c3e6:	4303      	orrs	r3, r0
 800c3e8:	3401      	adds	r4, #1
 800c3ea:	9304      	str	r3, [sp, #16]
 800c3ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3f0:	482c      	ldr	r0, [pc, #176]	; (800c4a4 <_vfiprintf_r+0x250>)
 800c3f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c3f6:	2206      	movs	r2, #6
 800c3f8:	f7f3 fef2 	bl	80001e0 <memchr>
 800c3fc:	2800      	cmp	r0, #0
 800c3fe:	d03f      	beq.n	800c480 <_vfiprintf_r+0x22c>
 800c400:	4b29      	ldr	r3, [pc, #164]	; (800c4a8 <_vfiprintf_r+0x254>)
 800c402:	bb1b      	cbnz	r3, 800c44c <_vfiprintf_r+0x1f8>
 800c404:	9b03      	ldr	r3, [sp, #12]
 800c406:	3307      	adds	r3, #7
 800c408:	f023 0307 	bic.w	r3, r3, #7
 800c40c:	3308      	adds	r3, #8
 800c40e:	9303      	str	r3, [sp, #12]
 800c410:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c412:	443b      	add	r3, r7
 800c414:	9309      	str	r3, [sp, #36]	; 0x24
 800c416:	e767      	b.n	800c2e8 <_vfiprintf_r+0x94>
 800c418:	fb0c 3202 	mla	r2, ip, r2, r3
 800c41c:	460c      	mov	r4, r1
 800c41e:	2001      	movs	r0, #1
 800c420:	e7a5      	b.n	800c36e <_vfiprintf_r+0x11a>
 800c422:	2300      	movs	r3, #0
 800c424:	3401      	adds	r4, #1
 800c426:	9305      	str	r3, [sp, #20]
 800c428:	4619      	mov	r1, r3
 800c42a:	f04f 0c0a 	mov.w	ip, #10
 800c42e:	4620      	mov	r0, r4
 800c430:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c434:	3a30      	subs	r2, #48	; 0x30
 800c436:	2a09      	cmp	r2, #9
 800c438:	d903      	bls.n	800c442 <_vfiprintf_r+0x1ee>
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d0c5      	beq.n	800c3ca <_vfiprintf_r+0x176>
 800c43e:	9105      	str	r1, [sp, #20]
 800c440:	e7c3      	b.n	800c3ca <_vfiprintf_r+0x176>
 800c442:	fb0c 2101 	mla	r1, ip, r1, r2
 800c446:	4604      	mov	r4, r0
 800c448:	2301      	movs	r3, #1
 800c44a:	e7f0      	b.n	800c42e <_vfiprintf_r+0x1da>
 800c44c:	ab03      	add	r3, sp, #12
 800c44e:	9300      	str	r3, [sp, #0]
 800c450:	462a      	mov	r2, r5
 800c452:	4b16      	ldr	r3, [pc, #88]	; (800c4ac <_vfiprintf_r+0x258>)
 800c454:	a904      	add	r1, sp, #16
 800c456:	4630      	mov	r0, r6
 800c458:	f7fd ff2c 	bl	800a2b4 <_printf_float>
 800c45c:	4607      	mov	r7, r0
 800c45e:	1c78      	adds	r0, r7, #1
 800c460:	d1d6      	bne.n	800c410 <_vfiprintf_r+0x1bc>
 800c462:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c464:	07d9      	lsls	r1, r3, #31
 800c466:	d405      	bmi.n	800c474 <_vfiprintf_r+0x220>
 800c468:	89ab      	ldrh	r3, [r5, #12]
 800c46a:	059a      	lsls	r2, r3, #22
 800c46c:	d402      	bmi.n	800c474 <_vfiprintf_r+0x220>
 800c46e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c470:	f7ff fa76 	bl	800b960 <__retarget_lock_release_recursive>
 800c474:	89ab      	ldrh	r3, [r5, #12]
 800c476:	065b      	lsls	r3, r3, #25
 800c478:	f53f af12 	bmi.w	800c2a0 <_vfiprintf_r+0x4c>
 800c47c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c47e:	e711      	b.n	800c2a4 <_vfiprintf_r+0x50>
 800c480:	ab03      	add	r3, sp, #12
 800c482:	9300      	str	r3, [sp, #0]
 800c484:	462a      	mov	r2, r5
 800c486:	4b09      	ldr	r3, [pc, #36]	; (800c4ac <_vfiprintf_r+0x258>)
 800c488:	a904      	add	r1, sp, #16
 800c48a:	4630      	mov	r0, r6
 800c48c:	f7fe f9b6 	bl	800a7fc <_printf_i>
 800c490:	e7e4      	b.n	800c45c <_vfiprintf_r+0x208>
 800c492:	bf00      	nop
 800c494:	0800d0d8 	.word	0x0800d0d8
 800c498:	0800d0f8 	.word	0x0800d0f8
 800c49c:	0800d0b8 	.word	0x0800d0b8
 800c4a0:	0800d274 	.word	0x0800d274
 800c4a4:	0800d27e 	.word	0x0800d27e
 800c4a8:	0800a2b5 	.word	0x0800a2b5
 800c4ac:	0800c22f 	.word	0x0800c22f
 800c4b0:	0800d27a 	.word	0x0800d27a

0800c4b4 <_sbrk_r>:
 800c4b4:	b538      	push	{r3, r4, r5, lr}
 800c4b6:	4d06      	ldr	r5, [pc, #24]	; (800c4d0 <_sbrk_r+0x1c>)
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	4604      	mov	r4, r0
 800c4bc:	4608      	mov	r0, r1
 800c4be:	602b      	str	r3, [r5, #0]
 800c4c0:	f7f6 fb16 	bl	8002af0 <_sbrk>
 800c4c4:	1c43      	adds	r3, r0, #1
 800c4c6:	d102      	bne.n	800c4ce <_sbrk_r+0x1a>
 800c4c8:	682b      	ldr	r3, [r5, #0]
 800c4ca:	b103      	cbz	r3, 800c4ce <_sbrk_r+0x1a>
 800c4cc:	6023      	str	r3, [r4, #0]
 800c4ce:	bd38      	pop	{r3, r4, r5, pc}
 800c4d0:	20000ad4 	.word	0x20000ad4

0800c4d4 <__sread>:
 800c4d4:	b510      	push	{r4, lr}
 800c4d6:	460c      	mov	r4, r1
 800c4d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4dc:	f000 faa6 	bl	800ca2c <_read_r>
 800c4e0:	2800      	cmp	r0, #0
 800c4e2:	bfab      	itete	ge
 800c4e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c4e6:	89a3      	ldrhlt	r3, [r4, #12]
 800c4e8:	181b      	addge	r3, r3, r0
 800c4ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c4ee:	bfac      	ite	ge
 800c4f0:	6563      	strge	r3, [r4, #84]	; 0x54
 800c4f2:	81a3      	strhlt	r3, [r4, #12]
 800c4f4:	bd10      	pop	{r4, pc}

0800c4f6 <__swrite>:
 800c4f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4fa:	461f      	mov	r7, r3
 800c4fc:	898b      	ldrh	r3, [r1, #12]
 800c4fe:	05db      	lsls	r3, r3, #23
 800c500:	4605      	mov	r5, r0
 800c502:	460c      	mov	r4, r1
 800c504:	4616      	mov	r6, r2
 800c506:	d505      	bpl.n	800c514 <__swrite+0x1e>
 800c508:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c50c:	2302      	movs	r3, #2
 800c50e:	2200      	movs	r2, #0
 800c510:	f000 f9f8 	bl	800c904 <_lseek_r>
 800c514:	89a3      	ldrh	r3, [r4, #12]
 800c516:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c51a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c51e:	81a3      	strh	r3, [r4, #12]
 800c520:	4632      	mov	r2, r6
 800c522:	463b      	mov	r3, r7
 800c524:	4628      	mov	r0, r5
 800c526:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c52a:	f000 b869 	b.w	800c600 <_write_r>

0800c52e <__sseek>:
 800c52e:	b510      	push	{r4, lr}
 800c530:	460c      	mov	r4, r1
 800c532:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c536:	f000 f9e5 	bl	800c904 <_lseek_r>
 800c53a:	1c43      	adds	r3, r0, #1
 800c53c:	89a3      	ldrh	r3, [r4, #12]
 800c53e:	bf15      	itete	ne
 800c540:	6560      	strne	r0, [r4, #84]	; 0x54
 800c542:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c546:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c54a:	81a3      	strheq	r3, [r4, #12]
 800c54c:	bf18      	it	ne
 800c54e:	81a3      	strhne	r3, [r4, #12]
 800c550:	bd10      	pop	{r4, pc}

0800c552 <__sclose>:
 800c552:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c556:	f000 b8f1 	b.w	800c73c <_close_r>
	...

0800c55c <__swbuf_r>:
 800c55c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c55e:	460e      	mov	r6, r1
 800c560:	4614      	mov	r4, r2
 800c562:	4605      	mov	r5, r0
 800c564:	b118      	cbz	r0, 800c56e <__swbuf_r+0x12>
 800c566:	6983      	ldr	r3, [r0, #24]
 800c568:	b90b      	cbnz	r3, 800c56e <__swbuf_r+0x12>
 800c56a:	f7ff f955 	bl	800b818 <__sinit>
 800c56e:	4b21      	ldr	r3, [pc, #132]	; (800c5f4 <__swbuf_r+0x98>)
 800c570:	429c      	cmp	r4, r3
 800c572:	d12b      	bne.n	800c5cc <__swbuf_r+0x70>
 800c574:	686c      	ldr	r4, [r5, #4]
 800c576:	69a3      	ldr	r3, [r4, #24]
 800c578:	60a3      	str	r3, [r4, #8]
 800c57a:	89a3      	ldrh	r3, [r4, #12]
 800c57c:	071a      	lsls	r2, r3, #28
 800c57e:	d52f      	bpl.n	800c5e0 <__swbuf_r+0x84>
 800c580:	6923      	ldr	r3, [r4, #16]
 800c582:	b36b      	cbz	r3, 800c5e0 <__swbuf_r+0x84>
 800c584:	6923      	ldr	r3, [r4, #16]
 800c586:	6820      	ldr	r0, [r4, #0]
 800c588:	1ac0      	subs	r0, r0, r3
 800c58a:	6963      	ldr	r3, [r4, #20]
 800c58c:	b2f6      	uxtb	r6, r6
 800c58e:	4283      	cmp	r3, r0
 800c590:	4637      	mov	r7, r6
 800c592:	dc04      	bgt.n	800c59e <__swbuf_r+0x42>
 800c594:	4621      	mov	r1, r4
 800c596:	4628      	mov	r0, r5
 800c598:	f000 f966 	bl	800c868 <_fflush_r>
 800c59c:	bb30      	cbnz	r0, 800c5ec <__swbuf_r+0x90>
 800c59e:	68a3      	ldr	r3, [r4, #8]
 800c5a0:	3b01      	subs	r3, #1
 800c5a2:	60a3      	str	r3, [r4, #8]
 800c5a4:	6823      	ldr	r3, [r4, #0]
 800c5a6:	1c5a      	adds	r2, r3, #1
 800c5a8:	6022      	str	r2, [r4, #0]
 800c5aa:	701e      	strb	r6, [r3, #0]
 800c5ac:	6963      	ldr	r3, [r4, #20]
 800c5ae:	3001      	adds	r0, #1
 800c5b0:	4283      	cmp	r3, r0
 800c5b2:	d004      	beq.n	800c5be <__swbuf_r+0x62>
 800c5b4:	89a3      	ldrh	r3, [r4, #12]
 800c5b6:	07db      	lsls	r3, r3, #31
 800c5b8:	d506      	bpl.n	800c5c8 <__swbuf_r+0x6c>
 800c5ba:	2e0a      	cmp	r6, #10
 800c5bc:	d104      	bne.n	800c5c8 <__swbuf_r+0x6c>
 800c5be:	4621      	mov	r1, r4
 800c5c0:	4628      	mov	r0, r5
 800c5c2:	f000 f951 	bl	800c868 <_fflush_r>
 800c5c6:	b988      	cbnz	r0, 800c5ec <__swbuf_r+0x90>
 800c5c8:	4638      	mov	r0, r7
 800c5ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c5cc:	4b0a      	ldr	r3, [pc, #40]	; (800c5f8 <__swbuf_r+0x9c>)
 800c5ce:	429c      	cmp	r4, r3
 800c5d0:	d101      	bne.n	800c5d6 <__swbuf_r+0x7a>
 800c5d2:	68ac      	ldr	r4, [r5, #8]
 800c5d4:	e7cf      	b.n	800c576 <__swbuf_r+0x1a>
 800c5d6:	4b09      	ldr	r3, [pc, #36]	; (800c5fc <__swbuf_r+0xa0>)
 800c5d8:	429c      	cmp	r4, r3
 800c5da:	bf08      	it	eq
 800c5dc:	68ec      	ldreq	r4, [r5, #12]
 800c5de:	e7ca      	b.n	800c576 <__swbuf_r+0x1a>
 800c5e0:	4621      	mov	r1, r4
 800c5e2:	4628      	mov	r0, r5
 800c5e4:	f000 f81e 	bl	800c624 <__swsetup_r>
 800c5e8:	2800      	cmp	r0, #0
 800c5ea:	d0cb      	beq.n	800c584 <__swbuf_r+0x28>
 800c5ec:	f04f 37ff 	mov.w	r7, #4294967295
 800c5f0:	e7ea      	b.n	800c5c8 <__swbuf_r+0x6c>
 800c5f2:	bf00      	nop
 800c5f4:	0800d0d8 	.word	0x0800d0d8
 800c5f8:	0800d0f8 	.word	0x0800d0f8
 800c5fc:	0800d0b8 	.word	0x0800d0b8

0800c600 <_write_r>:
 800c600:	b538      	push	{r3, r4, r5, lr}
 800c602:	4d07      	ldr	r5, [pc, #28]	; (800c620 <_write_r+0x20>)
 800c604:	4604      	mov	r4, r0
 800c606:	4608      	mov	r0, r1
 800c608:	4611      	mov	r1, r2
 800c60a:	2200      	movs	r2, #0
 800c60c:	602a      	str	r2, [r5, #0]
 800c60e:	461a      	mov	r2, r3
 800c610:	f7f6 fa1d 	bl	8002a4e <_write>
 800c614:	1c43      	adds	r3, r0, #1
 800c616:	d102      	bne.n	800c61e <_write_r+0x1e>
 800c618:	682b      	ldr	r3, [r5, #0]
 800c61a:	b103      	cbz	r3, 800c61e <_write_r+0x1e>
 800c61c:	6023      	str	r3, [r4, #0]
 800c61e:	bd38      	pop	{r3, r4, r5, pc}
 800c620:	20000ad4 	.word	0x20000ad4

0800c624 <__swsetup_r>:
 800c624:	4b32      	ldr	r3, [pc, #200]	; (800c6f0 <__swsetup_r+0xcc>)
 800c626:	b570      	push	{r4, r5, r6, lr}
 800c628:	681d      	ldr	r5, [r3, #0]
 800c62a:	4606      	mov	r6, r0
 800c62c:	460c      	mov	r4, r1
 800c62e:	b125      	cbz	r5, 800c63a <__swsetup_r+0x16>
 800c630:	69ab      	ldr	r3, [r5, #24]
 800c632:	b913      	cbnz	r3, 800c63a <__swsetup_r+0x16>
 800c634:	4628      	mov	r0, r5
 800c636:	f7ff f8ef 	bl	800b818 <__sinit>
 800c63a:	4b2e      	ldr	r3, [pc, #184]	; (800c6f4 <__swsetup_r+0xd0>)
 800c63c:	429c      	cmp	r4, r3
 800c63e:	d10f      	bne.n	800c660 <__swsetup_r+0x3c>
 800c640:	686c      	ldr	r4, [r5, #4]
 800c642:	89a3      	ldrh	r3, [r4, #12]
 800c644:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c648:	0719      	lsls	r1, r3, #28
 800c64a:	d42c      	bmi.n	800c6a6 <__swsetup_r+0x82>
 800c64c:	06dd      	lsls	r5, r3, #27
 800c64e:	d411      	bmi.n	800c674 <__swsetup_r+0x50>
 800c650:	2309      	movs	r3, #9
 800c652:	6033      	str	r3, [r6, #0]
 800c654:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c658:	81a3      	strh	r3, [r4, #12]
 800c65a:	f04f 30ff 	mov.w	r0, #4294967295
 800c65e:	e03e      	b.n	800c6de <__swsetup_r+0xba>
 800c660:	4b25      	ldr	r3, [pc, #148]	; (800c6f8 <__swsetup_r+0xd4>)
 800c662:	429c      	cmp	r4, r3
 800c664:	d101      	bne.n	800c66a <__swsetup_r+0x46>
 800c666:	68ac      	ldr	r4, [r5, #8]
 800c668:	e7eb      	b.n	800c642 <__swsetup_r+0x1e>
 800c66a:	4b24      	ldr	r3, [pc, #144]	; (800c6fc <__swsetup_r+0xd8>)
 800c66c:	429c      	cmp	r4, r3
 800c66e:	bf08      	it	eq
 800c670:	68ec      	ldreq	r4, [r5, #12]
 800c672:	e7e6      	b.n	800c642 <__swsetup_r+0x1e>
 800c674:	0758      	lsls	r0, r3, #29
 800c676:	d512      	bpl.n	800c69e <__swsetup_r+0x7a>
 800c678:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c67a:	b141      	cbz	r1, 800c68e <__swsetup_r+0x6a>
 800c67c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c680:	4299      	cmp	r1, r3
 800c682:	d002      	beq.n	800c68a <__swsetup_r+0x66>
 800c684:	4630      	mov	r0, r6
 800c686:	f7ff fd11 	bl	800c0ac <_free_r>
 800c68a:	2300      	movs	r3, #0
 800c68c:	6363      	str	r3, [r4, #52]	; 0x34
 800c68e:	89a3      	ldrh	r3, [r4, #12]
 800c690:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c694:	81a3      	strh	r3, [r4, #12]
 800c696:	2300      	movs	r3, #0
 800c698:	6063      	str	r3, [r4, #4]
 800c69a:	6923      	ldr	r3, [r4, #16]
 800c69c:	6023      	str	r3, [r4, #0]
 800c69e:	89a3      	ldrh	r3, [r4, #12]
 800c6a0:	f043 0308 	orr.w	r3, r3, #8
 800c6a4:	81a3      	strh	r3, [r4, #12]
 800c6a6:	6923      	ldr	r3, [r4, #16]
 800c6a8:	b94b      	cbnz	r3, 800c6be <__swsetup_r+0x9a>
 800c6aa:	89a3      	ldrh	r3, [r4, #12]
 800c6ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c6b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c6b4:	d003      	beq.n	800c6be <__swsetup_r+0x9a>
 800c6b6:	4621      	mov	r1, r4
 800c6b8:	4630      	mov	r0, r6
 800c6ba:	f000 f959 	bl	800c970 <__smakebuf_r>
 800c6be:	89a0      	ldrh	r0, [r4, #12]
 800c6c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c6c4:	f010 0301 	ands.w	r3, r0, #1
 800c6c8:	d00a      	beq.n	800c6e0 <__swsetup_r+0xbc>
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	60a3      	str	r3, [r4, #8]
 800c6ce:	6963      	ldr	r3, [r4, #20]
 800c6d0:	425b      	negs	r3, r3
 800c6d2:	61a3      	str	r3, [r4, #24]
 800c6d4:	6923      	ldr	r3, [r4, #16]
 800c6d6:	b943      	cbnz	r3, 800c6ea <__swsetup_r+0xc6>
 800c6d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c6dc:	d1ba      	bne.n	800c654 <__swsetup_r+0x30>
 800c6de:	bd70      	pop	{r4, r5, r6, pc}
 800c6e0:	0781      	lsls	r1, r0, #30
 800c6e2:	bf58      	it	pl
 800c6e4:	6963      	ldrpl	r3, [r4, #20]
 800c6e6:	60a3      	str	r3, [r4, #8]
 800c6e8:	e7f4      	b.n	800c6d4 <__swsetup_r+0xb0>
 800c6ea:	2000      	movs	r0, #0
 800c6ec:	e7f7      	b.n	800c6de <__swsetup_r+0xba>
 800c6ee:	bf00      	nop
 800c6f0:	20000090 	.word	0x20000090
 800c6f4:	0800d0d8 	.word	0x0800d0d8
 800c6f8:	0800d0f8 	.word	0x0800d0f8
 800c6fc:	0800d0b8 	.word	0x0800d0b8

0800c700 <__assert_func>:
 800c700:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c702:	4614      	mov	r4, r2
 800c704:	461a      	mov	r2, r3
 800c706:	4b09      	ldr	r3, [pc, #36]	; (800c72c <__assert_func+0x2c>)
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	4605      	mov	r5, r0
 800c70c:	68d8      	ldr	r0, [r3, #12]
 800c70e:	b14c      	cbz	r4, 800c724 <__assert_func+0x24>
 800c710:	4b07      	ldr	r3, [pc, #28]	; (800c730 <__assert_func+0x30>)
 800c712:	9100      	str	r1, [sp, #0]
 800c714:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c718:	4906      	ldr	r1, [pc, #24]	; (800c734 <__assert_func+0x34>)
 800c71a:	462b      	mov	r3, r5
 800c71c:	f000 f8e0 	bl	800c8e0 <fiprintf>
 800c720:	f000 f9a3 	bl	800ca6a <abort>
 800c724:	4b04      	ldr	r3, [pc, #16]	; (800c738 <__assert_func+0x38>)
 800c726:	461c      	mov	r4, r3
 800c728:	e7f3      	b.n	800c712 <__assert_func+0x12>
 800c72a:	bf00      	nop
 800c72c:	20000090 	.word	0x20000090
 800c730:	0800d285 	.word	0x0800d285
 800c734:	0800d292 	.word	0x0800d292
 800c738:	0800d2c0 	.word	0x0800d2c0

0800c73c <_close_r>:
 800c73c:	b538      	push	{r3, r4, r5, lr}
 800c73e:	4d06      	ldr	r5, [pc, #24]	; (800c758 <_close_r+0x1c>)
 800c740:	2300      	movs	r3, #0
 800c742:	4604      	mov	r4, r0
 800c744:	4608      	mov	r0, r1
 800c746:	602b      	str	r3, [r5, #0]
 800c748:	f7f6 f99d 	bl	8002a86 <_close>
 800c74c:	1c43      	adds	r3, r0, #1
 800c74e:	d102      	bne.n	800c756 <_close_r+0x1a>
 800c750:	682b      	ldr	r3, [r5, #0]
 800c752:	b103      	cbz	r3, 800c756 <_close_r+0x1a>
 800c754:	6023      	str	r3, [r4, #0]
 800c756:	bd38      	pop	{r3, r4, r5, pc}
 800c758:	20000ad4 	.word	0x20000ad4

0800c75c <__sflush_r>:
 800c75c:	898a      	ldrh	r2, [r1, #12]
 800c75e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c762:	4605      	mov	r5, r0
 800c764:	0710      	lsls	r0, r2, #28
 800c766:	460c      	mov	r4, r1
 800c768:	d458      	bmi.n	800c81c <__sflush_r+0xc0>
 800c76a:	684b      	ldr	r3, [r1, #4]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	dc05      	bgt.n	800c77c <__sflush_r+0x20>
 800c770:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c772:	2b00      	cmp	r3, #0
 800c774:	dc02      	bgt.n	800c77c <__sflush_r+0x20>
 800c776:	2000      	movs	r0, #0
 800c778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c77c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c77e:	2e00      	cmp	r6, #0
 800c780:	d0f9      	beq.n	800c776 <__sflush_r+0x1a>
 800c782:	2300      	movs	r3, #0
 800c784:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c788:	682f      	ldr	r7, [r5, #0]
 800c78a:	602b      	str	r3, [r5, #0]
 800c78c:	d032      	beq.n	800c7f4 <__sflush_r+0x98>
 800c78e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c790:	89a3      	ldrh	r3, [r4, #12]
 800c792:	075a      	lsls	r2, r3, #29
 800c794:	d505      	bpl.n	800c7a2 <__sflush_r+0x46>
 800c796:	6863      	ldr	r3, [r4, #4]
 800c798:	1ac0      	subs	r0, r0, r3
 800c79a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c79c:	b10b      	cbz	r3, 800c7a2 <__sflush_r+0x46>
 800c79e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c7a0:	1ac0      	subs	r0, r0, r3
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	4602      	mov	r2, r0
 800c7a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c7a8:	6a21      	ldr	r1, [r4, #32]
 800c7aa:	4628      	mov	r0, r5
 800c7ac:	47b0      	blx	r6
 800c7ae:	1c43      	adds	r3, r0, #1
 800c7b0:	89a3      	ldrh	r3, [r4, #12]
 800c7b2:	d106      	bne.n	800c7c2 <__sflush_r+0x66>
 800c7b4:	6829      	ldr	r1, [r5, #0]
 800c7b6:	291d      	cmp	r1, #29
 800c7b8:	d82c      	bhi.n	800c814 <__sflush_r+0xb8>
 800c7ba:	4a2a      	ldr	r2, [pc, #168]	; (800c864 <__sflush_r+0x108>)
 800c7bc:	40ca      	lsrs	r2, r1
 800c7be:	07d6      	lsls	r6, r2, #31
 800c7c0:	d528      	bpl.n	800c814 <__sflush_r+0xb8>
 800c7c2:	2200      	movs	r2, #0
 800c7c4:	6062      	str	r2, [r4, #4]
 800c7c6:	04d9      	lsls	r1, r3, #19
 800c7c8:	6922      	ldr	r2, [r4, #16]
 800c7ca:	6022      	str	r2, [r4, #0]
 800c7cc:	d504      	bpl.n	800c7d8 <__sflush_r+0x7c>
 800c7ce:	1c42      	adds	r2, r0, #1
 800c7d0:	d101      	bne.n	800c7d6 <__sflush_r+0x7a>
 800c7d2:	682b      	ldr	r3, [r5, #0]
 800c7d4:	b903      	cbnz	r3, 800c7d8 <__sflush_r+0x7c>
 800c7d6:	6560      	str	r0, [r4, #84]	; 0x54
 800c7d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c7da:	602f      	str	r7, [r5, #0]
 800c7dc:	2900      	cmp	r1, #0
 800c7de:	d0ca      	beq.n	800c776 <__sflush_r+0x1a>
 800c7e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c7e4:	4299      	cmp	r1, r3
 800c7e6:	d002      	beq.n	800c7ee <__sflush_r+0x92>
 800c7e8:	4628      	mov	r0, r5
 800c7ea:	f7ff fc5f 	bl	800c0ac <_free_r>
 800c7ee:	2000      	movs	r0, #0
 800c7f0:	6360      	str	r0, [r4, #52]	; 0x34
 800c7f2:	e7c1      	b.n	800c778 <__sflush_r+0x1c>
 800c7f4:	6a21      	ldr	r1, [r4, #32]
 800c7f6:	2301      	movs	r3, #1
 800c7f8:	4628      	mov	r0, r5
 800c7fa:	47b0      	blx	r6
 800c7fc:	1c41      	adds	r1, r0, #1
 800c7fe:	d1c7      	bne.n	800c790 <__sflush_r+0x34>
 800c800:	682b      	ldr	r3, [r5, #0]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d0c4      	beq.n	800c790 <__sflush_r+0x34>
 800c806:	2b1d      	cmp	r3, #29
 800c808:	d001      	beq.n	800c80e <__sflush_r+0xb2>
 800c80a:	2b16      	cmp	r3, #22
 800c80c:	d101      	bne.n	800c812 <__sflush_r+0xb6>
 800c80e:	602f      	str	r7, [r5, #0]
 800c810:	e7b1      	b.n	800c776 <__sflush_r+0x1a>
 800c812:	89a3      	ldrh	r3, [r4, #12]
 800c814:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c818:	81a3      	strh	r3, [r4, #12]
 800c81a:	e7ad      	b.n	800c778 <__sflush_r+0x1c>
 800c81c:	690f      	ldr	r7, [r1, #16]
 800c81e:	2f00      	cmp	r7, #0
 800c820:	d0a9      	beq.n	800c776 <__sflush_r+0x1a>
 800c822:	0793      	lsls	r3, r2, #30
 800c824:	680e      	ldr	r6, [r1, #0]
 800c826:	bf08      	it	eq
 800c828:	694b      	ldreq	r3, [r1, #20]
 800c82a:	600f      	str	r7, [r1, #0]
 800c82c:	bf18      	it	ne
 800c82e:	2300      	movne	r3, #0
 800c830:	eba6 0807 	sub.w	r8, r6, r7
 800c834:	608b      	str	r3, [r1, #8]
 800c836:	f1b8 0f00 	cmp.w	r8, #0
 800c83a:	dd9c      	ble.n	800c776 <__sflush_r+0x1a>
 800c83c:	6a21      	ldr	r1, [r4, #32]
 800c83e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c840:	4643      	mov	r3, r8
 800c842:	463a      	mov	r2, r7
 800c844:	4628      	mov	r0, r5
 800c846:	47b0      	blx	r6
 800c848:	2800      	cmp	r0, #0
 800c84a:	dc06      	bgt.n	800c85a <__sflush_r+0xfe>
 800c84c:	89a3      	ldrh	r3, [r4, #12]
 800c84e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c852:	81a3      	strh	r3, [r4, #12]
 800c854:	f04f 30ff 	mov.w	r0, #4294967295
 800c858:	e78e      	b.n	800c778 <__sflush_r+0x1c>
 800c85a:	4407      	add	r7, r0
 800c85c:	eba8 0800 	sub.w	r8, r8, r0
 800c860:	e7e9      	b.n	800c836 <__sflush_r+0xda>
 800c862:	bf00      	nop
 800c864:	20400001 	.word	0x20400001

0800c868 <_fflush_r>:
 800c868:	b538      	push	{r3, r4, r5, lr}
 800c86a:	690b      	ldr	r3, [r1, #16]
 800c86c:	4605      	mov	r5, r0
 800c86e:	460c      	mov	r4, r1
 800c870:	b913      	cbnz	r3, 800c878 <_fflush_r+0x10>
 800c872:	2500      	movs	r5, #0
 800c874:	4628      	mov	r0, r5
 800c876:	bd38      	pop	{r3, r4, r5, pc}
 800c878:	b118      	cbz	r0, 800c882 <_fflush_r+0x1a>
 800c87a:	6983      	ldr	r3, [r0, #24]
 800c87c:	b90b      	cbnz	r3, 800c882 <_fflush_r+0x1a>
 800c87e:	f7fe ffcb 	bl	800b818 <__sinit>
 800c882:	4b14      	ldr	r3, [pc, #80]	; (800c8d4 <_fflush_r+0x6c>)
 800c884:	429c      	cmp	r4, r3
 800c886:	d11b      	bne.n	800c8c0 <_fflush_r+0x58>
 800c888:	686c      	ldr	r4, [r5, #4]
 800c88a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d0ef      	beq.n	800c872 <_fflush_r+0xa>
 800c892:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c894:	07d0      	lsls	r0, r2, #31
 800c896:	d404      	bmi.n	800c8a2 <_fflush_r+0x3a>
 800c898:	0599      	lsls	r1, r3, #22
 800c89a:	d402      	bmi.n	800c8a2 <_fflush_r+0x3a>
 800c89c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c89e:	f7ff f85e 	bl	800b95e <__retarget_lock_acquire_recursive>
 800c8a2:	4628      	mov	r0, r5
 800c8a4:	4621      	mov	r1, r4
 800c8a6:	f7ff ff59 	bl	800c75c <__sflush_r>
 800c8aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c8ac:	07da      	lsls	r2, r3, #31
 800c8ae:	4605      	mov	r5, r0
 800c8b0:	d4e0      	bmi.n	800c874 <_fflush_r+0xc>
 800c8b2:	89a3      	ldrh	r3, [r4, #12]
 800c8b4:	059b      	lsls	r3, r3, #22
 800c8b6:	d4dd      	bmi.n	800c874 <_fflush_r+0xc>
 800c8b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c8ba:	f7ff f851 	bl	800b960 <__retarget_lock_release_recursive>
 800c8be:	e7d9      	b.n	800c874 <_fflush_r+0xc>
 800c8c0:	4b05      	ldr	r3, [pc, #20]	; (800c8d8 <_fflush_r+0x70>)
 800c8c2:	429c      	cmp	r4, r3
 800c8c4:	d101      	bne.n	800c8ca <_fflush_r+0x62>
 800c8c6:	68ac      	ldr	r4, [r5, #8]
 800c8c8:	e7df      	b.n	800c88a <_fflush_r+0x22>
 800c8ca:	4b04      	ldr	r3, [pc, #16]	; (800c8dc <_fflush_r+0x74>)
 800c8cc:	429c      	cmp	r4, r3
 800c8ce:	bf08      	it	eq
 800c8d0:	68ec      	ldreq	r4, [r5, #12]
 800c8d2:	e7da      	b.n	800c88a <_fflush_r+0x22>
 800c8d4:	0800d0d8 	.word	0x0800d0d8
 800c8d8:	0800d0f8 	.word	0x0800d0f8
 800c8dc:	0800d0b8 	.word	0x0800d0b8

0800c8e0 <fiprintf>:
 800c8e0:	b40e      	push	{r1, r2, r3}
 800c8e2:	b503      	push	{r0, r1, lr}
 800c8e4:	4601      	mov	r1, r0
 800c8e6:	ab03      	add	r3, sp, #12
 800c8e8:	4805      	ldr	r0, [pc, #20]	; (800c900 <fiprintf+0x20>)
 800c8ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8ee:	6800      	ldr	r0, [r0, #0]
 800c8f0:	9301      	str	r3, [sp, #4]
 800c8f2:	f7ff fcaf 	bl	800c254 <_vfiprintf_r>
 800c8f6:	b002      	add	sp, #8
 800c8f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c8fc:	b003      	add	sp, #12
 800c8fe:	4770      	bx	lr
 800c900:	20000090 	.word	0x20000090

0800c904 <_lseek_r>:
 800c904:	b538      	push	{r3, r4, r5, lr}
 800c906:	4d07      	ldr	r5, [pc, #28]	; (800c924 <_lseek_r+0x20>)
 800c908:	4604      	mov	r4, r0
 800c90a:	4608      	mov	r0, r1
 800c90c:	4611      	mov	r1, r2
 800c90e:	2200      	movs	r2, #0
 800c910:	602a      	str	r2, [r5, #0]
 800c912:	461a      	mov	r2, r3
 800c914:	f7f6 f8de 	bl	8002ad4 <_lseek>
 800c918:	1c43      	adds	r3, r0, #1
 800c91a:	d102      	bne.n	800c922 <_lseek_r+0x1e>
 800c91c:	682b      	ldr	r3, [r5, #0]
 800c91e:	b103      	cbz	r3, 800c922 <_lseek_r+0x1e>
 800c920:	6023      	str	r3, [r4, #0]
 800c922:	bd38      	pop	{r3, r4, r5, pc}
 800c924:	20000ad4 	.word	0x20000ad4

0800c928 <__swhatbuf_r>:
 800c928:	b570      	push	{r4, r5, r6, lr}
 800c92a:	460e      	mov	r6, r1
 800c92c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c930:	2900      	cmp	r1, #0
 800c932:	b096      	sub	sp, #88	; 0x58
 800c934:	4614      	mov	r4, r2
 800c936:	461d      	mov	r5, r3
 800c938:	da07      	bge.n	800c94a <__swhatbuf_r+0x22>
 800c93a:	2300      	movs	r3, #0
 800c93c:	602b      	str	r3, [r5, #0]
 800c93e:	89b3      	ldrh	r3, [r6, #12]
 800c940:	061a      	lsls	r2, r3, #24
 800c942:	d410      	bmi.n	800c966 <__swhatbuf_r+0x3e>
 800c944:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c948:	e00e      	b.n	800c968 <__swhatbuf_r+0x40>
 800c94a:	466a      	mov	r2, sp
 800c94c:	f000 f894 	bl	800ca78 <_fstat_r>
 800c950:	2800      	cmp	r0, #0
 800c952:	dbf2      	blt.n	800c93a <__swhatbuf_r+0x12>
 800c954:	9a01      	ldr	r2, [sp, #4]
 800c956:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c95a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c95e:	425a      	negs	r2, r3
 800c960:	415a      	adcs	r2, r3
 800c962:	602a      	str	r2, [r5, #0]
 800c964:	e7ee      	b.n	800c944 <__swhatbuf_r+0x1c>
 800c966:	2340      	movs	r3, #64	; 0x40
 800c968:	2000      	movs	r0, #0
 800c96a:	6023      	str	r3, [r4, #0]
 800c96c:	b016      	add	sp, #88	; 0x58
 800c96e:	bd70      	pop	{r4, r5, r6, pc}

0800c970 <__smakebuf_r>:
 800c970:	898b      	ldrh	r3, [r1, #12]
 800c972:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c974:	079d      	lsls	r5, r3, #30
 800c976:	4606      	mov	r6, r0
 800c978:	460c      	mov	r4, r1
 800c97a:	d507      	bpl.n	800c98c <__smakebuf_r+0x1c>
 800c97c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c980:	6023      	str	r3, [r4, #0]
 800c982:	6123      	str	r3, [r4, #16]
 800c984:	2301      	movs	r3, #1
 800c986:	6163      	str	r3, [r4, #20]
 800c988:	b002      	add	sp, #8
 800c98a:	bd70      	pop	{r4, r5, r6, pc}
 800c98c:	ab01      	add	r3, sp, #4
 800c98e:	466a      	mov	r2, sp
 800c990:	f7ff ffca 	bl	800c928 <__swhatbuf_r>
 800c994:	9900      	ldr	r1, [sp, #0]
 800c996:	4605      	mov	r5, r0
 800c998:	4630      	mov	r0, r6
 800c99a:	f7ff fbd7 	bl	800c14c <_malloc_r>
 800c99e:	b948      	cbnz	r0, 800c9b4 <__smakebuf_r+0x44>
 800c9a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9a4:	059a      	lsls	r2, r3, #22
 800c9a6:	d4ef      	bmi.n	800c988 <__smakebuf_r+0x18>
 800c9a8:	f023 0303 	bic.w	r3, r3, #3
 800c9ac:	f043 0302 	orr.w	r3, r3, #2
 800c9b0:	81a3      	strh	r3, [r4, #12]
 800c9b2:	e7e3      	b.n	800c97c <__smakebuf_r+0xc>
 800c9b4:	4b0d      	ldr	r3, [pc, #52]	; (800c9ec <__smakebuf_r+0x7c>)
 800c9b6:	62b3      	str	r3, [r6, #40]	; 0x28
 800c9b8:	89a3      	ldrh	r3, [r4, #12]
 800c9ba:	6020      	str	r0, [r4, #0]
 800c9bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9c0:	81a3      	strh	r3, [r4, #12]
 800c9c2:	9b00      	ldr	r3, [sp, #0]
 800c9c4:	6163      	str	r3, [r4, #20]
 800c9c6:	9b01      	ldr	r3, [sp, #4]
 800c9c8:	6120      	str	r0, [r4, #16]
 800c9ca:	b15b      	cbz	r3, 800c9e4 <__smakebuf_r+0x74>
 800c9cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c9d0:	4630      	mov	r0, r6
 800c9d2:	f000 f863 	bl	800ca9c <_isatty_r>
 800c9d6:	b128      	cbz	r0, 800c9e4 <__smakebuf_r+0x74>
 800c9d8:	89a3      	ldrh	r3, [r4, #12]
 800c9da:	f023 0303 	bic.w	r3, r3, #3
 800c9de:	f043 0301 	orr.w	r3, r3, #1
 800c9e2:	81a3      	strh	r3, [r4, #12]
 800c9e4:	89a0      	ldrh	r0, [r4, #12]
 800c9e6:	4305      	orrs	r5, r0
 800c9e8:	81a5      	strh	r5, [r4, #12]
 800c9ea:	e7cd      	b.n	800c988 <__smakebuf_r+0x18>
 800c9ec:	0800b7b1 	.word	0x0800b7b1

0800c9f0 <__ascii_mbtowc>:
 800c9f0:	b082      	sub	sp, #8
 800c9f2:	b901      	cbnz	r1, 800c9f6 <__ascii_mbtowc+0x6>
 800c9f4:	a901      	add	r1, sp, #4
 800c9f6:	b142      	cbz	r2, 800ca0a <__ascii_mbtowc+0x1a>
 800c9f8:	b14b      	cbz	r3, 800ca0e <__ascii_mbtowc+0x1e>
 800c9fa:	7813      	ldrb	r3, [r2, #0]
 800c9fc:	600b      	str	r3, [r1, #0]
 800c9fe:	7812      	ldrb	r2, [r2, #0]
 800ca00:	1e10      	subs	r0, r2, #0
 800ca02:	bf18      	it	ne
 800ca04:	2001      	movne	r0, #1
 800ca06:	b002      	add	sp, #8
 800ca08:	4770      	bx	lr
 800ca0a:	4610      	mov	r0, r2
 800ca0c:	e7fb      	b.n	800ca06 <__ascii_mbtowc+0x16>
 800ca0e:	f06f 0001 	mvn.w	r0, #1
 800ca12:	e7f8      	b.n	800ca06 <__ascii_mbtowc+0x16>

0800ca14 <__malloc_lock>:
 800ca14:	4801      	ldr	r0, [pc, #4]	; (800ca1c <__malloc_lock+0x8>)
 800ca16:	f7fe bfa2 	b.w	800b95e <__retarget_lock_acquire_recursive>
 800ca1a:	bf00      	nop
 800ca1c:	20000acc 	.word	0x20000acc

0800ca20 <__malloc_unlock>:
 800ca20:	4801      	ldr	r0, [pc, #4]	; (800ca28 <__malloc_unlock+0x8>)
 800ca22:	f7fe bf9d 	b.w	800b960 <__retarget_lock_release_recursive>
 800ca26:	bf00      	nop
 800ca28:	20000acc 	.word	0x20000acc

0800ca2c <_read_r>:
 800ca2c:	b538      	push	{r3, r4, r5, lr}
 800ca2e:	4d07      	ldr	r5, [pc, #28]	; (800ca4c <_read_r+0x20>)
 800ca30:	4604      	mov	r4, r0
 800ca32:	4608      	mov	r0, r1
 800ca34:	4611      	mov	r1, r2
 800ca36:	2200      	movs	r2, #0
 800ca38:	602a      	str	r2, [r5, #0]
 800ca3a:	461a      	mov	r2, r3
 800ca3c:	f7f5 ffea 	bl	8002a14 <_read>
 800ca40:	1c43      	adds	r3, r0, #1
 800ca42:	d102      	bne.n	800ca4a <_read_r+0x1e>
 800ca44:	682b      	ldr	r3, [r5, #0]
 800ca46:	b103      	cbz	r3, 800ca4a <_read_r+0x1e>
 800ca48:	6023      	str	r3, [r4, #0]
 800ca4a:	bd38      	pop	{r3, r4, r5, pc}
 800ca4c:	20000ad4 	.word	0x20000ad4

0800ca50 <__ascii_wctomb>:
 800ca50:	b149      	cbz	r1, 800ca66 <__ascii_wctomb+0x16>
 800ca52:	2aff      	cmp	r2, #255	; 0xff
 800ca54:	bf85      	ittet	hi
 800ca56:	238a      	movhi	r3, #138	; 0x8a
 800ca58:	6003      	strhi	r3, [r0, #0]
 800ca5a:	700a      	strbls	r2, [r1, #0]
 800ca5c:	f04f 30ff 	movhi.w	r0, #4294967295
 800ca60:	bf98      	it	ls
 800ca62:	2001      	movls	r0, #1
 800ca64:	4770      	bx	lr
 800ca66:	4608      	mov	r0, r1
 800ca68:	4770      	bx	lr

0800ca6a <abort>:
 800ca6a:	b508      	push	{r3, lr}
 800ca6c:	2006      	movs	r0, #6
 800ca6e:	f000 f84d 	bl	800cb0c <raise>
 800ca72:	2001      	movs	r0, #1
 800ca74:	f7f5 ffc4 	bl	8002a00 <_exit>

0800ca78 <_fstat_r>:
 800ca78:	b538      	push	{r3, r4, r5, lr}
 800ca7a:	4d07      	ldr	r5, [pc, #28]	; (800ca98 <_fstat_r+0x20>)
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	4604      	mov	r4, r0
 800ca80:	4608      	mov	r0, r1
 800ca82:	4611      	mov	r1, r2
 800ca84:	602b      	str	r3, [r5, #0]
 800ca86:	f7f6 f80a 	bl	8002a9e <_fstat>
 800ca8a:	1c43      	adds	r3, r0, #1
 800ca8c:	d102      	bne.n	800ca94 <_fstat_r+0x1c>
 800ca8e:	682b      	ldr	r3, [r5, #0]
 800ca90:	b103      	cbz	r3, 800ca94 <_fstat_r+0x1c>
 800ca92:	6023      	str	r3, [r4, #0]
 800ca94:	bd38      	pop	{r3, r4, r5, pc}
 800ca96:	bf00      	nop
 800ca98:	20000ad4 	.word	0x20000ad4

0800ca9c <_isatty_r>:
 800ca9c:	b538      	push	{r3, r4, r5, lr}
 800ca9e:	4d06      	ldr	r5, [pc, #24]	; (800cab8 <_isatty_r+0x1c>)
 800caa0:	2300      	movs	r3, #0
 800caa2:	4604      	mov	r4, r0
 800caa4:	4608      	mov	r0, r1
 800caa6:	602b      	str	r3, [r5, #0]
 800caa8:	f7f6 f809 	bl	8002abe <_isatty>
 800caac:	1c43      	adds	r3, r0, #1
 800caae:	d102      	bne.n	800cab6 <_isatty_r+0x1a>
 800cab0:	682b      	ldr	r3, [r5, #0]
 800cab2:	b103      	cbz	r3, 800cab6 <_isatty_r+0x1a>
 800cab4:	6023      	str	r3, [r4, #0]
 800cab6:	bd38      	pop	{r3, r4, r5, pc}
 800cab8:	20000ad4 	.word	0x20000ad4

0800cabc <_raise_r>:
 800cabc:	291f      	cmp	r1, #31
 800cabe:	b538      	push	{r3, r4, r5, lr}
 800cac0:	4604      	mov	r4, r0
 800cac2:	460d      	mov	r5, r1
 800cac4:	d904      	bls.n	800cad0 <_raise_r+0x14>
 800cac6:	2316      	movs	r3, #22
 800cac8:	6003      	str	r3, [r0, #0]
 800caca:	f04f 30ff 	mov.w	r0, #4294967295
 800cace:	bd38      	pop	{r3, r4, r5, pc}
 800cad0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cad2:	b112      	cbz	r2, 800cada <_raise_r+0x1e>
 800cad4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cad8:	b94b      	cbnz	r3, 800caee <_raise_r+0x32>
 800cada:	4620      	mov	r0, r4
 800cadc:	f000 f830 	bl	800cb40 <_getpid_r>
 800cae0:	462a      	mov	r2, r5
 800cae2:	4601      	mov	r1, r0
 800cae4:	4620      	mov	r0, r4
 800cae6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800caea:	f000 b817 	b.w	800cb1c <_kill_r>
 800caee:	2b01      	cmp	r3, #1
 800caf0:	d00a      	beq.n	800cb08 <_raise_r+0x4c>
 800caf2:	1c59      	adds	r1, r3, #1
 800caf4:	d103      	bne.n	800cafe <_raise_r+0x42>
 800caf6:	2316      	movs	r3, #22
 800caf8:	6003      	str	r3, [r0, #0]
 800cafa:	2001      	movs	r0, #1
 800cafc:	e7e7      	b.n	800cace <_raise_r+0x12>
 800cafe:	2400      	movs	r4, #0
 800cb00:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cb04:	4628      	mov	r0, r5
 800cb06:	4798      	blx	r3
 800cb08:	2000      	movs	r0, #0
 800cb0a:	e7e0      	b.n	800cace <_raise_r+0x12>

0800cb0c <raise>:
 800cb0c:	4b02      	ldr	r3, [pc, #8]	; (800cb18 <raise+0xc>)
 800cb0e:	4601      	mov	r1, r0
 800cb10:	6818      	ldr	r0, [r3, #0]
 800cb12:	f7ff bfd3 	b.w	800cabc <_raise_r>
 800cb16:	bf00      	nop
 800cb18:	20000090 	.word	0x20000090

0800cb1c <_kill_r>:
 800cb1c:	b538      	push	{r3, r4, r5, lr}
 800cb1e:	4d07      	ldr	r5, [pc, #28]	; (800cb3c <_kill_r+0x20>)
 800cb20:	2300      	movs	r3, #0
 800cb22:	4604      	mov	r4, r0
 800cb24:	4608      	mov	r0, r1
 800cb26:	4611      	mov	r1, r2
 800cb28:	602b      	str	r3, [r5, #0]
 800cb2a:	f7f5 ff59 	bl	80029e0 <_kill>
 800cb2e:	1c43      	adds	r3, r0, #1
 800cb30:	d102      	bne.n	800cb38 <_kill_r+0x1c>
 800cb32:	682b      	ldr	r3, [r5, #0]
 800cb34:	b103      	cbz	r3, 800cb38 <_kill_r+0x1c>
 800cb36:	6023      	str	r3, [r4, #0]
 800cb38:	bd38      	pop	{r3, r4, r5, pc}
 800cb3a:	bf00      	nop
 800cb3c:	20000ad4 	.word	0x20000ad4

0800cb40 <_getpid_r>:
 800cb40:	f7f5 bf46 	b.w	80029d0 <_getpid>
 800cb44:	0000      	movs	r0, r0
	...

0800cb48 <log>:
 800cb48:	b538      	push	{r3, r4, r5, lr}
 800cb4a:	ed2d 8b02 	vpush	{d8}
 800cb4e:	ec55 4b10 	vmov	r4, r5, d0
 800cb52:	f000 f841 	bl	800cbd8 <__ieee754_log>
 800cb56:	4b1e      	ldr	r3, [pc, #120]	; (800cbd0 <log+0x88>)
 800cb58:	eeb0 8a40 	vmov.f32	s16, s0
 800cb5c:	eef0 8a60 	vmov.f32	s17, s1
 800cb60:	f993 3000 	ldrsb.w	r3, [r3]
 800cb64:	3301      	adds	r3, #1
 800cb66:	d01a      	beq.n	800cb9e <log+0x56>
 800cb68:	4622      	mov	r2, r4
 800cb6a:	462b      	mov	r3, r5
 800cb6c:	4620      	mov	r0, r4
 800cb6e:	4629      	mov	r1, r5
 800cb70:	f7f3 ffdc 	bl	8000b2c <__aeabi_dcmpun>
 800cb74:	b998      	cbnz	r0, 800cb9e <log+0x56>
 800cb76:	2200      	movs	r2, #0
 800cb78:	2300      	movs	r3, #0
 800cb7a:	4620      	mov	r0, r4
 800cb7c:	4629      	mov	r1, r5
 800cb7e:	f7f3 ffcb 	bl	8000b18 <__aeabi_dcmpgt>
 800cb82:	b960      	cbnz	r0, 800cb9e <log+0x56>
 800cb84:	2200      	movs	r2, #0
 800cb86:	2300      	movs	r3, #0
 800cb88:	4620      	mov	r0, r4
 800cb8a:	4629      	mov	r1, r5
 800cb8c:	f7f3 ff9c 	bl	8000ac8 <__aeabi_dcmpeq>
 800cb90:	b160      	cbz	r0, 800cbac <log+0x64>
 800cb92:	f7fd fabd 	bl	800a110 <__errno>
 800cb96:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 800cbc8 <log+0x80>
 800cb9a:	2322      	movs	r3, #34	; 0x22
 800cb9c:	6003      	str	r3, [r0, #0]
 800cb9e:	eeb0 0a48 	vmov.f32	s0, s16
 800cba2:	eef0 0a68 	vmov.f32	s1, s17
 800cba6:	ecbd 8b02 	vpop	{d8}
 800cbaa:	bd38      	pop	{r3, r4, r5, pc}
 800cbac:	f7fd fab0 	bl	800a110 <__errno>
 800cbb0:	ecbd 8b02 	vpop	{d8}
 800cbb4:	2321      	movs	r3, #33	; 0x21
 800cbb6:	6003      	str	r3, [r0, #0]
 800cbb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cbbc:	4805      	ldr	r0, [pc, #20]	; (800cbd4 <log+0x8c>)
 800cbbe:	f000 b9c7 	b.w	800cf50 <nan>
 800cbc2:	bf00      	nop
 800cbc4:	f3af 8000 	nop.w
 800cbc8:	00000000 	.word	0x00000000
 800cbcc:	fff00000 	.word	0xfff00000
 800cbd0:	20000260 	.word	0x20000260
 800cbd4:	0800d2c0 	.word	0x0800d2c0

0800cbd8 <__ieee754_log>:
 800cbd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbdc:	ec51 0b10 	vmov	r0, r1, d0
 800cbe0:	ed2d 8b04 	vpush	{d8-d9}
 800cbe4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800cbe8:	b083      	sub	sp, #12
 800cbea:	460d      	mov	r5, r1
 800cbec:	da29      	bge.n	800cc42 <__ieee754_log+0x6a>
 800cbee:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cbf2:	4303      	orrs	r3, r0
 800cbf4:	ee10 2a10 	vmov	r2, s0
 800cbf8:	d10c      	bne.n	800cc14 <__ieee754_log+0x3c>
 800cbfa:	49cf      	ldr	r1, [pc, #828]	; (800cf38 <__ieee754_log+0x360>)
 800cbfc:	2200      	movs	r2, #0
 800cbfe:	2300      	movs	r3, #0
 800cc00:	2000      	movs	r0, #0
 800cc02:	f7f3 fe23 	bl	800084c <__aeabi_ddiv>
 800cc06:	ec41 0b10 	vmov	d0, r0, r1
 800cc0a:	b003      	add	sp, #12
 800cc0c:	ecbd 8b04 	vpop	{d8-d9}
 800cc10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc14:	2900      	cmp	r1, #0
 800cc16:	da05      	bge.n	800cc24 <__ieee754_log+0x4c>
 800cc18:	460b      	mov	r3, r1
 800cc1a:	f7f3 fb35 	bl	8000288 <__aeabi_dsub>
 800cc1e:	2200      	movs	r2, #0
 800cc20:	2300      	movs	r3, #0
 800cc22:	e7ee      	b.n	800cc02 <__ieee754_log+0x2a>
 800cc24:	4bc5      	ldr	r3, [pc, #788]	; (800cf3c <__ieee754_log+0x364>)
 800cc26:	2200      	movs	r2, #0
 800cc28:	f7f3 fce6 	bl	80005f8 <__aeabi_dmul>
 800cc2c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800cc30:	460d      	mov	r5, r1
 800cc32:	4ac3      	ldr	r2, [pc, #780]	; (800cf40 <__ieee754_log+0x368>)
 800cc34:	4295      	cmp	r5, r2
 800cc36:	dd06      	ble.n	800cc46 <__ieee754_log+0x6e>
 800cc38:	4602      	mov	r2, r0
 800cc3a:	460b      	mov	r3, r1
 800cc3c:	f7f3 fb26 	bl	800028c <__adddf3>
 800cc40:	e7e1      	b.n	800cc06 <__ieee754_log+0x2e>
 800cc42:	2300      	movs	r3, #0
 800cc44:	e7f5      	b.n	800cc32 <__ieee754_log+0x5a>
 800cc46:	152c      	asrs	r4, r5, #20
 800cc48:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800cc4c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800cc50:	441c      	add	r4, r3
 800cc52:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800cc56:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800cc5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cc5e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800cc62:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800cc66:	ea42 0105 	orr.w	r1, r2, r5
 800cc6a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800cc6e:	2200      	movs	r2, #0
 800cc70:	4bb4      	ldr	r3, [pc, #720]	; (800cf44 <__ieee754_log+0x36c>)
 800cc72:	f7f3 fb09 	bl	8000288 <__aeabi_dsub>
 800cc76:	1cab      	adds	r3, r5, #2
 800cc78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cc7c:	2b02      	cmp	r3, #2
 800cc7e:	4682      	mov	sl, r0
 800cc80:	468b      	mov	fp, r1
 800cc82:	f04f 0200 	mov.w	r2, #0
 800cc86:	dc53      	bgt.n	800cd30 <__ieee754_log+0x158>
 800cc88:	2300      	movs	r3, #0
 800cc8a:	f7f3 ff1d 	bl	8000ac8 <__aeabi_dcmpeq>
 800cc8e:	b1d0      	cbz	r0, 800ccc6 <__ieee754_log+0xee>
 800cc90:	2c00      	cmp	r4, #0
 800cc92:	f000 8122 	beq.w	800ceda <__ieee754_log+0x302>
 800cc96:	4620      	mov	r0, r4
 800cc98:	f7f3 fc44 	bl	8000524 <__aeabi_i2d>
 800cc9c:	a390      	add	r3, pc, #576	; (adr r3, 800cee0 <__ieee754_log+0x308>)
 800cc9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cca2:	4606      	mov	r6, r0
 800cca4:	460f      	mov	r7, r1
 800cca6:	f7f3 fca7 	bl	80005f8 <__aeabi_dmul>
 800ccaa:	a38f      	add	r3, pc, #572	; (adr r3, 800cee8 <__ieee754_log+0x310>)
 800ccac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccb0:	4604      	mov	r4, r0
 800ccb2:	460d      	mov	r5, r1
 800ccb4:	4630      	mov	r0, r6
 800ccb6:	4639      	mov	r1, r7
 800ccb8:	f7f3 fc9e 	bl	80005f8 <__aeabi_dmul>
 800ccbc:	4602      	mov	r2, r0
 800ccbe:	460b      	mov	r3, r1
 800ccc0:	4620      	mov	r0, r4
 800ccc2:	4629      	mov	r1, r5
 800ccc4:	e7ba      	b.n	800cc3c <__ieee754_log+0x64>
 800ccc6:	a38a      	add	r3, pc, #552	; (adr r3, 800cef0 <__ieee754_log+0x318>)
 800ccc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cccc:	4650      	mov	r0, sl
 800ccce:	4659      	mov	r1, fp
 800ccd0:	f7f3 fc92 	bl	80005f8 <__aeabi_dmul>
 800ccd4:	4602      	mov	r2, r0
 800ccd6:	460b      	mov	r3, r1
 800ccd8:	2000      	movs	r0, #0
 800ccda:	499b      	ldr	r1, [pc, #620]	; (800cf48 <__ieee754_log+0x370>)
 800ccdc:	f7f3 fad4 	bl	8000288 <__aeabi_dsub>
 800cce0:	4652      	mov	r2, sl
 800cce2:	4606      	mov	r6, r0
 800cce4:	460f      	mov	r7, r1
 800cce6:	465b      	mov	r3, fp
 800cce8:	4650      	mov	r0, sl
 800ccea:	4659      	mov	r1, fp
 800ccec:	f7f3 fc84 	bl	80005f8 <__aeabi_dmul>
 800ccf0:	4602      	mov	r2, r0
 800ccf2:	460b      	mov	r3, r1
 800ccf4:	4630      	mov	r0, r6
 800ccf6:	4639      	mov	r1, r7
 800ccf8:	f7f3 fc7e 	bl	80005f8 <__aeabi_dmul>
 800ccfc:	4606      	mov	r6, r0
 800ccfe:	460f      	mov	r7, r1
 800cd00:	b914      	cbnz	r4, 800cd08 <__ieee754_log+0x130>
 800cd02:	4632      	mov	r2, r6
 800cd04:	463b      	mov	r3, r7
 800cd06:	e0a2      	b.n	800ce4e <__ieee754_log+0x276>
 800cd08:	4620      	mov	r0, r4
 800cd0a:	f7f3 fc0b 	bl	8000524 <__aeabi_i2d>
 800cd0e:	a374      	add	r3, pc, #464	; (adr r3, 800cee0 <__ieee754_log+0x308>)
 800cd10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd14:	4680      	mov	r8, r0
 800cd16:	4689      	mov	r9, r1
 800cd18:	f7f3 fc6e 	bl	80005f8 <__aeabi_dmul>
 800cd1c:	a372      	add	r3, pc, #456	; (adr r3, 800cee8 <__ieee754_log+0x310>)
 800cd1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd22:	4604      	mov	r4, r0
 800cd24:	460d      	mov	r5, r1
 800cd26:	4640      	mov	r0, r8
 800cd28:	4649      	mov	r1, r9
 800cd2a:	f7f3 fc65 	bl	80005f8 <__aeabi_dmul>
 800cd2e:	e0a7      	b.n	800ce80 <__ieee754_log+0x2a8>
 800cd30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cd34:	f7f3 faaa 	bl	800028c <__adddf3>
 800cd38:	4602      	mov	r2, r0
 800cd3a:	460b      	mov	r3, r1
 800cd3c:	4650      	mov	r0, sl
 800cd3e:	4659      	mov	r1, fp
 800cd40:	f7f3 fd84 	bl	800084c <__aeabi_ddiv>
 800cd44:	ec41 0b18 	vmov	d8, r0, r1
 800cd48:	4620      	mov	r0, r4
 800cd4a:	f7f3 fbeb 	bl	8000524 <__aeabi_i2d>
 800cd4e:	ec53 2b18 	vmov	r2, r3, d8
 800cd52:	ec41 0b19 	vmov	d9, r0, r1
 800cd56:	ec51 0b18 	vmov	r0, r1, d8
 800cd5a:	f7f3 fc4d 	bl	80005f8 <__aeabi_dmul>
 800cd5e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800cd62:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800cd66:	9301      	str	r3, [sp, #4]
 800cd68:	4602      	mov	r2, r0
 800cd6a:	460b      	mov	r3, r1
 800cd6c:	4680      	mov	r8, r0
 800cd6e:	4689      	mov	r9, r1
 800cd70:	f7f3 fc42 	bl	80005f8 <__aeabi_dmul>
 800cd74:	a360      	add	r3, pc, #384	; (adr r3, 800cef8 <__ieee754_log+0x320>)
 800cd76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd7a:	4606      	mov	r6, r0
 800cd7c:	460f      	mov	r7, r1
 800cd7e:	f7f3 fc3b 	bl	80005f8 <__aeabi_dmul>
 800cd82:	a35f      	add	r3, pc, #380	; (adr r3, 800cf00 <__ieee754_log+0x328>)
 800cd84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd88:	f7f3 fa80 	bl	800028c <__adddf3>
 800cd8c:	4632      	mov	r2, r6
 800cd8e:	463b      	mov	r3, r7
 800cd90:	f7f3 fc32 	bl	80005f8 <__aeabi_dmul>
 800cd94:	a35c      	add	r3, pc, #368	; (adr r3, 800cf08 <__ieee754_log+0x330>)
 800cd96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd9a:	f7f3 fa77 	bl	800028c <__adddf3>
 800cd9e:	4632      	mov	r2, r6
 800cda0:	463b      	mov	r3, r7
 800cda2:	f7f3 fc29 	bl	80005f8 <__aeabi_dmul>
 800cda6:	a35a      	add	r3, pc, #360	; (adr r3, 800cf10 <__ieee754_log+0x338>)
 800cda8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdac:	f7f3 fa6e 	bl	800028c <__adddf3>
 800cdb0:	4642      	mov	r2, r8
 800cdb2:	464b      	mov	r3, r9
 800cdb4:	f7f3 fc20 	bl	80005f8 <__aeabi_dmul>
 800cdb8:	a357      	add	r3, pc, #348	; (adr r3, 800cf18 <__ieee754_log+0x340>)
 800cdba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdbe:	4680      	mov	r8, r0
 800cdc0:	4689      	mov	r9, r1
 800cdc2:	4630      	mov	r0, r6
 800cdc4:	4639      	mov	r1, r7
 800cdc6:	f7f3 fc17 	bl	80005f8 <__aeabi_dmul>
 800cdca:	a355      	add	r3, pc, #340	; (adr r3, 800cf20 <__ieee754_log+0x348>)
 800cdcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdd0:	f7f3 fa5c 	bl	800028c <__adddf3>
 800cdd4:	4632      	mov	r2, r6
 800cdd6:	463b      	mov	r3, r7
 800cdd8:	f7f3 fc0e 	bl	80005f8 <__aeabi_dmul>
 800cddc:	a352      	add	r3, pc, #328	; (adr r3, 800cf28 <__ieee754_log+0x350>)
 800cdde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cde2:	f7f3 fa53 	bl	800028c <__adddf3>
 800cde6:	4632      	mov	r2, r6
 800cde8:	463b      	mov	r3, r7
 800cdea:	f7f3 fc05 	bl	80005f8 <__aeabi_dmul>
 800cdee:	460b      	mov	r3, r1
 800cdf0:	4602      	mov	r2, r0
 800cdf2:	4649      	mov	r1, r9
 800cdf4:	4640      	mov	r0, r8
 800cdf6:	f7f3 fa49 	bl	800028c <__adddf3>
 800cdfa:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800cdfe:	9b01      	ldr	r3, [sp, #4]
 800ce00:	3551      	adds	r5, #81	; 0x51
 800ce02:	431d      	orrs	r5, r3
 800ce04:	2d00      	cmp	r5, #0
 800ce06:	4680      	mov	r8, r0
 800ce08:	4689      	mov	r9, r1
 800ce0a:	dd48      	ble.n	800ce9e <__ieee754_log+0x2c6>
 800ce0c:	4b4e      	ldr	r3, [pc, #312]	; (800cf48 <__ieee754_log+0x370>)
 800ce0e:	2200      	movs	r2, #0
 800ce10:	4650      	mov	r0, sl
 800ce12:	4659      	mov	r1, fp
 800ce14:	f7f3 fbf0 	bl	80005f8 <__aeabi_dmul>
 800ce18:	4652      	mov	r2, sl
 800ce1a:	465b      	mov	r3, fp
 800ce1c:	f7f3 fbec 	bl	80005f8 <__aeabi_dmul>
 800ce20:	4602      	mov	r2, r0
 800ce22:	460b      	mov	r3, r1
 800ce24:	4606      	mov	r6, r0
 800ce26:	460f      	mov	r7, r1
 800ce28:	4640      	mov	r0, r8
 800ce2a:	4649      	mov	r1, r9
 800ce2c:	f7f3 fa2e 	bl	800028c <__adddf3>
 800ce30:	ec53 2b18 	vmov	r2, r3, d8
 800ce34:	f7f3 fbe0 	bl	80005f8 <__aeabi_dmul>
 800ce38:	4680      	mov	r8, r0
 800ce3a:	4689      	mov	r9, r1
 800ce3c:	b964      	cbnz	r4, 800ce58 <__ieee754_log+0x280>
 800ce3e:	4602      	mov	r2, r0
 800ce40:	460b      	mov	r3, r1
 800ce42:	4630      	mov	r0, r6
 800ce44:	4639      	mov	r1, r7
 800ce46:	f7f3 fa1f 	bl	8000288 <__aeabi_dsub>
 800ce4a:	4602      	mov	r2, r0
 800ce4c:	460b      	mov	r3, r1
 800ce4e:	4650      	mov	r0, sl
 800ce50:	4659      	mov	r1, fp
 800ce52:	f7f3 fa19 	bl	8000288 <__aeabi_dsub>
 800ce56:	e6d6      	b.n	800cc06 <__ieee754_log+0x2e>
 800ce58:	a321      	add	r3, pc, #132	; (adr r3, 800cee0 <__ieee754_log+0x308>)
 800ce5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce5e:	ec51 0b19 	vmov	r0, r1, d9
 800ce62:	f7f3 fbc9 	bl	80005f8 <__aeabi_dmul>
 800ce66:	a320      	add	r3, pc, #128	; (adr r3, 800cee8 <__ieee754_log+0x310>)
 800ce68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce6c:	4604      	mov	r4, r0
 800ce6e:	460d      	mov	r5, r1
 800ce70:	ec51 0b19 	vmov	r0, r1, d9
 800ce74:	f7f3 fbc0 	bl	80005f8 <__aeabi_dmul>
 800ce78:	4642      	mov	r2, r8
 800ce7a:	464b      	mov	r3, r9
 800ce7c:	f7f3 fa06 	bl	800028c <__adddf3>
 800ce80:	4602      	mov	r2, r0
 800ce82:	460b      	mov	r3, r1
 800ce84:	4630      	mov	r0, r6
 800ce86:	4639      	mov	r1, r7
 800ce88:	f7f3 f9fe 	bl	8000288 <__aeabi_dsub>
 800ce8c:	4652      	mov	r2, sl
 800ce8e:	465b      	mov	r3, fp
 800ce90:	f7f3 f9fa 	bl	8000288 <__aeabi_dsub>
 800ce94:	4602      	mov	r2, r0
 800ce96:	460b      	mov	r3, r1
 800ce98:	4620      	mov	r0, r4
 800ce9a:	4629      	mov	r1, r5
 800ce9c:	e7d9      	b.n	800ce52 <__ieee754_log+0x27a>
 800ce9e:	4602      	mov	r2, r0
 800cea0:	460b      	mov	r3, r1
 800cea2:	4650      	mov	r0, sl
 800cea4:	4659      	mov	r1, fp
 800cea6:	f7f3 f9ef 	bl	8000288 <__aeabi_dsub>
 800ceaa:	ec53 2b18 	vmov	r2, r3, d8
 800ceae:	f7f3 fba3 	bl	80005f8 <__aeabi_dmul>
 800ceb2:	4606      	mov	r6, r0
 800ceb4:	460f      	mov	r7, r1
 800ceb6:	2c00      	cmp	r4, #0
 800ceb8:	f43f af23 	beq.w	800cd02 <__ieee754_log+0x12a>
 800cebc:	a308      	add	r3, pc, #32	; (adr r3, 800cee0 <__ieee754_log+0x308>)
 800cebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cec2:	ec51 0b19 	vmov	r0, r1, d9
 800cec6:	f7f3 fb97 	bl	80005f8 <__aeabi_dmul>
 800ceca:	a307      	add	r3, pc, #28	; (adr r3, 800cee8 <__ieee754_log+0x310>)
 800cecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ced0:	4604      	mov	r4, r0
 800ced2:	460d      	mov	r5, r1
 800ced4:	ec51 0b19 	vmov	r0, r1, d9
 800ced8:	e727      	b.n	800cd2a <__ieee754_log+0x152>
 800ceda:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800cf30 <__ieee754_log+0x358>
 800cede:	e694      	b.n	800cc0a <__ieee754_log+0x32>
 800cee0:	fee00000 	.word	0xfee00000
 800cee4:	3fe62e42 	.word	0x3fe62e42
 800cee8:	35793c76 	.word	0x35793c76
 800ceec:	3dea39ef 	.word	0x3dea39ef
 800cef0:	55555555 	.word	0x55555555
 800cef4:	3fd55555 	.word	0x3fd55555
 800cef8:	df3e5244 	.word	0xdf3e5244
 800cefc:	3fc2f112 	.word	0x3fc2f112
 800cf00:	96cb03de 	.word	0x96cb03de
 800cf04:	3fc74664 	.word	0x3fc74664
 800cf08:	94229359 	.word	0x94229359
 800cf0c:	3fd24924 	.word	0x3fd24924
 800cf10:	55555593 	.word	0x55555593
 800cf14:	3fe55555 	.word	0x3fe55555
 800cf18:	d078c69f 	.word	0xd078c69f
 800cf1c:	3fc39a09 	.word	0x3fc39a09
 800cf20:	1d8e78af 	.word	0x1d8e78af
 800cf24:	3fcc71c5 	.word	0x3fcc71c5
 800cf28:	9997fa04 	.word	0x9997fa04
 800cf2c:	3fd99999 	.word	0x3fd99999
	...
 800cf38:	c3500000 	.word	0xc3500000
 800cf3c:	43500000 	.word	0x43500000
 800cf40:	7fefffff 	.word	0x7fefffff
 800cf44:	3ff00000 	.word	0x3ff00000
 800cf48:	3fe00000 	.word	0x3fe00000
 800cf4c:	00000000 	.word	0x00000000

0800cf50 <nan>:
 800cf50:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800cf58 <nan+0x8>
 800cf54:	4770      	bx	lr
 800cf56:	bf00      	nop
 800cf58:	00000000 	.word	0x00000000
 800cf5c:	7ff80000 	.word	0x7ff80000

0800cf60 <_init>:
 800cf60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf62:	bf00      	nop
 800cf64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf66:	bc08      	pop	{r3}
 800cf68:	469e      	mov	lr, r3
 800cf6a:	4770      	bx	lr

0800cf6c <_fini>:
 800cf6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf6e:	bf00      	nop
 800cf70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf72:	bc08      	pop	{r3}
 800cf74:	469e      	mov	lr, r3
 800cf76:	4770      	bx	lr
