
LedDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d1c0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  0800d350  0800d350  0001d350  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d774  0800d774  00020298  2**0
                  CONTENTS
  4 .ARM          00000008  0800d774  0800d774  0001d774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d77c  0800d77c  00020298  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d77c  0800d77c  0001d77c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d780  0800d780  0001d780  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000298  20000000  0800d784  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000878  20000298  0800da1c  00020298  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b10  0800da1c  00020b10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020298  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e86e  00000000  00000000  000202c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004285  00000000  00000000  0003eb36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a10  00000000  00000000  00042dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001828  00000000  00000000  000447d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cfef  00000000  00000000  00045ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fd3c  00000000  00000000  00072fe7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00110abf  00000000  00000000  00092d23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a37e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007c68  00000000  00000000  001a3834  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000298 	.word	0x20000298
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d338 	.word	0x0800d338

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000029c 	.word	0x2000029c
 80001cc:	0800d338 	.word	0x0800d338

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08a      	sub	sp, #40	; 0x28
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000eb2:	f107 031c 	add.w	r3, r7, #28
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	605a      	str	r2, [r3, #4]
 8000ebc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ebe:	1d3b      	adds	r3, r7, #4
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
 8000eca:	611a      	str	r2, [r3, #16]
 8000ecc:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ece:	4b35      	ldr	r3, [pc, #212]	; (8000fa4 <MX_ADC1_Init+0xf8>)
 8000ed0:	4a35      	ldr	r2, [pc, #212]	; (8000fa8 <MX_ADC1_Init+0xfc>)
 8000ed2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ed4:	4b33      	ldr	r3, [pc, #204]	; (8000fa4 <MX_ADC1_Init+0xf8>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000eda:	4b32      	ldr	r3, [pc, #200]	; (8000fa4 <MX_ADC1_Init+0xf8>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ee0:	4b30      	ldr	r3, [pc, #192]	; (8000fa4 <MX_ADC1_Init+0xf8>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ee6:	4b2f      	ldr	r3, [pc, #188]	; (8000fa4 <MX_ADC1_Init+0xf8>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000eec:	4b2d      	ldr	r3, [pc, #180]	; (8000fa4 <MX_ADC1_Init+0xf8>)
 8000eee:	2204      	movs	r2, #4
 8000ef0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ef2:	4b2c      	ldr	r3, [pc, #176]	; (8000fa4 <MX_ADC1_Init+0xf8>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ef8:	4b2a      	ldr	r3, [pc, #168]	; (8000fa4 <MX_ADC1_Init+0xf8>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000efe:	4b29      	ldr	r3, [pc, #164]	; (8000fa4 <MX_ADC1_Init+0xf8>)
 8000f00:	2201      	movs	r2, #1
 8000f02:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f04:	4b27      	ldr	r3, [pc, #156]	; (8000fa4 <MX_ADC1_Init+0xf8>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f0c:	4b25      	ldr	r3, [pc, #148]	; (8000fa4 <MX_ADC1_Init+0xf8>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f12:	4b24      	ldr	r3, [pc, #144]	; (8000fa4 <MX_ADC1_Init+0xf8>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f18:	4b22      	ldr	r3, [pc, #136]	; (8000fa4 <MX_ADC1_Init+0xf8>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f20:	4b20      	ldr	r3, [pc, #128]	; (8000fa4 <MX_ADC1_Init+0xf8>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = ENABLE;
 8000f26:	4b1f      	ldr	r3, [pc, #124]	; (8000fa4 <MX_ADC1_Init+0xf8>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_64;
 8000f2e:	4b1d      	ldr	r3, [pc, #116]	; (8000fa4 <MX_ADC1_Init+0xf8>)
 8000f30:	2214      	movs	r2, #20
 8000f32:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_6;
 8000f34:	4b1b      	ldr	r3, [pc, #108]	; (8000fa4 <MX_ADC1_Init+0xf8>)
 8000f36:	22c0      	movs	r2, #192	; 0xc0
 8000f38:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000f3a:	4b1a      	ldr	r3, [pc, #104]	; (8000fa4 <MX_ADC1_Init+0xf8>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000f40:	4b18      	ldr	r3, [pc, #96]	; (8000fa4 <MX_ADC1_Init+0xf8>)
 8000f42:	2201      	movs	r2, #1
 8000f44:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f46:	4817      	ldr	r0, [pc, #92]	; (8000fa4 <MX_ADC1_Init+0xf8>)
 8000f48:	f003 fa50 	bl	80043ec <HAL_ADC_Init>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000f52:	f000 fc99 	bl	8001888 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f56:	2300      	movs	r3, #0
 8000f58:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f5a:	f107 031c 	add.w	r3, r7, #28
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4810      	ldr	r0, [pc, #64]	; (8000fa4 <MX_ADC1_Init+0xf8>)
 8000f62:	f003 ffaf 	bl	8004ec4 <HAL_ADCEx_MultiModeConfigChannel>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8000f6c:	f000 fc8c 	bl	8001888 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f70:	4b0e      	ldr	r3, [pc, #56]	; (8000fac <MX_ADC1_Init+0x100>)
 8000f72:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f74:	2306      	movs	r3, #6
 8000f76:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000f78:	2307      	movs	r3, #7
 8000f7a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f7c:	237f      	movs	r3, #127	; 0x7f
 8000f7e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f80:	2304      	movs	r3, #4
 8000f82:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f88:	1d3b      	adds	r3, r7, #4
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4805      	ldr	r0, [pc, #20]	; (8000fa4 <MX_ADC1_Init+0xf8>)
 8000f8e:	f003 fb83 	bl	8004698 <HAL_ADC_ConfigChannel>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_ADC1_Init+0xf0>
  {
    Error_Handler();
 8000f98:	f000 fc76 	bl	8001888 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f9c:	bf00      	nop
 8000f9e:	3728      	adds	r7, #40	; 0x28
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	200008c8 	.word	0x200008c8
 8000fa8:	50040000 	.word	0x50040000
 8000fac:	04300002 	.word	0x04300002

08000fb0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b0ac      	sub	sp, #176	; 0xb0
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fc8:	f107 0314 	add.w	r3, r7, #20
 8000fcc:	2288      	movs	r2, #136	; 0x88
 8000fce:	2100      	movs	r1, #0
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f009 fc91 	bl	800a8f8 <memset>
  if(adcHandle->Instance==ADC1)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a27      	ldr	r2, [pc, #156]	; (8001078 <HAL_ADC_MspInit+0xc8>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d146      	bne.n	800106e <HAL_ADC_MspInit+0xbe>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000fe0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000fe4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000fe6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000ff6:	2310      	movs	r3, #16
 8000ff8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000ffa:	2307      	movs	r3, #7
 8000ffc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000ffe:	2302      	movs	r3, #2
 8001000:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001002:	2302      	movs	r3, #2
 8001004:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001006:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800100a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800100c:	f107 0314 	add.w	r3, r7, #20
 8001010:	4618      	mov	r0, r3
 8001012:	f005 fb37 	bl	8006684 <HAL_RCCEx_PeriphCLKConfig>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 800101c:	f000 fc34 	bl	8001888 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001020:	4b16      	ldr	r3, [pc, #88]	; (800107c <HAL_ADC_MspInit+0xcc>)
 8001022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001024:	4a15      	ldr	r2, [pc, #84]	; (800107c <HAL_ADC_MspInit+0xcc>)
 8001026:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800102a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800102c:	4b13      	ldr	r3, [pc, #76]	; (800107c <HAL_ADC_MspInit+0xcc>)
 800102e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001030:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001034:	613b      	str	r3, [r7, #16]
 8001036:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001038:	4b10      	ldr	r3, [pc, #64]	; (800107c <HAL_ADC_MspInit+0xcc>)
 800103a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800103c:	4a0f      	ldr	r2, [pc, #60]	; (800107c <HAL_ADC_MspInit+0xcc>)
 800103e:	f043 0304 	orr.w	r3, r3, #4
 8001042:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001044:	4b0d      	ldr	r3, [pc, #52]	; (800107c <HAL_ADC_MspInit+0xcc>)
 8001046:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001048:	f003 0304 	and.w	r3, r3, #4
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001050:	2301      	movs	r3, #1
 8001052:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001056:	230b      	movs	r3, #11
 8001058:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	2300      	movs	r3, #0
 800105e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001062:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001066:	4619      	mov	r1, r3
 8001068:	4805      	ldr	r0, [pc, #20]	; (8001080 <HAL_ADC_MspInit+0xd0>)
 800106a:	f004 fae5 	bl	8005638 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800106e:	bf00      	nop
 8001070:	37b0      	adds	r7, #176	; 0xb0
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	50040000 	.word	0x50040000
 800107c:	40021000 	.word	0x40021000
 8001080:	48000800 	.word	0x48000800

08001084 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800108a:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <MX_DMA_Init+0x38>)
 800108c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800108e:	4a0b      	ldr	r2, [pc, #44]	; (80010bc <MX_DMA_Init+0x38>)
 8001090:	f043 0301 	orr.w	r3, r3, #1
 8001094:	6493      	str	r3, [r2, #72]	; 0x48
 8001096:	4b09      	ldr	r3, [pc, #36]	; (80010bc <MX_DMA_Init+0x38>)
 8001098:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	607b      	str	r3, [r7, #4]
 80010a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80010a2:	2200      	movs	r2, #0
 80010a4:	2100      	movs	r1, #0
 80010a6:	200b      	movs	r0, #11
 80010a8:	f004 f897 	bl	80051da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80010ac:	200b      	movs	r0, #11
 80010ae:	f004 f8b0 	bl	8005212 <HAL_NVIC_EnableIRQ>

}
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40021000 	.word	0x40021000

080010c0 <send_cmd>:
 * STATIC FUNCTIONS
 */

//Wysylanie komendy
static HAL_StatusTypeDef send_cmd(const uint8_t* rom_code, uint8_t cmd)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	460b      	mov	r3, r1
 80010ca:	70fb      	strb	r3, [r7, #3]
  int i;

  if (wire_reset() != HAL_OK)
 80010cc:	f001 f990 	bl	80023f0 <wire_reset>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <send_cmd+0x1a>
    return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e01e      	b.n	8001118 <send_cmd+0x58>

  if (!rom_code) {
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d103      	bne.n	80010e8 <send_cmd+0x28>
    wire_write(DS18B20_SKIP_ROM);
 80010e0:	20cc      	movs	r0, #204	; 0xcc
 80010e2:	f001 f9af 	bl	8002444 <wire_write>
 80010e6:	e012      	b.n	800110e <send_cmd+0x4e>
  } else {
    wire_write(DS18B20_MATCH_ROM);
 80010e8:	2055      	movs	r0, #85	; 0x55
 80010ea:	f001 f9ab 	bl	8002444 <wire_write>
    for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
 80010f2:	e009      	b.n	8001108 <send_cmd+0x48>
      wire_write(rom_code[i]);
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	4413      	add	r3, r2
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f001 f9a1 	bl	8002444 <wire_write>
    for (i = 0; i < DS18B20_ROM_CODE_SIZE; i++)
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	3301      	adds	r3, #1
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	2b07      	cmp	r3, #7
 800110c:	ddf2      	ble.n	80010f4 <send_cmd+0x34>
  }
  wire_write(cmd);
 800110e:	78fb      	ldrb	r3, [r7, #3]
 8001110:	4618      	mov	r0, r3
 8001112:	f001 f997 	bl	8002444 <wire_write>
  return HAL_OK;
 8001116:	2300      	movs	r3, #0
}
 8001118:	4618      	mov	r0, r3
 800111a:	3710      	adds	r7, #16
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <ds18b20_read_scratchpad>:

// Odczytanie brudnopisu

static HAL_StatusTypeDef ds18b20_read_scratchpad(const uint8_t* rom_code, uint8_t* scratchpad)
{
 8001120:	b590      	push	{r4, r7, lr}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
  int i;
  uint8_t crc;

  if (send_cmd(rom_code, DS18B20_READ_SCRATCHPAD) != HAL_OK)
 800112a:	21be      	movs	r1, #190	; 0xbe
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f7ff ffc7 	bl	80010c0 <send_cmd>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <ds18b20_read_scratchpad+0x1c>
    return HAL_ERROR;
 8001138:	2301      	movs	r3, #1
 800113a:	e01e      	b.n	800117a <ds18b20_read_scratchpad+0x5a>

  for (i = 0; i < DS18B20_SCRATCHPAD_SIZE; i++)
 800113c:	2300      	movs	r3, #0
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	e009      	b.n	8001156 <ds18b20_read_scratchpad+0x36>
    scratchpad[i] = wire_read();
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	683a      	ldr	r2, [r7, #0]
 8001146:	18d4      	adds	r4, r2, r3
 8001148:	f001 f998 	bl	800247c <wire_read>
 800114c:	4603      	mov	r3, r0
 800114e:	7023      	strb	r3, [r4, #0]
  for (i = 0; i < DS18B20_SCRATCHPAD_SIZE; i++)
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	3301      	adds	r3, #1
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	2b08      	cmp	r3, #8
 800115a:	ddf2      	ble.n	8001142 <ds18b20_read_scratchpad+0x22>

  crc = wire_crc(scratchpad, DS18B20_SCRATCHPAD_SIZE - 1);
 800115c:	2108      	movs	r1, #8
 800115e:	6838      	ldr	r0, [r7, #0]
 8001160:	f001 f9ab 	bl	80024ba <wire_crc>
 8001164:	4603      	mov	r3, r0
 8001166:	72fb      	strb	r3, [r7, #11]
  if (scratchpad[DS18B20_SCRATCHPAD_SIZE - 1] == crc)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	3308      	adds	r3, #8
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	7afa      	ldrb	r2, [r7, #11]
 8001170:	429a      	cmp	r2, r3
 8001172:	d101      	bne.n	8001178 <ds18b20_read_scratchpad+0x58>
    return HAL_OK;
 8001174:	2300      	movs	r3, #0
 8001176:	e000      	b.n	800117a <ds18b20_read_scratchpad+0x5a>
  else
    return HAL_ERROR;
 8001178:	2301      	movs	r3, #1
}
 800117a:	4618      	mov	r0, r3
 800117c:	3714      	adds	r7, #20
 800117e:	46bd      	mov	sp, r7
 8001180:	bd90      	pop	{r4, r7, pc}

08001182 <ds18b20_read_address>:
 */




HAL_StatusTypeDef ds18b20_read_address(uint8_t* rom_code){
 8001182:	b590      	push	{r4, r7, lr}
 8001184:	b085      	sub	sp, #20
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]

	int i;
	uint8_t crc;

	//Wyslij reset
	if(wire_reset()!=HAL_OK){
 800118a:	f001 f931 	bl	80023f0 <wire_reset>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <ds18b20_read_address+0x16>
		return HAL_ERROR;
 8001194:	2301      	movs	r3, #1
 8001196:	e021      	b.n	80011dc <ds18b20_read_address+0x5a>
	}

	// Wyslij polecenie odczytu kodu ROM

	wire_write(DS18B20_READ_ROM);
 8001198:	2033      	movs	r0, #51	; 0x33
 800119a:	f001 f953 	bl	8002444 <wire_write>

	// Zapisz 8 bajtowy ROM CODE

	for(i=0;i<DS18B20_ROM_CODE_SIZE;i++){
 800119e:	2300      	movs	r3, #0
 80011a0:	60fb      	str	r3, [r7, #12]
 80011a2:	e009      	b.n	80011b8 <ds18b20_read_address+0x36>
		rom_code[i]=wire_read();
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	18d4      	adds	r4, r2, r3
 80011aa:	f001 f967 	bl	800247c <wire_read>
 80011ae:	4603      	mov	r3, r0
 80011b0:	7023      	strb	r3, [r4, #0]
	for(i=0;i<DS18B20_ROM_CODE_SIZE;i++){
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	3301      	adds	r3, #1
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	2b07      	cmp	r3, #7
 80011bc:	ddf2      	ble.n	80011a4 <ds18b20_read_address+0x22>
	}

	// Policz sume kontrolna
	crc=wire_crc(rom_code, DS18B20_ROM_CODE_SIZE-1);
 80011be:	2107      	movs	r1, #7
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f001 f97a 	bl	80024ba <wire_crc>
 80011c6:	4603      	mov	r3, r0
 80011c8:	72fb      	strb	r3, [r7, #11]
	if(rom_code[DS18B20_ROM_CODE_SIZE-1]==crc){
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	3307      	adds	r3, #7
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	7afa      	ldrb	r2, [r7, #11]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d101      	bne.n	80011da <ds18b20_read_address+0x58>
		return HAL_OK;
 80011d6:	2300      	movs	r3, #0
 80011d8:	e000      	b.n	80011dc <ds18b20_read_address+0x5a>
	}else{
		return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
	}
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3714      	adds	r7, #20
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd90      	pop	{r4, r7, pc}

080011e4 <ds18b20_start_measure>:

// Rozpocznij pomiar
HAL_StatusTypeDef ds18b20_start_measure(const uint8_t* rom_code){
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
	return send_cmd(rom_code, DS18B20_CONVERT_T);
 80011ec:	2144      	movs	r1, #68	; 0x44
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f7ff ff66 	bl	80010c0 <send_cmd>
 80011f4:	4603      	mov	r3, r0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
	...

08001200 <ds18b20_get_temp>:


// Pobranie temperauty i podanie jako float. 85 stopni to blad

float ds18b20_get_temp(const uint8_t* rom_code)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint8_t scratchpad[DS18B20_SCRATCHPAD_SIZE];
  int16_t temp;

  if (ds18b20_read_scratchpad(rom_code, scratchpad) != HAL_OK)
 8001208:	f107 030c 	add.w	r3, r7, #12
 800120c:	4619      	mov	r1, r3
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f7ff ff86 	bl	8001120 <ds18b20_read_scratchpad>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d002      	beq.n	8001220 <ds18b20_get_temp+0x20>
    return 85.0f;
 800121a:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001248 <ds18b20_get_temp+0x48>
 800121e:	e00b      	b.n	8001238 <ds18b20_get_temp+0x38>
 8001220:	89bb      	ldrh	r3, [r7, #12]

  memcpy(&temp, &scratchpad[0], sizeof(temp));
 8001222:	817b      	strh	r3, [r7, #10]

  return temp / 16.0f;
 8001224:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001228:	ee07 3a90 	vmov	s15, r3
 800122c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001230:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001234:	ee87 7aa6 	vdiv.f32	s14, s15, s13
}
 8001238:	eef0 7a47 	vmov.f32	s15, s14
 800123c:	eeb0 0a67 	vmov.f32	s0, s15
 8001240:	3718      	adds	r7, #24
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	42aa0000 	.word	0x42aa0000

0800124c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800124c:	b480      	push	{r7}
 800124e:	b085      	sub	sp, #20
 8001250:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001252:	4b15      	ldr	r3, [pc, #84]	; (80012a8 <MX_GPIO_Init+0x5c>)
 8001254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001256:	4a14      	ldr	r2, [pc, #80]	; (80012a8 <MX_GPIO_Init+0x5c>)
 8001258:	f043 0304 	orr.w	r3, r3, #4
 800125c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800125e:	4b12      	ldr	r3, [pc, #72]	; (80012a8 <MX_GPIO_Init+0x5c>)
 8001260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001262:	f003 0304 	and.w	r3, r3, #4
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800126a:	4b0f      	ldr	r3, [pc, #60]	; (80012a8 <MX_GPIO_Init+0x5c>)
 800126c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126e:	4a0e      	ldr	r2, [pc, #56]	; (80012a8 <MX_GPIO_Init+0x5c>)
 8001270:	f043 0301 	orr.w	r3, r3, #1
 8001274:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001276:	4b0c      	ldr	r3, [pc, #48]	; (80012a8 <MX_GPIO_Init+0x5c>)
 8001278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	60bb      	str	r3, [r7, #8]
 8001280:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001282:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <MX_GPIO_Init+0x5c>)
 8001284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001286:	4a08      	ldr	r2, [pc, #32]	; (80012a8 <MX_GPIO_Init+0x5c>)
 8001288:	f043 0302 	orr.w	r3, r3, #2
 800128c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800128e:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <MX_GPIO_Init+0x5c>)
 8001290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	607b      	str	r3, [r7, #4]
 8001298:	687b      	ldr	r3, [r7, #4]

}
 800129a:	bf00      	nop
 800129c:	3714      	adds	r7, #20
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	40021000 	.word	0x40021000

080012ac <calc_pulse>:
static volatile uint32_t received_value;
static int received_bits;


static pulse_t calc_pulse(uint32_t time)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
	if (time < 250)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2bf9      	cmp	r3, #249	; 0xf9
 80012b8:	d801      	bhi.n	80012be <calc_pulse+0x12>
		return PULSE_ERROR;
 80012ba:	2305      	movs	r3, #5
 80012bc:	e021      	b.n	8001302 <calc_pulse+0x56>
	else if (time < 1200)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80012c4:	d201      	bcs.n	80012ca <calc_pulse+0x1e>
		return PULSE_SHORT;
 80012c6:	2304      	movs	r3, #4
 80012c8:	e01b      	b.n	8001302 <calc_pulse+0x56>
	else if (time < 2000)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80012d0:	d201      	bcs.n	80012d6 <calc_pulse+0x2a>
		return PULSE_LONG;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e015      	b.n	8001302 <calc_pulse+0x56>
	else if (time < 3000)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80012dc:	4293      	cmp	r3, r2
 80012de:	d801      	bhi.n	80012e4 <calc_pulse+0x38>
		return PULSE_2MS;
 80012e0:	2302      	movs	r3, #2
 80012e2:	e00e      	b.n	8001302 <calc_pulse+0x56>
	else if (time < 6000)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f241 726f 	movw	r2, #5999	; 0x176f
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d801      	bhi.n	80012f2 <calc_pulse+0x46>
		return PULSE_4MS;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e007      	b.n	8001302 <calc_pulse+0x56>
	else if (time < 12000)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	f642 62df 	movw	r2, #11999	; 0x2edf
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d801      	bhi.n	8001300 <calc_pulse+0x54>
		return PULSE_9MS;
 80012fc:	2300      	movs	r3, #0
 80012fe:	e000      	b.n	8001302 <calc_pulse+0x56>
	else
		return PULSE_ERROR;
 8001300:	2305      	movs	r3, #5
}
 8001302:	4618      	mov	r0, r3
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
	...

08001310 <ir_tim_interrupt>:


void ir_tim_interrupt(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
	pulse_t pulse;

	if (received_bits >= 32)
 8001316:	4b1f      	ldr	r3, [pc, #124]	; (8001394 <ir_tim_interrupt+0x84>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2b1f      	cmp	r3, #31
 800131c:	dc36      	bgt.n	800138c <ir_tim_interrupt+0x7c>
		return;

	pulse = calc_pulse(HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1));
 800131e:	2100      	movs	r1, #0
 8001320:	481d      	ldr	r0, [pc, #116]	; (8001398 <ir_tim_interrupt+0x88>)
 8001322:	f007 fc89 	bl	8008c38 <HAL_TIM_ReadCapturedValue>
 8001326:	4603      	mov	r3, r0
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff ffbf 	bl	80012ac <calc_pulse>
 800132e:	4603      	mov	r3, r0
 8001330:	71fb      	strb	r3, [r7, #7]

	switch (pulse) {
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	2b04      	cmp	r3, #4
 8001336:	d006      	beq.n	8001346 <ir_tim_interrupt+0x36>
 8001338:	2b04      	cmp	r3, #4
 800133a:	dc23      	bgt.n	8001384 <ir_tim_interrupt+0x74>
 800133c:	2b01      	cmp	r3, #1
 800133e:	d01a      	beq.n	8001376 <ir_tim_interrupt+0x66>
 8001340:	2b03      	cmp	r3, #3
 8001342:	d00b      	beq.n	800135c <ir_tim_interrupt+0x4c>
 8001344:	e01e      	b.n	8001384 <ir_tim_interrupt+0x74>
	case PULSE_SHORT:
		received_value = received_value >> 1;
 8001346:	4b15      	ldr	r3, [pc, #84]	; (800139c <ir_tim_interrupt+0x8c>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	085b      	lsrs	r3, r3, #1
 800134c:	4a13      	ldr	r2, [pc, #76]	; (800139c <ir_tim_interrupt+0x8c>)
 800134e:	6013      	str	r3, [r2, #0]
		received_bits++;
 8001350:	4b10      	ldr	r3, [pc, #64]	; (8001394 <ir_tim_interrupt+0x84>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	3301      	adds	r3, #1
 8001356:	4a0f      	ldr	r2, [pc, #60]	; (8001394 <ir_tim_interrupt+0x84>)
 8001358:	6013      	str	r3, [r2, #0]
		break;
 800135a:	e018      	b.n	800138e <ir_tim_interrupt+0x7e>
	case PULSE_LONG:
		received_value = (received_value >> 1) | 0x80000000;
 800135c:	4b0f      	ldr	r3, [pc, #60]	; (800139c <ir_tim_interrupt+0x8c>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	085b      	lsrs	r3, r3, #1
 8001362:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001366:	4a0d      	ldr	r2, [pc, #52]	; (800139c <ir_tim_interrupt+0x8c>)
 8001368:	6013      	str	r3, [r2, #0]
		received_bits++;
 800136a:	4b0a      	ldr	r3, [pc, #40]	; (8001394 <ir_tim_interrupt+0x84>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	3301      	adds	r3, #1
 8001370:	4a08      	ldr	r2, [pc, #32]	; (8001394 <ir_tim_interrupt+0x84>)
 8001372:	6013      	str	r3, [r2, #0]
		break;
 8001374:	e00b      	b.n	800138e <ir_tim_interrupt+0x7e>
	case PULSE_4MS:
		received_value = 0;
 8001376:	4b09      	ldr	r3, [pc, #36]	; (800139c <ir_tim_interrupt+0x8c>)
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
		received_bits = 0;
 800137c:	4b05      	ldr	r3, [pc, #20]	; (8001394 <ir_tim_interrupt+0x84>)
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
		break;
 8001382:	e004      	b.n	800138e <ir_tim_interrupt+0x7e>
//	case PULSE_2MS:
//		if (received_bits == 0)
//			received_bits = 32;
//		break;
	default:
		received_bits = 0;
 8001384:	4b03      	ldr	r3, [pc, #12]	; (8001394 <ir_tim_interrupt+0x84>)
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
		break;
 800138a:	e000      	b.n	800138e <ir_tim_interrupt+0x7e>
		return;
 800138c:	bf00      	nop
	}
}
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	200002b8 	.word	0x200002b8
 8001398:	200009f4 	.word	0x200009f4
 800139c:	200002b4 	.word	0x200002b4

080013a0 <ir_init>:


void ir_init(void){
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim2);
 80013a4:	4804      	ldr	r0, [pc, #16]	; (80013b8 <ir_init+0x18>)
 80013a6:	f006 fb65 	bl	8007a74 <HAL_TIM_Base_Start>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80013aa:	2100      	movs	r1, #0
 80013ac:	4802      	ldr	r0, [pc, #8]	; (80013b8 <ir_init+0x18>)
 80013ae:	f006 ff1d 	bl	80081ec <HAL_TIM_IC_Start_IT>
}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	200009f4 	.word	0x200009f4

080013bc <ir_read>:


int ir_read(void){
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
	if(received_bits!=32){
 80013c2:	4b0a      	ldr	r3, [pc, #40]	; (80013ec <ir_read+0x30>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	2b20      	cmp	r3, #32
 80013c8:	d002      	beq.n	80013d0 <ir_read+0x14>
		return -1;
 80013ca:	f04f 33ff 	mov.w	r3, #4294967295
 80013ce:	e007      	b.n	80013e0 <ir_read+0x24>
	}

	uint8_t value=received_value>>16;
 80013d0:	4b07      	ldr	r3, [pc, #28]	; (80013f0 <ir_read+0x34>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	0c1b      	lsrs	r3, r3, #16
 80013d6:	71fb      	strb	r3, [r7, #7]
	received_bits=0;
 80013d8:	4b04      	ldr	r3, [pc, #16]	; (80013ec <ir_read+0x30>)
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
	return value;
 80013de:	79fb      	ldrb	r3, [r7, #7]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	200002b8 	.word	0x200002b8
 80013f0:	200002b4 	.word	0x200002b4

080013f4 <normalWorkStart>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// FUNTIONS:

void normalWorkStart(void) {
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
	if (flag_showCalendar_or_temperature < DATA_SHOW_DURATION) {
 80013f8:	4b28      	ldr	r3, [pc, #160]	; (800149c <normalWorkStart+0xa8>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2b18      	cmp	r3, #24
 80013fe:	dc11      	bgt.n	8001424 <normalWorkStart+0x30>
		if (flag_showCalendar_or_temperature == 0) {
 8001400:	4b26      	ldr	r3, [pc, #152]	; (800149c <normalWorkStart+0xa8>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d10a      	bne.n	800141e <normalWorkStart+0x2a>
			dotOff();
 8001408:	f001 fd1e 	bl	8002e48 <dotOff>
			backToColorinMemory();
 800140c:	f001 fae0 	bl	80029d0 <backToColorinMemory>
			dwukropekTurnOn();
 8001410:	f001 fcca 	bl	8002da8 <dwukropekTurnOn>
			//Zapobieganie migotaniu
			flag_showCalendar_or_temperature += 1;
 8001414:	4b21      	ldr	r3, [pc, #132]	; (800149c <normalWorkStart+0xa8>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	3301      	adds	r3, #1
 800141a:	4a20      	ldr	r2, [pc, #128]	; (800149c <normalWorkStart+0xa8>)
 800141c:	6013      	str	r3, [r2, #0]
		}
		normalDisplayStart();
 800141e:	f001 ff03 	bl	8003228 <normalDisplayStart>
		dotOn();
		temperatureOnDisplay(FALSE);
	}


}
 8001422:	e039      	b.n	8001498 <normalWorkStart+0xa4>
	else if (flag_showCalendar_or_temperature < TEMPERATURE_SHOW_DURATION) {
 8001424:	4b1d      	ldr	r3, [pc, #116]	; (800149c <normalWorkStart+0xa8>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2b1d      	cmp	r3, #29
 800142a:	dc18      	bgt.n	800145e <normalWorkStart+0x6a>
		if (flag_showCalendar_or_temperature == DATA_SHOW_DURATION) {
 800142c:	4b1b      	ldr	r3, [pc, #108]	; (800149c <normalWorkStart+0xa8>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2b19      	cmp	r3, #25
 8001432:	d108      	bne.n	8001446 <normalWorkStart+0x52>
			dwukropekTurnOff();
 8001434:	f001 fcd8 	bl	8002de8 <dwukropekTurnOff>
			flag_showCalendar_or_temperature +=1;
 8001438:	4b18      	ldr	r3, [pc, #96]	; (800149c <normalWorkStart+0xa8>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	3301      	adds	r3, #1
 800143e:	4a17      	ldr	r2, [pc, #92]	; (800149c <normalWorkStart+0xa8>)
 8001440:	6013      	str	r3, [r2, #0]
			mixColor();
 8001442:	f001 faab 	bl	800299c <mixColor>
		if(flag_showCalendar_or_temperature==DATA_SHOW_DURATION+2){
 8001446:	4b15      	ldr	r3, [pc, #84]	; (800149c <normalWorkStart+0xa8>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2b1b      	cmp	r3, #27
 800144c:	d102      	bne.n	8001454 <normalWorkStart+0x60>
			ds18b20_start_measure(NULL);
 800144e:	2000      	movs	r0, #0
 8001450:	f7ff fec8 	bl	80011e4 <ds18b20_start_measure>
		dotOn();
 8001454:	f001 fce0 	bl	8002e18 <dotOn>
		dateOnDisplay();
 8001458:	f001 ff46 	bl	80032e8 <dateOnDisplay>
}
 800145c:	e01c      	b.n	8001498 <normalWorkStart+0xa4>
	else if (flag_showCalendar_or_temperature <TEMPERATURE_SHOW_PERIOD) {
 800145e:	4b0f      	ldr	r3, [pc, #60]	; (800149c <normalWorkStart+0xa8>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	2b22      	cmp	r3, #34	; 0x22
 8001464:	dc18      	bgt.n	8001498 <normalWorkStart+0xa4>
		if (flag_showCalendar_or_temperature == TEMPERATURE_SHOW_DURATION) {
 8001466:	4b0d      	ldr	r3, [pc, #52]	; (800149c <normalWorkStart+0xa8>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2b1e      	cmp	r3, #30
 800146c:	d10f      	bne.n	800148e <normalWorkStart+0x9a>
			displayStop();
 800146e:	f001 ffc9 	bl	8003404 <displayStop>
			ws2811_wait();
 8001472:	f002 fd27 	bl	8003ec4 <ws2811_wait>
			mixColor();
 8001476:	f001 fa91 	bl	800299c <mixColor>
			dotOn();
 800147a:	f001 fccd 	bl	8002e18 <dotOn>
			temperatureOnDisplay(TRUE);
 800147e:	2001      	movs	r0, #1
 8001480:	f001 ff88 	bl	8003394 <temperatureOnDisplay>
			flag_showCalendar_or_temperature += 1;
 8001484:	4b05      	ldr	r3, [pc, #20]	; (800149c <normalWorkStart+0xa8>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	3301      	adds	r3, #1
 800148a:	4a04      	ldr	r2, [pc, #16]	; (800149c <normalWorkStart+0xa8>)
 800148c:	6013      	str	r3, [r2, #0]
		dotOn();
 800148e:	f001 fcc3 	bl	8002e18 <dotOn>
		temperatureOnDisplay(FALSE);
 8001492:	2000      	movs	r0, #0
 8001494:	f001 ff7e 	bl	8003394 <temperatureOnDisplay>
}
 8001498:	bf00      	nop
 800149a:	bd80      	pop	{r7, pc}
 800149c:	200002c4 	.word	0x200002c4

080014a0 <HAL_RTC_AlarmAEventCallback>:


// Callbacks from interrupts:

// Interrupt from RTC after every one second
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]





}
 80014a8:	bf00      	nop
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <HAL_TIM_IC_CaptureCallback>:
//
//}


// Interrupt for remote controler
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]

	if (htim == &htim2) {
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	4a09      	ldr	r2, [pc, #36]	; (80014e4 <HAL_TIM_IC_CaptureCallback+0x30>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d108      	bne.n	80014d6 <HAL_TIM_IC_CaptureCallback+0x22>
		switch (HAL_TIM_GetActiveChannel(&htim2)) {
 80014c4:	4807      	ldr	r0, [pc, #28]	; (80014e4 <HAL_TIM_IC_CaptureCallback+0x30>)
 80014c6:	f007 fc2d 	bl	8008d24 <HAL_TIM_GetActiveChannel>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d104      	bne.n	80014da <HAL_TIM_IC_CaptureCallback+0x26>
		case HAL_TIM_ACTIVE_CHANNEL_1:
			ir_tim_interrupt();
 80014d0:	f7ff ff1e 	bl	8001310 <ir_tim_interrupt>
			break;
 80014d4:	e002      	b.n	80014dc <HAL_TIM_IC_CaptureCallback+0x28>
		default:
			break;
		}
	}
 80014d6:	bf00      	nop
 80014d8:	e000      	b.n	80014dc <HAL_TIM_IC_CaptureCallback+0x28>
			break;
 80014da:	bf00      	nop
}
 80014dc:	bf00      	nop
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	200009f4 	.word	0x200009f4

080014e8 <HAL_TIM_PeriodElapsedCallback>:

// Interrupt from timer 6 after 0,3 seconds. It is run, when MENU is on.
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]

	if (htim == &htim6)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	4a74      	ldr	r2, [pc, #464]	; (80016c4 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	f040 80e1 	bne.w	80016bc <HAL_TIM_PeriodElapsedCallback+0x1d4>

	{
		// Hours blinking in hours menu mode:
		if (TurnOnMenuMode() == MENU_TIME_LEVEL
 80014fa:	f000 f9cb 	bl	8001894 <TurnOnMenuMode>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b01      	cmp	r3, #1
 8001502:	d004      	beq.n	800150e <HAL_TIM_PeriodElapsedCallback+0x26>
				|| TurnOnMenuMode() == MENU_TIME_HOUR_SECOND_DIGIT) {
 8001504:	f000 f9c6 	bl	8001894 <TurnOnMenuMode>
 8001508:	4603      	mov	r3, r0
 800150a:	2b03      	cmp	r3, #3
 800150c:	d110      	bne.n	8001530 <HAL_TIM_PeriodElapsedCallback+0x48>

			if (flag_blinker == 1) {
 800150e:	4b6e      	ldr	r3, [pc, #440]	; (80016c8 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d105      	bne.n	8001522 <HAL_TIM_PeriodElapsedCallback+0x3a>
				ws2811_firstAndSecondSegmentsDisplayReset();
 8001516:	f002 fc3f 	bl	8003d98 <ws2811_firstAndSecondSegmentsDisplayReset>
				flag_blinker = 0;
 800151a:	4b6b      	ldr	r3, [pc, #428]	; (80016c8 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	e006      	b.n	8001530 <HAL_TIM_PeriodElapsedCallback+0x48>
			} else {
				menuDisplayStart();
 8001522:	f001 feb1 	bl	8003288 <menuDisplayStart>
				dwukropekTurnOn();
 8001526:	f001 fc3f 	bl	8002da8 <dwukropekTurnOn>
				flag_blinker = 1;
 800152a:	4b67      	ldr	r3, [pc, #412]	; (80016c8 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800152c:	2201      	movs	r2, #1
 800152e:	601a      	str	r2, [r3, #0]
			}
		}

		// Minute blinking in minutes menu mode:
		if (TurnOnMenuMode() == MENU_TIME_MINUTE_LEVEL
 8001530:	f000 f9b0 	bl	8001894 <TurnOnMenuMode>
 8001534:	4603      	mov	r3, r0
 8001536:	2b02      	cmp	r3, #2
 8001538:	d004      	beq.n	8001544 <HAL_TIM_PeriodElapsedCallback+0x5c>
				|| TurnOnMenuMode() == MENU_TIME_MINUTE_SECOND_DIGIT) {
 800153a:	f000 f9ab 	bl	8001894 <TurnOnMenuMode>
 800153e:	4603      	mov	r3, r0
 8001540:	2b04      	cmp	r3, #4
 8001542:	d110      	bne.n	8001566 <HAL_TIM_PeriodElapsedCallback+0x7e>

			if (flag_blinker == 1) {
 8001544:	4b60      	ldr	r3, [pc, #384]	; (80016c8 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2b01      	cmp	r3, #1
 800154a:	d105      	bne.n	8001558 <HAL_TIM_PeriodElapsedCallback+0x70>
				ws2811_ThirdAndFourthSegmentsDisplayReset();
 800154c:	f002 fc50 	bl	8003df0 <ws2811_ThirdAndFourthSegmentsDisplayReset>
				flag_blinker = 0;
 8001550:	4b5d      	ldr	r3, [pc, #372]	; (80016c8 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001552:	2200      	movs	r2, #0
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	e006      	b.n	8001566 <HAL_TIM_PeriodElapsedCallback+0x7e>
			} else {
				menuDisplayStart();
 8001558:	f001 fe96 	bl	8003288 <menuDisplayStart>
				dwukropekTurnOn();
 800155c:	f001 fc24 	bl	8002da8 <dwukropekTurnOn>
				flag_blinker = 1;
 8001560:	4b59      	ldr	r3, [pc, #356]	; (80016c8 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001562:	2201      	movs	r2, #1
 8001564:	601a      	str	r2, [r3, #0]
			}
		}

		// Months blinking in months menu mode:
		if (TurnOnMenuMode() == MENU_DATE_LEVEL
 8001566:	f000 f995 	bl	8001894 <TurnOnMenuMode>
 800156a:	4603      	mov	r3, r0
 800156c:	2b05      	cmp	r3, #5
 800156e:	d004      	beq.n	800157a <HAL_TIM_PeriodElapsedCallback+0x92>
				|| TurnOnMenuMode() == MENU_DATE_MONTH_SECOND_DIGIT) {
 8001570:	f000 f990 	bl	8001894 <TurnOnMenuMode>
 8001574:	4603      	mov	r3, r0
 8001576:	2b06      	cmp	r3, #6
 8001578:	d110      	bne.n	800159c <HAL_TIM_PeriodElapsedCallback+0xb4>

			if (flag_blinker == 1) {
 800157a:	4b53      	ldr	r3, [pc, #332]	; (80016c8 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2b01      	cmp	r3, #1
 8001580:	d105      	bne.n	800158e <HAL_TIM_PeriodElapsedCallback+0xa6>
				ws2811_ThirdAndFourthSegmentsDisplayReset();
 8001582:	f002 fc35 	bl	8003df0 <ws2811_ThirdAndFourthSegmentsDisplayReset>
				flag_blinker = 0;
 8001586:	4b50      	ldr	r3, [pc, #320]	; (80016c8 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	e006      	b.n	800159c <HAL_TIM_PeriodElapsedCallback+0xb4>
			} else {
				dateOnDisplay();
 800158e:	f001 feab 	bl	80032e8 <dateOnDisplay>
				dotOn();
 8001592:	f001 fc41 	bl	8002e18 <dotOn>
				flag_blinker = 1;
 8001596:	4b4c      	ldr	r3, [pc, #304]	; (80016c8 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001598:	2201      	movs	r2, #1
 800159a:	601a      	str	r2, [r3, #0]
			}
		}

		// Days blinking in days menu mode:
		if (TurnOnMenuMode() == MENU_DATE_DAY_FIRST_DIGIT
 800159c:	f000 f97a 	bl	8001894 <TurnOnMenuMode>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b07      	cmp	r3, #7
 80015a4:	d004      	beq.n	80015b0 <HAL_TIM_PeriodElapsedCallback+0xc8>
				|| TurnOnMenuMode() == MENU_DATE_DAY_SECOND_DIGIT) {
 80015a6:	f000 f975 	bl	8001894 <TurnOnMenuMode>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b08      	cmp	r3, #8
 80015ae:	d110      	bne.n	80015d2 <HAL_TIM_PeriodElapsedCallback+0xea>

			if (flag_blinker == 1) {
 80015b0:	4b45      	ldr	r3, [pc, #276]	; (80016c8 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d105      	bne.n	80015c4 <HAL_TIM_PeriodElapsedCallback+0xdc>
				ws2811_firstAndSecondSegmentsDisplayReset();
 80015b8:	f002 fbee 	bl	8003d98 <ws2811_firstAndSecondSegmentsDisplayReset>
				flag_blinker = 0;
 80015bc:	4b42      	ldr	r3, [pc, #264]	; (80016c8 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	e006      	b.n	80015d2 <HAL_TIM_PeriodElapsedCallback+0xea>
			} else {
				dateOnDisplay();
 80015c4:	f001 fe90 	bl	80032e8 <dateOnDisplay>
				dotOn();
 80015c8:	f001 fc26 	bl	8002e18 <dotOn>
				flag_blinker = 1;
 80015cc:	4b3e      	ldr	r3, [pc, #248]	; (80016c8 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80015ce:	2201      	movs	r2, #1
 80015d0:	601a      	str	r2, [r3, #0]
			}
		}

		// Years blinking in years mode:

		if (TurnOnMenuMode() == MENU_YEAR_LEVEL
 80015d2:	f000 f95f 	bl	8001894 <TurnOnMenuMode>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b0b      	cmp	r3, #11
 80015da:	d004      	beq.n	80015e6 <HAL_TIM_PeriodElapsedCallback+0xfe>
				|| TurnOnMenuMode() == MENU_YEAR_FOURTH_DIGIT) {
 80015dc:	f000 f95a 	bl	8001894 <TurnOnMenuMode>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b0c      	cmp	r3, #12
 80015e4:	d116      	bne.n	8001614 <HAL_TIM_PeriodElapsedCallback+0x12c>

			firstSegment(two);
 80015e6:	4839      	ldr	r0, [pc, #228]	; (80016cc <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80015e8:	f001 fb16 	bl	8002c18 <firstSegment>
			secondSegment(zero);
 80015ec:	4838      	ldr	r0, [pc, #224]	; (80016d0 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80015ee:	f001 fb45 	bl	8002c7c <secondSegment>
			dotOff();
 80015f2:	f001 fc29 	bl	8002e48 <dotOff>


			if (flag_blinker == 1) {
 80015f6:	4b34      	ldr	r3, [pc, #208]	; (80016c8 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d105      	bne.n	800160a <HAL_TIM_PeriodElapsedCallback+0x122>
				ws2811_ThirdAndFourthSegmentsDisplayReset();
 80015fe:	f002 fbf7 	bl	8003df0 <ws2811_ThirdAndFourthSegmentsDisplayReset>
				flag_blinker = 0;
 8001602:	4b31      	ldr	r3, [pc, #196]	; (80016c8 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	e004      	b.n	8001614 <HAL_TIM_PeriodElapsedCallback+0x12c>
			} else {
				yearOnDisplay();
 800160a:	f001 fe9b 	bl	8003344 <yearOnDisplay>
				flag_blinker = 1;
 800160e:	4b2e      	ldr	r3, [pc, #184]	; (80016c8 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001610:	2201      	movs	r2, #1
 8001612:	601a      	str	r2, [r3, #0]
			}
		}

		// Sleep Info Display:

		if(TurnOnMenuMode()==MENU_INFO_SLEEP){
 8001614:	f000 f93e 	bl	8001894 <TurnOnMenuMode>
 8001618:	4603      	mov	r3, r0
 800161a:	2b14      	cmp	r3, #20
 800161c:	d110      	bne.n	8001640 <HAL_TIM_PeriodElapsedCallback+0x158>

				sleepTimeSetDisplay();
 800161e:	f001 ff11 	bl	8003444 <sleepTimeSetDisplay>
				flag_info_time+=1;
 8001622:	4b2c      	ldr	r3, [pc, #176]	; (80016d4 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	3301      	adds	r3, #1
 8001628:	4a2a      	ldr	r2, [pc, #168]	; (80016d4 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 800162a:	6013      	str	r3, [r2, #0]
				if(flag_info_time==12){
 800162c:	4b29      	ldr	r3, [pc, #164]	; (80016d4 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2b0c      	cmp	r3, #12
 8001632:	d105      	bne.n	8001640 <HAL_TIM_PeriodElapsedCallback+0x158>
					flag_info_time=0;
 8001634:	4b27      	ldr	r3, [pc, #156]	; (80016d4 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
					flagMenu=MENU_TIME_MINUTE_SECOND_DIGIT;
 800163a:	4b27      	ldr	r3, [pc, #156]	; (80016d8 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 800163c:	2204      	movs	r2, #4
 800163e:	601a      	str	r2, [r3, #0]

		}

		// Alarm Info Display:

		if(TurnOnMenuMode()==MENU_INFO_ALARM){
 8001640:	f000 f928 	bl	8001894 <TurnOnMenuMode>
 8001644:	4603      	mov	r3, r0
 8001646:	2b15      	cmp	r3, #21
 8001648:	d110      	bne.n	800166c <HAL_TIM_PeriodElapsedCallback+0x184>
			alarmTimeSetDisplay();
 800164a:	f001 ff13 	bl	8003474 <alarmTimeSetDisplay>
			flag_info_time += 1;
 800164e:	4b21      	ldr	r3, [pc, #132]	; (80016d4 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	3301      	adds	r3, #1
 8001654:	4a1f      	ldr	r2, [pc, #124]	; (80016d4 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001656:	6013      	str	r3, [r2, #0]
			if (flag_info_time == 12) {
 8001658:	4b1e      	ldr	r3, [pc, #120]	; (80016d4 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2b0c      	cmp	r3, #12
 800165e:	d105      	bne.n	800166c <HAL_TIM_PeriodElapsedCallback+0x184>
				flag_info_time = 0;
 8001660:	4b1c      	ldr	r3, [pc, #112]	; (80016d4 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
				flagMenu = MENU_TIME_MINUTE_SECOND_DIGIT;
 8001666:	4b1c      	ldr	r3, [pc, #112]	; (80016d8 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001668:	2204      	movs	r2, #4
 800166a:	601a      	str	r2, [r3, #0]
			}

		}

		// OKRES 1 sekundy:
		if (TurnOnMenuMode() != MENU_TEST_LEVEL) {
 800166c:	f000 f912 	bl	8001894 <TurnOnMenuMode>
 8001670:	4603      	mov	r3, r0
 8001672:	2b09      	cmp	r3, #9
 8001674:	d022      	beq.n	80016bc <HAL_TIM_PeriodElapsedCallback+0x1d4>
			flag_one_second += 1;
 8001676:	4b19      	ldr	r3, [pc, #100]	; (80016dc <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	3301      	adds	r3, #1
 800167c:	4a17      	ldr	r2, [pc, #92]	; (80016dc <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800167e:	6013      	str	r3, [r2, #0]

			if (flag_one_second >= 4) {
 8001680:	4b16      	ldr	r3, [pc, #88]	; (80016dc <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2b03      	cmp	r3, #3
 8001686:	dd19      	ble.n	80016bc <HAL_TIM_PeriodElapsedCallback+0x1d4>
				if (TurnOnMenuMode() == MENU_OFF
 8001688:	f000 f904 	bl	8001894 <TurnOnMenuMode>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d105      	bne.n	800169e <HAL_TIM_PeriodElapsedCallback+0x1b6>
						&& flag_showCalendar_or_temperature < DATA_SHOW_DURATION) {
 8001692:	4b13      	ldr	r3, [pc, #76]	; (80016e0 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	2b18      	cmp	r3, #24
 8001698:	dc01      	bgt.n	800169e <HAL_TIM_PeriodElapsedCallback+0x1b6>
					dwukropekStart();
 800169a:	f001 fc05 	bl	8002ea8 <dwukropekStart>
				} else {

				}

				// Obsluga flagi daty i temperatury
				flag_showCalendar_or_temperature += 1;
 800169e:	4b10      	ldr	r3, [pc, #64]	; (80016e0 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	3301      	adds	r3, #1
 80016a4:	4a0e      	ldr	r2, [pc, #56]	; (80016e0 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80016a6:	6013      	str	r3, [r2, #0]
				if (flag_showCalendar_or_temperature >= TEMPERATURE_SHOW_PERIOD) {
 80016a8:	4b0d      	ldr	r3, [pc, #52]	; (80016e0 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2b22      	cmp	r3, #34	; 0x22
 80016ae:	dd02      	ble.n	80016b6 <HAL_TIM_PeriodElapsedCallback+0x1ce>
					flag_showCalendar_or_temperature = 0;
 80016b0:	4b0b      	ldr	r3, [pc, #44]	; (80016e0 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
				}
				flag_one_second=0;
 80016b6:	4b09      	ldr	r3, [pc, #36]	; (80016dc <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]


		}

	}
}
 80016bc:	bf00      	nop
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	200009a8 	.word	0x200009a8
 80016c8:	200002bc 	.word	0x200002bc
 80016cc:	20000040 	.word	0x20000040
 80016d0:	20000030 	.word	0x20000030
 80016d4:	200002c8 	.word	0x200002c8
 80016d8:	200002d8 	.word	0x200002d8
 80016dc:	200002c0 	.word	0x200002c0
 80016e0:	200002c4 	.word	0x200002c4

080016e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016ea:	f002 fc5a 	bl	8003fa2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016ee:	f000 f84d 	bl	800178c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016f2:	f7ff fdab 	bl	800124c <MX_GPIO_Init>
  MX_DMA_Init();
 80016f6:	f7ff fcc5 	bl	8001084 <MX_DMA_Init>
  MX_TIM4_Init();
 80016fa:	f002 f8cd 	bl	8003898 <MX_TIM4_Init>
  MX_RTC_Init();
 80016fe:	f000 fefd 	bl	80024fc <MX_RTC_Init>
  MX_TIM2_Init();
 8001702:	f002 f83d 	bl	8003780 <MX_TIM2_Init>
  MX_TIM6_Init();
 8001706:	f002 f93d 	bl	8003984 <MX_TIM6_Init>
  MX_ADC1_Init();
 800170a:	f7ff fbcf 	bl	8000eac <MX_ADC1_Init>
  MX_USART3_UART_Init();
 800170e:	f002 fa3f 	bl	8003b90 <MX_USART3_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001712:	f000 f89d 	bl	8001850 <MX_NVIC_Init>




	//Initalization of program
	ws2811_init();
 8001716:	f002 fb0d 	bl	8003d34 <ws2811_init>
	HAL_TIM_Base_Start_IT(&htim6);
 800171a:	4819      	ldr	r0, [pc, #100]	; (8001780 <main+0x9c>)
 800171c:	f006 fa12 	bl	8007b44 <HAL_TIM_Base_Start_IT>
	ir_init();
 8001720:	f7ff fe3e 	bl	80013a0 <ir_init>
	HAL_PWR_EnableBkUpAccess();
 8001724:	f004 f932 	bl	800598c <HAL_PWR_EnableBkUpAccess>
	// Temperature sensor

	uint8_t ds1[DS18B20_ROM_CODE_SIZE];

	if (ds18b20_read_address(ds1) != HAL_OK) {
 8001728:	1d3b      	adds	r3, r7, #4
 800172a:	4618      	mov	r0, r3
 800172c:	f7ff fd29 	bl	8001182 <ds18b20_read_address>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <main+0x56>
		Error_Handler();
 8001736:	f000 f8a7 	bl	8001888 <Error_Handler>


	/*
	 * --------------------------------------> CHANGE STANDARD COLOR
	 */
	backToColorinMemory();
 800173a:	f001 f949 	bl	80029d0 <backToColorinMemory>

		// ZEGAR:

		// NORMAL WORK

		if (TurnOnMenuMode() == 0) {
 800173e:	f000 f8a9 	bl	8001894 <TurnOnMenuMode>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d109      	bne.n	800175c <main+0x78>
			normalWorkStart();
 8001748:	f7ff fe54 	bl	80013f4 <normalWorkStart>
			// Turn on StanbyMode when it is time for it
			TurnOnStanbyMode(sleepHour, sleepMinute, STANDBY_SECOND);
 800174c:	4b0d      	ldr	r3, [pc, #52]	; (8001784 <main+0xa0>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	4a0d      	ldr	r2, [pc, #52]	; (8001788 <main+0xa4>)
 8001752:	7811      	ldrb	r1, [r2, #0]
 8001754:	2200      	movs	r2, #0
 8001756:	4618      	mov	r0, r3
 8001758:	f001 f81a 	bl	8002790 <TurnOnStanbyMode>
		}

		// WAIT FOR SIGNAL FROM REMOTE CONTROLLER
		int value = ir_read();
 800175c:	f7ff fe2e 	bl	80013bc <ir_read>
 8001760:	60f8      	str	r0, [r7, #12]
		if (value != -1) {
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001768:	d002      	beq.n	8001770 <main+0x8c>
			menu(value);
 800176a:	68f8      	ldr	r0, [r7, #12]
 800176c:	f000 fa66 	bl	8001c3c <menu>
		}


		// Test segments:

		if(TurnOnMenuMode()==MENU_TEST_LEVEL){
 8001770:	f000 f890 	bl	8001894 <TurnOnMenuMode>
 8001774:	4603      	mov	r3, r0
 8001776:	2b09      	cmp	r3, #9
 8001778:	d1e1      	bne.n	800173e <main+0x5a>
			testSegments();
 800177a:	f001 fe4f 	bl	800341c <testSegments>
	while (1) {
 800177e:	e7de      	b.n	800173e <main+0x5a>
 8001780:	200009a8 	.word	0x200009a8
 8001784:	20000932 	.word	0x20000932
 8001788:	20000930 	.word	0x20000930

0800178c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b096      	sub	sp, #88	; 0x58
 8001790:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001792:	f107 0314 	add.w	r3, r7, #20
 8001796:	2244      	movs	r2, #68	; 0x44
 8001798:	2100      	movs	r1, #0
 800179a:	4618      	mov	r0, r3
 800179c:	f009 f8ac 	bl	800a8f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017a0:	463b      	mov	r3, r7
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	605a      	str	r2, [r3, #4]
 80017a8:	609a      	str	r2, [r3, #8]
 80017aa:	60da      	str	r2, [r3, #12]
 80017ac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80017ae:	f44f 7000 	mov.w	r0, #512	; 0x200
 80017b2:	f004 f923 	bl	80059fc <HAL_PWREx_ControlVoltageScaling>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80017bc:	f000 f864 	bl	8001888 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80017c0:	f004 f8e4 	bl	800598c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80017c4:	4b21      	ldr	r3, [pc, #132]	; (800184c <SystemClock_Config+0xc0>)
 80017c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ca:	4a20      	ldr	r2, [pc, #128]	; (800184c <SystemClock_Config+0xc0>)
 80017cc:	f023 0318 	bic.w	r3, r3, #24
 80017d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80017d4:	2314      	movs	r3, #20
 80017d6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80017d8:	2301      	movs	r3, #1
 80017da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80017dc:	2301      	movs	r3, #1
 80017de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80017e0:	2300      	movs	r3, #0
 80017e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80017e4:	2360      	movs	r3, #96	; 0x60
 80017e6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017e8:	2302      	movs	r3, #2
 80017ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80017ec:	2301      	movs	r3, #1
 80017ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80017f0:	2301      	movs	r3, #1
 80017f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80017f4:	2328      	movs	r3, #40	; 0x28
 80017f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80017f8:	2307      	movs	r3, #7
 80017fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80017fc:	2302      	movs	r3, #2
 80017fe:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001800:	2302      	movs	r3, #2
 8001802:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001804:	f107 0314 	add.w	r3, r7, #20
 8001808:	4618      	mov	r0, r3
 800180a:	f004 f94d 	bl	8005aa8 <HAL_RCC_OscConfig>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001814:	f000 f838 	bl	8001888 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001818:	230f      	movs	r3, #15
 800181a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800181c:	2303      	movs	r3, #3
 800181e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001820:	2300      	movs	r3, #0
 8001822:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001824:	2300      	movs	r3, #0
 8001826:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001828:	2300      	movs	r3, #0
 800182a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800182c:	463b      	mov	r3, r7
 800182e:	2104      	movs	r1, #4
 8001830:	4618      	mov	r0, r3
 8001832:	f004 fd21 	bl	8006278 <HAL_RCC_ClockConfig>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800183c:	f000 f824 	bl	8001888 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001840:	f005 fa0a 	bl	8006c58 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001844:	bf00      	nop
 8001846:	3758      	adds	r7, #88	; 0x58
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	40021000 	.word	0x40021000

08001850 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* RTC_Alarm_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 1, 0);
 8001854:	2200      	movs	r2, #0
 8001856:	2101      	movs	r1, #1
 8001858:	2029      	movs	r0, #41	; 0x29
 800185a:	f003 fcbe 	bl	80051da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800185e:	2029      	movs	r0, #41	; 0x29
 8001860:	f003 fcd7 	bl	8005212 <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8001864:	2200      	movs	r2, #0
 8001866:	2102      	movs	r1, #2
 8001868:	201c      	movs	r0, #28
 800186a:	f003 fcb6 	bl	80051da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800186e:	201c      	movs	r0, #28
 8001870:	f003 fccf 	bl	8005212 <HAL_NVIC_EnableIRQ>
  /* TIM6_DAC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 8001874:	2200      	movs	r2, #0
 8001876:	2103      	movs	r1, #3
 8001878:	2036      	movs	r0, #54	; 0x36
 800187a:	f003 fcae 	bl	80051da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800187e:	2036      	movs	r0, #54	; 0x36
 8001880:	f003 fcc7 	bl	8005212 <HAL_NVIC_EnableIRQ>
}
 8001884:	bf00      	nop
 8001886:	bd80      	pop	{r7, pc}

08001888 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800188c:	b672      	cpsid	i
}
 800188e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001890:	e7fe      	b.n	8001890 <Error_Handler+0x8>
	...

08001894 <TurnOnMenuMode>:



// Funtions:

int TurnOnMenuMode(void){
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
	return flagMenu;
 8001898:	4b03      	ldr	r3, [pc, #12]	; (80018a8 <TurnOnMenuMode+0x14>)
 800189a:	681b      	ldr	r3, [r3, #0]
}
 800189c:	4618      	mov	r0, r3
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	200002d8 	.word	0x200002d8

080018ac <isInRangeHours>:


// Tests:

int isInRangeHours(uint8_t entryData){
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4603      	mov	r3, r0
 80018b4:	71fb      	strb	r3, [r7, #7]
	if(entryData>23){
 80018b6:	79fb      	ldrb	r3, [r7, #7]
 80018b8:	2b17      	cmp	r3, #23
 80018ba:	d901      	bls.n	80018c0 <isInRangeHours+0x14>
		return 1;
 80018bc:	2301      	movs	r3, #1
 80018be:	e000      	b.n	80018c2 <isInRangeHours+0x16>
	}else{
		return 0;
 80018c0:	2300      	movs	r3, #0
	}
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr

080018ce <isInRangeMinute>:

int isInRangeMinute(uint8_t entryData){
 80018ce:	b480      	push	{r7}
 80018d0:	b083      	sub	sp, #12
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	4603      	mov	r3, r0
 80018d6:	71fb      	strb	r3, [r7, #7]
	if(entryData>60){
 80018d8:	79fb      	ldrb	r3, [r7, #7]
 80018da:	2b3c      	cmp	r3, #60	; 0x3c
 80018dc:	d901      	bls.n	80018e2 <isInRangeMinute+0x14>
		return 1;
 80018de:	2301      	movs	r3, #1
 80018e0:	e000      	b.n	80018e4 <isInRangeMinute+0x16>
	}else{
		return 0;
 80018e2:	2300      	movs	r3, #0
	}
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <isInRangeMonth>:


int isInRangeMonth(uint8_t entryData){
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	71fb      	strb	r3, [r7, #7]
	if(entryData>12){
 80018fa:	79fb      	ldrb	r3, [r7, #7]
 80018fc:	2b0c      	cmp	r3, #12
 80018fe:	d901      	bls.n	8001904 <isInRangeMonth+0x14>
		return 1;
 8001900:	2301      	movs	r3, #1
 8001902:	e000      	b.n	8001906 <isInRangeMonth+0x16>
	}else{
		return 0;
 8001904:	2300      	movs	r3, #0
	}
}
 8001906:	4618      	mov	r0, r3
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr

08001912 <isInRangeDay>:


int isInRangeDay(uint8_t entryData){
 8001912:	b480      	push	{r7}
 8001914:	b083      	sub	sp, #12
 8001916:	af00      	add	r7, sp, #0
 8001918:	4603      	mov	r3, r0
 800191a:	71fb      	strb	r3, [r7, #7]
	if(entryData>31){
 800191c:	79fb      	ldrb	r3, [r7, #7]
 800191e:	2b1f      	cmp	r3, #31
 8001920:	d901      	bls.n	8001926 <isInRangeDay+0x14>
		return 1;
 8001922:	2301      	movs	r3, #1
 8001924:	e000      	b.n	8001928 <isInRangeDay+0x16>
	}else{
		return 0;
 8001926:	2300      	movs	r3, #0
	}
}
 8001928:	4618      	mov	r0, r3
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <isInRangeYear>:

int isInRangeYear(uint8_t entryData){
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	71fb      	strb	r3, [r7, #7]
	if(entryData>100){
 800193e:	79fb      	ldrb	r3, [r7, #7]
 8001940:	2b64      	cmp	r3, #100	; 0x64
 8001942:	d901      	bls.n	8001948 <isInRangeYear+0x14>
		return 1;
 8001944:	2301      	movs	r3, #1
 8001946:	e000      	b.n	800194a <isInRangeYear+0x16>
	}else{
		return 0;
 8001948:	2300      	movs	r3, #0
	}
}
 800194a:	4618      	mov	r0, r3
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
	...

08001958 <colorMenu>:


void colorMenu(struct colorRgb color){
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
	if (flagColor == MENU_COLOR_LEVEL) {
 8001960:	4b06      	ldr	r3, [pc, #24]	; (800197c <colorMenu+0x24>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2b01      	cmp	r3, #1
 8001966:	d105      	bne.n	8001974 <colorMenu+0x1c>
				changeColor(color);
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f000 ffed 	bl	8002948 <changeColor>
				flagColor = MENU_OFF;
 800196e:	4b03      	ldr	r3, [pc, #12]	; (800197c <colorMenu+0x24>)
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
			}
}
 8001974:	bf00      	nop
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	200002d4 	.word	0x200002d4

08001980 <firstDigitHour>:


// Funtions to chagne time in menu:


void firstDigitHour(uint8_t forAdd){
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	71fb      	strb	r3, [r7, #7]
	if (flagMenu == MENU_TIME_LEVEL) {
 800198a:	4b08      	ldr	r3, [pc, #32]	; (80019ac <firstDigitHour+0x2c>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d105      	bne.n	800199e <firstDigitHour+0x1e>
		hoursChange = forAdd;
 8001992:	4a07      	ldr	r2, [pc, #28]	; (80019b0 <firstDigitHour+0x30>)
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	7013      	strb	r3, [r2, #0]
		flagMenu = MENU_TIME_HOUR_SECOND_DIGIT;
 8001998:	4b04      	ldr	r3, [pc, #16]	; (80019ac <firstDigitHour+0x2c>)
 800199a:	2203      	movs	r2, #3
 800199c:	601a      	str	r2, [r3, #0]
	}
}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	200002d8 	.word	0x200002d8
 80019b0:	200002cd 	.word	0x200002cd

080019b4 <secondDigitHour>:

void secondDigitHour(uint8_t forAdd){
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	4603      	mov	r3, r0
 80019bc:	71fb      	strb	r3, [r7, #7]
	if (flagMenu == MENU_TIME_HOUR_SECOND_DIGIT) {
 80019be:	4b11      	ldr	r3, [pc, #68]	; (8001a04 <secondDigitHour+0x50>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2b03      	cmp	r3, #3
 80019c4:	d119      	bne.n	80019fa <secondDigitHour+0x46>

		hoursChange += forAdd;
 80019c6:	4b10      	ldr	r3, [pc, #64]	; (8001a08 <secondDigitHour+0x54>)
 80019c8:	781a      	ldrb	r2, [r3, #0]
 80019ca:	79fb      	ldrb	r3, [r7, #7]
 80019cc:	4413      	add	r3, r2
 80019ce:	b2da      	uxtb	r2, r3
 80019d0:	4b0d      	ldr	r3, [pc, #52]	; (8001a08 <secondDigitHour+0x54>)
 80019d2:	701a      	strb	r2, [r3, #0]

		if (isInRangeHours(hoursChange)) {
 80019d4:	4b0c      	ldr	r3, [pc, #48]	; (8001a08 <secondDigitHour+0x54>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff ff67 	bl	80018ac <isInRangeHours>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d002      	beq.n	80019ea <secondDigitHour+0x36>
			hoursChange = 0;
 80019e4:	4b08      	ldr	r3, [pc, #32]	; (8001a08 <secondDigitHour+0x54>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	701a      	strb	r2, [r3, #0]
		}

		setHours(hoursChange);
 80019ea:	4b07      	ldr	r3, [pc, #28]	; (8001a08 <secondDigitHour+0x54>)
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f001 fb4a 	bl	8003088 <setHours>
		flagMenu = MENU_TIME_LEVEL;
 80019f4:	4b03      	ldr	r3, [pc, #12]	; (8001a04 <secondDigitHour+0x50>)
 80019f6:	2201      	movs	r2, #1
 80019f8:	601a      	str	r2, [r3, #0]
	}
}
 80019fa:	bf00      	nop
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	200002d8 	.word	0x200002d8
 8001a08:	200002cd 	.word	0x200002cd

08001a0c <firstDigitMinute>:

void firstDigitMinute(uint8_t forAdd){
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	4603      	mov	r3, r0
 8001a14:	71fb      	strb	r3, [r7, #7]
	if (flagMenu == MENU_TIME_MINUTE_LEVEL) {
 8001a16:	4b08      	ldr	r3, [pc, #32]	; (8001a38 <firstDigitMinute+0x2c>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d105      	bne.n	8001a2a <firstDigitMinute+0x1e>
		minutesChange = forAdd;
 8001a1e:	4a07      	ldr	r2, [pc, #28]	; (8001a3c <firstDigitMinute+0x30>)
 8001a20:	79fb      	ldrb	r3, [r7, #7]
 8001a22:	7013      	strb	r3, [r2, #0]
		flagMenu = MENU_TIME_MINUTE_SECOND_DIGIT;
 8001a24:	4b04      	ldr	r3, [pc, #16]	; (8001a38 <firstDigitMinute+0x2c>)
 8001a26:	2204      	movs	r2, #4
 8001a28:	601a      	str	r2, [r3, #0]

	}
}
 8001a2a:	bf00      	nop
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	200002d8 	.word	0x200002d8
 8001a3c:	200002cc 	.word	0x200002cc

08001a40 <secondDigitMinute>:

void secondDigitMinute(uint8_t forAdd){
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	71fb      	strb	r3, [r7, #7]
	if (flagMenu == MENU_TIME_MINUTE_SECOND_DIGIT) {
 8001a4a:	4b11      	ldr	r3, [pc, #68]	; (8001a90 <secondDigitMinute+0x50>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2b04      	cmp	r3, #4
 8001a50:	d119      	bne.n	8001a86 <secondDigitMinute+0x46>
		minutesChange += forAdd;
 8001a52:	4b10      	ldr	r3, [pc, #64]	; (8001a94 <secondDigitMinute+0x54>)
 8001a54:	781a      	ldrb	r2, [r3, #0]
 8001a56:	79fb      	ldrb	r3, [r7, #7]
 8001a58:	4413      	add	r3, r2
 8001a5a:	b2da      	uxtb	r2, r3
 8001a5c:	4b0d      	ldr	r3, [pc, #52]	; (8001a94 <secondDigitMinute+0x54>)
 8001a5e:	701a      	strb	r2, [r3, #0]

		if (isInRangeMinute(minutesChange)) {
 8001a60:	4b0c      	ldr	r3, [pc, #48]	; (8001a94 <secondDigitMinute+0x54>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff ff32 	bl	80018ce <isInRangeMinute>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d002      	beq.n	8001a76 <secondDigitMinute+0x36>
			minutesChange = 0;
 8001a70:	4b08      	ldr	r3, [pc, #32]	; (8001a94 <secondDigitMinute+0x54>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	701a      	strb	r2, [r3, #0]
		}
		setMinutes(minutesChange);
 8001a76:	4b07      	ldr	r3, [pc, #28]	; (8001a94 <secondDigitMinute+0x54>)
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f001 fad6 	bl	800302c <setMinutes>
		flagMenu = MENU_TIME_MINUTE_LEVEL;
 8001a80:	4b03      	ldr	r3, [pc, #12]	; (8001a90 <secondDigitMinute+0x50>)
 8001a82:	2202      	movs	r2, #2
 8001a84:	601a      	str	r2, [r3, #0]
	}
}
 8001a86:	bf00      	nop
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	200002d8 	.word	0x200002d8
 8001a94:	200002cc 	.word	0x200002cc

08001a98 <firstDigitMonth>:


// functions to change data in menu


void firstDigitMonth(uint8_t forAdd){
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	71fb      	strb	r3, [r7, #7]
	if (flagMenu == MENU_DATE_LEVEL) {
 8001aa2:	4b08      	ldr	r3, [pc, #32]	; (8001ac4 <firstDigitMonth+0x2c>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2b05      	cmp	r3, #5
 8001aa8:	d105      	bne.n	8001ab6 <firstDigitMonth+0x1e>
		monthChange = forAdd;
 8001aaa:	4a07      	ldr	r2, [pc, #28]	; (8001ac8 <firstDigitMonth+0x30>)
 8001aac:	79fb      	ldrb	r3, [r7, #7]
 8001aae:	7013      	strb	r3, [r2, #0]
		flagMenu = MENU_DATE_MONTH_SECOND_DIGIT;
 8001ab0:	4b04      	ldr	r3, [pc, #16]	; (8001ac4 <firstDigitMonth+0x2c>)
 8001ab2:	2206      	movs	r2, #6
 8001ab4:	601a      	str	r2, [r3, #0]
	}
}
 8001ab6:	bf00      	nop
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	200002d8 	.word	0x200002d8
 8001ac8:	200002cf 	.word	0x200002cf

08001acc <secondDigitMonth>:


void secondDigitMonth(uint8_t forAdd){
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	71fb      	strb	r3, [r7, #7]
	if (flagMenu == MENU_DATE_MONTH_SECOND_DIGIT) {
 8001ad6:	4b11      	ldr	r3, [pc, #68]	; (8001b1c <secondDigitMonth+0x50>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2b06      	cmp	r3, #6
 8001adc:	d119      	bne.n	8001b12 <secondDigitMonth+0x46>

		monthChange += forAdd;
 8001ade:	4b10      	ldr	r3, [pc, #64]	; (8001b20 <secondDigitMonth+0x54>)
 8001ae0:	781a      	ldrb	r2, [r3, #0]
 8001ae2:	79fb      	ldrb	r3, [r7, #7]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	b2da      	uxtb	r2, r3
 8001ae8:	4b0d      	ldr	r3, [pc, #52]	; (8001b20 <secondDigitMonth+0x54>)
 8001aea:	701a      	strb	r2, [r3, #0]

		if (isInRangeMonth(monthChange)) {
 8001aec:	4b0c      	ldr	r3, [pc, #48]	; (8001b20 <secondDigitMonth+0x54>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff fefd 	bl	80018f0 <isInRangeMonth>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d002      	beq.n	8001b02 <secondDigitMonth+0x36>
			monthChange = 0;
 8001afc:	4b08      	ldr	r3, [pc, #32]	; (8001b20 <secondDigitMonth+0x54>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	701a      	strb	r2, [r3, #0]
		}

		setMonth(monthChange);
 8001b02:	4b07      	ldr	r3, [pc, #28]	; (8001b20 <secondDigitMonth+0x54>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f001 faf0 	bl	80030ec <setMonth>
		flagMenu = MENU_DATE_LEVEL;
 8001b0c:	4b03      	ldr	r3, [pc, #12]	; (8001b1c <secondDigitMonth+0x50>)
 8001b0e:	2205      	movs	r2, #5
 8001b10:	601a      	str	r2, [r3, #0]
	}
}
 8001b12:	bf00      	nop
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	200002d8 	.word	0x200002d8
 8001b20:	200002cf 	.word	0x200002cf

08001b24 <firstDigitDay>:


void firstDigitDay(uint8_t forAdd){
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	71fb      	strb	r3, [r7, #7]
	if (flagMenu == MENU_DATE_DAY_FIRST_DIGIT) {
 8001b2e:	4b08      	ldr	r3, [pc, #32]	; (8001b50 <firstDigitDay+0x2c>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	2b07      	cmp	r3, #7
 8001b34:	d105      	bne.n	8001b42 <firstDigitDay+0x1e>
		dayChange = forAdd;
 8001b36:	4a07      	ldr	r2, [pc, #28]	; (8001b54 <firstDigitDay+0x30>)
 8001b38:	79fb      	ldrb	r3, [r7, #7]
 8001b3a:	7013      	strb	r3, [r2, #0]
		flagMenu = MENU_DATE_DAY_SECOND_DIGIT;
 8001b3c:	4b04      	ldr	r3, [pc, #16]	; (8001b50 <firstDigitDay+0x2c>)
 8001b3e:	2208      	movs	r2, #8
 8001b40:	601a      	str	r2, [r3, #0]

	}
}
 8001b42:	bf00      	nop
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	200002d8 	.word	0x200002d8
 8001b54:	200002ce 	.word	0x200002ce

08001b58 <secondDigitDay>:


void secondDigitDay(uint8_t forAdd){
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	71fb      	strb	r3, [r7, #7]
	if (flagMenu == MENU_DATE_DAY_SECOND_DIGIT) {
 8001b62:	4b11      	ldr	r3, [pc, #68]	; (8001ba8 <secondDigitDay+0x50>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2b08      	cmp	r3, #8
 8001b68:	d119      	bne.n	8001b9e <secondDigitDay+0x46>
		dayChange += forAdd;
 8001b6a:	4b10      	ldr	r3, [pc, #64]	; (8001bac <secondDigitDay+0x54>)
 8001b6c:	781a      	ldrb	r2, [r3, #0]
 8001b6e:	79fb      	ldrb	r3, [r7, #7]
 8001b70:	4413      	add	r3, r2
 8001b72:	b2da      	uxtb	r2, r3
 8001b74:	4b0d      	ldr	r3, [pc, #52]	; (8001bac <secondDigitDay+0x54>)
 8001b76:	701a      	strb	r2, [r3, #0]

		if (isInRangeDay(dayChange)) {
 8001b78:	4b0c      	ldr	r3, [pc, #48]	; (8001bac <secondDigitDay+0x54>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff fec8 	bl	8001912 <isInRangeDay>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d002      	beq.n	8001b8e <secondDigitDay+0x36>
			dayChange = 0;
 8001b88:	4b08      	ldr	r3, [pc, #32]	; (8001bac <secondDigitDay+0x54>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	701a      	strb	r2, [r3, #0]
		}
		setDay(dayChange);
 8001b8e:	4b07      	ldr	r3, [pc, #28]	; (8001bac <secondDigitDay+0x54>)
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f001 fae0 	bl	8003158 <setDay>
		flagMenu = MENU_DATE_DAY_FIRST_DIGIT;
 8001b98:	4b03      	ldr	r3, [pc, #12]	; (8001ba8 <secondDigitDay+0x50>)
 8001b9a:	2207      	movs	r2, #7
 8001b9c:	601a      	str	r2, [r3, #0]
	}
}
 8001b9e:	bf00      	nop
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	200002d8 	.word	0x200002d8
 8001bac:	200002ce 	.word	0x200002ce

08001bb0 <firstDigitYear>:

void firstDigitYear(uint8_t forAdd){
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	71fb      	strb	r3, [r7, #7]
	if (flagMenu == MENU_YEAR_LEVEL) {
 8001bba:	4b08      	ldr	r3, [pc, #32]	; (8001bdc <firstDigitYear+0x2c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2b0b      	cmp	r3, #11
 8001bc0:	d105      	bne.n	8001bce <firstDigitYear+0x1e>
		yearChange = forAdd;
 8001bc2:	4a07      	ldr	r2, [pc, #28]	; (8001be0 <firstDigitYear+0x30>)
 8001bc4:	79fb      	ldrb	r3, [r7, #7]
 8001bc6:	7013      	strb	r3, [r2, #0]
		flagMenu = MENU_YEAR_FOURTH_DIGIT;
 8001bc8:	4b04      	ldr	r3, [pc, #16]	; (8001bdc <firstDigitYear+0x2c>)
 8001bca:	220c      	movs	r2, #12
 8001bcc:	601a      	str	r2, [r3, #0]
	}
}
 8001bce:	bf00      	nop
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	200002d8 	.word	0x200002d8
 8001be0:	200002d0 	.word	0x200002d0

08001be4 <secondDigitYear>:

void secondDigitYear(uint8_t forAdd){
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	4603      	mov	r3, r0
 8001bec:	71fb      	strb	r3, [r7, #7]
	if (flagMenu == MENU_YEAR_FOURTH_DIGIT) {
 8001bee:	4b11      	ldr	r3, [pc, #68]	; (8001c34 <secondDigitYear+0x50>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2b0c      	cmp	r3, #12
 8001bf4:	d119      	bne.n	8001c2a <secondDigitYear+0x46>
		yearChange += forAdd;
 8001bf6:	4b10      	ldr	r3, [pc, #64]	; (8001c38 <secondDigitYear+0x54>)
 8001bf8:	781a      	ldrb	r2, [r3, #0]
 8001bfa:	79fb      	ldrb	r3, [r7, #7]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	b2da      	uxtb	r2, r3
 8001c00:	4b0d      	ldr	r3, [pc, #52]	; (8001c38 <secondDigitYear+0x54>)
 8001c02:	701a      	strb	r2, [r3, #0]

		if (isInRangeYear(yearChange)) {
 8001c04:	4b0c      	ldr	r3, [pc, #48]	; (8001c38 <secondDigitYear+0x54>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff fe93 	bl	8001934 <isInRangeYear>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d002      	beq.n	8001c1a <secondDigitYear+0x36>
			yearChange = 0;
 8001c14:	4b08      	ldr	r3, [pc, #32]	; (8001c38 <secondDigitYear+0x54>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	701a      	strb	r2, [r3, #0]
		}
		setYear(yearChange);
 8001c1a:	4b07      	ldr	r3, [pc, #28]	; (8001c38 <secondDigitYear+0x54>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f001 facc 	bl	80031bc <setYear>
		flagMenu = MENU_YEAR_LEVEL;
 8001c24:	4b03      	ldr	r3, [pc, #12]	; (8001c34 <secondDigitYear+0x50>)
 8001c26:	220b      	movs	r2, #11
 8001c28:	601a      	str	r2, [r3, #0]
	}
}
 8001c2a:	bf00      	nop
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	200002d8 	.word	0x200002d8
 8001c38:	200002d0 	.word	0x200002d0

08001c3c <menu>:
/*
 *
 * REMOTE CONTROLLER MENU
 *
 */
void menu(int value) {
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b088      	sub	sp, #32
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]

	// Display via USART
	//printf("code=%02x\n", value);

	RTC_TimeTypeDef time = {0};
 8001c44:	f107 030c 	add.w	r3, r7, #12
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	605a      	str	r2, [r3, #4]
 8001c4e:	609a      	str	r2, [r3, #8]
 8001c50:	60da      	str	r2, [r3, #12]
 8001c52:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef date = {0};
 8001c54:	2300      	movs	r3, #0
 8001c56:	60bb      	str	r3, [r7, #8]

	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8001c58:	f107 030c 	add.w	r3, r7, #12
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	4619      	mov	r1, r3
 8001c60:	48af      	ldr	r0, [pc, #700]	; (8001f20 <menu+0x2e4>)
 8001c62:	f005 faf3 	bl	800724c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8001c66:	f107 0308 	add.w	r3, r7, #8
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	48ac      	ldr	r0, [pc, #688]	; (8001f20 <menu+0x2e4>)
 8001c70:	f005 fbcf 	bl	8007412 <HAL_RTC_GetDate>


	switch (value) {
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	3b07      	subs	r3, #7
 8001c78:	2b57      	cmp	r3, #87	; 0x57
 8001c7a:	f200 8312 	bhi.w	80022a2 <menu+0x666>
 8001c7e:	a201      	add	r2, pc, #4	; (adr r2, 8001c84 <menu+0x48>)
 8001c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c84:	08001eef 	.word	0x08001eef
 8001c88:	08002039 	.word	0x08002039
 8001c8c:	08001ebf 	.word	0x08001ebf
 8001c90:	080022a3 	.word	0x080022a3
 8001c94:	080022a3 	.word	0x080022a3
 8001c98:	08001f3d 	.word	0x08001f3d
 8001c9c:	08001e49 	.word	0x08001e49
 8001ca0:	080022a3 	.word	0x080022a3
 8001ca4:	080022a3 	.word	0x080022a3
 8001ca8:	080022a3 	.word	0x080022a3
 8001cac:	080022a3 	.word	0x080022a3
 8001cb0:	080022a3 	.word	0x080022a3
 8001cb4:	080022a3 	.word	0x080022a3
 8001cb8:	080022a3 	.word	0x080022a3
 8001cbc:	08001eaf 	.word	0x08001eaf
 8001cc0:	08002161 	.word	0x08002161
 8001cc4:	080022a3 	.word	0x080022a3
 8001cc8:	08001f97 	.word	0x08001f97
 8001ccc:	08001e0b 	.word	0x08001e0b
 8001cd0:	080022a3 	.word	0x080022a3
 8001cd4:	080022a3 	.word	0x080022a3
 8001cd8:	08002081 	.word	0x08002081
 8001cdc:	080022a3 	.word	0x080022a3
 8001ce0:	080022a3 	.word	0x080022a3
 8001ce4:	080022a3 	.word	0x080022a3
 8001ce8:	080022a3 	.word	0x080022a3
 8001cec:	080022a3 	.word	0x080022a3
 8001cf0:	080022a3 	.word	0x080022a3
 8001cf4:	080022a3 	.word	0x080022a3
 8001cf8:	080022a3 	.word	0x080022a3
 8001cfc:	080022a3 	.word	0x080022a3
 8001d00:	080022a3 	.word	0x080022a3
 8001d04:	080022a3 	.word	0x080022a3
 8001d08:	080022a3 	.word	0x080022a3
 8001d0c:	080022a3 	.word	0x080022a3
 8001d10:	080022a3 	.word	0x080022a3
 8001d14:	080022a3 	.word	0x080022a3
 8001d18:	080022a3 	.word	0x080022a3
 8001d1c:	080022a3 	.word	0x080022a3
 8001d20:	080022a3 	.word	0x080022a3
 8001d24:	080022a3 	.word	0x080022a3
 8001d28:	080022a3 	.word	0x080022a3
 8001d2c:	080022a3 	.word	0x080022a3
 8001d30:	080022a3 	.word	0x080022a3
 8001d34:	080022a3 	.word	0x080022a3
 8001d38:	080022a3 	.word	0x080022a3
 8001d3c:	080022a3 	.word	0x080022a3
 8001d40:	080022a3 	.word	0x080022a3
 8001d44:	080022a3 	.word	0x080022a3
 8001d48:	080022a3 	.word	0x080022a3
 8001d4c:	080022a3 	.word	0x080022a3
 8001d50:	080022a3 	.word	0x080022a3
 8001d54:	080022a3 	.word	0x080022a3
 8001d58:	080022a3 	.word	0x080022a3
 8001d5c:	080022a3 	.word	0x080022a3
 8001d60:	080022a3 	.word	0x080022a3
 8001d64:	080022a3 	.word	0x080022a3
 8001d68:	08001de5 	.word	0x08001de5
 8001d6c:	080022a3 	.word	0x080022a3
 8001d70:	080020ef 	.word	0x080020ef
 8001d74:	080022a3 	.word	0x080022a3
 8001d78:	08001e31 	.word	0x08001e31
 8001d7c:	080022a3 	.word	0x080022a3
 8001d80:	080022a3 	.word	0x080022a3
 8001d84:	08001e51 	.word	0x08001e51
 8001d88:	080022a3 	.word	0x080022a3
 8001d8c:	080022a3 	.word	0x080022a3
 8001d90:	0800213b 	.word	0x0800213b
 8001d94:	080022a3 	.word	0x080022a3
 8001d98:	080022a3 	.word	0x080022a3
 8001d9c:	080022a3 	.word	0x080022a3
 8001da0:	080022a3 	.word	0x080022a3
 8001da4:	080022a3 	.word	0x080022a3
 8001da8:	080022a3 	.word	0x080022a3
 8001dac:	080022a3 	.word	0x080022a3
 8001db0:	08002115 	.word	0x08002115
 8001db4:	080022a3 	.word	0x080022a3
 8001db8:	080022a3 	.word	0x080022a3
 8001dbc:	080022a3 	.word	0x080022a3
 8001dc0:	080022a3 	.word	0x080022a3
 8001dc4:	080022a3 	.word	0x080022a3
 8001dc8:	080022a3 	.word	0x080022a3
 8001dcc:	080022a3 	.word	0x080022a3
 8001dd0:	080020c9 	.word	0x080020c9
 8001dd4:	080022a3 	.word	0x080022a3
 8001dd8:	080022a3 	.word	0x080022a3
 8001ddc:	080022a3 	.word	0x080022a3
 8001de0:	08001feb 	.word	0x08001feb
	case IR_CODE_PLUS:
		if(flagMenu==MENU_TIME_MINUTE_SECOND_DIGIT || flagMenu==MENU_TIME_MINUTE_LEVEL){
 8001de4:	4b4f      	ldr	r3, [pc, #316]	; (8001f24 <menu+0x2e8>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2b04      	cmp	r3, #4
 8001dea:	d004      	beq.n	8001df6 <menu+0x1ba>
 8001dec:	4b4d      	ldr	r3, [pc, #308]	; (8001f24 <menu+0x2e8>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	f040 8238 	bne.w	8002266 <menu+0x62a>
			sleepHour=time.Hours;
 8001df6:	7b3a      	ldrb	r2, [r7, #12]
 8001df8:	4b4b      	ldr	r3, [pc, #300]	; (8001f28 <menu+0x2ec>)
 8001dfa:	701a      	strb	r2, [r3, #0]
			sleepMinute=time.Minutes;
 8001dfc:	7b7a      	ldrb	r2, [r7, #13]
 8001dfe:	4b4b      	ldr	r3, [pc, #300]	; (8001f2c <menu+0x2f0>)
 8001e00:	701a      	strb	r2, [r3, #0]
			flagMenu=MENU_INFO_SLEEP;
 8001e02:	4b48      	ldr	r3, [pc, #288]	; (8001f24 <menu+0x2e8>)
 8001e04:	2214      	movs	r2, #20
 8001e06:	601a      	str	r2, [r3, #0]
		}
		break;
 8001e08:	e22d      	b.n	8002266 <menu+0x62a>
	case IR_CODE_MINUS:
		if(flagMenu==MENU_TIME_MINUTE_SECOND_DIGIT || flagMenu==MENU_TIME_MINUTE_LEVEL){
 8001e0a:	4b46      	ldr	r3, [pc, #280]	; (8001f24 <menu+0x2e8>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2b04      	cmp	r3, #4
 8001e10:	d004      	beq.n	8001e1c <menu+0x1e0>
 8001e12:	4b44      	ldr	r3, [pc, #272]	; (8001f24 <menu+0x2e8>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	f040 8227 	bne.w	800226a <menu+0x62e>
					wakeUpHour=time.Hours;
 8001e1c:	7b3a      	ldrb	r2, [r7, #12]
 8001e1e:	4b44      	ldr	r3, [pc, #272]	; (8001f30 <menu+0x2f4>)
 8001e20:	701a      	strb	r2, [r3, #0]
					wakeUpMinute=time.Minutes;
 8001e22:	7b7a      	ldrb	r2, [r7, #13]
 8001e24:	4b43      	ldr	r3, [pc, #268]	; (8001f34 <menu+0x2f8>)
 8001e26:	701a      	strb	r2, [r3, #0]
					flagMenu=MENU_INFO_ALARM;
 8001e28:	4b3e      	ldr	r3, [pc, #248]	; (8001f24 <menu+0x2e8>)
 8001e2a:	2215      	movs	r2, #21
 8001e2c:	601a      	str	r2, [r3, #0]
				}
		break;
 8001e2e:	e21c      	b.n	800226a <menu+0x62e>

	case IR_CODE_TEST:
		if(flagMenu==MENU_TEST_LEVEL){
 8001e30:	4b3c      	ldr	r3, [pc, #240]	; (8001f24 <menu+0x2e8>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2b09      	cmp	r3, #9
 8001e36:	d103      	bne.n	8001e40 <menu+0x204>
			flagMenu=MENU_OFF;
 8001e38:	4b3a      	ldr	r3, [pc, #232]	; (8001f24 <menu+0x2e8>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	601a      	str	r2, [r3, #0]
		}else{
			flagMenu=MENU_TEST_LEVEL;
		}
		break;
 8001e3e:	e230      	b.n	80022a2 <menu+0x666>
			flagMenu=MENU_TEST_LEVEL;
 8001e40:	4b38      	ldr	r3, [pc, #224]	; (8001f24 <menu+0x2e8>)
 8001e42:	2209      	movs	r2, #9
 8001e44:	601a      	str	r2, [r3, #0]
		break;
 8001e46:	e22c      	b.n	80022a2 <menu+0x666>

	case IR_CODE_CANCEL:
		flagColor = MENU_COLOR_LEVEL;
 8001e48:	4b3b      	ldr	r3, [pc, #236]	; (8001f38 <menu+0x2fc>)
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	601a      	str	r2, [r3, #0]
		break;
 8001e4e:	e228      	b.n	80022a2 <menu+0x666>

	case IR_CODE_MENU:
		if (flagMenu == MENU_TIME_LEVEL || flagMenu == MENU_TIME_MINUTE_LEVEL
 8001e50:	4b34      	ldr	r3, [pc, #208]	; (8001f24 <menu+0x2e8>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d007      	beq.n	8001e68 <menu+0x22c>
 8001e58:	4b32      	ldr	r3, [pc, #200]	; (8001f24 <menu+0x2e8>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d003      	beq.n	8001e68 <menu+0x22c>
				|| flagMenu == MENU_TIME_MINUTE_SECOND_DIGIT) {
 8001e60:	4b30      	ldr	r3, [pc, #192]	; (8001f24 <menu+0x2e8>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2b04      	cmp	r3, #4
 8001e66:	d105      	bne.n	8001e74 <menu+0x238>
			mixColor();
 8001e68:	f000 fd98 	bl	800299c <mixColor>
			flagMenu = MENU_DATE_DAY_FIRST_DIGIT;
 8001e6c:	4b2d      	ldr	r3, [pc, #180]	; (8001f24 <menu+0x2e8>)
 8001e6e:	2207      	movs	r2, #7
 8001e70:	601a      	str	r2, [r3, #0]
 8001e72:	e01b      	b.n	8001eac <menu+0x270>
		}
		else if(flagMenu==MENU_DATE_LEVEL|| flagMenu==MENU_DATE_MONTH_SECOND_DIGIT || flagMenu==MENU_DATE_DAY_FIRST_DIGIT || flagMenu==MENU_DATE_DAY_SECOND_DIGIT){
 8001e74:	4b2b      	ldr	r3, [pc, #172]	; (8001f24 <menu+0x2e8>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2b05      	cmp	r3, #5
 8001e7a:	d00b      	beq.n	8001e94 <menu+0x258>
 8001e7c:	4b29      	ldr	r3, [pc, #164]	; (8001f24 <menu+0x2e8>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2b06      	cmp	r3, #6
 8001e82:	d007      	beq.n	8001e94 <menu+0x258>
 8001e84:	4b27      	ldr	r3, [pc, #156]	; (8001f24 <menu+0x2e8>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2b07      	cmp	r3, #7
 8001e8a:	d003      	beq.n	8001e94 <menu+0x258>
 8001e8c:	4b25      	ldr	r3, [pc, #148]	; (8001f24 <menu+0x2e8>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2b08      	cmp	r3, #8
 8001e92:	d105      	bne.n	8001ea0 <menu+0x264>
			mixColor();
 8001e94:	f000 fd82 	bl	800299c <mixColor>
			flagMenu=MENU_YEAR_LEVEL;
 8001e98:	4b22      	ldr	r3, [pc, #136]	; (8001f24 <menu+0x2e8>)
 8001e9a:	220b      	movs	r2, #11
 8001e9c:	601a      	str	r2, [r3, #0]
 8001e9e:	e005      	b.n	8001eac <menu+0x270>
		}else {
			backToColorinMemory();
 8001ea0:	f000 fd96 	bl	80029d0 <backToColorinMemory>
			flagMenu = MENU_TIME_LEVEL;
 8001ea4:	4b1f      	ldr	r3, [pc, #124]	; (8001f24 <menu+0x2e8>)
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	601a      	str	r2, [r3, #0]
		}

		break;
 8001eaa:	e1fa      	b.n	80022a2 <menu+0x666>
 8001eac:	e1f9      	b.n	80022a2 <menu+0x666>

	case IR_CODE_PLAY:
		dotOff();
 8001eae:	f000 ffcb 	bl	8002e48 <dotOff>
		backToColorinMemory();
 8001eb2:	f000 fd8d 	bl	80029d0 <backToColorinMemory>
		flagMenu = MENU_OFF;
 8001eb6:	4b1b      	ldr	r3, [pc, #108]	; (8001f24 <menu+0x2e8>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]
		break;
 8001ebc:	e1f1      	b.n	80022a2 <menu+0x666>

	case IR_CODE_FORWARD:
		if (flagMenu == MENU_TIME_LEVEL
 8001ebe:	4b19      	ldr	r3, [pc, #100]	; (8001f24 <menu+0x2e8>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d003      	beq.n	8001ece <menu+0x292>
				|| flagMenu == MENU_TIME_HOUR_SECOND_DIGIT) {
 8001ec6:	4b17      	ldr	r3, [pc, #92]	; (8001f24 <menu+0x2e8>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2b03      	cmp	r3, #3
 8001ecc:	d102      	bne.n	8001ed4 <menu+0x298>
			flagMenu = MENU_TIME_MINUTE_LEVEL;
 8001ece:	4b15      	ldr	r3, [pc, #84]	; (8001f24 <menu+0x2e8>)
 8001ed0:	2202      	movs	r2, #2
 8001ed2:	601a      	str	r2, [r3, #0]
		}
		if (flagMenu == MENU_DATE_DAY_FIRST_DIGIT
 8001ed4:	4b13      	ldr	r3, [pc, #76]	; (8001f24 <menu+0x2e8>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2b07      	cmp	r3, #7
 8001eda:	d004      	beq.n	8001ee6 <menu+0x2aa>
				|| flagMenu == MENU_DATE_DAY_SECOND_DIGIT) {
 8001edc:	4b11      	ldr	r3, [pc, #68]	; (8001f24 <menu+0x2e8>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2b08      	cmp	r3, #8
 8001ee2:	f040 81db 	bne.w	800229c <menu+0x660>
			flagMenu = MENU_DATE_LEVEL;
 8001ee6:	4b0f      	ldr	r3, [pc, #60]	; (8001f24 <menu+0x2e8>)
 8001ee8:	2205      	movs	r2, #5
 8001eea:	601a      	str	r2, [r3, #0]
		}
		break;
 8001eec:	e1d6      	b.n	800229c <menu+0x660>

	case IR_CODE_REWIND:
		if (flagMenu == MENU_TIME_MINUTE_LEVEL
 8001eee:	4b0d      	ldr	r3, [pc, #52]	; (8001f24 <menu+0x2e8>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d003      	beq.n	8001efe <menu+0x2c2>
				|| flagMenu == MENU_TIME_MINUTE_SECOND_DIGIT) {
 8001ef6:	4b0b      	ldr	r3, [pc, #44]	; (8001f24 <menu+0x2e8>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2b04      	cmp	r3, #4
 8001efc:	d102      	bne.n	8001f04 <menu+0x2c8>
			flagMenu = MENU_TIME_LEVEL;
 8001efe:	4b09      	ldr	r3, [pc, #36]	; (8001f24 <menu+0x2e8>)
 8001f00:	2201      	movs	r2, #1
 8001f02:	601a      	str	r2, [r3, #0]
		}
		if (flagMenu == MENU_DATE_LEVEL
 8001f04:	4b07      	ldr	r3, [pc, #28]	; (8001f24 <menu+0x2e8>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2b05      	cmp	r3, #5
 8001f0a:	d004      	beq.n	8001f16 <menu+0x2da>
				|| flagMenu == MENU_DATE_MONTH_SECOND_DIGIT) {
 8001f0c:	4b05      	ldr	r3, [pc, #20]	; (8001f24 <menu+0x2e8>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2b06      	cmp	r3, #6
 8001f12:	f040 81c5 	bne.w	80022a0 <menu+0x664>
			flagMenu = MENU_DATE_DAY_FIRST_DIGIT;
 8001f16:	4b03      	ldr	r3, [pc, #12]	; (8001f24 <menu+0x2e8>)
 8001f18:	2207      	movs	r2, #7
 8001f1a:	601a      	str	r2, [r3, #0]
		}
		break;
 8001f1c:	e1c0      	b.n	80022a0 <menu+0x664>
 8001f1e:	bf00      	nop
 8001f20:	20000934 	.word	0x20000934
 8001f24:	200002d8 	.word	0x200002d8
 8001f28:	20000932 	.word	0x20000932
 8001f2c:	20000930 	.word	0x20000930
 8001f30:	20000931 	.word	0x20000931
 8001f34:	2000092f 	.word	0x2000092f
 8001f38:	200002d4 	.word	0x200002d4

	case IR_CODE_1:
		// COLOR
		colorMenu(BLUE);
 8001f3c:	4bcc      	ldr	r3, [pc, #816]	; (8002270 <menu+0x634>)
 8001f3e:	781a      	ldrb	r2, [r3, #0]
 8001f40:	7859      	ldrb	r1, [r3, #1]
 8001f42:	0209      	lsls	r1, r1, #8
 8001f44:	430a      	orrs	r2, r1
 8001f46:	789b      	ldrb	r3, [r3, #2]
 8001f48:	041b      	lsls	r3, r3, #16
 8001f4a:	431a      	orrs	r2, r3
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	f362 0317 	bfi	r3, r2, #0, #24
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7ff fd00 	bl	8001958 <colorMenu>

		// FUNCTIONS MUST BE IN THIS ORDER

		// SECOND DIGIT_HOUR
		secondDigitHour(1);
 8001f58:	2001      	movs	r0, #1
 8001f5a:	f7ff fd2b 	bl	80019b4 <secondDigitHour>

		// FIRST DIGIT HOUR

		firstDigitHour(10);
 8001f5e:	200a      	movs	r0, #10
 8001f60:	f7ff fd0e 	bl	8001980 <firstDigitHour>

		// SECOND DIGIT MINUTE
		secondDigitMinute(1);
 8001f64:	2001      	movs	r0, #1
 8001f66:	f7ff fd6b 	bl	8001a40 <secondDigitMinute>

		// FIRST DIGIT MINUTE
		firstDigitMinute(10);
 8001f6a:	200a      	movs	r0, #10
 8001f6c:	f7ff fd4e 	bl	8001a0c <firstDigitMinute>

		// SECOND DIGIT MONTH
		secondDigitMonth(1);
 8001f70:	2001      	movs	r0, #1
 8001f72:	f7ff fdab 	bl	8001acc <secondDigitMonth>
		// FIRST DIGIT MONTH
		firstDigitMonth(10);
 8001f76:	200a      	movs	r0, #10
 8001f78:	f7ff fd8e 	bl	8001a98 <firstDigitMonth>
		// SECOND DIGIT DAY
		secondDigitDay(1);
 8001f7c:	2001      	movs	r0, #1
 8001f7e:	f7ff fdeb 	bl	8001b58 <secondDigitDay>
		// FIRST DIGIT DAY
		firstDigitDay(10);
 8001f82:	200a      	movs	r0, #10
 8001f84:	f7ff fdce 	bl	8001b24 <firstDigitDay>
		// SECOND DIGIT YEAR
		secondDigitYear(1);
 8001f88:	2001      	movs	r0, #1
 8001f8a:	f7ff fe2b 	bl	8001be4 <secondDigitYear>
		// FIRST SECOND YEAR
		firstDigitYear(10);
 8001f8e:	200a      	movs	r0, #10
 8001f90:	f7ff fe0e 	bl	8001bb0 <firstDigitYear>

		break;
 8001f94:	e185      	b.n	80022a2 <menu+0x666>

	case IR_CODE_2:
		//COLOR
		colorMenu(RED);
 8001f96:	4bb7      	ldr	r3, [pc, #732]	; (8002274 <menu+0x638>)
 8001f98:	781a      	ldrb	r2, [r3, #0]
 8001f9a:	7859      	ldrb	r1, [r3, #1]
 8001f9c:	0209      	lsls	r1, r1, #8
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	789b      	ldrb	r3, [r3, #2]
 8001fa2:	041b      	lsls	r3, r3, #16
 8001fa4:	431a      	orrs	r2, r3
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	f362 0317 	bfi	r3, r2, #0, #24
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7ff fcd3 	bl	8001958 <colorMenu>

		// FUNCTIONS MUST BE IN THIS ORDER

		// SECOND DIGIT_HOUR
		secondDigitHour(2);
 8001fb2:	2002      	movs	r0, #2
 8001fb4:	f7ff fcfe 	bl	80019b4 <secondDigitHour>

		// FIRST DIGIT HOUR

		firstDigitHour(20);
 8001fb8:	2014      	movs	r0, #20
 8001fba:	f7ff fce1 	bl	8001980 <firstDigitHour>

		// SECOND DIGIT MINUTE
		secondDigitMinute(2);
 8001fbe:	2002      	movs	r0, #2
 8001fc0:	f7ff fd3e 	bl	8001a40 <secondDigitMinute>

		// FIRST DIGIT MINUTE
		firstDigitMinute(20);
 8001fc4:	2014      	movs	r0, #20
 8001fc6:	f7ff fd21 	bl	8001a0c <firstDigitMinute>

		// SECOND DIGIT MONTH
		secondDigitMonth(2);
 8001fca:	2002      	movs	r0, #2
 8001fcc:	f7ff fd7e 	bl	8001acc <secondDigitMonth>
		// FIRST DIGIT MONTH
		// NULL
		// SECOND DIGIT DAY
		secondDigitDay(2);
 8001fd0:	2002      	movs	r0, #2
 8001fd2:	f7ff fdc1 	bl	8001b58 <secondDigitDay>
		// FIRST DIGIT DAY
		firstDigitDay(20);
 8001fd6:	2014      	movs	r0, #20
 8001fd8:	f7ff fda4 	bl	8001b24 <firstDigitDay>
		// SECOND DIGIT YEAR
		secondDigitYear(2);
 8001fdc:	2002      	movs	r0, #2
 8001fde:	f7ff fe01 	bl	8001be4 <secondDigitYear>
		// FIRST SECOND YEAR
		firstDigitYear(20);
 8001fe2:	2014      	movs	r0, #20
 8001fe4:	f7ff fde4 	bl	8001bb0 <firstDigitYear>
		break;
 8001fe8:	e15b      	b.n	80022a2 <menu+0x666>

	case IR_CODE_3:
		// COLOR
		colorMenu(GREEN);
 8001fea:	4ba3      	ldr	r3, [pc, #652]	; (8002278 <menu+0x63c>)
 8001fec:	781a      	ldrb	r2, [r3, #0]
 8001fee:	7859      	ldrb	r1, [r3, #1]
 8001ff0:	0209      	lsls	r1, r1, #8
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	789b      	ldrb	r3, [r3, #2]
 8001ff6:	041b      	lsls	r3, r3, #16
 8001ff8:	431a      	orrs	r2, r3
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	f362 0317 	bfi	r3, r2, #0, #24
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff fca9 	bl	8001958 <colorMenu>

		// FUNCTIONS MUST BE IN THIS ORDER

		// SECOND DIGIT_HOUR
		secondDigitHour(3);
 8002006:	2003      	movs	r0, #3
 8002008:	f7ff fcd4 	bl	80019b4 <secondDigitHour>
		// FIRST DIGIT HOUR

		// NULL

		// SECOND DIGIT MINUTE
		secondDigitMinute(3);
 800200c:	2003      	movs	r0, #3
 800200e:	f7ff fd17 	bl	8001a40 <secondDigitMinute>

		// FIRST DIGIT MINUTE
		firstDigitMinute(30);
 8002012:	201e      	movs	r0, #30
 8002014:	f7ff fcfa 	bl	8001a0c <firstDigitMinute>

		// SECOND DIGIT MONTH
		secondDigitMonth(3);
 8002018:	2003      	movs	r0, #3
 800201a:	f7ff fd57 	bl	8001acc <secondDigitMonth>
		// FIRST DIGIT MONTH
		// NULL
		// SECOND DIGIT DAY
		secondDigitDay(3);
 800201e:	2003      	movs	r0, #3
 8002020:	f7ff fd9a 	bl	8001b58 <secondDigitDay>
		// FIRST DIGIT DAY
		firstDigitDay(30);
 8002024:	201e      	movs	r0, #30
 8002026:	f7ff fd7d 	bl	8001b24 <firstDigitDay>
		// SECOND DIGIT YEAR
		secondDigitYear(3);
 800202a:	2003      	movs	r0, #3
 800202c:	f7ff fdda 	bl	8001be4 <secondDigitYear>
		// FIRST SECOND YEAR
		firstDigitYear(30);
 8002030:	201e      	movs	r0, #30
 8002032:	f7ff fdbd 	bl	8001bb0 <firstDigitYear>


		break;
 8002036:	e134      	b.n	80022a2 <menu+0x666>

	case IR_CODE_4:

		//COLOR
		colorMenu(YELLOW);
 8002038:	4b90      	ldr	r3, [pc, #576]	; (800227c <menu+0x640>)
 800203a:	781a      	ldrb	r2, [r3, #0]
 800203c:	7859      	ldrb	r1, [r3, #1]
 800203e:	0209      	lsls	r1, r1, #8
 8002040:	430a      	orrs	r2, r1
 8002042:	789b      	ldrb	r3, [r3, #2]
 8002044:	041b      	lsls	r3, r3, #16
 8002046:	431a      	orrs	r2, r3
 8002048:	2300      	movs	r3, #0
 800204a:	f362 0317 	bfi	r3, r2, #0, #24
 800204e:	4618      	mov	r0, r3
 8002050:	f7ff fc82 	bl	8001958 <colorMenu>

		// FUNCTIONS MUST BE IN THIS ORDER

		// SECOND DIGIT_HOUR
		secondDigitHour(4);
 8002054:	2004      	movs	r0, #4
 8002056:	f7ff fcad 	bl	80019b4 <secondDigitHour>
		// FIRST DIGIT HOUR

		// NULL

		// SECOND DIGIT MINUTE
		secondDigitMinute(4);
 800205a:	2004      	movs	r0, #4
 800205c:	f7ff fcf0 	bl	8001a40 <secondDigitMinute>

		// FIRST DIGIT MINUTE
		firstDigitMinute(40);
 8002060:	2028      	movs	r0, #40	; 0x28
 8002062:	f7ff fcd3 	bl	8001a0c <firstDigitMinute>

		// SECOND DIGIT MONTH
		secondDigitMonth(4);
 8002066:	2004      	movs	r0, #4
 8002068:	f7ff fd30 	bl	8001acc <secondDigitMonth>
		// FIRST DIGIT MONTH
		// NULL
		// SECOND DIGIT DAY
		secondDigitDay(4);
 800206c:	2004      	movs	r0, #4
 800206e:	f7ff fd73 	bl	8001b58 <secondDigitDay>
		// FIRST DIGIT DAY
		// NULL
		// SECOND DIGIT YEAR
		secondDigitYear(4);
 8002072:	2004      	movs	r0, #4
 8002074:	f7ff fdb6 	bl	8001be4 <secondDigitYear>
		// FIRST SECOND YEAR
		firstDigitYear(40);
 8002078:	2028      	movs	r0, #40	; 0x28
 800207a:	f7ff fd99 	bl	8001bb0 <firstDigitYear>

		break;
 800207e:	e110      	b.n	80022a2 <menu+0x666>

	case IR_CODE_5:
		//COLOR
		colorMenu(PINK);
 8002080:	4b7f      	ldr	r3, [pc, #508]	; (8002280 <menu+0x644>)
 8002082:	781a      	ldrb	r2, [r3, #0]
 8002084:	7859      	ldrb	r1, [r3, #1]
 8002086:	0209      	lsls	r1, r1, #8
 8002088:	430a      	orrs	r2, r1
 800208a:	789b      	ldrb	r3, [r3, #2]
 800208c:	041b      	lsls	r3, r3, #16
 800208e:	431a      	orrs	r2, r3
 8002090:	2300      	movs	r3, #0
 8002092:	f362 0317 	bfi	r3, r2, #0, #24
 8002096:	4618      	mov	r0, r3
 8002098:	f7ff fc5e 	bl	8001958 <colorMenu>

		// FUNCTIONS MUST BE IN THIS ORDER

		// SECOND DIGIT_HOUR
		secondDigitHour(5);
 800209c:	2005      	movs	r0, #5
 800209e:	f7ff fc89 	bl	80019b4 <secondDigitHour>
		// FIRST DIGIT HOUR

		// NULL

		// SECOND DIGIT MINUTE
		secondDigitMinute(5);
 80020a2:	2005      	movs	r0, #5
 80020a4:	f7ff fccc 	bl	8001a40 <secondDigitMinute>

		// FIRST DIGIT MINUTE
		firstDigitMinute(50);
 80020a8:	2032      	movs	r0, #50	; 0x32
 80020aa:	f7ff fcaf 	bl	8001a0c <firstDigitMinute>

		// SECOND DIGIT MONTH
		secondDigitMonth(5);
 80020ae:	2005      	movs	r0, #5
 80020b0:	f7ff fd0c 	bl	8001acc <secondDigitMonth>
		// FIRST DIGIT MONTH
		// NULL
		// SECOND DIGIT DAY
		secondDigitDay(5);
 80020b4:	2005      	movs	r0, #5
 80020b6:	f7ff fd4f 	bl	8001b58 <secondDigitDay>
		// FIRST DIGIT DAY
		// NULL
		// SECOND DIGIT YEAR
		secondDigitYear(5);
 80020ba:	2005      	movs	r0, #5
 80020bc:	f7ff fd92 	bl	8001be4 <secondDigitYear>
		// FIRST SECOND YEAR
		firstDigitYear(50);
 80020c0:	2032      	movs	r0, #50	; 0x32
 80020c2:	f7ff fd75 	bl	8001bb0 <firstDigitYear>

		break;
 80020c6:	e0ec      	b.n	80022a2 <menu+0x666>
		//COLOR

		// FUNCTIONS MUST BE IN THIS ORDER

		// SECOND DIGIT_HOUR
		secondDigitHour(6);
 80020c8:	2006      	movs	r0, #6
 80020ca:	f7ff fc73 	bl	80019b4 <secondDigitHour>
		// FIRST DIGIT HOUR

		// NULL

		// SECOND DIGIT MINUTE
		secondDigitMinute(6);
 80020ce:	2006      	movs	r0, #6
 80020d0:	f7ff fcb6 	bl	8001a40 <secondDigitMinute>
		// FIRST DIGIT MINUTE

		// NULL

		// SECOND DIGIT MONTH
		secondDigitMonth(6);
 80020d4:	2006      	movs	r0, #6
 80020d6:	f7ff fcf9 	bl	8001acc <secondDigitMonth>
		// FIRST DIGIT MONTH
		// NULL
		// SECOND DIGIT DAY
		secondDigitDay(6);
 80020da:	2006      	movs	r0, #6
 80020dc:	f7ff fd3c 	bl	8001b58 <secondDigitDay>
		// FIRST DIGIT DAY
		// NULL
		// SECOND DIGIT YEAR
		secondDigitYear(6);
 80020e0:	2006      	movs	r0, #6
 80020e2:	f7ff fd7f 	bl	8001be4 <secondDigitYear>
		// FIRST SECOND YEAR
		firstDigitYear(60);
 80020e6:	203c      	movs	r0, #60	; 0x3c
 80020e8:	f7ff fd62 	bl	8001bb0 <firstDigitYear>

		break;
 80020ec:	e0d9      	b.n	80022a2 <menu+0x666>
		//COLOR

		// FUNCTIONS MUST BE IN THIS ORDER

		// SECOND DIGIT_HOUR
		secondDigitHour(7);
 80020ee:	2007      	movs	r0, #7
 80020f0:	f7ff fc60 	bl	80019b4 <secondDigitHour>
		// FIRST DIGIT HOUR

		// NULL

		// SECOND DIGIT MINUTE
		secondDigitMinute(7);
 80020f4:	2007      	movs	r0, #7
 80020f6:	f7ff fca3 	bl	8001a40 <secondDigitMinute>
		// FIRST DIGIT MINUTE

		// NULL

		// SECOND DIGIT MONTH
		secondDigitMonth(7);
 80020fa:	2007      	movs	r0, #7
 80020fc:	f7ff fce6 	bl	8001acc <secondDigitMonth>
		// FIRST DIGIT MONTH
		// NULL
		// SECOND DIGIT DAY
		secondDigitDay(7);
 8002100:	2007      	movs	r0, #7
 8002102:	f7ff fd29 	bl	8001b58 <secondDigitDay>
		// FIRST DIGIT DAY
		// NULL
		// SECOND DIGIT YEAR
		secondDigitYear(7);
 8002106:	2007      	movs	r0, #7
 8002108:	f7ff fd6c 	bl	8001be4 <secondDigitYear>
		// FIRST SECOND YEAR
		firstDigitYear(70);
 800210c:	2046      	movs	r0, #70	; 0x46
 800210e:	f7ff fd4f 	bl	8001bb0 <firstDigitYear>

		break;
 8002112:	e0c6      	b.n	80022a2 <menu+0x666>
		//COLOR

		// FUNCTIONS MUST BE IN THIS ORDER

		// SECOND DIGIT_HOUR
		secondDigitHour(8);
 8002114:	2008      	movs	r0, #8
 8002116:	f7ff fc4d 	bl	80019b4 <secondDigitHour>
		// FIRST DIGIT HOUR

		// NULL

		// SECOND DIGIT MINUTE
		secondDigitMinute(8);
 800211a:	2008      	movs	r0, #8
 800211c:	f7ff fc90 	bl	8001a40 <secondDigitMinute>
		// FIRST DIGIT MINUTE

		// NULL

		// SECOND DIGIT MONTH
		secondDigitMonth(8);
 8002120:	2008      	movs	r0, #8
 8002122:	f7ff fcd3 	bl	8001acc <secondDigitMonth>
		// FIRST DIGIT MONTH
		// NULL
		// SECOND DIGIT DAY
		secondDigitDay(8);
 8002126:	2008      	movs	r0, #8
 8002128:	f7ff fd16 	bl	8001b58 <secondDigitDay>
		// FIRST DIGIT DAY
		// NULL
		// SECOND DIGIT YEAR
		secondDigitYear(8);
 800212c:	2008      	movs	r0, #8
 800212e:	f7ff fd59 	bl	8001be4 <secondDigitYear>
		// FIRST SECOND YEAR
		firstDigitYear(80);
 8002132:	2050      	movs	r0, #80	; 0x50
 8002134:	f7ff fd3c 	bl	8001bb0 <firstDigitYear>
		break;
 8002138:	e0b3      	b.n	80022a2 <menu+0x666>
		//COLOR

		// FUNCTIONS MUST BE IN THIS ORDER

		// SECOND DIGIT_HOUR
		secondDigitHour(9);
 800213a:	2009      	movs	r0, #9
 800213c:	f7ff fc3a 	bl	80019b4 <secondDigitHour>
		// FIRST DIGIT HOUR

		// NULL

		// SECOND DIGIT MINUTE
		secondDigitMinute(9);
 8002140:	2009      	movs	r0, #9
 8002142:	f7ff fc7d 	bl	8001a40 <secondDigitMinute>
		// FIRST DIGIT MINUTE

		// NULL

		// SECOND DIGIT MONTH
		secondDigitMonth(9);
 8002146:	2009      	movs	r0, #9
 8002148:	f7ff fcc0 	bl	8001acc <secondDigitMonth>
		// FIRST DIGIT MONTH
		// NULL
		// SECOND DIGIT DAY
		secondDigitDay(9);
 800214c:	2009      	movs	r0, #9
 800214e:	f7ff fd03 	bl	8001b58 <secondDigitDay>
		// FIRST DIGIT DAY
		// NULL
		// SECOND DIGIT YEAR
		secondDigitYear(9);
 8002152:	2009      	movs	r0, #9
 8002154:	f7ff fd46 	bl	8001be4 <secondDigitYear>
		// FIRST SECOND YEAR
		firstDigitYear(90);
 8002158:	205a      	movs	r0, #90	; 0x5a
 800215a:	f7ff fd29 	bl	8001bb0 <firstDigitYear>
		break;
 800215e:	e0a0      	b.n	80022a2 <menu+0x666>

		// NULL

		// SECOND DIGIT_HOUR

		if (flagMenu == MENU_TIME_HOUR_SECOND_DIGIT) {
 8002160:	4b48      	ldr	r3, [pc, #288]	; (8002284 <menu+0x648>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2b03      	cmp	r3, #3
 8002166:	d112      	bne.n	800218e <menu+0x552>

			if (isInRangeHours(hoursChange)) {
 8002168:	4b47      	ldr	r3, [pc, #284]	; (8002288 <menu+0x64c>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	4618      	mov	r0, r3
 800216e:	f7ff fb9d 	bl	80018ac <isInRangeHours>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d002      	beq.n	800217e <menu+0x542>
				hoursChange = 0;
 8002178:	4b43      	ldr	r3, [pc, #268]	; (8002288 <menu+0x64c>)
 800217a:	2200      	movs	r2, #0
 800217c:	701a      	strb	r2, [r3, #0]
			}

			setHours(hoursChange);
 800217e:	4b42      	ldr	r3, [pc, #264]	; (8002288 <menu+0x64c>)
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	4618      	mov	r0, r3
 8002184:	f000 ff80 	bl	8003088 <setHours>
			flagMenu = MENU_TIME_LEVEL;
 8002188:	4b3e      	ldr	r3, [pc, #248]	; (8002284 <menu+0x648>)
 800218a:	2201      	movs	r2, #1
 800218c:	601a      	str	r2, [r3, #0]
		}

		// FIRST DIGIT HOUR

		firstDigitHour(0);
 800218e:	2000      	movs	r0, #0
 8002190:	f7ff fbf6 	bl	8001980 <firstDigitHour>

		// SECOND DIGIT MINUTE
		if (flagMenu == MENU_TIME_MINUTE_SECOND_DIGIT) {
 8002194:	4b3b      	ldr	r3, [pc, #236]	; (8002284 <menu+0x648>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2b04      	cmp	r3, #4
 800219a:	d112      	bne.n	80021c2 <menu+0x586>

			if (isInRangeMinute(minutesChange)) {
 800219c:	4b3b      	ldr	r3, [pc, #236]	; (800228c <menu+0x650>)
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff fb94 	bl	80018ce <isInRangeMinute>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d002      	beq.n	80021b2 <menu+0x576>
				minutesChange = 0;
 80021ac:	4b37      	ldr	r3, [pc, #220]	; (800228c <menu+0x650>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	701a      	strb	r2, [r3, #0]
			}
			setMinutes(minutesChange);
 80021b2:	4b36      	ldr	r3, [pc, #216]	; (800228c <menu+0x650>)
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f000 ff38 	bl	800302c <setMinutes>
			flagMenu = MENU_TIME_MINUTE_LEVEL;
 80021bc:	4b31      	ldr	r3, [pc, #196]	; (8002284 <menu+0x648>)
 80021be:	2202      	movs	r2, #2
 80021c0:	601a      	str	r2, [r3, #0]
		}

		// FIRST DIGIT MINUTE

		firstDigitMinute(0);
 80021c2:	2000      	movs	r0, #0
 80021c4:	f7ff fc22 	bl	8001a0c <firstDigitMinute>

		// SECOND DIGIT MONTH

		if (flagMenu == MENU_DATE_MONTH_SECOND_DIGIT) {
 80021c8:	4b2e      	ldr	r3, [pc, #184]	; (8002284 <menu+0x648>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2b06      	cmp	r3, #6
 80021ce:	d112      	bne.n	80021f6 <menu+0x5ba>

			if (isInRangeMonth(monthChange)) {
 80021d0:	4b2f      	ldr	r3, [pc, #188]	; (8002290 <menu+0x654>)
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7ff fb8b 	bl	80018f0 <isInRangeMonth>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d002      	beq.n	80021e6 <menu+0x5aa>
				monthChange = 0;
 80021e0:	4b2b      	ldr	r3, [pc, #172]	; (8002290 <menu+0x654>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	701a      	strb	r2, [r3, #0]
			}

			setMonth(monthChange);
 80021e6:	4b2a      	ldr	r3, [pc, #168]	; (8002290 <menu+0x654>)
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f000 ff7e 	bl	80030ec <setMonth>
			flagMenu = MENU_DATE_LEVEL;
 80021f0:	4b24      	ldr	r3, [pc, #144]	; (8002284 <menu+0x648>)
 80021f2:	2205      	movs	r2, #5
 80021f4:	601a      	str	r2, [r3, #0]
		}

		// FIRST DIGIT MONTH

		firstDigitMonth(0);
 80021f6:	2000      	movs	r0, #0
 80021f8:	f7ff fc4e 	bl	8001a98 <firstDigitMonth>

		// SECOND DIGIT DAY
		if (flagMenu == MENU_DATE_DAY_SECOND_DIGIT) {
 80021fc:	4b21      	ldr	r3, [pc, #132]	; (8002284 <menu+0x648>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2b08      	cmp	r3, #8
 8002202:	d112      	bne.n	800222a <menu+0x5ee>

			if (isInRangeDay(dayChange)) {
 8002204:	4b23      	ldr	r3, [pc, #140]	; (8002294 <menu+0x658>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	4618      	mov	r0, r3
 800220a:	f7ff fb82 	bl	8001912 <isInRangeDay>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d002      	beq.n	800221a <menu+0x5de>
				dayChange = 0;
 8002214:	4b1f      	ldr	r3, [pc, #124]	; (8002294 <menu+0x658>)
 8002216:	2200      	movs	r2, #0
 8002218:	701a      	strb	r2, [r3, #0]
			}
			setDay(dayChange);
 800221a:	4b1e      	ldr	r3, [pc, #120]	; (8002294 <menu+0x658>)
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	4618      	mov	r0, r3
 8002220:	f000 ff9a 	bl	8003158 <setDay>
			flagMenu = MENU_DATE_DAY_FIRST_DIGIT;
 8002224:	4b17      	ldr	r3, [pc, #92]	; (8002284 <menu+0x648>)
 8002226:	2207      	movs	r2, #7
 8002228:	601a      	str	r2, [r3, #0]
		}

		// FIRST DIGIT DAY

		firstDigitDay(0);
 800222a:	2000      	movs	r0, #0
 800222c:	f7ff fc7a 	bl	8001b24 <firstDigitDay>

		// SECOND DIGIT YEAR
		if (flagMenu == MENU_YEAR_FOURTH_DIGIT) {
 8002230:	4b14      	ldr	r3, [pc, #80]	; (8002284 <menu+0x648>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2b0c      	cmp	r3, #12
 8002236:	d112      	bne.n	800225e <menu+0x622>

			if (isInRangeYear(yearChange)) {
 8002238:	4b17      	ldr	r3, [pc, #92]	; (8002298 <menu+0x65c>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff fb79 	bl	8001934 <isInRangeYear>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d002      	beq.n	800224e <menu+0x612>
				yearChange = 0;
 8002248:	4b13      	ldr	r3, [pc, #76]	; (8002298 <menu+0x65c>)
 800224a:	2200      	movs	r2, #0
 800224c:	701a      	strb	r2, [r3, #0]
			}
			setYear(yearChange);
 800224e:	4b12      	ldr	r3, [pc, #72]	; (8002298 <menu+0x65c>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	4618      	mov	r0, r3
 8002254:	f000 ffb2 	bl	80031bc <setYear>
			flagMenu = MENU_YEAR_LEVEL;
 8002258:	4b0a      	ldr	r3, [pc, #40]	; (8002284 <menu+0x648>)
 800225a:	220b      	movs	r2, #11
 800225c:	601a      	str	r2, [r3, #0]
		}

		//FIRST DIGIT YEAR

		firstDigitYear(0);
 800225e:	2000      	movs	r0, #0
 8002260:	f7ff fca6 	bl	8001bb0 <firstDigitYear>


		break;
 8002264:	e01d      	b.n	80022a2 <menu+0x666>
		break;
 8002266:	bf00      	nop
 8002268:	e01b      	b.n	80022a2 <menu+0x666>
		break;
 800226a:	bf00      	nop
 800226c:	e019      	b.n	80022a2 <menu+0x666>
 800226e:	bf00      	nop
 8002270:	200000b0 	.word	0x200000b0
 8002274:	200000a8 	.word	0x200000a8
 8002278:	200000ac 	.word	0x200000ac
 800227c:	200000b4 	.word	0x200000b4
 8002280:	200000b8 	.word	0x200000b8
 8002284:	200002d8 	.word	0x200002d8
 8002288:	200002cd 	.word	0x200002cd
 800228c:	200002cc 	.word	0x200002cc
 8002290:	200002cf 	.word	0x200002cf
 8002294:	200002ce 	.word	0x200002ce
 8002298:	200002d0 	.word	0x200002d0
		break;
 800229c:	bf00      	nop
 800229e:	e000      	b.n	80022a2 <menu+0x666>
		break;
 80022a0:	bf00      	nop

	}

}
 80022a2:	bf00      	nop
 80022a4:	3720      	adds	r7, #32
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop

080022ac <set_baudrate>:


// Przerobienie UART na modyfikowanie predkosci nadawania w "locie"

static void set_baudrate(uint32_t baudrate)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  huart3.Instance = USART3;
 80022b4:	4b16      	ldr	r3, [pc, #88]	; (8002310 <set_baudrate+0x64>)
 80022b6:	4a17      	ldr	r2, [pc, #92]	; (8002314 <set_baudrate+0x68>)
 80022b8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = baudrate;
 80022ba:	4a15      	ldr	r2, [pc, #84]	; (8002310 <set_baudrate+0x64>)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6053      	str	r3, [r2, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80022c0:	4b13      	ldr	r3, [pc, #76]	; (8002310 <set_baudrate+0x64>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80022c6:	4b12      	ldr	r3, [pc, #72]	; (8002310 <set_baudrate+0x64>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80022cc:	4b10      	ldr	r3, [pc, #64]	; (8002310 <set_baudrate+0x64>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80022d2:	4b0f      	ldr	r3, [pc, #60]	; (8002310 <set_baudrate+0x64>)
 80022d4:	220c      	movs	r2, #12
 80022d6:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022d8:	4b0d      	ldr	r3, [pc, #52]	; (8002310 <set_baudrate+0x64>)
 80022da:	2200      	movs	r2, #0
 80022dc:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80022de:	4b0c      	ldr	r3, [pc, #48]	; (8002310 <set_baudrate+0x64>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022e4:	4b0a      	ldr	r3, [pc, #40]	; (8002310 <set_baudrate+0x64>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 80022ea:	4b09      	ldr	r3, [pc, #36]	; (8002310 <set_baudrate+0x64>)
 80022ec:	2210      	movs	r2, #16
 80022ee:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80022f0:	4b07      	ldr	r3, [pc, #28]	; (8002310 <set_baudrate+0x64>)
 80022f2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80022f6:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80022f8:	4805      	ldr	r0, [pc, #20]	; (8002310 <set_baudrate+0x64>)
 80022fa:	f007 fcb7 	bl	8009c6c <HAL_UART_Init>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <set_baudrate+0x5c>
  {
    Error_Handler();
 8002304:	f7ff fac0 	bl	8001888 <Error_Handler>
  }
}
 8002308:	bf00      	nop
 800230a:	3708      	adds	r7, #8
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	20000a88 	.word	0x20000a88
 8002314:	40004800 	.word	0x40004800

08002318 <write_bit>:

static void write_bit(int value)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  if (value) {
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d00a      	beq.n	800233c <write_bit+0x24>
      uint8_t data_out = 0xff;
 8002326:	23ff      	movs	r3, #255	; 0xff
 8002328:	73fb      	strb	r3, [r7, #15]
    HAL_UART_Transmit(&huart3, &data_out, 1, HAL_MAX_DELAY);
 800232a:	f107 010f 	add.w	r1, r7, #15
 800232e:	f04f 33ff 	mov.w	r3, #4294967295
 8002332:	2201      	movs	r2, #1
 8002334:	4808      	ldr	r0, [pc, #32]	; (8002358 <write_bit+0x40>)
 8002336:	f007 fce7 	bl	8009d08 <HAL_UART_Transmit>
  } else {
      uint8_t data_out = 0x0;
    HAL_UART_Transmit(&huart3, &data_out, 1, HAL_MAX_DELAY);
  }
}
 800233a:	e009      	b.n	8002350 <write_bit+0x38>
      uint8_t data_out = 0x0;
 800233c:	2300      	movs	r3, #0
 800233e:	73bb      	strb	r3, [r7, #14]
    HAL_UART_Transmit(&huart3, &data_out, 1, HAL_MAX_DELAY);
 8002340:	f107 010e 	add.w	r1, r7, #14
 8002344:	f04f 33ff 	mov.w	r3, #4294967295
 8002348:	2201      	movs	r2, #1
 800234a:	4803      	ldr	r0, [pc, #12]	; (8002358 <write_bit+0x40>)
 800234c:	f007 fcdc 	bl	8009d08 <HAL_UART_Transmit>
}
 8002350:	bf00      	nop
 8002352:	3710      	adds	r7, #16
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	20000a88 	.word	0x20000a88

0800235c <read_bit>:

static int read_bit(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
  uint8_t data_out = 0xFF;
 8002362:	23ff      	movs	r3, #255	; 0xff
 8002364:	71fb      	strb	r3, [r7, #7]
  uint8_t data_in = 0;
 8002366:	2300      	movs	r3, #0
 8002368:	71bb      	strb	r3, [r7, #6]
  HAL_UART_Transmit(&huart3, &data_out, 1, HAL_MAX_DELAY);
 800236a:	1df9      	adds	r1, r7, #7
 800236c:	f04f 33ff 	mov.w	r3, #4294967295
 8002370:	2201      	movs	r2, #1
 8002372:	4808      	ldr	r0, [pc, #32]	; (8002394 <read_bit+0x38>)
 8002374:	f007 fcc8 	bl	8009d08 <HAL_UART_Transmit>
  HAL_UART_Receive(&huart3, &data_in, 1, HAL_MAX_DELAY);
 8002378:	1db9      	adds	r1, r7, #6
 800237a:	f04f 33ff 	mov.w	r3, #4294967295
 800237e:	2201      	movs	r2, #1
 8002380:	4804      	ldr	r0, [pc, #16]	; (8002394 <read_bit+0x38>)
 8002382:	f007 fd55 	bl	8009e30 <HAL_UART_Receive>

  return data_in & 0x01;
 8002386:	79bb      	ldrb	r3, [r7, #6]
 8002388:	f003 0301 	and.w	r3, r3, #1
}
 800238c:	4618      	mov	r0, r3
 800238e:	3708      	adds	r7, #8
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	20000a88 	.word	0x20000a88

08002398 <byte_crc>:


static uint8_t byte_crc(uint8_t crc, uint8_t byte)
  {
 8002398:	b480      	push	{r7}
 800239a:	b085      	sub	sp, #20
 800239c:	af00      	add	r7, sp, #0
 800239e:	4603      	mov	r3, r0
 80023a0:	460a      	mov	r2, r1
 80023a2:	71fb      	strb	r3, [r7, #7]
 80023a4:	4613      	mov	r3, r2
 80023a6:	71bb      	strb	r3, [r7, #6]
    int i;
    for (i = 0; i < 8; i++) {
 80023a8:	2300      	movs	r3, #0
 80023aa:	60fb      	str	r3, [r7, #12]
 80023ac:	e016      	b.n	80023dc <byte_crc+0x44>
      uint8_t b = crc ^ byte;
 80023ae:	79fa      	ldrb	r2, [r7, #7]
 80023b0:	79bb      	ldrb	r3, [r7, #6]
 80023b2:	4053      	eors	r3, r2
 80023b4:	72fb      	strb	r3, [r7, #11]
      crc >>= 1;
 80023b6:	79fb      	ldrb	r3, [r7, #7]
 80023b8:	085b      	lsrs	r3, r3, #1
 80023ba:	71fb      	strb	r3, [r7, #7]
      if (b & 0x01)
 80023bc:	7afb      	ldrb	r3, [r7, #11]
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d004      	beq.n	80023d0 <byte_crc+0x38>
        crc ^= 0x8c;
 80023c6:	79fb      	ldrb	r3, [r7, #7]
 80023c8:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 80023cc:	43db      	mvns	r3, r3
 80023ce:	71fb      	strb	r3, [r7, #7]
      byte >>= 1;
 80023d0:	79bb      	ldrb	r3, [r7, #6]
 80023d2:	085b      	lsrs	r3, r3, #1
 80023d4:	71bb      	strb	r3, [r7, #6]
    for (i = 0; i < 8; i++) {
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	3301      	adds	r3, #1
 80023da:	60fb      	str	r3, [r7, #12]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2b07      	cmp	r3, #7
 80023e0:	dde5      	ble.n	80023ae <byte_crc+0x16>
    }
    return crc;
 80023e2:	79fb      	ldrb	r3, [r7, #7]
  }
 80023e4:	4618      	mov	r0, r3
 80023e6:	3714      	adds	r7, #20
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <wire_reset>:




HAL_StatusTypeDef wire_reset(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
  uint8_t data_out = 0xF0;
 80023f6:	23f0      	movs	r3, #240	; 0xf0
 80023f8:	71fb      	strb	r3, [r7, #7]
  uint8_t data_in = 0;
 80023fa:	2300      	movs	r3, #0
 80023fc:	71bb      	strb	r3, [r7, #6]

  set_baudrate(9600);
 80023fe:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8002402:	f7ff ff53 	bl	80022ac <set_baudrate>
  HAL_UART_Transmit(&huart3, &data_out, 1, HAL_MAX_DELAY);
 8002406:	1df9      	adds	r1, r7, #7
 8002408:	f04f 33ff 	mov.w	r3, #4294967295
 800240c:	2201      	movs	r2, #1
 800240e:	480c      	ldr	r0, [pc, #48]	; (8002440 <wire_reset+0x50>)
 8002410:	f007 fc7a 	bl	8009d08 <HAL_UART_Transmit>
  HAL_UART_Receive(&huart3, &data_in, 1, HAL_MAX_DELAY);
 8002414:	1db9      	adds	r1, r7, #6
 8002416:	f04f 33ff 	mov.w	r3, #4294967295
 800241a:	2201      	movs	r2, #1
 800241c:	4808      	ldr	r0, [pc, #32]	; (8002440 <wire_reset+0x50>)
 800241e:	f007 fd07 	bl	8009e30 <HAL_UART_Receive>
  set_baudrate(115200);
 8002422:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8002426:	f7ff ff41 	bl	80022ac <set_baudrate>

  if (data_in != 0xF0)
 800242a:	79bb      	ldrb	r3, [r7, #6]
 800242c:	2bf0      	cmp	r3, #240	; 0xf0
 800242e:	d001      	beq.n	8002434 <wire_reset+0x44>
    return HAL_OK;
 8002430:	2300      	movs	r3, #0
 8002432:	e000      	b.n	8002436 <wire_reset+0x46>
  else
    return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
}
 8002436:	4618      	mov	r0, r3
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	20000a88 	.word	0x20000a88

08002444 <wire_write>:


void wire_write(uint8_t byte){
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	4603      	mov	r3, r0
 800244c:	71fb      	strb	r3, [r7, #7]
	int i;
	for(i=0;i<8;i++){
 800244e:	2300      	movs	r3, #0
 8002450:	60fb      	str	r3, [r7, #12]
 8002452:	e00b      	b.n	800246c <wire_write+0x28>
		write_bit(byte & 0x01);
 8002454:	79fb      	ldrb	r3, [r7, #7]
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	4618      	mov	r0, r3
 800245c:	f7ff ff5c 	bl	8002318 <write_bit>
		byte>>=1;
 8002460:	79fb      	ldrb	r3, [r7, #7]
 8002462:	085b      	lsrs	r3, r3, #1
 8002464:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++){
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	3301      	adds	r3, #1
 800246a:	60fb      	str	r3, [r7, #12]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2b07      	cmp	r3, #7
 8002470:	ddf0      	ble.n	8002454 <wire_write+0x10>
	}
}
 8002472:	bf00      	nop
 8002474:	bf00      	nop
 8002476:	3710      	adds	r7, #16
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <wire_read>:


uint8_t wire_read(void){
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
	uint8_t value=0;
 8002482:	2300      	movs	r3, #0
 8002484:	71fb      	strb	r3, [r7, #7]
	int i;
	for(i=0;i<8;i++){
 8002486:	2300      	movs	r3, #0
 8002488:	603b      	str	r3, [r7, #0]
 800248a:	e00e      	b.n	80024aa <wire_read+0x2e>
		value>>=1;
 800248c:	79fb      	ldrb	r3, [r7, #7]
 800248e:	085b      	lsrs	r3, r3, #1
 8002490:	71fb      	strb	r3, [r7, #7]
		if(read_bit()){
 8002492:	f7ff ff63 	bl	800235c <read_bit>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d003      	beq.n	80024a4 <wire_read+0x28>
			value|=0x80;
 800249c:	79fb      	ldrb	r3, [r7, #7]
 800249e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80024a2:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++){
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	3301      	adds	r3, #1
 80024a8:	603b      	str	r3, [r7, #0]
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	2b07      	cmp	r3, #7
 80024ae:	dded      	ble.n	800248c <wire_read+0x10>
		}
	}
	return value;
 80024b0:	79fb      	ldrb	r3, [r7, #7]
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <wire_crc>:


uint8_t wire_crc(const uint8_t* data, int len)
  {
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b084      	sub	sp, #16
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
 80024c2:	6039      	str	r1, [r7, #0]
    int i;
      uint8_t crc = 0;
 80024c4:	2300      	movs	r3, #0
 80024c6:	72fb      	strb	r3, [r7, #11]

      for (i = 0; i < len; i++)
 80024c8:	2300      	movs	r3, #0
 80024ca:	60fb      	str	r3, [r7, #12]
 80024cc:	e00d      	b.n	80024ea <wire_crc+0x30>
        crc = byte_crc(crc, data[i]);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	4413      	add	r3, r2
 80024d4:	781a      	ldrb	r2, [r3, #0]
 80024d6:	7afb      	ldrb	r3, [r7, #11]
 80024d8:	4611      	mov	r1, r2
 80024da:	4618      	mov	r0, r3
 80024dc:	f7ff ff5c 	bl	8002398 <byte_crc>
 80024e0:	4603      	mov	r3, r0
 80024e2:	72fb      	strb	r3, [r7, #11]
      for (i = 0; i < len; i++)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	3301      	adds	r3, #1
 80024e8:	60fb      	str	r3, [r7, #12]
 80024ea:	68fa      	ldr	r2, [r7, #12]
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	dbed      	blt.n	80024ce <wire_crc+0x14>

      return crc;
 80024f2:	7afb      	ldrb	r3, [r7, #11]
  }
 80024f4:	4618      	mov	r0, r3
 80024f6:	3710      	adds	r7, #16
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b098      	sub	sp, #96	; 0x60
 8002500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002502:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002506:	2200      	movs	r2, #0
 8002508:	601a      	str	r2, [r3, #0]
 800250a:	605a      	str	r2, [r3, #4]
 800250c:	609a      	str	r2, [r3, #8]
 800250e:	60da      	str	r2, [r3, #12]
 8002510:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002512:	2300      	movs	r3, #0
 8002514:	64bb      	str	r3, [r7, #72]	; 0x48
  RTC_AlarmTypeDef sAlarm = {0};
 8002516:	f107 031c 	add.w	r3, r7, #28
 800251a:	222c      	movs	r2, #44	; 0x2c
 800251c:	2100      	movs	r1, #0
 800251e:	4618      	mov	r0, r3
 8002520:	f008 f9ea 	bl	800a8f8 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002524:	4b7b      	ldr	r3, [pc, #492]	; (8002714 <MX_RTC_Init+0x218>)
 8002526:	4a7c      	ldr	r2, [pc, #496]	; (8002718 <MX_RTC_Init+0x21c>)
 8002528:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800252a:	4b7a      	ldr	r3, [pc, #488]	; (8002714 <MX_RTC_Init+0x218>)
 800252c:	2200      	movs	r2, #0
 800252e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002530:	4b78      	ldr	r3, [pc, #480]	; (8002714 <MX_RTC_Init+0x218>)
 8002532:	227f      	movs	r2, #127	; 0x7f
 8002534:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002536:	4b77      	ldr	r3, [pc, #476]	; (8002714 <MX_RTC_Init+0x218>)
 8002538:	22ff      	movs	r2, #255	; 0xff
 800253a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800253c:	4b75      	ldr	r3, [pc, #468]	; (8002714 <MX_RTC_Init+0x218>)
 800253e:	2200      	movs	r2, #0
 8002540:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002542:	4b74      	ldr	r3, [pc, #464]	; (8002714 <MX_RTC_Init+0x218>)
 8002544:	2200      	movs	r2, #0
 8002546:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002548:	4b72      	ldr	r3, [pc, #456]	; (8002714 <MX_RTC_Init+0x218>)
 800254a:	2200      	movs	r2, #0
 800254c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800254e:	4b71      	ldr	r3, [pc, #452]	; (8002714 <MX_RTC_Init+0x218>)
 8002550:	2200      	movs	r2, #0
 8002552:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002554:	486f      	ldr	r0, [pc, #444]	; (8002714 <MX_RTC_Init+0x218>)
 8002556:	f004 fd61 	bl	800701c <HAL_RTC_Init>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <MX_RTC_Init+0x68>
  {
    Error_Handler();
 8002560:	f7ff f992 	bl	8001888 <Error_Handler>

  /* USER CODE BEGIN Check_RTC_BKUP */

	// After reset- download backup:

  	RTC_TimeTypeDef time = { 0 };
 8002564:	f107 0308 	add.w	r3, r7, #8
 8002568:	2200      	movs	r2, #0
 800256a:	601a      	str	r2, [r3, #0]
 800256c:	605a      	str	r2, [r3, #4]
 800256e:	609a      	str	r2, [r3, #8]
 8002570:	60da      	str	r2, [r3, #12]
 8002572:	611a      	str	r2, [r3, #16]
  	RTC_DateTypeDef date = { 0 };
 8002574:	2300      	movs	r3, #0
 8002576:	607b      	str	r3, [r7, #4]

  	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8002578:	f107 0308 	add.w	r3, r7, #8
 800257c:	2200      	movs	r2, #0
 800257e:	4619      	mov	r1, r3
 8002580:	4864      	ldr	r0, [pc, #400]	; (8002714 <MX_RTC_Init+0x218>)
 8002582:	f004 fe63 	bl	800724c <HAL_RTC_GetTime>
  	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8002586:	1d3b      	adds	r3, r7, #4
 8002588:	2200      	movs	r2, #0
 800258a:	4619      	mov	r1, r3
 800258c:	4861      	ldr	r0, [pc, #388]	; (8002714 <MX_RTC_Init+0x218>)
 800258e:	f004 ff40 	bl	8007412 <HAL_RTC_GetDate>

  	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR5, ((date.Month << 8) | (date.Year)));
 8002592:	797b      	ldrb	r3, [r7, #5]
 8002594:	021b      	lsls	r3, r3, #8
 8002596:	79fa      	ldrb	r2, [r7, #7]
 8002598:	4313      	orrs	r3, r2
 800259a:	461a      	mov	r2, r3
 800259c:	2105      	movs	r1, #5
 800259e:	485d      	ldr	r0, [pc, #372]	; (8002714 <MX_RTC_Init+0x218>)
 80025a0:	f005 f9e2 	bl	8007968 <HAL_RTCEx_BKUPWrite>
  	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR6, date.Date);
 80025a4:	79bb      	ldrb	r3, [r7, #6]
 80025a6:	461a      	mov	r2, r3
 80025a8:	2106      	movs	r1, #6
 80025aa:	485a      	ldr	r0, [pc, #360]	; (8002714 <MX_RTC_Init+0x218>)
 80025ac:	f005 f9dc 	bl	8007968 <HAL_RTCEx_BKUPWrite>
  	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR7, ((time.Hours << 8) | (time.Minutes)));
 80025b0:	7a3b      	ldrb	r3, [r7, #8]
 80025b2:	021b      	lsls	r3, r3, #8
 80025b4:	7a7a      	ldrb	r2, [r7, #9]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	461a      	mov	r2, r3
 80025ba:	2107      	movs	r1, #7
 80025bc:	4855      	ldr	r0, [pc, #340]	; (8002714 <MX_RTC_Init+0x218>)
 80025be:	f005 f9d3 	bl	8007968 <HAL_RTCEx_BKUPWrite>
  	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR8, time.Seconds);
 80025c2:	7abb      	ldrb	r3, [r7, #10]
 80025c4:	461a      	mov	r2, r3
 80025c6:	2108      	movs	r1, #8
 80025c8:	4852      	ldr	r0, [pc, #328]	; (8002714 <MX_RTC_Init+0x218>)
 80025ca:	f005 f9cd 	bl	8007968 <HAL_RTCEx_BKUPWrite>


	sDate.Month = (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR5) >> 8);
 80025ce:	2105      	movs	r1, #5
 80025d0:	4850      	ldr	r0, [pc, #320]	; (8002714 <MX_RTC_Init+0x218>)
 80025d2:	f005 f9e2 	bl	800799a <HAL_RTCEx_BKUPRead>
 80025d6:	4603      	mov	r3, r0
 80025d8:	0a1b      	lsrs	r3, r3, #8
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	sDate.Year = (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR5));
 80025e0:	2105      	movs	r1, #5
 80025e2:	484c      	ldr	r0, [pc, #304]	; (8002714 <MX_RTC_Init+0x218>)
 80025e4:	f005 f9d9 	bl	800799a <HAL_RTCEx_BKUPRead>
 80025e8:	4603      	mov	r3, r0
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	sDate.Date = (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR6));
 80025f0:	2106      	movs	r1, #6
 80025f2:	4848      	ldr	r0, [pc, #288]	; (8002714 <MX_RTC_Init+0x218>)
 80025f4:	f005 f9d1 	bl	800799a <HAL_RTCEx_BKUPRead>
 80025f8:	4603      	mov	r3, r0
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a

	sTime.Hours =(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR7) >> 8);
 8002600:	2107      	movs	r1, #7
 8002602:	4844      	ldr	r0, [pc, #272]	; (8002714 <MX_RTC_Init+0x218>)
 8002604:	f005 f9c9 	bl	800799a <HAL_RTCEx_BKUPRead>
 8002608:	4603      	mov	r3, r0
 800260a:	0a1b      	lsrs	r3, r3, #8
 800260c:	b2db      	uxtb	r3, r3
 800260e:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	sTime.Minutes = (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR7));
 8002612:	2107      	movs	r1, #7
 8002614:	483f      	ldr	r0, [pc, #252]	; (8002714 <MX_RTC_Init+0x218>)
 8002616:	f005 f9c0 	bl	800799a <HAL_RTCEx_BKUPRead>
 800261a:	4603      	mov	r3, r0
 800261c:	b2db      	uxtb	r3, r3
 800261e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	sTime.Seconds = (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR8));
 8002622:	2108      	movs	r1, #8
 8002624:	483b      	ldr	r0, [pc, #236]	; (8002714 <MX_RTC_Init+0x218>)
 8002626:	f005 f9b8 	bl	800799a <HAL_RTCEx_BKUPRead>
 800262a:	4603      	mov	r3, r0
 800262c:	b2db      	uxtb	r3, r3
 800262e:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002632:	2300      	movs	r3, #0
 8002634:	65bb      	str	r3, [r7, #88]	; 0x58
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002636:	2300      	movs	r3, #0
 8002638:	65fb      	str	r3, [r7, #92]	; 0x5c



	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) {
 800263a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800263e:	2200      	movs	r2, #0
 8002640:	4619      	mov	r1, r3
 8002642:	4834      	ldr	r0, [pc, #208]	; (8002714 <MX_RTC_Init+0x218>)
 8002644:	f004 fd65 	bl	8007112 <HAL_RTC_SetTime>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <MX_RTC_Init+0x156>
		Error_Handler();
 800264e:	f7ff f91b 	bl	8001888 <Error_Handler>
	}

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) {
 8002652:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002656:	2200      	movs	r2, #0
 8002658:	4619      	mov	r1, r3
 800265a:	482e      	ldr	r0, [pc, #184]	; (8002714 <MX_RTC_Init+0x218>)
 800265c:	f004 fe52 	bl	8007304 <HAL_RTC_SetDate>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <MX_RTC_Init+0x16e>
		Error_Handler();
 8002666:	f7ff f90f 	bl	8001888 <Error_Handler>
	}

	/** Enable the Alarm A
	 */
	sAlarm.AlarmTime.Hours = (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR11) >> 8);
 800266a:	210b      	movs	r1, #11
 800266c:	4829      	ldr	r0, [pc, #164]	; (8002714 <MX_RTC_Init+0x218>)
 800266e:	f005 f994 	bl	800799a <HAL_RTCEx_BKUPRead>
 8002672:	4603      	mov	r3, r0
 8002674:	0a1b      	lsrs	r3, r3, #8
 8002676:	b2db      	uxtb	r3, r3
 8002678:	773b      	strb	r3, [r7, #28]
	sAlarm.AlarmTime.Minutes = (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR11));
 800267a:	210b      	movs	r1, #11
 800267c:	4825      	ldr	r0, [pc, #148]	; (8002714 <MX_RTC_Init+0x218>)
 800267e:	f005 f98c 	bl	800799a <HAL_RTCEx_BKUPRead>
 8002682:	4603      	mov	r3, r0
 8002684:	b2db      	uxtb	r3, r3
 8002686:	777b      	strb	r3, [r7, #29]
	wakeUpHour=(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR11) >> 8);
 8002688:	210b      	movs	r1, #11
 800268a:	4822      	ldr	r0, [pc, #136]	; (8002714 <MX_RTC_Init+0x218>)
 800268c:	f005 f985 	bl	800799a <HAL_RTCEx_BKUPRead>
 8002690:	4603      	mov	r3, r0
 8002692:	0a1b      	lsrs	r3, r3, #8
 8002694:	b2da      	uxtb	r2, r3
 8002696:	4b21      	ldr	r3, [pc, #132]	; (800271c <MX_RTC_Init+0x220>)
 8002698:	701a      	strb	r2, [r3, #0]
	wakeUpMinute=(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR11));
 800269a:	210b      	movs	r1, #11
 800269c:	481d      	ldr	r0, [pc, #116]	; (8002714 <MX_RTC_Init+0x218>)
 800269e:	f005 f97c 	bl	800799a <HAL_RTCEx_BKUPRead>
 80026a2:	4603      	mov	r3, r0
 80026a4:	b2da      	uxtb	r2, r3
 80026a6:	4b1e      	ldr	r3, [pc, #120]	; (8002720 <MX_RTC_Init+0x224>)
 80026a8:	701a      	strb	r2, [r3, #0]
	sleepHour=(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR12) >> 8);
 80026aa:	210c      	movs	r1, #12
 80026ac:	4819      	ldr	r0, [pc, #100]	; (8002714 <MX_RTC_Init+0x218>)
 80026ae:	f005 f974 	bl	800799a <HAL_RTCEx_BKUPRead>
 80026b2:	4603      	mov	r3, r0
 80026b4:	0a1b      	lsrs	r3, r3, #8
 80026b6:	b2da      	uxtb	r2, r3
 80026b8:	4b1a      	ldr	r3, [pc, #104]	; (8002724 <MX_RTC_Init+0x228>)
 80026ba:	701a      	strb	r2, [r3, #0]
	sleepMinute=(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR12));
 80026bc:	210c      	movs	r1, #12
 80026be:	4815      	ldr	r0, [pc, #84]	; (8002714 <MX_RTC_Init+0x218>)
 80026c0:	f005 f96b 	bl	800799a <HAL_RTCEx_BKUPRead>
 80026c4:	4603      	mov	r3, r0
 80026c6:	b2da      	uxtb	r2, r3
 80026c8:	4b17      	ldr	r3, [pc, #92]	; (8002728 <MX_RTC_Init+0x22c>)
 80026ca:	701a      	strb	r2, [r3, #0]
	sAlarm.AlarmTime.Seconds = 0;
 80026cc:	2300      	movs	r3, #0
 80026ce:	77bb      	strb	r3, [r7, #30]
	sAlarm.AlarmTime.SubSeconds = 0;
 80026d0:	2300      	movs	r3, #0
 80026d2:	623b      	str	r3, [r7, #32]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80026d4:	2300      	movs	r3, #0
 80026d6:	62bb      	str	r3, [r7, #40]	; 0x28
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80026d8:	2300      	movs	r3, #0
 80026da:	62fb      	str	r3, [r7, #44]	; 0x2c
	sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;
 80026dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80026e0:	633b      	str	r3, [r7, #48]	; 0x30
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80026e2:	2300      	movs	r3, #0
 80026e4:	63bb      	str	r3, [r7, #56]	; 0x38
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80026e6:	2300      	movs	r3, #0
 80026e8:	63fb      	str	r3, [r7, #60]	; 0x3c
	sAlarm.AlarmDateWeekDay = 1;
 80026ea:	2301      	movs	r3, #1
 80026ec:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	sAlarm.Alarm = RTC_ALARM_A;
 80026f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026f4:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK) {
 80026f6:	f107 031c 	add.w	r3, r7, #28
 80026fa:	2200      	movs	r2, #0
 80026fc:	4619      	mov	r1, r3
 80026fe:	4805      	ldr	r0, [pc, #20]	; (8002714 <MX_RTC_Init+0x218>)
 8002700:	f004 fed4 	bl	80074ac <HAL_RTC_SetAlarm_IT>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <MX_RTC_Init+0x212>
		Error_Handler();
 800270a:	f7ff f8bd 	bl	8001888 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800270e:	3760      	adds	r7, #96	; 0x60
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	20000934 	.word	0x20000934
 8002718:	40002800 	.word	0x40002800
 800271c:	20000931 	.word	0x20000931
 8002720:	2000092f 	.word	0x2000092f
 8002724:	20000932 	.word	0x20000932
 8002728:	20000930 	.word	0x20000930

0800272c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b0a4      	sub	sp, #144	; 0x90
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002734:	f107 0308 	add.w	r3, r7, #8
 8002738:	2288      	movs	r2, #136	; 0x88
 800273a:	2100      	movs	r1, #0
 800273c:	4618      	mov	r0, r3
 800273e:	f008 f8db 	bl	800a8f8 <memset>
  if(rtcHandle->Instance==RTC)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a10      	ldr	r2, [pc, #64]	; (8002788 <HAL_RTC_MspInit+0x5c>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d118      	bne.n	800277e <HAL_RTC_MspInit+0x52>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800274c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002750:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002752:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002756:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800275a:	f107 0308 	add.w	r3, r7, #8
 800275e:	4618      	mov	r0, r3
 8002760:	f003 ff90 	bl	8006684 <HAL_RCCEx_PeriphCLKConfig>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800276a:	f7ff f88d 	bl	8001888 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800276e:	4b07      	ldr	r3, [pc, #28]	; (800278c <HAL_RTC_MspInit+0x60>)
 8002770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002774:	4a05      	ldr	r2, [pc, #20]	; (800278c <HAL_RTC_MspInit+0x60>)
 8002776:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800277a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800277e:	bf00      	nop
 8002780:	3790      	adds	r7, #144	; 0x90
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	40002800 	.word	0x40002800
 800278c:	40021000 	.word	0x40021000

08002790 <TurnOnStanbyMode>:
}

/* USER CODE BEGIN 1 */


void TurnOnStanbyMode(uint8_t hour, uint8_t minute, uint8_t second) {
 8002790:	b580      	push	{r7, lr}
 8002792:	b094      	sub	sp, #80	; 0x50
 8002794:	af00      	add	r7, sp, #0
 8002796:	4603      	mov	r3, r0
 8002798:	71fb      	strb	r3, [r7, #7]
 800279a:	460b      	mov	r3, r1
 800279c:	71bb      	strb	r3, [r7, #6]
 800279e:	4613      	mov	r3, r2
 80027a0:	717b      	strb	r3, [r7, #5]
	RTC_TimeTypeDef time = { 0 };
 80027a2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80027a6:	2200      	movs	r2, #0
 80027a8:	601a      	str	r2, [r3, #0]
 80027aa:	605a      	str	r2, [r3, #4]
 80027ac:	609a      	str	r2, [r3, #8]
 80027ae:	60da      	str	r2, [r3, #12]
 80027b0:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef date = { 0 };
 80027b2:	2300      	movs	r3, #0
 80027b4:	63bb      	str	r3, [r7, #56]	; 0x38
	RTC_AlarmTypeDef sAlarm = { 0 };
 80027b6:	f107 030c 	add.w	r3, r7, #12
 80027ba:	222c      	movs	r2, #44	; 0x2c
 80027bc:	2100      	movs	r1, #0
 80027be:	4618      	mov	r0, r3
 80027c0:	f008 f89a 	bl	800a8f8 <memset>

	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 80027c4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80027c8:	2200      	movs	r2, #0
 80027ca:	4619      	mov	r1, r3
 80027cc:	4859      	ldr	r0, [pc, #356]	; (8002934 <TurnOnStanbyMode+0x1a4>)
 80027ce:	f004 fd3d 	bl	800724c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 80027d2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80027d6:	2200      	movs	r2, #0
 80027d8:	4619      	mov	r1, r3
 80027da:	4856      	ldr	r0, [pc, #344]	; (8002934 <TurnOnStanbyMode+0x1a4>)
 80027dc:	f004 fe19 	bl	8007412 <HAL_RTC_GetDate>

	if (time.Hours == hour && time.Minutes == minute
 80027e0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80027e4:	79fa      	ldrb	r2, [r7, #7]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d14a      	bne.n	8002880 <TurnOnStanbyMode+0xf0>
 80027ea:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80027ee:	79ba      	ldrb	r2, [r7, #6]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d145      	bne.n	8002880 <TurnOnStanbyMode+0xf0>
			&& time.Seconds == second) {
 80027f4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80027f8:	797a      	ldrb	r2, [r7, #5]
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d140      	bne.n	8002880 <TurnOnStanbyMode+0xf0>
		sAlarm.AlarmTime.Hours = wakeUpHour;
 80027fe:	4b4e      	ldr	r3, [pc, #312]	; (8002938 <TurnOnStanbyMode+0x1a8>)
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	733b      	strb	r3, [r7, #12]
		sAlarm.AlarmTime.Minutes = wakeUpMinute;
 8002804:	4b4d      	ldr	r3, [pc, #308]	; (800293c <TurnOnStanbyMode+0x1ac>)
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	737b      	strb	r3, [r7, #13]
		sAlarm.AlarmTime.Seconds = 0;
 800280a:	2300      	movs	r3, #0
 800280c:	73bb      	strb	r3, [r7, #14]
		sAlarm.AlarmTime.SubSeconds = 0;
 800280e:	2300      	movs	r3, #0
 8002810:	613b      	str	r3, [r7, #16]
		sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002812:	2300      	movs	r3, #0
 8002814:	61bb      	str	r3, [r7, #24]
		sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002816:	2300      	movs	r3, #0
 8002818:	61fb      	str	r3, [r7, #28]
		sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;
 800281a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800281e:	623b      	str	r3, [r7, #32]
		sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002820:	2300      	movs	r3, #0
 8002822:	62bb      	str	r3, [r7, #40]	; 0x28
		sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002824:	2300      	movs	r3, #0
 8002826:	62fb      	str	r3, [r7, #44]	; 0x2c
		sAlarm.AlarmDateWeekDay = 1;
 8002828:	2301      	movs	r3, #1
 800282a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
		sAlarm.Alarm = RTC_ALARM_A;
 800282e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002832:	637b      	str	r3, [r7, #52]	; 0x34
		if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK) {
 8002834:	f107 030c 	add.w	r3, r7, #12
 8002838:	2200      	movs	r2, #0
 800283a:	4619      	mov	r1, r3
 800283c:	483d      	ldr	r0, [pc, #244]	; (8002934 <TurnOnStanbyMode+0x1a4>)
 800283e:	f004 fe35 	bl	80074ac <HAL_RTC_SetAlarm_IT>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <TurnOnStanbyMode+0xbc>
			Error_Handler();
 8002848:	f7ff f81e 	bl	8001888 <Error_Handler>
		}

		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR11,
				((wakeUpHour << 8) | (wakeUpMinute)));
 800284c:	4b3a      	ldr	r3, [pc, #232]	; (8002938 <TurnOnStanbyMode+0x1a8>)
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	021b      	lsls	r3, r3, #8
 8002852:	4a3a      	ldr	r2, [pc, #232]	; (800293c <TurnOnStanbyMode+0x1ac>)
 8002854:	7812      	ldrb	r2, [r2, #0]
 8002856:	4313      	orrs	r3, r2
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR11,
 8002858:	461a      	mov	r2, r3
 800285a:	210b      	movs	r1, #11
 800285c:	4835      	ldr	r0, [pc, #212]	; (8002934 <TurnOnStanbyMode+0x1a4>)
 800285e:	f005 f883 	bl	8007968 <HAL_RTCEx_BKUPWrite>
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR12,
						((sleepHour << 8) | (sleepMinute)));
 8002862:	4b37      	ldr	r3, [pc, #220]	; (8002940 <TurnOnStanbyMode+0x1b0>)
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	021b      	lsls	r3, r3, #8
 8002868:	4a36      	ldr	r2, [pc, #216]	; (8002944 <TurnOnStanbyMode+0x1b4>)
 800286a:	7812      	ldrb	r2, [r2, #0]
 800286c:	4313      	orrs	r3, r2
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR12,
 800286e:	461a      	mov	r2, r3
 8002870:	210c      	movs	r1, #12
 8002872:	4830      	ldr	r0, [pc, #192]	; (8002934 <TurnOnStanbyMode+0x1a4>)
 8002874:	f005 f878 	bl	8007968 <HAL_RTCEx_BKUPWrite>
		displayStop();
 8002878:	f000 fdc4 	bl	8003404 <displayStop>
		HAL_PWR_EnterSTANDBYMode();
 800287c:	f003 f896 	bl	80059ac <HAL_PWR_EnterSTANDBYMode>
	}

	if (date.WeekDay == RTC_WEEKDAY_SATURDAY
 8002880:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8002884:	2b06      	cmp	r3, #6
 8002886:	d003      	beq.n	8002890 <TurnOnStanbyMode+0x100>
			|| date.WeekDay == RTC_WEEKDAY_SUNDAY) {
 8002888:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800288c:	2b07      	cmp	r3, #7
 800288e:	d14c      	bne.n	800292a <TurnOnStanbyMode+0x19a>
		sAlarm.AlarmTime.Hours = wakeUpHour;
 8002890:	4b29      	ldr	r3, [pc, #164]	; (8002938 <TurnOnStanbyMode+0x1a8>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	733b      	strb	r3, [r7, #12]
		sAlarm.AlarmTime.Minutes = wakeUpMinute;
 8002896:	4b29      	ldr	r3, [pc, #164]	; (800293c <TurnOnStanbyMode+0x1ac>)
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	737b      	strb	r3, [r7, #13]
		sAlarm.AlarmTime.Seconds = 0;
 800289c:	2300      	movs	r3, #0
 800289e:	73bb      	strb	r3, [r7, #14]
		sAlarm.AlarmTime.SubSeconds = 0;
 80028a0:	2300      	movs	r3, #0
 80028a2:	613b      	str	r3, [r7, #16]
		sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80028a4:	2300      	movs	r3, #0
 80028a6:	61bb      	str	r3, [r7, #24]
		sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80028a8:	2300      	movs	r3, #0
 80028aa:	61fb      	str	r3, [r7, #28]
		sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;
 80028ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80028b0:	623b      	str	r3, [r7, #32]
		sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80028b2:	2300      	movs	r3, #0
 80028b4:	62bb      	str	r3, [r7, #40]	; 0x28
		sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80028b6:	2300      	movs	r3, #0
 80028b8:	62fb      	str	r3, [r7, #44]	; 0x2c
		sAlarm.AlarmDateWeekDay = 1;
 80028ba:	2301      	movs	r3, #1
 80028bc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
		sAlarm.Alarm = RTC_ALARM_A;
 80028c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028c4:	637b      	str	r3, [r7, #52]	; 0x34
		if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK) {
 80028c6:	f107 030c 	add.w	r3, r7, #12
 80028ca:	2200      	movs	r2, #0
 80028cc:	4619      	mov	r1, r3
 80028ce:	4819      	ldr	r0, [pc, #100]	; (8002934 <TurnOnStanbyMode+0x1a4>)
 80028d0:	f004 fdec 	bl	80074ac <HAL_RTC_SetAlarm_IT>
 80028d4:	4603      	mov	r3, r0
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <TurnOnStanbyMode+0x14e>
			Error_Handler();
 80028da:	f7fe ffd5 	bl	8001888 <Error_Handler>
		}
		if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK) {
 80028de:	f107 030c 	add.w	r3, r7, #12
 80028e2:	2200      	movs	r2, #0
 80028e4:	4619      	mov	r1, r3
 80028e6:	4813      	ldr	r0, [pc, #76]	; (8002934 <TurnOnStanbyMode+0x1a4>)
 80028e8:	f004 fde0 	bl	80074ac <HAL_RTC_SetAlarm_IT>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d001      	beq.n	80028f6 <TurnOnStanbyMode+0x166>
			Error_Handler();
 80028f2:	f7fe ffc9 	bl	8001888 <Error_Handler>
		}

		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR11,
				((wakeUpHour << 8) | (wakeUpMinute)));
 80028f6:	4b10      	ldr	r3, [pc, #64]	; (8002938 <TurnOnStanbyMode+0x1a8>)
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	021b      	lsls	r3, r3, #8
 80028fc:	4a0f      	ldr	r2, [pc, #60]	; (800293c <TurnOnStanbyMode+0x1ac>)
 80028fe:	7812      	ldrb	r2, [r2, #0]
 8002900:	4313      	orrs	r3, r2
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR11,
 8002902:	461a      	mov	r2, r3
 8002904:	210b      	movs	r1, #11
 8002906:	480b      	ldr	r0, [pc, #44]	; (8002934 <TurnOnStanbyMode+0x1a4>)
 8002908:	f005 f82e 	bl	8007968 <HAL_RTCEx_BKUPWrite>
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR12,
							((sleepHour << 8) | (sleepMinute)));
 800290c:	4b0c      	ldr	r3, [pc, #48]	; (8002940 <TurnOnStanbyMode+0x1b0>)
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	021b      	lsls	r3, r3, #8
 8002912:	4a0c      	ldr	r2, [pc, #48]	; (8002944 <TurnOnStanbyMode+0x1b4>)
 8002914:	7812      	ldrb	r2, [r2, #0]
 8002916:	4313      	orrs	r3, r2
		HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR12,
 8002918:	461a      	mov	r2, r3
 800291a:	210c      	movs	r1, #12
 800291c:	4805      	ldr	r0, [pc, #20]	; (8002934 <TurnOnStanbyMode+0x1a4>)
 800291e:	f005 f823 	bl	8007968 <HAL_RTCEx_BKUPWrite>
		displayStop();
 8002922:	f000 fd6f 	bl	8003404 <displayStop>
		HAL_PWR_EnterSTANDBYMode();
 8002926:	f003 f841 	bl	80059ac <HAL_PWR_EnterSTANDBYMode>





}
 800292a:	bf00      	nop
 800292c:	3750      	adds	r7, #80	; 0x50
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	20000934 	.word	0x20000934
 8002938:	20000931 	.word	0x20000931
 800293c:	2000092f 	.word	0x2000092f
 8002940:	20000932 	.word	0x20000932
 8002944:	20000930 	.word	0x20000930

08002948 <changeColor>:
 *  FUNCTIONS
 *
 */

// COLORS
void changeColor(struct colorRgb newColor) {
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
	displayStop();
 8002950:	f000 fd58 	bl	8003404 <displayStop>
	actualColor=newColor;
 8002954:	4b0f      	ldr	r3, [pc, #60]	; (8002994 <changeColor+0x4c>)
 8002956:	461a      	mov	r2, r3
 8002958:	1d3b      	adds	r3, r7, #4
 800295a:	8819      	ldrh	r1, [r3, #0]
 800295c:	789b      	ldrb	r3, [r3, #2]
 800295e:	8011      	strh	r1, [r2, #0]
 8002960:	7093      	strb	r3, [r2, #2]
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR2, actualColor.blue);
 8002962:	4b0c      	ldr	r3, [pc, #48]	; (8002994 <changeColor+0x4c>)
 8002964:	785b      	ldrb	r3, [r3, #1]
 8002966:	461a      	mov	r2, r3
 8002968:	2102      	movs	r1, #2
 800296a:	480b      	ldr	r0, [pc, #44]	; (8002998 <changeColor+0x50>)
 800296c:	f004 fffc 	bl	8007968 <HAL_RTCEx_BKUPWrite>
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR3, actualColor.red);
 8002970:	4b08      	ldr	r3, [pc, #32]	; (8002994 <changeColor+0x4c>)
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	461a      	mov	r2, r3
 8002976:	2103      	movs	r1, #3
 8002978:	4807      	ldr	r0, [pc, #28]	; (8002998 <changeColor+0x50>)
 800297a:	f004 fff5 	bl	8007968 <HAL_RTCEx_BKUPWrite>
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR4, actualColor.green);
 800297e:	4b05      	ldr	r3, [pc, #20]	; (8002994 <changeColor+0x4c>)
 8002980:	789b      	ldrb	r3, [r3, #2]
 8002982:	461a      	mov	r2, r3
 8002984:	2104      	movs	r1, #4
 8002986:	4804      	ldr	r0, [pc, #16]	; (8002998 <changeColor+0x50>)
 8002988:	f004 ffee 	bl	8007968 <HAL_RTCEx_BKUPWrite>
}
 800298c:	bf00      	nop
 800298e:	3708      	adds	r7, #8
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	20000958 	.word	0x20000958
 8002998:	20000934 	.word	0x20000934

0800299c <mixColor>:

void mixColor() {
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
	uint8_t tempColor;

	tempColor = actualColor.blue;
 80029a2:	4b0a      	ldr	r3, [pc, #40]	; (80029cc <mixColor+0x30>)
 80029a4:	785b      	ldrb	r3, [r3, #1]
 80029a6:	71fb      	strb	r3, [r7, #7]

	actualColor.blue = actualColor.red;
 80029a8:	4b08      	ldr	r3, [pc, #32]	; (80029cc <mixColor+0x30>)
 80029aa:	781a      	ldrb	r2, [r3, #0]
 80029ac:	4b07      	ldr	r3, [pc, #28]	; (80029cc <mixColor+0x30>)
 80029ae:	705a      	strb	r2, [r3, #1]
	actualColor.red = actualColor.green;
 80029b0:	4b06      	ldr	r3, [pc, #24]	; (80029cc <mixColor+0x30>)
 80029b2:	789a      	ldrb	r2, [r3, #2]
 80029b4:	4b05      	ldr	r3, [pc, #20]	; (80029cc <mixColor+0x30>)
 80029b6:	701a      	strb	r2, [r3, #0]
	actualColor.green = tempColor;
 80029b8:	4a04      	ldr	r2, [pc, #16]	; (80029cc <mixColor+0x30>)
 80029ba:	79fb      	ldrb	r3, [r7, #7]
 80029bc:	7093      	strb	r3, [r2, #2]
}
 80029be:	bf00      	nop
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	20000958 	.word	0x20000958

080029d0 <backToColorinMemory>:


void backToColorinMemory() {
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
	actualColor.blue=HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR2);
 80029d4:	2102      	movs	r1, #2
 80029d6:	4819      	ldr	r0, [pc, #100]	; (8002a3c <backToColorinMemory+0x6c>)
 80029d8:	f004 ffdf 	bl	800799a <HAL_RTCEx_BKUPRead>
 80029dc:	4603      	mov	r3, r0
 80029de:	b2da      	uxtb	r2, r3
 80029e0:	4b17      	ldr	r3, [pc, #92]	; (8002a40 <backToColorinMemory+0x70>)
 80029e2:	705a      	strb	r2, [r3, #1]
	actualColor.red=HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR3);
 80029e4:	2103      	movs	r1, #3
 80029e6:	4815      	ldr	r0, [pc, #84]	; (8002a3c <backToColorinMemory+0x6c>)
 80029e8:	f004 ffd7 	bl	800799a <HAL_RTCEx_BKUPRead>
 80029ec:	4603      	mov	r3, r0
 80029ee:	b2da      	uxtb	r2, r3
 80029f0:	4b13      	ldr	r3, [pc, #76]	; (8002a40 <backToColorinMemory+0x70>)
 80029f2:	701a      	strb	r2, [r3, #0]
	actualColor.green=HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR4);
 80029f4:	2104      	movs	r1, #4
 80029f6:	4811      	ldr	r0, [pc, #68]	; (8002a3c <backToColorinMemory+0x6c>)
 80029f8:	f004 ffcf 	bl	800799a <HAL_RTCEx_BKUPRead>
 80029fc:	4603      	mov	r3, r0
 80029fe:	b2da      	uxtb	r2, r3
 8002a00:	4b0f      	ldr	r3, [pc, #60]	; (8002a40 <backToColorinMemory+0x70>)
 8002a02:	709a      	strb	r2, [r3, #2]

	if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR2)==0 && HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR3)==0 && HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR4)==0){
 8002a04:	2102      	movs	r1, #2
 8002a06:	480d      	ldr	r0, [pc, #52]	; (8002a3c <backToColorinMemory+0x6c>)
 8002a08:	f004 ffc7 	bl	800799a <HAL_RTCEx_BKUPRead>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d111      	bne.n	8002a36 <backToColorinMemory+0x66>
 8002a12:	2103      	movs	r1, #3
 8002a14:	4809      	ldr	r0, [pc, #36]	; (8002a3c <backToColorinMemory+0x6c>)
 8002a16:	f004 ffc0 	bl	800799a <HAL_RTCEx_BKUPRead>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d10a      	bne.n	8002a36 <backToColorinMemory+0x66>
 8002a20:	2104      	movs	r1, #4
 8002a22:	4806      	ldr	r0, [pc, #24]	; (8002a3c <backToColorinMemory+0x6c>)
 8002a24:	f004 ffb9 	bl	800799a <HAL_RTCEx_BKUPRead>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d103      	bne.n	8002a36 <backToColorinMemory+0x66>
		changeColor(RED);
 8002a2e:	4b05      	ldr	r3, [pc, #20]	; (8002a44 <backToColorinMemory+0x74>)
 8002a30:	6818      	ldr	r0, [r3, #0]
 8002a32:	f7ff ff89 	bl	8002948 <changeColor>
	}

}
 8002a36:	bf00      	nop
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	20000934 	.word	0x20000934
 8002a40:	20000958 	.word	0x20000958
 8002a44:	200000a8 	.word	0x200000a8

08002a48 <numberToMatrix>:

// AUXILIARY FUNCTIONS:
uint8_t* numberToMatrix(int number) {
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
	switch (number) {
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2b09      	cmp	r3, #9
 8002a54:	d82a      	bhi.n	8002aac <numberToMatrix+0x64>
 8002a56:	a201      	add	r2, pc, #4	; (adr r2, 8002a5c <numberToMatrix+0x14>)
 8002a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a5c:	08002a85 	.word	0x08002a85
 8002a60:	08002a89 	.word	0x08002a89
 8002a64:	08002a8d 	.word	0x08002a8d
 8002a68:	08002a91 	.word	0x08002a91
 8002a6c:	08002a95 	.word	0x08002a95
 8002a70:	08002a99 	.word	0x08002a99
 8002a74:	08002a9d 	.word	0x08002a9d
 8002a78:	08002aa1 	.word	0x08002aa1
 8002a7c:	08002aa5 	.word	0x08002aa5
 8002a80:	08002aa9 	.word	0x08002aa9
	case 0:
		return zero;
 8002a84:	4b0d      	ldr	r3, [pc, #52]	; (8002abc <numberToMatrix+0x74>)
 8002a86:	e012      	b.n	8002aae <numberToMatrix+0x66>
		break;
	case 1:
		return one;
 8002a88:	4b0d      	ldr	r3, [pc, #52]	; (8002ac0 <numberToMatrix+0x78>)
 8002a8a:	e010      	b.n	8002aae <numberToMatrix+0x66>
		break;
	case 2:
		return two;
 8002a8c:	4b0d      	ldr	r3, [pc, #52]	; (8002ac4 <numberToMatrix+0x7c>)
 8002a8e:	e00e      	b.n	8002aae <numberToMatrix+0x66>
		break;
	case 3:
		return three;
 8002a90:	4b0d      	ldr	r3, [pc, #52]	; (8002ac8 <numberToMatrix+0x80>)
 8002a92:	e00c      	b.n	8002aae <numberToMatrix+0x66>
		break;
	case 4:
		return four;
 8002a94:	4b0d      	ldr	r3, [pc, #52]	; (8002acc <numberToMatrix+0x84>)
 8002a96:	e00a      	b.n	8002aae <numberToMatrix+0x66>
		break;
	case 5:
		return five;
 8002a98:	4b0d      	ldr	r3, [pc, #52]	; (8002ad0 <numberToMatrix+0x88>)
 8002a9a:	e008      	b.n	8002aae <numberToMatrix+0x66>
		break;
	case 6:
		return six;
 8002a9c:	4b0d      	ldr	r3, [pc, #52]	; (8002ad4 <numberToMatrix+0x8c>)
 8002a9e:	e006      	b.n	8002aae <numberToMatrix+0x66>
		break;
	case 7:
		return seven;
 8002aa0:	4b0d      	ldr	r3, [pc, #52]	; (8002ad8 <numberToMatrix+0x90>)
 8002aa2:	e004      	b.n	8002aae <numberToMatrix+0x66>
		break;
	case 8:
		return eight;
 8002aa4:	4b0d      	ldr	r3, [pc, #52]	; (8002adc <numberToMatrix+0x94>)
 8002aa6:	e002      	b.n	8002aae <numberToMatrix+0x66>
		break;
	case 9:
		return nine;
 8002aa8:	4b0d      	ldr	r3, [pc, #52]	; (8002ae0 <numberToMatrix+0x98>)
 8002aaa:	e000      	b.n	8002aae <numberToMatrix+0x66>
		break;
	default:
		return 0;
 8002aac:	2300      	movs	r3, #0
	}

}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	370c      	adds	r7, #12
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	20000030 	.word	0x20000030
 8002ac0:	2000003c 	.word	0x2000003c
 8002ac4:	20000040 	.word	0x20000040
 8002ac8:	2000004c 	.word	0x2000004c
 8002acc:	20000058 	.word	0x20000058
 8002ad0:	20000060 	.word	0x20000060
 8002ad4:	2000006c 	.word	0x2000006c
 8002ad8:	20000078 	.word	0x20000078
 8002adc:	20000080 	.word	0x20000080
 8002ae0:	20000090 	.word	0x20000090

08002ae4 <destroy>:

struct manyNumber destroy(uint8_t numberToDestroy) {
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	4603      	mov	r3, r0
 8002aec:	71fb      	strb	r3, [r7, #7]

	struct manyNumber temp;

	temp.firstNumber = numberToDestroy / 10;
 8002aee:	79fb      	ldrb	r3, [r7, #7]
 8002af0:	4a10      	ldr	r2, [pc, #64]	; (8002b34 <destroy+0x50>)
 8002af2:	fba2 2303 	umull	r2, r3, r2, r3
 8002af6:	08db      	lsrs	r3, r3, #3
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	723b      	strb	r3, [r7, #8]
	temp.secondNumber = numberToDestroy % 10;
 8002afc:	79fa      	ldrb	r2, [r7, #7]
 8002afe:	4b0d      	ldr	r3, [pc, #52]	; (8002b34 <destroy+0x50>)
 8002b00:	fba3 1302 	umull	r1, r3, r3, r2
 8002b04:	08d9      	lsrs	r1, r3, #3
 8002b06:	460b      	mov	r3, r1
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	440b      	add	r3, r1
 8002b0c:	005b      	lsls	r3, r3, #1
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	727b      	strb	r3, [r7, #9]
	return temp;
 8002b14:	893b      	ldrh	r3, [r7, #8]
 8002b16:	81bb      	strh	r3, [r7, #12]
 8002b18:	2300      	movs	r3, #0
 8002b1a:	7b3a      	ldrb	r2, [r7, #12]
 8002b1c:	f362 0307 	bfi	r3, r2, #0, #8
 8002b20:	7b7a      	ldrb	r2, [r7, #13]
 8002b22:	f362 230f 	bfi	r3, r2, #8, #8
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3714      	adds	r7, #20
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	cccccccd 	.word	0xcccccccd

08002b38 <destoryCelcius>:

struct manyNumberCelcius destoryCelcius() {
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b086      	sub	sp, #24
 8002b3c:	af00      	add	r7, sp, #0
	struct manyNumberCelcius temp;
	float measureTemperature = ds18b20_get_temp(NULL);
 8002b3e:	2000      	movs	r0, #0
 8002b40:	f7fe fb5e 	bl	8001200 <ds18b20_get_temp>
 8002b44:	ed87 0a05 	vstr	s0, [r7, #20]
	int tempTotalValueTemperature = (int) ds18b20_get_temp(NULL);
 8002b48:	2000      	movs	r0, #0
 8002b4a:	f7fe fb59 	bl	8001200 <ds18b20_get_temp>
 8002b4e:	eef0 7a40 	vmov.f32	s15, s0
 8002b52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b56:	ee17 3a90 	vmov	r3, s15
 8002b5a:	613b      	str	r3, [r7, #16]
	float valueAfterPointTemperature;


	temp.firstNumber = tempTotalValueTemperature / 10;
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	4a2d      	ldr	r2, [pc, #180]	; (8002c14 <destoryCelcius+0xdc>)
 8002b60:	fb82 1203 	smull	r1, r2, r2, r3
 8002b64:	1092      	asrs	r2, r2, #2
 8002b66:	17db      	asrs	r3, r3, #31
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	713b      	strb	r3, [r7, #4]
	temp.secondNumber = tempTotalValueTemperature % 10;
 8002b6e:	693a      	ldr	r2, [r7, #16]
 8002b70:	4b28      	ldr	r3, [pc, #160]	; (8002c14 <destoryCelcius+0xdc>)
 8002b72:	fb83 1302 	smull	r1, r3, r3, r2
 8002b76:	1099      	asrs	r1, r3, #2
 8002b78:	17d3      	asrs	r3, r2, #31
 8002b7a:	1ac9      	subs	r1, r1, r3
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	440b      	add	r3, r1
 8002b82:	005b      	lsls	r3, r3, #1
 8002b84:	1ad1      	subs	r1, r2, r3
 8002b86:	b2cb      	uxtb	r3, r1
 8002b88:	717b      	strb	r3, [r7, #5]
	valueAfterPointTemperature = measureTemperature - tempTotalValueTemperature;
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	ee07 3a90 	vmov	s15, r3
 8002b90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b94:	ed97 7a05 	vldr	s14, [r7, #20]
 8002b98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b9c:	edc7 7a03 	vstr	s15, [r7, #12]
	valueAfterPointTemperature = valueAfterPointTemperature * 10;
 8002ba0:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ba4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002ba8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bac:	edc7 7a03 	vstr	s15, [r7, #12]
	tempTotalValueTemperature = (int) valueAfterPointTemperature % 10;
 8002bb0:	edd7 7a03 	vldr	s15, [r7, #12]
 8002bb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002bb8:	ee17 2a90 	vmov	r2, s15
 8002bbc:	4b15      	ldr	r3, [pc, #84]	; (8002c14 <destoryCelcius+0xdc>)
 8002bbe:	fb83 1302 	smull	r1, r3, r3, r2
 8002bc2:	1099      	asrs	r1, r3, #2
 8002bc4:	17d3      	asrs	r3, r2, #31
 8002bc6:	1ac9      	subs	r1, r1, r3
 8002bc8:	460b      	mov	r3, r1
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	440b      	add	r3, r1
 8002bce:	005b      	lsls	r3, r3, #1
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	613b      	str	r3, [r7, #16]
	
	
	/*
	 * ----------------------------------------------> ROUNDING
	 */
	if (tempTotalValueTemperature < 5) {
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	2b04      	cmp	r3, #4
 8002bd8:	dc02      	bgt.n	8002be0 <destoryCelcius+0xa8>
		temp.numberAfterPoint = 0;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	71bb      	strb	r3, [r7, #6]
 8002bde:	e001      	b.n	8002be4 <destoryCelcius+0xac>
	} else {
		temp.numberAfterPoint = 5;
 8002be0:	2305      	movs	r3, #5
 8002be2:	71bb      	strb	r3, [r7, #6]
	}

	return temp;
 8002be4:	f107 0308 	add.w	r3, r7, #8
 8002be8:	1d3a      	adds	r2, r7, #4
 8002bea:	6812      	ldr	r2, [r2, #0]
 8002bec:	4611      	mov	r1, r2
 8002bee:	8019      	strh	r1, [r3, #0]
 8002bf0:	3302      	adds	r3, #2
 8002bf2:	0c12      	lsrs	r2, r2, #16
 8002bf4:	701a      	strb	r2, [r3, #0]
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	7a3a      	ldrb	r2, [r7, #8]
 8002bfa:	f362 0307 	bfi	r3, r2, #0, #8
 8002bfe:	7a7a      	ldrb	r2, [r7, #9]
 8002c00:	f362 230f 	bfi	r3, r2, #8, #8
 8002c04:	7aba      	ldrb	r2, [r7, #10]
 8002c06:	f362 4317 	bfi	r3, r2, #16, #8
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3718      	adds	r7, #24
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	66666667 	.word	0x66666667

08002c18 <firstSegment>:

// SEGMETNS
void firstSegment(uint8_t number[]) {
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
	uint8_t x = 0;
 8002c20:	2300      	movs	r3, #0
 8002c22:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i <= 13; i++) {
 8002c24:	2300      	movs	r3, #0
 8002c26:	60bb      	str	r3, [r7, #8]
 8002c28:	e01d      	b.n	8002c66 <firstSegment+0x4e>

		if (number[x] == i) {
 8002c2a:	7bfb      	ldrb	r3, [r7, #15]
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	4413      	add	r3, r2
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	461a      	mov	r2, r3
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d10c      	bne.n	8002c54 <firstSegment+0x3c>
			ws2811_set_color(i, actualColor.red, actualColor.green,
 8002c3a:	68b8      	ldr	r0, [r7, #8]
 8002c3c:	4b0e      	ldr	r3, [pc, #56]	; (8002c78 <firstSegment+0x60>)
 8002c3e:	7819      	ldrb	r1, [r3, #0]
 8002c40:	4b0d      	ldr	r3, [pc, #52]	; (8002c78 <firstSegment+0x60>)
 8002c42:	789a      	ldrb	r2, [r3, #2]
 8002c44:	4b0c      	ldr	r3, [pc, #48]	; (8002c78 <firstSegment+0x60>)
 8002c46:	785b      	ldrb	r3, [r3, #1]
 8002c48:	f001 f94c 	bl	8003ee4 <ws2811_set_color>
					actualColor.blue);
			x++;
 8002c4c:	7bfb      	ldrb	r3, [r7, #15]
 8002c4e:	3301      	adds	r3, #1
 8002c50:	73fb      	strb	r3, [r7, #15]
 8002c52:	e005      	b.n	8002c60 <firstSegment+0x48>
		} else {
			ws2811_set_color(i, 0, 0, 0);
 8002c54:	68b8      	ldr	r0, [r7, #8]
 8002c56:	2300      	movs	r3, #0
 8002c58:	2200      	movs	r2, #0
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	f001 f942 	bl	8003ee4 <ws2811_set_color>
	for (int i = 0; i <= 13; i++) {
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	3301      	adds	r3, #1
 8002c64:	60bb      	str	r3, [r7, #8]
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	2b0d      	cmp	r3, #13
 8002c6a:	ddde      	ble.n	8002c2a <firstSegment+0x12>
		}
	}
}
 8002c6c:	bf00      	nop
 8002c6e:	bf00      	nop
 8002c70:	3710      	adds	r7, #16
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	20000958 	.word	0x20000958

08002c7c <secondSegment>:

void secondSegment(uint8_t number[]) {
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
	uint8_t x = 0;
 8002c84:	2300      	movs	r3, #0
 8002c86:	73fb      	strb	r3, [r7, #15]
	for (int i = 14; i <= 27; i++) {
 8002c88:	230e      	movs	r3, #14
 8002c8a:	60bb      	str	r3, [r7, #8]
 8002c8c:	e01e      	b.n	8002ccc <secondSegment+0x50>

		if (number[x] == i - 14) {
 8002c8e:	7bfb      	ldrb	r3, [r7, #15]
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	4413      	add	r3, r2
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	461a      	mov	r2, r3
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	3b0e      	subs	r3, #14
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d10c      	bne.n	8002cba <secondSegment+0x3e>
			ws2811_set_color(i, actualColor.red, actualColor.green,
 8002ca0:	68b8      	ldr	r0, [r7, #8]
 8002ca2:	4b0e      	ldr	r3, [pc, #56]	; (8002cdc <secondSegment+0x60>)
 8002ca4:	7819      	ldrb	r1, [r3, #0]
 8002ca6:	4b0d      	ldr	r3, [pc, #52]	; (8002cdc <secondSegment+0x60>)
 8002ca8:	789a      	ldrb	r2, [r3, #2]
 8002caa:	4b0c      	ldr	r3, [pc, #48]	; (8002cdc <secondSegment+0x60>)
 8002cac:	785b      	ldrb	r3, [r3, #1]
 8002cae:	f001 f919 	bl	8003ee4 <ws2811_set_color>
					actualColor.blue);
			x++;
 8002cb2:	7bfb      	ldrb	r3, [r7, #15]
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	73fb      	strb	r3, [r7, #15]
 8002cb8:	e005      	b.n	8002cc6 <secondSegment+0x4a>
		} else {
			ws2811_set_color(i, 0, 0, 0);
 8002cba:	68b8      	ldr	r0, [r7, #8]
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	f001 f90f 	bl	8003ee4 <ws2811_set_color>
	for (int i = 14; i <= 27; i++) {
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	3301      	adds	r3, #1
 8002cca:	60bb      	str	r3, [r7, #8]
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	2b1b      	cmp	r3, #27
 8002cd0:	dddd      	ble.n	8002c8e <secondSegment+0x12>
		}
	}
}
 8002cd2:	bf00      	nop
 8002cd4:	bf00      	nop
 8002cd6:	3710      	adds	r7, #16
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	20000958 	.word	0x20000958

08002ce0 <thirdSegment>:

void thirdSegment(uint8_t number[]) {
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
	uint8_t x = 0;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	73fb      	strb	r3, [r7, #15]
	for (int i = 30; i <= 43; i++) {
 8002cec:	231e      	movs	r3, #30
 8002cee:	60bb      	str	r3, [r7, #8]
 8002cf0:	e01e      	b.n	8002d30 <thirdSegment+0x50>

		if (number[x] == i - 30) {
 8002cf2:	7bfb      	ldrb	r3, [r7, #15]
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	3b1e      	subs	r3, #30
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d10c      	bne.n	8002d1e <thirdSegment+0x3e>
			ws2811_set_color(i, actualColor.red, actualColor.green,
 8002d04:	68b8      	ldr	r0, [r7, #8]
 8002d06:	4b0e      	ldr	r3, [pc, #56]	; (8002d40 <thirdSegment+0x60>)
 8002d08:	7819      	ldrb	r1, [r3, #0]
 8002d0a:	4b0d      	ldr	r3, [pc, #52]	; (8002d40 <thirdSegment+0x60>)
 8002d0c:	789a      	ldrb	r2, [r3, #2]
 8002d0e:	4b0c      	ldr	r3, [pc, #48]	; (8002d40 <thirdSegment+0x60>)
 8002d10:	785b      	ldrb	r3, [r3, #1]
 8002d12:	f001 f8e7 	bl	8003ee4 <ws2811_set_color>
					actualColor.blue);
			x++;
 8002d16:	7bfb      	ldrb	r3, [r7, #15]
 8002d18:	3301      	adds	r3, #1
 8002d1a:	73fb      	strb	r3, [r7, #15]
 8002d1c:	e005      	b.n	8002d2a <thirdSegment+0x4a>
		} else {
			ws2811_set_color(i, 0, 0, 0);
 8002d1e:	68b8      	ldr	r0, [r7, #8]
 8002d20:	2300      	movs	r3, #0
 8002d22:	2200      	movs	r2, #0
 8002d24:	2100      	movs	r1, #0
 8002d26:	f001 f8dd 	bl	8003ee4 <ws2811_set_color>
	for (int i = 30; i <= 43; i++) {
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	60bb      	str	r3, [r7, #8]
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	2b2b      	cmp	r3, #43	; 0x2b
 8002d34:	dddd      	ble.n	8002cf2 <thirdSegment+0x12>
		}
	}
}
 8002d36:	bf00      	nop
 8002d38:	bf00      	nop
 8002d3a:	3710      	adds	r7, #16
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	20000958 	.word	0x20000958

08002d44 <fourthSegment>:

void fourthSegment(uint8_t number[]) {
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
	uint8_t x = 0;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	73fb      	strb	r3, [r7, #15]
	for (int i = 44; i <= 57; i++) {
 8002d50:	232c      	movs	r3, #44	; 0x2c
 8002d52:	60bb      	str	r3, [r7, #8]
 8002d54:	e01e      	b.n	8002d94 <fourthSegment+0x50>

		if (number[x] == i - 44) {
 8002d56:	7bfb      	ldrb	r3, [r7, #15]
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	461a      	mov	r2, r3
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	3b2c      	subs	r3, #44	; 0x2c
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d10c      	bne.n	8002d82 <fourthSegment+0x3e>
			ws2811_set_color(i, actualColor.red, actualColor.green,
 8002d68:	68b8      	ldr	r0, [r7, #8]
 8002d6a:	4b0e      	ldr	r3, [pc, #56]	; (8002da4 <fourthSegment+0x60>)
 8002d6c:	7819      	ldrb	r1, [r3, #0]
 8002d6e:	4b0d      	ldr	r3, [pc, #52]	; (8002da4 <fourthSegment+0x60>)
 8002d70:	789a      	ldrb	r2, [r3, #2]
 8002d72:	4b0c      	ldr	r3, [pc, #48]	; (8002da4 <fourthSegment+0x60>)
 8002d74:	785b      	ldrb	r3, [r3, #1]
 8002d76:	f001 f8b5 	bl	8003ee4 <ws2811_set_color>
					actualColor.blue);
			x++;
 8002d7a:	7bfb      	ldrb	r3, [r7, #15]
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	73fb      	strb	r3, [r7, #15]
 8002d80:	e005      	b.n	8002d8e <fourthSegment+0x4a>
		} else {
			ws2811_set_color(i, 0, 0, 0);
 8002d82:	68b8      	ldr	r0, [r7, #8]
 8002d84:	2300      	movs	r3, #0
 8002d86:	2200      	movs	r2, #0
 8002d88:	2100      	movs	r1, #0
 8002d8a:	f001 f8ab 	bl	8003ee4 <ws2811_set_color>
	for (int i = 44; i <= 57; i++) {
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	3301      	adds	r3, #1
 8002d92:	60bb      	str	r3, [r7, #8]
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	2b39      	cmp	r3, #57	; 0x39
 8002d98:	dddd      	ble.n	8002d56 <fourthSegment+0x12>
		}
	}
}
 8002d9a:	bf00      	nop
 8002d9c:	bf00      	nop
 8002d9e:	3710      	adds	r7, #16
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	20000958 	.word	0x20000958

08002da8 <dwukropekTurnOn>:

void dwukropekTurnOn() {
 8002da8:	b580      	push	{r7, lr}
 8002daa:	af00      	add	r7, sp, #0

	ws2811_set_color(28, actualColor.red, actualColor.green, actualColor.blue);
 8002dac:	4b0c      	ldr	r3, [pc, #48]	; (8002de0 <dwukropekTurnOn+0x38>)
 8002dae:	7819      	ldrb	r1, [r3, #0]
 8002db0:	4b0b      	ldr	r3, [pc, #44]	; (8002de0 <dwukropekTurnOn+0x38>)
 8002db2:	789a      	ldrb	r2, [r3, #2]
 8002db4:	4b0a      	ldr	r3, [pc, #40]	; (8002de0 <dwukropekTurnOn+0x38>)
 8002db6:	785b      	ldrb	r3, [r3, #1]
 8002db8:	201c      	movs	r0, #28
 8002dba:	f001 f893 	bl	8003ee4 <ws2811_set_color>
	ws2811_set_color(29, actualColor.red, actualColor.green, actualColor.blue);
 8002dbe:	4b08      	ldr	r3, [pc, #32]	; (8002de0 <dwukropekTurnOn+0x38>)
 8002dc0:	7819      	ldrb	r1, [r3, #0]
 8002dc2:	4b07      	ldr	r3, [pc, #28]	; (8002de0 <dwukropekTurnOn+0x38>)
 8002dc4:	789a      	ldrb	r2, [r3, #2]
 8002dc6:	4b06      	ldr	r3, [pc, #24]	; (8002de0 <dwukropekTurnOn+0x38>)
 8002dc8:	785b      	ldrb	r3, [r3, #1]
 8002dca:	201d      	movs	r0, #29
 8002dcc:	f001 f88a 	bl	8003ee4 <ws2811_set_color>
	ws2811_update();
 8002dd0:	f001 f868 	bl	8003ea4 <ws2811_update>
	doubleDot = 0;
 8002dd4:	4b03      	ldr	r3, [pc, #12]	; (8002de4 <dwukropekTurnOn+0x3c>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	601a      	str	r2, [r3, #0]

}
 8002dda:	bf00      	nop
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	20000958 	.word	0x20000958
 8002de4:	200002dc 	.word	0x200002dc

08002de8 <dwukropekTurnOff>:

void dwukropekTurnOff() {
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0

	ws2811_set_color(28, 0, 0, 0);
 8002dec:	2300      	movs	r3, #0
 8002dee:	2200      	movs	r2, #0
 8002df0:	2100      	movs	r1, #0
 8002df2:	201c      	movs	r0, #28
 8002df4:	f001 f876 	bl	8003ee4 <ws2811_set_color>
	ws2811_set_color(29, 0, 0, 0);
 8002df8:	2300      	movs	r3, #0
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	2100      	movs	r1, #0
 8002dfe:	201d      	movs	r0, #29
 8002e00:	f001 f870 	bl	8003ee4 <ws2811_set_color>
	ws2811_update();
 8002e04:	f001 f84e 	bl	8003ea4 <ws2811_update>
	doubleDot = 1;
 8002e08:	4b02      	ldr	r3, [pc, #8]	; (8002e14 <dwukropekTurnOff+0x2c>)
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	601a      	str	r2, [r3, #0]
}
 8002e0e:	bf00      	nop
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	200002dc 	.word	0x200002dc

08002e18 <dotOn>:

void dotOn() {
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
	ws2811_set_color(28, 0, 0, 0);
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	2200      	movs	r2, #0
 8002e20:	2100      	movs	r1, #0
 8002e22:	201c      	movs	r0, #28
 8002e24:	f001 f85e 	bl	8003ee4 <ws2811_set_color>
	ws2811_set_color(29, actualColor.red, actualColor.green, actualColor.blue);
 8002e28:	4b06      	ldr	r3, [pc, #24]	; (8002e44 <dotOn+0x2c>)
 8002e2a:	7819      	ldrb	r1, [r3, #0]
 8002e2c:	4b05      	ldr	r3, [pc, #20]	; (8002e44 <dotOn+0x2c>)
 8002e2e:	789a      	ldrb	r2, [r3, #2]
 8002e30:	4b04      	ldr	r3, [pc, #16]	; (8002e44 <dotOn+0x2c>)
 8002e32:	785b      	ldrb	r3, [r3, #1]
 8002e34:	201d      	movs	r0, #29
 8002e36:	f001 f855 	bl	8003ee4 <ws2811_set_color>
	ws2811_update();
 8002e3a:	f001 f833 	bl	8003ea4 <ws2811_update>
}
 8002e3e:	bf00      	nop
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	20000958 	.word	0x20000958

08002e48 <dotOff>:

void dotOff(){
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
	ws2811_set_color(28, 0, 0, 0);
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	2200      	movs	r2, #0
 8002e50:	2100      	movs	r1, #0
 8002e52:	201c      	movs	r0, #28
 8002e54:	f001 f846 	bl	8003ee4 <ws2811_set_color>
	ws2811_set_color(29, 0, 0, 0);
 8002e58:	2300      	movs	r3, #0
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	201d      	movs	r0, #29
 8002e60:	f001 f840 	bl	8003ee4 <ws2811_set_color>
	ws2811_update();
 8002e64:	f001 f81e 	bl	8003ea4 <ws2811_update>
}
 8002e68:	bf00      	nop
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <celsiusMark>:

void celsiusMark() {
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
	uint32_t i;
	for (i = 50; i <= 55; i++) {
 8002e72:	2332      	movs	r3, #50	; 0x32
 8002e74:	607b      	str	r3, [r7, #4]
 8002e76:	e00b      	b.n	8002e90 <celsiusMark+0x24>
		ws2811_set_color(i, actualColor.red, actualColor.green,actualColor.blue);
 8002e78:	4b0a      	ldr	r3, [pc, #40]	; (8002ea4 <celsiusMark+0x38>)
 8002e7a:	7819      	ldrb	r1, [r3, #0]
 8002e7c:	4b09      	ldr	r3, [pc, #36]	; (8002ea4 <celsiusMark+0x38>)
 8002e7e:	789a      	ldrb	r2, [r3, #2]
 8002e80:	4b08      	ldr	r3, [pc, #32]	; (8002ea4 <celsiusMark+0x38>)
 8002e82:	785b      	ldrb	r3, [r3, #1]
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f001 f82d 	bl	8003ee4 <ws2811_set_color>
	for (i = 50; i <= 55; i++) {
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	607b      	str	r3, [r7, #4]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2b37      	cmp	r3, #55	; 0x37
 8002e94:	d9f0      	bls.n	8002e78 <celsiusMark+0xc>
	}
	ws2811_update();
 8002e96:	f001 f805 	bl	8003ea4 <ws2811_update>
}
 8002e9a:	bf00      	nop
 8002e9c:	3708      	adds	r7, #8
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	20000958 	.word	0x20000958

08002ea8 <dwukropekStart>:

void dwukropekStart(void) {
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	af00      	add	r7, sp, #0
	if (doubleDot == 1) {
 8002eac:	4b05      	ldr	r3, [pc, #20]	; (8002ec4 <dwukropekStart+0x1c>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d102      	bne.n	8002eba <dwukropekStart+0x12>
		dwukropekTurnOn();
 8002eb4:	f7ff ff78 	bl	8002da8 <dwukropekTurnOn>
	} else {
		dwukropekTurnOff();
	}
}
 8002eb8:	e001      	b.n	8002ebe <dwukropekStart+0x16>
		dwukropekTurnOff();
 8002eba:	f7ff ff95 	bl	8002de8 <dwukropekTurnOff>
}
 8002ebe:	bf00      	nop
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	200002dc 	.word	0x200002dc

08002ec8 <putMinutes>:


// SETTERS
void putMinutes(uint8_t minutes) {
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	4603      	mov	r3, r0
 8002ed0:	71fb      	strb	r3, [r7, #7]
	if (minutes <= 9) {
 8002ed2:	79fb      	ldrb	r3, [r7, #7]
 8002ed4:	2b09      	cmp	r3, #9
 8002ed6:	d812      	bhi.n	8002efe <putMinutes+0x36>
		thirdSegment(zero);
 8002ed8:	4816      	ldr	r0, [pc, #88]	; (8002f34 <putMinutes+0x6c>)
 8002eda:	f7ff ff01 	bl	8002ce0 <thirdSegment>
		if (minutes == 0) {
 8002ede:	79fb      	ldrb	r3, [r7, #7]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d103      	bne.n	8002eec <putMinutes+0x24>
			fourthSegment(zero);
 8002ee4:	4813      	ldr	r0, [pc, #76]	; (8002f34 <putMinutes+0x6c>)
 8002ee6:	f7ff ff2d 	bl	8002d44 <fourthSegment>
	} else {
		struct manyNumber temp = destroy(minutes);
		thirdSegment(numberToMatrix(temp.firstNumber));
		fourthSegment(numberToMatrix(temp.secondNumber));
	}
}
 8002eea:	e01e      	b.n	8002f2a <putMinutes+0x62>
			fourthSegment(numberToMatrix(minutes));
 8002eec:	79fb      	ldrb	r3, [r7, #7]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7ff fdaa 	bl	8002a48 <numberToMatrix>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7ff ff24 	bl	8002d44 <fourthSegment>
}
 8002efc:	e015      	b.n	8002f2a <putMinutes+0x62>
		struct manyNumber temp = destroy(minutes);
 8002efe:	79fb      	ldrb	r3, [r7, #7]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7ff fdef 	bl	8002ae4 <destroy>
 8002f06:	4603      	mov	r3, r0
 8002f08:	81bb      	strh	r3, [r7, #12]
		thirdSegment(numberToMatrix(temp.firstNumber));
 8002f0a:	7b3b      	ldrb	r3, [r7, #12]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7ff fd9b 	bl	8002a48 <numberToMatrix>
 8002f12:	4603      	mov	r3, r0
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7ff fee3 	bl	8002ce0 <thirdSegment>
		fourthSegment(numberToMatrix(temp.secondNumber));
 8002f1a:	7b7b      	ldrb	r3, [r7, #13]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7ff fd93 	bl	8002a48 <numberToMatrix>
 8002f22:	4603      	mov	r3, r0
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7ff ff0d 	bl	8002d44 <fourthSegment>
}
 8002f2a:	bf00      	nop
 8002f2c:	3710      	adds	r7, #16
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	20000030 	.word	0x20000030

08002f38 <putHours>:

void putHours(uint8_t hours, int isMenuOn) {
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	4603      	mov	r3, r0
 8002f40:	6039      	str	r1, [r7, #0]
 8002f42:	71fb      	strb	r3, [r7, #7]
	if (hours <= 9) {
 8002f44:	79fb      	ldrb	r3, [r7, #7]
 8002f46:	2b09      	cmp	r3, #9
 8002f48:	d81c      	bhi.n	8002f84 <putHours+0x4c>

		if (isMenuOn == MENU_ON) {
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d103      	bne.n	8002f58 <putHours+0x20>
			firstSegment(zero);
 8002f50:	4819      	ldr	r0, [pc, #100]	; (8002fb8 <putHours+0x80>)
 8002f52:	f7ff fe61 	bl	8002c18 <firstSegment>
 8002f56:	e005      	b.n	8002f64 <putHours+0x2c>
		} else if (isMenuOn == MENU_OFF) {
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d102      	bne.n	8002f64 <putHours+0x2c>
			firstSegment(noDigit);
 8002f5e:	4817      	ldr	r0, [pc, #92]	; (8002fbc <putHours+0x84>)
 8002f60:	f7ff fe5a 	bl	8002c18 <firstSegment>
		}

		if (hours == 0) {
 8002f64:	79fb      	ldrb	r3, [r7, #7]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d103      	bne.n	8002f72 <putHours+0x3a>
			secondSegment(zero);
 8002f6a:	4813      	ldr	r0, [pc, #76]	; (8002fb8 <putHours+0x80>)
 8002f6c:	f7ff fe86 	bl	8002c7c <secondSegment>
	} else {
		struct manyNumber temp = destroy(hours);
		firstSegment(numberToMatrix(temp.firstNumber));
		secondSegment(numberToMatrix(temp.secondNumber));
	}
}
 8002f70:	e01e      	b.n	8002fb0 <putHours+0x78>
			secondSegment(numberToMatrix(hours));
 8002f72:	79fb      	ldrb	r3, [r7, #7]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7ff fd67 	bl	8002a48 <numberToMatrix>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7ff fe7d 	bl	8002c7c <secondSegment>
}
 8002f82:	e015      	b.n	8002fb0 <putHours+0x78>
		struct manyNumber temp = destroy(hours);
 8002f84:	79fb      	ldrb	r3, [r7, #7]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7ff fdac 	bl	8002ae4 <destroy>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	81bb      	strh	r3, [r7, #12]
		firstSegment(numberToMatrix(temp.firstNumber));
 8002f90:	7b3b      	ldrb	r3, [r7, #12]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7ff fd58 	bl	8002a48 <numberToMatrix>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7ff fe3c 	bl	8002c18 <firstSegment>
		secondSegment(numberToMatrix(temp.secondNumber));
 8002fa0:	7b7b      	ldrb	r3, [r7, #13]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7ff fd50 	bl	8002a48 <numberToMatrix>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7ff fe66 	bl	8002c7c <secondSegment>
}
 8002fb0:	bf00      	nop
 8002fb2:	3710      	adds	r7, #16
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	20000030 	.word	0x20000030
 8002fbc:	20000000 	.word	0x20000000

08002fc0 <putMonth>:

void putMonth(uint8_t month) {
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	71fb      	strb	r3, [r7, #7]
	putMinutes(month);
 8002fca:	79fb      	ldrb	r3, [r7, #7]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f7ff ff7b 	bl	8002ec8 <putMinutes>
}
 8002fd2:	bf00      	nop
 8002fd4:	3708      	adds	r7, #8
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <putDay>:

void putDay(uint8_t day) {
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b082      	sub	sp, #8
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	71fb      	strb	r3, [r7, #7]
	putHours(day, MENU_ON);
 8002fe4:	79fb      	ldrb	r3, [r7, #7]
 8002fe6:	2101      	movs	r1, #1
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7ff ffa5 	bl	8002f38 <putHours>
}
 8002fee:	bf00      	nop
 8002ff0:	3708      	adds	r7, #8
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
	...

08002ff8 <putYear>:

void putYear(uint8_t year){
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	4603      	mov	r3, r0
 8003000:	71fb      	strb	r3, [r7, #7]
	firstSegment(two);
 8003002:	4808      	ldr	r0, [pc, #32]	; (8003024 <putYear+0x2c>)
 8003004:	f7ff fe08 	bl	8002c18 <firstSegment>
	secondSegment(zero);
 8003008:	4807      	ldr	r0, [pc, #28]	; (8003028 <putYear+0x30>)
 800300a:	f7ff fe37 	bl	8002c7c <secondSegment>
	dotOff();
 800300e:	f7ff ff1b 	bl	8002e48 <dotOff>
	putMinutes(year);
 8003012:	79fb      	ldrb	r3, [r7, #7]
 8003014:	4618      	mov	r0, r3
 8003016:	f7ff ff57 	bl	8002ec8 <putMinutes>
}
 800301a:	bf00      	nop
 800301c:	3708      	adds	r7, #8
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	20000040 	.word	0x20000040
 8003028:	20000030 	.word	0x20000030

0800302c <setMinutes>:

void setMinutes(uint8_t minute) {
 800302c:	b580      	push	{r7, lr}
 800302e:	b088      	sub	sp, #32
 8003030:	af00      	add	r7, sp, #0
 8003032:	4603      	mov	r3, r0
 8003034:	71fb      	strb	r3, [r7, #7]
	RTC_TimeTypeDef time = { 0 };
 8003036:	f107 030c 	add.w	r3, r7, #12
 800303a:	2200      	movs	r2, #0
 800303c:	601a      	str	r2, [r3, #0]
 800303e:	605a      	str	r2, [r3, #4]
 8003040:	609a      	str	r2, [r3, #8]
 8003042:	60da      	str	r2, [r3, #12]
 8003044:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef date = { 0 };
 8003046:	2300      	movs	r3, #0
 8003048:	60bb      	str	r3, [r7, #8]

	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 800304a:	f107 030c 	add.w	r3, r7, #12
 800304e:	2200      	movs	r2, #0
 8003050:	4619      	mov	r1, r3
 8003052:	480c      	ldr	r0, [pc, #48]	; (8003084 <setMinutes+0x58>)
 8003054:	f004 f8fa 	bl	800724c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8003058:	f107 0308 	add.w	r3, r7, #8
 800305c:	2200      	movs	r2, #0
 800305e:	4619      	mov	r1, r3
 8003060:	4808      	ldr	r0, [pc, #32]	; (8003084 <setMinutes+0x58>)
 8003062:	f004 f9d6 	bl	8007412 <HAL_RTC_GetDate>

	time.Minutes = minute;
 8003066:	79fb      	ldrb	r3, [r7, #7]
 8003068:	737b      	strb	r3, [r7, #13]
	time.Seconds = 0;
 800306a:	2300      	movs	r3, #0
 800306c:	73bb      	strb	r3, [r7, #14]

	HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN);
 800306e:	f107 030c 	add.w	r3, r7, #12
 8003072:	2200      	movs	r2, #0
 8003074:	4619      	mov	r1, r3
 8003076:	4803      	ldr	r0, [pc, #12]	; (8003084 <setMinutes+0x58>)
 8003078:	f004 f84b 	bl	8007112 <HAL_RTC_SetTime>
}
 800307c:	bf00      	nop
 800307e:	3720      	adds	r7, #32
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	20000934 	.word	0x20000934

08003088 <setHours>:

void setHours(uint8_t hours) {
 8003088:	b580      	push	{r7, lr}
 800308a:	b088      	sub	sp, #32
 800308c:	af00      	add	r7, sp, #0
 800308e:	4603      	mov	r3, r0
 8003090:	71fb      	strb	r3, [r7, #7]
	RTC_TimeTypeDef time = { 0 };
 8003092:	f107 030c 	add.w	r3, r7, #12
 8003096:	2200      	movs	r2, #0
 8003098:	601a      	str	r2, [r3, #0]
 800309a:	605a      	str	r2, [r3, #4]
 800309c:	609a      	str	r2, [r3, #8]
 800309e:	60da      	str	r2, [r3, #12]
 80030a0:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef date = { 0 };
 80030a2:	2300      	movs	r3, #0
 80030a4:	60bb      	str	r3, [r7, #8]

	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 80030a6:	f107 030c 	add.w	r3, r7, #12
 80030aa:	2200      	movs	r2, #0
 80030ac:	4619      	mov	r1, r3
 80030ae:	480e      	ldr	r0, [pc, #56]	; (80030e8 <setHours+0x60>)
 80030b0:	f004 f8cc 	bl	800724c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 80030b4:	f107 0308 	add.w	r3, r7, #8
 80030b8:	2200      	movs	r2, #0
 80030ba:	4619      	mov	r1, r3
 80030bc:	480a      	ldr	r0, [pc, #40]	; (80030e8 <setHours+0x60>)
 80030be:	f004 f9a8 	bl	8007412 <HAL_RTC_GetDate>

	HAL_Delay(100);
 80030c2:	2064      	movs	r0, #100	; 0x64
 80030c4:	f000 ffe2 	bl	800408c <HAL_Delay>

	time.Hours = hours;
 80030c8:	79fb      	ldrb	r3, [r7, #7]
 80030ca:	733b      	strb	r3, [r7, #12]
	time.Seconds = 0;
 80030cc:	2300      	movs	r3, #0
 80030ce:	73bb      	strb	r3, [r7, #14]

	HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN);
 80030d0:	f107 030c 	add.w	r3, r7, #12
 80030d4:	2200      	movs	r2, #0
 80030d6:	4619      	mov	r1, r3
 80030d8:	4803      	ldr	r0, [pc, #12]	; (80030e8 <setHours+0x60>)
 80030da:	f004 f81a 	bl	8007112 <HAL_RTC_SetTime>
}
 80030de:	bf00      	nop
 80030e0:	3720      	adds	r7, #32
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	20000934 	.word	0x20000934

080030ec <setMonth>:

// DATA

void setMonth(uint8_t month) {
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b088      	sub	sp, #32
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	4603      	mov	r3, r0
 80030f4:	71fb      	strb	r3, [r7, #7]
	RTC_TimeTypeDef time = { 0 };
 80030f6:	f107 030c 	add.w	r3, r7, #12
 80030fa:	2200      	movs	r2, #0
 80030fc:	601a      	str	r2, [r3, #0]
 80030fe:	605a      	str	r2, [r3, #4]
 8003100:	609a      	str	r2, [r3, #8]
 8003102:	60da      	str	r2, [r3, #12]
 8003104:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef date = { 0 };
 8003106:	2300      	movs	r3, #0
 8003108:	60bb      	str	r3, [r7, #8]

	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 800310a:	f107 030c 	add.w	r3, r7, #12
 800310e:	2200      	movs	r2, #0
 8003110:	4619      	mov	r1, r3
 8003112:	4810      	ldr	r0, [pc, #64]	; (8003154 <setMonth+0x68>)
 8003114:	f004 f89a 	bl	800724c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8003118:	f107 0308 	add.w	r3, r7, #8
 800311c:	2200      	movs	r2, #0
 800311e:	4619      	mov	r1, r3
 8003120:	480c      	ldr	r0, [pc, #48]	; (8003154 <setMonth+0x68>)
 8003122:	f004 f976 	bl	8007412 <HAL_RTC_GetDate>

	date.Month=month;
 8003126:	79fb      	ldrb	r3, [r7, #7]
 8003128:	727b      	strb	r3, [r7, #9]
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR5, ((date.Month << 8) | (date.Year)));
 800312a:	7a7b      	ldrb	r3, [r7, #9]
 800312c:	021b      	lsls	r3, r3, #8
 800312e:	7afa      	ldrb	r2, [r7, #11]
 8003130:	4313      	orrs	r3, r2
 8003132:	461a      	mov	r2, r3
 8003134:	2105      	movs	r1, #5
 8003136:	4807      	ldr	r0, [pc, #28]	; (8003154 <setMonth+0x68>)
 8003138:	f004 fc16 	bl	8007968 <HAL_RTCEx_BKUPWrite>


	HAL_RTC_SetDate(&hrtc, &date, RTC_FORMAT_BIN);
 800313c:	f107 0308 	add.w	r3, r7, #8
 8003140:	2200      	movs	r2, #0
 8003142:	4619      	mov	r1, r3
 8003144:	4803      	ldr	r0, [pc, #12]	; (8003154 <setMonth+0x68>)
 8003146:	f004 f8dd 	bl	8007304 <HAL_RTC_SetDate>
}
 800314a:	bf00      	nop
 800314c:	3720      	adds	r7, #32
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	20000934 	.word	0x20000934

08003158 <setDay>:

void setDay(uint8_t day) {
 8003158:	b580      	push	{r7, lr}
 800315a:	b088      	sub	sp, #32
 800315c:	af00      	add	r7, sp, #0
 800315e:	4603      	mov	r3, r0
 8003160:	71fb      	strb	r3, [r7, #7]
	RTC_TimeTypeDef time = { 0 };
 8003162:	f107 030c 	add.w	r3, r7, #12
 8003166:	2200      	movs	r2, #0
 8003168:	601a      	str	r2, [r3, #0]
 800316a:	605a      	str	r2, [r3, #4]
 800316c:	609a      	str	r2, [r3, #8]
 800316e:	60da      	str	r2, [r3, #12]
 8003170:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef date = { 0 };
 8003172:	2300      	movs	r3, #0
 8003174:	60bb      	str	r3, [r7, #8]

	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8003176:	f107 030c 	add.w	r3, r7, #12
 800317a:	2200      	movs	r2, #0
 800317c:	4619      	mov	r1, r3
 800317e:	480e      	ldr	r0, [pc, #56]	; (80031b8 <setDay+0x60>)
 8003180:	f004 f864 	bl	800724c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8003184:	f107 0308 	add.w	r3, r7, #8
 8003188:	2200      	movs	r2, #0
 800318a:	4619      	mov	r1, r3
 800318c:	480a      	ldr	r0, [pc, #40]	; (80031b8 <setDay+0x60>)
 800318e:	f004 f940 	bl	8007412 <HAL_RTC_GetDate>

	date.Date=day;
 8003192:	79fb      	ldrb	r3, [r7, #7]
 8003194:	72bb      	strb	r3, [r7, #10]

	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR6, date.Date);
 8003196:	7abb      	ldrb	r3, [r7, #10]
 8003198:	461a      	mov	r2, r3
 800319a:	2106      	movs	r1, #6
 800319c:	4806      	ldr	r0, [pc, #24]	; (80031b8 <setDay+0x60>)
 800319e:	f004 fbe3 	bl	8007968 <HAL_RTCEx_BKUPWrite>

	HAL_RTC_SetDate(&hrtc, &date, RTC_FORMAT_BIN);
 80031a2:	f107 0308 	add.w	r3, r7, #8
 80031a6:	2200      	movs	r2, #0
 80031a8:	4619      	mov	r1, r3
 80031aa:	4803      	ldr	r0, [pc, #12]	; (80031b8 <setDay+0x60>)
 80031ac:	f004 f8aa 	bl	8007304 <HAL_RTC_SetDate>
}
 80031b0:	bf00      	nop
 80031b2:	3720      	adds	r7, #32
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	20000934 	.word	0x20000934

080031bc <setYear>:

void setYear(uint8_t year){
 80031bc:	b580      	push	{r7, lr}
 80031be:	b088      	sub	sp, #32
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	4603      	mov	r3, r0
 80031c4:	71fb      	strb	r3, [r7, #7]
	RTC_TimeTypeDef time = { 0 };
 80031c6:	f107 030c 	add.w	r3, r7, #12
 80031ca:	2200      	movs	r2, #0
 80031cc:	601a      	str	r2, [r3, #0]
 80031ce:	605a      	str	r2, [r3, #4]
 80031d0:	609a      	str	r2, [r3, #8]
 80031d2:	60da      	str	r2, [r3, #12]
 80031d4:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef date = { 0 };
 80031d6:	2300      	movs	r3, #0
 80031d8:	60bb      	str	r3, [r7, #8]

	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 80031da:	f107 030c 	add.w	r3, r7, #12
 80031de:	2200      	movs	r2, #0
 80031e0:	4619      	mov	r1, r3
 80031e2:	4810      	ldr	r0, [pc, #64]	; (8003224 <setYear+0x68>)
 80031e4:	f004 f832 	bl	800724c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 80031e8:	f107 0308 	add.w	r3, r7, #8
 80031ec:	2200      	movs	r2, #0
 80031ee:	4619      	mov	r1, r3
 80031f0:	480c      	ldr	r0, [pc, #48]	; (8003224 <setYear+0x68>)
 80031f2:	f004 f90e 	bl	8007412 <HAL_RTC_GetDate>

	date.Year=year;
 80031f6:	79fb      	ldrb	r3, [r7, #7]
 80031f8:	72fb      	strb	r3, [r7, #11]

	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR5, ((date.Month << 8) | (date.Year)));
 80031fa:	7a7b      	ldrb	r3, [r7, #9]
 80031fc:	021b      	lsls	r3, r3, #8
 80031fe:	7afa      	ldrb	r2, [r7, #11]
 8003200:	4313      	orrs	r3, r2
 8003202:	461a      	mov	r2, r3
 8003204:	2105      	movs	r1, #5
 8003206:	4807      	ldr	r0, [pc, #28]	; (8003224 <setYear+0x68>)
 8003208:	f004 fbae 	bl	8007968 <HAL_RTCEx_BKUPWrite>

	HAL_RTC_SetDate(&hrtc, &date, RTC_FORMAT_BIN);
 800320c:	f107 0308 	add.w	r3, r7, #8
 8003210:	2200      	movs	r2, #0
 8003212:	4619      	mov	r1, r3
 8003214:	4803      	ldr	r0, [pc, #12]	; (8003224 <setYear+0x68>)
 8003216:	f004 f875 	bl	8007304 <HAL_RTC_SetDate>

}
 800321a:	bf00      	nop
 800321c:	3720      	adds	r7, #32
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	20000934 	.word	0x20000934

08003228 <normalDisplayStart>:


/*
 *  DISPLAY MODES
 */
void normalDisplayStart() {
 8003228:	b580      	push	{r7, lr}
 800322a:	b088      	sub	sp, #32
 800322c:	af00      	add	r7, sp, #0

	RTC_TimeTypeDef time = { 0 };
 800322e:	f107 0308 	add.w	r3, r7, #8
 8003232:	2200      	movs	r2, #0
 8003234:	601a      	str	r2, [r3, #0]
 8003236:	605a      	str	r2, [r3, #4]
 8003238:	609a      	str	r2, [r3, #8]
 800323a:	60da      	str	r2, [r3, #12]
 800323c:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef date = { 0 };
 800323e:	2300      	movs	r3, #0
 8003240:	607b      	str	r3, [r7, #4]

	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8003242:	f107 0308 	add.w	r3, r7, #8
 8003246:	2200      	movs	r2, #0
 8003248:	4619      	mov	r1, r3
 800324a:	480e      	ldr	r0, [pc, #56]	; (8003284 <normalDisplayStart+0x5c>)
 800324c:	f003 fffe 	bl	800724c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8003250:	1d3b      	adds	r3, r7, #4
 8003252:	2200      	movs	r2, #0
 8003254:	4619      	mov	r1, r3
 8003256:	480b      	ldr	r0, [pc, #44]	; (8003284 <normalDisplayStart+0x5c>)
 8003258:	f004 f8db 	bl	8007412 <HAL_RTC_GetDate>

	uint8_t hours = time.Hours;
 800325c:	7a3b      	ldrb	r3, [r7, #8]
 800325e:	77fb      	strb	r3, [r7, #31]
	uint8_t minutes = time.Minutes;
 8003260:	7a7b      	ldrb	r3, [r7, #9]
 8003262:	77bb      	strb	r3, [r7, #30]



	putHours(hours, MENU_OFF);
 8003264:	7ffb      	ldrb	r3, [r7, #31]
 8003266:	2100      	movs	r1, #0
 8003268:	4618      	mov	r0, r3
 800326a:	f7ff fe65 	bl	8002f38 <putHours>
	putMinutes(minutes);
 800326e:	7fbb      	ldrb	r3, [r7, #30]
 8003270:	4618      	mov	r0, r3
 8003272:	f7ff fe29 	bl	8002ec8 <putMinutes>
	ws2811_update();
 8003276:	f000 fe15 	bl	8003ea4 <ws2811_update>
}
 800327a:	bf00      	nop
 800327c:	3720      	adds	r7, #32
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	20000934 	.word	0x20000934

08003288 <menuDisplayStart>:

// menu mode, first segment is always active
void menuDisplayStart() {
 8003288:	b580      	push	{r7, lr}
 800328a:	b088      	sub	sp, #32
 800328c:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef time = { 0 };
 800328e:	f107 0308 	add.w	r3, r7, #8
 8003292:	2200      	movs	r2, #0
 8003294:	601a      	str	r2, [r3, #0]
 8003296:	605a      	str	r2, [r3, #4]
 8003298:	609a      	str	r2, [r3, #8]
 800329a:	60da      	str	r2, [r3, #12]
 800329c:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef date = { 0 };
 800329e:	2300      	movs	r3, #0
 80032a0:	607b      	str	r3, [r7, #4]

	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 80032a2:	f107 0308 	add.w	r3, r7, #8
 80032a6:	2200      	movs	r2, #0
 80032a8:	4619      	mov	r1, r3
 80032aa:	480e      	ldr	r0, [pc, #56]	; (80032e4 <menuDisplayStart+0x5c>)
 80032ac:	f003 ffce 	bl	800724c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 80032b0:	1d3b      	adds	r3, r7, #4
 80032b2:	2200      	movs	r2, #0
 80032b4:	4619      	mov	r1, r3
 80032b6:	480b      	ldr	r0, [pc, #44]	; (80032e4 <menuDisplayStart+0x5c>)
 80032b8:	f004 f8ab 	bl	8007412 <HAL_RTC_GetDate>

	uint8_t hours = time.Hours;
 80032bc:	7a3b      	ldrb	r3, [r7, #8]
 80032be:	77fb      	strb	r3, [r7, #31]
	uint8_t minutes = time.Minutes;
 80032c0:	7a7b      	ldrb	r3, [r7, #9]
 80032c2:	77bb      	strb	r3, [r7, #30]

	putHours(hours, MENU_ON);
 80032c4:	7ffb      	ldrb	r3, [r7, #31]
 80032c6:	2101      	movs	r1, #1
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7ff fe35 	bl	8002f38 <putHours>
	putMinutes(minutes);
 80032ce:	7fbb      	ldrb	r3, [r7, #30]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7ff fdf9 	bl	8002ec8 <putMinutes>
	ws2811_update();
 80032d6:	f000 fde5 	bl	8003ea4 <ws2811_update>
}
 80032da:	bf00      	nop
 80032dc:	3720      	adds	r7, #32
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	20000934 	.word	0x20000934

080032e8 <dateOnDisplay>:

void dateOnDisplay() {
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b088      	sub	sp, #32
 80032ec:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef time = { 0 };
 80032ee:	f107 0308 	add.w	r3, r7, #8
 80032f2:	2200      	movs	r2, #0
 80032f4:	601a      	str	r2, [r3, #0]
 80032f6:	605a      	str	r2, [r3, #4]
 80032f8:	609a      	str	r2, [r3, #8]
 80032fa:	60da      	str	r2, [r3, #12]
 80032fc:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef date = { 0 };
 80032fe:	2300      	movs	r3, #0
 8003300:	607b      	str	r3, [r7, #4]

	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8003302:	f107 0308 	add.w	r3, r7, #8
 8003306:	2200      	movs	r2, #0
 8003308:	4619      	mov	r1, r3
 800330a:	480d      	ldr	r0, [pc, #52]	; (8003340 <dateOnDisplay+0x58>)
 800330c:	f003 ff9e 	bl	800724c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8003310:	1d3b      	adds	r3, r7, #4
 8003312:	2200      	movs	r2, #0
 8003314:	4619      	mov	r1, r3
 8003316:	480a      	ldr	r0, [pc, #40]	; (8003340 <dateOnDisplay+0x58>)
 8003318:	f004 f87b 	bl	8007412 <HAL_RTC_GetDate>

	uint8_t month = date.Month;
 800331c:	797b      	ldrb	r3, [r7, #5]
 800331e:	77fb      	strb	r3, [r7, #31]
	uint8_t day = date.Date;
 8003320:	79bb      	ldrb	r3, [r7, #6]
 8003322:	77bb      	strb	r3, [r7, #30]

	putMonth(month);
 8003324:	7ffb      	ldrb	r3, [r7, #31]
 8003326:	4618      	mov	r0, r3
 8003328:	f7ff fe4a 	bl	8002fc0 <putMonth>
	putDay(day);
 800332c:	7fbb      	ldrb	r3, [r7, #30]
 800332e:	4618      	mov	r0, r3
 8003330:	f7ff fe53 	bl	8002fda <putDay>
	ws2811_update();
 8003334:	f000 fdb6 	bl	8003ea4 <ws2811_update>
}
 8003338:	bf00      	nop
 800333a:	3720      	adds	r7, #32
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	20000934 	.word	0x20000934

08003344 <yearOnDisplay>:

void yearOnDisplay(){
 8003344:	b580      	push	{r7, lr}
 8003346:	b088      	sub	sp, #32
 8003348:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef time = { 0 };
 800334a:	f107 0308 	add.w	r3, r7, #8
 800334e:	2200      	movs	r2, #0
 8003350:	601a      	str	r2, [r3, #0]
 8003352:	605a      	str	r2, [r3, #4]
 8003354:	609a      	str	r2, [r3, #8]
 8003356:	60da      	str	r2, [r3, #12]
 8003358:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef date = { 0 };
 800335a:	2300      	movs	r3, #0
 800335c:	607b      	str	r3, [r7, #4]

	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 800335e:	f107 0308 	add.w	r3, r7, #8
 8003362:	2200      	movs	r2, #0
 8003364:	4619      	mov	r1, r3
 8003366:	480a      	ldr	r0, [pc, #40]	; (8003390 <yearOnDisplay+0x4c>)
 8003368:	f003 ff70 	bl	800724c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 800336c:	1d3b      	adds	r3, r7, #4
 800336e:	2200      	movs	r2, #0
 8003370:	4619      	mov	r1, r3
 8003372:	4807      	ldr	r0, [pc, #28]	; (8003390 <yearOnDisplay+0x4c>)
 8003374:	f004 f84d 	bl	8007412 <HAL_RTC_GetDate>

	uint8_t year = date.Year;
 8003378:	79fb      	ldrb	r3, [r7, #7]
 800337a:	77fb      	strb	r3, [r7, #31]

	putYear(year);
 800337c:	7ffb      	ldrb	r3, [r7, #31]
 800337e:	4618      	mov	r0, r3
 8003380:	f7ff fe3a 	bl	8002ff8 <putYear>
	ws2811_update();
 8003384:	f000 fd8e 	bl	8003ea4 <ws2811_update>
}
 8003388:	bf00      	nop
 800338a:	3720      	adds	r7, #32
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	20000934 	.word	0x20000934

08003394 <temperatureOnDisplay>:

void temperatureOnDisplay(int firstMeasure) {
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
	if(firstMeasure==1){
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d10b      	bne.n	80033ba <temperatureOnDisplay+0x26>
		temperatureResult = destoryCelcius();
 80033a2:	f7ff fbc9 	bl	8002b38 <destoryCelcius>
 80033a6:	4602      	mov	r2, r0
 80033a8:	4b15      	ldr	r3, [pc, #84]	; (8003400 <temperatureOnDisplay+0x6c>)
 80033aa:	4611      	mov	r1, r2
 80033ac:	7019      	strb	r1, [r3, #0]
 80033ae:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80033b2:	7059      	strb	r1, [r3, #1]
 80033b4:	f3c2 4207 	ubfx	r2, r2, #16, #8
 80033b8:	709a      	strb	r2, [r3, #2]
	}
	firstSegment(numberToMatrix(temperatureResult.firstNumber));
 80033ba:	4b11      	ldr	r3, [pc, #68]	; (8003400 <temperatureOnDisplay+0x6c>)
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	4618      	mov	r0, r3
 80033c0:	f7ff fb42 	bl	8002a48 <numberToMatrix>
 80033c4:	4603      	mov	r3, r0
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7ff fc26 	bl	8002c18 <firstSegment>
	secondSegment(numberToMatrix(temperatureResult.secondNumber));
 80033cc:	4b0c      	ldr	r3, [pc, #48]	; (8003400 <temperatureOnDisplay+0x6c>)
 80033ce:	785b      	ldrb	r3, [r3, #1]
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7ff fb39 	bl	8002a48 <numberToMatrix>
 80033d6:	4603      	mov	r3, r0
 80033d8:	4618      	mov	r0, r3
 80033da:	f7ff fc4f 	bl	8002c7c <secondSegment>
	thirdSegment(numberToMatrix(temperatureResult.numberAfterPoint));
 80033de:	4b08      	ldr	r3, [pc, #32]	; (8003400 <temperatureOnDisplay+0x6c>)
 80033e0:	789b      	ldrb	r3, [r3, #2]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7ff fb30 	bl	8002a48 <numberToMatrix>
 80033e8:	4603      	mov	r3, r0
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7ff fc78 	bl	8002ce0 <thirdSegment>
	celsiusMark();
 80033f0:	f7ff fd3c 	bl	8002e6c <celsiusMark>
	ws2811_update();
 80033f4:	f000 fd56 	bl	8003ea4 <ws2811_update>
}
 80033f8:	bf00      	nop
 80033fa:	3708      	adds	r7, #8
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	2000092c 	.word	0x2000092c

08003404 <displayStop>:

void displayStop(void){
 8003404:	b580      	push	{r7, lr}
 8003406:	af00      	add	r7, sp, #0
	ws2811_wait();
 8003408:	f000 fd5c 	bl	8003ec4 <ws2811_wait>
	ws2811_fullDisplayReset();
 800340c:	f000 fd1e 	bl	8003e4c <ws2811_fullDisplayReset>
	ws2811_wait();
 8003410:	f000 fd58 	bl	8003ec4 <ws2811_wait>
	ws2811_wait();
 8003414:	f000 fd56 	bl	8003ec4 <ws2811_wait>
}
 8003418:	bf00      	nop
 800341a:	bd80      	pop	{r7, pc}

0800341c <testSegments>:

void testSegments(void){
 800341c:	b580      	push	{r7, lr}
 800341e:	af00      	add	r7, sp, #0
	firstSegment(eight);
 8003420:	4807      	ldr	r0, [pc, #28]	; (8003440 <testSegments+0x24>)
 8003422:	f7ff fbf9 	bl	8002c18 <firstSegment>
	secondSegment(eight);
 8003426:	4806      	ldr	r0, [pc, #24]	; (8003440 <testSegments+0x24>)
 8003428:	f7ff fc28 	bl	8002c7c <secondSegment>
	thirdSegment(eight);
 800342c:	4804      	ldr	r0, [pc, #16]	; (8003440 <testSegments+0x24>)
 800342e:	f7ff fc57 	bl	8002ce0 <thirdSegment>
	fourthSegment(eight);
 8003432:	4803      	ldr	r0, [pc, #12]	; (8003440 <testSegments+0x24>)
 8003434:	f7ff fc86 	bl	8002d44 <fourthSegment>
	dwukropekTurnOn();
 8003438:	f7ff fcb6 	bl	8002da8 <dwukropekTurnOn>
}
 800343c:	bf00      	nop
 800343e:	bd80      	pop	{r7, pc}
 8003440:	20000080 	.word	0x20000080

08003444 <sleepTimeSetDisplay>:

void sleepTimeSetDisplay(void){
 8003444:	b580      	push	{r7, lr}
 8003446:	af00      	add	r7, sp, #0
	firstSegment(alpha_S);
 8003448:	4807      	ldr	r0, [pc, #28]	; (8003468 <sleepTimeSetDisplay+0x24>)
 800344a:	f7ff fbe5 	bl	8002c18 <firstSegment>
	secondSegment(alpha_L);
 800344e:	4807      	ldr	r0, [pc, #28]	; (800346c <sleepTimeSetDisplay+0x28>)
 8003450:	f7ff fc14 	bl	8002c7c <secondSegment>
	thirdSegment(alpha_E);
 8003454:	4806      	ldr	r0, [pc, #24]	; (8003470 <sleepTimeSetDisplay+0x2c>)
 8003456:	f7ff fc43 	bl	8002ce0 <thirdSegment>
	fourthSegment(alpha_E);
 800345a:	4805      	ldr	r0, [pc, #20]	; (8003470 <sleepTimeSetDisplay+0x2c>)
 800345c:	f7ff fc72 	bl	8002d44 <fourthSegment>
	dwukropekTurnOff();
 8003460:	f7ff fcc2 	bl	8002de8 <dwukropekTurnOff>
}
 8003464:	bf00      	nop
 8003466:	bd80      	pop	{r7, pc}
 8003468:	2000009c 	.word	0x2000009c
 800346c:	20000004 	.word	0x20000004
 8003470:	2000000c 	.word	0x2000000c

08003474 <alarmTimeSetDisplay>:

void alarmTimeSetDisplay(void){
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0
	firstSegment(alpha_A);
 8003478:	4807      	ldr	r0, [pc, #28]	; (8003498 <alarmTimeSetDisplay+0x24>)
 800347a:	f7ff fbcd 	bl	8002c18 <firstSegment>
	secondSegment(alpha_L);
 800347e:	4807      	ldr	r0, [pc, #28]	; (800349c <alarmTimeSetDisplay+0x28>)
 8003480:	f7ff fbfc 	bl	8002c7c <secondSegment>
	thirdSegment(alpha_A);
 8003484:	4804      	ldr	r0, [pc, #16]	; (8003498 <alarmTimeSetDisplay+0x24>)
 8003486:	f7ff fc2b 	bl	8002ce0 <thirdSegment>
	fourthSegment(alpha_r);
 800348a:	4805      	ldr	r0, [pc, #20]	; (80034a0 <alarmTimeSetDisplay+0x2c>)
 800348c:	f7ff fc5a 	bl	8002d44 <fourthSegment>
	dwukropekTurnOff();
 8003490:	f7ff fcaa 	bl	8002de8 <dwukropekTurnOff>
}
 8003494:	bf00      	nop
 8003496:	bd80      	pop	{r7, pc}
 8003498:	20000018 	.word	0x20000018
 800349c:	20000004 	.word	0x20000004
 80034a0:	20000024 	.word	0x20000024

080034a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034aa:	4b0f      	ldr	r3, [pc, #60]	; (80034e8 <HAL_MspInit+0x44>)
 80034ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034ae:	4a0e      	ldr	r2, [pc, #56]	; (80034e8 <HAL_MspInit+0x44>)
 80034b0:	f043 0301 	orr.w	r3, r3, #1
 80034b4:	6613      	str	r3, [r2, #96]	; 0x60
 80034b6:	4b0c      	ldr	r3, [pc, #48]	; (80034e8 <HAL_MspInit+0x44>)
 80034b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	607b      	str	r3, [r7, #4]
 80034c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80034c2:	4b09      	ldr	r3, [pc, #36]	; (80034e8 <HAL_MspInit+0x44>)
 80034c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c6:	4a08      	ldr	r2, [pc, #32]	; (80034e8 <HAL_MspInit+0x44>)
 80034c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034cc:	6593      	str	r3, [r2, #88]	; 0x58
 80034ce:	4b06      	ldr	r3, [pc, #24]	; (80034e8 <HAL_MspInit+0x44>)
 80034d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034d6:	603b      	str	r3, [r7, #0]
 80034d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034da:	bf00      	nop
 80034dc:	370c      	adds	r7, #12
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	40021000 	.word	0x40021000

080034ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034ec:	b480      	push	{r7}
 80034ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80034f0:	e7fe      	b.n	80034f0 <NMI_Handler+0x4>

080034f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034f2:	b480      	push	{r7}
 80034f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034f6:	e7fe      	b.n	80034f6 <HardFault_Handler+0x4>

080034f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034f8:	b480      	push	{r7}
 80034fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034fc:	e7fe      	b.n	80034fc <MemManage_Handler+0x4>

080034fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034fe:	b480      	push	{r7}
 8003500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003502:	e7fe      	b.n	8003502 <BusFault_Handler+0x4>

08003504 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003504:	b480      	push	{r7}
 8003506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003508:	e7fe      	b.n	8003508 <UsageFault_Handler+0x4>

0800350a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800350a:	b480      	push	{r7}
 800350c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800350e:	bf00      	nop
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003518:	b480      	push	{r7}
 800351a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800351c:	bf00      	nop
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr

08003526 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003526:	b480      	push	{r7}
 8003528:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800352a:	bf00      	nop
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003538:	f000 fd88 	bl	800404c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800353c:	bf00      	nop
 800353e:	bd80      	pop	{r7, pc}

08003540 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8003544:	4802      	ldr	r0, [pc, #8]	; (8003550 <DMA1_Channel1_IRQHandler+0x10>)
 8003546:	f001 ff97 	bl	8005478 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800354a:	bf00      	nop
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	20000a40 	.word	0x20000a40

08003554 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003558:	4802      	ldr	r0, [pc, #8]	; (8003564 <TIM2_IRQHandler+0x10>)
 800355a:	f004 ff91 	bl	8008480 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800355e:	bf00      	nop
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	200009f4 	.word	0x200009f4

08003568 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800356c:	4802      	ldr	r0, [pc, #8]	; (8003578 <RTC_Alarm_IRQHandler+0x10>)
 800356e:	f004 f8d9 	bl	8007724 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8003572:	bf00      	nop
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	20000934 	.word	0x20000934

0800357c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003580:	4802      	ldr	r0, [pc, #8]	; (800358c <TIM6_DAC_IRQHandler+0x10>)
 8003582:	f004 ff7d 	bl	8008480 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003586:	bf00      	nop
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	200009a8 	.word	0x200009a8

08003590 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003590:	b480      	push	{r7}
 8003592:	af00      	add	r7, sp, #0
	return 1;
 8003594:	2301      	movs	r3, #1
}
 8003596:	4618      	mov	r0, r3
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr

080035a0 <_kill>:

int _kill(int pid, int sig)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80035aa:	f007 f97b 	bl	800a8a4 <__errno>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2216      	movs	r2, #22
 80035b2:	601a      	str	r2, [r3, #0]
	return -1;
 80035b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3708      	adds	r7, #8
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <_exit>:

void _exit (int status)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80035c8:	f04f 31ff 	mov.w	r1, #4294967295
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f7ff ffe7 	bl	80035a0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80035d2:	e7fe      	b.n	80035d2 <_exit+0x12>

080035d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b086      	sub	sp, #24
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035e0:	2300      	movs	r3, #0
 80035e2:	617b      	str	r3, [r7, #20]
 80035e4:	e00a      	b.n	80035fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80035e6:	f3af 8000 	nop.w
 80035ea:	4601      	mov	r1, r0
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	1c5a      	adds	r2, r3, #1
 80035f0:	60ba      	str	r2, [r7, #8]
 80035f2:	b2ca      	uxtb	r2, r1
 80035f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	3301      	adds	r3, #1
 80035fa:	617b      	str	r3, [r7, #20]
 80035fc:	697a      	ldr	r2, [r7, #20]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	429a      	cmp	r2, r3
 8003602:	dbf0      	blt.n	80035e6 <_read+0x12>
	}

return len;
 8003604:	687b      	ldr	r3, [r7, #4]
}
 8003606:	4618      	mov	r0, r3
 8003608:	3718      	adds	r7, #24
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800360e:	b580      	push	{r7, lr}
 8003610:	b086      	sub	sp, #24
 8003612:	af00      	add	r7, sp, #0
 8003614:	60f8      	str	r0, [r7, #12]
 8003616:	60b9      	str	r1, [r7, #8]
 8003618:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800361a:	2300      	movs	r3, #0
 800361c:	617b      	str	r3, [r7, #20]
 800361e:	e009      	b.n	8003634 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	1c5a      	adds	r2, r3, #1
 8003624:	60ba      	str	r2, [r7, #8]
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	4618      	mov	r0, r3
 800362a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	3301      	adds	r3, #1
 8003632:	617b      	str	r3, [r7, #20]
 8003634:	697a      	ldr	r2, [r7, #20]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	429a      	cmp	r2, r3
 800363a:	dbf1      	blt.n	8003620 <_write+0x12>
	}
	return len;
 800363c:	687b      	ldr	r3, [r7, #4]
}
 800363e:	4618      	mov	r0, r3
 8003640:	3718      	adds	r7, #24
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <_close>:

int _close(int file)
{
 8003646:	b480      	push	{r7}
 8003648:	b083      	sub	sp, #12
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
	return -1;
 800364e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003652:	4618      	mov	r0, r3
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr

0800365e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800365e:	b480      	push	{r7}
 8003660:	b083      	sub	sp, #12
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
 8003666:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800366e:	605a      	str	r2, [r3, #4]
	return 0;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	370c      	adds	r7, #12
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr

0800367e <_isatty>:

int _isatty(int file)
{
 800367e:	b480      	push	{r7}
 8003680:	b083      	sub	sp, #12
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
	return 1;
 8003686:	2301      	movs	r3, #1
}
 8003688:	4618      	mov	r0, r3
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr

08003694 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003694:	b480      	push	{r7}
 8003696:	b085      	sub	sp, #20
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]
	return 0;
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3714      	adds	r7, #20
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
	...

080036b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b086      	sub	sp, #24
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80036b8:	4a14      	ldr	r2, [pc, #80]	; (800370c <_sbrk+0x5c>)
 80036ba:	4b15      	ldr	r3, [pc, #84]	; (8003710 <_sbrk+0x60>)
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80036c4:	4b13      	ldr	r3, [pc, #76]	; (8003714 <_sbrk+0x64>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d102      	bne.n	80036d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80036cc:	4b11      	ldr	r3, [pc, #68]	; (8003714 <_sbrk+0x64>)
 80036ce:	4a12      	ldr	r2, [pc, #72]	; (8003718 <_sbrk+0x68>)
 80036d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80036d2:	4b10      	ldr	r3, [pc, #64]	; (8003714 <_sbrk+0x64>)
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4413      	add	r3, r2
 80036da:	693a      	ldr	r2, [r7, #16]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d207      	bcs.n	80036f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80036e0:	f007 f8e0 	bl	800a8a4 <__errno>
 80036e4:	4603      	mov	r3, r0
 80036e6:	220c      	movs	r2, #12
 80036e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80036ea:	f04f 33ff 	mov.w	r3, #4294967295
 80036ee:	e009      	b.n	8003704 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80036f0:	4b08      	ldr	r3, [pc, #32]	; (8003714 <_sbrk+0x64>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80036f6:	4b07      	ldr	r3, [pc, #28]	; (8003714 <_sbrk+0x64>)
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4413      	add	r3, r2
 80036fe:	4a05      	ldr	r2, [pc, #20]	; (8003714 <_sbrk+0x64>)
 8003700:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003702:	68fb      	ldr	r3, [r7, #12]
}
 8003704:	4618      	mov	r0, r3
 8003706:	3718      	adds	r7, #24
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	20018000 	.word	0x20018000
 8003710:	00000400 	.word	0x00000400
 8003714:	200002e0 	.word	0x200002e0
 8003718:	20000b10 	.word	0x20000b10

0800371c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800371c:	b480      	push	{r7}
 800371e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003720:	4b15      	ldr	r3, [pc, #84]	; (8003778 <SystemInit+0x5c>)
 8003722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003726:	4a14      	ldr	r2, [pc, #80]	; (8003778 <SystemInit+0x5c>)
 8003728:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800372c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003730:	4b12      	ldr	r3, [pc, #72]	; (800377c <SystemInit+0x60>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a11      	ldr	r2, [pc, #68]	; (800377c <SystemInit+0x60>)
 8003736:	f043 0301 	orr.w	r3, r3, #1
 800373a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800373c:	4b0f      	ldr	r3, [pc, #60]	; (800377c <SystemInit+0x60>)
 800373e:	2200      	movs	r2, #0
 8003740:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8003742:	4b0e      	ldr	r3, [pc, #56]	; (800377c <SystemInit+0x60>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a0d      	ldr	r2, [pc, #52]	; (800377c <SystemInit+0x60>)
 8003748:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800374c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8003750:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8003752:	4b0a      	ldr	r3, [pc, #40]	; (800377c <SystemInit+0x60>)
 8003754:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003758:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800375a:	4b08      	ldr	r3, [pc, #32]	; (800377c <SystemInit+0x60>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a07      	ldr	r2, [pc, #28]	; (800377c <SystemInit+0x60>)
 8003760:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003764:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003766:	4b05      	ldr	r3, [pc, #20]	; (800377c <SystemInit+0x60>)
 8003768:	2200      	movs	r2, #0
 800376a:	619a      	str	r2, [r3, #24]
}
 800376c:	bf00      	nop
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	e000ed00 	.word	0xe000ed00
 800377c:	40021000 	.word	0x40021000

08003780 <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
DMA_HandleTypeDef hdma_tim4_ch1;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b090      	sub	sp, #64	; 0x40
 8003784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003786:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800378a:	2200      	movs	r2, #0
 800378c:	601a      	str	r2, [r3, #0]
 800378e:	605a      	str	r2, [r3, #4]
 8003790:	609a      	str	r2, [r3, #8]
 8003792:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8003794:	f107 031c 	add.w	r3, r7, #28
 8003798:	2200      	movs	r2, #0
 800379a:	601a      	str	r2, [r3, #0]
 800379c:	605a      	str	r2, [r3, #4]
 800379e:	609a      	str	r2, [r3, #8]
 80037a0:	60da      	str	r2, [r3, #12]
 80037a2:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037a4:	f107 0310 	add.w	r3, r7, #16
 80037a8:	2200      	movs	r2, #0
 80037aa:	601a      	str	r2, [r3, #0]
 80037ac:	605a      	str	r2, [r3, #4]
 80037ae:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80037b0:	463b      	mov	r3, r7
 80037b2:	2200      	movs	r2, #0
 80037b4:	601a      	str	r2, [r3, #0]
 80037b6:	605a      	str	r2, [r3, #4]
 80037b8:	609a      	str	r2, [r3, #8]
 80037ba:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80037bc:	4b35      	ldr	r3, [pc, #212]	; (8003894 <MX_TIM2_Init+0x114>)
 80037be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80037c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 80037c4:	4b33      	ldr	r3, [pc, #204]	; (8003894 <MX_TIM2_Init+0x114>)
 80037c6:	224f      	movs	r2, #79	; 0x4f
 80037c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037ca:	4b32      	ldr	r3, [pc, #200]	; (8003894 <MX_TIM2_Init+0x114>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80037d0:	4b30      	ldr	r3, [pc, #192]	; (8003894 <MX_TIM2_Init+0x114>)
 80037d2:	f04f 32ff 	mov.w	r2, #4294967295
 80037d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037d8:	4b2e      	ldr	r3, [pc, #184]	; (8003894 <MX_TIM2_Init+0x114>)
 80037da:	2200      	movs	r2, #0
 80037dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037de:	4b2d      	ldr	r3, [pc, #180]	; (8003894 <MX_TIM2_Init+0x114>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80037e4:	482b      	ldr	r0, [pc, #172]	; (8003894 <MX_TIM2_Init+0x114>)
 80037e6:	f004 f8ee 	bl	80079c6 <HAL_TIM_Base_Init>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d001      	beq.n	80037f4 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80037f0:	f7fe f84a 	bl	8001888 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80037f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037f8:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80037fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80037fe:	4619      	mov	r1, r3
 8003800:	4824      	ldr	r0, [pc, #144]	; (8003894 <MX_TIM2_Init+0x114>)
 8003802:	f005 f90d 	bl	8008a20 <HAL_TIM_ConfigClockSource>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d001      	beq.n	8003810 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 800380c:	f7fe f83c 	bl	8001888 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8003810:	4820      	ldr	r0, [pc, #128]	; (8003894 <MX_TIM2_Init+0x114>)
 8003812:	f004 fc89 	bl	8008128 <HAL_TIM_IC_Init>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d001      	beq.n	8003820 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 800381c:	f7fe f834 	bl	8001888 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8003820:	2304      	movs	r3, #4
 8003822:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 8003824:	2340      	movs	r3, #64	; 0x40
 8003826:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003828:	2300      	movs	r3, #0
 800382a:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 800382c:	2300      	movs	r3, #0
 800382e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8003830:	f107 031c 	add.w	r3, r7, #28
 8003834:	4619      	mov	r1, r3
 8003836:	4817      	ldr	r0, [pc, #92]	; (8003894 <MX_TIM2_Init+0x114>)
 8003838:	f005 f9bb 	bl	8008bb2 <HAL_TIM_SlaveConfigSynchro>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d001      	beq.n	8003846 <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 8003842:	f7fe f821 	bl	8001888 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003846:	2300      	movs	r3, #0
 8003848:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800384a:	2300      	movs	r3, #0
 800384c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800384e:	f107 0310 	add.w	r3, r7, #16
 8003852:	4619      	mov	r1, r3
 8003854:	480f      	ldr	r0, [pc, #60]	; (8003894 <MX_TIM2_Init+0x114>)
 8003856:	f006 f963 	bl	8009b20 <HAL_TIMEx_MasterConfigSynchronization>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d001      	beq.n	8003864 <MX_TIM2_Init+0xe4>
  {
    Error_Handler();
 8003860:	f7fe f812 	bl	8001888 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8003864:	2302      	movs	r3, #2
 8003866:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003868:	2301      	movs	r3, #1
 800386a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800386c:	2300      	movs	r3, #0
 800386e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8003870:	2300      	movs	r3, #0
 8003872:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003874:	463b      	mov	r3, r7
 8003876:	2200      	movs	r2, #0
 8003878:	4619      	mov	r1, r3
 800387a:	4806      	ldr	r0, [pc, #24]	; (8003894 <MX_TIM2_Init+0x114>)
 800387c:	f004 ff1f 	bl	80086be <HAL_TIM_IC_ConfigChannel>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d001      	beq.n	800388a <MX_TIM2_Init+0x10a>
  {
    Error_Handler();
 8003886:	f7fd ffff 	bl	8001888 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800388a:	bf00      	nop
 800388c:	3740      	adds	r7, #64	; 0x40
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	200009f4 	.word	0x200009f4

08003898 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b08e      	sub	sp, #56	; 0x38
 800389c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800389e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80038a2:	2200      	movs	r2, #0
 80038a4:	601a      	str	r2, [r3, #0]
 80038a6:	605a      	str	r2, [r3, #4]
 80038a8:	609a      	str	r2, [r3, #8]
 80038aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038ac:	f107 031c 	add.w	r3, r7, #28
 80038b0:	2200      	movs	r2, #0
 80038b2:	601a      	str	r2, [r3, #0]
 80038b4:	605a      	str	r2, [r3, #4]
 80038b6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80038b8:	463b      	mov	r3, r7
 80038ba:	2200      	movs	r2, #0
 80038bc:	601a      	str	r2, [r3, #0]
 80038be:	605a      	str	r2, [r3, #4]
 80038c0:	609a      	str	r2, [r3, #8]
 80038c2:	60da      	str	r2, [r3, #12]
 80038c4:	611a      	str	r2, [r3, #16]
 80038c6:	615a      	str	r2, [r3, #20]
 80038c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80038ca:	4b2c      	ldr	r3, [pc, #176]	; (800397c <MX_TIM4_Init+0xe4>)
 80038cc:	4a2c      	ldr	r2, [pc, #176]	; (8003980 <MX_TIM4_Init+0xe8>)
 80038ce:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80038d0:	4b2a      	ldr	r3, [pc, #168]	; (800397c <MX_TIM4_Init+0xe4>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038d6:	4b29      	ldr	r3, [pc, #164]	; (800397c <MX_TIM4_Init+0xe4>)
 80038d8:	2200      	movs	r2, #0
 80038da:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 199;
 80038dc:	4b27      	ldr	r3, [pc, #156]	; (800397c <MX_TIM4_Init+0xe4>)
 80038de:	22c7      	movs	r2, #199	; 0xc7
 80038e0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038e2:	4b26      	ldr	r3, [pc, #152]	; (800397c <MX_TIM4_Init+0xe4>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038e8:	4b24      	ldr	r3, [pc, #144]	; (800397c <MX_TIM4_Init+0xe4>)
 80038ea:	2200      	movs	r2, #0
 80038ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80038ee:	4823      	ldr	r0, [pc, #140]	; (800397c <MX_TIM4_Init+0xe4>)
 80038f0:	f004 f869 	bl	80079c6 <HAL_TIM_Base_Init>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d001      	beq.n	80038fe <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80038fa:	f7fd ffc5 	bl	8001888 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80038fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003902:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003904:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003908:	4619      	mov	r1, r3
 800390a:	481c      	ldr	r0, [pc, #112]	; (800397c <MX_TIM4_Init+0xe4>)
 800390c:	f005 f888 	bl	8008a20 <HAL_TIM_ConfigClockSource>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8003916:	f7fd ffb7 	bl	8001888 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800391a:	4818      	ldr	r0, [pc, #96]	; (800397c <MX_TIM4_Init+0xe4>)
 800391c:	f004 f982 	bl	8007c24 <HAL_TIM_PWM_Init>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8003926:	f7fd ffaf 	bl	8001888 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800392a:	2300      	movs	r3, #0
 800392c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800392e:	2300      	movs	r3, #0
 8003930:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003932:	f107 031c 	add.w	r3, r7, #28
 8003936:	4619      	mov	r1, r3
 8003938:	4810      	ldr	r0, [pc, #64]	; (800397c <MX_TIM4_Init+0xe4>)
 800393a:	f006 f8f1 	bl	8009b20 <HAL_TIMEx_MasterConfigSynchronization>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d001      	beq.n	8003948 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8003944:	f7fd ffa0 	bl	8001888 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003948:	2360      	movs	r3, #96	; 0x60
 800394a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800394c:	2300      	movs	r3, #0
 800394e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003950:	2300      	movs	r3, #0
 8003952:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003954:	2300      	movs	r3, #0
 8003956:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003958:	463b      	mov	r3, r7
 800395a:	2200      	movs	r2, #0
 800395c:	4619      	mov	r1, r3
 800395e:	4807      	ldr	r0, [pc, #28]	; (800397c <MX_TIM4_Init+0xe4>)
 8003960:	f004 ff4a 	bl	80087f8 <HAL_TIM_PWM_ConfigChannel>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d001      	beq.n	800396e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800396a:	f7fd ff8d 	bl	8001888 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800396e:	4803      	ldr	r0, [pc, #12]	; (800397c <MX_TIM4_Init+0xe4>)
 8003970:	f000 f8d6 	bl	8003b20 <HAL_TIM_MspPostInit>

}
 8003974:	bf00      	nop
 8003976:	3738      	adds	r7, #56	; 0x38
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	2000095c 	.word	0x2000095c
 8003980:	40000800 	.word	0x40000800

08003984 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800398a:	1d3b      	adds	r3, r7, #4
 800398c:	2200      	movs	r2, #0
 800398e:	601a      	str	r2, [r3, #0]
 8003990:	605a      	str	r2, [r3, #4]
 8003992:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003994:	4b15      	ldr	r3, [pc, #84]	; (80039ec <MX_TIM6_Init+0x68>)
 8003996:	4a16      	ldr	r2, [pc, #88]	; (80039f0 <MX_TIM6_Init+0x6c>)
 8003998:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 800399a:	4b14      	ldr	r3, [pc, #80]	; (80039ec <MX_TIM6_Init+0x68>)
 800399c:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80039a0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039a2:	4b12      	ldr	r3, [pc, #72]	; (80039ec <MX_TIM6_Init+0x68>)
 80039a4:	2200      	movs	r2, #0
 80039a6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 2499;
 80039a8:	4b10      	ldr	r3, [pc, #64]	; (80039ec <MX_TIM6_Init+0x68>)
 80039aa:	f640 12c3 	movw	r2, #2499	; 0x9c3
 80039ae:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039b0:	4b0e      	ldr	r3, [pc, #56]	; (80039ec <MX_TIM6_Init+0x68>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80039b6:	480d      	ldr	r0, [pc, #52]	; (80039ec <MX_TIM6_Init+0x68>)
 80039b8:	f004 f805 	bl	80079c6 <HAL_TIM_Base_Init>
 80039bc:	4603      	mov	r3, r0
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d001      	beq.n	80039c6 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80039c2:	f7fd ff61 	bl	8001888 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039c6:	2300      	movs	r3, #0
 80039c8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039ca:	2300      	movs	r3, #0
 80039cc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80039ce:	1d3b      	adds	r3, r7, #4
 80039d0:	4619      	mov	r1, r3
 80039d2:	4806      	ldr	r0, [pc, #24]	; (80039ec <MX_TIM6_Init+0x68>)
 80039d4:	f006 f8a4 	bl	8009b20 <HAL_TIMEx_MasterConfigSynchronization>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d001      	beq.n	80039e2 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80039de:	f7fd ff53 	bl	8001888 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80039e2:	bf00      	nop
 80039e4:	3710      	adds	r7, #16
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	200009a8 	.word	0x200009a8
 80039f0:	40001000 	.word	0x40001000

080039f4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b08c      	sub	sp, #48	; 0x30
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039fc:	f107 031c 	add.w	r3, r7, #28
 8003a00:	2200      	movs	r2, #0
 8003a02:	601a      	str	r2, [r3, #0]
 8003a04:	605a      	str	r2, [r3, #4]
 8003a06:	609a      	str	r2, [r3, #8]
 8003a08:	60da      	str	r2, [r3, #12]
 8003a0a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a14:	d129      	bne.n	8003a6a <HAL_TIM_Base_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003a16:	4b3d      	ldr	r3, [pc, #244]	; (8003b0c <HAL_TIM_Base_MspInit+0x118>)
 8003a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a1a:	4a3c      	ldr	r2, [pc, #240]	; (8003b0c <HAL_TIM_Base_MspInit+0x118>)
 8003a1c:	f043 0301 	orr.w	r3, r3, #1
 8003a20:	6593      	str	r3, [r2, #88]	; 0x58
 8003a22:	4b3a      	ldr	r3, [pc, #232]	; (8003b0c <HAL_TIM_Base_MspInit+0x118>)
 8003a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	61bb      	str	r3, [r7, #24]
 8003a2c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a2e:	4b37      	ldr	r3, [pc, #220]	; (8003b0c <HAL_TIM_Base_MspInit+0x118>)
 8003a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a32:	4a36      	ldr	r2, [pc, #216]	; (8003b0c <HAL_TIM_Base_MspInit+0x118>)
 8003a34:	f043 0301 	orr.w	r3, r3, #1
 8003a38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a3a:	4b34      	ldr	r3, [pc, #208]	; (8003b0c <HAL_TIM_Base_MspInit+0x118>)
 8003a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	617b      	str	r3, [r7, #20]
 8003a44:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003a46:	2301      	movs	r3, #1
 8003a48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a4a:	2302      	movs	r3, #2
 8003a4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a52:	2300      	movs	r3, #0
 8003a54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003a56:	2301      	movs	r3, #1
 8003a58:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a5a:	f107 031c 	add.w	r3, r7, #28
 8003a5e:	4619      	mov	r1, r3
 8003a60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a64:	f001 fde8 	bl	8005638 <HAL_GPIO_Init>
    __HAL_RCC_TIM6_CLK_ENABLE();
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8003a68:	e04c      	b.n	8003b04 <HAL_TIM_Base_MspInit+0x110>
  else if(tim_baseHandle->Instance==TIM4)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a28      	ldr	r2, [pc, #160]	; (8003b10 <HAL_TIM_Base_MspInit+0x11c>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d136      	bne.n	8003ae2 <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003a74:	4b25      	ldr	r3, [pc, #148]	; (8003b0c <HAL_TIM_Base_MspInit+0x118>)
 8003a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a78:	4a24      	ldr	r2, [pc, #144]	; (8003b0c <HAL_TIM_Base_MspInit+0x118>)
 8003a7a:	f043 0304 	orr.w	r3, r3, #4
 8003a7e:	6593      	str	r3, [r2, #88]	; 0x58
 8003a80:	4b22      	ldr	r3, [pc, #136]	; (8003b0c <HAL_TIM_Base_MspInit+0x118>)
 8003a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a84:	f003 0304 	and.w	r3, r3, #4
 8003a88:	613b      	str	r3, [r7, #16]
 8003a8a:	693b      	ldr	r3, [r7, #16]
    hdma_tim4_ch1.Instance = DMA1_Channel1;
 8003a8c:	4b21      	ldr	r3, [pc, #132]	; (8003b14 <HAL_TIM_Base_MspInit+0x120>)
 8003a8e:	4a22      	ldr	r2, [pc, #136]	; (8003b18 <HAL_TIM_Base_MspInit+0x124>)
 8003a90:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Request = DMA_REQUEST_6;
 8003a92:	4b20      	ldr	r3, [pc, #128]	; (8003b14 <HAL_TIM_Base_MspInit+0x120>)
 8003a94:	2206      	movs	r2, #6
 8003a96:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003a98:	4b1e      	ldr	r3, [pc, #120]	; (8003b14 <HAL_TIM_Base_MspInit+0x120>)
 8003a9a:	2210      	movs	r2, #16
 8003a9c:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a9e:	4b1d      	ldr	r3, [pc, #116]	; (8003b14 <HAL_TIM_Base_MspInit+0x120>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003aa4:	4b1b      	ldr	r3, [pc, #108]	; (8003b14 <HAL_TIM_Base_MspInit+0x120>)
 8003aa6:	2280      	movs	r2, #128	; 0x80
 8003aa8:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003aaa:	4b1a      	ldr	r3, [pc, #104]	; (8003b14 <HAL_TIM_Base_MspInit+0x120>)
 8003aac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ab0:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003ab2:	4b18      	ldr	r3, [pc, #96]	; (8003b14 <HAL_TIM_Base_MspInit+0x120>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_NORMAL;
 8003ab8:	4b16      	ldr	r3, [pc, #88]	; (8003b14 <HAL_TIM_Base_MspInit+0x120>)
 8003aba:	2200      	movs	r2, #0
 8003abc:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003abe:	4b15      	ldr	r3, [pc, #84]	; (8003b14 <HAL_TIM_Base_MspInit+0x120>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 8003ac4:	4813      	ldr	r0, [pc, #76]	; (8003b14 <HAL_TIM_Base_MspInit+0x120>)
 8003ac6:	f001 fbbf 	bl	8005248 <HAL_DMA_Init>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d001      	beq.n	8003ad4 <HAL_TIM_Base_MspInit+0xe0>
      Error_Handler();
 8003ad0:	f7fd feda 	bl	8001888 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	4a0f      	ldr	r2, [pc, #60]	; (8003b14 <HAL_TIM_Base_MspInit+0x120>)
 8003ad8:	625a      	str	r2, [r3, #36]	; 0x24
 8003ada:	4a0e      	ldr	r2, [pc, #56]	; (8003b14 <HAL_TIM_Base_MspInit+0x120>)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6293      	str	r3, [r2, #40]	; 0x28
}
 8003ae0:	e010      	b.n	8003b04 <HAL_TIM_Base_MspInit+0x110>
  else if(tim_baseHandle->Instance==TIM6)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a0d      	ldr	r2, [pc, #52]	; (8003b1c <HAL_TIM_Base_MspInit+0x128>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d10b      	bne.n	8003b04 <HAL_TIM_Base_MspInit+0x110>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003aec:	4b07      	ldr	r3, [pc, #28]	; (8003b0c <HAL_TIM_Base_MspInit+0x118>)
 8003aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003af0:	4a06      	ldr	r2, [pc, #24]	; (8003b0c <HAL_TIM_Base_MspInit+0x118>)
 8003af2:	f043 0310 	orr.w	r3, r3, #16
 8003af6:	6593      	str	r3, [r2, #88]	; 0x58
 8003af8:	4b04      	ldr	r3, [pc, #16]	; (8003b0c <HAL_TIM_Base_MspInit+0x118>)
 8003afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003afc:	f003 0310 	and.w	r3, r3, #16
 8003b00:	60fb      	str	r3, [r7, #12]
 8003b02:	68fb      	ldr	r3, [r7, #12]
}
 8003b04:	bf00      	nop
 8003b06:	3730      	adds	r7, #48	; 0x30
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	40021000 	.word	0x40021000
 8003b10:	40000800 	.word	0x40000800
 8003b14:	20000a40 	.word	0x20000a40
 8003b18:	40020008 	.word	0x40020008
 8003b1c:	40001000 	.word	0x40001000

08003b20 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b088      	sub	sp, #32
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b28:	f107 030c 	add.w	r3, r7, #12
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	601a      	str	r2, [r3, #0]
 8003b30:	605a      	str	r2, [r3, #4]
 8003b32:	609a      	str	r2, [r3, #8]
 8003b34:	60da      	str	r2, [r3, #12]
 8003b36:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a11      	ldr	r2, [pc, #68]	; (8003b84 <HAL_TIM_MspPostInit+0x64>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d11b      	bne.n	8003b7a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b42:	4b11      	ldr	r3, [pc, #68]	; (8003b88 <HAL_TIM_MspPostInit+0x68>)
 8003b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b46:	4a10      	ldr	r2, [pc, #64]	; (8003b88 <HAL_TIM_MspPostInit+0x68>)
 8003b48:	f043 0302 	orr.w	r3, r3, #2
 8003b4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b4e:	4b0e      	ldr	r3, [pc, #56]	; (8003b88 <HAL_TIM_MspPostInit+0x68>)
 8003b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b52:	f003 0302 	and.w	r3, r3, #2
 8003b56:	60bb      	str	r3, [r7, #8]
 8003b58:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003b5a:	2340      	movs	r3, #64	; 0x40
 8003b5c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b5e:	2302      	movs	r3, #2
 8003b60:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b62:	2300      	movs	r3, #0
 8003b64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b66:	2300      	movs	r3, #0
 8003b68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003b6a:	2302      	movs	r3, #2
 8003b6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b6e:	f107 030c 	add.w	r3, r7, #12
 8003b72:	4619      	mov	r1, r3
 8003b74:	4805      	ldr	r0, [pc, #20]	; (8003b8c <HAL_TIM_MspPostInit+0x6c>)
 8003b76:	f001 fd5f 	bl	8005638 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003b7a:	bf00      	nop
 8003b7c:	3720      	adds	r7, #32
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	40000800 	.word	0x40000800
 8003b88:	40021000 	.word	0x40021000
 8003b8c:	48000400 	.word	0x48000400

08003b90 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003b94:	4b16      	ldr	r3, [pc, #88]	; (8003bf0 <MX_USART3_UART_Init+0x60>)
 8003b96:	4a17      	ldr	r2, [pc, #92]	; (8003bf4 <MX_USART3_UART_Init+0x64>)
 8003b98:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8003b9a:	4b15      	ldr	r3, [pc, #84]	; (8003bf0 <MX_USART3_UART_Init+0x60>)
 8003b9c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003ba0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003ba2:	4b13      	ldr	r3, [pc, #76]	; (8003bf0 <MX_USART3_UART_Init+0x60>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003ba8:	4b11      	ldr	r3, [pc, #68]	; (8003bf0 <MX_USART3_UART_Init+0x60>)
 8003baa:	2200      	movs	r2, #0
 8003bac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003bae:	4b10      	ldr	r3, [pc, #64]	; (8003bf0 <MX_USART3_UART_Init+0x60>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003bb4:	4b0e      	ldr	r3, [pc, #56]	; (8003bf0 <MX_USART3_UART_Init+0x60>)
 8003bb6:	220c      	movs	r2, #12
 8003bb8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003bba:	4b0d      	ldr	r3, [pc, #52]	; (8003bf0 <MX_USART3_UART_Init+0x60>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003bc0:	4b0b      	ldr	r3, [pc, #44]	; (8003bf0 <MX_USART3_UART_Init+0x60>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003bc6:	4b0a      	ldr	r3, [pc, #40]	; (8003bf0 <MX_USART3_UART_Init+0x60>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8003bcc:	4b08      	ldr	r3, [pc, #32]	; (8003bf0 <MX_USART3_UART_Init+0x60>)
 8003bce:	2210      	movs	r2, #16
 8003bd0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8003bd2:	4b07      	ldr	r3, [pc, #28]	; (8003bf0 <MX_USART3_UART_Init+0x60>)
 8003bd4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003bd8:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003bda:	4805      	ldr	r0, [pc, #20]	; (8003bf0 <MX_USART3_UART_Init+0x60>)
 8003bdc:	f006 f846 	bl	8009c6c <HAL_UART_Init>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <MX_USART3_UART_Init+0x5a>
  {
    Error_Handler();
 8003be6:	f7fd fe4f 	bl	8001888 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003bea:	bf00      	nop
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	20000a88 	.word	0x20000a88
 8003bf4:	40004800 	.word	0x40004800

08003bf8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b0ac      	sub	sp, #176	; 0xb0
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c00:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003c04:	2200      	movs	r2, #0
 8003c06:	601a      	str	r2, [r3, #0]
 8003c08:	605a      	str	r2, [r3, #4]
 8003c0a:	609a      	str	r2, [r3, #8]
 8003c0c:	60da      	str	r2, [r3, #12]
 8003c0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003c10:	f107 0314 	add.w	r3, r7, #20
 8003c14:	2288      	movs	r2, #136	; 0x88
 8003c16:	2100      	movs	r1, #0
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f006 fe6d 	bl	800a8f8 <memset>
  if(uartHandle->Instance==USART3)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a2b      	ldr	r2, [pc, #172]	; (8003cd0 <HAL_UART_MspInit+0xd8>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d14f      	bne.n	8003cc8 <HAL_UART_MspInit+0xd0>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003c28:	2304      	movs	r3, #4
 8003c2a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c30:	f107 0314 	add.w	r3, r7, #20
 8003c34:	4618      	mov	r0, r3
 8003c36:	f002 fd25 	bl	8006684 <HAL_RCCEx_PeriphCLKConfig>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d001      	beq.n	8003c44 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003c40:	f7fd fe22 	bl	8001888 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003c44:	4b23      	ldr	r3, [pc, #140]	; (8003cd4 <HAL_UART_MspInit+0xdc>)
 8003c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c48:	4a22      	ldr	r2, [pc, #136]	; (8003cd4 <HAL_UART_MspInit+0xdc>)
 8003c4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c4e:	6593      	str	r3, [r2, #88]	; 0x58
 8003c50:	4b20      	ldr	r3, [pc, #128]	; (8003cd4 <HAL_UART_MspInit+0xdc>)
 8003c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c58:	613b      	str	r3, [r7, #16]
 8003c5a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c5c:	4b1d      	ldr	r3, [pc, #116]	; (8003cd4 <HAL_UART_MspInit+0xdc>)
 8003c5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c60:	4a1c      	ldr	r2, [pc, #112]	; (8003cd4 <HAL_UART_MspInit+0xdc>)
 8003c62:	f043 0304 	orr.w	r3, r3, #4
 8003c66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c68:	4b1a      	ldr	r3, [pc, #104]	; (8003cd4 <HAL_UART_MspInit+0xdc>)
 8003c6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c6c:	f003 0304 	and.w	r3, r3, #4
 8003c70:	60fb      	str	r3, [r7, #12]
 8003c72:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC4     ------> USART3_TX
    PC5     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003c74:	2310      	movs	r3, #16
 8003c76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c7a:	2312      	movs	r3, #18
 8003c7c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c80:	2300      	movs	r3, #0
 8003c82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c86:	2303      	movs	r3, #3
 8003c88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003c8c:	2307      	movs	r3, #7
 8003c8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c92:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003c96:	4619      	mov	r1, r3
 8003c98:	480f      	ldr	r0, [pc, #60]	; (8003cd8 <HAL_UART_MspInit+0xe0>)
 8003c9a:	f001 fccd 	bl	8005638 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003c9e:	2320      	movs	r3, #32
 8003ca0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ca4:	2302      	movs	r3, #2
 8003ca6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003caa:	2300      	movs	r3, #0
 8003cac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003cb6:	2307      	movs	r3, #7
 8003cb8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003cbc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	4805      	ldr	r0, [pc, #20]	; (8003cd8 <HAL_UART_MspInit+0xe0>)
 8003cc4:	f001 fcb8 	bl	8005638 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003cc8:	bf00      	nop
 8003cca:	37b0      	adds	r7, #176	; 0xb0
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	40004800 	.word	0x40004800
 8003cd4:	40021000 	.word	0x40021000
 8003cd8:	48000800 	.word	0x48000800

08003cdc <set_byte>:

static uint8_t led_buffer[RESET_LEN+24*LED_N+1];

// Konwertowanie 8 bitowej liczby na 8 bajtow;

static void set_byte(uint32_t pos, uint8_t value){
 8003cdc:	b480      	push	{r7}
 8003cde:	b085      	sub	sp, #20
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	70fb      	strb	r3, [r7, #3]
	int i;
	for(i=0; i<8;i++){
 8003ce8:	2300      	movs	r3, #0
 8003cea:	60fb      	str	r3, [r7, #12]
 8003cec:	e016      	b.n	8003d1c <set_byte+0x40>
		if(value & 0x80){
 8003cee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	da06      	bge.n	8003d04 <set_byte+0x28>
			led_buffer[pos+i]=BIT_1_TIME;
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	4a0c      	ldr	r2, [pc, #48]	; (8003d30 <set_byte+0x54>)
 8003cfe:	2140      	movs	r1, #64	; 0x40
 8003d00:	54d1      	strb	r1, [r2, r3]
 8003d02:	e005      	b.n	8003d10 <set_byte+0x34>
		}else{
			led_buffer[pos+i]=BIT_0_TIME;
 8003d04:	68fa      	ldr	r2, [r7, #12]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4413      	add	r3, r2
 8003d0a:	4a09      	ldr	r2, [pc, #36]	; (8003d30 <set_byte+0x54>)
 8003d0c:	2120      	movs	r1, #32
 8003d0e:	54d1      	strb	r1, [r2, r3]
		}
		value<<=1;
 8003d10:	78fb      	ldrb	r3, [r7, #3]
 8003d12:	005b      	lsls	r3, r3, #1
 8003d14:	70fb      	strb	r3, [r7, #3]
	for(i=0; i<8;i++){
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	3301      	adds	r3, #1
 8003d1a:	60fb      	str	r3, [r7, #12]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2b07      	cmp	r3, #7
 8003d20:	dde5      	ble.n	8003cee <set_byte+0x12>
	}
}
 8003d22:	bf00      	nop
 8003d24:	bf00      	nop
 8003d26:	3714      	adds	r7, #20
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr
 8003d30:	200002e4 	.word	0x200002e4

08003d34 <ws2811_init>:


// DEFINICJE FUNKCJI

void ws2811_init(void){
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
	int i;

	// Wysłanie resetu:
	for(i=0;i<RESET_LEN;i++){
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	607b      	str	r3, [r7, #4]
 8003d3e:	e007      	b.n	8003d50 <ws2811_init+0x1c>
		led_buffer[i]=0;
 8003d40:	4a13      	ldr	r2, [pc, #76]	; (8003d90 <ws2811_init+0x5c>)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4413      	add	r3, r2
 8003d46:	2200      	movs	r2, #0
 8003d48:	701a      	strb	r2, [r3, #0]
	for(i=0;i<RESET_LEN;i++){
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	607b      	str	r3, [r7, #4]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2b63      	cmp	r3, #99	; 0x63
 8003d54:	ddf4      	ble.n	8003d40 <ws2811_init+0xc>
	}

	// Zgaszenie wszystkich diod:
	for(i=0; i<24*LED_N;i++){
 8003d56:	2300      	movs	r3, #0
 8003d58:	607b      	str	r3, [r7, #4]
 8003d5a:	e007      	b.n	8003d6c <ws2811_init+0x38>
		led_buffer[RESET_LEN+i]=BIT_0_TIME;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	3364      	adds	r3, #100	; 0x64
 8003d60:	4a0b      	ldr	r2, [pc, #44]	; (8003d90 <ws2811_init+0x5c>)
 8003d62:	2120      	movs	r1, #32
 8003d64:	54d1      	strb	r1, [r2, r3]
	for(i=0; i<24*LED_N;i++){
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	3301      	adds	r3, #1
 8003d6a:	607b      	str	r3, [r7, #4]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f5b3 6fae 	cmp.w	r3, #1392	; 0x570
 8003d72:	dbf3      	blt.n	8003d5c <ws2811_init+0x28>
	}

	// Wypełnienie na koniec:

	led_buffer[RESET_LEN+24*LED_N]=100;
 8003d74:	4b06      	ldr	r3, [pc, #24]	; (8003d90 <ws2811_init+0x5c>)
 8003d76:	2264      	movs	r2, #100	; 0x64
 8003d78:	f883 25d4 	strb.w	r2, [r3, #1492]	; 0x5d4

	// Wlączenie timera:
	HAL_TIM_Base_Start(&htim4);
 8003d7c:	4805      	ldr	r0, [pc, #20]	; (8003d94 <ws2811_init+0x60>)
 8003d7e:	f003 fe79 	bl	8007a74 <HAL_TIM_Base_Start>
	// Zacznij odswiezanie:
	ws2811_update();
 8003d82:	f000 f88f 	bl	8003ea4 <ws2811_update>

}
 8003d86:	bf00      	nop
 8003d88:	3708      	adds	r7, #8
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	200002e4 	.word	0x200002e4
 8003d94:	2000095c 	.word	0x2000095c

08003d98 <ws2811_firstAndSecondSegmentsDisplayReset>:

void ws2811_firstAndSecondSegmentsDisplayReset(void){
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
	int i;

		// Wysłanie resetu:
		for(i=0;i<RESET_LEN;i++){
 8003d9e:	2300      	movs	r3, #0
 8003da0:	607b      	str	r3, [r7, #4]
 8003da2:	e007      	b.n	8003db4 <ws2811_firstAndSecondSegmentsDisplayReset+0x1c>
			led_buffer[i]=0;
 8003da4:	4a11      	ldr	r2, [pc, #68]	; (8003dec <ws2811_firstAndSecondSegmentsDisplayReset+0x54>)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4413      	add	r3, r2
 8003daa:	2200      	movs	r2, #0
 8003dac:	701a      	strb	r2, [r3, #0]
		for(i=0;i<RESET_LEN;i++){
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	3301      	adds	r3, #1
 8003db2:	607b      	str	r3, [r7, #4]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2b63      	cmp	r3, #99	; 0x63
 8003db8:	ddf4      	ble.n	8003da4 <ws2811_firstAndSecondSegmentsDisplayReset+0xc>
		}

		// Zgaszenie wszystkich diod:
		for(i=0; i<24*LED_N_HOURS_FOR_SECTOR;i++){
 8003dba:	2300      	movs	r3, #0
 8003dbc:	607b      	str	r3, [r7, #4]
 8003dbe:	e007      	b.n	8003dd0 <ws2811_firstAndSecondSegmentsDisplayReset+0x38>
			led_buffer[RESET_LEN+i]=BIT_0_TIME;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	3364      	adds	r3, #100	; 0x64
 8003dc4:	4a09      	ldr	r2, [pc, #36]	; (8003dec <ws2811_firstAndSecondSegmentsDisplayReset+0x54>)
 8003dc6:	2120      	movs	r1, #32
 8003dc8:	54d1      	strb	r1, [r2, r3]
		for(i=0; i<24*LED_N_HOURS_FOR_SECTOR;i++){
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	3301      	adds	r3, #1
 8003dce:	607b      	str	r3, [r7, #4]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f5b3 7f28 	cmp.w	r3, #672	; 0x2a0
 8003dd6:	dbf3      	blt.n	8003dc0 <ws2811_firstAndSecondSegmentsDisplayReset+0x28>
		}

		// Wypełnienie na koniec:

		led_buffer[RESET_LEN+24*LED_N]=100;
 8003dd8:	4b04      	ldr	r3, [pc, #16]	; (8003dec <ws2811_firstAndSecondSegmentsDisplayReset+0x54>)
 8003dda:	2264      	movs	r2, #100	; 0x64
 8003ddc:	f883 25d4 	strb.w	r2, [r3, #1492]	; 0x5d4

		// Zacznij odswiezanie:
		ws2811_update();
 8003de0:	f000 f860 	bl	8003ea4 <ws2811_update>
}
 8003de4:	bf00      	nop
 8003de6:	3708      	adds	r7, #8
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	200002e4 	.word	0x200002e4

08003df0 <ws2811_ThirdAndFourthSegmentsDisplayReset>:

void ws2811_ThirdAndFourthSegmentsDisplayReset(void){
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
	int i;

		// Wysłanie resetu:
		for(i=0;i<RESET_LEN;i++){
 8003df6:	2300      	movs	r3, #0
 8003df8:	607b      	str	r3, [r7, #4]
 8003dfa:	e007      	b.n	8003e0c <ws2811_ThirdAndFourthSegmentsDisplayReset+0x1c>
			led_buffer[i]=0;
 8003dfc:	4a12      	ldr	r2, [pc, #72]	; (8003e48 <ws2811_ThirdAndFourthSegmentsDisplayReset+0x58>)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4413      	add	r3, r2
 8003e02:	2200      	movs	r2, #0
 8003e04:	701a      	strb	r2, [r3, #0]
		for(i=0;i<RESET_LEN;i++){
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	3301      	adds	r3, #1
 8003e0a:	607b      	str	r3, [r7, #4]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2b63      	cmp	r3, #99	; 0x63
 8003e10:	ddf4      	ble.n	8003dfc <ws2811_ThirdAndFourthSegmentsDisplayReset+0xc>
		}

		// Zgaszenie wszystkich diod:
		for(i=0; i<24*LED_N_MINUTES_FOR_SECTOR;i++){
 8003e12:	2300      	movs	r3, #0
 8003e14:	607b      	str	r3, [r7, #4]
 8003e16:	e008      	b.n	8003e2a <ws2811_ThirdAndFourthSegmentsDisplayReset+0x3a>
			led_buffer[RESET_LEN+24*LED_N_HOURS_FOR_SECTOR+24*2+i]=BIT_0_TIME;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8003e1e:	4a0a      	ldr	r2, [pc, #40]	; (8003e48 <ws2811_ThirdAndFourthSegmentsDisplayReset+0x58>)
 8003e20:	2120      	movs	r1, #32
 8003e22:	54d1      	strb	r1, [r2, r3]
		for(i=0; i<24*LED_N_MINUTES_FOR_SECTOR;i++){
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	3301      	adds	r3, #1
 8003e28:	607b      	str	r3, [r7, #4]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f5b3 7f28 	cmp.w	r3, #672	; 0x2a0
 8003e30:	dbf2      	blt.n	8003e18 <ws2811_ThirdAndFourthSegmentsDisplayReset+0x28>
		}

		// Wypełnienie na koniec:

		led_buffer[RESET_LEN+24*LED_N]=100;
 8003e32:	4b05      	ldr	r3, [pc, #20]	; (8003e48 <ws2811_ThirdAndFourthSegmentsDisplayReset+0x58>)
 8003e34:	2264      	movs	r2, #100	; 0x64
 8003e36:	f883 25d4 	strb.w	r2, [r3, #1492]	; 0x5d4

		// Zacznij odswiezanie:
		ws2811_update();
 8003e3a:	f000 f833 	bl	8003ea4 <ws2811_update>
}
 8003e3e:	bf00      	nop
 8003e40:	3708      	adds	r7, #8
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	200002e4 	.word	0x200002e4

08003e4c <ws2811_fullDisplayReset>:

void ws2811_fullDisplayReset(void){
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
	int i;

			// Wysłanie resetu:
			for(i=0;i<RESET_LEN;i++){
 8003e52:	2300      	movs	r3, #0
 8003e54:	607b      	str	r3, [r7, #4]
 8003e56:	e007      	b.n	8003e68 <ws2811_fullDisplayReset+0x1c>
				led_buffer[i]=0;
 8003e58:	4a11      	ldr	r2, [pc, #68]	; (8003ea0 <ws2811_fullDisplayReset+0x54>)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	2200      	movs	r2, #0
 8003e60:	701a      	strb	r2, [r3, #0]
			for(i=0;i<RESET_LEN;i++){
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	3301      	adds	r3, #1
 8003e66:	607b      	str	r3, [r7, #4]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2b63      	cmp	r3, #99	; 0x63
 8003e6c:	ddf4      	ble.n	8003e58 <ws2811_fullDisplayReset+0xc>
			}

			// Zgaszenie wszystkich diod:
			for(i=0; i<24*LED_N;i++){
 8003e6e:	2300      	movs	r3, #0
 8003e70:	607b      	str	r3, [r7, #4]
 8003e72:	e007      	b.n	8003e84 <ws2811_fullDisplayReset+0x38>
				led_buffer[RESET_LEN+i]=BIT_0_TIME;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	3364      	adds	r3, #100	; 0x64
 8003e78:	4a09      	ldr	r2, [pc, #36]	; (8003ea0 <ws2811_fullDisplayReset+0x54>)
 8003e7a:	2120      	movs	r1, #32
 8003e7c:	54d1      	strb	r1, [r2, r3]
			for(i=0; i<24*LED_N;i++){
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	3301      	adds	r3, #1
 8003e82:	607b      	str	r3, [r7, #4]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f5b3 6fae 	cmp.w	r3, #1392	; 0x570
 8003e8a:	dbf3      	blt.n	8003e74 <ws2811_fullDisplayReset+0x28>
			}

			// Wypełnienie na koniec:

			led_buffer[RESET_LEN+24*LED_N]=100;
 8003e8c:	4b04      	ldr	r3, [pc, #16]	; (8003ea0 <ws2811_fullDisplayReset+0x54>)
 8003e8e:	2264      	movs	r2, #100	; 0x64
 8003e90:	f883 25d4 	strb.w	r2, [r3, #1492]	; 0x5d4

			// Zacznij odswiezanie:
			ws2811_update();
 8003e94:	f000 f806 	bl	8003ea4 <ws2811_update>
	}
 8003e98:	bf00      	nop
 8003e9a:	3708      	adds	r7, #8
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	200002e4 	.word	0x200002e4

08003ea4 <ws2811_update>:



void ws2811_update(void){
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start_DMA(&htim4, TIM_CHANNEL_1, (uint32_t*)led_buffer, sizeof(led_buffer));
 8003ea8:	f240 53d5 	movw	r3, #1493	; 0x5d5
 8003eac:	4a03      	ldr	r2, [pc, #12]	; (8003ebc <ws2811_update+0x18>)
 8003eae:	2100      	movs	r1, #0
 8003eb0:	4803      	ldr	r0, [pc, #12]	; (8003ec0 <ws2811_update+0x1c>)
 8003eb2:	f003 ff19 	bl	8007ce8 <HAL_TIM_PWM_Start_DMA>
}
 8003eb6:	bf00      	nop
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	200002e4 	.word	0x200002e4
 8003ec0:	2000095c 	.word	0x2000095c

08003ec4 <ws2811_wait>:


void ws2811_wait(void){
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	af00      	add	r7, sp, #0
	while(HAL_TIM_GetChannelState(&htim4, TIM_CHANNEL_1)== HAL_TIM_CHANNEL_STATE_BUSY){
 8003ec8:	bf00      	nop
 8003eca:	2100      	movs	r1, #0
 8003ecc:	4804      	ldr	r0, [pc, #16]	; (8003ee0 <ws2811_wait+0x1c>)
 8003ece:	f004 ff35 	bl	8008d3c <HAL_TIM_GetChannelState>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d0f8      	beq.n	8003eca <ws2811_wait+0x6>

	}
}
 8003ed8:	bf00      	nop
 8003eda:	bf00      	nop
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	2000095c 	.word	0x2000095c

08003ee4 <ws2811_set_color>:


void ws2811_set_color(uint32_t led, uint8_t red, uint8_t green, uint8_t blue){
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	4608      	mov	r0, r1
 8003eee:	4611      	mov	r1, r2
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	70fb      	strb	r3, [r7, #3]
 8003ef6:	460b      	mov	r3, r1
 8003ef8:	70bb      	strb	r3, [r7, #2]
 8003efa:	4613      	mov	r3, r2
 8003efc:	707b      	strb	r3, [r7, #1]
	if(led<LED_N){
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2b39      	cmp	r3, #57	; 0x39
 8003f02:	d820      	bhi.n	8003f46 <ws2811_set_color+0x62>
		set_byte(RESET_LEN+24*led, green);
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	4613      	mov	r3, r2
 8003f08:	005b      	lsls	r3, r3, #1
 8003f0a:	4413      	add	r3, r2
 8003f0c:	00db      	lsls	r3, r3, #3
 8003f0e:	3364      	adds	r3, #100	; 0x64
 8003f10:	78ba      	ldrb	r2, [r7, #2]
 8003f12:	4611      	mov	r1, r2
 8003f14:	4618      	mov	r0, r3
 8003f16:	f7ff fee1 	bl	8003cdc <set_byte>
		set_byte(RESET_LEN+24*led+8, red);
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	005b      	lsls	r3, r3, #1
 8003f20:	4413      	add	r3, r2
 8003f22:	00db      	lsls	r3, r3, #3
 8003f24:	336c      	adds	r3, #108	; 0x6c
 8003f26:	78fa      	ldrb	r2, [r7, #3]
 8003f28:	4611      	mov	r1, r2
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7ff fed6 	bl	8003cdc <set_byte>
		set_byte(RESET_LEN+24*led+16, blue);
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	4613      	mov	r3, r2
 8003f34:	005b      	lsls	r3, r3, #1
 8003f36:	4413      	add	r3, r2
 8003f38:	00db      	lsls	r3, r3, #3
 8003f3a:	3374      	adds	r3, #116	; 0x74
 8003f3c:	787a      	ldrb	r2, [r7, #1]
 8003f3e:	4611      	mov	r1, r2
 8003f40:	4618      	mov	r0, r3
 8003f42:	f7ff fecb 	bl	8003cdc <set_byte>
	}
}
 8003f46:	bf00      	nop
 8003f48:	3708      	adds	r7, #8
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
	...

08003f50 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003f50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f88 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003f54:	f7ff fbe2 	bl	800371c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003f58:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003f5a:	e003      	b.n	8003f64 <LoopCopyDataInit>

08003f5c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003f5c:	4b0b      	ldr	r3, [pc, #44]	; (8003f8c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003f5e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003f60:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003f62:	3104      	adds	r1, #4

08003f64 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003f64:	480a      	ldr	r0, [pc, #40]	; (8003f90 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003f66:	4b0b      	ldr	r3, [pc, #44]	; (8003f94 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003f68:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003f6a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003f6c:	d3f6      	bcc.n	8003f5c <CopyDataInit>
	ldr	r2, =_sbss
 8003f6e:	4a0a      	ldr	r2, [pc, #40]	; (8003f98 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003f70:	e002      	b.n	8003f78 <LoopFillZerobss>

08003f72 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003f72:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003f74:	f842 3b04 	str.w	r3, [r2], #4

08003f78 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003f78:	4b08      	ldr	r3, [pc, #32]	; (8003f9c <LoopForever+0x16>)
	cmp	r2, r3
 8003f7a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003f7c:	d3f9      	bcc.n	8003f72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003f7e:	f006 fc97 	bl	800a8b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003f82:	f7fd fbaf 	bl	80016e4 <main>

08003f86 <LoopForever>:

LoopForever:
    b LoopForever
 8003f86:	e7fe      	b.n	8003f86 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003f88:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8003f8c:	0800d784 	.word	0x0800d784
	ldr	r0, =_sdata
 8003f90:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003f94:	20000298 	.word	0x20000298
	ldr	r2, =_sbss
 8003f98:	20000298 	.word	0x20000298
	ldr	r3, = _ebss
 8003f9c:	20000b10 	.word	0x20000b10

08003fa0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003fa0:	e7fe      	b.n	8003fa0 <ADC1_2_IRQHandler>

08003fa2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b082      	sub	sp, #8
 8003fa6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003fac:	2003      	movs	r0, #3
 8003fae:	f001 f909 	bl	80051c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003fb2:	2005      	movs	r0, #5
 8003fb4:	f000 f80e 	bl	8003fd4 <HAL_InitTick>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d002      	beq.n	8003fc4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	71fb      	strb	r3, [r7, #7]
 8003fc2:	e001      	b.n	8003fc8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003fc4:	f7ff fa6e 	bl	80034a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003fc8:	79fb      	ldrb	r3, [r7, #7]
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3708      	adds	r7, #8
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
	...

08003fd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003fe0:	4b17      	ldr	r3, [pc, #92]	; (8004040 <HAL_InitTick+0x6c>)
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d023      	beq.n	8004030 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003fe8:	4b16      	ldr	r3, [pc, #88]	; (8004044 <HAL_InitTick+0x70>)
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	4b14      	ldr	r3, [pc, #80]	; (8004040 <HAL_InitTick+0x6c>)
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ff6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ffe:	4618      	mov	r0, r3
 8004000:	f001 f915 	bl	800522e <HAL_SYSTICK_Config>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d10f      	bne.n	800402a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2b0f      	cmp	r3, #15
 800400e:	d809      	bhi.n	8004024 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004010:	2200      	movs	r2, #0
 8004012:	6879      	ldr	r1, [r7, #4]
 8004014:	f04f 30ff 	mov.w	r0, #4294967295
 8004018:	f001 f8df 	bl	80051da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800401c:	4a0a      	ldr	r2, [pc, #40]	; (8004048 <HAL_InitTick+0x74>)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6013      	str	r3, [r2, #0]
 8004022:	e007      	b.n	8004034 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	73fb      	strb	r3, [r7, #15]
 8004028:	e004      	b.n	8004034 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	73fb      	strb	r3, [r7, #15]
 800402e:	e001      	b.n	8004034 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004034:	7bfb      	ldrb	r3, [r7, #15]
}
 8004036:	4618      	mov	r0, r3
 8004038:	3710      	adds	r7, #16
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	200000c4 	.word	0x200000c4
 8004044:	200000bc 	.word	0x200000bc
 8004048:	200000c0 	.word	0x200000c0

0800404c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800404c:	b480      	push	{r7}
 800404e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004050:	4b06      	ldr	r3, [pc, #24]	; (800406c <HAL_IncTick+0x20>)
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	461a      	mov	r2, r3
 8004056:	4b06      	ldr	r3, [pc, #24]	; (8004070 <HAL_IncTick+0x24>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4413      	add	r3, r2
 800405c:	4a04      	ldr	r2, [pc, #16]	; (8004070 <HAL_IncTick+0x24>)
 800405e:	6013      	str	r3, [r2, #0]
}
 8004060:	bf00      	nop
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr
 800406a:	bf00      	nop
 800406c:	200000c4 	.word	0x200000c4
 8004070:	20000b0c 	.word	0x20000b0c

08004074 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004074:	b480      	push	{r7}
 8004076:	af00      	add	r7, sp, #0
  return uwTick;
 8004078:	4b03      	ldr	r3, [pc, #12]	; (8004088 <HAL_GetTick+0x14>)
 800407a:	681b      	ldr	r3, [r3, #0]
}
 800407c:	4618      	mov	r0, r3
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr
 8004086:	bf00      	nop
 8004088:	20000b0c 	.word	0x20000b0c

0800408c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004094:	f7ff ffee 	bl	8004074 <HAL_GetTick>
 8004098:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040a4:	d005      	beq.n	80040b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80040a6:	4b0a      	ldr	r3, [pc, #40]	; (80040d0 <HAL_Delay+0x44>)
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	461a      	mov	r2, r3
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	4413      	add	r3, r2
 80040b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80040b2:	bf00      	nop
 80040b4:	f7ff ffde 	bl	8004074 <HAL_GetTick>
 80040b8:	4602      	mov	r2, r0
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	68fa      	ldr	r2, [r7, #12]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d8f7      	bhi.n	80040b4 <HAL_Delay+0x28>
  {
  }
}
 80040c4:	bf00      	nop
 80040c6:	bf00      	nop
 80040c8:	3710      	adds	r7, #16
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	200000c4 	.word	0x200000c4

080040d4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	431a      	orrs	r2, r3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	609a      	str	r2, [r3, #8]
}
 80040ee:	bf00      	nop
 80040f0:	370c      	adds	r7, #12
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr

080040fa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80040fa:	b480      	push	{r7}
 80040fc:	b083      	sub	sp, #12
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
 8004102:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	431a      	orrs	r2, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	609a      	str	r2, [r3, #8]
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004130:	4618      	mov	r0, r3
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800413c:	b480      	push	{r7}
 800413e:	b087      	sub	sp, #28
 8004140:	af00      	add	r7, sp, #0
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	607a      	str	r2, [r7, #4]
 8004148:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	3360      	adds	r3, #96	; 0x60
 800414e:	461a      	mov	r2, r3
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	4413      	add	r3, r2
 8004156:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	4b08      	ldr	r3, [pc, #32]	; (8004180 <LL_ADC_SetOffset+0x44>)
 800415e:	4013      	ands	r3, r2
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8004166:	683a      	ldr	r2, [r7, #0]
 8004168:	430a      	orrs	r2, r1
 800416a:	4313      	orrs	r3, r2
 800416c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004174:	bf00      	nop
 8004176:	371c      	adds	r7, #28
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr
 8004180:	03fff000 	.word	0x03fff000

08004184 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004184:	b480      	push	{r7}
 8004186:	b085      	sub	sp, #20
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	3360      	adds	r3, #96	; 0x60
 8004192:	461a      	mov	r2, r3
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	4413      	add	r3, r2
 800419a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3714      	adds	r7, #20
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b087      	sub	sp, #28
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	60b9      	str	r1, [r7, #8]
 80041ba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	3360      	adds	r3, #96	; 0x60
 80041c0:	461a      	mov	r2, r3
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	4413      	add	r3, r2
 80041c8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	431a      	orrs	r2, r3
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80041da:	bf00      	nop
 80041dc:	371c      	adds	r7, #28
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr

080041e6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80041e6:	b480      	push	{r7}
 80041e8:	b087      	sub	sp, #28
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	60f8      	str	r0, [r7, #12]
 80041ee:	60b9      	str	r1, [r7, #8]
 80041f0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	3330      	adds	r3, #48	; 0x30
 80041f6:	461a      	mov	r2, r3
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	0a1b      	lsrs	r3, r3, #8
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	f003 030c 	and.w	r3, r3, #12
 8004202:	4413      	add	r3, r2
 8004204:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	f003 031f 	and.w	r3, r3, #31
 8004210:	211f      	movs	r1, #31
 8004212:	fa01 f303 	lsl.w	r3, r1, r3
 8004216:	43db      	mvns	r3, r3
 8004218:	401a      	ands	r2, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	0e9b      	lsrs	r3, r3, #26
 800421e:	f003 011f 	and.w	r1, r3, #31
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	f003 031f 	and.w	r3, r3, #31
 8004228:	fa01 f303 	lsl.w	r3, r1, r3
 800422c:	431a      	orrs	r2, r3
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004232:	bf00      	nop
 8004234:	371c      	adds	r7, #28
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr

0800423e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800423e:	b480      	push	{r7}
 8004240:	b087      	sub	sp, #28
 8004242:	af00      	add	r7, sp, #0
 8004244:	60f8      	str	r0, [r7, #12]
 8004246:	60b9      	str	r1, [r7, #8]
 8004248:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	3314      	adds	r3, #20
 800424e:	461a      	mov	r2, r3
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	0e5b      	lsrs	r3, r3, #25
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	f003 0304 	and.w	r3, r3, #4
 800425a:	4413      	add	r3, r2
 800425c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	0d1b      	lsrs	r3, r3, #20
 8004266:	f003 031f 	and.w	r3, r3, #31
 800426a:	2107      	movs	r1, #7
 800426c:	fa01 f303 	lsl.w	r3, r1, r3
 8004270:	43db      	mvns	r3, r3
 8004272:	401a      	ands	r2, r3
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	0d1b      	lsrs	r3, r3, #20
 8004278:	f003 031f 	and.w	r3, r3, #31
 800427c:	6879      	ldr	r1, [r7, #4]
 800427e:	fa01 f303 	lsl.w	r3, r1, r3
 8004282:	431a      	orrs	r2, r3
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004288:	bf00      	nop
 800428a:	371c      	adds	r7, #28
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004294:	b480      	push	{r7}
 8004296:	b085      	sub	sp, #20
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042ac:	43db      	mvns	r3, r3
 80042ae:	401a      	ands	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f003 0318 	and.w	r3, r3, #24
 80042b6:	4908      	ldr	r1, [pc, #32]	; (80042d8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80042b8:	40d9      	lsrs	r1, r3
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	400b      	ands	r3, r1
 80042be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042c2:	431a      	orrs	r2, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80042ca:	bf00      	nop
 80042cc:	3714      	adds	r7, #20
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
 80042d6:	bf00      	nop
 80042d8:	0007ffff 	.word	0x0007ffff

080042dc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80042ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	6093      	str	r3, [r2, #8]
}
 80042f4:	bf00      	nop
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004310:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004314:	d101      	bne.n	800431a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004316:	2301      	movs	r3, #1
 8004318:	e000      	b.n	800431c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800431a:	2300      	movs	r3, #0
}
 800431c:	4618      	mov	r0, r3
 800431e:	370c      	adds	r7, #12
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004338:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800433c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004344:	bf00      	nop
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr

08004350 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004360:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004364:	d101      	bne.n	800436a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004366:	2301      	movs	r3, #1
 8004368:	e000      	b.n	800436c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800436a:	2300      	movs	r3, #0
}
 800436c:	4618      	mov	r0, r3
 800436e:	370c      	adds	r7, #12
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	f003 0301 	and.w	r3, r3, #1
 8004388:	2b01      	cmp	r3, #1
 800438a:	d101      	bne.n	8004390 <LL_ADC_IsEnabled+0x18>
 800438c:	2301      	movs	r3, #1
 800438e:	e000      	b.n	8004392 <LL_ADC_IsEnabled+0x1a>
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	370c      	adds	r7, #12
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr

0800439e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800439e:	b480      	push	{r7}
 80043a0:	b083      	sub	sp, #12
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	f003 0304 	and.w	r3, r3, #4
 80043ae:	2b04      	cmp	r3, #4
 80043b0:	d101      	bne.n	80043b6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80043b2:	2301      	movs	r3, #1
 80043b4:	e000      	b.n	80043b8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80043b6:	2300      	movs	r3, #0
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	370c      	adds	r7, #12
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	f003 0308 	and.w	r3, r3, #8
 80043d4:	2b08      	cmp	r3, #8
 80043d6:	d101      	bne.n	80043dc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80043d8:	2301      	movs	r3, #1
 80043da:	e000      	b.n	80043de <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80043dc:	2300      	movs	r3, #0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	370c      	adds	r7, #12
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr
	...

080043ec <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80043ec:	b590      	push	{r4, r7, lr}
 80043ee:	b089      	sub	sp, #36	; 0x24
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043f4:	2300      	movs	r3, #0
 80043f6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80043f8:	2300      	movs	r3, #0
 80043fa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d101      	bne.n	8004406 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e136      	b.n	8004674 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004410:	2b00      	cmp	r3, #0
 8004412:	d109      	bne.n	8004428 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f7fc fdcb 	bl	8000fb0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4618      	mov	r0, r3
 800442e:	f7ff ff67 	bl	8004300 <LL_ADC_IsDeepPowerDownEnabled>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d004      	beq.n	8004442 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4618      	mov	r0, r3
 800443e:	f7ff ff4d 	bl	80042dc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4618      	mov	r0, r3
 8004448:	f7ff ff82 	bl	8004350 <LL_ADC_IsInternalRegulatorEnabled>
 800444c:	4603      	mov	r3, r0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d115      	bne.n	800447e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4618      	mov	r0, r3
 8004458:	f7ff ff66 	bl	8004328 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800445c:	4b87      	ldr	r3, [pc, #540]	; (800467c <HAL_ADC_Init+0x290>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	099b      	lsrs	r3, r3, #6
 8004462:	4a87      	ldr	r2, [pc, #540]	; (8004680 <HAL_ADC_Init+0x294>)
 8004464:	fba2 2303 	umull	r2, r3, r2, r3
 8004468:	099b      	lsrs	r3, r3, #6
 800446a:	3301      	adds	r3, #1
 800446c:	005b      	lsls	r3, r3, #1
 800446e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004470:	e002      	b.n	8004478 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	3b01      	subs	r3, #1
 8004476:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d1f9      	bne.n	8004472 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4618      	mov	r0, r3
 8004484:	f7ff ff64 	bl	8004350 <LL_ADC_IsInternalRegulatorEnabled>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d10d      	bne.n	80044aa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004492:	f043 0210 	orr.w	r2, r3, #16
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800449e:	f043 0201 	orr.w	r2, r3, #1
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4618      	mov	r0, r3
 80044b0:	f7ff ff75 	bl	800439e <LL_ADC_REG_IsConversionOngoing>
 80044b4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ba:	f003 0310 	and.w	r3, r3, #16
 80044be:	2b00      	cmp	r3, #0
 80044c0:	f040 80cf 	bne.w	8004662 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	f040 80cb 	bne.w	8004662 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044d0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80044d4:	f043 0202 	orr.w	r2, r3, #2
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4618      	mov	r0, r3
 80044e2:	f7ff ff49 	bl	8004378 <LL_ADC_IsEnabled>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d115      	bne.n	8004518 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80044ec:	4865      	ldr	r0, [pc, #404]	; (8004684 <HAL_ADC_Init+0x298>)
 80044ee:	f7ff ff43 	bl	8004378 <LL_ADC_IsEnabled>
 80044f2:	4604      	mov	r4, r0
 80044f4:	4864      	ldr	r0, [pc, #400]	; (8004688 <HAL_ADC_Init+0x29c>)
 80044f6:	f7ff ff3f 	bl	8004378 <LL_ADC_IsEnabled>
 80044fa:	4603      	mov	r3, r0
 80044fc:	431c      	orrs	r4, r3
 80044fe:	4863      	ldr	r0, [pc, #396]	; (800468c <HAL_ADC_Init+0x2a0>)
 8004500:	f7ff ff3a 	bl	8004378 <LL_ADC_IsEnabled>
 8004504:	4603      	mov	r3, r0
 8004506:	4323      	orrs	r3, r4
 8004508:	2b00      	cmp	r3, #0
 800450a:	d105      	bne.n	8004518 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	4619      	mov	r1, r3
 8004512:	485f      	ldr	r0, [pc, #380]	; (8004690 <HAL_ADC_Init+0x2a4>)
 8004514:	f7ff fdde 	bl	80040d4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	7e5b      	ldrb	r3, [r3, #25]
 800451c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004522:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8004528:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800452e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004536:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004538:	4313      	orrs	r3, r2
 800453a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004542:	2b01      	cmp	r3, #1
 8004544:	d106      	bne.n	8004554 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454a:	3b01      	subs	r3, #1
 800454c:	045b      	lsls	r3, r3, #17
 800454e:	69ba      	ldr	r2, [r7, #24]
 8004550:	4313      	orrs	r3, r2
 8004552:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004558:	2b00      	cmp	r3, #0
 800455a:	d009      	beq.n	8004570 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004560:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004568:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800456a:	69ba      	ldr	r2, [r7, #24]
 800456c:	4313      	orrs	r3, r2
 800456e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68da      	ldr	r2, [r3, #12]
 8004576:	4b47      	ldr	r3, [pc, #284]	; (8004694 <HAL_ADC_Init+0x2a8>)
 8004578:	4013      	ands	r3, r2
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	6812      	ldr	r2, [r2, #0]
 800457e:	69b9      	ldr	r1, [r7, #24]
 8004580:	430b      	orrs	r3, r1
 8004582:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4618      	mov	r0, r3
 800458a:	f7ff ff08 	bl	800439e <LL_ADC_REG_IsConversionOngoing>
 800458e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4618      	mov	r0, r3
 8004596:	f7ff ff15 	bl	80043c4 <LL_ADC_INJ_IsConversionOngoing>
 800459a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d13d      	bne.n	800461e <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d13a      	bne.n	800461e <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80045ac:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80045b4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80045b6:	4313      	orrs	r3, r2
 80045b8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045c4:	f023 0302 	bic.w	r3, r3, #2
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	6812      	ldr	r2, [r2, #0]
 80045cc:	69b9      	ldr	r1, [r7, #24]
 80045ce:	430b      	orrs	r3, r1
 80045d0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d118      	bne.n	800460e <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80045e6:	f023 0304 	bic.w	r3, r3, #4
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80045f2:	4311      	orrs	r1, r2
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80045f8:	4311      	orrs	r1, r2
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80045fe:	430a      	orrs	r2, r1
 8004600:	431a      	orrs	r2, r3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f042 0201 	orr.w	r2, r2, #1
 800460a:	611a      	str	r2, [r3, #16]
 800460c:	e007      	b.n	800461e <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	691a      	ldr	r2, [r3, #16]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f022 0201 	bic.w	r2, r2, #1
 800461c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	2b01      	cmp	r3, #1
 8004624:	d10c      	bne.n	8004640 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462c:	f023 010f 	bic.w	r1, r3, #15
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	69db      	ldr	r3, [r3, #28]
 8004634:	1e5a      	subs	r2, r3, #1
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	430a      	orrs	r2, r1
 800463c:	631a      	str	r2, [r3, #48]	; 0x30
 800463e:	e007      	b.n	8004650 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f022 020f 	bic.w	r2, r2, #15
 800464e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004654:	f023 0303 	bic.w	r3, r3, #3
 8004658:	f043 0201 	orr.w	r2, r3, #1
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	655a      	str	r2, [r3, #84]	; 0x54
 8004660:	e007      	b.n	8004672 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004666:	f043 0210 	orr.w	r2, r3, #16
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004672:	7ffb      	ldrb	r3, [r7, #31]
}
 8004674:	4618      	mov	r0, r3
 8004676:	3724      	adds	r7, #36	; 0x24
 8004678:	46bd      	mov	sp, r7
 800467a:	bd90      	pop	{r4, r7, pc}
 800467c:	200000bc 	.word	0x200000bc
 8004680:	053e2d63 	.word	0x053e2d63
 8004684:	50040000 	.word	0x50040000
 8004688:	50040100 	.word	0x50040100
 800468c:	50040200 	.word	0x50040200
 8004690:	50040300 	.word	0x50040300
 8004694:	fff0c007 	.word	0xfff0c007

08004698 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b0b6      	sub	sp, #216	; 0xd8
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046a2:	2300      	movs	r3, #0
 80046a4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80046a8:	2300      	movs	r3, #0
 80046aa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d101      	bne.n	80046ba <HAL_ADC_ConfigChannel+0x22>
 80046b6:	2302      	movs	r3, #2
 80046b8:	e3c7      	b.n	8004e4a <HAL_ADC_ConfigChannel+0x7b2>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2201      	movs	r2, #1
 80046be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4618      	mov	r0, r3
 80046c8:	f7ff fe69 	bl	800439e <LL_ADC_REG_IsConversionOngoing>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	f040 83a8 	bne.w	8004e24 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	2b05      	cmp	r3, #5
 80046da:	d824      	bhi.n	8004726 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	3b02      	subs	r3, #2
 80046e2:	2b03      	cmp	r3, #3
 80046e4:	d81b      	bhi.n	800471e <HAL_ADC_ConfigChannel+0x86>
 80046e6:	a201      	add	r2, pc, #4	; (adr r2, 80046ec <HAL_ADC_ConfigChannel+0x54>)
 80046e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ec:	080046fd 	.word	0x080046fd
 80046f0:	08004705 	.word	0x08004705
 80046f4:	0800470d 	.word	0x0800470d
 80046f8:	08004715 	.word	0x08004715
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	220c      	movs	r2, #12
 8004700:	605a      	str	r2, [r3, #4]
          break;
 8004702:	e011      	b.n	8004728 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	2212      	movs	r2, #18
 8004708:	605a      	str	r2, [r3, #4]
          break;
 800470a:	e00d      	b.n	8004728 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	2218      	movs	r2, #24
 8004710:	605a      	str	r2, [r3, #4]
          break;
 8004712:	e009      	b.n	8004728 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	f44f 7280 	mov.w	r2, #256	; 0x100
 800471a:	605a      	str	r2, [r3, #4]
          break;
 800471c:	e004      	b.n	8004728 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	2206      	movs	r2, #6
 8004722:	605a      	str	r2, [r3, #4]
          break;
 8004724:	e000      	b.n	8004728 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8004726:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6818      	ldr	r0, [r3, #0]
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	6859      	ldr	r1, [r3, #4]
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	461a      	mov	r2, r3
 8004736:	f7ff fd56 	bl	80041e6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4618      	mov	r0, r3
 8004740:	f7ff fe2d 	bl	800439e <LL_ADC_REG_IsConversionOngoing>
 8004744:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4618      	mov	r0, r3
 800474e:	f7ff fe39 	bl	80043c4 <LL_ADC_INJ_IsConversionOngoing>
 8004752:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004756:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800475a:	2b00      	cmp	r3, #0
 800475c:	f040 81a6 	bne.w	8004aac <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004760:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004764:	2b00      	cmp	r3, #0
 8004766:	f040 81a1 	bne.w	8004aac <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6818      	ldr	r0, [r3, #0]
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	6819      	ldr	r1, [r3, #0]
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	461a      	mov	r2, r3
 8004778:	f7ff fd61 	bl	800423e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	695a      	ldr	r2, [r3, #20]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	08db      	lsrs	r3, r3, #3
 8004788:	f003 0303 	and.w	r3, r3, #3
 800478c:	005b      	lsls	r3, r3, #1
 800478e:	fa02 f303 	lsl.w	r3, r2, r3
 8004792:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	691b      	ldr	r3, [r3, #16]
 800479a:	2b04      	cmp	r3, #4
 800479c:	d00a      	beq.n	80047b4 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6818      	ldr	r0, [r3, #0]
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	6919      	ldr	r1, [r3, #16]
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80047ae:	f7ff fcc5 	bl	800413c <LL_ADC_SetOffset>
 80047b2:	e17b      	b.n	8004aac <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2100      	movs	r1, #0
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7ff fce2 	bl	8004184 <LL_ADC_GetOffsetChannel>
 80047c0:	4603      	mov	r3, r0
 80047c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d10a      	bne.n	80047e0 <HAL_ADC_ConfigChannel+0x148>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2100      	movs	r1, #0
 80047d0:	4618      	mov	r0, r3
 80047d2:	f7ff fcd7 	bl	8004184 <LL_ADC_GetOffsetChannel>
 80047d6:	4603      	mov	r3, r0
 80047d8:	0e9b      	lsrs	r3, r3, #26
 80047da:	f003 021f 	and.w	r2, r3, #31
 80047de:	e01e      	b.n	800481e <HAL_ADC_ConfigChannel+0x186>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2100      	movs	r1, #0
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7ff fccc 	bl	8004184 <LL_ADC_GetOffsetChannel>
 80047ec:	4603      	mov	r3, r0
 80047ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047f2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80047f6:	fa93 f3a3 	rbit	r3, r3
 80047fa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80047fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004802:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004806:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d101      	bne.n	8004812 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800480e:	2320      	movs	r3, #32
 8004810:	e004      	b.n	800481c <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8004812:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004816:	fab3 f383 	clz	r3, r3
 800481a:	b2db      	uxtb	r3, r3
 800481c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004826:	2b00      	cmp	r3, #0
 8004828:	d105      	bne.n	8004836 <HAL_ADC_ConfigChannel+0x19e>
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	0e9b      	lsrs	r3, r3, #26
 8004830:	f003 031f 	and.w	r3, r3, #31
 8004834:	e018      	b.n	8004868 <HAL_ADC_ConfigChannel+0x1d0>
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800483e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004842:	fa93 f3a3 	rbit	r3, r3
 8004846:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800484a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800484e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004852:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004856:	2b00      	cmp	r3, #0
 8004858:	d101      	bne.n	800485e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800485a:	2320      	movs	r3, #32
 800485c:	e004      	b.n	8004868 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800485e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004862:	fab3 f383 	clz	r3, r3
 8004866:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004868:	429a      	cmp	r2, r3
 800486a:	d106      	bne.n	800487a <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2200      	movs	r2, #0
 8004872:	2100      	movs	r1, #0
 8004874:	4618      	mov	r0, r3
 8004876:	f7ff fc9b 	bl	80041b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2101      	movs	r1, #1
 8004880:	4618      	mov	r0, r3
 8004882:	f7ff fc7f 	bl	8004184 <LL_ADC_GetOffsetChannel>
 8004886:	4603      	mov	r3, r0
 8004888:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800488c:	2b00      	cmp	r3, #0
 800488e:	d10a      	bne.n	80048a6 <HAL_ADC_ConfigChannel+0x20e>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2101      	movs	r1, #1
 8004896:	4618      	mov	r0, r3
 8004898:	f7ff fc74 	bl	8004184 <LL_ADC_GetOffsetChannel>
 800489c:	4603      	mov	r3, r0
 800489e:	0e9b      	lsrs	r3, r3, #26
 80048a0:	f003 021f 	and.w	r2, r3, #31
 80048a4:	e01e      	b.n	80048e4 <HAL_ADC_ConfigChannel+0x24c>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	2101      	movs	r1, #1
 80048ac:	4618      	mov	r0, r3
 80048ae:	f7ff fc69 	bl	8004184 <LL_ADC_GetOffsetChannel>
 80048b2:	4603      	mov	r3, r0
 80048b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048b8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80048bc:	fa93 f3a3 	rbit	r3, r3
 80048c0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80048c4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80048c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80048cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d101      	bne.n	80048d8 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80048d4:	2320      	movs	r3, #32
 80048d6:	e004      	b.n	80048e2 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80048d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80048dc:	fab3 f383 	clz	r3, r3
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d105      	bne.n	80048fc <HAL_ADC_ConfigChannel+0x264>
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	0e9b      	lsrs	r3, r3, #26
 80048f6:	f003 031f 	and.w	r3, r3, #31
 80048fa:	e018      	b.n	800492e <HAL_ADC_ConfigChannel+0x296>
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004904:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004908:	fa93 f3a3 	rbit	r3, r3
 800490c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004910:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004914:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004918:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800491c:	2b00      	cmp	r3, #0
 800491e:	d101      	bne.n	8004924 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8004920:	2320      	movs	r3, #32
 8004922:	e004      	b.n	800492e <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8004924:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004928:	fab3 f383 	clz	r3, r3
 800492c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800492e:	429a      	cmp	r2, r3
 8004930:	d106      	bne.n	8004940 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2200      	movs	r2, #0
 8004938:	2101      	movs	r1, #1
 800493a:	4618      	mov	r0, r3
 800493c:	f7ff fc38 	bl	80041b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2102      	movs	r1, #2
 8004946:	4618      	mov	r0, r3
 8004948:	f7ff fc1c 	bl	8004184 <LL_ADC_GetOffsetChannel>
 800494c:	4603      	mov	r3, r0
 800494e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004952:	2b00      	cmp	r3, #0
 8004954:	d10a      	bne.n	800496c <HAL_ADC_ConfigChannel+0x2d4>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2102      	movs	r1, #2
 800495c:	4618      	mov	r0, r3
 800495e:	f7ff fc11 	bl	8004184 <LL_ADC_GetOffsetChannel>
 8004962:	4603      	mov	r3, r0
 8004964:	0e9b      	lsrs	r3, r3, #26
 8004966:	f003 021f 	and.w	r2, r3, #31
 800496a:	e01e      	b.n	80049aa <HAL_ADC_ConfigChannel+0x312>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2102      	movs	r1, #2
 8004972:	4618      	mov	r0, r3
 8004974:	f7ff fc06 	bl	8004184 <LL_ADC_GetOffsetChannel>
 8004978:	4603      	mov	r3, r0
 800497a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800497e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004982:	fa93 f3a3 	rbit	r3, r3
 8004986:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800498a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800498e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004992:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004996:	2b00      	cmp	r3, #0
 8004998:	d101      	bne.n	800499e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800499a:	2320      	movs	r3, #32
 800499c:	e004      	b.n	80049a8 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800499e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80049a2:	fab3 f383 	clz	r3, r3
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d105      	bne.n	80049c2 <HAL_ADC_ConfigChannel+0x32a>
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	0e9b      	lsrs	r3, r3, #26
 80049bc:	f003 031f 	and.w	r3, r3, #31
 80049c0:	e016      	b.n	80049f0 <HAL_ADC_ConfigChannel+0x358>
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80049ce:	fa93 f3a3 	rbit	r3, r3
 80049d2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80049d4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80049d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80049da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d101      	bne.n	80049e6 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80049e2:	2320      	movs	r3, #32
 80049e4:	e004      	b.n	80049f0 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80049e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80049ea:	fab3 f383 	clz	r3, r3
 80049ee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d106      	bne.n	8004a02 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2200      	movs	r2, #0
 80049fa:	2102      	movs	r1, #2
 80049fc:	4618      	mov	r0, r3
 80049fe:	f7ff fbd7 	bl	80041b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2103      	movs	r1, #3
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f7ff fbbb 	bl	8004184 <LL_ADC_GetOffsetChannel>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d10a      	bne.n	8004a2e <HAL_ADC_ConfigChannel+0x396>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2103      	movs	r1, #3
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f7ff fbb0 	bl	8004184 <LL_ADC_GetOffsetChannel>
 8004a24:	4603      	mov	r3, r0
 8004a26:	0e9b      	lsrs	r3, r3, #26
 8004a28:	f003 021f 	and.w	r2, r3, #31
 8004a2c:	e017      	b.n	8004a5e <HAL_ADC_ConfigChannel+0x3c6>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	2103      	movs	r1, #3
 8004a34:	4618      	mov	r0, r3
 8004a36:	f7ff fba5 	bl	8004184 <LL_ADC_GetOffsetChannel>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a40:	fa93 f3a3 	rbit	r3, r3
 8004a44:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004a46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a48:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004a4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d101      	bne.n	8004a54 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8004a50:	2320      	movs	r3, #32
 8004a52:	e003      	b.n	8004a5c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8004a54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a56:	fab3 f383 	clz	r3, r3
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d105      	bne.n	8004a76 <HAL_ADC_ConfigChannel+0x3de>
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	0e9b      	lsrs	r3, r3, #26
 8004a70:	f003 031f 	and.w	r3, r3, #31
 8004a74:	e011      	b.n	8004a9a <HAL_ADC_ConfigChannel+0x402>
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a7e:	fa93 f3a3 	rbit	r3, r3
 8004a82:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004a84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a86:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004a88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d101      	bne.n	8004a92 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8004a8e:	2320      	movs	r3, #32
 8004a90:	e003      	b.n	8004a9a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8004a92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a94:	fab3 f383 	clz	r3, r3
 8004a98:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d106      	bne.n	8004aac <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	2103      	movs	r1, #3
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f7ff fb82 	bl	80041b0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f7ff fc61 	bl	8004378 <LL_ADC_IsEnabled>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	f040 813f 	bne.w	8004d3c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6818      	ldr	r0, [r3, #0]
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	6819      	ldr	r1, [r3, #0]
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	461a      	mov	r2, r3
 8004acc:	f7ff fbe2 	bl	8004294 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	4a8e      	ldr	r2, [pc, #568]	; (8004d10 <HAL_ADC_ConfigChannel+0x678>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	f040 8130 	bne.w	8004d3c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d10b      	bne.n	8004b04 <HAL_ADC_ConfigChannel+0x46c>
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	0e9b      	lsrs	r3, r3, #26
 8004af2:	3301      	adds	r3, #1
 8004af4:	f003 031f 	and.w	r3, r3, #31
 8004af8:	2b09      	cmp	r3, #9
 8004afa:	bf94      	ite	ls
 8004afc:	2301      	movls	r3, #1
 8004afe:	2300      	movhi	r3, #0
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	e019      	b.n	8004b38 <HAL_ADC_ConfigChannel+0x4a0>
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b0c:	fa93 f3a3 	rbit	r3, r3
 8004b10:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004b12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b14:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004b16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d101      	bne.n	8004b20 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8004b1c:	2320      	movs	r3, #32
 8004b1e:	e003      	b.n	8004b28 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8004b20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b22:	fab3 f383 	clz	r3, r3
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	3301      	adds	r3, #1
 8004b2a:	f003 031f 	and.w	r3, r3, #31
 8004b2e:	2b09      	cmp	r3, #9
 8004b30:	bf94      	ite	ls
 8004b32:	2301      	movls	r3, #1
 8004b34:	2300      	movhi	r3, #0
 8004b36:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d079      	beq.n	8004c30 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d107      	bne.n	8004b58 <HAL_ADC_ConfigChannel+0x4c0>
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	0e9b      	lsrs	r3, r3, #26
 8004b4e:	3301      	adds	r3, #1
 8004b50:	069b      	lsls	r3, r3, #26
 8004b52:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b56:	e015      	b.n	8004b84 <HAL_ADC_ConfigChannel+0x4ec>
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b60:	fa93 f3a3 	rbit	r3, r3
 8004b64:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004b66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b68:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004b6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d101      	bne.n	8004b74 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8004b70:	2320      	movs	r3, #32
 8004b72:	e003      	b.n	8004b7c <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8004b74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b76:	fab3 f383 	clz	r3, r3
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	3301      	adds	r3, #1
 8004b7e:	069b      	lsls	r3, r3, #26
 8004b80:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d109      	bne.n	8004ba4 <HAL_ADC_ConfigChannel+0x50c>
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	0e9b      	lsrs	r3, r3, #26
 8004b96:	3301      	adds	r3, #1
 8004b98:	f003 031f 	and.w	r3, r3, #31
 8004b9c:	2101      	movs	r1, #1
 8004b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8004ba2:	e017      	b.n	8004bd4 <HAL_ADC_ConfigChannel+0x53c>
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004baa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bac:	fa93 f3a3 	rbit	r3, r3
 8004bb0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004bb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bb4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004bb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d101      	bne.n	8004bc0 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8004bbc:	2320      	movs	r3, #32
 8004bbe:	e003      	b.n	8004bc8 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8004bc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bc2:	fab3 f383 	clz	r3, r3
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	3301      	adds	r3, #1
 8004bca:	f003 031f 	and.w	r3, r3, #31
 8004bce:	2101      	movs	r1, #1
 8004bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8004bd4:	ea42 0103 	orr.w	r1, r2, r3
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d10a      	bne.n	8004bfa <HAL_ADC_ConfigChannel+0x562>
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	0e9b      	lsrs	r3, r3, #26
 8004bea:	3301      	adds	r3, #1
 8004bec:	f003 021f 	and.w	r2, r3, #31
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	005b      	lsls	r3, r3, #1
 8004bf4:	4413      	add	r3, r2
 8004bf6:	051b      	lsls	r3, r3, #20
 8004bf8:	e018      	b.n	8004c2c <HAL_ADC_ConfigChannel+0x594>
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c02:	fa93 f3a3 	rbit	r3, r3
 8004c06:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004c0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d101      	bne.n	8004c16 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8004c12:	2320      	movs	r3, #32
 8004c14:	e003      	b.n	8004c1e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8004c16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c18:	fab3 f383 	clz	r3, r3
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	3301      	adds	r3, #1
 8004c20:	f003 021f 	and.w	r2, r3, #31
 8004c24:	4613      	mov	r3, r2
 8004c26:	005b      	lsls	r3, r3, #1
 8004c28:	4413      	add	r3, r2
 8004c2a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c2c:	430b      	orrs	r3, r1
 8004c2e:	e080      	b.n	8004d32 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d107      	bne.n	8004c4c <HAL_ADC_ConfigChannel+0x5b4>
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	0e9b      	lsrs	r3, r3, #26
 8004c42:	3301      	adds	r3, #1
 8004c44:	069b      	lsls	r3, r3, #26
 8004c46:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c4a:	e015      	b.n	8004c78 <HAL_ADC_ConfigChannel+0x5e0>
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c54:	fa93 f3a3 	rbit	r3, r3
 8004c58:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c5c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d101      	bne.n	8004c68 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8004c64:	2320      	movs	r3, #32
 8004c66:	e003      	b.n	8004c70 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8004c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c6a:	fab3 f383 	clz	r3, r3
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	3301      	adds	r3, #1
 8004c72:	069b      	lsls	r3, r3, #26
 8004c74:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d109      	bne.n	8004c98 <HAL_ADC_ConfigChannel+0x600>
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	0e9b      	lsrs	r3, r3, #26
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	f003 031f 	and.w	r3, r3, #31
 8004c90:	2101      	movs	r1, #1
 8004c92:	fa01 f303 	lsl.w	r3, r1, r3
 8004c96:	e017      	b.n	8004cc8 <HAL_ADC_ConfigChannel+0x630>
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c9e:	6a3b      	ldr	r3, [r7, #32]
 8004ca0:	fa93 f3a3 	rbit	r3, r3
 8004ca4:	61fb      	str	r3, [r7, #28]
  return result;
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d101      	bne.n	8004cb4 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8004cb0:	2320      	movs	r3, #32
 8004cb2:	e003      	b.n	8004cbc <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8004cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb6:	fab3 f383 	clz	r3, r3
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	3301      	adds	r3, #1
 8004cbe:	f003 031f 	and.w	r3, r3, #31
 8004cc2:	2101      	movs	r1, #1
 8004cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8004cc8:	ea42 0103 	orr.w	r1, r2, r3
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d10d      	bne.n	8004cf4 <HAL_ADC_ConfigChannel+0x65c>
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	0e9b      	lsrs	r3, r3, #26
 8004cde:	3301      	adds	r3, #1
 8004ce0:	f003 021f 	and.w	r2, r3, #31
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	005b      	lsls	r3, r3, #1
 8004ce8:	4413      	add	r3, r2
 8004cea:	3b1e      	subs	r3, #30
 8004cec:	051b      	lsls	r3, r3, #20
 8004cee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004cf2:	e01d      	b.n	8004d30 <HAL_ADC_ConfigChannel+0x698>
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	fa93 f3a3 	rbit	r3, r3
 8004d00:	613b      	str	r3, [r7, #16]
  return result;
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d103      	bne.n	8004d14 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8004d0c:	2320      	movs	r3, #32
 8004d0e:	e005      	b.n	8004d1c <HAL_ADC_ConfigChannel+0x684>
 8004d10:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004d14:	69bb      	ldr	r3, [r7, #24]
 8004d16:	fab3 f383 	clz	r3, r3
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	3301      	adds	r3, #1
 8004d1e:	f003 021f 	and.w	r2, r3, #31
 8004d22:	4613      	mov	r3, r2
 8004d24:	005b      	lsls	r3, r3, #1
 8004d26:	4413      	add	r3, r2
 8004d28:	3b1e      	subs	r3, #30
 8004d2a:	051b      	lsls	r3, r3, #20
 8004d2c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d30:	430b      	orrs	r3, r1
 8004d32:	683a      	ldr	r2, [r7, #0]
 8004d34:	6892      	ldr	r2, [r2, #8]
 8004d36:	4619      	mov	r1, r3
 8004d38:	f7ff fa81 	bl	800423e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	4b44      	ldr	r3, [pc, #272]	; (8004e54 <HAL_ADC_ConfigChannel+0x7bc>)
 8004d42:	4013      	ands	r3, r2
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d07a      	beq.n	8004e3e <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004d48:	4843      	ldr	r0, [pc, #268]	; (8004e58 <HAL_ADC_ConfigChannel+0x7c0>)
 8004d4a:	f7ff f9e9 	bl	8004120 <LL_ADC_GetCommonPathInternalCh>
 8004d4e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a41      	ldr	r2, [pc, #260]	; (8004e5c <HAL_ADC_ConfigChannel+0x7c4>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d12c      	bne.n	8004db6 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004d5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004d60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d126      	bne.n	8004db6 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a3c      	ldr	r2, [pc, #240]	; (8004e60 <HAL_ADC_ConfigChannel+0x7c8>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d004      	beq.n	8004d7c <HAL_ADC_ConfigChannel+0x6e4>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a3b      	ldr	r2, [pc, #236]	; (8004e64 <HAL_ADC_ConfigChannel+0x7cc>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d15d      	bne.n	8004e38 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004d7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004d80:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004d84:	4619      	mov	r1, r3
 8004d86:	4834      	ldr	r0, [pc, #208]	; (8004e58 <HAL_ADC_ConfigChannel+0x7c0>)
 8004d88:	f7ff f9b7 	bl	80040fa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004d8c:	4b36      	ldr	r3, [pc, #216]	; (8004e68 <HAL_ADC_ConfigChannel+0x7d0>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	099b      	lsrs	r3, r3, #6
 8004d92:	4a36      	ldr	r2, [pc, #216]	; (8004e6c <HAL_ADC_ConfigChannel+0x7d4>)
 8004d94:	fba2 2303 	umull	r2, r3, r2, r3
 8004d98:	099b      	lsrs	r3, r3, #6
 8004d9a:	1c5a      	adds	r2, r3, #1
 8004d9c:	4613      	mov	r3, r2
 8004d9e:	005b      	lsls	r3, r3, #1
 8004da0:	4413      	add	r3, r2
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004da6:	e002      	b.n	8004dae <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	3b01      	subs	r3, #1
 8004dac:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d1f9      	bne.n	8004da8 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004db4:	e040      	b.n	8004e38 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a2d      	ldr	r2, [pc, #180]	; (8004e70 <HAL_ADC_ConfigChannel+0x7d8>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d118      	bne.n	8004df2 <HAL_ADC_ConfigChannel+0x75a>
 8004dc0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004dc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d112      	bne.n	8004df2 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a23      	ldr	r2, [pc, #140]	; (8004e60 <HAL_ADC_ConfigChannel+0x7c8>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d004      	beq.n	8004de0 <HAL_ADC_ConfigChannel+0x748>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a22      	ldr	r2, [pc, #136]	; (8004e64 <HAL_ADC_ConfigChannel+0x7cc>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d12d      	bne.n	8004e3c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004de0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004de4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004de8:	4619      	mov	r1, r3
 8004dea:	481b      	ldr	r0, [pc, #108]	; (8004e58 <HAL_ADC_ConfigChannel+0x7c0>)
 8004dec:	f7ff f985 	bl	80040fa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004df0:	e024      	b.n	8004e3c <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a1f      	ldr	r2, [pc, #124]	; (8004e74 <HAL_ADC_ConfigChannel+0x7dc>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d120      	bne.n	8004e3e <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004dfc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004e00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d11a      	bne.n	8004e3e <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a14      	ldr	r2, [pc, #80]	; (8004e60 <HAL_ADC_ConfigChannel+0x7c8>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d115      	bne.n	8004e3e <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004e12:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004e16:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	480e      	ldr	r0, [pc, #56]	; (8004e58 <HAL_ADC_ConfigChannel+0x7c0>)
 8004e1e:	f7ff f96c 	bl	80040fa <LL_ADC_SetCommonPathInternalCh>
 8004e22:	e00c      	b.n	8004e3e <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e28:	f043 0220 	orr.w	r2, r3, #32
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8004e36:	e002      	b.n	8004e3e <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004e38:	bf00      	nop
 8004e3a:	e000      	b.n	8004e3e <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004e3c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004e46:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	37d8      	adds	r7, #216	; 0xd8
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	80080000 	.word	0x80080000
 8004e58:	50040300 	.word	0x50040300
 8004e5c:	c7520000 	.word	0xc7520000
 8004e60:	50040000 	.word	0x50040000
 8004e64:	50040200 	.word	0x50040200
 8004e68:	200000bc 	.word	0x200000bc
 8004e6c:	053e2d63 	.word	0x053e2d63
 8004e70:	cb840000 	.word	0xcb840000
 8004e74:	80000001 	.word	0x80000001

08004e78 <LL_ADC_IsEnabled>:
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	f003 0301 	and.w	r3, r3, #1
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d101      	bne.n	8004e90 <LL_ADC_IsEnabled+0x18>
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e000      	b.n	8004e92 <LL_ADC_IsEnabled+0x1a>
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	370c      	adds	r7, #12
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr

08004e9e <LL_ADC_REG_IsConversionOngoing>:
{
 8004e9e:	b480      	push	{r7}
 8004ea0:	b083      	sub	sp, #12
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	f003 0304 	and.w	r3, r3, #4
 8004eae:	2b04      	cmp	r3, #4
 8004eb0:	d101      	bne.n	8004eb6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e000      	b.n	8004eb8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004eb6:	2300      	movs	r3, #0
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	370c      	adds	r7, #12
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004ec4:	b590      	push	{r4, r7, lr}
 8004ec6:	b09f      	sub	sp, #124	; 0x7c
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d101      	bne.n	8004ee2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004ede:	2302      	movs	r3, #2
 8004ee0:	e093      	b.n	800500a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8004eea:	2300      	movs	r3, #0
 8004eec:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8004eee:	2300      	movs	r3, #0
 8004ef0:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a47      	ldr	r2, [pc, #284]	; (8005014 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d102      	bne.n	8004f02 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004efc:	4b46      	ldr	r3, [pc, #280]	; (8005018 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004efe:	60bb      	str	r3, [r7, #8]
 8004f00:	e001      	b.n	8004f06 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004f02:	2300      	movs	r3, #0
 8004f04:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d10b      	bne.n	8004f24 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f10:	f043 0220 	orr.w	r2, r3, #32
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e072      	b.n	800500a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	4618      	mov	r0, r3
 8004f28:	f7ff ffb9 	bl	8004e9e <LL_ADC_REG_IsConversionOngoing>
 8004f2c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4618      	mov	r0, r3
 8004f34:	f7ff ffb3 	bl	8004e9e <LL_ADC_REG_IsConversionOngoing>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d154      	bne.n	8004fe8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004f3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d151      	bne.n	8004fe8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004f44:	4b35      	ldr	r3, [pc, #212]	; (800501c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8004f46:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d02c      	beq.n	8004faa <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004f50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	6859      	ldr	r1, [r3, #4]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004f62:	035b      	lsls	r3, r3, #13
 8004f64:	430b      	orrs	r3, r1
 8004f66:	431a      	orrs	r2, r3
 8004f68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f6a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004f6c:	4829      	ldr	r0, [pc, #164]	; (8005014 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004f6e:	f7ff ff83 	bl	8004e78 <LL_ADC_IsEnabled>
 8004f72:	4604      	mov	r4, r0
 8004f74:	4828      	ldr	r0, [pc, #160]	; (8005018 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004f76:	f7ff ff7f 	bl	8004e78 <LL_ADC_IsEnabled>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	431c      	orrs	r4, r3
 8004f7e:	4828      	ldr	r0, [pc, #160]	; (8005020 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8004f80:	f7ff ff7a 	bl	8004e78 <LL_ADC_IsEnabled>
 8004f84:	4603      	mov	r3, r0
 8004f86:	4323      	orrs	r3, r4
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d137      	bne.n	8004ffc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004f8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004f94:	f023 030f 	bic.w	r3, r3, #15
 8004f98:	683a      	ldr	r2, [r7, #0]
 8004f9a:	6811      	ldr	r1, [r2, #0]
 8004f9c:	683a      	ldr	r2, [r7, #0]
 8004f9e:	6892      	ldr	r2, [r2, #8]
 8004fa0:	430a      	orrs	r2, r1
 8004fa2:	431a      	orrs	r2, r3
 8004fa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fa6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004fa8:	e028      	b.n	8004ffc <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004faa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004fb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fb4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004fb6:	4817      	ldr	r0, [pc, #92]	; (8005014 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004fb8:	f7ff ff5e 	bl	8004e78 <LL_ADC_IsEnabled>
 8004fbc:	4604      	mov	r4, r0
 8004fbe:	4816      	ldr	r0, [pc, #88]	; (8005018 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004fc0:	f7ff ff5a 	bl	8004e78 <LL_ADC_IsEnabled>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	431c      	orrs	r4, r3
 8004fc8:	4815      	ldr	r0, [pc, #84]	; (8005020 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8004fca:	f7ff ff55 	bl	8004e78 <LL_ADC_IsEnabled>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	4323      	orrs	r3, r4
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d112      	bne.n	8004ffc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004fd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004fde:	f023 030f 	bic.w	r3, r3, #15
 8004fe2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004fe4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004fe6:	e009      	b.n	8004ffc <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fec:	f043 0220 	orr.w	r2, r3, #32
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004ffa:	e000      	b.n	8004ffe <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004ffc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005006:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800500a:	4618      	mov	r0, r3
 800500c:	377c      	adds	r7, #124	; 0x7c
 800500e:	46bd      	mov	sp, r7
 8005010:	bd90      	pop	{r4, r7, pc}
 8005012:	bf00      	nop
 8005014:	50040000 	.word	0x50040000
 8005018:	50040100 	.word	0x50040100
 800501c:	50040300 	.word	0x50040300
 8005020:	50040200 	.word	0x50040200

08005024 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005024:	b480      	push	{r7}
 8005026:	b085      	sub	sp, #20
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f003 0307 	and.w	r3, r3, #7
 8005032:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005034:	4b0c      	ldr	r3, [pc, #48]	; (8005068 <__NVIC_SetPriorityGrouping+0x44>)
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800503a:	68ba      	ldr	r2, [r7, #8]
 800503c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005040:	4013      	ands	r3, r2
 8005042:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800504c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005050:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005054:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005056:	4a04      	ldr	r2, [pc, #16]	; (8005068 <__NVIC_SetPriorityGrouping+0x44>)
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	60d3      	str	r3, [r2, #12]
}
 800505c:	bf00      	nop
 800505e:	3714      	adds	r7, #20
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr
 8005068:	e000ed00 	.word	0xe000ed00

0800506c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800506c:	b480      	push	{r7}
 800506e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005070:	4b04      	ldr	r3, [pc, #16]	; (8005084 <__NVIC_GetPriorityGrouping+0x18>)
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	0a1b      	lsrs	r3, r3, #8
 8005076:	f003 0307 	and.w	r3, r3, #7
}
 800507a:	4618      	mov	r0, r3
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr
 8005084:	e000ed00 	.word	0xe000ed00

08005088 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	4603      	mov	r3, r0
 8005090:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005096:	2b00      	cmp	r3, #0
 8005098:	db0b      	blt.n	80050b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800509a:	79fb      	ldrb	r3, [r7, #7]
 800509c:	f003 021f 	and.w	r2, r3, #31
 80050a0:	4907      	ldr	r1, [pc, #28]	; (80050c0 <__NVIC_EnableIRQ+0x38>)
 80050a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050a6:	095b      	lsrs	r3, r3, #5
 80050a8:	2001      	movs	r0, #1
 80050aa:	fa00 f202 	lsl.w	r2, r0, r2
 80050ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80050b2:	bf00      	nop
 80050b4:	370c      	adds	r7, #12
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop
 80050c0:	e000e100 	.word	0xe000e100

080050c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	4603      	mov	r3, r0
 80050cc:	6039      	str	r1, [r7, #0]
 80050ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	db0a      	blt.n	80050ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	b2da      	uxtb	r2, r3
 80050dc:	490c      	ldr	r1, [pc, #48]	; (8005110 <__NVIC_SetPriority+0x4c>)
 80050de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050e2:	0112      	lsls	r2, r2, #4
 80050e4:	b2d2      	uxtb	r2, r2
 80050e6:	440b      	add	r3, r1
 80050e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80050ec:	e00a      	b.n	8005104 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	b2da      	uxtb	r2, r3
 80050f2:	4908      	ldr	r1, [pc, #32]	; (8005114 <__NVIC_SetPriority+0x50>)
 80050f4:	79fb      	ldrb	r3, [r7, #7]
 80050f6:	f003 030f 	and.w	r3, r3, #15
 80050fa:	3b04      	subs	r3, #4
 80050fc:	0112      	lsls	r2, r2, #4
 80050fe:	b2d2      	uxtb	r2, r2
 8005100:	440b      	add	r3, r1
 8005102:	761a      	strb	r2, [r3, #24]
}
 8005104:	bf00      	nop
 8005106:	370c      	adds	r7, #12
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr
 8005110:	e000e100 	.word	0xe000e100
 8005114:	e000ed00 	.word	0xe000ed00

08005118 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005118:	b480      	push	{r7}
 800511a:	b089      	sub	sp, #36	; 0x24
 800511c:	af00      	add	r7, sp, #0
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f003 0307 	and.w	r3, r3, #7
 800512a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800512c:	69fb      	ldr	r3, [r7, #28]
 800512e:	f1c3 0307 	rsb	r3, r3, #7
 8005132:	2b04      	cmp	r3, #4
 8005134:	bf28      	it	cs
 8005136:	2304      	movcs	r3, #4
 8005138:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	3304      	adds	r3, #4
 800513e:	2b06      	cmp	r3, #6
 8005140:	d902      	bls.n	8005148 <NVIC_EncodePriority+0x30>
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	3b03      	subs	r3, #3
 8005146:	e000      	b.n	800514a <NVIC_EncodePriority+0x32>
 8005148:	2300      	movs	r3, #0
 800514a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800514c:	f04f 32ff 	mov.w	r2, #4294967295
 8005150:	69bb      	ldr	r3, [r7, #24]
 8005152:	fa02 f303 	lsl.w	r3, r2, r3
 8005156:	43da      	mvns	r2, r3
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	401a      	ands	r2, r3
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005160:	f04f 31ff 	mov.w	r1, #4294967295
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	fa01 f303 	lsl.w	r3, r1, r3
 800516a:	43d9      	mvns	r1, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005170:	4313      	orrs	r3, r2
         );
}
 8005172:	4618      	mov	r0, r3
 8005174:	3724      	adds	r7, #36	; 0x24
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr
	...

08005180 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b082      	sub	sp, #8
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	3b01      	subs	r3, #1
 800518c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005190:	d301      	bcc.n	8005196 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005192:	2301      	movs	r3, #1
 8005194:	e00f      	b.n	80051b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005196:	4a0a      	ldr	r2, [pc, #40]	; (80051c0 <SysTick_Config+0x40>)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	3b01      	subs	r3, #1
 800519c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800519e:	210f      	movs	r1, #15
 80051a0:	f04f 30ff 	mov.w	r0, #4294967295
 80051a4:	f7ff ff8e 	bl	80050c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80051a8:	4b05      	ldr	r3, [pc, #20]	; (80051c0 <SysTick_Config+0x40>)
 80051aa:	2200      	movs	r2, #0
 80051ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80051ae:	4b04      	ldr	r3, [pc, #16]	; (80051c0 <SysTick_Config+0x40>)
 80051b0:	2207      	movs	r2, #7
 80051b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3708      	adds	r7, #8
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	e000e010 	.word	0xe000e010

080051c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b082      	sub	sp, #8
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f7ff ff29 	bl	8005024 <__NVIC_SetPriorityGrouping>
}
 80051d2:	bf00      	nop
 80051d4:	3708      	adds	r7, #8
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}

080051da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80051da:	b580      	push	{r7, lr}
 80051dc:	b086      	sub	sp, #24
 80051de:	af00      	add	r7, sp, #0
 80051e0:	4603      	mov	r3, r0
 80051e2:	60b9      	str	r1, [r7, #8]
 80051e4:	607a      	str	r2, [r7, #4]
 80051e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80051e8:	2300      	movs	r3, #0
 80051ea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80051ec:	f7ff ff3e 	bl	800506c <__NVIC_GetPriorityGrouping>
 80051f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	68b9      	ldr	r1, [r7, #8]
 80051f6:	6978      	ldr	r0, [r7, #20]
 80051f8:	f7ff ff8e 	bl	8005118 <NVIC_EncodePriority>
 80051fc:	4602      	mov	r2, r0
 80051fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005202:	4611      	mov	r1, r2
 8005204:	4618      	mov	r0, r3
 8005206:	f7ff ff5d 	bl	80050c4 <__NVIC_SetPriority>
}
 800520a:	bf00      	nop
 800520c:	3718      	adds	r7, #24
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}

08005212 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005212:	b580      	push	{r7, lr}
 8005214:	b082      	sub	sp, #8
 8005216:	af00      	add	r7, sp, #0
 8005218:	4603      	mov	r3, r0
 800521a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800521c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005220:	4618      	mov	r0, r3
 8005222:	f7ff ff31 	bl	8005088 <__NVIC_EnableIRQ>
}
 8005226:	bf00      	nop
 8005228:	3708      	adds	r7, #8
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}

0800522e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800522e:	b580      	push	{r7, lr}
 8005230:	b082      	sub	sp, #8
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f7ff ffa2 	bl	8005180 <SysTick_Config>
 800523c:	4603      	mov	r3, r0
}
 800523e:	4618      	mov	r0, r3
 8005240:	3708      	adds	r7, #8
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
	...

08005248 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005248:	b480      	push	{r7}
 800524a:	b085      	sub	sp, #20
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d101      	bne.n	800525a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e098      	b.n	800538c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	461a      	mov	r2, r3
 8005260:	4b4d      	ldr	r3, [pc, #308]	; (8005398 <HAL_DMA_Init+0x150>)
 8005262:	429a      	cmp	r2, r3
 8005264:	d80f      	bhi.n	8005286 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	461a      	mov	r2, r3
 800526c:	4b4b      	ldr	r3, [pc, #300]	; (800539c <HAL_DMA_Init+0x154>)
 800526e:	4413      	add	r3, r2
 8005270:	4a4b      	ldr	r2, [pc, #300]	; (80053a0 <HAL_DMA_Init+0x158>)
 8005272:	fba2 2303 	umull	r2, r3, r2, r3
 8005276:	091b      	lsrs	r3, r3, #4
 8005278:	009a      	lsls	r2, r3, #2
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a48      	ldr	r2, [pc, #288]	; (80053a4 <HAL_DMA_Init+0x15c>)
 8005282:	641a      	str	r2, [r3, #64]	; 0x40
 8005284:	e00e      	b.n	80052a4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	461a      	mov	r2, r3
 800528c:	4b46      	ldr	r3, [pc, #280]	; (80053a8 <HAL_DMA_Init+0x160>)
 800528e:	4413      	add	r3, r2
 8005290:	4a43      	ldr	r2, [pc, #268]	; (80053a0 <HAL_DMA_Init+0x158>)
 8005292:	fba2 2303 	umull	r2, r3, r2, r3
 8005296:	091b      	lsrs	r3, r3, #4
 8005298:	009a      	lsls	r2, r3, #2
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a42      	ldr	r2, [pc, #264]	; (80053ac <HAL_DMA_Init+0x164>)
 80052a2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2202      	movs	r2, #2
 80052a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80052ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052be:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80052c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	691b      	ldr	r3, [r3, #16]
 80052ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	699b      	ldr	r3, [r3, #24]
 80052da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a1b      	ldr	r3, [r3, #32]
 80052e6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80052e8:	68fa      	ldr	r2, [r7, #12]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	68fa      	ldr	r2, [r7, #12]
 80052f4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052fe:	d039      	beq.n	8005374 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005304:	4a27      	ldr	r2, [pc, #156]	; (80053a4 <HAL_DMA_Init+0x15c>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d11a      	bne.n	8005340 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800530a:	4b29      	ldr	r3, [pc, #164]	; (80053b0 <HAL_DMA_Init+0x168>)
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005312:	f003 031c 	and.w	r3, r3, #28
 8005316:	210f      	movs	r1, #15
 8005318:	fa01 f303 	lsl.w	r3, r1, r3
 800531c:	43db      	mvns	r3, r3
 800531e:	4924      	ldr	r1, [pc, #144]	; (80053b0 <HAL_DMA_Init+0x168>)
 8005320:	4013      	ands	r3, r2
 8005322:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005324:	4b22      	ldr	r3, [pc, #136]	; (80053b0 <HAL_DMA_Init+0x168>)
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6859      	ldr	r1, [r3, #4]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005330:	f003 031c 	and.w	r3, r3, #28
 8005334:	fa01 f303 	lsl.w	r3, r1, r3
 8005338:	491d      	ldr	r1, [pc, #116]	; (80053b0 <HAL_DMA_Init+0x168>)
 800533a:	4313      	orrs	r3, r2
 800533c:	600b      	str	r3, [r1, #0]
 800533e:	e019      	b.n	8005374 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005340:	4b1c      	ldr	r3, [pc, #112]	; (80053b4 <HAL_DMA_Init+0x16c>)
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005348:	f003 031c 	and.w	r3, r3, #28
 800534c:	210f      	movs	r1, #15
 800534e:	fa01 f303 	lsl.w	r3, r1, r3
 8005352:	43db      	mvns	r3, r3
 8005354:	4917      	ldr	r1, [pc, #92]	; (80053b4 <HAL_DMA_Init+0x16c>)
 8005356:	4013      	ands	r3, r2
 8005358:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800535a:	4b16      	ldr	r3, [pc, #88]	; (80053b4 <HAL_DMA_Init+0x16c>)
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6859      	ldr	r1, [r3, #4]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005366:	f003 031c 	and.w	r3, r3, #28
 800536a:	fa01 f303 	lsl.w	r3, r1, r3
 800536e:	4911      	ldr	r1, [pc, #68]	; (80053b4 <HAL_DMA_Init+0x16c>)
 8005370:	4313      	orrs	r3, r2
 8005372:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2201      	movs	r2, #1
 800537e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800538a:	2300      	movs	r3, #0
}
 800538c:	4618      	mov	r0, r3
 800538e:	3714      	adds	r7, #20
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr
 8005398:	40020407 	.word	0x40020407
 800539c:	bffdfff8 	.word	0xbffdfff8
 80053a0:	cccccccd 	.word	0xcccccccd
 80053a4:	40020000 	.word	0x40020000
 80053a8:	bffdfbf8 	.word	0xbffdfbf8
 80053ac:	40020400 	.word	0x40020400
 80053b0:	400200a8 	.word	0x400200a8
 80053b4:	400204a8 	.word	0x400204a8

080053b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b086      	sub	sp, #24
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]
 80053c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053c6:	2300      	movs	r3, #0
 80053c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d101      	bne.n	80053d8 <HAL_DMA_Start_IT+0x20>
 80053d4:	2302      	movs	r3, #2
 80053d6:	e04b      	b.n	8005470 <HAL_DMA_Start_IT+0xb8>
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d13a      	bne.n	8005462 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2202      	movs	r2, #2
 80053f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2200      	movs	r2, #0
 80053f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f022 0201 	bic.w	r2, r2, #1
 8005408:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	68b9      	ldr	r1, [r7, #8]
 8005410:	68f8      	ldr	r0, [r7, #12]
 8005412:	f000 f8e0 	bl	80055d6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800541a:	2b00      	cmp	r3, #0
 800541c:	d008      	beq.n	8005430 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f042 020e 	orr.w	r2, r2, #14
 800542c:	601a      	str	r2, [r3, #0]
 800542e:	e00f      	b.n	8005450 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f022 0204 	bic.w	r2, r2, #4
 800543e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f042 020a 	orr.w	r2, r2, #10
 800544e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f042 0201 	orr.w	r2, r2, #1
 800545e:	601a      	str	r2, [r3, #0]
 8005460:	e005      	b.n	800546e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2200      	movs	r2, #0
 8005466:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800546a:	2302      	movs	r3, #2
 800546c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800546e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005470:	4618      	mov	r0, r3
 8005472:	3718      	adds	r7, #24
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005494:	f003 031c 	and.w	r3, r3, #28
 8005498:	2204      	movs	r2, #4
 800549a:	409a      	lsls	r2, r3
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	4013      	ands	r3, r2
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d026      	beq.n	80054f2 <HAL_DMA_IRQHandler+0x7a>
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	f003 0304 	and.w	r3, r3, #4
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d021      	beq.n	80054f2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0320 	and.w	r3, r3, #32
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d107      	bne.n	80054cc <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f022 0204 	bic.w	r2, r2, #4
 80054ca:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054d0:	f003 021c 	and.w	r2, r3, #28
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d8:	2104      	movs	r1, #4
 80054da:	fa01 f202 	lsl.w	r2, r1, r2
 80054de:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d071      	beq.n	80055cc <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80054f0:	e06c      	b.n	80055cc <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054f6:	f003 031c 	and.w	r3, r3, #28
 80054fa:	2202      	movs	r2, #2
 80054fc:	409a      	lsls	r2, r3
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	4013      	ands	r3, r2
 8005502:	2b00      	cmp	r3, #0
 8005504:	d02e      	beq.n	8005564 <HAL_DMA_IRQHandler+0xec>
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	f003 0302 	and.w	r3, r3, #2
 800550c:	2b00      	cmp	r3, #0
 800550e:	d029      	beq.n	8005564 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 0320 	and.w	r3, r3, #32
 800551a:	2b00      	cmp	r3, #0
 800551c:	d10b      	bne.n	8005536 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f022 020a 	bic.w	r2, r2, #10
 800552c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2201      	movs	r2, #1
 8005532:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800553a:	f003 021c 	and.w	r2, r3, #28
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005542:	2102      	movs	r1, #2
 8005544:	fa01 f202 	lsl.w	r2, r1, r2
 8005548:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005556:	2b00      	cmp	r3, #0
 8005558:	d038      	beq.n	80055cc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005562:	e033      	b.n	80055cc <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005568:	f003 031c 	and.w	r3, r3, #28
 800556c:	2208      	movs	r2, #8
 800556e:	409a      	lsls	r2, r3
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	4013      	ands	r3, r2
 8005574:	2b00      	cmp	r3, #0
 8005576:	d02a      	beq.n	80055ce <HAL_DMA_IRQHandler+0x156>
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	f003 0308 	and.w	r3, r3, #8
 800557e:	2b00      	cmp	r3, #0
 8005580:	d025      	beq.n	80055ce <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f022 020e 	bic.w	r2, r2, #14
 8005590:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005596:	f003 021c 	and.w	r2, r3, #28
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559e:	2101      	movs	r1, #1
 80055a0:	fa01 f202 	lsl.w	r2, r1, r2
 80055a4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2201      	movs	r2, #1
 80055aa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d004      	beq.n	80055ce <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80055cc:	bf00      	nop
 80055ce:	bf00      	nop
}
 80055d0:	3710      	adds	r7, #16
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}

080055d6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80055d6:	b480      	push	{r7}
 80055d8:	b085      	sub	sp, #20
 80055da:	af00      	add	r7, sp, #0
 80055dc:	60f8      	str	r0, [r7, #12]
 80055de:	60b9      	str	r1, [r7, #8]
 80055e0:	607a      	str	r2, [r7, #4]
 80055e2:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055e8:	f003 021c 	and.w	r2, r3, #28
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f0:	2101      	movs	r1, #1
 80055f2:	fa01 f202 	lsl.w	r2, r1, r2
 80055f6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	683a      	ldr	r2, [r7, #0]
 80055fe:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	2b10      	cmp	r3, #16
 8005606:	d108      	bne.n	800561a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68ba      	ldr	r2, [r7, #8]
 8005616:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005618:	e007      	b.n	800562a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	68ba      	ldr	r2, [r7, #8]
 8005620:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	60da      	str	r2, [r3, #12]
}
 800562a:	bf00      	nop
 800562c:	3714      	adds	r7, #20
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr
	...

08005638 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005638:	b480      	push	{r7}
 800563a:	b087      	sub	sp, #28
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005642:	2300      	movs	r3, #0
 8005644:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005646:	e17f      	b.n	8005948 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	2101      	movs	r1, #1
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	fa01 f303 	lsl.w	r3, r1, r3
 8005654:	4013      	ands	r3, r2
 8005656:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2b00      	cmp	r3, #0
 800565c:	f000 8171 	beq.w	8005942 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	f003 0303 	and.w	r3, r3, #3
 8005668:	2b01      	cmp	r3, #1
 800566a:	d005      	beq.n	8005678 <HAL_GPIO_Init+0x40>
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	f003 0303 	and.w	r3, r3, #3
 8005674:	2b02      	cmp	r3, #2
 8005676:	d130      	bne.n	80056da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	005b      	lsls	r3, r3, #1
 8005682:	2203      	movs	r2, #3
 8005684:	fa02 f303 	lsl.w	r3, r2, r3
 8005688:	43db      	mvns	r3, r3
 800568a:	693a      	ldr	r2, [r7, #16]
 800568c:	4013      	ands	r3, r2
 800568e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	68da      	ldr	r2, [r3, #12]
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	005b      	lsls	r3, r3, #1
 8005698:	fa02 f303 	lsl.w	r3, r2, r3
 800569c:	693a      	ldr	r2, [r7, #16]
 800569e:	4313      	orrs	r3, r2
 80056a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	693a      	ldr	r2, [r7, #16]
 80056a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80056ae:	2201      	movs	r2, #1
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	fa02 f303 	lsl.w	r3, r2, r3
 80056b6:	43db      	mvns	r3, r3
 80056b8:	693a      	ldr	r2, [r7, #16]
 80056ba:	4013      	ands	r3, r2
 80056bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	091b      	lsrs	r3, r3, #4
 80056c4:	f003 0201 	and.w	r2, r3, #1
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	fa02 f303 	lsl.w	r3, r2, r3
 80056ce:	693a      	ldr	r2, [r7, #16]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	693a      	ldr	r2, [r7, #16]
 80056d8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	f003 0303 	and.w	r3, r3, #3
 80056e2:	2b03      	cmp	r3, #3
 80056e4:	d118      	bne.n	8005718 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80056ec:	2201      	movs	r2, #1
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	fa02 f303 	lsl.w	r3, r2, r3
 80056f4:	43db      	mvns	r3, r3
 80056f6:	693a      	ldr	r2, [r7, #16]
 80056f8:	4013      	ands	r3, r2
 80056fa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	08db      	lsrs	r3, r3, #3
 8005702:	f003 0201 	and.w	r2, r3, #1
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	fa02 f303 	lsl.w	r3, r2, r3
 800570c:	693a      	ldr	r2, [r7, #16]
 800570e:	4313      	orrs	r3, r2
 8005710:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	693a      	ldr	r2, [r7, #16]
 8005716:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	f003 0303 	and.w	r3, r3, #3
 8005720:	2b03      	cmp	r3, #3
 8005722:	d017      	beq.n	8005754 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	005b      	lsls	r3, r3, #1
 800572e:	2203      	movs	r2, #3
 8005730:	fa02 f303 	lsl.w	r3, r2, r3
 8005734:	43db      	mvns	r3, r3
 8005736:	693a      	ldr	r2, [r7, #16]
 8005738:	4013      	ands	r3, r2
 800573a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	689a      	ldr	r2, [r3, #8]
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	005b      	lsls	r3, r3, #1
 8005744:	fa02 f303 	lsl.w	r3, r2, r3
 8005748:	693a      	ldr	r2, [r7, #16]
 800574a:	4313      	orrs	r3, r2
 800574c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	693a      	ldr	r2, [r7, #16]
 8005752:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	f003 0303 	and.w	r3, r3, #3
 800575c:	2b02      	cmp	r3, #2
 800575e:	d123      	bne.n	80057a8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	08da      	lsrs	r2, r3, #3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	3208      	adds	r2, #8
 8005768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800576c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	f003 0307 	and.w	r3, r3, #7
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	220f      	movs	r2, #15
 8005778:	fa02 f303 	lsl.w	r3, r2, r3
 800577c:	43db      	mvns	r3, r3
 800577e:	693a      	ldr	r2, [r7, #16]
 8005780:	4013      	ands	r3, r2
 8005782:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	691a      	ldr	r2, [r3, #16]
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	f003 0307 	and.w	r3, r3, #7
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	fa02 f303 	lsl.w	r3, r2, r3
 8005794:	693a      	ldr	r2, [r7, #16]
 8005796:	4313      	orrs	r3, r2
 8005798:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	08da      	lsrs	r2, r3, #3
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	3208      	adds	r2, #8
 80057a2:	6939      	ldr	r1, [r7, #16]
 80057a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	005b      	lsls	r3, r3, #1
 80057b2:	2203      	movs	r2, #3
 80057b4:	fa02 f303 	lsl.w	r3, r2, r3
 80057b8:	43db      	mvns	r3, r3
 80057ba:	693a      	ldr	r2, [r7, #16]
 80057bc:	4013      	ands	r3, r2
 80057be:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	f003 0203 	and.w	r2, r3, #3
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	005b      	lsls	r3, r3, #1
 80057cc:	fa02 f303 	lsl.w	r3, r2, r3
 80057d0:	693a      	ldr	r2, [r7, #16]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	693a      	ldr	r2, [r7, #16]
 80057da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	f000 80ac 	beq.w	8005942 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057ea:	4b5f      	ldr	r3, [pc, #380]	; (8005968 <HAL_GPIO_Init+0x330>)
 80057ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057ee:	4a5e      	ldr	r2, [pc, #376]	; (8005968 <HAL_GPIO_Init+0x330>)
 80057f0:	f043 0301 	orr.w	r3, r3, #1
 80057f4:	6613      	str	r3, [r2, #96]	; 0x60
 80057f6:	4b5c      	ldr	r3, [pc, #368]	; (8005968 <HAL_GPIO_Init+0x330>)
 80057f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057fa:	f003 0301 	and.w	r3, r3, #1
 80057fe:	60bb      	str	r3, [r7, #8]
 8005800:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005802:	4a5a      	ldr	r2, [pc, #360]	; (800596c <HAL_GPIO_Init+0x334>)
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	089b      	lsrs	r3, r3, #2
 8005808:	3302      	adds	r3, #2
 800580a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800580e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	f003 0303 	and.w	r3, r3, #3
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	220f      	movs	r2, #15
 800581a:	fa02 f303 	lsl.w	r3, r2, r3
 800581e:	43db      	mvns	r3, r3
 8005820:	693a      	ldr	r2, [r7, #16]
 8005822:	4013      	ands	r3, r2
 8005824:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800582c:	d025      	beq.n	800587a <HAL_GPIO_Init+0x242>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a4f      	ldr	r2, [pc, #316]	; (8005970 <HAL_GPIO_Init+0x338>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d01f      	beq.n	8005876 <HAL_GPIO_Init+0x23e>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a4e      	ldr	r2, [pc, #312]	; (8005974 <HAL_GPIO_Init+0x33c>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d019      	beq.n	8005872 <HAL_GPIO_Init+0x23a>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4a4d      	ldr	r2, [pc, #308]	; (8005978 <HAL_GPIO_Init+0x340>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d013      	beq.n	800586e <HAL_GPIO_Init+0x236>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4a4c      	ldr	r2, [pc, #304]	; (800597c <HAL_GPIO_Init+0x344>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d00d      	beq.n	800586a <HAL_GPIO_Init+0x232>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a4b      	ldr	r2, [pc, #300]	; (8005980 <HAL_GPIO_Init+0x348>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d007      	beq.n	8005866 <HAL_GPIO_Init+0x22e>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4a4a      	ldr	r2, [pc, #296]	; (8005984 <HAL_GPIO_Init+0x34c>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d101      	bne.n	8005862 <HAL_GPIO_Init+0x22a>
 800585e:	2306      	movs	r3, #6
 8005860:	e00c      	b.n	800587c <HAL_GPIO_Init+0x244>
 8005862:	2307      	movs	r3, #7
 8005864:	e00a      	b.n	800587c <HAL_GPIO_Init+0x244>
 8005866:	2305      	movs	r3, #5
 8005868:	e008      	b.n	800587c <HAL_GPIO_Init+0x244>
 800586a:	2304      	movs	r3, #4
 800586c:	e006      	b.n	800587c <HAL_GPIO_Init+0x244>
 800586e:	2303      	movs	r3, #3
 8005870:	e004      	b.n	800587c <HAL_GPIO_Init+0x244>
 8005872:	2302      	movs	r3, #2
 8005874:	e002      	b.n	800587c <HAL_GPIO_Init+0x244>
 8005876:	2301      	movs	r3, #1
 8005878:	e000      	b.n	800587c <HAL_GPIO_Init+0x244>
 800587a:	2300      	movs	r3, #0
 800587c:	697a      	ldr	r2, [r7, #20]
 800587e:	f002 0203 	and.w	r2, r2, #3
 8005882:	0092      	lsls	r2, r2, #2
 8005884:	4093      	lsls	r3, r2
 8005886:	693a      	ldr	r2, [r7, #16]
 8005888:	4313      	orrs	r3, r2
 800588a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800588c:	4937      	ldr	r1, [pc, #220]	; (800596c <HAL_GPIO_Init+0x334>)
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	089b      	lsrs	r3, r3, #2
 8005892:	3302      	adds	r3, #2
 8005894:	693a      	ldr	r2, [r7, #16]
 8005896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800589a:	4b3b      	ldr	r3, [pc, #236]	; (8005988 <HAL_GPIO_Init+0x350>)
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	43db      	mvns	r3, r3
 80058a4:	693a      	ldr	r2, [r7, #16]
 80058a6:	4013      	ands	r3, r2
 80058a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d003      	beq.n	80058be <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80058b6:	693a      	ldr	r2, [r7, #16]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80058be:	4a32      	ldr	r2, [pc, #200]	; (8005988 <HAL_GPIO_Init+0x350>)
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80058c4:	4b30      	ldr	r3, [pc, #192]	; (8005988 <HAL_GPIO_Init+0x350>)
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	43db      	mvns	r3, r3
 80058ce:	693a      	ldr	r2, [r7, #16]
 80058d0:	4013      	ands	r3, r2
 80058d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d003      	beq.n	80058e8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80058e0:	693a      	ldr	r2, [r7, #16]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80058e8:	4a27      	ldr	r2, [pc, #156]	; (8005988 <HAL_GPIO_Init+0x350>)
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80058ee:	4b26      	ldr	r3, [pc, #152]	; (8005988 <HAL_GPIO_Init+0x350>)
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	43db      	mvns	r3, r3
 80058f8:	693a      	ldr	r2, [r7, #16]
 80058fa:	4013      	ands	r3, r2
 80058fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005906:	2b00      	cmp	r3, #0
 8005908:	d003      	beq.n	8005912 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800590a:	693a      	ldr	r2, [r7, #16]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	4313      	orrs	r3, r2
 8005910:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005912:	4a1d      	ldr	r2, [pc, #116]	; (8005988 <HAL_GPIO_Init+0x350>)
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005918:	4b1b      	ldr	r3, [pc, #108]	; (8005988 <HAL_GPIO_Init+0x350>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	43db      	mvns	r3, r3
 8005922:	693a      	ldr	r2, [r7, #16]
 8005924:	4013      	ands	r3, r2
 8005926:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005930:	2b00      	cmp	r3, #0
 8005932:	d003      	beq.n	800593c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8005934:	693a      	ldr	r2, [r7, #16]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	4313      	orrs	r3, r2
 800593a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800593c:	4a12      	ldr	r2, [pc, #72]	; (8005988 <HAL_GPIO_Init+0x350>)
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	3301      	adds	r3, #1
 8005946:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	fa22 f303 	lsr.w	r3, r2, r3
 8005952:	2b00      	cmp	r3, #0
 8005954:	f47f ae78 	bne.w	8005648 <HAL_GPIO_Init+0x10>
  }
}
 8005958:	bf00      	nop
 800595a:	bf00      	nop
 800595c:	371c      	adds	r7, #28
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr
 8005966:	bf00      	nop
 8005968:	40021000 	.word	0x40021000
 800596c:	40010000 	.word	0x40010000
 8005970:	48000400 	.word	0x48000400
 8005974:	48000800 	.word	0x48000800
 8005978:	48000c00 	.word	0x48000c00
 800597c:	48001000 	.word	0x48001000
 8005980:	48001400 	.word	0x48001400
 8005984:	48001800 	.word	0x48001800
 8005988:	40010400 	.word	0x40010400

0800598c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800598c:	b480      	push	{r7}
 800598e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005990:	4b05      	ldr	r3, [pc, #20]	; (80059a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a04      	ldr	r2, [pc, #16]	; (80059a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005996:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800599a:	6013      	str	r3, [r2, #0]
}
 800599c:	bf00      	nop
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr
 80059a6:	bf00      	nop
 80059a8:	40007000 	.word	0x40007000

080059ac <HAL_PWR_EnterSTANDBYMode>:
  *        These states are effective in Standby mode only if APC bit is set through
  *        HAL_PWREx_EnablePullUpPullDownConfig() API.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 80059ac:	b480      	push	{r7}
 80059ae:	af00      	add	r7, sp, #0
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STANDBY);
 80059b0:	4b09      	ldr	r3, [pc, #36]	; (80059d8 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f023 0307 	bic.w	r3, r3, #7
 80059b8:	4a07      	ldr	r2, [pc, #28]	; (80059d8 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80059ba:	f043 0303 	orr.w	r3, r3, #3
 80059be:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80059c0:	4b06      	ldr	r3, [pc, #24]	; (80059dc <HAL_PWR_EnterSTANDBYMode+0x30>)
 80059c2:	691b      	ldr	r3, [r3, #16]
 80059c4:	4a05      	ldr	r2, [pc, #20]	; (80059dc <HAL_PWR_EnterSTANDBYMode+0x30>)
 80059c6:	f043 0304 	orr.w	r3, r3, #4
 80059ca:	6113      	str	r3, [r2, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 80059cc:	bf30      	wfi
}
 80059ce:	bf00      	nop
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr
 80059d8:	40007000 	.word	0x40007000
 80059dc:	e000ed00 	.word	0xe000ed00

080059e0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80059e0:	b480      	push	{r7}
 80059e2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80059e4:	4b04      	ldr	r3, [pc, #16]	; (80059f8 <HAL_PWREx_GetVoltageRange+0x18>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr
 80059f6:	bf00      	nop
 80059f8:	40007000 	.word	0x40007000

080059fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b085      	sub	sp, #20
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a0a:	d130      	bne.n	8005a6e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005a0c:	4b23      	ldr	r3, [pc, #140]	; (8005a9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005a14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a18:	d038      	beq.n	8005a8c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005a1a:	4b20      	ldr	r3, [pc, #128]	; (8005a9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005a22:	4a1e      	ldr	r2, [pc, #120]	; (8005a9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005a24:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005a28:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005a2a:	4b1d      	ldr	r3, [pc, #116]	; (8005aa0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	2232      	movs	r2, #50	; 0x32
 8005a30:	fb02 f303 	mul.w	r3, r2, r3
 8005a34:	4a1b      	ldr	r2, [pc, #108]	; (8005aa4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005a36:	fba2 2303 	umull	r2, r3, r2, r3
 8005a3a:	0c9b      	lsrs	r3, r3, #18
 8005a3c:	3301      	adds	r3, #1
 8005a3e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005a40:	e002      	b.n	8005a48 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	3b01      	subs	r3, #1
 8005a46:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005a48:	4b14      	ldr	r3, [pc, #80]	; (8005a9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005a4a:	695b      	ldr	r3, [r3, #20]
 8005a4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a54:	d102      	bne.n	8005a5c <HAL_PWREx_ControlVoltageScaling+0x60>
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d1f2      	bne.n	8005a42 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005a5c:	4b0f      	ldr	r3, [pc, #60]	; (8005a9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005a5e:	695b      	ldr	r3, [r3, #20]
 8005a60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a68:	d110      	bne.n	8005a8c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	e00f      	b.n	8005a8e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005a6e:	4b0b      	ldr	r3, [pc, #44]	; (8005a9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005a76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a7a:	d007      	beq.n	8005a8c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005a7c:	4b07      	ldr	r3, [pc, #28]	; (8005a9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005a84:	4a05      	ldr	r2, [pc, #20]	; (8005a9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005a86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005a8a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005a8c:	2300      	movs	r3, #0
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3714      	adds	r7, #20
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr
 8005a9a:	bf00      	nop
 8005a9c:	40007000 	.word	0x40007000
 8005aa0:	200000bc 	.word	0x200000bc
 8005aa4:	431bde83 	.word	0x431bde83

08005aa8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b088      	sub	sp, #32
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d101      	bne.n	8005aba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e3d8      	b.n	800626c <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005aba:	4b97      	ldr	r3, [pc, #604]	; (8005d18 <HAL_RCC_OscConfig+0x270>)
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	f003 030c 	and.w	r3, r3, #12
 8005ac2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ac4:	4b94      	ldr	r3, [pc, #592]	; (8005d18 <HAL_RCC_OscConfig+0x270>)
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	f003 0303 	and.w	r3, r3, #3
 8005acc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f003 0310 	and.w	r3, r3, #16
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	f000 80e4 	beq.w	8005ca4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d007      	beq.n	8005af2 <HAL_RCC_OscConfig+0x4a>
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	2b0c      	cmp	r3, #12
 8005ae6:	f040 808b 	bne.w	8005c00 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	f040 8087 	bne.w	8005c00 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005af2:	4b89      	ldr	r3, [pc, #548]	; (8005d18 <HAL_RCC_OscConfig+0x270>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f003 0302 	and.w	r3, r3, #2
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d005      	beq.n	8005b0a <HAL_RCC_OscConfig+0x62>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	699b      	ldr	r3, [r3, #24]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d101      	bne.n	8005b0a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e3b0      	b.n	800626c <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6a1a      	ldr	r2, [r3, #32]
 8005b0e:	4b82      	ldr	r3, [pc, #520]	; (8005d18 <HAL_RCC_OscConfig+0x270>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f003 0308 	and.w	r3, r3, #8
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d004      	beq.n	8005b24 <HAL_RCC_OscConfig+0x7c>
 8005b1a:	4b7f      	ldr	r3, [pc, #508]	; (8005d18 <HAL_RCC_OscConfig+0x270>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b22:	e005      	b.n	8005b30 <HAL_RCC_OscConfig+0x88>
 8005b24:	4b7c      	ldr	r3, [pc, #496]	; (8005d18 <HAL_RCC_OscConfig+0x270>)
 8005b26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b2a:	091b      	lsrs	r3, r3, #4
 8005b2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d223      	bcs.n	8005b7c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6a1b      	ldr	r3, [r3, #32]
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f000 fd43 	bl	80065c4 <RCC_SetFlashLatencyFromMSIRange>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d001      	beq.n	8005b48 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	e391      	b.n	800626c <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005b48:	4b73      	ldr	r3, [pc, #460]	; (8005d18 <HAL_RCC_OscConfig+0x270>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a72      	ldr	r2, [pc, #456]	; (8005d18 <HAL_RCC_OscConfig+0x270>)
 8005b4e:	f043 0308 	orr.w	r3, r3, #8
 8005b52:	6013      	str	r3, [r2, #0]
 8005b54:	4b70      	ldr	r3, [pc, #448]	; (8005d18 <HAL_RCC_OscConfig+0x270>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6a1b      	ldr	r3, [r3, #32]
 8005b60:	496d      	ldr	r1, [pc, #436]	; (8005d18 <HAL_RCC_OscConfig+0x270>)
 8005b62:	4313      	orrs	r3, r2
 8005b64:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005b66:	4b6c      	ldr	r3, [pc, #432]	; (8005d18 <HAL_RCC_OscConfig+0x270>)
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	69db      	ldr	r3, [r3, #28]
 8005b72:	021b      	lsls	r3, r3, #8
 8005b74:	4968      	ldr	r1, [pc, #416]	; (8005d18 <HAL_RCC_OscConfig+0x270>)
 8005b76:	4313      	orrs	r3, r2
 8005b78:	604b      	str	r3, [r1, #4]
 8005b7a:	e025      	b.n	8005bc8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005b7c:	4b66      	ldr	r3, [pc, #408]	; (8005d18 <HAL_RCC_OscConfig+0x270>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a65      	ldr	r2, [pc, #404]	; (8005d18 <HAL_RCC_OscConfig+0x270>)
 8005b82:	f043 0308 	orr.w	r3, r3, #8
 8005b86:	6013      	str	r3, [r2, #0]
 8005b88:	4b63      	ldr	r3, [pc, #396]	; (8005d18 <HAL_RCC_OscConfig+0x270>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6a1b      	ldr	r3, [r3, #32]
 8005b94:	4960      	ldr	r1, [pc, #384]	; (8005d18 <HAL_RCC_OscConfig+0x270>)
 8005b96:	4313      	orrs	r3, r2
 8005b98:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005b9a:	4b5f      	ldr	r3, [pc, #380]	; (8005d18 <HAL_RCC_OscConfig+0x270>)
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	69db      	ldr	r3, [r3, #28]
 8005ba6:	021b      	lsls	r3, r3, #8
 8005ba8:	495b      	ldr	r1, [pc, #364]	; (8005d18 <HAL_RCC_OscConfig+0x270>)
 8005baa:	4313      	orrs	r3, r2
 8005bac:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005bae:	69bb      	ldr	r3, [r7, #24]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d109      	bne.n	8005bc8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6a1b      	ldr	r3, [r3, #32]
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f000 fd03 	bl	80065c4 <RCC_SetFlashLatencyFromMSIRange>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d001      	beq.n	8005bc8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e351      	b.n	800626c <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005bc8:	f000 fc38 	bl	800643c <HAL_RCC_GetSysClockFreq>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	4b52      	ldr	r3, [pc, #328]	; (8005d18 <HAL_RCC_OscConfig+0x270>)
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	091b      	lsrs	r3, r3, #4
 8005bd4:	f003 030f 	and.w	r3, r3, #15
 8005bd8:	4950      	ldr	r1, [pc, #320]	; (8005d1c <HAL_RCC_OscConfig+0x274>)
 8005bda:	5ccb      	ldrb	r3, [r1, r3]
 8005bdc:	f003 031f 	and.w	r3, r3, #31
 8005be0:	fa22 f303 	lsr.w	r3, r2, r3
 8005be4:	4a4e      	ldr	r2, [pc, #312]	; (8005d20 <HAL_RCC_OscConfig+0x278>)
 8005be6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005be8:	4b4e      	ldr	r3, [pc, #312]	; (8005d24 <HAL_RCC_OscConfig+0x27c>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4618      	mov	r0, r3
 8005bee:	f7fe f9f1 	bl	8003fd4 <HAL_InitTick>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005bf6:	7bfb      	ldrb	r3, [r7, #15]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d052      	beq.n	8005ca2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005bfc:	7bfb      	ldrb	r3, [r7, #15]
 8005bfe:	e335      	b.n	800626c <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	699b      	ldr	r3, [r3, #24]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d032      	beq.n	8005c6e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005c08:	4b43      	ldr	r3, [pc, #268]	; (8005d18 <HAL_RCC_OscConfig+0x270>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a42      	ldr	r2, [pc, #264]	; (8005d18 <HAL_RCC_OscConfig+0x270>)
 8005c0e:	f043 0301 	orr.w	r3, r3, #1
 8005c12:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005c14:	f7fe fa2e 	bl	8004074 <HAL_GetTick>
 8005c18:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005c1a:	e008      	b.n	8005c2e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005c1c:	f7fe fa2a 	bl	8004074 <HAL_GetTick>
 8005c20:	4602      	mov	r2, r0
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	1ad3      	subs	r3, r2, r3
 8005c26:	2b02      	cmp	r3, #2
 8005c28:	d901      	bls.n	8005c2e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8005c2a:	2303      	movs	r3, #3
 8005c2c:	e31e      	b.n	800626c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005c2e:	4b3a      	ldr	r3, [pc, #232]	; (8005d18 <HAL_RCC_OscConfig+0x270>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f003 0302 	and.w	r3, r3, #2
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d0f0      	beq.n	8005c1c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005c3a:	4b37      	ldr	r3, [pc, #220]	; (8005d18 <HAL_RCC_OscConfig+0x270>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a36      	ldr	r2, [pc, #216]	; (8005d18 <HAL_RCC_OscConfig+0x270>)
 8005c40:	f043 0308 	orr.w	r3, r3, #8
 8005c44:	6013      	str	r3, [r2, #0]
 8005c46:	4b34      	ldr	r3, [pc, #208]	; (8005d18 <HAL_RCC_OscConfig+0x270>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a1b      	ldr	r3, [r3, #32]
 8005c52:	4931      	ldr	r1, [pc, #196]	; (8005d18 <HAL_RCC_OscConfig+0x270>)
 8005c54:	4313      	orrs	r3, r2
 8005c56:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005c58:	4b2f      	ldr	r3, [pc, #188]	; (8005d18 <HAL_RCC_OscConfig+0x270>)
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	69db      	ldr	r3, [r3, #28]
 8005c64:	021b      	lsls	r3, r3, #8
 8005c66:	492c      	ldr	r1, [pc, #176]	; (8005d18 <HAL_RCC_OscConfig+0x270>)
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	604b      	str	r3, [r1, #4]
 8005c6c:	e01a      	b.n	8005ca4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005c6e:	4b2a      	ldr	r3, [pc, #168]	; (8005d18 <HAL_RCC_OscConfig+0x270>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a29      	ldr	r2, [pc, #164]	; (8005d18 <HAL_RCC_OscConfig+0x270>)
 8005c74:	f023 0301 	bic.w	r3, r3, #1
 8005c78:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005c7a:	f7fe f9fb 	bl	8004074 <HAL_GetTick>
 8005c7e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005c80:	e008      	b.n	8005c94 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005c82:	f7fe f9f7 	bl	8004074 <HAL_GetTick>
 8005c86:	4602      	mov	r2, r0
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	1ad3      	subs	r3, r2, r3
 8005c8c:	2b02      	cmp	r3, #2
 8005c8e:	d901      	bls.n	8005c94 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005c90:	2303      	movs	r3, #3
 8005c92:	e2eb      	b.n	800626c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005c94:	4b20      	ldr	r3, [pc, #128]	; (8005d18 <HAL_RCC_OscConfig+0x270>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f003 0302 	and.w	r3, r3, #2
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d1f0      	bne.n	8005c82 <HAL_RCC_OscConfig+0x1da>
 8005ca0:	e000      	b.n	8005ca4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005ca2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 0301 	and.w	r3, r3, #1
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d074      	beq.n	8005d9a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005cb0:	69bb      	ldr	r3, [r7, #24]
 8005cb2:	2b08      	cmp	r3, #8
 8005cb4:	d005      	beq.n	8005cc2 <HAL_RCC_OscConfig+0x21a>
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	2b0c      	cmp	r3, #12
 8005cba:	d10e      	bne.n	8005cda <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	2b03      	cmp	r3, #3
 8005cc0:	d10b      	bne.n	8005cda <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cc2:	4b15      	ldr	r3, [pc, #84]	; (8005d18 <HAL_RCC_OscConfig+0x270>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d064      	beq.n	8005d98 <HAL_RCC_OscConfig+0x2f0>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d160      	bne.n	8005d98 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e2c8      	b.n	800626c <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ce2:	d106      	bne.n	8005cf2 <HAL_RCC_OscConfig+0x24a>
 8005ce4:	4b0c      	ldr	r3, [pc, #48]	; (8005d18 <HAL_RCC_OscConfig+0x270>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a0b      	ldr	r2, [pc, #44]	; (8005d18 <HAL_RCC_OscConfig+0x270>)
 8005cea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cee:	6013      	str	r3, [r2, #0]
 8005cf0:	e026      	b.n	8005d40 <HAL_RCC_OscConfig+0x298>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005cfa:	d115      	bne.n	8005d28 <HAL_RCC_OscConfig+0x280>
 8005cfc:	4b06      	ldr	r3, [pc, #24]	; (8005d18 <HAL_RCC_OscConfig+0x270>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a05      	ldr	r2, [pc, #20]	; (8005d18 <HAL_RCC_OscConfig+0x270>)
 8005d02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d06:	6013      	str	r3, [r2, #0]
 8005d08:	4b03      	ldr	r3, [pc, #12]	; (8005d18 <HAL_RCC_OscConfig+0x270>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a02      	ldr	r2, [pc, #8]	; (8005d18 <HAL_RCC_OscConfig+0x270>)
 8005d0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d12:	6013      	str	r3, [r2, #0]
 8005d14:	e014      	b.n	8005d40 <HAL_RCC_OscConfig+0x298>
 8005d16:	bf00      	nop
 8005d18:	40021000 	.word	0x40021000
 8005d1c:	0800d350 	.word	0x0800d350
 8005d20:	200000bc 	.word	0x200000bc
 8005d24:	200000c0 	.word	0x200000c0
 8005d28:	4ba0      	ldr	r3, [pc, #640]	; (8005fac <HAL_RCC_OscConfig+0x504>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a9f      	ldr	r2, [pc, #636]	; (8005fac <HAL_RCC_OscConfig+0x504>)
 8005d2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d32:	6013      	str	r3, [r2, #0]
 8005d34:	4b9d      	ldr	r3, [pc, #628]	; (8005fac <HAL_RCC_OscConfig+0x504>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a9c      	ldr	r2, [pc, #624]	; (8005fac <HAL_RCC_OscConfig+0x504>)
 8005d3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d013      	beq.n	8005d70 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d48:	f7fe f994 	bl	8004074 <HAL_GetTick>
 8005d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d4e:	e008      	b.n	8005d62 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d50:	f7fe f990 	bl	8004074 <HAL_GetTick>
 8005d54:	4602      	mov	r2, r0
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	1ad3      	subs	r3, r2, r3
 8005d5a:	2b64      	cmp	r3, #100	; 0x64
 8005d5c:	d901      	bls.n	8005d62 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005d5e:	2303      	movs	r3, #3
 8005d60:	e284      	b.n	800626c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d62:	4b92      	ldr	r3, [pc, #584]	; (8005fac <HAL_RCC_OscConfig+0x504>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d0f0      	beq.n	8005d50 <HAL_RCC_OscConfig+0x2a8>
 8005d6e:	e014      	b.n	8005d9a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d70:	f7fe f980 	bl	8004074 <HAL_GetTick>
 8005d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005d76:	e008      	b.n	8005d8a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d78:	f7fe f97c 	bl	8004074 <HAL_GetTick>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	2b64      	cmp	r3, #100	; 0x64
 8005d84:	d901      	bls.n	8005d8a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005d86:	2303      	movs	r3, #3
 8005d88:	e270      	b.n	800626c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005d8a:	4b88      	ldr	r3, [pc, #544]	; (8005fac <HAL_RCC_OscConfig+0x504>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d1f0      	bne.n	8005d78 <HAL_RCC_OscConfig+0x2d0>
 8005d96:	e000      	b.n	8005d9a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f003 0302 	and.w	r3, r3, #2
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d060      	beq.n	8005e68 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005da6:	69bb      	ldr	r3, [r7, #24]
 8005da8:	2b04      	cmp	r3, #4
 8005daa:	d005      	beq.n	8005db8 <HAL_RCC_OscConfig+0x310>
 8005dac:	69bb      	ldr	r3, [r7, #24]
 8005dae:	2b0c      	cmp	r3, #12
 8005db0:	d119      	bne.n	8005de6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	2b02      	cmp	r3, #2
 8005db6:	d116      	bne.n	8005de6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005db8:	4b7c      	ldr	r3, [pc, #496]	; (8005fac <HAL_RCC_OscConfig+0x504>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d005      	beq.n	8005dd0 <HAL_RCC_OscConfig+0x328>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d101      	bne.n	8005dd0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e24d      	b.n	800626c <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dd0:	4b76      	ldr	r3, [pc, #472]	; (8005fac <HAL_RCC_OscConfig+0x504>)
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	691b      	ldr	r3, [r3, #16]
 8005ddc:	061b      	lsls	r3, r3, #24
 8005dde:	4973      	ldr	r1, [pc, #460]	; (8005fac <HAL_RCC_OscConfig+0x504>)
 8005de0:	4313      	orrs	r3, r2
 8005de2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005de4:	e040      	b.n	8005e68 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d023      	beq.n	8005e36 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005dee:	4b6f      	ldr	r3, [pc, #444]	; (8005fac <HAL_RCC_OscConfig+0x504>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a6e      	ldr	r2, [pc, #440]	; (8005fac <HAL_RCC_OscConfig+0x504>)
 8005df4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005df8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dfa:	f7fe f93b 	bl	8004074 <HAL_GetTick>
 8005dfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e00:	e008      	b.n	8005e14 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e02:	f7fe f937 	bl	8004074 <HAL_GetTick>
 8005e06:	4602      	mov	r2, r0
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	1ad3      	subs	r3, r2, r3
 8005e0c:	2b02      	cmp	r3, #2
 8005e0e:	d901      	bls.n	8005e14 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005e10:	2303      	movs	r3, #3
 8005e12:	e22b      	b.n	800626c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e14:	4b65      	ldr	r3, [pc, #404]	; (8005fac <HAL_RCC_OscConfig+0x504>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d0f0      	beq.n	8005e02 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e20:	4b62      	ldr	r3, [pc, #392]	; (8005fac <HAL_RCC_OscConfig+0x504>)
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	691b      	ldr	r3, [r3, #16]
 8005e2c:	061b      	lsls	r3, r3, #24
 8005e2e:	495f      	ldr	r1, [pc, #380]	; (8005fac <HAL_RCC_OscConfig+0x504>)
 8005e30:	4313      	orrs	r3, r2
 8005e32:	604b      	str	r3, [r1, #4]
 8005e34:	e018      	b.n	8005e68 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e36:	4b5d      	ldr	r3, [pc, #372]	; (8005fac <HAL_RCC_OscConfig+0x504>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a5c      	ldr	r2, [pc, #368]	; (8005fac <HAL_RCC_OscConfig+0x504>)
 8005e3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e42:	f7fe f917 	bl	8004074 <HAL_GetTick>
 8005e46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005e48:	e008      	b.n	8005e5c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e4a:	f7fe f913 	bl	8004074 <HAL_GetTick>
 8005e4e:	4602      	mov	r2, r0
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	1ad3      	subs	r3, r2, r3
 8005e54:	2b02      	cmp	r3, #2
 8005e56:	d901      	bls.n	8005e5c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005e58:	2303      	movs	r3, #3
 8005e5a:	e207      	b.n	800626c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005e5c:	4b53      	ldr	r3, [pc, #332]	; (8005fac <HAL_RCC_OscConfig+0x504>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d1f0      	bne.n	8005e4a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f003 0308 	and.w	r3, r3, #8
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d03c      	beq.n	8005eee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	695b      	ldr	r3, [r3, #20]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d01c      	beq.n	8005eb6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e7c:	4b4b      	ldr	r3, [pc, #300]	; (8005fac <HAL_RCC_OscConfig+0x504>)
 8005e7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e82:	4a4a      	ldr	r2, [pc, #296]	; (8005fac <HAL_RCC_OscConfig+0x504>)
 8005e84:	f043 0301 	orr.w	r3, r3, #1
 8005e88:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e8c:	f7fe f8f2 	bl	8004074 <HAL_GetTick>
 8005e90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005e92:	e008      	b.n	8005ea6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e94:	f7fe f8ee 	bl	8004074 <HAL_GetTick>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	1ad3      	subs	r3, r2, r3
 8005e9e:	2b02      	cmp	r3, #2
 8005ea0:	d901      	bls.n	8005ea6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005ea2:	2303      	movs	r3, #3
 8005ea4:	e1e2      	b.n	800626c <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005ea6:	4b41      	ldr	r3, [pc, #260]	; (8005fac <HAL_RCC_OscConfig+0x504>)
 8005ea8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005eac:	f003 0302 	and.w	r3, r3, #2
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d0ef      	beq.n	8005e94 <HAL_RCC_OscConfig+0x3ec>
 8005eb4:	e01b      	b.n	8005eee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005eb6:	4b3d      	ldr	r3, [pc, #244]	; (8005fac <HAL_RCC_OscConfig+0x504>)
 8005eb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ebc:	4a3b      	ldr	r2, [pc, #236]	; (8005fac <HAL_RCC_OscConfig+0x504>)
 8005ebe:	f023 0301 	bic.w	r3, r3, #1
 8005ec2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ec6:	f7fe f8d5 	bl	8004074 <HAL_GetTick>
 8005eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005ecc:	e008      	b.n	8005ee0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ece:	f7fe f8d1 	bl	8004074 <HAL_GetTick>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	1ad3      	subs	r3, r2, r3
 8005ed8:	2b02      	cmp	r3, #2
 8005eda:	d901      	bls.n	8005ee0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005edc:	2303      	movs	r3, #3
 8005ede:	e1c5      	b.n	800626c <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005ee0:	4b32      	ldr	r3, [pc, #200]	; (8005fac <HAL_RCC_OscConfig+0x504>)
 8005ee2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ee6:	f003 0302 	and.w	r3, r3, #2
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d1ef      	bne.n	8005ece <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f003 0304 	and.w	r3, r3, #4
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	f000 80a6 	beq.w	8006048 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005efc:	2300      	movs	r3, #0
 8005efe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005f00:	4b2a      	ldr	r3, [pc, #168]	; (8005fac <HAL_RCC_OscConfig+0x504>)
 8005f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d10d      	bne.n	8005f28 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f0c:	4b27      	ldr	r3, [pc, #156]	; (8005fac <HAL_RCC_OscConfig+0x504>)
 8005f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f10:	4a26      	ldr	r2, [pc, #152]	; (8005fac <HAL_RCC_OscConfig+0x504>)
 8005f12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f16:	6593      	str	r3, [r2, #88]	; 0x58
 8005f18:	4b24      	ldr	r3, [pc, #144]	; (8005fac <HAL_RCC_OscConfig+0x504>)
 8005f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f20:	60bb      	str	r3, [r7, #8]
 8005f22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f24:	2301      	movs	r3, #1
 8005f26:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f28:	4b21      	ldr	r3, [pc, #132]	; (8005fb0 <HAL_RCC_OscConfig+0x508>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d118      	bne.n	8005f66 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f34:	4b1e      	ldr	r3, [pc, #120]	; (8005fb0 <HAL_RCC_OscConfig+0x508>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a1d      	ldr	r2, [pc, #116]	; (8005fb0 <HAL_RCC_OscConfig+0x508>)
 8005f3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f3e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f40:	f7fe f898 	bl	8004074 <HAL_GetTick>
 8005f44:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f46:	e008      	b.n	8005f5a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f48:	f7fe f894 	bl	8004074 <HAL_GetTick>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	1ad3      	subs	r3, r2, r3
 8005f52:	2b02      	cmp	r3, #2
 8005f54:	d901      	bls.n	8005f5a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005f56:	2303      	movs	r3, #3
 8005f58:	e188      	b.n	800626c <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005f5a:	4b15      	ldr	r3, [pc, #84]	; (8005fb0 <HAL_RCC_OscConfig+0x508>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d0f0      	beq.n	8005f48 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d108      	bne.n	8005f80 <HAL_RCC_OscConfig+0x4d8>
 8005f6e:	4b0f      	ldr	r3, [pc, #60]	; (8005fac <HAL_RCC_OscConfig+0x504>)
 8005f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f74:	4a0d      	ldr	r2, [pc, #52]	; (8005fac <HAL_RCC_OscConfig+0x504>)
 8005f76:	f043 0301 	orr.w	r3, r3, #1
 8005f7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005f7e:	e029      	b.n	8005fd4 <HAL_RCC_OscConfig+0x52c>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	2b05      	cmp	r3, #5
 8005f86:	d115      	bne.n	8005fb4 <HAL_RCC_OscConfig+0x50c>
 8005f88:	4b08      	ldr	r3, [pc, #32]	; (8005fac <HAL_RCC_OscConfig+0x504>)
 8005f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f8e:	4a07      	ldr	r2, [pc, #28]	; (8005fac <HAL_RCC_OscConfig+0x504>)
 8005f90:	f043 0304 	orr.w	r3, r3, #4
 8005f94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005f98:	4b04      	ldr	r3, [pc, #16]	; (8005fac <HAL_RCC_OscConfig+0x504>)
 8005f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f9e:	4a03      	ldr	r2, [pc, #12]	; (8005fac <HAL_RCC_OscConfig+0x504>)
 8005fa0:	f043 0301 	orr.w	r3, r3, #1
 8005fa4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005fa8:	e014      	b.n	8005fd4 <HAL_RCC_OscConfig+0x52c>
 8005faa:	bf00      	nop
 8005fac:	40021000 	.word	0x40021000
 8005fb0:	40007000 	.word	0x40007000
 8005fb4:	4b91      	ldr	r3, [pc, #580]	; (80061fc <HAL_RCC_OscConfig+0x754>)
 8005fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fba:	4a90      	ldr	r2, [pc, #576]	; (80061fc <HAL_RCC_OscConfig+0x754>)
 8005fbc:	f023 0301 	bic.w	r3, r3, #1
 8005fc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005fc4:	4b8d      	ldr	r3, [pc, #564]	; (80061fc <HAL_RCC_OscConfig+0x754>)
 8005fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fca:	4a8c      	ldr	r2, [pc, #560]	; (80061fc <HAL_RCC_OscConfig+0x754>)
 8005fcc:	f023 0304 	bic.w	r3, r3, #4
 8005fd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d016      	beq.n	800600a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fdc:	f7fe f84a 	bl	8004074 <HAL_GetTick>
 8005fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005fe2:	e00a      	b.n	8005ffa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fe4:	f7fe f846 	bl	8004074 <HAL_GetTick>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	1ad3      	subs	r3, r2, r3
 8005fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d901      	bls.n	8005ffa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005ff6:	2303      	movs	r3, #3
 8005ff8:	e138      	b.n	800626c <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ffa:	4b80      	ldr	r3, [pc, #512]	; (80061fc <HAL_RCC_OscConfig+0x754>)
 8005ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006000:	f003 0302 	and.w	r3, r3, #2
 8006004:	2b00      	cmp	r3, #0
 8006006:	d0ed      	beq.n	8005fe4 <HAL_RCC_OscConfig+0x53c>
 8006008:	e015      	b.n	8006036 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800600a:	f7fe f833 	bl	8004074 <HAL_GetTick>
 800600e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006010:	e00a      	b.n	8006028 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006012:	f7fe f82f 	bl	8004074 <HAL_GetTick>
 8006016:	4602      	mov	r2, r0
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	1ad3      	subs	r3, r2, r3
 800601c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006020:	4293      	cmp	r3, r2
 8006022:	d901      	bls.n	8006028 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006024:	2303      	movs	r3, #3
 8006026:	e121      	b.n	800626c <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006028:	4b74      	ldr	r3, [pc, #464]	; (80061fc <HAL_RCC_OscConfig+0x754>)
 800602a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800602e:	f003 0302 	and.w	r3, r3, #2
 8006032:	2b00      	cmp	r3, #0
 8006034:	d1ed      	bne.n	8006012 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006036:	7ffb      	ldrb	r3, [r7, #31]
 8006038:	2b01      	cmp	r3, #1
 800603a:	d105      	bne.n	8006048 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800603c:	4b6f      	ldr	r3, [pc, #444]	; (80061fc <HAL_RCC_OscConfig+0x754>)
 800603e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006040:	4a6e      	ldr	r2, [pc, #440]	; (80061fc <HAL_RCC_OscConfig+0x754>)
 8006042:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006046:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800604c:	2b00      	cmp	r3, #0
 800604e:	f000 810c 	beq.w	800626a <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006056:	2b02      	cmp	r3, #2
 8006058:	f040 80d4 	bne.w	8006204 <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800605c:	4b67      	ldr	r3, [pc, #412]	; (80061fc <HAL_RCC_OscConfig+0x754>)
 800605e:	68db      	ldr	r3, [r3, #12]
 8006060:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	f003 0203 	and.w	r2, r3, #3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800606c:	429a      	cmp	r2, r3
 800606e:	d130      	bne.n	80060d2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800607a:	3b01      	subs	r3, #1
 800607c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800607e:	429a      	cmp	r2, r3
 8006080:	d127      	bne.n	80060d2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800608c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800608e:	429a      	cmp	r2, r3
 8006090:	d11f      	bne.n	80060d2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800609c:	2a07      	cmp	r2, #7
 800609e:	bf14      	ite	ne
 80060a0:	2201      	movne	r2, #1
 80060a2:	2200      	moveq	r2, #0
 80060a4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d113      	bne.n	80060d2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060b4:	085b      	lsrs	r3, r3, #1
 80060b6:	3b01      	subs	r3, #1
 80060b8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d109      	bne.n	80060d2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c8:	085b      	lsrs	r3, r3, #1
 80060ca:	3b01      	subs	r3, #1
 80060cc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d06e      	beq.n	80061b0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	2b0c      	cmp	r3, #12
 80060d6:	d069      	beq.n	80061ac <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80060d8:	4b48      	ldr	r3, [pc, #288]	; (80061fc <HAL_RCC_OscConfig+0x754>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d105      	bne.n	80060f0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80060e4:	4b45      	ldr	r3, [pc, #276]	; (80061fc <HAL_RCC_OscConfig+0x754>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d001      	beq.n	80060f4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	e0bb      	b.n	800626c <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80060f4:	4b41      	ldr	r3, [pc, #260]	; (80061fc <HAL_RCC_OscConfig+0x754>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a40      	ldr	r2, [pc, #256]	; (80061fc <HAL_RCC_OscConfig+0x754>)
 80060fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80060fe:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006100:	f7fd ffb8 	bl	8004074 <HAL_GetTick>
 8006104:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006106:	e008      	b.n	800611a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006108:	f7fd ffb4 	bl	8004074 <HAL_GetTick>
 800610c:	4602      	mov	r2, r0
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	1ad3      	subs	r3, r2, r3
 8006112:	2b02      	cmp	r3, #2
 8006114:	d901      	bls.n	800611a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8006116:	2303      	movs	r3, #3
 8006118:	e0a8      	b.n	800626c <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800611a:	4b38      	ldr	r3, [pc, #224]	; (80061fc <HAL_RCC_OscConfig+0x754>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006122:	2b00      	cmp	r3, #0
 8006124:	d1f0      	bne.n	8006108 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006126:	4b35      	ldr	r3, [pc, #212]	; (80061fc <HAL_RCC_OscConfig+0x754>)
 8006128:	68da      	ldr	r2, [r3, #12]
 800612a:	4b35      	ldr	r3, [pc, #212]	; (8006200 <HAL_RCC_OscConfig+0x758>)
 800612c:	4013      	ands	r3, r2
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006136:	3a01      	subs	r2, #1
 8006138:	0112      	lsls	r2, r2, #4
 800613a:	4311      	orrs	r1, r2
 800613c:	687a      	ldr	r2, [r7, #4]
 800613e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006140:	0212      	lsls	r2, r2, #8
 8006142:	4311      	orrs	r1, r2
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006148:	0852      	lsrs	r2, r2, #1
 800614a:	3a01      	subs	r2, #1
 800614c:	0552      	lsls	r2, r2, #21
 800614e:	4311      	orrs	r1, r2
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006154:	0852      	lsrs	r2, r2, #1
 8006156:	3a01      	subs	r2, #1
 8006158:	0652      	lsls	r2, r2, #25
 800615a:	4311      	orrs	r1, r2
 800615c:	687a      	ldr	r2, [r7, #4]
 800615e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006160:	0912      	lsrs	r2, r2, #4
 8006162:	0452      	lsls	r2, r2, #17
 8006164:	430a      	orrs	r2, r1
 8006166:	4925      	ldr	r1, [pc, #148]	; (80061fc <HAL_RCC_OscConfig+0x754>)
 8006168:	4313      	orrs	r3, r2
 800616a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800616c:	4b23      	ldr	r3, [pc, #140]	; (80061fc <HAL_RCC_OscConfig+0x754>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a22      	ldr	r2, [pc, #136]	; (80061fc <HAL_RCC_OscConfig+0x754>)
 8006172:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006176:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006178:	4b20      	ldr	r3, [pc, #128]	; (80061fc <HAL_RCC_OscConfig+0x754>)
 800617a:	68db      	ldr	r3, [r3, #12]
 800617c:	4a1f      	ldr	r2, [pc, #124]	; (80061fc <HAL_RCC_OscConfig+0x754>)
 800617e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006182:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006184:	f7fd ff76 	bl	8004074 <HAL_GetTick>
 8006188:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800618a:	e008      	b.n	800619e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800618c:	f7fd ff72 	bl	8004074 <HAL_GetTick>
 8006190:	4602      	mov	r2, r0
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	1ad3      	subs	r3, r2, r3
 8006196:	2b02      	cmp	r3, #2
 8006198:	d901      	bls.n	800619e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800619a:	2303      	movs	r3, #3
 800619c:	e066      	b.n	800626c <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800619e:	4b17      	ldr	r3, [pc, #92]	; (80061fc <HAL_RCC_OscConfig+0x754>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d0f0      	beq.n	800618c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80061aa:	e05e      	b.n	800626a <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	e05d      	b.n	800626c <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80061b0:	4b12      	ldr	r3, [pc, #72]	; (80061fc <HAL_RCC_OscConfig+0x754>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d156      	bne.n	800626a <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80061bc:	4b0f      	ldr	r3, [pc, #60]	; (80061fc <HAL_RCC_OscConfig+0x754>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a0e      	ldr	r2, [pc, #56]	; (80061fc <HAL_RCC_OscConfig+0x754>)
 80061c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80061c6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80061c8:	4b0c      	ldr	r3, [pc, #48]	; (80061fc <HAL_RCC_OscConfig+0x754>)
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	4a0b      	ldr	r2, [pc, #44]	; (80061fc <HAL_RCC_OscConfig+0x754>)
 80061ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80061d2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80061d4:	f7fd ff4e 	bl	8004074 <HAL_GetTick>
 80061d8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80061da:	e008      	b.n	80061ee <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061dc:	f7fd ff4a 	bl	8004074 <HAL_GetTick>
 80061e0:	4602      	mov	r2, r0
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	1ad3      	subs	r3, r2, r3
 80061e6:	2b02      	cmp	r3, #2
 80061e8:	d901      	bls.n	80061ee <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80061ea:	2303      	movs	r3, #3
 80061ec:	e03e      	b.n	800626c <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80061ee:	4b03      	ldr	r3, [pc, #12]	; (80061fc <HAL_RCC_OscConfig+0x754>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d0f0      	beq.n	80061dc <HAL_RCC_OscConfig+0x734>
 80061fa:	e036      	b.n	800626a <HAL_RCC_OscConfig+0x7c2>
 80061fc:	40021000 	.word	0x40021000
 8006200:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006204:	69bb      	ldr	r3, [r7, #24]
 8006206:	2b0c      	cmp	r3, #12
 8006208:	d02d      	beq.n	8006266 <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800620a:	4b1a      	ldr	r3, [pc, #104]	; (8006274 <HAL_RCC_OscConfig+0x7cc>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a19      	ldr	r2, [pc, #100]	; (8006274 <HAL_RCC_OscConfig+0x7cc>)
 8006210:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006214:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8006216:	4b17      	ldr	r3, [pc, #92]	; (8006274 <HAL_RCC_OscConfig+0x7cc>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800621e:	2b00      	cmp	r3, #0
 8006220:	d105      	bne.n	800622e <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006222:	4b14      	ldr	r3, [pc, #80]	; (8006274 <HAL_RCC_OscConfig+0x7cc>)
 8006224:	68db      	ldr	r3, [r3, #12]
 8006226:	4a13      	ldr	r2, [pc, #76]	; (8006274 <HAL_RCC_OscConfig+0x7cc>)
 8006228:	f023 0303 	bic.w	r3, r3, #3
 800622c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800622e:	4b11      	ldr	r3, [pc, #68]	; (8006274 <HAL_RCC_OscConfig+0x7cc>)
 8006230:	68db      	ldr	r3, [r3, #12]
 8006232:	4a10      	ldr	r2, [pc, #64]	; (8006274 <HAL_RCC_OscConfig+0x7cc>)
 8006234:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006238:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800623c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800623e:	f7fd ff19 	bl	8004074 <HAL_GetTick>
 8006242:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006244:	e008      	b.n	8006258 <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006246:	f7fd ff15 	bl	8004074 <HAL_GetTick>
 800624a:	4602      	mov	r2, r0
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	1ad3      	subs	r3, r2, r3
 8006250:	2b02      	cmp	r3, #2
 8006252:	d901      	bls.n	8006258 <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 8006254:	2303      	movs	r3, #3
 8006256:	e009      	b.n	800626c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006258:	4b06      	ldr	r3, [pc, #24]	; (8006274 <HAL_RCC_OscConfig+0x7cc>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006260:	2b00      	cmp	r3, #0
 8006262:	d1f0      	bne.n	8006246 <HAL_RCC_OscConfig+0x79e>
 8006264:	e001      	b.n	800626a <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	e000      	b.n	800626c <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 800626a:	2300      	movs	r3, #0
}
 800626c:	4618      	mov	r0, r3
 800626e:	3720      	adds	r7, #32
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}
 8006274:	40021000 	.word	0x40021000

08006278 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b084      	sub	sp, #16
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d101      	bne.n	800628c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	e0c8      	b.n	800641e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800628c:	4b66      	ldr	r3, [pc, #408]	; (8006428 <HAL_RCC_ClockConfig+0x1b0>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f003 0307 	and.w	r3, r3, #7
 8006294:	683a      	ldr	r2, [r7, #0]
 8006296:	429a      	cmp	r2, r3
 8006298:	d910      	bls.n	80062bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800629a:	4b63      	ldr	r3, [pc, #396]	; (8006428 <HAL_RCC_ClockConfig+0x1b0>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f023 0207 	bic.w	r2, r3, #7
 80062a2:	4961      	ldr	r1, [pc, #388]	; (8006428 <HAL_RCC_ClockConfig+0x1b0>)
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	4313      	orrs	r3, r2
 80062a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062aa:	4b5f      	ldr	r3, [pc, #380]	; (8006428 <HAL_RCC_ClockConfig+0x1b0>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f003 0307 	and.w	r3, r3, #7
 80062b2:	683a      	ldr	r2, [r7, #0]
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d001      	beq.n	80062bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	e0b0      	b.n	800641e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 0301 	and.w	r3, r3, #1
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d04c      	beq.n	8006362 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	2b03      	cmp	r3, #3
 80062ce:	d107      	bne.n	80062e0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80062d0:	4b56      	ldr	r3, [pc, #344]	; (800642c <HAL_RCC_ClockConfig+0x1b4>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d121      	bne.n	8006320 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80062dc:	2301      	movs	r3, #1
 80062de:	e09e      	b.n	800641e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	2b02      	cmp	r3, #2
 80062e6:	d107      	bne.n	80062f8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80062e8:	4b50      	ldr	r3, [pc, #320]	; (800642c <HAL_RCC_ClockConfig+0x1b4>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d115      	bne.n	8006320 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	e092      	b.n	800641e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d107      	bne.n	8006310 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006300:	4b4a      	ldr	r3, [pc, #296]	; (800642c <HAL_RCC_ClockConfig+0x1b4>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f003 0302 	and.w	r3, r3, #2
 8006308:	2b00      	cmp	r3, #0
 800630a:	d109      	bne.n	8006320 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	e086      	b.n	800641e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006310:	4b46      	ldr	r3, [pc, #280]	; (800642c <HAL_RCC_ClockConfig+0x1b4>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006318:	2b00      	cmp	r3, #0
 800631a:	d101      	bne.n	8006320 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	e07e      	b.n	800641e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006320:	4b42      	ldr	r3, [pc, #264]	; (800642c <HAL_RCC_ClockConfig+0x1b4>)
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	f023 0203 	bic.w	r2, r3, #3
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	493f      	ldr	r1, [pc, #252]	; (800642c <HAL_RCC_ClockConfig+0x1b4>)
 800632e:	4313      	orrs	r3, r2
 8006330:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006332:	f7fd fe9f 	bl	8004074 <HAL_GetTick>
 8006336:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006338:	e00a      	b.n	8006350 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800633a:	f7fd fe9b 	bl	8004074 <HAL_GetTick>
 800633e:	4602      	mov	r2, r0
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	1ad3      	subs	r3, r2, r3
 8006344:	f241 3288 	movw	r2, #5000	; 0x1388
 8006348:	4293      	cmp	r3, r2
 800634a:	d901      	bls.n	8006350 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800634c:	2303      	movs	r3, #3
 800634e:	e066      	b.n	800641e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006350:	4b36      	ldr	r3, [pc, #216]	; (800642c <HAL_RCC_ClockConfig+0x1b4>)
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	f003 020c 	and.w	r2, r3, #12
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	009b      	lsls	r3, r3, #2
 800635e:	429a      	cmp	r2, r3
 8006360:	d1eb      	bne.n	800633a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f003 0302 	and.w	r3, r3, #2
 800636a:	2b00      	cmp	r3, #0
 800636c:	d008      	beq.n	8006380 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800636e:	4b2f      	ldr	r3, [pc, #188]	; (800642c <HAL_RCC_ClockConfig+0x1b4>)
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	492c      	ldr	r1, [pc, #176]	; (800642c <HAL_RCC_ClockConfig+0x1b4>)
 800637c:	4313      	orrs	r3, r2
 800637e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006380:	4b29      	ldr	r3, [pc, #164]	; (8006428 <HAL_RCC_ClockConfig+0x1b0>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f003 0307 	and.w	r3, r3, #7
 8006388:	683a      	ldr	r2, [r7, #0]
 800638a:	429a      	cmp	r2, r3
 800638c:	d210      	bcs.n	80063b0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800638e:	4b26      	ldr	r3, [pc, #152]	; (8006428 <HAL_RCC_ClockConfig+0x1b0>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f023 0207 	bic.w	r2, r3, #7
 8006396:	4924      	ldr	r1, [pc, #144]	; (8006428 <HAL_RCC_ClockConfig+0x1b0>)
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	4313      	orrs	r3, r2
 800639c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800639e:	4b22      	ldr	r3, [pc, #136]	; (8006428 <HAL_RCC_ClockConfig+0x1b0>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f003 0307 	and.w	r3, r3, #7
 80063a6:	683a      	ldr	r2, [r7, #0]
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d001      	beq.n	80063b0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80063ac:	2301      	movs	r3, #1
 80063ae:	e036      	b.n	800641e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 0304 	and.w	r3, r3, #4
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d008      	beq.n	80063ce <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80063bc:	4b1b      	ldr	r3, [pc, #108]	; (800642c <HAL_RCC_ClockConfig+0x1b4>)
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	4918      	ldr	r1, [pc, #96]	; (800642c <HAL_RCC_ClockConfig+0x1b4>)
 80063ca:	4313      	orrs	r3, r2
 80063cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f003 0308 	and.w	r3, r3, #8
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d009      	beq.n	80063ee <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80063da:	4b14      	ldr	r3, [pc, #80]	; (800642c <HAL_RCC_ClockConfig+0x1b4>)
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	691b      	ldr	r3, [r3, #16]
 80063e6:	00db      	lsls	r3, r3, #3
 80063e8:	4910      	ldr	r1, [pc, #64]	; (800642c <HAL_RCC_ClockConfig+0x1b4>)
 80063ea:	4313      	orrs	r3, r2
 80063ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80063ee:	f000 f825 	bl	800643c <HAL_RCC_GetSysClockFreq>
 80063f2:	4602      	mov	r2, r0
 80063f4:	4b0d      	ldr	r3, [pc, #52]	; (800642c <HAL_RCC_ClockConfig+0x1b4>)
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	091b      	lsrs	r3, r3, #4
 80063fa:	f003 030f 	and.w	r3, r3, #15
 80063fe:	490c      	ldr	r1, [pc, #48]	; (8006430 <HAL_RCC_ClockConfig+0x1b8>)
 8006400:	5ccb      	ldrb	r3, [r1, r3]
 8006402:	f003 031f 	and.w	r3, r3, #31
 8006406:	fa22 f303 	lsr.w	r3, r2, r3
 800640a:	4a0a      	ldr	r2, [pc, #40]	; (8006434 <HAL_RCC_ClockConfig+0x1bc>)
 800640c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800640e:	4b0a      	ldr	r3, [pc, #40]	; (8006438 <HAL_RCC_ClockConfig+0x1c0>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4618      	mov	r0, r3
 8006414:	f7fd fdde 	bl	8003fd4 <HAL_InitTick>
 8006418:	4603      	mov	r3, r0
 800641a:	72fb      	strb	r3, [r7, #11]

  return status;
 800641c:	7afb      	ldrb	r3, [r7, #11]
}
 800641e:	4618      	mov	r0, r3
 8006420:	3710      	adds	r7, #16
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop
 8006428:	40022000 	.word	0x40022000
 800642c:	40021000 	.word	0x40021000
 8006430:	0800d350 	.word	0x0800d350
 8006434:	200000bc 	.word	0x200000bc
 8006438:	200000c0 	.word	0x200000c0

0800643c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800643c:	b480      	push	{r7}
 800643e:	b089      	sub	sp, #36	; 0x24
 8006440:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006442:	2300      	movs	r3, #0
 8006444:	61fb      	str	r3, [r7, #28]
 8006446:	2300      	movs	r3, #0
 8006448:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800644a:	4b3e      	ldr	r3, [pc, #248]	; (8006544 <HAL_RCC_GetSysClockFreq+0x108>)
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	f003 030c 	and.w	r3, r3, #12
 8006452:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006454:	4b3b      	ldr	r3, [pc, #236]	; (8006544 <HAL_RCC_GetSysClockFreq+0x108>)
 8006456:	68db      	ldr	r3, [r3, #12]
 8006458:	f003 0303 	and.w	r3, r3, #3
 800645c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d005      	beq.n	8006470 <HAL_RCC_GetSysClockFreq+0x34>
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	2b0c      	cmp	r3, #12
 8006468:	d121      	bne.n	80064ae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2b01      	cmp	r3, #1
 800646e:	d11e      	bne.n	80064ae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006470:	4b34      	ldr	r3, [pc, #208]	; (8006544 <HAL_RCC_GetSysClockFreq+0x108>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f003 0308 	and.w	r3, r3, #8
 8006478:	2b00      	cmp	r3, #0
 800647a:	d107      	bne.n	800648c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800647c:	4b31      	ldr	r3, [pc, #196]	; (8006544 <HAL_RCC_GetSysClockFreq+0x108>)
 800647e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006482:	0a1b      	lsrs	r3, r3, #8
 8006484:	f003 030f 	and.w	r3, r3, #15
 8006488:	61fb      	str	r3, [r7, #28]
 800648a:	e005      	b.n	8006498 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800648c:	4b2d      	ldr	r3, [pc, #180]	; (8006544 <HAL_RCC_GetSysClockFreq+0x108>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	091b      	lsrs	r3, r3, #4
 8006492:	f003 030f 	and.w	r3, r3, #15
 8006496:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006498:	4a2b      	ldr	r2, [pc, #172]	; (8006548 <HAL_RCC_GetSysClockFreq+0x10c>)
 800649a:	69fb      	ldr	r3, [r7, #28]
 800649c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064a0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d10d      	bne.n	80064c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80064a8:	69fb      	ldr	r3, [r7, #28]
 80064aa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80064ac:	e00a      	b.n	80064c4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	2b04      	cmp	r3, #4
 80064b2:	d102      	bne.n	80064ba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80064b4:	4b25      	ldr	r3, [pc, #148]	; (800654c <HAL_RCC_GetSysClockFreq+0x110>)
 80064b6:	61bb      	str	r3, [r7, #24]
 80064b8:	e004      	b.n	80064c4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	2b08      	cmp	r3, #8
 80064be:	d101      	bne.n	80064c4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80064c0:	4b23      	ldr	r3, [pc, #140]	; (8006550 <HAL_RCC_GetSysClockFreq+0x114>)
 80064c2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	2b0c      	cmp	r3, #12
 80064c8:	d134      	bne.n	8006534 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80064ca:	4b1e      	ldr	r3, [pc, #120]	; (8006544 <HAL_RCC_GetSysClockFreq+0x108>)
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	f003 0303 	and.w	r3, r3, #3
 80064d2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	2b02      	cmp	r3, #2
 80064d8:	d003      	beq.n	80064e2 <HAL_RCC_GetSysClockFreq+0xa6>
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	2b03      	cmp	r3, #3
 80064de:	d003      	beq.n	80064e8 <HAL_RCC_GetSysClockFreq+0xac>
 80064e0:	e005      	b.n	80064ee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80064e2:	4b1a      	ldr	r3, [pc, #104]	; (800654c <HAL_RCC_GetSysClockFreq+0x110>)
 80064e4:	617b      	str	r3, [r7, #20]
      break;
 80064e6:	e005      	b.n	80064f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80064e8:	4b19      	ldr	r3, [pc, #100]	; (8006550 <HAL_RCC_GetSysClockFreq+0x114>)
 80064ea:	617b      	str	r3, [r7, #20]
      break;
 80064ec:	e002      	b.n	80064f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80064ee:	69fb      	ldr	r3, [r7, #28]
 80064f0:	617b      	str	r3, [r7, #20]
      break;
 80064f2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80064f4:	4b13      	ldr	r3, [pc, #76]	; (8006544 <HAL_RCC_GetSysClockFreq+0x108>)
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	091b      	lsrs	r3, r3, #4
 80064fa:	f003 0307 	and.w	r3, r3, #7
 80064fe:	3301      	adds	r3, #1
 8006500:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006502:	4b10      	ldr	r3, [pc, #64]	; (8006544 <HAL_RCC_GetSysClockFreq+0x108>)
 8006504:	68db      	ldr	r3, [r3, #12]
 8006506:	0a1b      	lsrs	r3, r3, #8
 8006508:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800650c:	697a      	ldr	r2, [r7, #20]
 800650e:	fb03 f202 	mul.w	r2, r3, r2
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	fbb2 f3f3 	udiv	r3, r2, r3
 8006518:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800651a:	4b0a      	ldr	r3, [pc, #40]	; (8006544 <HAL_RCC_GetSysClockFreq+0x108>)
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	0e5b      	lsrs	r3, r3, #25
 8006520:	f003 0303 	and.w	r3, r3, #3
 8006524:	3301      	adds	r3, #1
 8006526:	005b      	lsls	r3, r3, #1
 8006528:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800652a:	697a      	ldr	r2, [r7, #20]
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006532:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006534:	69bb      	ldr	r3, [r7, #24]
}
 8006536:	4618      	mov	r0, r3
 8006538:	3724      	adds	r7, #36	; 0x24
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr
 8006542:	bf00      	nop
 8006544:	40021000 	.word	0x40021000
 8006548:	0800d368 	.word	0x0800d368
 800654c:	00f42400 	.word	0x00f42400
 8006550:	007a1200 	.word	0x007a1200

08006554 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006554:	b480      	push	{r7}
 8006556:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006558:	4b03      	ldr	r3, [pc, #12]	; (8006568 <HAL_RCC_GetHCLKFreq+0x14>)
 800655a:	681b      	ldr	r3, [r3, #0]
}
 800655c:	4618      	mov	r0, r3
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr
 8006566:	bf00      	nop
 8006568:	200000bc 	.word	0x200000bc

0800656c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006570:	f7ff fff0 	bl	8006554 <HAL_RCC_GetHCLKFreq>
 8006574:	4602      	mov	r2, r0
 8006576:	4b06      	ldr	r3, [pc, #24]	; (8006590 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	0a1b      	lsrs	r3, r3, #8
 800657c:	f003 0307 	and.w	r3, r3, #7
 8006580:	4904      	ldr	r1, [pc, #16]	; (8006594 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006582:	5ccb      	ldrb	r3, [r1, r3]
 8006584:	f003 031f 	and.w	r3, r3, #31
 8006588:	fa22 f303 	lsr.w	r3, r2, r3
}
 800658c:	4618      	mov	r0, r3
 800658e:	bd80      	pop	{r7, pc}
 8006590:	40021000 	.word	0x40021000
 8006594:	0800d360 	.word	0x0800d360

08006598 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800659c:	f7ff ffda 	bl	8006554 <HAL_RCC_GetHCLKFreq>
 80065a0:	4602      	mov	r2, r0
 80065a2:	4b06      	ldr	r3, [pc, #24]	; (80065bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	0adb      	lsrs	r3, r3, #11
 80065a8:	f003 0307 	and.w	r3, r3, #7
 80065ac:	4904      	ldr	r1, [pc, #16]	; (80065c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80065ae:	5ccb      	ldrb	r3, [r1, r3]
 80065b0:	f003 031f 	and.w	r3, r3, #31
 80065b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	bd80      	pop	{r7, pc}
 80065bc:	40021000 	.word	0x40021000
 80065c0:	0800d360 	.word	0x0800d360

080065c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b086      	sub	sp, #24
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80065cc:	2300      	movs	r3, #0
 80065ce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80065d0:	4b2a      	ldr	r3, [pc, #168]	; (800667c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80065d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d003      	beq.n	80065e4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80065dc:	f7ff fa00 	bl	80059e0 <HAL_PWREx_GetVoltageRange>
 80065e0:	6178      	str	r0, [r7, #20]
 80065e2:	e014      	b.n	800660e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80065e4:	4b25      	ldr	r3, [pc, #148]	; (800667c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80065e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065e8:	4a24      	ldr	r2, [pc, #144]	; (800667c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80065ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065ee:	6593      	str	r3, [r2, #88]	; 0x58
 80065f0:	4b22      	ldr	r3, [pc, #136]	; (800667c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80065f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065f8:	60fb      	str	r3, [r7, #12]
 80065fa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80065fc:	f7ff f9f0 	bl	80059e0 <HAL_PWREx_GetVoltageRange>
 8006600:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006602:	4b1e      	ldr	r3, [pc, #120]	; (800667c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006606:	4a1d      	ldr	r2, [pc, #116]	; (800667c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006608:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800660c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006614:	d10b      	bne.n	800662e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2b80      	cmp	r3, #128	; 0x80
 800661a:	d919      	bls.n	8006650 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2ba0      	cmp	r3, #160	; 0xa0
 8006620:	d902      	bls.n	8006628 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006622:	2302      	movs	r3, #2
 8006624:	613b      	str	r3, [r7, #16]
 8006626:	e013      	b.n	8006650 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006628:	2301      	movs	r3, #1
 800662a:	613b      	str	r3, [r7, #16]
 800662c:	e010      	b.n	8006650 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2b80      	cmp	r3, #128	; 0x80
 8006632:	d902      	bls.n	800663a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006634:	2303      	movs	r3, #3
 8006636:	613b      	str	r3, [r7, #16]
 8006638:	e00a      	b.n	8006650 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2b80      	cmp	r3, #128	; 0x80
 800663e:	d102      	bne.n	8006646 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006640:	2302      	movs	r3, #2
 8006642:	613b      	str	r3, [r7, #16]
 8006644:	e004      	b.n	8006650 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2b70      	cmp	r3, #112	; 0x70
 800664a:	d101      	bne.n	8006650 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800664c:	2301      	movs	r3, #1
 800664e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006650:	4b0b      	ldr	r3, [pc, #44]	; (8006680 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f023 0207 	bic.w	r2, r3, #7
 8006658:	4909      	ldr	r1, [pc, #36]	; (8006680 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	4313      	orrs	r3, r2
 800665e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006660:	4b07      	ldr	r3, [pc, #28]	; (8006680 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f003 0307 	and.w	r3, r3, #7
 8006668:	693a      	ldr	r2, [r7, #16]
 800666a:	429a      	cmp	r2, r3
 800666c:	d001      	beq.n	8006672 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	e000      	b.n	8006674 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006672:	2300      	movs	r3, #0
}
 8006674:	4618      	mov	r0, r3
 8006676:	3718      	adds	r7, #24
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}
 800667c:	40021000 	.word	0x40021000
 8006680:	40022000 	.word	0x40022000

08006684 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b086      	sub	sp, #24
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800668c:	2300      	movs	r3, #0
 800668e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006690:	2300      	movs	r3, #0
 8006692:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800669c:	2b00      	cmp	r3, #0
 800669e:	d041      	beq.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066a4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80066a8:	d02a      	beq.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80066aa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80066ae:	d824      	bhi.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x76>
 80066b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80066b4:	d008      	beq.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80066b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80066ba:	d81e      	bhi.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x76>
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d00a      	beq.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80066c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066c4:	d010      	beq.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80066c6:	e018      	b.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80066c8:	4b86      	ldr	r3, [pc, #536]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80066ca:	68db      	ldr	r3, [r3, #12]
 80066cc:	4a85      	ldr	r2, [pc, #532]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80066ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066d2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80066d4:	e015      	b.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	3304      	adds	r3, #4
 80066da:	2100      	movs	r1, #0
 80066dc:	4618      	mov	r0, r3
 80066de:	f000 facb 	bl	8006c78 <RCCEx_PLLSAI1_Config>
 80066e2:	4603      	mov	r3, r0
 80066e4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80066e6:	e00c      	b.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	3320      	adds	r3, #32
 80066ec:	2100      	movs	r1, #0
 80066ee:	4618      	mov	r0, r3
 80066f0:	f000 fbb6 	bl	8006e60 <RCCEx_PLLSAI2_Config>
 80066f4:	4603      	mov	r3, r0
 80066f6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80066f8:	e003      	b.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80066fa:	2301      	movs	r3, #1
 80066fc:	74fb      	strb	r3, [r7, #19]
      break;
 80066fe:	e000      	b.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006700:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006702:	7cfb      	ldrb	r3, [r7, #19]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d10b      	bne.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006708:	4b76      	ldr	r3, [pc, #472]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800670a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800670e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006716:	4973      	ldr	r1, [pc, #460]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006718:	4313      	orrs	r3, r2
 800671a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800671e:	e001      	b.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006720:	7cfb      	ldrb	r3, [r7, #19]
 8006722:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800672c:	2b00      	cmp	r3, #0
 800672e:	d041      	beq.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006734:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006738:	d02a      	beq.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800673a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800673e:	d824      	bhi.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006740:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006744:	d008      	beq.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006746:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800674a:	d81e      	bhi.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800674c:	2b00      	cmp	r3, #0
 800674e:	d00a      	beq.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8006750:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006754:	d010      	beq.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006756:	e018      	b.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006758:	4b62      	ldr	r3, [pc, #392]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	4a61      	ldr	r2, [pc, #388]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800675e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006762:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006764:	e015      	b.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	3304      	adds	r3, #4
 800676a:	2100      	movs	r1, #0
 800676c:	4618      	mov	r0, r3
 800676e:	f000 fa83 	bl	8006c78 <RCCEx_PLLSAI1_Config>
 8006772:	4603      	mov	r3, r0
 8006774:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006776:	e00c      	b.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	3320      	adds	r3, #32
 800677c:	2100      	movs	r1, #0
 800677e:	4618      	mov	r0, r3
 8006780:	f000 fb6e 	bl	8006e60 <RCCEx_PLLSAI2_Config>
 8006784:	4603      	mov	r3, r0
 8006786:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006788:	e003      	b.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800678a:	2301      	movs	r3, #1
 800678c:	74fb      	strb	r3, [r7, #19]
      break;
 800678e:	e000      	b.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8006790:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006792:	7cfb      	ldrb	r3, [r7, #19]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d10b      	bne.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006798:	4b52      	ldr	r3, [pc, #328]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800679a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800679e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067a6:	494f      	ldr	r1, [pc, #316]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80067a8:	4313      	orrs	r3, r2
 80067aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80067ae:	e001      	b.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067b0:	7cfb      	ldrb	r3, [r7, #19]
 80067b2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067bc:	2b00      	cmp	r3, #0
 80067be:	f000 80a0 	beq.w	8006902 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80067c2:	2300      	movs	r3, #0
 80067c4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80067c6:	4b47      	ldr	r3, [pc, #284]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80067c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d101      	bne.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80067d2:	2301      	movs	r3, #1
 80067d4:	e000      	b.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80067d6:	2300      	movs	r3, #0
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d00d      	beq.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80067dc:	4b41      	ldr	r3, [pc, #260]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80067de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067e0:	4a40      	ldr	r2, [pc, #256]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80067e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067e6:	6593      	str	r3, [r2, #88]	; 0x58
 80067e8:	4b3e      	ldr	r3, [pc, #248]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80067ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067f0:	60bb      	str	r3, [r7, #8]
 80067f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80067f4:	2301      	movs	r3, #1
 80067f6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80067f8:	4b3b      	ldr	r3, [pc, #236]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a3a      	ldr	r2, [pc, #232]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80067fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006802:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006804:	f7fd fc36 	bl	8004074 <HAL_GetTick>
 8006808:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800680a:	e009      	b.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800680c:	f7fd fc32 	bl	8004074 <HAL_GetTick>
 8006810:	4602      	mov	r2, r0
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	1ad3      	subs	r3, r2, r3
 8006816:	2b02      	cmp	r3, #2
 8006818:	d902      	bls.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800681a:	2303      	movs	r3, #3
 800681c:	74fb      	strb	r3, [r7, #19]
        break;
 800681e:	e005      	b.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006820:	4b31      	ldr	r3, [pc, #196]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006828:	2b00      	cmp	r3, #0
 800682a:	d0ef      	beq.n	800680c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800682c:	7cfb      	ldrb	r3, [r7, #19]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d15c      	bne.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006832:	4b2c      	ldr	r3, [pc, #176]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006834:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006838:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800683c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d01f      	beq.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800684a:	697a      	ldr	r2, [r7, #20]
 800684c:	429a      	cmp	r2, r3
 800684e:	d019      	beq.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006850:	4b24      	ldr	r3, [pc, #144]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006856:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800685a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800685c:	4b21      	ldr	r3, [pc, #132]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800685e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006862:	4a20      	ldr	r2, [pc, #128]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006864:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006868:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800686c:	4b1d      	ldr	r3, [pc, #116]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800686e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006872:	4a1c      	ldr	r2, [pc, #112]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006874:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006878:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800687c:	4a19      	ldr	r2, [pc, #100]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	f003 0301 	and.w	r3, r3, #1
 800688a:	2b00      	cmp	r3, #0
 800688c:	d016      	beq.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800688e:	f7fd fbf1 	bl	8004074 <HAL_GetTick>
 8006892:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006894:	e00b      	b.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006896:	f7fd fbed 	bl	8004074 <HAL_GetTick>
 800689a:	4602      	mov	r2, r0
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	1ad3      	subs	r3, r2, r3
 80068a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d902      	bls.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80068a8:	2303      	movs	r3, #3
 80068aa:	74fb      	strb	r3, [r7, #19]
            break;
 80068ac:	e006      	b.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80068ae:	4b0d      	ldr	r3, [pc, #52]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80068b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068b4:	f003 0302 	and.w	r3, r3, #2
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d0ec      	beq.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80068bc:	7cfb      	ldrb	r3, [r7, #19]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d10c      	bne.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80068c2:	4b08      	ldr	r3, [pc, #32]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80068c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068d2:	4904      	ldr	r1, [pc, #16]	; (80068e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80068d4:	4313      	orrs	r3, r2
 80068d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80068da:	e009      	b.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80068dc:	7cfb      	ldrb	r3, [r7, #19]
 80068de:	74bb      	strb	r3, [r7, #18]
 80068e0:	e006      	b.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80068e2:	bf00      	nop
 80068e4:	40021000 	.word	0x40021000
 80068e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068ec:	7cfb      	ldrb	r3, [r7, #19]
 80068ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80068f0:	7c7b      	ldrb	r3, [r7, #17]
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	d105      	bne.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80068f6:	4b9e      	ldr	r3, [pc, #632]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80068f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068fa:	4a9d      	ldr	r2, [pc, #628]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80068fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006900:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f003 0301 	and.w	r3, r3, #1
 800690a:	2b00      	cmp	r3, #0
 800690c:	d00a      	beq.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800690e:	4b98      	ldr	r3, [pc, #608]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006914:	f023 0203 	bic.w	r2, r3, #3
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800691c:	4994      	ldr	r1, [pc, #592]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800691e:	4313      	orrs	r3, r2
 8006920:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f003 0302 	and.w	r3, r3, #2
 800692c:	2b00      	cmp	r3, #0
 800692e:	d00a      	beq.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006930:	4b8f      	ldr	r3, [pc, #572]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006936:	f023 020c 	bic.w	r2, r3, #12
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800693e:	498c      	ldr	r1, [pc, #560]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006940:	4313      	orrs	r3, r2
 8006942:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f003 0304 	and.w	r3, r3, #4
 800694e:	2b00      	cmp	r3, #0
 8006950:	d00a      	beq.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006952:	4b87      	ldr	r3, [pc, #540]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006958:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006960:	4983      	ldr	r1, [pc, #524]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006962:	4313      	orrs	r3, r2
 8006964:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f003 0308 	and.w	r3, r3, #8
 8006970:	2b00      	cmp	r3, #0
 8006972:	d00a      	beq.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006974:	4b7e      	ldr	r3, [pc, #504]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800697a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006982:	497b      	ldr	r1, [pc, #492]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006984:	4313      	orrs	r3, r2
 8006986:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f003 0310 	and.w	r3, r3, #16
 8006992:	2b00      	cmp	r3, #0
 8006994:	d00a      	beq.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006996:	4b76      	ldr	r3, [pc, #472]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006998:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800699c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069a4:	4972      	ldr	r1, [pc, #456]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069a6:	4313      	orrs	r3, r2
 80069a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f003 0320 	and.w	r3, r3, #32
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d00a      	beq.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80069b8:	4b6d      	ldr	r3, [pc, #436]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069c6:	496a      	ldr	r1, [pc, #424]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069c8:	4313      	orrs	r3, r2
 80069ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d00a      	beq.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80069da:	4b65      	ldr	r3, [pc, #404]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069e8:	4961      	ldr	r1, [pc, #388]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069ea:	4313      	orrs	r3, r2
 80069ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d00a      	beq.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80069fc:	4b5c      	ldr	r3, [pc, #368]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80069fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a02:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a0a:	4959      	ldr	r1, [pc, #356]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d00a      	beq.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006a1e:	4b54      	ldr	r3, [pc, #336]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a24:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a2c:	4950      	ldr	r1, [pc, #320]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d00a      	beq.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006a40:	4b4b      	ldr	r3, [pc, #300]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a46:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a4e:	4948      	ldr	r1, [pc, #288]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a50:	4313      	orrs	r3, r2
 8006a52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d00a      	beq.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006a62:	4b43      	ldr	r3, [pc, #268]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a68:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a70:	493f      	ldr	r1, [pc, #252]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a72:	4313      	orrs	r3, r2
 8006a74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d028      	beq.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006a84:	4b3a      	ldr	r3, [pc, #232]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a8a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a92:	4937      	ldr	r1, [pc, #220]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006a94:	4313      	orrs	r3, r2
 8006a96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006aa2:	d106      	bne.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006aa4:	4b32      	ldr	r3, [pc, #200]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006aa6:	68db      	ldr	r3, [r3, #12]
 8006aa8:	4a31      	ldr	r2, [pc, #196]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006aaa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006aae:	60d3      	str	r3, [r2, #12]
 8006ab0:	e011      	b.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ab6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006aba:	d10c      	bne.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	3304      	adds	r3, #4
 8006ac0:	2101      	movs	r1, #1
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f000 f8d8 	bl	8006c78 <RCCEx_PLLSAI1_Config>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006acc:	7cfb      	ldrb	r3, [r7, #19]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d001      	beq.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8006ad2:	7cfb      	ldrb	r3, [r7, #19]
 8006ad4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d028      	beq.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006ae2:	4b23      	ldr	r3, [pc, #140]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ae8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006af0:	491f      	ldr	r1, [pc, #124]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006af2:	4313      	orrs	r3, r2
 8006af4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006afc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b00:	d106      	bne.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b02:	4b1b      	ldr	r3, [pc, #108]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	4a1a      	ldr	r2, [pc, #104]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b0c:	60d3      	str	r3, [r2, #12]
 8006b0e:	e011      	b.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006b18:	d10c      	bne.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	3304      	adds	r3, #4
 8006b1e:	2101      	movs	r1, #1
 8006b20:	4618      	mov	r0, r3
 8006b22:	f000 f8a9 	bl	8006c78 <RCCEx_PLLSAI1_Config>
 8006b26:	4603      	mov	r3, r0
 8006b28:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006b2a:	7cfb      	ldrb	r3, [r7, #19]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d001      	beq.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8006b30:	7cfb      	ldrb	r3, [r7, #19]
 8006b32:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d02b      	beq.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006b40:	4b0b      	ldr	r3, [pc, #44]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b46:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b4e:	4908      	ldr	r1, [pc, #32]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b50:	4313      	orrs	r3, r2
 8006b52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b5e:	d109      	bne.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b60:	4b03      	ldr	r3, [pc, #12]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b62:	68db      	ldr	r3, [r3, #12]
 8006b64:	4a02      	ldr	r2, [pc, #8]	; (8006b70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006b66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b6a:	60d3      	str	r3, [r2, #12]
 8006b6c:	e014      	b.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8006b6e:	bf00      	nop
 8006b70:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006b7c:	d10c      	bne.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	3304      	adds	r3, #4
 8006b82:	2101      	movs	r1, #1
 8006b84:	4618      	mov	r0, r3
 8006b86:	f000 f877 	bl	8006c78 <RCCEx_PLLSAI1_Config>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006b8e:	7cfb      	ldrb	r3, [r7, #19]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d001      	beq.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8006b94:	7cfb      	ldrb	r3, [r7, #19]
 8006b96:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d02f      	beq.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006ba4:	4b2b      	ldr	r3, [pc, #172]	; (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006baa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006bb2:	4928      	ldr	r1, [pc, #160]	; (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006bbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006bc2:	d10d      	bne.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	3304      	adds	r3, #4
 8006bc8:	2102      	movs	r1, #2
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f000 f854 	bl	8006c78 <RCCEx_PLLSAI1_Config>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006bd4:	7cfb      	ldrb	r3, [r7, #19]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d014      	beq.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006bda:	7cfb      	ldrb	r3, [r7, #19]
 8006bdc:	74bb      	strb	r3, [r7, #18]
 8006bde:	e011      	b.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006be4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006be8:	d10c      	bne.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	3320      	adds	r3, #32
 8006bee:	2102      	movs	r1, #2
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f000 f935 	bl	8006e60 <RCCEx_PLLSAI2_Config>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006bfa:	7cfb      	ldrb	r3, [r7, #19]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d001      	beq.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006c00:	7cfb      	ldrb	r3, [r7, #19]
 8006c02:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d00a      	beq.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006c10:	4b10      	ldr	r3, [pc, #64]	; (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c16:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c1e:	490d      	ldr	r1, [pc, #52]	; (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006c20:	4313      	orrs	r3, r2
 8006c22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d00b      	beq.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006c32:	4b08      	ldr	r3, [pc, #32]	; (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c38:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c42:	4904      	ldr	r1, [pc, #16]	; (8006c54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006c44:	4313      	orrs	r3, r2
 8006c46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006c4a:	7cbb      	ldrb	r3, [r7, #18]
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	3718      	adds	r7, #24
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}
 8006c54:	40021000 	.word	0x40021000

08006c58 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006c5c:	4b05      	ldr	r3, [pc, #20]	; (8006c74 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a04      	ldr	r2, [pc, #16]	; (8006c74 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006c62:	f043 0304 	orr.w	r3, r3, #4
 8006c66:	6013      	str	r3, [r2, #0]
}
 8006c68:	bf00      	nop
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c70:	4770      	bx	lr
 8006c72:	bf00      	nop
 8006c74:	40021000 	.word	0x40021000

08006c78 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b084      	sub	sp, #16
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006c82:	2300      	movs	r3, #0
 8006c84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006c86:	4b75      	ldr	r3, [pc, #468]	; (8006e5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c88:	68db      	ldr	r3, [r3, #12]
 8006c8a:	f003 0303 	and.w	r3, r3, #3
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d018      	beq.n	8006cc4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006c92:	4b72      	ldr	r3, [pc, #456]	; (8006e5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006c94:	68db      	ldr	r3, [r3, #12]
 8006c96:	f003 0203 	and.w	r2, r3, #3
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	d10d      	bne.n	8006cbe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
       ||
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d009      	beq.n	8006cbe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006caa:	4b6c      	ldr	r3, [pc, #432]	; (8006e5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006cac:	68db      	ldr	r3, [r3, #12]
 8006cae:	091b      	lsrs	r3, r3, #4
 8006cb0:	f003 0307 	and.w	r3, r3, #7
 8006cb4:	1c5a      	adds	r2, r3, #1
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	685b      	ldr	r3, [r3, #4]
       ||
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d047      	beq.n	8006d4e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	73fb      	strb	r3, [r7, #15]
 8006cc2:	e044      	b.n	8006d4e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	2b03      	cmp	r3, #3
 8006cca:	d018      	beq.n	8006cfe <RCCEx_PLLSAI1_Config+0x86>
 8006ccc:	2b03      	cmp	r3, #3
 8006cce:	d825      	bhi.n	8006d1c <RCCEx_PLLSAI1_Config+0xa4>
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d002      	beq.n	8006cda <RCCEx_PLLSAI1_Config+0x62>
 8006cd4:	2b02      	cmp	r3, #2
 8006cd6:	d009      	beq.n	8006cec <RCCEx_PLLSAI1_Config+0x74>
 8006cd8:	e020      	b.n	8006d1c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006cda:	4b60      	ldr	r3, [pc, #384]	; (8006e5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f003 0302 	and.w	r3, r3, #2
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d11d      	bne.n	8006d22 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006cea:	e01a      	b.n	8006d22 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006cec:	4b5b      	ldr	r3, [pc, #364]	; (8006e5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d116      	bne.n	8006d26 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006cfc:	e013      	b.n	8006d26 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006cfe:	4b57      	ldr	r3, [pc, #348]	; (8006e5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d10f      	bne.n	8006d2a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006d0a:	4b54      	ldr	r3, [pc, #336]	; (8006e5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d109      	bne.n	8006d2a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006d1a:	e006      	b.n	8006d2a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	73fb      	strb	r3, [r7, #15]
      break;
 8006d20:	e004      	b.n	8006d2c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006d22:	bf00      	nop
 8006d24:	e002      	b.n	8006d2c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006d26:	bf00      	nop
 8006d28:	e000      	b.n	8006d2c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006d2a:	bf00      	nop
    }

    if(status == HAL_OK)
 8006d2c:	7bfb      	ldrb	r3, [r7, #15]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d10d      	bne.n	8006d4e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006d32:	4b4a      	ldr	r3, [pc, #296]	; (8006e5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d34:	68db      	ldr	r3, [r3, #12]
 8006d36:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6819      	ldr	r1, [r3, #0]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	3b01      	subs	r3, #1
 8006d44:	011b      	lsls	r3, r3, #4
 8006d46:	430b      	orrs	r3, r1
 8006d48:	4944      	ldr	r1, [pc, #272]	; (8006e5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006d4e:	7bfb      	ldrb	r3, [r7, #15]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d17d      	bne.n	8006e50 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006d54:	4b41      	ldr	r3, [pc, #260]	; (8006e5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a40      	ldr	r2, [pc, #256]	; (8006e5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d5a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006d5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d60:	f7fd f988 	bl	8004074 <HAL_GetTick>
 8006d64:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006d66:	e009      	b.n	8006d7c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006d68:	f7fd f984 	bl	8004074 <HAL_GetTick>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	1ad3      	subs	r3, r2, r3
 8006d72:	2b02      	cmp	r3, #2
 8006d74:	d902      	bls.n	8006d7c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006d76:	2303      	movs	r3, #3
 8006d78:	73fb      	strb	r3, [r7, #15]
        break;
 8006d7a:	e005      	b.n	8006d88 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006d7c:	4b37      	ldr	r3, [pc, #220]	; (8006e5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d1ef      	bne.n	8006d68 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006d88:	7bfb      	ldrb	r3, [r7, #15]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d160      	bne.n	8006e50 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d111      	bne.n	8006db8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006d94:	4b31      	ldr	r3, [pc, #196]	; (8006e5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d96:	691b      	ldr	r3, [r3, #16]
 8006d98:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006d9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006da0:	687a      	ldr	r2, [r7, #4]
 8006da2:	6892      	ldr	r2, [r2, #8]
 8006da4:	0211      	lsls	r1, r2, #8
 8006da6:	687a      	ldr	r2, [r7, #4]
 8006da8:	68d2      	ldr	r2, [r2, #12]
 8006daa:	0912      	lsrs	r2, r2, #4
 8006dac:	0452      	lsls	r2, r2, #17
 8006dae:	430a      	orrs	r2, r1
 8006db0:	492a      	ldr	r1, [pc, #168]	; (8006e5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006db2:	4313      	orrs	r3, r2
 8006db4:	610b      	str	r3, [r1, #16]
 8006db6:	e027      	b.n	8006e08 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	d112      	bne.n	8006de4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006dbe:	4b27      	ldr	r3, [pc, #156]	; (8006e5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006dc0:	691b      	ldr	r3, [r3, #16]
 8006dc2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006dc6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006dca:	687a      	ldr	r2, [r7, #4]
 8006dcc:	6892      	ldr	r2, [r2, #8]
 8006dce:	0211      	lsls	r1, r2, #8
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	6912      	ldr	r2, [r2, #16]
 8006dd4:	0852      	lsrs	r2, r2, #1
 8006dd6:	3a01      	subs	r2, #1
 8006dd8:	0552      	lsls	r2, r2, #21
 8006dda:	430a      	orrs	r2, r1
 8006ddc:	491f      	ldr	r1, [pc, #124]	; (8006e5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006dde:	4313      	orrs	r3, r2
 8006de0:	610b      	str	r3, [r1, #16]
 8006de2:	e011      	b.n	8006e08 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006de4:	4b1d      	ldr	r3, [pc, #116]	; (8006e5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006de6:	691b      	ldr	r3, [r3, #16]
 8006de8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006dec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006df0:	687a      	ldr	r2, [r7, #4]
 8006df2:	6892      	ldr	r2, [r2, #8]
 8006df4:	0211      	lsls	r1, r2, #8
 8006df6:	687a      	ldr	r2, [r7, #4]
 8006df8:	6952      	ldr	r2, [r2, #20]
 8006dfa:	0852      	lsrs	r2, r2, #1
 8006dfc:	3a01      	subs	r2, #1
 8006dfe:	0652      	lsls	r2, r2, #25
 8006e00:	430a      	orrs	r2, r1
 8006e02:	4916      	ldr	r1, [pc, #88]	; (8006e5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e04:	4313      	orrs	r3, r2
 8006e06:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006e08:	4b14      	ldr	r3, [pc, #80]	; (8006e5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a13      	ldr	r2, [pc, #76]	; (8006e5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e0e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006e12:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e14:	f7fd f92e 	bl	8004074 <HAL_GetTick>
 8006e18:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006e1a:	e009      	b.n	8006e30 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006e1c:	f7fd f92a 	bl	8004074 <HAL_GetTick>
 8006e20:	4602      	mov	r2, r0
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	1ad3      	subs	r3, r2, r3
 8006e26:	2b02      	cmp	r3, #2
 8006e28:	d902      	bls.n	8006e30 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8006e2a:	2303      	movs	r3, #3
 8006e2c:	73fb      	strb	r3, [r7, #15]
          break;
 8006e2e:	e005      	b.n	8006e3c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006e30:	4b0a      	ldr	r3, [pc, #40]	; (8006e5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d0ef      	beq.n	8006e1c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006e3c:	7bfb      	ldrb	r3, [r7, #15]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d106      	bne.n	8006e50 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006e42:	4b06      	ldr	r3, [pc, #24]	; (8006e5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e44:	691a      	ldr	r2, [r3, #16]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	699b      	ldr	r3, [r3, #24]
 8006e4a:	4904      	ldr	r1, [pc, #16]	; (8006e5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3710      	adds	r7, #16
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}
 8006e5a:	bf00      	nop
 8006e5c:	40021000 	.word	0x40021000

08006e60 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b084      	sub	sp, #16
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006e6e:	4b6a      	ldr	r3, [pc, #424]	; (8007018 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e70:	68db      	ldr	r3, [r3, #12]
 8006e72:	f003 0303 	and.w	r3, r3, #3
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d018      	beq.n	8006eac <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006e7a:	4b67      	ldr	r3, [pc, #412]	; (8007018 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e7c:	68db      	ldr	r3, [r3, #12]
 8006e7e:	f003 0203 	and.w	r2, r3, #3
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	429a      	cmp	r2, r3
 8006e88:	d10d      	bne.n	8006ea6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
       ||
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d009      	beq.n	8006ea6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006e92:	4b61      	ldr	r3, [pc, #388]	; (8007018 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006e94:	68db      	ldr	r3, [r3, #12]
 8006e96:	091b      	lsrs	r3, r3, #4
 8006e98:	f003 0307 	and.w	r3, r3, #7
 8006e9c:	1c5a      	adds	r2, r3, #1
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	685b      	ldr	r3, [r3, #4]
       ||
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d047      	beq.n	8006f36 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	73fb      	strb	r3, [r7, #15]
 8006eaa:	e044      	b.n	8006f36 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	2b03      	cmp	r3, #3
 8006eb2:	d018      	beq.n	8006ee6 <RCCEx_PLLSAI2_Config+0x86>
 8006eb4:	2b03      	cmp	r3, #3
 8006eb6:	d825      	bhi.n	8006f04 <RCCEx_PLLSAI2_Config+0xa4>
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d002      	beq.n	8006ec2 <RCCEx_PLLSAI2_Config+0x62>
 8006ebc:	2b02      	cmp	r3, #2
 8006ebe:	d009      	beq.n	8006ed4 <RCCEx_PLLSAI2_Config+0x74>
 8006ec0:	e020      	b.n	8006f04 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006ec2:	4b55      	ldr	r3, [pc, #340]	; (8007018 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f003 0302 	and.w	r3, r3, #2
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d11d      	bne.n	8006f0a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006ed2:	e01a      	b.n	8006f0a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006ed4:	4b50      	ldr	r3, [pc, #320]	; (8007018 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d116      	bne.n	8006f0e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006ee4:	e013      	b.n	8006f0e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006ee6:	4b4c      	ldr	r3, [pc, #304]	; (8007018 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d10f      	bne.n	8006f12 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006ef2:	4b49      	ldr	r3, [pc, #292]	; (8007018 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d109      	bne.n	8006f12 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006efe:	2301      	movs	r3, #1
 8006f00:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006f02:	e006      	b.n	8006f12 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006f04:	2301      	movs	r3, #1
 8006f06:	73fb      	strb	r3, [r7, #15]
      break;
 8006f08:	e004      	b.n	8006f14 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006f0a:	bf00      	nop
 8006f0c:	e002      	b.n	8006f14 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006f0e:	bf00      	nop
 8006f10:	e000      	b.n	8006f14 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006f12:	bf00      	nop
    }

    if(status == HAL_OK)
 8006f14:	7bfb      	ldrb	r3, [r7, #15]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d10d      	bne.n	8006f36 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006f1a:	4b3f      	ldr	r3, [pc, #252]	; (8007018 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f1c:	68db      	ldr	r3, [r3, #12]
 8006f1e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6819      	ldr	r1, [r3, #0]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	3b01      	subs	r3, #1
 8006f2c:	011b      	lsls	r3, r3, #4
 8006f2e:	430b      	orrs	r3, r1
 8006f30:	4939      	ldr	r1, [pc, #228]	; (8007018 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f32:	4313      	orrs	r3, r2
 8006f34:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006f36:	7bfb      	ldrb	r3, [r7, #15]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d167      	bne.n	800700c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006f3c:	4b36      	ldr	r3, [pc, #216]	; (8007018 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a35      	ldr	r2, [pc, #212]	; (8007018 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f48:	f7fd f894 	bl	8004074 <HAL_GetTick>
 8006f4c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006f4e:	e009      	b.n	8006f64 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006f50:	f7fd f890 	bl	8004074 <HAL_GetTick>
 8006f54:	4602      	mov	r2, r0
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	1ad3      	subs	r3, r2, r3
 8006f5a:	2b02      	cmp	r3, #2
 8006f5c:	d902      	bls.n	8006f64 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006f5e:	2303      	movs	r3, #3
 8006f60:	73fb      	strb	r3, [r7, #15]
        break;
 8006f62:	e005      	b.n	8006f70 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006f64:	4b2c      	ldr	r3, [pc, #176]	; (8007018 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d1ef      	bne.n	8006f50 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006f70:	7bfb      	ldrb	r3, [r7, #15]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d14a      	bne.n	800700c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d111      	bne.n	8006fa0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006f7c:	4b26      	ldr	r3, [pc, #152]	; (8007018 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f7e:	695b      	ldr	r3, [r3, #20]
 8006f80:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006f84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f88:	687a      	ldr	r2, [r7, #4]
 8006f8a:	6892      	ldr	r2, [r2, #8]
 8006f8c:	0211      	lsls	r1, r2, #8
 8006f8e:	687a      	ldr	r2, [r7, #4]
 8006f90:	68d2      	ldr	r2, [r2, #12]
 8006f92:	0912      	lsrs	r2, r2, #4
 8006f94:	0452      	lsls	r2, r2, #17
 8006f96:	430a      	orrs	r2, r1
 8006f98:	491f      	ldr	r1, [pc, #124]	; (8007018 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	614b      	str	r3, [r1, #20]
 8006f9e:	e011      	b.n	8006fc4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006fa0:	4b1d      	ldr	r3, [pc, #116]	; (8007018 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006fa2:	695b      	ldr	r3, [r3, #20]
 8006fa4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006fa8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	6892      	ldr	r2, [r2, #8]
 8006fb0:	0211      	lsls	r1, r2, #8
 8006fb2:	687a      	ldr	r2, [r7, #4]
 8006fb4:	6912      	ldr	r2, [r2, #16]
 8006fb6:	0852      	lsrs	r2, r2, #1
 8006fb8:	3a01      	subs	r2, #1
 8006fba:	0652      	lsls	r2, r2, #25
 8006fbc:	430a      	orrs	r2, r1
 8006fbe:	4916      	ldr	r1, [pc, #88]	; (8007018 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006fc4:	4b14      	ldr	r3, [pc, #80]	; (8007018 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a13      	ldr	r2, [pc, #76]	; (8007018 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006fca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fd0:	f7fd f850 	bl	8004074 <HAL_GetTick>
 8006fd4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006fd6:	e009      	b.n	8006fec <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006fd8:	f7fd f84c 	bl	8004074 <HAL_GetTick>
 8006fdc:	4602      	mov	r2, r0
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	1ad3      	subs	r3, r2, r3
 8006fe2:	2b02      	cmp	r3, #2
 8006fe4:	d902      	bls.n	8006fec <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8006fe6:	2303      	movs	r3, #3
 8006fe8:	73fb      	strb	r3, [r7, #15]
          break;
 8006fea:	e005      	b.n	8006ff8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006fec:	4b0a      	ldr	r3, [pc, #40]	; (8007018 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d0ef      	beq.n	8006fd8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006ff8:	7bfb      	ldrb	r3, [r7, #15]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d106      	bne.n	800700c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006ffe:	4b06      	ldr	r3, [pc, #24]	; (8007018 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007000:	695a      	ldr	r2, [r3, #20]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	695b      	ldr	r3, [r3, #20]
 8007006:	4904      	ldr	r1, [pc, #16]	; (8007018 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007008:	4313      	orrs	r3, r2
 800700a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800700c:	7bfb      	ldrb	r3, [r7, #15]
}
 800700e:	4618      	mov	r0, r3
 8007010:	3710      	adds	r7, #16
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
 8007016:	bf00      	nop
 8007018:	40021000 	.word	0x40021000

0800701c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b084      	sub	sp, #16
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007024:	2301      	movs	r3, #1
 8007026:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d06c      	beq.n	8007108 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007034:	b2db      	uxtb	r3, r3
 8007036:	2b00      	cmp	r3, #0
 8007038:	d106      	bne.n	8007048 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2200      	movs	r2, #0
 800703e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f7fb fb72 	bl	800272c <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2202      	movs	r2, #2
 800704c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	22ca      	movs	r2, #202	; 0xca
 8007056:	625a      	str	r2, [r3, #36]	; 0x24
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	2253      	movs	r2, #83	; 0x53
 800705e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f000 fbcb 	bl	80077fc <RTC_EnterInitMode>
 8007066:	4603      	mov	r3, r0
 8007068:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800706a:	7bfb      	ldrb	r3, [r7, #15]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d14b      	bne.n	8007108 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	687a      	ldr	r2, [r7, #4]
 8007078:	6812      	ldr	r2, [r2, #0]
 800707a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800707e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007082:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	6899      	ldr	r1, [r3, #8]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	685a      	ldr	r2, [r3, #4]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	691b      	ldr	r3, [r3, #16]
 8007092:	431a      	orrs	r2, r3
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	699b      	ldr	r3, [r3, #24]
 8007098:	431a      	orrs	r2, r3
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	430a      	orrs	r2, r1
 80070a0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	687a      	ldr	r2, [r7, #4]
 80070a8:	68d2      	ldr	r2, [r2, #12]
 80070aa:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	6919      	ldr	r1, [r3, #16]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	689b      	ldr	r3, [r3, #8]
 80070b6:	041a      	lsls	r2, r3, #16
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	430a      	orrs	r2, r1
 80070be:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f000 fbcf 	bl	8007864 <RTC_ExitInitMode>
 80070c6:	4603      	mov	r3, r0
 80070c8:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80070ca:	7bfb      	ldrb	r3, [r7, #15]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d11b      	bne.n	8007108 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f022 0203 	bic.w	r2, r2, #3
 80070de:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	69da      	ldr	r2, [r3, #28]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	695b      	ldr	r3, [r3, #20]
 80070ee:	431a      	orrs	r2, r3
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	430a      	orrs	r2, r1
 80070f6:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	22ff      	movs	r2, #255	; 0xff
 80070fe:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2201      	movs	r2, #1
 8007104:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8007108:	7bfb      	ldrb	r3, [r7, #15]
}
 800710a:	4618      	mov	r0, r3
 800710c:	3710      	adds	r7, #16
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}

08007112 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007112:	b590      	push	{r4, r7, lr}
 8007114:	b087      	sub	sp, #28
 8007116:	af00      	add	r7, sp, #0
 8007118:	60f8      	str	r0, [r7, #12]
 800711a:	60b9      	str	r1, [r7, #8]
 800711c:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007124:	2b01      	cmp	r3, #1
 8007126:	d101      	bne.n	800712c <HAL_RTC_SetTime+0x1a>
 8007128:	2302      	movs	r3, #2
 800712a:	e08b      	b.n	8007244 <HAL_RTC_SetTime+0x132>
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2201      	movs	r2, #1
 8007130:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2202      	movs	r2, #2
 8007138:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	22ca      	movs	r2, #202	; 0xca
 8007142:	625a      	str	r2, [r3, #36]	; 0x24
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	2253      	movs	r2, #83	; 0x53
 800714a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800714c:	68f8      	ldr	r0, [r7, #12]
 800714e:	f000 fb55 	bl	80077fc <RTC_EnterInitMode>
 8007152:	4603      	mov	r3, r0
 8007154:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8007156:	7cfb      	ldrb	r3, [r7, #19]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d163      	bne.n	8007224 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d126      	bne.n	80071b0 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800716c:	2b00      	cmp	r3, #0
 800716e:	d102      	bne.n	8007176 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	2200      	movs	r2, #0
 8007174:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	781b      	ldrb	r3, [r3, #0]
 800717a:	4618      	mov	r0, r3
 800717c:	f000 fbb0 	bl	80078e0 <RTC_ByteToBcd2>
 8007180:	4603      	mov	r3, r0
 8007182:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	785b      	ldrb	r3, [r3, #1]
 8007188:	4618      	mov	r0, r3
 800718a:	f000 fba9 	bl	80078e0 <RTC_ByteToBcd2>
 800718e:	4603      	mov	r3, r0
 8007190:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007192:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	789b      	ldrb	r3, [r3, #2]
 8007198:	4618      	mov	r0, r3
 800719a:	f000 fba1 	bl	80078e0 <RTC_ByteToBcd2>
 800719e:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80071a0:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	78db      	ldrb	r3, [r3, #3]
 80071a8:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80071aa:	4313      	orrs	r3, r2
 80071ac:	617b      	str	r3, [r7, #20]
 80071ae:	e018      	b.n	80071e2 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	689b      	ldr	r3, [r3, #8]
 80071b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d102      	bne.n	80071c4 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	2200      	movs	r2, #0
 80071c2:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	781b      	ldrb	r3, [r3, #0]
 80071c8:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	785b      	ldrb	r3, [r3, #1]
 80071ce:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80071d0:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80071d2:	68ba      	ldr	r2, [r7, #8]
 80071d4:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80071d6:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	78db      	ldrb	r3, [r3, #3]
 80071dc:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80071de:	4313      	orrs	r3, r2
 80071e0:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681a      	ldr	r2, [r3, #0]
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80071ec:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80071f0:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	689a      	ldr	r2, [r3, #8]
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007200:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	6899      	ldr	r1, [r3, #8]
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	68da      	ldr	r2, [r3, #12]
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	691b      	ldr	r3, [r3, #16]
 8007210:	431a      	orrs	r2, r3
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	430a      	orrs	r2, r1
 8007218:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800721a:	68f8      	ldr	r0, [r7, #12]
 800721c:	f000 fb22 	bl	8007864 <RTC_ExitInitMode>
 8007220:	4603      	mov	r3, r0
 8007222:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	22ff      	movs	r2, #255	; 0xff
 800722a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800722c:	7cfb      	ldrb	r3, [r7, #19]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d103      	bne.n	800723a <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2201      	movs	r2, #1
 8007236:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2200      	movs	r2, #0
 800723e:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8007242:	7cfb      	ldrb	r3, [r7, #19]
}
 8007244:	4618      	mov	r0, r3
 8007246:	371c      	adds	r7, #28
 8007248:	46bd      	mov	sp, r7
 800724a:	bd90      	pop	{r4, r7, pc}

0800724c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b086      	sub	sp, #24
 8007250:	af00      	add	r7, sp, #0
 8007252:	60f8      	str	r0, [r7, #12]
 8007254:	60b9      	str	r1, [r7, #8]
 8007256:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	691b      	ldr	r3, [r3, #16]
 8007268:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800727a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800727e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	0c1b      	lsrs	r3, r3, #16
 8007284:	b2db      	uxtb	r3, r3
 8007286:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800728a:	b2da      	uxtb	r2, r3
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	0a1b      	lsrs	r3, r3, #8
 8007294:	b2db      	uxtb	r3, r3
 8007296:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800729a:	b2da      	uxtb	r2, r3
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072a8:	b2da      	uxtb	r2, r3
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	0d9b      	lsrs	r3, r3, #22
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	f003 0301 	and.w	r3, r3, #1
 80072b8:	b2da      	uxtb	r2, r3
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d11a      	bne.n	80072fa <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	781b      	ldrb	r3, [r3, #0]
 80072c8:	4618      	mov	r0, r3
 80072ca:	f000 fb29 	bl	8007920 <RTC_Bcd2ToByte>
 80072ce:	4603      	mov	r3, r0
 80072d0:	461a      	mov	r2, r3
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	785b      	ldrb	r3, [r3, #1]
 80072da:	4618      	mov	r0, r3
 80072dc:	f000 fb20 	bl	8007920 <RTC_Bcd2ToByte>
 80072e0:	4603      	mov	r3, r0
 80072e2:	461a      	mov	r2, r3
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	789b      	ldrb	r3, [r3, #2]
 80072ec:	4618      	mov	r0, r3
 80072ee:	f000 fb17 	bl	8007920 <RTC_Bcd2ToByte>
 80072f2:	4603      	mov	r3, r0
 80072f4:	461a      	mov	r2, r3
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80072fa:	2300      	movs	r3, #0
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3718      	adds	r7, #24
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}

08007304 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007304:	b590      	push	{r4, r7, lr}
 8007306:	b087      	sub	sp, #28
 8007308:	af00      	add	r7, sp, #0
 800730a:	60f8      	str	r0, [r7, #12]
 800730c:	60b9      	str	r1, [r7, #8]
 800730e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007316:	2b01      	cmp	r3, #1
 8007318:	d101      	bne.n	800731e <HAL_RTC_SetDate+0x1a>
 800731a:	2302      	movs	r3, #2
 800731c:	e075      	b.n	800740a <HAL_RTC_SetDate+0x106>
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2201      	movs	r2, #1
 8007322:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2202      	movs	r2, #2
 800732a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d10e      	bne.n	8007352 <HAL_RTC_SetDate+0x4e>
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	785b      	ldrb	r3, [r3, #1]
 8007338:	f003 0310 	and.w	r3, r3, #16
 800733c:	2b00      	cmp	r3, #0
 800733e:	d008      	beq.n	8007352 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	785b      	ldrb	r3, [r3, #1]
 8007344:	f023 0310 	bic.w	r3, r3, #16
 8007348:	b2db      	uxtb	r3, r3
 800734a:	330a      	adds	r3, #10
 800734c:	b2da      	uxtb	r2, r3
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d11c      	bne.n	8007392 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	78db      	ldrb	r3, [r3, #3]
 800735c:	4618      	mov	r0, r3
 800735e:	f000 fabf 	bl	80078e0 <RTC_ByteToBcd2>
 8007362:	4603      	mov	r3, r0
 8007364:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	785b      	ldrb	r3, [r3, #1]
 800736a:	4618      	mov	r0, r3
 800736c:	f000 fab8 	bl	80078e0 <RTC_ByteToBcd2>
 8007370:	4603      	mov	r3, r0
 8007372:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8007374:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	789b      	ldrb	r3, [r3, #2]
 800737a:	4618      	mov	r0, r3
 800737c:	f000 fab0 	bl	80078e0 <RTC_ByteToBcd2>
 8007380:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007382:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	781b      	ldrb	r3, [r3, #0]
 800738a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800738c:	4313      	orrs	r3, r2
 800738e:	617b      	str	r3, [r7, #20]
 8007390:	e00e      	b.n	80073b0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	78db      	ldrb	r3, [r3, #3]
 8007396:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	785b      	ldrb	r3, [r3, #1]
 800739c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800739e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80073a0:	68ba      	ldr	r2, [r7, #8]
 80073a2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80073a4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80073ac:	4313      	orrs	r3, r2
 80073ae:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	22ca      	movs	r2, #202	; 0xca
 80073b6:	625a      	str	r2, [r3, #36]	; 0x24
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	2253      	movs	r2, #83	; 0x53
 80073be:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80073c0:	68f8      	ldr	r0, [r7, #12]
 80073c2:	f000 fa1b 	bl	80077fc <RTC_EnterInitMode>
 80073c6:	4603      	mov	r3, r0
 80073c8:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80073ca:	7cfb      	ldrb	r3, [r7, #19]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d10c      	bne.n	80073ea <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681a      	ldr	r2, [r3, #0]
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80073da:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80073de:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80073e0:	68f8      	ldr	r0, [r7, #12]
 80073e2:	f000 fa3f 	bl	8007864 <RTC_ExitInitMode>
 80073e6:	4603      	mov	r3, r0
 80073e8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	22ff      	movs	r2, #255	; 0xff
 80073f0:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80073f2:	7cfb      	ldrb	r3, [r7, #19]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d103      	bne.n	8007400 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2201      	movs	r2, #1
 80073fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2200      	movs	r2, #0
 8007404:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8007408:	7cfb      	ldrb	r3, [r7, #19]
}
 800740a:	4618      	mov	r0, r3
 800740c:	371c      	adds	r7, #28
 800740e:	46bd      	mov	sp, r7
 8007410:	bd90      	pop	{r4, r7, pc}

08007412 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007412:	b580      	push	{r7, lr}
 8007414:	b086      	sub	sp, #24
 8007416:	af00      	add	r7, sp, #0
 8007418:	60f8      	str	r0, [r7, #12]
 800741a:	60b9      	str	r1, [r7, #8]
 800741c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007428:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800742c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	0c1b      	lsrs	r3, r3, #16
 8007432:	b2da      	uxtb	r2, r3
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	0a1b      	lsrs	r3, r3, #8
 800743c:	b2db      	uxtb	r3, r3
 800743e:	f003 031f 	and.w	r3, r3, #31
 8007442:	b2da      	uxtb	r2, r3
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	b2db      	uxtb	r3, r3
 800744c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007450:	b2da      	uxtb	r2, r3
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	0b5b      	lsrs	r3, r3, #13
 800745a:	b2db      	uxtb	r3, r3
 800745c:	f003 0307 	and.w	r3, r3, #7
 8007460:	b2da      	uxtb	r2, r3
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d11a      	bne.n	80074a2 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	78db      	ldrb	r3, [r3, #3]
 8007470:	4618      	mov	r0, r3
 8007472:	f000 fa55 	bl	8007920 <RTC_Bcd2ToByte>
 8007476:	4603      	mov	r3, r0
 8007478:	461a      	mov	r2, r3
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	785b      	ldrb	r3, [r3, #1]
 8007482:	4618      	mov	r0, r3
 8007484:	f000 fa4c 	bl	8007920 <RTC_Bcd2ToByte>
 8007488:	4603      	mov	r3, r0
 800748a:	461a      	mov	r2, r3
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	789b      	ldrb	r3, [r3, #2]
 8007494:	4618      	mov	r0, r3
 8007496:	f000 fa43 	bl	8007920 <RTC_Bcd2ToByte>
 800749a:	4603      	mov	r3, r0
 800749c:	461a      	mov	r2, r3
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80074a2:	2300      	movs	r3, #0
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3718      	adds	r7, #24
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}

080074ac <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80074ac:	b590      	push	{r4, r7, lr}
 80074ae:	b089      	sub	sp, #36	; 0x24
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	60f8      	str	r0, [r7, #12]
 80074b4:	60b9      	str	r1, [r7, #8]
 80074b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d101      	bne.n	80074c6 <HAL_RTC_SetAlarm_IT+0x1a>
 80074c2:	2302      	movs	r3, #2
 80074c4:	e127      	b.n	8007716 <HAL_RTC_SetAlarm_IT+0x26a>
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2201      	movs	r2, #1
 80074ca:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2202      	movs	r2, #2
 80074d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d137      	bne.n	800754c <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	689b      	ldr	r3, [r3, #8]
 80074e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d102      	bne.n	80074f0 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	2200      	movs	r2, #0
 80074ee:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	781b      	ldrb	r3, [r3, #0]
 80074f4:	4618      	mov	r0, r3
 80074f6:	f000 f9f3 	bl	80078e0 <RTC_ByteToBcd2>
 80074fa:	4603      	mov	r3, r0
 80074fc:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	785b      	ldrb	r3, [r3, #1]
 8007502:	4618      	mov	r0, r3
 8007504:	f000 f9ec 	bl	80078e0 <RTC_ByteToBcd2>
 8007508:	4603      	mov	r3, r0
 800750a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800750c:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	789b      	ldrb	r3, [r3, #2]
 8007512:	4618      	mov	r0, r3
 8007514:	f000 f9e4 	bl	80078e0 <RTC_ByteToBcd2>
 8007518:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800751a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	78db      	ldrb	r3, [r3, #3]
 8007522:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8007524:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800752e:	4618      	mov	r0, r3
 8007530:	f000 f9d6 	bl	80078e0 <RTC_ByteToBcd2>
 8007534:	4603      	mov	r3, r0
 8007536:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8007538:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8007540:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007546:	4313      	orrs	r3, r2
 8007548:	61fb      	str	r3, [r7, #28]
 800754a:	e023      	b.n	8007594 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	689b      	ldr	r3, [r3, #8]
 8007552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007556:	2b00      	cmp	r3, #0
 8007558:	d102      	bne.n	8007560 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	2200      	movs	r2, #0
 800755e:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	785b      	ldrb	r3, [r3, #1]
 800756a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800756c:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800756e:	68ba      	ldr	r2, [r7, #8]
 8007570:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007572:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	78db      	ldrb	r3, [r3, #3]
 8007578:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800757a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007582:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8007584:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800758a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007590:	4313      	orrs	r3, r2
 8007592:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	685a      	ldr	r2, [r3, #4]
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	69db      	ldr	r3, [r3, #28]
 800759c:	4313      	orrs	r3, r2
 800759e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	22ca      	movs	r2, #202	; 0xca
 80075a6:	625a      	str	r2, [r3, #36]	; 0x24
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	2253      	movs	r2, #83	; 0x53
 80075ae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075b8:	d14a      	bne.n	8007650 <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	689a      	ldr	r2, [r3, #8]
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80075c8:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	68db      	ldr	r3, [r3, #12]
 80075d0:	b2da      	uxtb	r2, r3
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80075da:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 80075dc:	f7fc fd4a 	bl	8004074 <HAL_GetTick>
 80075e0:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80075e2:	e015      	b.n	8007610 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80075e4:	f7fc fd46 	bl	8004074 <HAL_GetTick>
 80075e8:	4602      	mov	r2, r0
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	1ad3      	subs	r3, r2, r3
 80075ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80075f2:	d90d      	bls.n	8007610 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	22ff      	movs	r2, #255	; 0xff
 80075fa:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2203      	movs	r2, #3
 8007600:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2200      	movs	r2, #0
 8007608:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800760c:	2303      	movs	r3, #3
 800760e:	e082      	b.n	8007716 <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	68db      	ldr	r3, [r3, #12]
 8007616:	f003 0301 	and.w	r3, r3, #1
 800761a:	2b00      	cmp	r3, #0
 800761c:	d0e2      	beq.n	80075e4 <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	69fa      	ldr	r2, [r7, #28]
 8007624:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	69ba      	ldr	r2, [r7, #24]
 800762c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	689a      	ldr	r2, [r3, #8]
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800763c:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	689a      	ldr	r2, [r3, #8]
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800764c:	609a      	str	r2, [r3, #8]
 800764e:	e049      	b.n	80076e4 <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	689a      	ldr	r2, [r3, #8]
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800765e:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	68db      	ldr	r3, [r3, #12]
 8007666:	b2da      	uxtb	r2, r3
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f462 7220 	orn	r2, r2, #640	; 0x280
 8007670:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 8007672:	f7fc fcff 	bl	8004074 <HAL_GetTick>
 8007676:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8007678:	e015      	b.n	80076a6 <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800767a:	f7fc fcfb 	bl	8004074 <HAL_GetTick>
 800767e:	4602      	mov	r2, r0
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	1ad3      	subs	r3, r2, r3
 8007684:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007688:	d90d      	bls.n	80076a6 <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	22ff      	movs	r2, #255	; 0xff
 8007690:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2203      	movs	r2, #3
 8007696:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2200      	movs	r2, #0
 800769e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80076a2:	2303      	movs	r3, #3
 80076a4:	e037      	b.n	8007716 <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	68db      	ldr	r3, [r3, #12]
 80076ac:	f003 0302 	and.w	r3, r3, #2
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d0e2      	beq.n	800767a <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	69fa      	ldr	r2, [r7, #28]
 80076ba:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	69ba      	ldr	r2, [r7, #24]
 80076c2:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	689a      	ldr	r2, [r3, #8]
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076d2:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	689a      	ldr	r2, [r3, #8]
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80076e2:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80076e4:	4b0e      	ldr	r3, [pc, #56]	; (8007720 <HAL_RTC_SetAlarm_IT+0x274>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a0d      	ldr	r2, [pc, #52]	; (8007720 <HAL_RTC_SetAlarm_IT+0x274>)
 80076ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80076ee:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80076f0:	4b0b      	ldr	r3, [pc, #44]	; (8007720 <HAL_RTC_SetAlarm_IT+0x274>)
 80076f2:	689b      	ldr	r3, [r3, #8]
 80076f4:	4a0a      	ldr	r2, [pc, #40]	; (8007720 <HAL_RTC_SetAlarm_IT+0x274>)
 80076f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80076fa:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	22ff      	movs	r2, #255	; 0xff
 8007702:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2201      	movs	r2, #1
 8007708:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2200      	movs	r2, #0
 8007710:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8007714:	2300      	movs	r3, #0
}
 8007716:	4618      	mov	r0, r3
 8007718:	3724      	adds	r7, #36	; 0x24
 800771a:	46bd      	mov	sp, r7
 800771c:	bd90      	pop	{r4, r7, pc}
 800771e:	bf00      	nop
 8007720:	40010400 	.word	0x40010400

08007724 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b082      	sub	sp, #8
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800772c:	4b1f      	ldr	r3, [pc, #124]	; (80077ac <HAL_RTC_AlarmIRQHandler+0x88>)
 800772e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8007732:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	689b      	ldr	r3, [r3, #8]
 800773a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800773e:	2b00      	cmp	r3, #0
 8007740:	d012      	beq.n	8007768 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	68db      	ldr	r3, [r3, #12]
 8007748:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800774c:	2b00      	cmp	r3, #0
 800774e:	d00b      	beq.n	8007768 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	68db      	ldr	r3, [r3, #12]
 8007756:	b2da      	uxtb	r2, r3
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8007760:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f7f9 fe9c 	bl	80014a0 <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	689b      	ldr	r3, [r3, #8]
 800776e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007772:	2b00      	cmp	r3, #0
 8007774:	d012      	beq.n	800779c <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	68db      	ldr	r3, [r3, #12]
 800777c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007780:	2b00      	cmp	r3, #0
 8007782:	d00b      	beq.n	800779c <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	68db      	ldr	r3, [r3, #12]
 800778a:	b2da      	uxtb	r2, r3
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f462 7220 	orn	r2, r2, #640	; 0x280
 8007794:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 f8dc 	bl	8007954 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2201      	movs	r2, #1
 80077a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 80077a4:	bf00      	nop
 80077a6:	3708      	adds	r7, #8
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}
 80077ac:	40010400 	.word	0x40010400

080077b0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b084      	sub	sp, #16
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	68da      	ldr	r2, [r3, #12]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80077c6:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80077c8:	f7fc fc54 	bl	8004074 <HAL_GetTick>
 80077cc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80077ce:	e009      	b.n	80077e4 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80077d0:	f7fc fc50 	bl	8004074 <HAL_GetTick>
 80077d4:	4602      	mov	r2, r0
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	1ad3      	subs	r3, r2, r3
 80077da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80077de:	d901      	bls.n	80077e4 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80077e0:	2303      	movs	r3, #3
 80077e2:	e007      	b.n	80077f4 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	68db      	ldr	r3, [r3, #12]
 80077ea:	f003 0320 	and.w	r3, r3, #32
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d0ee      	beq.n	80077d0 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80077f2:	2300      	movs	r3, #0
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	3710      	adds	r7, #16
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}

080077fc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b084      	sub	sp, #16
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007804:	2300      	movs	r3, #0
 8007806:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	68db      	ldr	r3, [r3, #12]
 800780e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007812:	2b00      	cmp	r3, #0
 8007814:	d120      	bne.n	8007858 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f04f 32ff 	mov.w	r2, #4294967295
 800781e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007820:	f7fc fc28 	bl	8004074 <HAL_GetTick>
 8007824:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007826:	e00d      	b.n	8007844 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007828:	f7fc fc24 	bl	8004074 <HAL_GetTick>
 800782c:	4602      	mov	r2, r0
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	1ad3      	subs	r3, r2, r3
 8007832:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007836:	d905      	bls.n	8007844 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8007838:	2303      	movs	r3, #3
 800783a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2203      	movs	r2, #3
 8007840:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	68db      	ldr	r3, [r3, #12]
 800784a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800784e:	2b00      	cmp	r3, #0
 8007850:	d102      	bne.n	8007858 <RTC_EnterInitMode+0x5c>
 8007852:	7bfb      	ldrb	r3, [r7, #15]
 8007854:	2b03      	cmp	r3, #3
 8007856:	d1e7      	bne.n	8007828 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8007858:	7bfb      	ldrb	r3, [r7, #15]
}
 800785a:	4618      	mov	r0, r3
 800785c:	3710      	adds	r7, #16
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}
	...

08007864 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b084      	sub	sp, #16
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800786c:	2300      	movs	r3, #0
 800786e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8007870:	4b1a      	ldr	r3, [pc, #104]	; (80078dc <RTC_ExitInitMode+0x78>)
 8007872:	68db      	ldr	r3, [r3, #12]
 8007874:	4a19      	ldr	r2, [pc, #100]	; (80078dc <RTC_ExitInitMode+0x78>)
 8007876:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800787a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800787c:	4b17      	ldr	r3, [pc, #92]	; (80078dc <RTC_ExitInitMode+0x78>)
 800787e:	689b      	ldr	r3, [r3, #8]
 8007880:	f003 0320 	and.w	r3, r3, #32
 8007884:	2b00      	cmp	r3, #0
 8007886:	d10c      	bne.n	80078a2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f7ff ff91 	bl	80077b0 <HAL_RTC_WaitForSynchro>
 800788e:	4603      	mov	r3, r0
 8007890:	2b00      	cmp	r3, #0
 8007892:	d01e      	beq.n	80078d2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2203      	movs	r2, #3
 8007898:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800789c:	2303      	movs	r3, #3
 800789e:	73fb      	strb	r3, [r7, #15]
 80078a0:	e017      	b.n	80078d2 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80078a2:	4b0e      	ldr	r3, [pc, #56]	; (80078dc <RTC_ExitInitMode+0x78>)
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	4a0d      	ldr	r2, [pc, #52]	; (80078dc <RTC_ExitInitMode+0x78>)
 80078a8:	f023 0320 	bic.w	r3, r3, #32
 80078ac:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f7ff ff7e 	bl	80077b0 <HAL_RTC_WaitForSynchro>
 80078b4:	4603      	mov	r3, r0
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d005      	beq.n	80078c6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2203      	movs	r2, #3
 80078be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80078c2:	2303      	movs	r3, #3
 80078c4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80078c6:	4b05      	ldr	r3, [pc, #20]	; (80078dc <RTC_ExitInitMode+0x78>)
 80078c8:	689b      	ldr	r3, [r3, #8]
 80078ca:	4a04      	ldr	r2, [pc, #16]	; (80078dc <RTC_ExitInitMode+0x78>)
 80078cc:	f043 0320 	orr.w	r3, r3, #32
 80078d0:	6093      	str	r3, [r2, #8]
  }

  return status;
 80078d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3710      	adds	r7, #16
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}
 80078dc:	40002800 	.word	0x40002800

080078e0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b085      	sub	sp, #20
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	4603      	mov	r3, r0
 80078e8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80078ea:	2300      	movs	r3, #0
 80078ec:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 80078ee:	79fb      	ldrb	r3, [r7, #7]
 80078f0:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 80078f2:	e005      	b.n	8007900 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	3301      	adds	r3, #1
 80078f8:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 80078fa:	7afb      	ldrb	r3, [r7, #11]
 80078fc:	3b0a      	subs	r3, #10
 80078fe:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8007900:	7afb      	ldrb	r3, [r7, #11]
 8007902:	2b09      	cmp	r3, #9
 8007904:	d8f6      	bhi.n	80078f4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	b2db      	uxtb	r3, r3
 800790a:	011b      	lsls	r3, r3, #4
 800790c:	b2da      	uxtb	r2, r3
 800790e:	7afb      	ldrb	r3, [r7, #11]
 8007910:	4313      	orrs	r3, r2
 8007912:	b2db      	uxtb	r3, r3
}
 8007914:	4618      	mov	r0, r3
 8007916:	3714      	adds	r7, #20
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr

08007920 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8007920:	b480      	push	{r7}
 8007922:	b085      	sub	sp, #20
 8007924:	af00      	add	r7, sp, #0
 8007926:	4603      	mov	r3, r0
 8007928:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800792a:	79fb      	ldrb	r3, [r7, #7]
 800792c:	091b      	lsrs	r3, r3, #4
 800792e:	b2db      	uxtb	r3, r3
 8007930:	461a      	mov	r2, r3
 8007932:	0092      	lsls	r2, r2, #2
 8007934:	4413      	add	r3, r2
 8007936:	005b      	lsls	r3, r3, #1
 8007938:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800793a:	79fb      	ldrb	r3, [r7, #7]
 800793c:	f003 030f 	and.w	r3, r3, #15
 8007940:	b2da      	uxtb	r2, r3
 8007942:	7bfb      	ldrb	r3, [r7, #15]
 8007944:	4413      	add	r3, r2
 8007946:	b2db      	uxtb	r3, r3
}
 8007948:	4618      	mov	r0, r3
 800794a:	3714      	adds	r7, #20
 800794c:	46bd      	mov	sp, r7
 800794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007952:	4770      	bx	lr

08007954 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8007954:	b480      	push	{r7}
 8007956:	b083      	sub	sp, #12
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800795c:	bf00      	nop
 800795e:	370c      	adds	r7, #12
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr

08007968 <HAL_RTCEx_BKUPWrite>:
  *          specify the register.
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8007968:	b480      	push	{r7}
 800796a:	b087      	sub	sp, #28
 800796c:	af00      	add	r7, sp, #0
 800796e:	60f8      	str	r0, [r7, #12]
 8007970:	60b9      	str	r1, [r7, #8]
 8007972:	607a      	str	r2, [r7, #4]
  tmp = (uint32_t) & (tamp->BKP0R);
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	3350      	adds	r3, #80	; 0x50
 800797a:	617b      	str	r3, [r7, #20]
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  tmp += (BackupRegister * 4U);
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	009a      	lsls	r2, r3, #2
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	4413      	add	r3, r2
 8007984:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	461a      	mov	r2, r3
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6013      	str	r3, [r2, #0]
}
 800798e:	bf00      	nop
 8007990:	371c      	adds	r7, #28
 8007992:	46bd      	mov	sp, r7
 8007994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007998:	4770      	bx	lr

0800799a <HAL_RTCEx_BKUPRead>:
  *         This parameter can be: RTC_BKP_DRx where x can be from 0 to 31 to
  *         specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800799a:	b480      	push	{r7}
 800799c:	b085      	sub	sp, #20
 800799e:	af00      	add	r7, sp, #0
 80079a0:	6078      	str	r0, [r7, #4]
 80079a2:	6039      	str	r1, [r7, #0]
  tmp = (uint32_t) & (tamp->BKP0R);
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	3350      	adds	r3, #80	; 0x50
 80079aa:	60fb      	str	r3, [r7, #12]
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  tmp += (BackupRegister * 4U);
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	009b      	lsls	r3, r3, #2
 80079b0:	68fa      	ldr	r2, [r7, #12]
 80079b2:	4413      	add	r3, r2
 80079b4:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3714      	adds	r7, #20
 80079be:	46bd      	mov	sp, r7
 80079c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c4:	4770      	bx	lr

080079c6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80079c6:	b580      	push	{r7, lr}
 80079c8:	b082      	sub	sp, #8
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d101      	bne.n	80079d8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80079d4:	2301      	movs	r3, #1
 80079d6:	e049      	b.n	8007a6c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079de:	b2db      	uxtb	r3, r3
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d106      	bne.n	80079f2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2200      	movs	r2, #0
 80079e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f7fc f801 	bl	80039f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2202      	movs	r2, #2
 80079f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681a      	ldr	r2, [r3, #0]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	3304      	adds	r3, #4
 8007a02:	4619      	mov	r1, r3
 8007a04:	4610      	mov	r0, r2
 8007a06:	f001 faa3 	bl	8008f50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2201      	movs	r2, #1
 8007a0e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2201      	movs	r2, #1
 8007a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2201      	movs	r2, #1
 8007a1e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2201      	movs	r2, #1
 8007a26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2201      	movs	r2, #1
 8007a36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2201      	movs	r2, #1
 8007a3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2201      	movs	r2, #1
 8007a46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2201      	movs	r2, #1
 8007a4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2201      	movs	r2, #1
 8007a56:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2201      	movs	r2, #1
 8007a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a6a:	2300      	movs	r3, #0
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3708      	adds	r7, #8
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}

08007a74 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b085      	sub	sp, #20
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	d001      	beq.n	8007a8c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007a88:	2301      	movs	r3, #1
 8007a8a:	e047      	b.n	8007b1c <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2202      	movs	r2, #2
 8007a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a23      	ldr	r2, [pc, #140]	; (8007b28 <HAL_TIM_Base_Start+0xb4>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d01d      	beq.n	8007ada <HAL_TIM_Base_Start+0x66>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007aa6:	d018      	beq.n	8007ada <HAL_TIM_Base_Start+0x66>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a1f      	ldr	r2, [pc, #124]	; (8007b2c <HAL_TIM_Base_Start+0xb8>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d013      	beq.n	8007ada <HAL_TIM_Base_Start+0x66>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a1e      	ldr	r2, [pc, #120]	; (8007b30 <HAL_TIM_Base_Start+0xbc>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d00e      	beq.n	8007ada <HAL_TIM_Base_Start+0x66>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a1c      	ldr	r2, [pc, #112]	; (8007b34 <HAL_TIM_Base_Start+0xc0>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d009      	beq.n	8007ada <HAL_TIM_Base_Start+0x66>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a1b      	ldr	r2, [pc, #108]	; (8007b38 <HAL_TIM_Base_Start+0xc4>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d004      	beq.n	8007ada <HAL_TIM_Base_Start+0x66>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a19      	ldr	r2, [pc, #100]	; (8007b3c <HAL_TIM_Base_Start+0xc8>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d115      	bne.n	8007b06 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	689a      	ldr	r2, [r3, #8]
 8007ae0:	4b17      	ldr	r3, [pc, #92]	; (8007b40 <HAL_TIM_Base_Start+0xcc>)
 8007ae2:	4013      	ands	r3, r2
 8007ae4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2b06      	cmp	r3, #6
 8007aea:	d015      	beq.n	8007b18 <HAL_TIM_Base_Start+0xa4>
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007af2:	d011      	beq.n	8007b18 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	681a      	ldr	r2, [r3, #0]
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f042 0201 	orr.w	r2, r2, #1
 8007b02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b04:	e008      	b.n	8007b18 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	681a      	ldr	r2, [r3, #0]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f042 0201 	orr.w	r2, r2, #1
 8007b14:	601a      	str	r2, [r3, #0]
 8007b16:	e000      	b.n	8007b1a <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b18:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007b1a:	2300      	movs	r3, #0
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3714      	adds	r7, #20
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr
 8007b28:	40012c00 	.word	0x40012c00
 8007b2c:	40000400 	.word	0x40000400
 8007b30:	40000800 	.word	0x40000800
 8007b34:	40000c00 	.word	0x40000c00
 8007b38:	40013400 	.word	0x40013400
 8007b3c:	40014000 	.word	0x40014000
 8007b40:	00010007 	.word	0x00010007

08007b44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b085      	sub	sp, #20
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b52:	b2db      	uxtb	r3, r3
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	d001      	beq.n	8007b5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007b58:	2301      	movs	r3, #1
 8007b5a:	e04f      	b.n	8007bfc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2202      	movs	r2, #2
 8007b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	68da      	ldr	r2, [r3, #12]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f042 0201 	orr.w	r2, r2, #1
 8007b72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4a23      	ldr	r2, [pc, #140]	; (8007c08 <HAL_TIM_Base_Start_IT+0xc4>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d01d      	beq.n	8007bba <HAL_TIM_Base_Start_IT+0x76>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b86:	d018      	beq.n	8007bba <HAL_TIM_Base_Start_IT+0x76>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a1f      	ldr	r2, [pc, #124]	; (8007c0c <HAL_TIM_Base_Start_IT+0xc8>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d013      	beq.n	8007bba <HAL_TIM_Base_Start_IT+0x76>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4a1e      	ldr	r2, [pc, #120]	; (8007c10 <HAL_TIM_Base_Start_IT+0xcc>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d00e      	beq.n	8007bba <HAL_TIM_Base_Start_IT+0x76>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a1c      	ldr	r2, [pc, #112]	; (8007c14 <HAL_TIM_Base_Start_IT+0xd0>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d009      	beq.n	8007bba <HAL_TIM_Base_Start_IT+0x76>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a1b      	ldr	r2, [pc, #108]	; (8007c18 <HAL_TIM_Base_Start_IT+0xd4>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d004      	beq.n	8007bba <HAL_TIM_Base_Start_IT+0x76>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a19      	ldr	r2, [pc, #100]	; (8007c1c <HAL_TIM_Base_Start_IT+0xd8>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d115      	bne.n	8007be6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	689a      	ldr	r2, [r3, #8]
 8007bc0:	4b17      	ldr	r3, [pc, #92]	; (8007c20 <HAL_TIM_Base_Start_IT+0xdc>)
 8007bc2:	4013      	ands	r3, r2
 8007bc4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	2b06      	cmp	r3, #6
 8007bca:	d015      	beq.n	8007bf8 <HAL_TIM_Base_Start_IT+0xb4>
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bd2:	d011      	beq.n	8007bf8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f042 0201 	orr.w	r2, r2, #1
 8007be2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007be4:	e008      	b.n	8007bf8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	681a      	ldr	r2, [r3, #0]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f042 0201 	orr.w	r2, r2, #1
 8007bf4:	601a      	str	r2, [r3, #0]
 8007bf6:	e000      	b.n	8007bfa <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bf8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007bfa:	2300      	movs	r3, #0
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3714      	adds	r7, #20
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr
 8007c08:	40012c00 	.word	0x40012c00
 8007c0c:	40000400 	.word	0x40000400
 8007c10:	40000800 	.word	0x40000800
 8007c14:	40000c00 	.word	0x40000c00
 8007c18:	40013400 	.word	0x40013400
 8007c1c:	40014000 	.word	0x40014000
 8007c20:	00010007 	.word	0x00010007

08007c24 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b082      	sub	sp, #8
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d101      	bne.n	8007c36 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007c32:	2301      	movs	r3, #1
 8007c34:	e049      	b.n	8007cca <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c3c:	b2db      	uxtb	r3, r3
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d106      	bne.n	8007c50 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2200      	movs	r2, #0
 8007c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f000 f841 	bl	8007cd2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2202      	movs	r2, #2
 8007c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681a      	ldr	r2, [r3, #0]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	3304      	adds	r3, #4
 8007c60:	4619      	mov	r1, r3
 8007c62:	4610      	mov	r0, r2
 8007c64:	f001 f974 	bl	8008f50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2201      	movs	r2, #1
 8007c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2201      	movs	r2, #1
 8007c84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2201      	movs	r2, #1
 8007c94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2201      	movs	r2, #1
 8007cac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007cc8:	2300      	movs	r3, #0
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3708      	adds	r7, #8
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}

08007cd2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007cd2:	b480      	push	{r7}
 8007cd4:	b083      	sub	sp, #12
 8007cd6:	af00      	add	r7, sp, #0
 8007cd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007cda:	bf00      	nop
 8007cdc:	370c      	adds	r7, #12
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce4:	4770      	bx	lr
	...

08007ce8 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b086      	sub	sp, #24
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	60f8      	str	r0, [r7, #12]
 8007cf0:	60b9      	str	r1, [r7, #8]
 8007cf2:	607a      	str	r2, [r7, #4]
 8007cf4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d109      	bne.n	8007d14 <HAL_TIM_PWM_Start_DMA+0x2c>
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d06:	b2db      	uxtb	r3, r3
 8007d08:	2b02      	cmp	r3, #2
 8007d0a:	bf0c      	ite	eq
 8007d0c:	2301      	moveq	r3, #1
 8007d0e:	2300      	movne	r3, #0
 8007d10:	b2db      	uxtb	r3, r3
 8007d12:	e03c      	b.n	8007d8e <HAL_TIM_PWM_Start_DMA+0xa6>
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	2b04      	cmp	r3, #4
 8007d18:	d109      	bne.n	8007d2e <HAL_TIM_PWM_Start_DMA+0x46>
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007d20:	b2db      	uxtb	r3, r3
 8007d22:	2b02      	cmp	r3, #2
 8007d24:	bf0c      	ite	eq
 8007d26:	2301      	moveq	r3, #1
 8007d28:	2300      	movne	r3, #0
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	e02f      	b.n	8007d8e <HAL_TIM_PWM_Start_DMA+0xa6>
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	2b08      	cmp	r3, #8
 8007d32:	d109      	bne.n	8007d48 <HAL_TIM_PWM_Start_DMA+0x60>
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007d3a:	b2db      	uxtb	r3, r3
 8007d3c:	2b02      	cmp	r3, #2
 8007d3e:	bf0c      	ite	eq
 8007d40:	2301      	moveq	r3, #1
 8007d42:	2300      	movne	r3, #0
 8007d44:	b2db      	uxtb	r3, r3
 8007d46:	e022      	b.n	8007d8e <HAL_TIM_PWM_Start_DMA+0xa6>
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	2b0c      	cmp	r3, #12
 8007d4c:	d109      	bne.n	8007d62 <HAL_TIM_PWM_Start_DMA+0x7a>
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d54:	b2db      	uxtb	r3, r3
 8007d56:	2b02      	cmp	r3, #2
 8007d58:	bf0c      	ite	eq
 8007d5a:	2301      	moveq	r3, #1
 8007d5c:	2300      	movne	r3, #0
 8007d5e:	b2db      	uxtb	r3, r3
 8007d60:	e015      	b.n	8007d8e <HAL_TIM_PWM_Start_DMA+0xa6>
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	2b10      	cmp	r3, #16
 8007d66:	d109      	bne.n	8007d7c <HAL_TIM_PWM_Start_DMA+0x94>
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007d6e:	b2db      	uxtb	r3, r3
 8007d70:	2b02      	cmp	r3, #2
 8007d72:	bf0c      	ite	eq
 8007d74:	2301      	moveq	r3, #1
 8007d76:	2300      	movne	r3, #0
 8007d78:	b2db      	uxtb	r3, r3
 8007d7a:	e008      	b.n	8007d8e <HAL_TIM_PWM_Start_DMA+0xa6>
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007d82:	b2db      	uxtb	r3, r3
 8007d84:	2b02      	cmp	r3, #2
 8007d86:	bf0c      	ite	eq
 8007d88:	2301      	moveq	r3, #1
 8007d8a:	2300      	movne	r3, #0
 8007d8c:	b2db      	uxtb	r3, r3
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d001      	beq.n	8007d96 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8007d92:	2302      	movs	r3, #2
 8007d94:	e1ab      	b.n	80080ee <HAL_TIM_PWM_Start_DMA+0x406>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d109      	bne.n	8007db0 <HAL_TIM_PWM_Start_DMA+0xc8>
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007da2:	b2db      	uxtb	r3, r3
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	bf0c      	ite	eq
 8007da8:	2301      	moveq	r3, #1
 8007daa:	2300      	movne	r3, #0
 8007dac:	b2db      	uxtb	r3, r3
 8007dae:	e03c      	b.n	8007e2a <HAL_TIM_PWM_Start_DMA+0x142>
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	2b04      	cmp	r3, #4
 8007db4:	d109      	bne.n	8007dca <HAL_TIM_PWM_Start_DMA+0xe2>
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007dbc:	b2db      	uxtb	r3, r3
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	bf0c      	ite	eq
 8007dc2:	2301      	moveq	r3, #1
 8007dc4:	2300      	movne	r3, #0
 8007dc6:	b2db      	uxtb	r3, r3
 8007dc8:	e02f      	b.n	8007e2a <HAL_TIM_PWM_Start_DMA+0x142>
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	2b08      	cmp	r3, #8
 8007dce:	d109      	bne.n	8007de4 <HAL_TIM_PWM_Start_DMA+0xfc>
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007dd6:	b2db      	uxtb	r3, r3
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	bf0c      	ite	eq
 8007ddc:	2301      	moveq	r3, #1
 8007dde:	2300      	movne	r3, #0
 8007de0:	b2db      	uxtb	r3, r3
 8007de2:	e022      	b.n	8007e2a <HAL_TIM_PWM_Start_DMA+0x142>
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	2b0c      	cmp	r3, #12
 8007de8:	d109      	bne.n	8007dfe <HAL_TIM_PWM_Start_DMA+0x116>
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007df0:	b2db      	uxtb	r3, r3
 8007df2:	2b01      	cmp	r3, #1
 8007df4:	bf0c      	ite	eq
 8007df6:	2301      	moveq	r3, #1
 8007df8:	2300      	movne	r3, #0
 8007dfa:	b2db      	uxtb	r3, r3
 8007dfc:	e015      	b.n	8007e2a <HAL_TIM_PWM_Start_DMA+0x142>
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	2b10      	cmp	r3, #16
 8007e02:	d109      	bne.n	8007e18 <HAL_TIM_PWM_Start_DMA+0x130>
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	bf0c      	ite	eq
 8007e10:	2301      	moveq	r3, #1
 8007e12:	2300      	movne	r3, #0
 8007e14:	b2db      	uxtb	r3, r3
 8007e16:	e008      	b.n	8007e2a <HAL_TIM_PWM_Start_DMA+0x142>
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007e1e:	b2db      	uxtb	r3, r3
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	bf0c      	ite	eq
 8007e24:	2301      	moveq	r3, #1
 8007e26:	2300      	movne	r3, #0
 8007e28:	b2db      	uxtb	r3, r3
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d034      	beq.n	8007e98 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) && (Length > 0U))
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d104      	bne.n	8007e3e <HAL_TIM_PWM_Start_DMA+0x156>
 8007e34:	887b      	ldrh	r3, [r7, #2]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d001      	beq.n	8007e3e <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	e157      	b.n	80080ee <HAL_TIM_PWM_Start_DMA+0x406>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d104      	bne.n	8007e4e <HAL_TIM_PWM_Start_DMA+0x166>
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2202      	movs	r2, #2
 8007e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e4c:	e026      	b.n	8007e9c <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	2b04      	cmp	r3, #4
 8007e52:	d104      	bne.n	8007e5e <HAL_TIM_PWM_Start_DMA+0x176>
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2202      	movs	r2, #2
 8007e58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e5c:	e01e      	b.n	8007e9c <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	2b08      	cmp	r3, #8
 8007e62:	d104      	bne.n	8007e6e <HAL_TIM_PWM_Start_DMA+0x186>
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2202      	movs	r2, #2
 8007e68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e6c:	e016      	b.n	8007e9c <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	2b0c      	cmp	r3, #12
 8007e72:	d104      	bne.n	8007e7e <HAL_TIM_PWM_Start_DMA+0x196>
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	2202      	movs	r2, #2
 8007e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007e7c:	e00e      	b.n	8007e9c <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	2b10      	cmp	r3, #16
 8007e82:	d104      	bne.n	8007e8e <HAL_TIM_PWM_Start_DMA+0x1a6>
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	2202      	movs	r2, #2
 8007e88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007e8c:	e006      	b.n	8007e9c <HAL_TIM_PWM_Start_DMA+0x1b4>
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	2202      	movs	r2, #2
 8007e92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007e96:	e001      	b.n	8007e9c <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8007e98:	2301      	movs	r3, #1
 8007e9a:	e128      	b.n	80080ee <HAL_TIM_PWM_Start_DMA+0x406>
  }

  switch (Channel)
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	2b0c      	cmp	r3, #12
 8007ea0:	f200 80ae 	bhi.w	8008000 <HAL_TIM_PWM_Start_DMA+0x318>
 8007ea4:	a201      	add	r2, pc, #4	; (adr r2, 8007eac <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8007ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eaa:	bf00      	nop
 8007eac:	08007ee1 	.word	0x08007ee1
 8007eb0:	08008001 	.word	0x08008001
 8007eb4:	08008001 	.word	0x08008001
 8007eb8:	08008001 	.word	0x08008001
 8007ebc:	08007f29 	.word	0x08007f29
 8007ec0:	08008001 	.word	0x08008001
 8007ec4:	08008001 	.word	0x08008001
 8007ec8:	08008001 	.word	0x08008001
 8007ecc:	08007f71 	.word	0x08007f71
 8007ed0:	08008001 	.word	0x08008001
 8007ed4:	08008001 	.word	0x08008001
 8007ed8:	08008001 	.word	0x08008001
 8007edc:	08007fb9 	.word	0x08007fb9
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee4:	4a84      	ldr	r2, [pc, #528]	; (80080f8 <HAL_TIM_PWM_Start_DMA+0x410>)
 8007ee6:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eec:	4a83      	ldr	r2, [pc, #524]	; (80080fc <HAL_TIM_PWM_Start_DMA+0x414>)
 8007eee:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef4:	4a82      	ldr	r2, [pc, #520]	; (8008100 <HAL_TIM_PWM_Start_DMA+0x418>)
 8007ef6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8007efc:	6879      	ldr	r1, [r7, #4]
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	3334      	adds	r3, #52	; 0x34
 8007f04:	461a      	mov	r2, r3
 8007f06:	887b      	ldrh	r3, [r7, #2]
 8007f08:	f7fd fa56 	bl	80053b8 <HAL_DMA_Start_IT>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d001      	beq.n	8007f16 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007f12:	2301      	movs	r3, #1
 8007f14:	e0eb      	b.n	80080ee <HAL_TIM_PWM_Start_DMA+0x406>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	68da      	ldr	r2, [r3, #12]
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f24:	60da      	str	r2, [r3, #12]
      break;
 8007f26:	e06e      	b.n	8008006 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f2c:	4a72      	ldr	r2, [pc, #456]	; (80080f8 <HAL_TIM_PWM_Start_DMA+0x410>)
 8007f2e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f34:	4a71      	ldr	r2, [pc, #452]	; (80080fc <HAL_TIM_PWM_Start_DMA+0x414>)
 8007f36:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f3c:	4a70      	ldr	r2, [pc, #448]	; (8008100 <HAL_TIM_PWM_Start_DMA+0x418>)
 8007f3e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8007f44:	6879      	ldr	r1, [r7, #4]
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	3338      	adds	r3, #56	; 0x38
 8007f4c:	461a      	mov	r2, r3
 8007f4e:	887b      	ldrh	r3, [r7, #2]
 8007f50:	f7fd fa32 	bl	80053b8 <HAL_DMA_Start_IT>
 8007f54:	4603      	mov	r3, r0
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d001      	beq.n	8007f5e <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	e0c7      	b.n	80080ee <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	68da      	ldr	r2, [r3, #12]
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007f6c:	60da      	str	r2, [r3, #12]
      break;
 8007f6e:	e04a      	b.n	8008006 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f74:	4a60      	ldr	r2, [pc, #384]	; (80080f8 <HAL_TIM_PWM_Start_DMA+0x410>)
 8007f76:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f7c:	4a5f      	ldr	r2, [pc, #380]	; (80080fc <HAL_TIM_PWM_Start_DMA+0x414>)
 8007f7e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f84:	4a5e      	ldr	r2, [pc, #376]	; (8008100 <HAL_TIM_PWM_Start_DMA+0x418>)
 8007f86:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007f8c:	6879      	ldr	r1, [r7, #4]
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	333c      	adds	r3, #60	; 0x3c
 8007f94:	461a      	mov	r2, r3
 8007f96:	887b      	ldrh	r3, [r7, #2]
 8007f98:	f7fd fa0e 	bl	80053b8 <HAL_DMA_Start_IT>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d001      	beq.n	8007fa6 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	e0a3      	b.n	80080ee <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	68da      	ldr	r2, [r3, #12]
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007fb4:	60da      	str	r2, [r3, #12]
      break;
 8007fb6:	e026      	b.n	8008006 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fbc:	4a4e      	ldr	r2, [pc, #312]	; (80080f8 <HAL_TIM_PWM_Start_DMA+0x410>)
 8007fbe:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fc4:	4a4d      	ldr	r2, [pc, #308]	; (80080fc <HAL_TIM_PWM_Start_DMA+0x414>)
 8007fc6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fcc:	4a4c      	ldr	r2, [pc, #304]	; (8008100 <HAL_TIM_PWM_Start_DMA+0x418>)
 8007fce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007fd4:	6879      	ldr	r1, [r7, #4]
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	3340      	adds	r3, #64	; 0x40
 8007fdc:	461a      	mov	r2, r3
 8007fde:	887b      	ldrh	r3, [r7, #2]
 8007fe0:	f7fd f9ea 	bl	80053b8 <HAL_DMA_Start_IT>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d001      	beq.n	8007fee <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007fea:	2301      	movs	r3, #1
 8007fec:	e07f      	b.n	80080ee <HAL_TIM_PWM_Start_DMA+0x406>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	68da      	ldr	r2, [r3, #12]
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007ffc:	60da      	str	r2, [r3, #12]
      break;
 8007ffe:	e002      	b.n	8008006 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8008000:	2301      	movs	r3, #1
 8008002:	75fb      	strb	r3, [r7, #23]
      break;
 8008004:	bf00      	nop
  }

  if (status == HAL_OK)
 8008006:	7dfb      	ldrb	r3, [r7, #23]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d16f      	bne.n	80080ec <HAL_TIM_PWM_Start_DMA+0x404>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	2201      	movs	r2, #1
 8008012:	68b9      	ldr	r1, [r7, #8]
 8008014:	4618      	mov	r0, r3
 8008016:	f001 fd5d 	bl	8009ad4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a39      	ldr	r2, [pc, #228]	; (8008104 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d013      	beq.n	800804c <HAL_TIM_PWM_Start_DMA+0x364>
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a37      	ldr	r2, [pc, #220]	; (8008108 <HAL_TIM_PWM_Start_DMA+0x420>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d00e      	beq.n	800804c <HAL_TIM_PWM_Start_DMA+0x364>
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4a36      	ldr	r2, [pc, #216]	; (800810c <HAL_TIM_PWM_Start_DMA+0x424>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d009      	beq.n	800804c <HAL_TIM_PWM_Start_DMA+0x364>
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a34      	ldr	r2, [pc, #208]	; (8008110 <HAL_TIM_PWM_Start_DMA+0x428>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d004      	beq.n	800804c <HAL_TIM_PWM_Start_DMA+0x364>
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a33      	ldr	r2, [pc, #204]	; (8008114 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d101      	bne.n	8008050 <HAL_TIM_PWM_Start_DMA+0x368>
 800804c:	2301      	movs	r3, #1
 800804e:	e000      	b.n	8008052 <HAL_TIM_PWM_Start_DMA+0x36a>
 8008050:	2300      	movs	r3, #0
 8008052:	2b00      	cmp	r3, #0
 8008054:	d007      	beq.n	8008066 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008064:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4a26      	ldr	r2, [pc, #152]	; (8008104 <HAL_TIM_PWM_Start_DMA+0x41c>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d01d      	beq.n	80080ac <HAL_TIM_PWM_Start_DMA+0x3c4>
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008078:	d018      	beq.n	80080ac <HAL_TIM_PWM_Start_DMA+0x3c4>
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	4a26      	ldr	r2, [pc, #152]	; (8008118 <HAL_TIM_PWM_Start_DMA+0x430>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d013      	beq.n	80080ac <HAL_TIM_PWM_Start_DMA+0x3c4>
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4a24      	ldr	r2, [pc, #144]	; (800811c <HAL_TIM_PWM_Start_DMA+0x434>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d00e      	beq.n	80080ac <HAL_TIM_PWM_Start_DMA+0x3c4>
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4a23      	ldr	r2, [pc, #140]	; (8008120 <HAL_TIM_PWM_Start_DMA+0x438>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d009      	beq.n	80080ac <HAL_TIM_PWM_Start_DMA+0x3c4>
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a1a      	ldr	r2, [pc, #104]	; (8008108 <HAL_TIM_PWM_Start_DMA+0x420>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d004      	beq.n	80080ac <HAL_TIM_PWM_Start_DMA+0x3c4>
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4a19      	ldr	r2, [pc, #100]	; (800810c <HAL_TIM_PWM_Start_DMA+0x424>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d115      	bne.n	80080d8 <HAL_TIM_PWM_Start_DMA+0x3f0>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	689a      	ldr	r2, [r3, #8]
 80080b2:	4b1c      	ldr	r3, [pc, #112]	; (8008124 <HAL_TIM_PWM_Start_DMA+0x43c>)
 80080b4:	4013      	ands	r3, r2
 80080b6:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	2b06      	cmp	r3, #6
 80080bc:	d015      	beq.n	80080ea <HAL_TIM_PWM_Start_DMA+0x402>
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080c4:	d011      	beq.n	80080ea <HAL_TIM_PWM_Start_DMA+0x402>
      {
        __HAL_TIM_ENABLE(htim);
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	681a      	ldr	r2, [r3, #0]
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f042 0201 	orr.w	r2, r2, #1
 80080d4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080d6:	e008      	b.n	80080ea <HAL_TIM_PWM_Start_DMA+0x402>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	681a      	ldr	r2, [r3, #0]
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f042 0201 	orr.w	r2, r2, #1
 80080e6:	601a      	str	r2, [r3, #0]
 80080e8:	e000      	b.n	80080ec <HAL_TIM_PWM_Start_DMA+0x404>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080ea:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80080ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3718      	adds	r7, #24
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}
 80080f6:	bf00      	nop
 80080f8:	08008e41 	.word	0x08008e41
 80080fc:	08008ee9 	.word	0x08008ee9
 8008100:	08008daf 	.word	0x08008daf
 8008104:	40012c00 	.word	0x40012c00
 8008108:	40013400 	.word	0x40013400
 800810c:	40014000 	.word	0x40014000
 8008110:	40014400 	.word	0x40014400
 8008114:	40014800 	.word	0x40014800
 8008118:	40000400 	.word	0x40000400
 800811c:	40000800 	.word	0x40000800
 8008120:	40000c00 	.word	0x40000c00
 8008124:	00010007 	.word	0x00010007

08008128 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b082      	sub	sp, #8
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d101      	bne.n	800813a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008136:	2301      	movs	r3, #1
 8008138:	e049      	b.n	80081ce <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008140:	b2db      	uxtb	r3, r3
 8008142:	2b00      	cmp	r3, #0
 8008144:	d106      	bne.n	8008154 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2200      	movs	r2, #0
 800814a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f000 f841 	bl	80081d6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2202      	movs	r2, #2
 8008158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681a      	ldr	r2, [r3, #0]
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	3304      	adds	r3, #4
 8008164:	4619      	mov	r1, r3
 8008166:	4610      	mov	r0, r2
 8008168:	f000 fef2 	bl	8008f50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2201      	movs	r2, #1
 8008170:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2201      	movs	r2, #1
 8008178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2201      	movs	r2, #1
 8008180:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2201      	movs	r2, #1
 8008188:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2201      	movs	r2, #1
 8008190:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2201      	movs	r2, #1
 8008198:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2201      	movs	r2, #1
 80081a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2201      	movs	r2, #1
 80081a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2201      	movs	r2, #1
 80081b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2201      	movs	r2, #1
 80081b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2201      	movs	r2, #1
 80081c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2201      	movs	r2, #1
 80081c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80081cc:	2300      	movs	r3, #0
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3708      	adds	r7, #8
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}

080081d6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80081d6:	b480      	push	{r7}
 80081d8:	b083      	sub	sp, #12
 80081da:	af00      	add	r7, sp, #0
 80081dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80081de:	bf00      	nop
 80081e0:	370c      	adds	r7, #12
 80081e2:	46bd      	mov	sp, r7
 80081e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e8:	4770      	bx	lr
	...

080081ec <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b084      	sub	sp, #16
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80081f6:	2300      	movs	r3, #0
 80081f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d104      	bne.n	800820a <HAL_TIM_IC_Start_IT+0x1e>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008206:	b2db      	uxtb	r3, r3
 8008208:	e023      	b.n	8008252 <HAL_TIM_IC_Start_IT+0x66>
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	2b04      	cmp	r3, #4
 800820e:	d104      	bne.n	800821a <HAL_TIM_IC_Start_IT+0x2e>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008216:	b2db      	uxtb	r3, r3
 8008218:	e01b      	b.n	8008252 <HAL_TIM_IC_Start_IT+0x66>
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	2b08      	cmp	r3, #8
 800821e:	d104      	bne.n	800822a <HAL_TIM_IC_Start_IT+0x3e>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008226:	b2db      	uxtb	r3, r3
 8008228:	e013      	b.n	8008252 <HAL_TIM_IC_Start_IT+0x66>
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	2b0c      	cmp	r3, #12
 800822e:	d104      	bne.n	800823a <HAL_TIM_IC_Start_IT+0x4e>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008236:	b2db      	uxtb	r3, r3
 8008238:	e00b      	b.n	8008252 <HAL_TIM_IC_Start_IT+0x66>
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	2b10      	cmp	r3, #16
 800823e:	d104      	bne.n	800824a <HAL_TIM_IC_Start_IT+0x5e>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008246:	b2db      	uxtb	r3, r3
 8008248:	e003      	b.n	8008252 <HAL_TIM_IC_Start_IT+0x66>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008250:	b2db      	uxtb	r3, r3
 8008252:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d104      	bne.n	8008264 <HAL_TIM_IC_Start_IT+0x78>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008260:	b2db      	uxtb	r3, r3
 8008262:	e013      	b.n	800828c <HAL_TIM_IC_Start_IT+0xa0>
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	2b04      	cmp	r3, #4
 8008268:	d104      	bne.n	8008274 <HAL_TIM_IC_Start_IT+0x88>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008270:	b2db      	uxtb	r3, r3
 8008272:	e00b      	b.n	800828c <HAL_TIM_IC_Start_IT+0xa0>
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	2b08      	cmp	r3, #8
 8008278:	d104      	bne.n	8008284 <HAL_TIM_IC_Start_IT+0x98>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008280:	b2db      	uxtb	r3, r3
 8008282:	e003      	b.n	800828c <HAL_TIM_IC_Start_IT+0xa0>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800828a:	b2db      	uxtb	r3, r3
 800828c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800828e:	7bbb      	ldrb	r3, [r7, #14]
 8008290:	2b01      	cmp	r3, #1
 8008292:	d102      	bne.n	800829a <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8008294:	7b7b      	ldrb	r3, [r7, #13]
 8008296:	2b01      	cmp	r3, #1
 8008298:	d001      	beq.n	800829e <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800829a:	2301      	movs	r3, #1
 800829c:	e0dd      	b.n	800845a <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d104      	bne.n	80082ae <HAL_TIM_IC_Start_IT+0xc2>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2202      	movs	r2, #2
 80082a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80082ac:	e023      	b.n	80082f6 <HAL_TIM_IC_Start_IT+0x10a>
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	2b04      	cmp	r3, #4
 80082b2:	d104      	bne.n	80082be <HAL_TIM_IC_Start_IT+0xd2>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2202      	movs	r2, #2
 80082b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80082bc:	e01b      	b.n	80082f6 <HAL_TIM_IC_Start_IT+0x10a>
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	2b08      	cmp	r3, #8
 80082c2:	d104      	bne.n	80082ce <HAL_TIM_IC_Start_IT+0xe2>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2202      	movs	r2, #2
 80082c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80082cc:	e013      	b.n	80082f6 <HAL_TIM_IC_Start_IT+0x10a>
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	2b0c      	cmp	r3, #12
 80082d2:	d104      	bne.n	80082de <HAL_TIM_IC_Start_IT+0xf2>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2202      	movs	r2, #2
 80082d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80082dc:	e00b      	b.n	80082f6 <HAL_TIM_IC_Start_IT+0x10a>
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	2b10      	cmp	r3, #16
 80082e2:	d104      	bne.n	80082ee <HAL_TIM_IC_Start_IT+0x102>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2202      	movs	r2, #2
 80082e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80082ec:	e003      	b.n	80082f6 <HAL_TIM_IC_Start_IT+0x10a>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2202      	movs	r2, #2
 80082f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d104      	bne.n	8008306 <HAL_TIM_IC_Start_IT+0x11a>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2202      	movs	r2, #2
 8008300:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008304:	e013      	b.n	800832e <HAL_TIM_IC_Start_IT+0x142>
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	2b04      	cmp	r3, #4
 800830a:	d104      	bne.n	8008316 <HAL_TIM_IC_Start_IT+0x12a>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2202      	movs	r2, #2
 8008310:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008314:	e00b      	b.n	800832e <HAL_TIM_IC_Start_IT+0x142>
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	2b08      	cmp	r3, #8
 800831a:	d104      	bne.n	8008326 <HAL_TIM_IC_Start_IT+0x13a>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2202      	movs	r2, #2
 8008320:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008324:	e003      	b.n	800832e <HAL_TIM_IC_Start_IT+0x142>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2202      	movs	r2, #2
 800832a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	2b0c      	cmp	r3, #12
 8008332:	d841      	bhi.n	80083b8 <HAL_TIM_IC_Start_IT+0x1cc>
 8008334:	a201      	add	r2, pc, #4	; (adr r2, 800833c <HAL_TIM_IC_Start_IT+0x150>)
 8008336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800833a:	bf00      	nop
 800833c:	08008371 	.word	0x08008371
 8008340:	080083b9 	.word	0x080083b9
 8008344:	080083b9 	.word	0x080083b9
 8008348:	080083b9 	.word	0x080083b9
 800834c:	08008383 	.word	0x08008383
 8008350:	080083b9 	.word	0x080083b9
 8008354:	080083b9 	.word	0x080083b9
 8008358:	080083b9 	.word	0x080083b9
 800835c:	08008395 	.word	0x08008395
 8008360:	080083b9 	.word	0x080083b9
 8008364:	080083b9 	.word	0x080083b9
 8008368:	080083b9 	.word	0x080083b9
 800836c:	080083a7 	.word	0x080083a7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	68da      	ldr	r2, [r3, #12]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f042 0202 	orr.w	r2, r2, #2
 800837e:	60da      	str	r2, [r3, #12]
      break;
 8008380:	e01d      	b.n	80083be <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	68da      	ldr	r2, [r3, #12]
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f042 0204 	orr.w	r2, r2, #4
 8008390:	60da      	str	r2, [r3, #12]
      break;
 8008392:	e014      	b.n	80083be <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	68da      	ldr	r2, [r3, #12]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f042 0208 	orr.w	r2, r2, #8
 80083a2:	60da      	str	r2, [r3, #12]
      break;
 80083a4:	e00b      	b.n	80083be <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	68da      	ldr	r2, [r3, #12]
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f042 0210 	orr.w	r2, r2, #16
 80083b4:	60da      	str	r2, [r3, #12]
      break;
 80083b6:	e002      	b.n	80083be <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80083b8:	2301      	movs	r3, #1
 80083ba:	73fb      	strb	r3, [r7, #15]
      break;
 80083bc:	bf00      	nop
  }

  if (status == HAL_OK)
 80083be:	7bfb      	ldrb	r3, [r7, #15]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d149      	bne.n	8008458 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	2201      	movs	r2, #1
 80083ca:	6839      	ldr	r1, [r7, #0]
 80083cc:	4618      	mov	r0, r3
 80083ce:	f001 fb81 	bl	8009ad4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a23      	ldr	r2, [pc, #140]	; (8008464 <HAL_TIM_IC_Start_IT+0x278>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d01d      	beq.n	8008418 <HAL_TIM_IC_Start_IT+0x22c>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083e4:	d018      	beq.n	8008418 <HAL_TIM_IC_Start_IT+0x22c>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a1f      	ldr	r2, [pc, #124]	; (8008468 <HAL_TIM_IC_Start_IT+0x27c>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d013      	beq.n	8008418 <HAL_TIM_IC_Start_IT+0x22c>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a1d      	ldr	r2, [pc, #116]	; (800846c <HAL_TIM_IC_Start_IT+0x280>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d00e      	beq.n	8008418 <HAL_TIM_IC_Start_IT+0x22c>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a1c      	ldr	r2, [pc, #112]	; (8008470 <HAL_TIM_IC_Start_IT+0x284>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d009      	beq.n	8008418 <HAL_TIM_IC_Start_IT+0x22c>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a1a      	ldr	r2, [pc, #104]	; (8008474 <HAL_TIM_IC_Start_IT+0x288>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d004      	beq.n	8008418 <HAL_TIM_IC_Start_IT+0x22c>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a19      	ldr	r2, [pc, #100]	; (8008478 <HAL_TIM_IC_Start_IT+0x28c>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d115      	bne.n	8008444 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	689a      	ldr	r2, [r3, #8]
 800841e:	4b17      	ldr	r3, [pc, #92]	; (800847c <HAL_TIM_IC_Start_IT+0x290>)
 8008420:	4013      	ands	r3, r2
 8008422:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	2b06      	cmp	r3, #6
 8008428:	d015      	beq.n	8008456 <HAL_TIM_IC_Start_IT+0x26a>
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008430:	d011      	beq.n	8008456 <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	681a      	ldr	r2, [r3, #0]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f042 0201 	orr.w	r2, r2, #1
 8008440:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008442:	e008      	b.n	8008456 <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	681a      	ldr	r2, [r3, #0]
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f042 0201 	orr.w	r2, r2, #1
 8008452:	601a      	str	r2, [r3, #0]
 8008454:	e000      	b.n	8008458 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008456:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8008458:	7bfb      	ldrb	r3, [r7, #15]
}
 800845a:	4618      	mov	r0, r3
 800845c:	3710      	adds	r7, #16
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}
 8008462:	bf00      	nop
 8008464:	40012c00 	.word	0x40012c00
 8008468:	40000400 	.word	0x40000400
 800846c:	40000800 	.word	0x40000800
 8008470:	40000c00 	.word	0x40000c00
 8008474:	40013400 	.word	0x40013400
 8008478:	40014000 	.word	0x40014000
 800847c:	00010007 	.word	0x00010007

08008480 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b082      	sub	sp, #8
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	691b      	ldr	r3, [r3, #16]
 800848e:	f003 0302 	and.w	r3, r3, #2
 8008492:	2b02      	cmp	r3, #2
 8008494:	d122      	bne.n	80084dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	68db      	ldr	r3, [r3, #12]
 800849c:	f003 0302 	and.w	r3, r3, #2
 80084a0:	2b02      	cmp	r3, #2
 80084a2:	d11b      	bne.n	80084dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f06f 0202 	mvn.w	r2, #2
 80084ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2201      	movs	r2, #1
 80084b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	699b      	ldr	r3, [r3, #24]
 80084ba:	f003 0303 	and.w	r3, r3, #3
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d003      	beq.n	80084ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f7f8 fff6 	bl	80014b4 <HAL_TIM_IC_CaptureCallback>
 80084c8:	e005      	b.n	80084d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f000 fbf8 	bl	8008cc0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f000 fbff 	bl	8008cd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2200      	movs	r2, #0
 80084da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	691b      	ldr	r3, [r3, #16]
 80084e2:	f003 0304 	and.w	r3, r3, #4
 80084e6:	2b04      	cmp	r3, #4
 80084e8:	d122      	bne.n	8008530 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	68db      	ldr	r3, [r3, #12]
 80084f0:	f003 0304 	and.w	r3, r3, #4
 80084f4:	2b04      	cmp	r3, #4
 80084f6:	d11b      	bne.n	8008530 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f06f 0204 	mvn.w	r2, #4
 8008500:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2202      	movs	r2, #2
 8008506:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	699b      	ldr	r3, [r3, #24]
 800850e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008512:	2b00      	cmp	r3, #0
 8008514:	d003      	beq.n	800851e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f7f8 ffcc 	bl	80014b4 <HAL_TIM_IC_CaptureCallback>
 800851c:	e005      	b.n	800852a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f000 fbce 	bl	8008cc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f000 fbd5 	bl	8008cd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2200      	movs	r2, #0
 800852e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	691b      	ldr	r3, [r3, #16]
 8008536:	f003 0308 	and.w	r3, r3, #8
 800853a:	2b08      	cmp	r3, #8
 800853c:	d122      	bne.n	8008584 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	68db      	ldr	r3, [r3, #12]
 8008544:	f003 0308 	and.w	r3, r3, #8
 8008548:	2b08      	cmp	r3, #8
 800854a:	d11b      	bne.n	8008584 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f06f 0208 	mvn.w	r2, #8
 8008554:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2204      	movs	r2, #4
 800855a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	69db      	ldr	r3, [r3, #28]
 8008562:	f003 0303 	and.w	r3, r3, #3
 8008566:	2b00      	cmp	r3, #0
 8008568:	d003      	beq.n	8008572 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f7f8 ffa2 	bl	80014b4 <HAL_TIM_IC_CaptureCallback>
 8008570:	e005      	b.n	800857e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f000 fba4 	bl	8008cc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f000 fbab 	bl	8008cd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2200      	movs	r2, #0
 8008582:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	691b      	ldr	r3, [r3, #16]
 800858a:	f003 0310 	and.w	r3, r3, #16
 800858e:	2b10      	cmp	r3, #16
 8008590:	d122      	bne.n	80085d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	68db      	ldr	r3, [r3, #12]
 8008598:	f003 0310 	and.w	r3, r3, #16
 800859c:	2b10      	cmp	r3, #16
 800859e:	d11b      	bne.n	80085d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f06f 0210 	mvn.w	r2, #16
 80085a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2208      	movs	r2, #8
 80085ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	69db      	ldr	r3, [r3, #28]
 80085b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d003      	beq.n	80085c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f7f8 ff78 	bl	80014b4 <HAL_TIM_IC_CaptureCallback>
 80085c4:	e005      	b.n	80085d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f000 fb7a 	bl	8008cc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f000 fb81 	bl	8008cd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2200      	movs	r2, #0
 80085d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	691b      	ldr	r3, [r3, #16]
 80085de:	f003 0301 	and.w	r3, r3, #1
 80085e2:	2b01      	cmp	r3, #1
 80085e4:	d10e      	bne.n	8008604 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	68db      	ldr	r3, [r3, #12]
 80085ec:	f003 0301 	and.w	r3, r3, #1
 80085f0:	2b01      	cmp	r3, #1
 80085f2:	d107      	bne.n	8008604 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f06f 0201 	mvn.w	r2, #1
 80085fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f7f8 ff72 	bl	80014e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	691b      	ldr	r3, [r3, #16]
 800860a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800860e:	2b80      	cmp	r3, #128	; 0x80
 8008610:	d10e      	bne.n	8008630 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	68db      	ldr	r3, [r3, #12]
 8008618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800861c:	2b80      	cmp	r3, #128	; 0x80
 800861e:	d107      	bne.n	8008630 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f001 fb0a 	bl	8009c44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	691b      	ldr	r3, [r3, #16]
 8008636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800863a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800863e:	d10e      	bne.n	800865e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	68db      	ldr	r3, [r3, #12]
 8008646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800864a:	2b80      	cmp	r3, #128	; 0x80
 800864c:	d107      	bne.n	800865e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008656:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f001 fafd 	bl	8009c58 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	691b      	ldr	r3, [r3, #16]
 8008664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008668:	2b40      	cmp	r3, #64	; 0x40
 800866a:	d10e      	bne.n	800868a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	68db      	ldr	r3, [r3, #12]
 8008672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008676:	2b40      	cmp	r3, #64	; 0x40
 8008678:	d107      	bne.n	800868a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008682:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f000 fb39 	bl	8008cfc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	691b      	ldr	r3, [r3, #16]
 8008690:	f003 0320 	and.w	r3, r3, #32
 8008694:	2b20      	cmp	r3, #32
 8008696:	d10e      	bne.n	80086b6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	68db      	ldr	r3, [r3, #12]
 800869e:	f003 0320 	and.w	r3, r3, #32
 80086a2:	2b20      	cmp	r3, #32
 80086a4:	d107      	bne.n	80086b6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f06f 0220 	mvn.w	r2, #32
 80086ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f001 fabd 	bl	8009c30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80086b6:	bf00      	nop
 80086b8:	3708      	adds	r7, #8
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}

080086be <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80086be:	b580      	push	{r7, lr}
 80086c0:	b086      	sub	sp, #24
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	60f8      	str	r0, [r7, #12]
 80086c6:	60b9      	str	r1, [r7, #8]
 80086c8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80086ca:	2300      	movs	r3, #0
 80086cc:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	d101      	bne.n	80086dc <HAL_TIM_IC_ConfigChannel+0x1e>
 80086d8:	2302      	movs	r3, #2
 80086da:	e088      	b.n	80087ee <HAL_TIM_IC_ConfigChannel+0x130>
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	2201      	movs	r2, #1
 80086e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d11b      	bne.n	8008722 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	6818      	ldr	r0, [r3, #0]
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	6819      	ldr	r1, [r3, #0]
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	685a      	ldr	r2, [r3, #4]
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	68db      	ldr	r3, [r3, #12]
 80086fa:	f001 f82d 	bl	8009758 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	699a      	ldr	r2, [r3, #24]
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f022 020c 	bic.w	r2, r2, #12
 800870c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	6999      	ldr	r1, [r3, #24]
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	689a      	ldr	r2, [r3, #8]
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	430a      	orrs	r2, r1
 800871e:	619a      	str	r2, [r3, #24]
 8008720:	e060      	b.n	80087e4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2b04      	cmp	r3, #4
 8008726:	d11c      	bne.n	8008762 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	6818      	ldr	r0, [r3, #0]
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	6819      	ldr	r1, [r3, #0]
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	685a      	ldr	r2, [r3, #4]
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	68db      	ldr	r3, [r3, #12]
 8008738:	f001 f8ab 	bl	8009892 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	699a      	ldr	r2, [r3, #24]
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800874a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	6999      	ldr	r1, [r3, #24]
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	689b      	ldr	r3, [r3, #8]
 8008756:	021a      	lsls	r2, r3, #8
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	430a      	orrs	r2, r1
 800875e:	619a      	str	r2, [r3, #24]
 8008760:	e040      	b.n	80087e4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2b08      	cmp	r3, #8
 8008766:	d11b      	bne.n	80087a0 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	6818      	ldr	r0, [r3, #0]
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	6819      	ldr	r1, [r3, #0]
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	685a      	ldr	r2, [r3, #4]
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	68db      	ldr	r3, [r3, #12]
 8008778:	f001 f8f8 	bl	800996c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	69da      	ldr	r2, [r3, #28]
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f022 020c 	bic.w	r2, r2, #12
 800878a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	69d9      	ldr	r1, [r3, #28]
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	689a      	ldr	r2, [r3, #8]
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	430a      	orrs	r2, r1
 800879c:	61da      	str	r2, [r3, #28]
 800879e:	e021      	b.n	80087e4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2b0c      	cmp	r3, #12
 80087a4:	d11c      	bne.n	80087e0 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	6818      	ldr	r0, [r3, #0]
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	6819      	ldr	r1, [r3, #0]
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	685a      	ldr	r2, [r3, #4]
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	68db      	ldr	r3, [r3, #12]
 80087b6:	f001 f915 	bl	80099e4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	69da      	ldr	r2, [r3, #28]
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80087c8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	69d9      	ldr	r1, [r3, #28]
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	689b      	ldr	r3, [r3, #8]
 80087d4:	021a      	lsls	r2, r3, #8
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	430a      	orrs	r2, r1
 80087dc:	61da      	str	r2, [r3, #28]
 80087de:	e001      	b.n	80087e4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80087e0:	2301      	movs	r3, #1
 80087e2:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	2200      	movs	r2, #0
 80087e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80087ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	3718      	adds	r7, #24
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}
	...

080087f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b086      	sub	sp, #24
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	60f8      	str	r0, [r7, #12]
 8008800:	60b9      	str	r1, [r7, #8]
 8008802:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008804:	2300      	movs	r3, #0
 8008806:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800880e:	2b01      	cmp	r3, #1
 8008810:	d101      	bne.n	8008816 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008812:	2302      	movs	r3, #2
 8008814:	e0ff      	b.n	8008a16 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	2201      	movs	r2, #1
 800881a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2b14      	cmp	r3, #20
 8008822:	f200 80f0 	bhi.w	8008a06 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008826:	a201      	add	r2, pc, #4	; (adr r2, 800882c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800882c:	08008881 	.word	0x08008881
 8008830:	08008a07 	.word	0x08008a07
 8008834:	08008a07 	.word	0x08008a07
 8008838:	08008a07 	.word	0x08008a07
 800883c:	080088c1 	.word	0x080088c1
 8008840:	08008a07 	.word	0x08008a07
 8008844:	08008a07 	.word	0x08008a07
 8008848:	08008a07 	.word	0x08008a07
 800884c:	08008903 	.word	0x08008903
 8008850:	08008a07 	.word	0x08008a07
 8008854:	08008a07 	.word	0x08008a07
 8008858:	08008a07 	.word	0x08008a07
 800885c:	08008943 	.word	0x08008943
 8008860:	08008a07 	.word	0x08008a07
 8008864:	08008a07 	.word	0x08008a07
 8008868:	08008a07 	.word	0x08008a07
 800886c:	08008985 	.word	0x08008985
 8008870:	08008a07 	.word	0x08008a07
 8008874:	08008a07 	.word	0x08008a07
 8008878:	08008a07 	.word	0x08008a07
 800887c:	080089c5 	.word	0x080089c5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	68b9      	ldr	r1, [r7, #8]
 8008886:	4618      	mov	r0, r3
 8008888:	f000 fbfc 	bl	8009084 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	699a      	ldr	r2, [r3, #24]
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f042 0208 	orr.w	r2, r2, #8
 800889a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	699a      	ldr	r2, [r3, #24]
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f022 0204 	bic.w	r2, r2, #4
 80088aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	6999      	ldr	r1, [r3, #24]
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	691a      	ldr	r2, [r3, #16]
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	430a      	orrs	r2, r1
 80088bc:	619a      	str	r2, [r3, #24]
      break;
 80088be:	e0a5      	b.n	8008a0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	68b9      	ldr	r1, [r7, #8]
 80088c6:	4618      	mov	r0, r3
 80088c8:	f000 fc6c 	bl	80091a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	699a      	ldr	r2, [r3, #24]
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80088da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	699a      	ldr	r2, [r3, #24]
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80088ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	6999      	ldr	r1, [r3, #24]
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	691b      	ldr	r3, [r3, #16]
 80088f6:	021a      	lsls	r2, r3, #8
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	430a      	orrs	r2, r1
 80088fe:	619a      	str	r2, [r3, #24]
      break;
 8008900:	e084      	b.n	8008a0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	68b9      	ldr	r1, [r7, #8]
 8008908:	4618      	mov	r0, r3
 800890a:	f000 fcd5 	bl	80092b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	69da      	ldr	r2, [r3, #28]
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f042 0208 	orr.w	r2, r2, #8
 800891c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	69da      	ldr	r2, [r3, #28]
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f022 0204 	bic.w	r2, r2, #4
 800892c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	69d9      	ldr	r1, [r3, #28]
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	691a      	ldr	r2, [r3, #16]
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	430a      	orrs	r2, r1
 800893e:	61da      	str	r2, [r3, #28]
      break;
 8008940:	e064      	b.n	8008a0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	68b9      	ldr	r1, [r7, #8]
 8008948:	4618      	mov	r0, r3
 800894a:	f000 fd3d 	bl	80093c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	69da      	ldr	r2, [r3, #28]
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800895c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	69da      	ldr	r2, [r3, #28]
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800896c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	69d9      	ldr	r1, [r3, #28]
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	691b      	ldr	r3, [r3, #16]
 8008978:	021a      	lsls	r2, r3, #8
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	430a      	orrs	r2, r1
 8008980:	61da      	str	r2, [r3, #28]
      break;
 8008982:	e043      	b.n	8008a0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	68b9      	ldr	r1, [r7, #8]
 800898a:	4618      	mov	r0, r3
 800898c:	f000 fd86 	bl	800949c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f042 0208 	orr.w	r2, r2, #8
 800899e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f022 0204 	bic.w	r2, r2, #4
 80089ae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	691a      	ldr	r2, [r3, #16]
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	430a      	orrs	r2, r1
 80089c0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80089c2:	e023      	b.n	8008a0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	68b9      	ldr	r1, [r7, #8]
 80089ca:	4618      	mov	r0, r3
 80089cc:	f000 fdca 	bl	8009564 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80089de:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80089ee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	691b      	ldr	r3, [r3, #16]
 80089fa:	021a      	lsls	r2, r3, #8
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	430a      	orrs	r2, r1
 8008a02:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008a04:	e002      	b.n	8008a0c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008a06:	2301      	movs	r3, #1
 8008a08:	75fb      	strb	r3, [r7, #23]
      break;
 8008a0a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008a14:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	3718      	adds	r7, #24
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}
 8008a1e:	bf00      	nop

08008a20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b084      	sub	sp, #16
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
 8008a28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a34:	2b01      	cmp	r3, #1
 8008a36:	d101      	bne.n	8008a3c <HAL_TIM_ConfigClockSource+0x1c>
 8008a38:	2302      	movs	r3, #2
 8008a3a:	e0b6      	b.n	8008baa <HAL_TIM_ConfigClockSource+0x18a>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2201      	movs	r2, #1
 8008a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2202      	movs	r2, #2
 8008a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	689b      	ldr	r3, [r3, #8]
 8008a52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a5a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008a5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008a66:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	68ba      	ldr	r2, [r7, #8]
 8008a6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a78:	d03e      	beq.n	8008af8 <HAL_TIM_ConfigClockSource+0xd8>
 8008a7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a7e:	f200 8087 	bhi.w	8008b90 <HAL_TIM_ConfigClockSource+0x170>
 8008a82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a86:	f000 8086 	beq.w	8008b96 <HAL_TIM_ConfigClockSource+0x176>
 8008a8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a8e:	d87f      	bhi.n	8008b90 <HAL_TIM_ConfigClockSource+0x170>
 8008a90:	2b70      	cmp	r3, #112	; 0x70
 8008a92:	d01a      	beq.n	8008aca <HAL_TIM_ConfigClockSource+0xaa>
 8008a94:	2b70      	cmp	r3, #112	; 0x70
 8008a96:	d87b      	bhi.n	8008b90 <HAL_TIM_ConfigClockSource+0x170>
 8008a98:	2b60      	cmp	r3, #96	; 0x60
 8008a9a:	d050      	beq.n	8008b3e <HAL_TIM_ConfigClockSource+0x11e>
 8008a9c:	2b60      	cmp	r3, #96	; 0x60
 8008a9e:	d877      	bhi.n	8008b90 <HAL_TIM_ConfigClockSource+0x170>
 8008aa0:	2b50      	cmp	r3, #80	; 0x50
 8008aa2:	d03c      	beq.n	8008b1e <HAL_TIM_ConfigClockSource+0xfe>
 8008aa4:	2b50      	cmp	r3, #80	; 0x50
 8008aa6:	d873      	bhi.n	8008b90 <HAL_TIM_ConfigClockSource+0x170>
 8008aa8:	2b40      	cmp	r3, #64	; 0x40
 8008aaa:	d058      	beq.n	8008b5e <HAL_TIM_ConfigClockSource+0x13e>
 8008aac:	2b40      	cmp	r3, #64	; 0x40
 8008aae:	d86f      	bhi.n	8008b90 <HAL_TIM_ConfigClockSource+0x170>
 8008ab0:	2b30      	cmp	r3, #48	; 0x30
 8008ab2:	d064      	beq.n	8008b7e <HAL_TIM_ConfigClockSource+0x15e>
 8008ab4:	2b30      	cmp	r3, #48	; 0x30
 8008ab6:	d86b      	bhi.n	8008b90 <HAL_TIM_ConfigClockSource+0x170>
 8008ab8:	2b20      	cmp	r3, #32
 8008aba:	d060      	beq.n	8008b7e <HAL_TIM_ConfigClockSource+0x15e>
 8008abc:	2b20      	cmp	r3, #32
 8008abe:	d867      	bhi.n	8008b90 <HAL_TIM_ConfigClockSource+0x170>
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d05c      	beq.n	8008b7e <HAL_TIM_ConfigClockSource+0x15e>
 8008ac4:	2b10      	cmp	r3, #16
 8008ac6:	d05a      	beq.n	8008b7e <HAL_TIM_ConfigClockSource+0x15e>
 8008ac8:	e062      	b.n	8008b90 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6818      	ldr	r0, [r3, #0]
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	6899      	ldr	r1, [r3, #8]
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	685a      	ldr	r2, [r3, #4]
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	68db      	ldr	r3, [r3, #12]
 8008ada:	f000 ffdb 	bl	8009a94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	689b      	ldr	r3, [r3, #8]
 8008ae4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008aec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	68ba      	ldr	r2, [r7, #8]
 8008af4:	609a      	str	r2, [r3, #8]
      break;
 8008af6:	e04f      	b.n	8008b98 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6818      	ldr	r0, [r3, #0]
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	6899      	ldr	r1, [r3, #8]
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	685a      	ldr	r2, [r3, #4]
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	68db      	ldr	r3, [r3, #12]
 8008b08:	f000 ffc4 	bl	8009a94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	689a      	ldr	r2, [r3, #8]
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008b1a:	609a      	str	r2, [r3, #8]
      break;
 8008b1c:	e03c      	b.n	8008b98 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6818      	ldr	r0, [r3, #0]
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	6859      	ldr	r1, [r3, #4]
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	68db      	ldr	r3, [r3, #12]
 8008b2a:	461a      	mov	r2, r3
 8008b2c:	f000 fe82 	bl	8009834 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	2150      	movs	r1, #80	; 0x50
 8008b36:	4618      	mov	r0, r3
 8008b38:	f000 ff91 	bl	8009a5e <TIM_ITRx_SetConfig>
      break;
 8008b3c:	e02c      	b.n	8008b98 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6818      	ldr	r0, [r3, #0]
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	6859      	ldr	r1, [r3, #4]
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	68db      	ldr	r3, [r3, #12]
 8008b4a:	461a      	mov	r2, r3
 8008b4c:	f000 fede 	bl	800990c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	2160      	movs	r1, #96	; 0x60
 8008b56:	4618      	mov	r0, r3
 8008b58:	f000 ff81 	bl	8009a5e <TIM_ITRx_SetConfig>
      break;
 8008b5c:	e01c      	b.n	8008b98 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6818      	ldr	r0, [r3, #0]
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	6859      	ldr	r1, [r3, #4]
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	68db      	ldr	r3, [r3, #12]
 8008b6a:	461a      	mov	r2, r3
 8008b6c:	f000 fe62 	bl	8009834 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	2140      	movs	r1, #64	; 0x40
 8008b76:	4618      	mov	r0, r3
 8008b78:	f000 ff71 	bl	8009a5e <TIM_ITRx_SetConfig>
      break;
 8008b7c:	e00c      	b.n	8008b98 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681a      	ldr	r2, [r3, #0]
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4619      	mov	r1, r3
 8008b88:	4610      	mov	r0, r2
 8008b8a:	f000 ff68 	bl	8009a5e <TIM_ITRx_SetConfig>
      break;
 8008b8e:	e003      	b.n	8008b98 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8008b90:	2301      	movs	r3, #1
 8008b92:	73fb      	strb	r3, [r7, #15]
      break;
 8008b94:	e000      	b.n	8008b98 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8008b96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3710      	adds	r7, #16
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}

08008bb2 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008bb2:	b580      	push	{r7, lr}
 8008bb4:	b082      	sub	sp, #8
 8008bb6:	af00      	add	r7, sp, #0
 8008bb8:	6078      	str	r0, [r7, #4]
 8008bba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008bc2:	2b01      	cmp	r3, #1
 8008bc4:	d101      	bne.n	8008bca <HAL_TIM_SlaveConfigSynchro+0x18>
 8008bc6:	2302      	movs	r3, #2
 8008bc8:	e031      	b.n	8008c2e <HAL_TIM_SlaveConfigSynchro+0x7c>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2201      	movs	r2, #1
 8008bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2202      	movs	r2, #2
 8008bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8008bda:	6839      	ldr	r1, [r7, #0]
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f000 fd27 	bl	8009630 <TIM_SlaveTimer_SetConfig>
 8008be2:	4603      	mov	r3, r0
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d009      	beq.n	8008bfc <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2201      	movs	r2, #1
 8008bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	e018      	b.n	8008c2e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	68da      	ldr	r2, [r3, #12]
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c0a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	68da      	ldr	r2, [r3, #12]
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008c1a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2201      	movs	r2, #1
 8008c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2200      	movs	r2, #0
 8008c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008c2c:	2300      	movs	r3, #0
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	3708      	adds	r7, #8
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}
	...

08008c38 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b085      	sub	sp, #20
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
 8008c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8008c42:	2300      	movs	r3, #0
 8008c44:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	2b0c      	cmp	r3, #12
 8008c4a:	d831      	bhi.n	8008cb0 <HAL_TIM_ReadCapturedValue+0x78>
 8008c4c:	a201      	add	r2, pc, #4	; (adr r2, 8008c54 <HAL_TIM_ReadCapturedValue+0x1c>)
 8008c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c52:	bf00      	nop
 8008c54:	08008c89 	.word	0x08008c89
 8008c58:	08008cb1 	.word	0x08008cb1
 8008c5c:	08008cb1 	.word	0x08008cb1
 8008c60:	08008cb1 	.word	0x08008cb1
 8008c64:	08008c93 	.word	0x08008c93
 8008c68:	08008cb1 	.word	0x08008cb1
 8008c6c:	08008cb1 	.word	0x08008cb1
 8008c70:	08008cb1 	.word	0x08008cb1
 8008c74:	08008c9d 	.word	0x08008c9d
 8008c78:	08008cb1 	.word	0x08008cb1
 8008c7c:	08008cb1 	.word	0x08008cb1
 8008c80:	08008cb1 	.word	0x08008cb1
 8008c84:	08008ca7 	.word	0x08008ca7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c8e:	60fb      	str	r3, [r7, #12]

      break;
 8008c90:	e00f      	b.n	8008cb2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c98:	60fb      	str	r3, [r7, #12]

      break;
 8008c9a:	e00a      	b.n	8008cb2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ca2:	60fb      	str	r3, [r7, #12]

      break;
 8008ca4:	e005      	b.n	8008cb2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cac:	60fb      	str	r3, [r7, #12]

      break;
 8008cae:	e000      	b.n	8008cb2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8008cb0:	bf00      	nop
  }

  return tmpreg;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	3714      	adds	r7, #20
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbe:	4770      	bx	lr

08008cc0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b083      	sub	sp, #12
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008cc8:	bf00      	nop
 8008cca:	370c      	adds	r7, #12
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd2:	4770      	bx	lr

08008cd4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b083      	sub	sp, #12
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008cdc:	bf00      	nop
 8008cde:	370c      	adds	r7, #12
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce6:	4770      	bx	lr

08008ce8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b083      	sub	sp, #12
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008cf0:	bf00      	nop
 8008cf2:	370c      	adds	r7, #12
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfa:	4770      	bx	lr

08008cfc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b083      	sub	sp, #12
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008d04:	bf00      	nop
 8008d06:	370c      	adds	r7, #12
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0e:	4770      	bx	lr

08008d10 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008d10:	b480      	push	{r7}
 8008d12:	b083      	sub	sp, #12
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008d18:	bf00      	nop
 8008d1a:	370c      	adds	r7, #12
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d22:	4770      	bx	lr

08008d24 <HAL_TIM_GetActiveChannel>:
  * @brief  Return the TIM Encoder Mode handle state.
  * @param  htim TIM handle
  * @retval Active channel
  */
HAL_TIM_ActiveChannel HAL_TIM_GetActiveChannel(TIM_HandleTypeDef *htim)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b083      	sub	sp, #12
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  return htim->Channel;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	7f1b      	ldrb	r3, [r3, #28]
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	370c      	adds	r7, #12
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr

08008d3c <HAL_TIM_GetChannelState>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5
  *            @arg TIM_CHANNEL_6: TIM Channel 6
  * @retval TIM Channel state
  */
HAL_TIM_ChannelStateTypeDef HAL_TIM_GetChannelState(TIM_HandleTypeDef *htim,  uint32_t Channel)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b085      	sub	sp, #20
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_state;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d104      	bne.n	8008d56 <HAL_TIM_GetChannelState+0x1a>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008d52:	b2db      	uxtb	r3, r3
 8008d54:	e023      	b.n	8008d9e <HAL_TIM_GetChannelState+0x62>
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	2b04      	cmp	r3, #4
 8008d5a:	d104      	bne.n	8008d66 <HAL_TIM_GetChannelState+0x2a>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008d62:	b2db      	uxtb	r3, r3
 8008d64:	e01b      	b.n	8008d9e <HAL_TIM_GetChannelState+0x62>
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	2b08      	cmp	r3, #8
 8008d6a:	d104      	bne.n	8008d76 <HAL_TIM_GetChannelState+0x3a>
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008d72:	b2db      	uxtb	r3, r3
 8008d74:	e013      	b.n	8008d9e <HAL_TIM_GetChannelState+0x62>
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	2b0c      	cmp	r3, #12
 8008d7a:	d104      	bne.n	8008d86 <HAL_TIM_GetChannelState+0x4a>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d82:	b2db      	uxtb	r3, r3
 8008d84:	e00b      	b.n	8008d9e <HAL_TIM_GetChannelState+0x62>
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	2b10      	cmp	r3, #16
 8008d8a:	d104      	bne.n	8008d96 <HAL_TIM_GetChannelState+0x5a>
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008d92:	b2db      	uxtb	r3, r3
 8008d94:	e003      	b.n	8008d9e <HAL_TIM_GetChannelState+0x62>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008d9c:	b2db      	uxtb	r3, r3
 8008d9e:	73fb      	strb	r3, [r7, #15]

  return channel_state;
 8008da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3714      	adds	r7, #20
 8008da6:	46bd      	mov	sp, r7
 8008da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dac:	4770      	bx	lr

08008dae <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8008dae:	b580      	push	{r7, lr}
 8008db0:	b084      	sub	sp, #16
 8008db2:	af00      	add	r7, sp, #0
 8008db4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dba:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dc0:	687a      	ldr	r2, [r7, #4]
 8008dc2:	429a      	cmp	r2, r3
 8008dc4:	d107      	bne.n	8008dd6 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	2201      	movs	r2, #1
 8008dca:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	2201      	movs	r2, #1
 8008dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008dd4:	e02a      	b.n	8008e2c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dda:	687a      	ldr	r2, [r7, #4]
 8008ddc:	429a      	cmp	r2, r3
 8008dde:	d107      	bne.n	8008df0 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	2202      	movs	r2, #2
 8008de4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	2201      	movs	r2, #1
 8008dea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008dee:	e01d      	b.n	8008e2c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008df4:	687a      	ldr	r2, [r7, #4]
 8008df6:	429a      	cmp	r2, r3
 8008df8:	d107      	bne.n	8008e0a <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	2204      	movs	r2, #4
 8008dfe:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	2201      	movs	r2, #1
 8008e04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008e08:	e010      	b.n	8008e2c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e0e:	687a      	ldr	r2, [r7, #4]
 8008e10:	429a      	cmp	r2, r3
 8008e12:	d107      	bne.n	8008e24 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	2208      	movs	r2, #8
 8008e18:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	2201      	movs	r2, #1
 8008e1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008e22:	e003      	b.n	8008e2c <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	2201      	movs	r2, #1
 8008e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8008e2c:	68f8      	ldr	r0, [r7, #12]
 8008e2e:	f7ff ff6f 	bl	8008d10 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	2200      	movs	r2, #0
 8008e36:	771a      	strb	r2, [r3, #28]
}
 8008e38:	bf00      	nop
 8008e3a:	3710      	adds	r7, #16
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}

08008e40 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b084      	sub	sp, #16
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e4c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e52:	687a      	ldr	r2, [r7, #4]
 8008e54:	429a      	cmp	r2, r3
 8008e56:	d10b      	bne.n	8008e70 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	69db      	ldr	r3, [r3, #28]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d136      	bne.n	8008ed4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	2201      	movs	r2, #1
 8008e6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008e6e:	e031      	b.n	8008ed4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e74:	687a      	ldr	r2, [r7, #4]
 8008e76:	429a      	cmp	r2, r3
 8008e78:	d10b      	bne.n	8008e92 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	2202      	movs	r2, #2
 8008e7e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	69db      	ldr	r3, [r3, #28]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d125      	bne.n	8008ed4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	2201      	movs	r2, #1
 8008e8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008e90:	e020      	b.n	8008ed4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e96:	687a      	ldr	r2, [r7, #4]
 8008e98:	429a      	cmp	r2, r3
 8008e9a:	d10b      	bne.n	8008eb4 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	2204      	movs	r2, #4
 8008ea0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	69db      	ldr	r3, [r3, #28]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d114      	bne.n	8008ed4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	2201      	movs	r2, #1
 8008eae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008eb2:	e00f      	b.n	8008ed4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eb8:	687a      	ldr	r2, [r7, #4]
 8008eba:	429a      	cmp	r2, r3
 8008ebc:	d10a      	bne.n	8008ed4 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	2208      	movs	r2, #8
 8008ec2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	69db      	ldr	r3, [r3, #28]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d103      	bne.n	8008ed4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	2201      	movs	r2, #1
 8008ed0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ed4:	68f8      	ldr	r0, [r7, #12]
 8008ed6:	f7ff fefd 	bl	8008cd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	2200      	movs	r2, #0
 8008ede:	771a      	strb	r2, [r3, #28]
}
 8008ee0:	bf00      	nop
 8008ee2:	3710      	adds	r7, #16
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}

08008ee8 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b084      	sub	sp, #16
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ef4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008efa:	687a      	ldr	r2, [r7, #4]
 8008efc:	429a      	cmp	r2, r3
 8008efe:	d103      	bne.n	8008f08 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	2201      	movs	r2, #1
 8008f04:	771a      	strb	r2, [r3, #28]
 8008f06:	e019      	b.n	8008f3c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f0c:	687a      	ldr	r2, [r7, #4]
 8008f0e:	429a      	cmp	r2, r3
 8008f10:	d103      	bne.n	8008f1a <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	2202      	movs	r2, #2
 8008f16:	771a      	strb	r2, [r3, #28]
 8008f18:	e010      	b.n	8008f3c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f1e:	687a      	ldr	r2, [r7, #4]
 8008f20:	429a      	cmp	r2, r3
 8008f22:	d103      	bne.n	8008f2c <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	2204      	movs	r2, #4
 8008f28:	771a      	strb	r2, [r3, #28]
 8008f2a:	e007      	b.n	8008f3c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f30:	687a      	ldr	r2, [r7, #4]
 8008f32:	429a      	cmp	r2, r3
 8008f34:	d102      	bne.n	8008f3c <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	2208      	movs	r2, #8
 8008f3a:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8008f3c:	68f8      	ldr	r0, [r7, #12]
 8008f3e:	f7ff fed3 	bl	8008ce8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	2200      	movs	r2, #0
 8008f46:	771a      	strb	r2, [r3, #28]
}
 8008f48:	bf00      	nop
 8008f4a:	3710      	adds	r7, #16
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}

08008f50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008f50:	b480      	push	{r7}
 8008f52:	b085      	sub	sp, #20
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
 8008f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	4a40      	ldr	r2, [pc, #256]	; (8009064 <TIM_Base_SetConfig+0x114>)
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d013      	beq.n	8008f90 <TIM_Base_SetConfig+0x40>
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f6e:	d00f      	beq.n	8008f90 <TIM_Base_SetConfig+0x40>
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	4a3d      	ldr	r2, [pc, #244]	; (8009068 <TIM_Base_SetConfig+0x118>)
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d00b      	beq.n	8008f90 <TIM_Base_SetConfig+0x40>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	4a3c      	ldr	r2, [pc, #240]	; (800906c <TIM_Base_SetConfig+0x11c>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d007      	beq.n	8008f90 <TIM_Base_SetConfig+0x40>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	4a3b      	ldr	r2, [pc, #236]	; (8009070 <TIM_Base_SetConfig+0x120>)
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d003      	beq.n	8008f90 <TIM_Base_SetConfig+0x40>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	4a3a      	ldr	r2, [pc, #232]	; (8009074 <TIM_Base_SetConfig+0x124>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d108      	bne.n	8008fa2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	685b      	ldr	r3, [r3, #4]
 8008f9c:	68fa      	ldr	r2, [r7, #12]
 8008f9e:	4313      	orrs	r3, r2
 8008fa0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	4a2f      	ldr	r2, [pc, #188]	; (8009064 <TIM_Base_SetConfig+0x114>)
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	d01f      	beq.n	8008fea <TIM_Base_SetConfig+0x9a>
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fb0:	d01b      	beq.n	8008fea <TIM_Base_SetConfig+0x9a>
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	4a2c      	ldr	r2, [pc, #176]	; (8009068 <TIM_Base_SetConfig+0x118>)
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d017      	beq.n	8008fea <TIM_Base_SetConfig+0x9a>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	4a2b      	ldr	r2, [pc, #172]	; (800906c <TIM_Base_SetConfig+0x11c>)
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d013      	beq.n	8008fea <TIM_Base_SetConfig+0x9a>
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	4a2a      	ldr	r2, [pc, #168]	; (8009070 <TIM_Base_SetConfig+0x120>)
 8008fc6:	4293      	cmp	r3, r2
 8008fc8:	d00f      	beq.n	8008fea <TIM_Base_SetConfig+0x9a>
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	4a29      	ldr	r2, [pc, #164]	; (8009074 <TIM_Base_SetConfig+0x124>)
 8008fce:	4293      	cmp	r3, r2
 8008fd0:	d00b      	beq.n	8008fea <TIM_Base_SetConfig+0x9a>
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	4a28      	ldr	r2, [pc, #160]	; (8009078 <TIM_Base_SetConfig+0x128>)
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	d007      	beq.n	8008fea <TIM_Base_SetConfig+0x9a>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	4a27      	ldr	r2, [pc, #156]	; (800907c <TIM_Base_SetConfig+0x12c>)
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d003      	beq.n	8008fea <TIM_Base_SetConfig+0x9a>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	4a26      	ldr	r2, [pc, #152]	; (8009080 <TIM_Base_SetConfig+0x130>)
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	d108      	bne.n	8008ffc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ff0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	68db      	ldr	r3, [r3, #12]
 8008ff6:	68fa      	ldr	r2, [r7, #12]
 8008ff8:	4313      	orrs	r3, r2
 8008ffa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	695b      	ldr	r3, [r3, #20]
 8009006:	4313      	orrs	r3, r2
 8009008:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	68fa      	ldr	r2, [r7, #12]
 800900e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	689a      	ldr	r2, [r3, #8]
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	681a      	ldr	r2, [r3, #0]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	4a10      	ldr	r2, [pc, #64]	; (8009064 <TIM_Base_SetConfig+0x114>)
 8009024:	4293      	cmp	r3, r2
 8009026:	d00f      	beq.n	8009048 <TIM_Base_SetConfig+0xf8>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	4a12      	ldr	r2, [pc, #72]	; (8009074 <TIM_Base_SetConfig+0x124>)
 800902c:	4293      	cmp	r3, r2
 800902e:	d00b      	beq.n	8009048 <TIM_Base_SetConfig+0xf8>
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	4a11      	ldr	r2, [pc, #68]	; (8009078 <TIM_Base_SetConfig+0x128>)
 8009034:	4293      	cmp	r3, r2
 8009036:	d007      	beq.n	8009048 <TIM_Base_SetConfig+0xf8>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	4a10      	ldr	r2, [pc, #64]	; (800907c <TIM_Base_SetConfig+0x12c>)
 800903c:	4293      	cmp	r3, r2
 800903e:	d003      	beq.n	8009048 <TIM_Base_SetConfig+0xf8>
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	4a0f      	ldr	r2, [pc, #60]	; (8009080 <TIM_Base_SetConfig+0x130>)
 8009044:	4293      	cmp	r3, r2
 8009046:	d103      	bne.n	8009050 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	691a      	ldr	r2, [r3, #16]
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2201      	movs	r2, #1
 8009054:	615a      	str	r2, [r3, #20]
}
 8009056:	bf00      	nop
 8009058:	3714      	adds	r7, #20
 800905a:	46bd      	mov	sp, r7
 800905c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009060:	4770      	bx	lr
 8009062:	bf00      	nop
 8009064:	40012c00 	.word	0x40012c00
 8009068:	40000400 	.word	0x40000400
 800906c:	40000800 	.word	0x40000800
 8009070:	40000c00 	.word	0x40000c00
 8009074:	40013400 	.word	0x40013400
 8009078:	40014000 	.word	0x40014000
 800907c:	40014400 	.word	0x40014400
 8009080:	40014800 	.word	0x40014800

08009084 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009084:	b480      	push	{r7}
 8009086:	b087      	sub	sp, #28
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
 800908c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6a1b      	ldr	r3, [r3, #32]
 8009092:	f023 0201 	bic.w	r2, r3, #1
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6a1b      	ldr	r3, [r3, #32]
 800909e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	685b      	ldr	r3, [r3, #4]
 80090a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	699b      	ldr	r3, [r3, #24]
 80090aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80090b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	f023 0303 	bic.w	r3, r3, #3
 80090be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	68fa      	ldr	r2, [r7, #12]
 80090c6:	4313      	orrs	r3, r2
 80090c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80090ca:	697b      	ldr	r3, [r7, #20]
 80090cc:	f023 0302 	bic.w	r3, r3, #2
 80090d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	689b      	ldr	r3, [r3, #8]
 80090d6:	697a      	ldr	r2, [r7, #20]
 80090d8:	4313      	orrs	r3, r2
 80090da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	4a2c      	ldr	r2, [pc, #176]	; (8009190 <TIM_OC1_SetConfig+0x10c>)
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d00f      	beq.n	8009104 <TIM_OC1_SetConfig+0x80>
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	4a2b      	ldr	r2, [pc, #172]	; (8009194 <TIM_OC1_SetConfig+0x110>)
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d00b      	beq.n	8009104 <TIM_OC1_SetConfig+0x80>
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	4a2a      	ldr	r2, [pc, #168]	; (8009198 <TIM_OC1_SetConfig+0x114>)
 80090f0:	4293      	cmp	r3, r2
 80090f2:	d007      	beq.n	8009104 <TIM_OC1_SetConfig+0x80>
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	4a29      	ldr	r2, [pc, #164]	; (800919c <TIM_OC1_SetConfig+0x118>)
 80090f8:	4293      	cmp	r3, r2
 80090fa:	d003      	beq.n	8009104 <TIM_OC1_SetConfig+0x80>
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	4a28      	ldr	r2, [pc, #160]	; (80091a0 <TIM_OC1_SetConfig+0x11c>)
 8009100:	4293      	cmp	r3, r2
 8009102:	d10c      	bne.n	800911e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009104:	697b      	ldr	r3, [r7, #20]
 8009106:	f023 0308 	bic.w	r3, r3, #8
 800910a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	68db      	ldr	r3, [r3, #12]
 8009110:	697a      	ldr	r2, [r7, #20]
 8009112:	4313      	orrs	r3, r2
 8009114:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	f023 0304 	bic.w	r3, r3, #4
 800911c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	4a1b      	ldr	r2, [pc, #108]	; (8009190 <TIM_OC1_SetConfig+0x10c>)
 8009122:	4293      	cmp	r3, r2
 8009124:	d00f      	beq.n	8009146 <TIM_OC1_SetConfig+0xc2>
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	4a1a      	ldr	r2, [pc, #104]	; (8009194 <TIM_OC1_SetConfig+0x110>)
 800912a:	4293      	cmp	r3, r2
 800912c:	d00b      	beq.n	8009146 <TIM_OC1_SetConfig+0xc2>
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	4a19      	ldr	r2, [pc, #100]	; (8009198 <TIM_OC1_SetConfig+0x114>)
 8009132:	4293      	cmp	r3, r2
 8009134:	d007      	beq.n	8009146 <TIM_OC1_SetConfig+0xc2>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	4a18      	ldr	r2, [pc, #96]	; (800919c <TIM_OC1_SetConfig+0x118>)
 800913a:	4293      	cmp	r3, r2
 800913c:	d003      	beq.n	8009146 <TIM_OC1_SetConfig+0xc2>
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	4a17      	ldr	r2, [pc, #92]	; (80091a0 <TIM_OC1_SetConfig+0x11c>)
 8009142:	4293      	cmp	r3, r2
 8009144:	d111      	bne.n	800916a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800914c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800914e:	693b      	ldr	r3, [r7, #16]
 8009150:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009154:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	695b      	ldr	r3, [r3, #20]
 800915a:	693a      	ldr	r2, [r7, #16]
 800915c:	4313      	orrs	r3, r2
 800915e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	699b      	ldr	r3, [r3, #24]
 8009164:	693a      	ldr	r2, [r7, #16]
 8009166:	4313      	orrs	r3, r2
 8009168:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	693a      	ldr	r2, [r7, #16]
 800916e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	68fa      	ldr	r2, [r7, #12]
 8009174:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	685a      	ldr	r2, [r3, #4]
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	697a      	ldr	r2, [r7, #20]
 8009182:	621a      	str	r2, [r3, #32]
}
 8009184:	bf00      	nop
 8009186:	371c      	adds	r7, #28
 8009188:	46bd      	mov	sp, r7
 800918a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918e:	4770      	bx	lr
 8009190:	40012c00 	.word	0x40012c00
 8009194:	40013400 	.word	0x40013400
 8009198:	40014000 	.word	0x40014000
 800919c:	40014400 	.word	0x40014400
 80091a0:	40014800 	.word	0x40014800

080091a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80091a4:	b480      	push	{r7}
 80091a6:	b087      	sub	sp, #28
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
 80091ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6a1b      	ldr	r3, [r3, #32]
 80091b2:	f023 0210 	bic.w	r2, r3, #16
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6a1b      	ldr	r3, [r3, #32]
 80091be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	685b      	ldr	r3, [r3, #4]
 80091c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	699b      	ldr	r3, [r3, #24]
 80091ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80091d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	021b      	lsls	r3, r3, #8
 80091e6:	68fa      	ldr	r2, [r7, #12]
 80091e8:	4313      	orrs	r3, r2
 80091ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80091ec:	697b      	ldr	r3, [r7, #20]
 80091ee:	f023 0320 	bic.w	r3, r3, #32
 80091f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	689b      	ldr	r3, [r3, #8]
 80091f8:	011b      	lsls	r3, r3, #4
 80091fa:	697a      	ldr	r2, [r7, #20]
 80091fc:	4313      	orrs	r3, r2
 80091fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	4a28      	ldr	r2, [pc, #160]	; (80092a4 <TIM_OC2_SetConfig+0x100>)
 8009204:	4293      	cmp	r3, r2
 8009206:	d003      	beq.n	8009210 <TIM_OC2_SetConfig+0x6c>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	4a27      	ldr	r2, [pc, #156]	; (80092a8 <TIM_OC2_SetConfig+0x104>)
 800920c:	4293      	cmp	r3, r2
 800920e:	d10d      	bne.n	800922c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009210:	697b      	ldr	r3, [r7, #20]
 8009212:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009216:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	68db      	ldr	r3, [r3, #12]
 800921c:	011b      	lsls	r3, r3, #4
 800921e:	697a      	ldr	r2, [r7, #20]
 8009220:	4313      	orrs	r3, r2
 8009222:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009224:	697b      	ldr	r3, [r7, #20]
 8009226:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800922a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	4a1d      	ldr	r2, [pc, #116]	; (80092a4 <TIM_OC2_SetConfig+0x100>)
 8009230:	4293      	cmp	r3, r2
 8009232:	d00f      	beq.n	8009254 <TIM_OC2_SetConfig+0xb0>
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	4a1c      	ldr	r2, [pc, #112]	; (80092a8 <TIM_OC2_SetConfig+0x104>)
 8009238:	4293      	cmp	r3, r2
 800923a:	d00b      	beq.n	8009254 <TIM_OC2_SetConfig+0xb0>
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	4a1b      	ldr	r2, [pc, #108]	; (80092ac <TIM_OC2_SetConfig+0x108>)
 8009240:	4293      	cmp	r3, r2
 8009242:	d007      	beq.n	8009254 <TIM_OC2_SetConfig+0xb0>
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	4a1a      	ldr	r2, [pc, #104]	; (80092b0 <TIM_OC2_SetConfig+0x10c>)
 8009248:	4293      	cmp	r3, r2
 800924a:	d003      	beq.n	8009254 <TIM_OC2_SetConfig+0xb0>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	4a19      	ldr	r2, [pc, #100]	; (80092b4 <TIM_OC2_SetConfig+0x110>)
 8009250:	4293      	cmp	r3, r2
 8009252:	d113      	bne.n	800927c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009254:	693b      	ldr	r3, [r7, #16]
 8009256:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800925a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800925c:	693b      	ldr	r3, [r7, #16]
 800925e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009262:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	695b      	ldr	r3, [r3, #20]
 8009268:	009b      	lsls	r3, r3, #2
 800926a:	693a      	ldr	r2, [r7, #16]
 800926c:	4313      	orrs	r3, r2
 800926e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	699b      	ldr	r3, [r3, #24]
 8009274:	009b      	lsls	r3, r3, #2
 8009276:	693a      	ldr	r2, [r7, #16]
 8009278:	4313      	orrs	r3, r2
 800927a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	693a      	ldr	r2, [r7, #16]
 8009280:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	68fa      	ldr	r2, [r7, #12]
 8009286:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	685a      	ldr	r2, [r3, #4]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	697a      	ldr	r2, [r7, #20]
 8009294:	621a      	str	r2, [r3, #32]
}
 8009296:	bf00      	nop
 8009298:	371c      	adds	r7, #28
 800929a:	46bd      	mov	sp, r7
 800929c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a0:	4770      	bx	lr
 80092a2:	bf00      	nop
 80092a4:	40012c00 	.word	0x40012c00
 80092a8:	40013400 	.word	0x40013400
 80092ac:	40014000 	.word	0x40014000
 80092b0:	40014400 	.word	0x40014400
 80092b4:	40014800 	.word	0x40014800

080092b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80092b8:	b480      	push	{r7}
 80092ba:	b087      	sub	sp, #28
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
 80092c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6a1b      	ldr	r3, [r3, #32]
 80092c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6a1b      	ldr	r3, [r3, #32]
 80092d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	685b      	ldr	r3, [r3, #4]
 80092d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	69db      	ldr	r3, [r3, #28]
 80092de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80092e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	f023 0303 	bic.w	r3, r3, #3
 80092f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	68fa      	ldr	r2, [r7, #12]
 80092fa:	4313      	orrs	r3, r2
 80092fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80092fe:	697b      	ldr	r3, [r7, #20]
 8009300:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009304:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	689b      	ldr	r3, [r3, #8]
 800930a:	021b      	lsls	r3, r3, #8
 800930c:	697a      	ldr	r2, [r7, #20]
 800930e:	4313      	orrs	r3, r2
 8009310:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	4a27      	ldr	r2, [pc, #156]	; (80093b4 <TIM_OC3_SetConfig+0xfc>)
 8009316:	4293      	cmp	r3, r2
 8009318:	d003      	beq.n	8009322 <TIM_OC3_SetConfig+0x6a>
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	4a26      	ldr	r2, [pc, #152]	; (80093b8 <TIM_OC3_SetConfig+0x100>)
 800931e:	4293      	cmp	r3, r2
 8009320:	d10d      	bne.n	800933e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009328:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	68db      	ldr	r3, [r3, #12]
 800932e:	021b      	lsls	r3, r3, #8
 8009330:	697a      	ldr	r2, [r7, #20]
 8009332:	4313      	orrs	r3, r2
 8009334:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800933c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	4a1c      	ldr	r2, [pc, #112]	; (80093b4 <TIM_OC3_SetConfig+0xfc>)
 8009342:	4293      	cmp	r3, r2
 8009344:	d00f      	beq.n	8009366 <TIM_OC3_SetConfig+0xae>
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	4a1b      	ldr	r2, [pc, #108]	; (80093b8 <TIM_OC3_SetConfig+0x100>)
 800934a:	4293      	cmp	r3, r2
 800934c:	d00b      	beq.n	8009366 <TIM_OC3_SetConfig+0xae>
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	4a1a      	ldr	r2, [pc, #104]	; (80093bc <TIM_OC3_SetConfig+0x104>)
 8009352:	4293      	cmp	r3, r2
 8009354:	d007      	beq.n	8009366 <TIM_OC3_SetConfig+0xae>
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	4a19      	ldr	r2, [pc, #100]	; (80093c0 <TIM_OC3_SetConfig+0x108>)
 800935a:	4293      	cmp	r3, r2
 800935c:	d003      	beq.n	8009366 <TIM_OC3_SetConfig+0xae>
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	4a18      	ldr	r2, [pc, #96]	; (80093c4 <TIM_OC3_SetConfig+0x10c>)
 8009362:	4293      	cmp	r3, r2
 8009364:	d113      	bne.n	800938e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800936c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800936e:	693b      	ldr	r3, [r7, #16]
 8009370:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009374:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	695b      	ldr	r3, [r3, #20]
 800937a:	011b      	lsls	r3, r3, #4
 800937c:	693a      	ldr	r2, [r7, #16]
 800937e:	4313      	orrs	r3, r2
 8009380:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	699b      	ldr	r3, [r3, #24]
 8009386:	011b      	lsls	r3, r3, #4
 8009388:	693a      	ldr	r2, [r7, #16]
 800938a:	4313      	orrs	r3, r2
 800938c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	693a      	ldr	r2, [r7, #16]
 8009392:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	68fa      	ldr	r2, [r7, #12]
 8009398:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	685a      	ldr	r2, [r3, #4]
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	697a      	ldr	r2, [r7, #20]
 80093a6:	621a      	str	r2, [r3, #32]
}
 80093a8:	bf00      	nop
 80093aa:	371c      	adds	r7, #28
 80093ac:	46bd      	mov	sp, r7
 80093ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b2:	4770      	bx	lr
 80093b4:	40012c00 	.word	0x40012c00
 80093b8:	40013400 	.word	0x40013400
 80093bc:	40014000 	.word	0x40014000
 80093c0:	40014400 	.word	0x40014400
 80093c4:	40014800 	.word	0x40014800

080093c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80093c8:	b480      	push	{r7}
 80093ca:	b087      	sub	sp, #28
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
 80093d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6a1b      	ldr	r3, [r3, #32]
 80093d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6a1b      	ldr	r3, [r3, #32]
 80093e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	685b      	ldr	r3, [r3, #4]
 80093e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	69db      	ldr	r3, [r3, #28]
 80093ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80093f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80093fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009402:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	021b      	lsls	r3, r3, #8
 800940a:	68fa      	ldr	r2, [r7, #12]
 800940c:	4313      	orrs	r3, r2
 800940e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009410:	693b      	ldr	r3, [r7, #16]
 8009412:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009416:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	689b      	ldr	r3, [r3, #8]
 800941c:	031b      	lsls	r3, r3, #12
 800941e:	693a      	ldr	r2, [r7, #16]
 8009420:	4313      	orrs	r3, r2
 8009422:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	4a18      	ldr	r2, [pc, #96]	; (8009488 <TIM_OC4_SetConfig+0xc0>)
 8009428:	4293      	cmp	r3, r2
 800942a:	d00f      	beq.n	800944c <TIM_OC4_SetConfig+0x84>
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	4a17      	ldr	r2, [pc, #92]	; (800948c <TIM_OC4_SetConfig+0xc4>)
 8009430:	4293      	cmp	r3, r2
 8009432:	d00b      	beq.n	800944c <TIM_OC4_SetConfig+0x84>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	4a16      	ldr	r2, [pc, #88]	; (8009490 <TIM_OC4_SetConfig+0xc8>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d007      	beq.n	800944c <TIM_OC4_SetConfig+0x84>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	4a15      	ldr	r2, [pc, #84]	; (8009494 <TIM_OC4_SetConfig+0xcc>)
 8009440:	4293      	cmp	r3, r2
 8009442:	d003      	beq.n	800944c <TIM_OC4_SetConfig+0x84>
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	4a14      	ldr	r2, [pc, #80]	; (8009498 <TIM_OC4_SetConfig+0xd0>)
 8009448:	4293      	cmp	r3, r2
 800944a:	d109      	bne.n	8009460 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800944c:	697b      	ldr	r3, [r7, #20]
 800944e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009452:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	695b      	ldr	r3, [r3, #20]
 8009458:	019b      	lsls	r3, r3, #6
 800945a:	697a      	ldr	r2, [r7, #20]
 800945c:	4313      	orrs	r3, r2
 800945e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	697a      	ldr	r2, [r7, #20]
 8009464:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	68fa      	ldr	r2, [r7, #12]
 800946a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	685a      	ldr	r2, [r3, #4]
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	693a      	ldr	r2, [r7, #16]
 8009478:	621a      	str	r2, [r3, #32]
}
 800947a:	bf00      	nop
 800947c:	371c      	adds	r7, #28
 800947e:	46bd      	mov	sp, r7
 8009480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009484:	4770      	bx	lr
 8009486:	bf00      	nop
 8009488:	40012c00 	.word	0x40012c00
 800948c:	40013400 	.word	0x40013400
 8009490:	40014000 	.word	0x40014000
 8009494:	40014400 	.word	0x40014400
 8009498:	40014800 	.word	0x40014800

0800949c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800949c:	b480      	push	{r7}
 800949e:	b087      	sub	sp, #28
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
 80094a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6a1b      	ldr	r3, [r3, #32]
 80094aa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6a1b      	ldr	r3, [r3, #32]
 80094b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	685b      	ldr	r3, [r3, #4]
 80094bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80094ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	68fa      	ldr	r2, [r7, #12]
 80094d6:	4313      	orrs	r3, r2
 80094d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80094da:	693b      	ldr	r3, [r7, #16]
 80094dc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80094e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	689b      	ldr	r3, [r3, #8]
 80094e6:	041b      	lsls	r3, r3, #16
 80094e8:	693a      	ldr	r2, [r7, #16]
 80094ea:	4313      	orrs	r3, r2
 80094ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	4a17      	ldr	r2, [pc, #92]	; (8009550 <TIM_OC5_SetConfig+0xb4>)
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d00f      	beq.n	8009516 <TIM_OC5_SetConfig+0x7a>
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	4a16      	ldr	r2, [pc, #88]	; (8009554 <TIM_OC5_SetConfig+0xb8>)
 80094fa:	4293      	cmp	r3, r2
 80094fc:	d00b      	beq.n	8009516 <TIM_OC5_SetConfig+0x7a>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	4a15      	ldr	r2, [pc, #84]	; (8009558 <TIM_OC5_SetConfig+0xbc>)
 8009502:	4293      	cmp	r3, r2
 8009504:	d007      	beq.n	8009516 <TIM_OC5_SetConfig+0x7a>
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	4a14      	ldr	r2, [pc, #80]	; (800955c <TIM_OC5_SetConfig+0xc0>)
 800950a:	4293      	cmp	r3, r2
 800950c:	d003      	beq.n	8009516 <TIM_OC5_SetConfig+0x7a>
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	4a13      	ldr	r2, [pc, #76]	; (8009560 <TIM_OC5_SetConfig+0xc4>)
 8009512:	4293      	cmp	r3, r2
 8009514:	d109      	bne.n	800952a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009516:	697b      	ldr	r3, [r7, #20]
 8009518:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800951c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	695b      	ldr	r3, [r3, #20]
 8009522:	021b      	lsls	r3, r3, #8
 8009524:	697a      	ldr	r2, [r7, #20]
 8009526:	4313      	orrs	r3, r2
 8009528:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	697a      	ldr	r2, [r7, #20]
 800952e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	68fa      	ldr	r2, [r7, #12]
 8009534:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	685a      	ldr	r2, [r3, #4]
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	693a      	ldr	r2, [r7, #16]
 8009542:	621a      	str	r2, [r3, #32]
}
 8009544:	bf00      	nop
 8009546:	371c      	adds	r7, #28
 8009548:	46bd      	mov	sp, r7
 800954a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954e:	4770      	bx	lr
 8009550:	40012c00 	.word	0x40012c00
 8009554:	40013400 	.word	0x40013400
 8009558:	40014000 	.word	0x40014000
 800955c:	40014400 	.word	0x40014400
 8009560:	40014800 	.word	0x40014800

08009564 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009564:	b480      	push	{r7}
 8009566:	b087      	sub	sp, #28
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
 800956c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6a1b      	ldr	r3, [r3, #32]
 8009572:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6a1b      	ldr	r3, [r3, #32]
 800957e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	685b      	ldr	r3, [r3, #4]
 8009584:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800958a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009592:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009596:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	021b      	lsls	r3, r3, #8
 800959e:	68fa      	ldr	r2, [r7, #12]
 80095a0:	4313      	orrs	r3, r2
 80095a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80095a4:	693b      	ldr	r3, [r7, #16]
 80095a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80095aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	689b      	ldr	r3, [r3, #8]
 80095b0:	051b      	lsls	r3, r3, #20
 80095b2:	693a      	ldr	r2, [r7, #16]
 80095b4:	4313      	orrs	r3, r2
 80095b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	4a18      	ldr	r2, [pc, #96]	; (800961c <TIM_OC6_SetConfig+0xb8>)
 80095bc:	4293      	cmp	r3, r2
 80095be:	d00f      	beq.n	80095e0 <TIM_OC6_SetConfig+0x7c>
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	4a17      	ldr	r2, [pc, #92]	; (8009620 <TIM_OC6_SetConfig+0xbc>)
 80095c4:	4293      	cmp	r3, r2
 80095c6:	d00b      	beq.n	80095e0 <TIM_OC6_SetConfig+0x7c>
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	4a16      	ldr	r2, [pc, #88]	; (8009624 <TIM_OC6_SetConfig+0xc0>)
 80095cc:	4293      	cmp	r3, r2
 80095ce:	d007      	beq.n	80095e0 <TIM_OC6_SetConfig+0x7c>
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	4a15      	ldr	r2, [pc, #84]	; (8009628 <TIM_OC6_SetConfig+0xc4>)
 80095d4:	4293      	cmp	r3, r2
 80095d6:	d003      	beq.n	80095e0 <TIM_OC6_SetConfig+0x7c>
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	4a14      	ldr	r2, [pc, #80]	; (800962c <TIM_OC6_SetConfig+0xc8>)
 80095dc:	4293      	cmp	r3, r2
 80095de:	d109      	bne.n	80095f4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80095e0:	697b      	ldr	r3, [r7, #20]
 80095e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80095e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	695b      	ldr	r3, [r3, #20]
 80095ec:	029b      	lsls	r3, r3, #10
 80095ee:	697a      	ldr	r2, [r7, #20]
 80095f0:	4313      	orrs	r3, r2
 80095f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	697a      	ldr	r2, [r7, #20]
 80095f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	68fa      	ldr	r2, [r7, #12]
 80095fe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	685a      	ldr	r2, [r3, #4]
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	693a      	ldr	r2, [r7, #16]
 800960c:	621a      	str	r2, [r3, #32]
}
 800960e:	bf00      	nop
 8009610:	371c      	adds	r7, #28
 8009612:	46bd      	mov	sp, r7
 8009614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009618:	4770      	bx	lr
 800961a:	bf00      	nop
 800961c:	40012c00 	.word	0x40012c00
 8009620:	40013400 	.word	0x40013400
 8009624:	40014000 	.word	0x40014000
 8009628:	40014400 	.word	0x40014400
 800962c:	40014800 	.word	0x40014800

08009630 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b086      	sub	sp, #24
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
 8009638:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800963a:	2300      	movs	r3, #0
 800963c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	689b      	ldr	r3, [r3, #8]
 8009644:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009646:	693b      	ldr	r3, [r7, #16]
 8009648:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800964c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	685b      	ldr	r3, [r3, #4]
 8009652:	693a      	ldr	r2, [r7, #16]
 8009654:	4313      	orrs	r3, r2
 8009656:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8009658:	693b      	ldr	r3, [r7, #16]
 800965a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800965e:	f023 0307 	bic.w	r3, r3, #7
 8009662:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	693a      	ldr	r2, [r7, #16]
 800966a:	4313      	orrs	r3, r2
 800966c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	693a      	ldr	r2, [r7, #16]
 8009674:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	685b      	ldr	r3, [r3, #4]
 800967a:	2b70      	cmp	r3, #112	; 0x70
 800967c:	d01a      	beq.n	80096b4 <TIM_SlaveTimer_SetConfig+0x84>
 800967e:	2b70      	cmp	r3, #112	; 0x70
 8009680:	d860      	bhi.n	8009744 <TIM_SlaveTimer_SetConfig+0x114>
 8009682:	2b60      	cmp	r3, #96	; 0x60
 8009684:	d054      	beq.n	8009730 <TIM_SlaveTimer_SetConfig+0x100>
 8009686:	2b60      	cmp	r3, #96	; 0x60
 8009688:	d85c      	bhi.n	8009744 <TIM_SlaveTimer_SetConfig+0x114>
 800968a:	2b50      	cmp	r3, #80	; 0x50
 800968c:	d046      	beq.n	800971c <TIM_SlaveTimer_SetConfig+0xec>
 800968e:	2b50      	cmp	r3, #80	; 0x50
 8009690:	d858      	bhi.n	8009744 <TIM_SlaveTimer_SetConfig+0x114>
 8009692:	2b40      	cmp	r3, #64	; 0x40
 8009694:	d019      	beq.n	80096ca <TIM_SlaveTimer_SetConfig+0x9a>
 8009696:	2b40      	cmp	r3, #64	; 0x40
 8009698:	d854      	bhi.n	8009744 <TIM_SlaveTimer_SetConfig+0x114>
 800969a:	2b30      	cmp	r3, #48	; 0x30
 800969c:	d055      	beq.n	800974a <TIM_SlaveTimer_SetConfig+0x11a>
 800969e:	2b30      	cmp	r3, #48	; 0x30
 80096a0:	d850      	bhi.n	8009744 <TIM_SlaveTimer_SetConfig+0x114>
 80096a2:	2b20      	cmp	r3, #32
 80096a4:	d051      	beq.n	800974a <TIM_SlaveTimer_SetConfig+0x11a>
 80096a6:	2b20      	cmp	r3, #32
 80096a8:	d84c      	bhi.n	8009744 <TIM_SlaveTimer_SetConfig+0x114>
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d04d      	beq.n	800974a <TIM_SlaveTimer_SetConfig+0x11a>
 80096ae:	2b10      	cmp	r3, #16
 80096b0:	d04b      	beq.n	800974a <TIM_SlaveTimer_SetConfig+0x11a>
 80096b2:	e047      	b.n	8009744 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6818      	ldr	r0, [r3, #0]
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	68d9      	ldr	r1, [r3, #12]
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	689a      	ldr	r2, [r3, #8]
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	691b      	ldr	r3, [r3, #16]
 80096c4:	f000 f9e6 	bl	8009a94 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 80096c8:	e040      	b.n	800974c <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	2b05      	cmp	r3, #5
 80096d0:	d101      	bne.n	80096d6 <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 80096d2:	2301      	movs	r3, #1
 80096d4:	e03b      	b.n	800974e <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	6a1b      	ldr	r3, [r3, #32]
 80096dc:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	6a1a      	ldr	r2, [r3, #32]
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f022 0201 	bic.w	r2, r2, #1
 80096ec:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	699b      	ldr	r3, [r3, #24]
 80096f4:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80096fc:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	691b      	ldr	r3, [r3, #16]
 8009702:	011b      	lsls	r3, r3, #4
 8009704:	68ba      	ldr	r2, [r7, #8]
 8009706:	4313      	orrs	r3, r2
 8009708:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	68ba      	ldr	r2, [r7, #8]
 8009710:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	68fa      	ldr	r2, [r7, #12]
 8009718:	621a      	str	r2, [r3, #32]
      break;
 800971a:	e017      	b.n	800974c <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6818      	ldr	r0, [r3, #0]
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	6899      	ldr	r1, [r3, #8]
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	691b      	ldr	r3, [r3, #16]
 8009728:	461a      	mov	r2, r3
 800972a:	f000 f883 	bl	8009834 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800972e:	e00d      	b.n	800974c <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6818      	ldr	r0, [r3, #0]
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	6899      	ldr	r1, [r3, #8]
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	691b      	ldr	r3, [r3, #16]
 800973c:	461a      	mov	r2, r3
 800973e:	f000 f8e5 	bl	800990c <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8009742:	e003      	b.n	800974c <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8009744:	2301      	movs	r3, #1
 8009746:	75fb      	strb	r3, [r7, #23]
      break;
 8009748:	e000      	b.n	800974c <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 800974a:	bf00      	nop
  }

  return status;
 800974c:	7dfb      	ldrb	r3, [r7, #23]
}
 800974e:	4618      	mov	r0, r3
 8009750:	3718      	adds	r7, #24
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}
	...

08009758 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009758:	b480      	push	{r7}
 800975a:	b087      	sub	sp, #28
 800975c:	af00      	add	r7, sp, #0
 800975e:	60f8      	str	r0, [r7, #12]
 8009760:	60b9      	str	r1, [r7, #8]
 8009762:	607a      	str	r2, [r7, #4]
 8009764:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	6a1b      	ldr	r3, [r3, #32]
 800976a:	f023 0201 	bic.w	r2, r3, #1
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	699b      	ldr	r3, [r3, #24]
 8009776:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	6a1b      	ldr	r3, [r3, #32]
 800977c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	4a26      	ldr	r2, [pc, #152]	; (800981c <TIM_TI1_SetConfig+0xc4>)
 8009782:	4293      	cmp	r3, r2
 8009784:	d017      	beq.n	80097b6 <TIM_TI1_SetConfig+0x5e>
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800978c:	d013      	beq.n	80097b6 <TIM_TI1_SetConfig+0x5e>
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	4a23      	ldr	r2, [pc, #140]	; (8009820 <TIM_TI1_SetConfig+0xc8>)
 8009792:	4293      	cmp	r3, r2
 8009794:	d00f      	beq.n	80097b6 <TIM_TI1_SetConfig+0x5e>
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	4a22      	ldr	r2, [pc, #136]	; (8009824 <TIM_TI1_SetConfig+0xcc>)
 800979a:	4293      	cmp	r3, r2
 800979c:	d00b      	beq.n	80097b6 <TIM_TI1_SetConfig+0x5e>
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	4a21      	ldr	r2, [pc, #132]	; (8009828 <TIM_TI1_SetConfig+0xd0>)
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d007      	beq.n	80097b6 <TIM_TI1_SetConfig+0x5e>
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	4a20      	ldr	r2, [pc, #128]	; (800982c <TIM_TI1_SetConfig+0xd4>)
 80097aa:	4293      	cmp	r3, r2
 80097ac:	d003      	beq.n	80097b6 <TIM_TI1_SetConfig+0x5e>
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	4a1f      	ldr	r2, [pc, #124]	; (8009830 <TIM_TI1_SetConfig+0xd8>)
 80097b2:	4293      	cmp	r3, r2
 80097b4:	d101      	bne.n	80097ba <TIM_TI1_SetConfig+0x62>
 80097b6:	2301      	movs	r3, #1
 80097b8:	e000      	b.n	80097bc <TIM_TI1_SetConfig+0x64>
 80097ba:	2300      	movs	r3, #0
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d008      	beq.n	80097d2 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	f023 0303 	bic.w	r3, r3, #3
 80097c6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80097c8:	697a      	ldr	r2, [r7, #20]
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	4313      	orrs	r3, r2
 80097ce:	617b      	str	r3, [r7, #20]
 80097d0:	e003      	b.n	80097da <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80097d2:	697b      	ldr	r3, [r7, #20]
 80097d4:	f043 0301 	orr.w	r3, r3, #1
 80097d8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80097da:	697b      	ldr	r3, [r7, #20]
 80097dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80097e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	011b      	lsls	r3, r3, #4
 80097e6:	b2db      	uxtb	r3, r3
 80097e8:	697a      	ldr	r2, [r7, #20]
 80097ea:	4313      	orrs	r3, r2
 80097ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80097ee:	693b      	ldr	r3, [r7, #16]
 80097f0:	f023 030a 	bic.w	r3, r3, #10
 80097f4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80097f6:	68bb      	ldr	r3, [r7, #8]
 80097f8:	f003 030a 	and.w	r3, r3, #10
 80097fc:	693a      	ldr	r2, [r7, #16]
 80097fe:	4313      	orrs	r3, r2
 8009800:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	697a      	ldr	r2, [r7, #20]
 8009806:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	693a      	ldr	r2, [r7, #16]
 800980c:	621a      	str	r2, [r3, #32]
}
 800980e:	bf00      	nop
 8009810:	371c      	adds	r7, #28
 8009812:	46bd      	mov	sp, r7
 8009814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009818:	4770      	bx	lr
 800981a:	bf00      	nop
 800981c:	40012c00 	.word	0x40012c00
 8009820:	40000400 	.word	0x40000400
 8009824:	40000800 	.word	0x40000800
 8009828:	40000c00 	.word	0x40000c00
 800982c:	40013400 	.word	0x40013400
 8009830:	40014000 	.word	0x40014000

08009834 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009834:	b480      	push	{r7}
 8009836:	b087      	sub	sp, #28
 8009838:	af00      	add	r7, sp, #0
 800983a:	60f8      	str	r0, [r7, #12]
 800983c:	60b9      	str	r1, [r7, #8]
 800983e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	6a1b      	ldr	r3, [r3, #32]
 8009844:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	6a1b      	ldr	r3, [r3, #32]
 800984a:	f023 0201 	bic.w	r2, r3, #1
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	699b      	ldr	r3, [r3, #24]
 8009856:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009858:	693b      	ldr	r3, [r7, #16]
 800985a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800985e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	011b      	lsls	r3, r3, #4
 8009864:	693a      	ldr	r2, [r7, #16]
 8009866:	4313      	orrs	r3, r2
 8009868:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	f023 030a 	bic.w	r3, r3, #10
 8009870:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009872:	697a      	ldr	r2, [r7, #20]
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	4313      	orrs	r3, r2
 8009878:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	693a      	ldr	r2, [r7, #16]
 800987e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	697a      	ldr	r2, [r7, #20]
 8009884:	621a      	str	r2, [r3, #32]
}
 8009886:	bf00      	nop
 8009888:	371c      	adds	r7, #28
 800988a:	46bd      	mov	sp, r7
 800988c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009890:	4770      	bx	lr

08009892 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009892:	b480      	push	{r7}
 8009894:	b087      	sub	sp, #28
 8009896:	af00      	add	r7, sp, #0
 8009898:	60f8      	str	r0, [r7, #12]
 800989a:	60b9      	str	r1, [r7, #8]
 800989c:	607a      	str	r2, [r7, #4]
 800989e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	6a1b      	ldr	r3, [r3, #32]
 80098a4:	f023 0210 	bic.w	r2, r3, #16
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	699b      	ldr	r3, [r3, #24]
 80098b0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	6a1b      	ldr	r3, [r3, #32]
 80098b6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80098b8:	697b      	ldr	r3, [r7, #20]
 80098ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80098be:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	021b      	lsls	r3, r3, #8
 80098c4:	697a      	ldr	r2, [r7, #20]
 80098c6:	4313      	orrs	r3, r2
 80098c8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80098ca:	697b      	ldr	r3, [r7, #20]
 80098cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80098d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	031b      	lsls	r3, r3, #12
 80098d6:	b29b      	uxth	r3, r3
 80098d8:	697a      	ldr	r2, [r7, #20]
 80098da:	4313      	orrs	r3, r2
 80098dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80098de:	693b      	ldr	r3, [r7, #16]
 80098e0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80098e4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80098e6:	68bb      	ldr	r3, [r7, #8]
 80098e8:	011b      	lsls	r3, r3, #4
 80098ea:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80098ee:	693a      	ldr	r2, [r7, #16]
 80098f0:	4313      	orrs	r3, r2
 80098f2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	697a      	ldr	r2, [r7, #20]
 80098f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	693a      	ldr	r2, [r7, #16]
 80098fe:	621a      	str	r2, [r3, #32]
}
 8009900:	bf00      	nop
 8009902:	371c      	adds	r7, #28
 8009904:	46bd      	mov	sp, r7
 8009906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990a:	4770      	bx	lr

0800990c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800990c:	b480      	push	{r7}
 800990e:	b087      	sub	sp, #28
 8009910:	af00      	add	r7, sp, #0
 8009912:	60f8      	str	r0, [r7, #12]
 8009914:	60b9      	str	r1, [r7, #8]
 8009916:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	6a1b      	ldr	r3, [r3, #32]
 800991c:	f023 0210 	bic.w	r2, r3, #16
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	699b      	ldr	r3, [r3, #24]
 8009928:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	6a1b      	ldr	r3, [r3, #32]
 800992e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009930:	697b      	ldr	r3, [r7, #20]
 8009932:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009936:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	031b      	lsls	r3, r3, #12
 800993c:	697a      	ldr	r2, [r7, #20]
 800993e:	4313      	orrs	r3, r2
 8009940:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009942:	693b      	ldr	r3, [r7, #16]
 8009944:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009948:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800994a:	68bb      	ldr	r3, [r7, #8]
 800994c:	011b      	lsls	r3, r3, #4
 800994e:	693a      	ldr	r2, [r7, #16]
 8009950:	4313      	orrs	r3, r2
 8009952:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	697a      	ldr	r2, [r7, #20]
 8009958:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	693a      	ldr	r2, [r7, #16]
 800995e:	621a      	str	r2, [r3, #32]
}
 8009960:	bf00      	nop
 8009962:	371c      	adds	r7, #28
 8009964:	46bd      	mov	sp, r7
 8009966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996a:	4770      	bx	lr

0800996c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800996c:	b480      	push	{r7}
 800996e:	b087      	sub	sp, #28
 8009970:	af00      	add	r7, sp, #0
 8009972:	60f8      	str	r0, [r7, #12]
 8009974:	60b9      	str	r1, [r7, #8]
 8009976:	607a      	str	r2, [r7, #4]
 8009978:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	6a1b      	ldr	r3, [r3, #32]
 800997e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	69db      	ldr	r3, [r3, #28]
 800998a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	6a1b      	ldr	r3, [r3, #32]
 8009990:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009992:	697b      	ldr	r3, [r7, #20]
 8009994:	f023 0303 	bic.w	r3, r3, #3
 8009998:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800999a:	697a      	ldr	r2, [r7, #20]
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	4313      	orrs	r3, r2
 80099a0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80099a8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	011b      	lsls	r3, r3, #4
 80099ae:	b2db      	uxtb	r3, r3
 80099b0:	697a      	ldr	r2, [r7, #20]
 80099b2:	4313      	orrs	r3, r2
 80099b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80099b6:	693b      	ldr	r3, [r7, #16]
 80099b8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80099bc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	021b      	lsls	r3, r3, #8
 80099c2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80099c6:	693a      	ldr	r2, [r7, #16]
 80099c8:	4313      	orrs	r3, r2
 80099ca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	697a      	ldr	r2, [r7, #20]
 80099d0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	693a      	ldr	r2, [r7, #16]
 80099d6:	621a      	str	r2, [r3, #32]
}
 80099d8:	bf00      	nop
 80099da:	371c      	adds	r7, #28
 80099dc:	46bd      	mov	sp, r7
 80099de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e2:	4770      	bx	lr

080099e4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80099e4:	b480      	push	{r7}
 80099e6:	b087      	sub	sp, #28
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	60f8      	str	r0, [r7, #12]
 80099ec:	60b9      	str	r1, [r7, #8]
 80099ee:	607a      	str	r2, [r7, #4]
 80099f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	6a1b      	ldr	r3, [r3, #32]
 80099f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	69db      	ldr	r3, [r3, #28]
 8009a02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	6a1b      	ldr	r3, [r3, #32]
 8009a08:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009a0a:	697b      	ldr	r3, [r7, #20]
 8009a0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a10:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	021b      	lsls	r3, r3, #8
 8009a16:	697a      	ldr	r2, [r7, #20]
 8009a18:	4313      	orrs	r3, r2
 8009a1a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009a1c:	697b      	ldr	r3, [r7, #20]
 8009a1e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009a22:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	031b      	lsls	r3, r3, #12
 8009a28:	b29b      	uxth	r3, r3
 8009a2a:	697a      	ldr	r2, [r7, #20]
 8009a2c:	4313      	orrs	r3, r2
 8009a2e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009a30:	693b      	ldr	r3, [r7, #16]
 8009a32:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8009a36:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	031b      	lsls	r3, r3, #12
 8009a3c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8009a40:	693a      	ldr	r2, [r7, #16]
 8009a42:	4313      	orrs	r3, r2
 8009a44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	697a      	ldr	r2, [r7, #20]
 8009a4a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	693a      	ldr	r2, [r7, #16]
 8009a50:	621a      	str	r2, [r3, #32]
}
 8009a52:	bf00      	nop
 8009a54:	371c      	adds	r7, #28
 8009a56:	46bd      	mov	sp, r7
 8009a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5c:	4770      	bx	lr

08009a5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009a5e:	b480      	push	{r7}
 8009a60:	b085      	sub	sp, #20
 8009a62:	af00      	add	r7, sp, #0
 8009a64:	6078      	str	r0, [r7, #4]
 8009a66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	689b      	ldr	r3, [r3, #8]
 8009a6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009a76:	683a      	ldr	r2, [r7, #0]
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	4313      	orrs	r3, r2
 8009a7c:	f043 0307 	orr.w	r3, r3, #7
 8009a80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	68fa      	ldr	r2, [r7, #12]
 8009a86:	609a      	str	r2, [r3, #8]
}
 8009a88:	bf00      	nop
 8009a8a:	3714      	adds	r7, #20
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a92:	4770      	bx	lr

08009a94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009a94:	b480      	push	{r7}
 8009a96:	b087      	sub	sp, #28
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	60f8      	str	r0, [r7, #12]
 8009a9c:	60b9      	str	r1, [r7, #8]
 8009a9e:	607a      	str	r2, [r7, #4]
 8009aa0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	689b      	ldr	r3, [r3, #8]
 8009aa6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009aa8:	697b      	ldr	r3, [r7, #20]
 8009aaa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009aae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	021a      	lsls	r2, r3, #8
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	431a      	orrs	r2, r3
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	4313      	orrs	r3, r2
 8009abc:	697a      	ldr	r2, [r7, #20]
 8009abe:	4313      	orrs	r3, r2
 8009ac0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	697a      	ldr	r2, [r7, #20]
 8009ac6:	609a      	str	r2, [r3, #8]
}
 8009ac8:	bf00      	nop
 8009aca:	371c      	adds	r7, #28
 8009acc:	46bd      	mov	sp, r7
 8009ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad2:	4770      	bx	lr

08009ad4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b087      	sub	sp, #28
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	60f8      	str	r0, [r7, #12]
 8009adc:	60b9      	str	r1, [r7, #8]
 8009ade:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	f003 031f 	and.w	r3, r3, #31
 8009ae6:	2201      	movs	r2, #1
 8009ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8009aec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	6a1a      	ldr	r2, [r3, #32]
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	43db      	mvns	r3, r3
 8009af6:	401a      	ands	r2, r3
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	6a1a      	ldr	r2, [r3, #32]
 8009b00:	68bb      	ldr	r3, [r7, #8]
 8009b02:	f003 031f 	and.w	r3, r3, #31
 8009b06:	6879      	ldr	r1, [r7, #4]
 8009b08:	fa01 f303 	lsl.w	r3, r1, r3
 8009b0c:	431a      	orrs	r2, r3
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	621a      	str	r2, [r3, #32]
}
 8009b12:	bf00      	nop
 8009b14:	371c      	adds	r7, #28
 8009b16:	46bd      	mov	sp, r7
 8009b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1c:	4770      	bx	lr
	...

08009b20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009b20:	b480      	push	{r7}
 8009b22:	b085      	sub	sp, #20
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
 8009b28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b30:	2b01      	cmp	r3, #1
 8009b32:	d101      	bne.n	8009b38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009b34:	2302      	movs	r3, #2
 8009b36:	e068      	b.n	8009c0a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2201      	movs	r2, #1
 8009b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2202      	movs	r2, #2
 8009b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	685b      	ldr	r3, [r3, #4]
 8009b4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	689b      	ldr	r3, [r3, #8]
 8009b56:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	4a2e      	ldr	r2, [pc, #184]	; (8009c18 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009b5e:	4293      	cmp	r3, r2
 8009b60:	d004      	beq.n	8009b6c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	4a2d      	ldr	r2, [pc, #180]	; (8009c1c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	d108      	bne.n	8009b7e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009b72:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	685b      	ldr	r3, [r3, #4]
 8009b78:	68fa      	ldr	r2, [r7, #12]
 8009b7a:	4313      	orrs	r3, r2
 8009b7c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b84:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	68fa      	ldr	r2, [r7, #12]
 8009b8c:	4313      	orrs	r3, r2
 8009b8e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	68fa      	ldr	r2, [r7, #12]
 8009b96:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	4a1e      	ldr	r2, [pc, #120]	; (8009c18 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	d01d      	beq.n	8009bde <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009baa:	d018      	beq.n	8009bde <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	4a1b      	ldr	r2, [pc, #108]	; (8009c20 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009bb2:	4293      	cmp	r3, r2
 8009bb4:	d013      	beq.n	8009bde <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	4a1a      	ldr	r2, [pc, #104]	; (8009c24 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	d00e      	beq.n	8009bde <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	4a18      	ldr	r2, [pc, #96]	; (8009c28 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d009      	beq.n	8009bde <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	4a13      	ldr	r2, [pc, #76]	; (8009c1c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009bd0:	4293      	cmp	r3, r2
 8009bd2:	d004      	beq.n	8009bde <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	4a14      	ldr	r2, [pc, #80]	; (8009c2c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009bda:	4293      	cmp	r3, r2
 8009bdc:	d10c      	bne.n	8009bf8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009be4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	689b      	ldr	r3, [r3, #8]
 8009bea:	68ba      	ldr	r2, [r7, #8]
 8009bec:	4313      	orrs	r3, r2
 8009bee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	68ba      	ldr	r2, [r7, #8]
 8009bf6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2201      	movs	r2, #1
 8009bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2200      	movs	r2, #0
 8009c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009c08:	2300      	movs	r3, #0
}
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	3714      	adds	r7, #20
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c14:	4770      	bx	lr
 8009c16:	bf00      	nop
 8009c18:	40012c00 	.word	0x40012c00
 8009c1c:	40013400 	.word	0x40013400
 8009c20:	40000400 	.word	0x40000400
 8009c24:	40000800 	.word	0x40000800
 8009c28:	40000c00 	.word	0x40000c00
 8009c2c:	40014000 	.word	0x40014000

08009c30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009c30:	b480      	push	{r7}
 8009c32:	b083      	sub	sp, #12
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009c38:	bf00      	nop
 8009c3a:	370c      	adds	r7, #12
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c42:	4770      	bx	lr

08009c44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009c44:	b480      	push	{r7}
 8009c46:	b083      	sub	sp, #12
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009c4c:	bf00      	nop
 8009c4e:	370c      	adds	r7, #12
 8009c50:	46bd      	mov	sp, r7
 8009c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c56:	4770      	bx	lr

08009c58 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009c58:	b480      	push	{r7}
 8009c5a:	b083      	sub	sp, #12
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009c60:	bf00      	nop
 8009c62:	370c      	adds	r7, #12
 8009c64:	46bd      	mov	sp, r7
 8009c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6a:	4770      	bx	lr

08009c6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b082      	sub	sp, #8
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d101      	bne.n	8009c7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	e040      	b.n	8009d00 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d106      	bne.n	8009c94 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2200      	movs	r2, #0
 8009c8a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f7f9 ffb2 	bl	8003bf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2224      	movs	r2, #36	; 0x24
 8009c98:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	681a      	ldr	r2, [r3, #0]
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	f022 0201 	bic.w	r2, r2, #1
 8009ca8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	f000 f992 	bl	8009fd4 <UART_SetConfig>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	2b01      	cmp	r3, #1
 8009cb4:	d101      	bne.n	8009cba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	e022      	b.n	8009d00 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d002      	beq.n	8009cc8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f000 fc3e 	bl	800a544 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	685a      	ldr	r2, [r3, #4]
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009cd6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	689a      	ldr	r2, [r3, #8]
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009ce6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	681a      	ldr	r2, [r3, #0]
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	f042 0201 	orr.w	r2, r2, #1
 8009cf6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f000 fcc5 	bl	800a688 <UART_CheckIdleState>
 8009cfe:	4603      	mov	r3, r0
}
 8009d00:	4618      	mov	r0, r3
 8009d02:	3708      	adds	r7, #8
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bd80      	pop	{r7, pc}

08009d08 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b08a      	sub	sp, #40	; 0x28
 8009d0c:	af02      	add	r7, sp, #8
 8009d0e:	60f8      	str	r0, [r7, #12]
 8009d10:	60b9      	str	r1, [r7, #8]
 8009d12:	603b      	str	r3, [r7, #0]
 8009d14:	4613      	mov	r3, r2
 8009d16:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009d1c:	2b20      	cmp	r3, #32
 8009d1e:	f040 8082 	bne.w	8009e26 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009d22:	68bb      	ldr	r3, [r7, #8]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d002      	beq.n	8009d2e <HAL_UART_Transmit+0x26>
 8009d28:	88fb      	ldrh	r3, [r7, #6]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d101      	bne.n	8009d32 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009d2e:	2301      	movs	r3, #1
 8009d30:	e07a      	b.n	8009e28 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009d38:	2b01      	cmp	r3, #1
 8009d3a:	d101      	bne.n	8009d40 <HAL_UART_Transmit+0x38>
 8009d3c:	2302      	movs	r3, #2
 8009d3e:	e073      	b.n	8009e28 <HAL_UART_Transmit+0x120>
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	2201      	movs	r2, #1
 8009d44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	2221      	movs	r2, #33	; 0x21
 8009d54:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009d56:	f7fa f98d 	bl	8004074 <HAL_GetTick>
 8009d5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	88fa      	ldrh	r2, [r7, #6]
 8009d60:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	88fa      	ldrh	r2, [r7, #6]
 8009d68:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	689b      	ldr	r3, [r3, #8]
 8009d70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d74:	d108      	bne.n	8009d88 <HAL_UART_Transmit+0x80>
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	691b      	ldr	r3, [r3, #16]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d104      	bne.n	8009d88 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8009d7e:	2300      	movs	r3, #0
 8009d80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	61bb      	str	r3, [r7, #24]
 8009d86:	e003      	b.n	8009d90 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	2200      	movs	r2, #0
 8009d94:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8009d98:	e02d      	b.n	8009df6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	9300      	str	r3, [sp, #0]
 8009d9e:	697b      	ldr	r3, [r7, #20]
 8009da0:	2200      	movs	r2, #0
 8009da2:	2180      	movs	r1, #128	; 0x80
 8009da4:	68f8      	ldr	r0, [r7, #12]
 8009da6:	f000 fcb8 	bl	800a71a <UART_WaitOnFlagUntilTimeout>
 8009daa:	4603      	mov	r3, r0
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d001      	beq.n	8009db4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8009db0:	2303      	movs	r3, #3
 8009db2:	e039      	b.n	8009e28 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8009db4:	69fb      	ldr	r3, [r7, #28]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d10b      	bne.n	8009dd2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009dba:	69bb      	ldr	r3, [r7, #24]
 8009dbc:	881a      	ldrh	r2, [r3, #0]
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009dc6:	b292      	uxth	r2, r2
 8009dc8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009dca:	69bb      	ldr	r3, [r7, #24]
 8009dcc:	3302      	adds	r3, #2
 8009dce:	61bb      	str	r3, [r7, #24]
 8009dd0:	e008      	b.n	8009de4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009dd2:	69fb      	ldr	r3, [r7, #28]
 8009dd4:	781a      	ldrb	r2, [r3, #0]
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	b292      	uxth	r2, r2
 8009ddc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009dde:	69fb      	ldr	r3, [r7, #28]
 8009de0:	3301      	adds	r3, #1
 8009de2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009dea:	b29b      	uxth	r3, r3
 8009dec:	3b01      	subs	r3, #1
 8009dee:	b29a      	uxth	r2, r3
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009dfc:	b29b      	uxth	r3, r3
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d1cb      	bne.n	8009d9a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	9300      	str	r3, [sp, #0]
 8009e06:	697b      	ldr	r3, [r7, #20]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	2140      	movs	r1, #64	; 0x40
 8009e0c:	68f8      	ldr	r0, [r7, #12]
 8009e0e:	f000 fc84 	bl	800a71a <UART_WaitOnFlagUntilTimeout>
 8009e12:	4603      	mov	r3, r0
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d001      	beq.n	8009e1c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8009e18:	2303      	movs	r3, #3
 8009e1a:	e005      	b.n	8009e28 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	2220      	movs	r2, #32
 8009e20:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8009e22:	2300      	movs	r3, #0
 8009e24:	e000      	b.n	8009e28 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8009e26:	2302      	movs	r3, #2
  }
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	3720      	adds	r7, #32
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bd80      	pop	{r7, pc}

08009e30 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b08a      	sub	sp, #40	; 0x28
 8009e34:	af02      	add	r7, sp, #8
 8009e36:	60f8      	str	r0, [r7, #12]
 8009e38:	60b9      	str	r1, [r7, #8]
 8009e3a:	603b      	str	r3, [r7, #0]
 8009e3c:	4613      	mov	r3, r2
 8009e3e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e44:	2b20      	cmp	r3, #32
 8009e46:	f040 80bf 	bne.w	8009fc8 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d002      	beq.n	8009e56 <HAL_UART_Receive+0x26>
 8009e50:	88fb      	ldrh	r3, [r7, #6]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d101      	bne.n	8009e5a <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8009e56:	2301      	movs	r3, #1
 8009e58:	e0b7      	b.n	8009fca <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009e60:	2b01      	cmp	r3, #1
 8009e62:	d101      	bne.n	8009e68 <HAL_UART_Receive+0x38>
 8009e64:	2302      	movs	r3, #2
 8009e66:	e0b0      	b.n	8009fca <HAL_UART_Receive+0x19a>
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	2201      	movs	r2, #1
 8009e6c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	2200      	movs	r2, #0
 8009e74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	2222      	movs	r2, #34	; 0x22
 8009e7c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	2200      	movs	r2, #0
 8009e82:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009e84:	f7fa f8f6 	bl	8004074 <HAL_GetTick>
 8009e88:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	88fa      	ldrh	r2, [r7, #6]
 8009e8e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	88fa      	ldrh	r2, [r7, #6]
 8009e96:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	689b      	ldr	r3, [r3, #8]
 8009e9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ea2:	d10e      	bne.n	8009ec2 <HAL_UART_Receive+0x92>
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	691b      	ldr	r3, [r3, #16]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d105      	bne.n	8009eb8 <HAL_UART_Receive+0x88>
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009eb2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009eb6:	e02d      	b.n	8009f14 <HAL_UART_Receive+0xe4>
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	22ff      	movs	r2, #255	; 0xff
 8009ebc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009ec0:	e028      	b.n	8009f14 <HAL_UART_Receive+0xe4>
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	689b      	ldr	r3, [r3, #8]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d10d      	bne.n	8009ee6 <HAL_UART_Receive+0xb6>
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	691b      	ldr	r3, [r3, #16]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d104      	bne.n	8009edc <HAL_UART_Receive+0xac>
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	22ff      	movs	r2, #255	; 0xff
 8009ed6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009eda:	e01b      	b.n	8009f14 <HAL_UART_Receive+0xe4>
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	227f      	movs	r2, #127	; 0x7f
 8009ee0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009ee4:	e016      	b.n	8009f14 <HAL_UART_Receive+0xe4>
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	689b      	ldr	r3, [r3, #8]
 8009eea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009eee:	d10d      	bne.n	8009f0c <HAL_UART_Receive+0xdc>
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	691b      	ldr	r3, [r3, #16]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d104      	bne.n	8009f02 <HAL_UART_Receive+0xd2>
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	227f      	movs	r2, #127	; 0x7f
 8009efc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009f00:	e008      	b.n	8009f14 <HAL_UART_Receive+0xe4>
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	223f      	movs	r2, #63	; 0x3f
 8009f06:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009f0a:	e003      	b.n	8009f14 <HAL_UART_Receive+0xe4>
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	2200      	movs	r2, #0
 8009f10:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009f1a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	689b      	ldr	r3, [r3, #8]
 8009f20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f24:	d108      	bne.n	8009f38 <HAL_UART_Receive+0x108>
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	691b      	ldr	r3, [r3, #16]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d104      	bne.n	8009f38 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8009f2e:	2300      	movs	r3, #0
 8009f30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	61bb      	str	r3, [r7, #24]
 8009f36:	e003      	b.n	8009f40 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	2200      	movs	r2, #0
 8009f44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8009f48:	e033      	b.n	8009fb2 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	9300      	str	r3, [sp, #0]
 8009f4e:	697b      	ldr	r3, [r7, #20]
 8009f50:	2200      	movs	r2, #0
 8009f52:	2120      	movs	r1, #32
 8009f54:	68f8      	ldr	r0, [r7, #12]
 8009f56:	f000 fbe0 	bl	800a71a <UART_WaitOnFlagUntilTimeout>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d001      	beq.n	8009f64 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8009f60:	2303      	movs	r3, #3
 8009f62:	e032      	b.n	8009fca <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8009f64:	69fb      	ldr	r3, [r7, #28]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d10c      	bne.n	8009f84 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009f70:	b29a      	uxth	r2, r3
 8009f72:	8a7b      	ldrh	r3, [r7, #18]
 8009f74:	4013      	ands	r3, r2
 8009f76:	b29a      	uxth	r2, r3
 8009f78:	69bb      	ldr	r3, [r7, #24]
 8009f7a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009f7c:	69bb      	ldr	r3, [r7, #24]
 8009f7e:	3302      	adds	r3, #2
 8009f80:	61bb      	str	r3, [r7, #24]
 8009f82:	e00d      	b.n	8009fa0 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009f8a:	b29b      	uxth	r3, r3
 8009f8c:	b2da      	uxtb	r2, r3
 8009f8e:	8a7b      	ldrh	r3, [r7, #18]
 8009f90:	b2db      	uxtb	r3, r3
 8009f92:	4013      	ands	r3, r2
 8009f94:	b2da      	uxtb	r2, r3
 8009f96:	69fb      	ldr	r3, [r7, #28]
 8009f98:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8009f9a:	69fb      	ldr	r3, [r7, #28]
 8009f9c:	3301      	adds	r3, #1
 8009f9e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009fa6:	b29b      	uxth	r3, r3
 8009fa8:	3b01      	subs	r3, #1
 8009faa:	b29a      	uxth	r2, r3
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009fb8:	b29b      	uxth	r3, r3
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d1c5      	bne.n	8009f4a <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	2220      	movs	r2, #32
 8009fc2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	e000      	b.n	8009fca <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8009fc8:	2302      	movs	r3, #2
  }
}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	3720      	adds	r7, #32
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}
	...

08009fd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009fd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009fd8:	b08a      	sub	sp, #40	; 0x28
 8009fda:	af00      	add	r7, sp, #0
 8009fdc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009fde:	2300      	movs	r3, #0
 8009fe0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	689a      	ldr	r2, [r3, #8]
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	691b      	ldr	r3, [r3, #16]
 8009fec:	431a      	orrs	r2, r3
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	695b      	ldr	r3, [r3, #20]
 8009ff2:	431a      	orrs	r2, r3
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	69db      	ldr	r3, [r3, #28]
 8009ff8:	4313      	orrs	r3, r2
 8009ffa:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	681a      	ldr	r2, [r3, #0]
 800a002:	4ba4      	ldr	r3, [pc, #656]	; (800a294 <UART_SetConfig+0x2c0>)
 800a004:	4013      	ands	r3, r2
 800a006:	68fa      	ldr	r2, [r7, #12]
 800a008:	6812      	ldr	r2, [r2, #0]
 800a00a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a00c:	430b      	orrs	r3, r1
 800a00e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	685b      	ldr	r3, [r3, #4]
 800a016:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	68da      	ldr	r2, [r3, #12]
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	430a      	orrs	r2, r1
 800a024:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	699b      	ldr	r3, [r3, #24]
 800a02a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	4a99      	ldr	r2, [pc, #612]	; (800a298 <UART_SetConfig+0x2c4>)
 800a032:	4293      	cmp	r3, r2
 800a034:	d004      	beq.n	800a040 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	6a1b      	ldr	r3, [r3, #32]
 800a03a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a03c:	4313      	orrs	r3, r2
 800a03e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	689b      	ldr	r3, [r3, #8]
 800a046:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a050:	430a      	orrs	r2, r1
 800a052:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	4a90      	ldr	r2, [pc, #576]	; (800a29c <UART_SetConfig+0x2c8>)
 800a05a:	4293      	cmp	r3, r2
 800a05c:	d126      	bne.n	800a0ac <UART_SetConfig+0xd8>
 800a05e:	4b90      	ldr	r3, [pc, #576]	; (800a2a0 <UART_SetConfig+0x2cc>)
 800a060:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a064:	f003 0303 	and.w	r3, r3, #3
 800a068:	2b03      	cmp	r3, #3
 800a06a:	d81b      	bhi.n	800a0a4 <UART_SetConfig+0xd0>
 800a06c:	a201      	add	r2, pc, #4	; (adr r2, 800a074 <UART_SetConfig+0xa0>)
 800a06e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a072:	bf00      	nop
 800a074:	0800a085 	.word	0x0800a085
 800a078:	0800a095 	.word	0x0800a095
 800a07c:	0800a08d 	.word	0x0800a08d
 800a080:	0800a09d 	.word	0x0800a09d
 800a084:	2301      	movs	r3, #1
 800a086:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a08a:	e116      	b.n	800a2ba <UART_SetConfig+0x2e6>
 800a08c:	2302      	movs	r3, #2
 800a08e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a092:	e112      	b.n	800a2ba <UART_SetConfig+0x2e6>
 800a094:	2304      	movs	r3, #4
 800a096:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a09a:	e10e      	b.n	800a2ba <UART_SetConfig+0x2e6>
 800a09c:	2308      	movs	r3, #8
 800a09e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a0a2:	e10a      	b.n	800a2ba <UART_SetConfig+0x2e6>
 800a0a4:	2310      	movs	r3, #16
 800a0a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a0aa:	e106      	b.n	800a2ba <UART_SetConfig+0x2e6>
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	4a7c      	ldr	r2, [pc, #496]	; (800a2a4 <UART_SetConfig+0x2d0>)
 800a0b2:	4293      	cmp	r3, r2
 800a0b4:	d138      	bne.n	800a128 <UART_SetConfig+0x154>
 800a0b6:	4b7a      	ldr	r3, [pc, #488]	; (800a2a0 <UART_SetConfig+0x2cc>)
 800a0b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0bc:	f003 030c 	and.w	r3, r3, #12
 800a0c0:	2b0c      	cmp	r3, #12
 800a0c2:	d82d      	bhi.n	800a120 <UART_SetConfig+0x14c>
 800a0c4:	a201      	add	r2, pc, #4	; (adr r2, 800a0cc <UART_SetConfig+0xf8>)
 800a0c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0ca:	bf00      	nop
 800a0cc:	0800a101 	.word	0x0800a101
 800a0d0:	0800a121 	.word	0x0800a121
 800a0d4:	0800a121 	.word	0x0800a121
 800a0d8:	0800a121 	.word	0x0800a121
 800a0dc:	0800a111 	.word	0x0800a111
 800a0e0:	0800a121 	.word	0x0800a121
 800a0e4:	0800a121 	.word	0x0800a121
 800a0e8:	0800a121 	.word	0x0800a121
 800a0ec:	0800a109 	.word	0x0800a109
 800a0f0:	0800a121 	.word	0x0800a121
 800a0f4:	0800a121 	.word	0x0800a121
 800a0f8:	0800a121 	.word	0x0800a121
 800a0fc:	0800a119 	.word	0x0800a119
 800a100:	2300      	movs	r3, #0
 800a102:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a106:	e0d8      	b.n	800a2ba <UART_SetConfig+0x2e6>
 800a108:	2302      	movs	r3, #2
 800a10a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a10e:	e0d4      	b.n	800a2ba <UART_SetConfig+0x2e6>
 800a110:	2304      	movs	r3, #4
 800a112:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a116:	e0d0      	b.n	800a2ba <UART_SetConfig+0x2e6>
 800a118:	2308      	movs	r3, #8
 800a11a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a11e:	e0cc      	b.n	800a2ba <UART_SetConfig+0x2e6>
 800a120:	2310      	movs	r3, #16
 800a122:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a126:	e0c8      	b.n	800a2ba <UART_SetConfig+0x2e6>
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	4a5e      	ldr	r2, [pc, #376]	; (800a2a8 <UART_SetConfig+0x2d4>)
 800a12e:	4293      	cmp	r3, r2
 800a130:	d125      	bne.n	800a17e <UART_SetConfig+0x1aa>
 800a132:	4b5b      	ldr	r3, [pc, #364]	; (800a2a0 <UART_SetConfig+0x2cc>)
 800a134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a138:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a13c:	2b30      	cmp	r3, #48	; 0x30
 800a13e:	d016      	beq.n	800a16e <UART_SetConfig+0x19a>
 800a140:	2b30      	cmp	r3, #48	; 0x30
 800a142:	d818      	bhi.n	800a176 <UART_SetConfig+0x1a2>
 800a144:	2b20      	cmp	r3, #32
 800a146:	d00a      	beq.n	800a15e <UART_SetConfig+0x18a>
 800a148:	2b20      	cmp	r3, #32
 800a14a:	d814      	bhi.n	800a176 <UART_SetConfig+0x1a2>
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d002      	beq.n	800a156 <UART_SetConfig+0x182>
 800a150:	2b10      	cmp	r3, #16
 800a152:	d008      	beq.n	800a166 <UART_SetConfig+0x192>
 800a154:	e00f      	b.n	800a176 <UART_SetConfig+0x1a2>
 800a156:	2300      	movs	r3, #0
 800a158:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a15c:	e0ad      	b.n	800a2ba <UART_SetConfig+0x2e6>
 800a15e:	2302      	movs	r3, #2
 800a160:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a164:	e0a9      	b.n	800a2ba <UART_SetConfig+0x2e6>
 800a166:	2304      	movs	r3, #4
 800a168:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a16c:	e0a5      	b.n	800a2ba <UART_SetConfig+0x2e6>
 800a16e:	2308      	movs	r3, #8
 800a170:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a174:	e0a1      	b.n	800a2ba <UART_SetConfig+0x2e6>
 800a176:	2310      	movs	r3, #16
 800a178:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a17c:	e09d      	b.n	800a2ba <UART_SetConfig+0x2e6>
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	4a4a      	ldr	r2, [pc, #296]	; (800a2ac <UART_SetConfig+0x2d8>)
 800a184:	4293      	cmp	r3, r2
 800a186:	d125      	bne.n	800a1d4 <UART_SetConfig+0x200>
 800a188:	4b45      	ldr	r3, [pc, #276]	; (800a2a0 <UART_SetConfig+0x2cc>)
 800a18a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a18e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a192:	2bc0      	cmp	r3, #192	; 0xc0
 800a194:	d016      	beq.n	800a1c4 <UART_SetConfig+0x1f0>
 800a196:	2bc0      	cmp	r3, #192	; 0xc0
 800a198:	d818      	bhi.n	800a1cc <UART_SetConfig+0x1f8>
 800a19a:	2b80      	cmp	r3, #128	; 0x80
 800a19c:	d00a      	beq.n	800a1b4 <UART_SetConfig+0x1e0>
 800a19e:	2b80      	cmp	r3, #128	; 0x80
 800a1a0:	d814      	bhi.n	800a1cc <UART_SetConfig+0x1f8>
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d002      	beq.n	800a1ac <UART_SetConfig+0x1d8>
 800a1a6:	2b40      	cmp	r3, #64	; 0x40
 800a1a8:	d008      	beq.n	800a1bc <UART_SetConfig+0x1e8>
 800a1aa:	e00f      	b.n	800a1cc <UART_SetConfig+0x1f8>
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a1b2:	e082      	b.n	800a2ba <UART_SetConfig+0x2e6>
 800a1b4:	2302      	movs	r3, #2
 800a1b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a1ba:	e07e      	b.n	800a2ba <UART_SetConfig+0x2e6>
 800a1bc:	2304      	movs	r3, #4
 800a1be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a1c2:	e07a      	b.n	800a2ba <UART_SetConfig+0x2e6>
 800a1c4:	2308      	movs	r3, #8
 800a1c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a1ca:	e076      	b.n	800a2ba <UART_SetConfig+0x2e6>
 800a1cc:	2310      	movs	r3, #16
 800a1ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a1d2:	e072      	b.n	800a2ba <UART_SetConfig+0x2e6>
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	4a35      	ldr	r2, [pc, #212]	; (800a2b0 <UART_SetConfig+0x2dc>)
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	d12a      	bne.n	800a234 <UART_SetConfig+0x260>
 800a1de:	4b30      	ldr	r3, [pc, #192]	; (800a2a0 <UART_SetConfig+0x2cc>)
 800a1e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a1e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a1ec:	d01a      	beq.n	800a224 <UART_SetConfig+0x250>
 800a1ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a1f2:	d81b      	bhi.n	800a22c <UART_SetConfig+0x258>
 800a1f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a1f8:	d00c      	beq.n	800a214 <UART_SetConfig+0x240>
 800a1fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a1fe:	d815      	bhi.n	800a22c <UART_SetConfig+0x258>
 800a200:	2b00      	cmp	r3, #0
 800a202:	d003      	beq.n	800a20c <UART_SetConfig+0x238>
 800a204:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a208:	d008      	beq.n	800a21c <UART_SetConfig+0x248>
 800a20a:	e00f      	b.n	800a22c <UART_SetConfig+0x258>
 800a20c:	2300      	movs	r3, #0
 800a20e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a212:	e052      	b.n	800a2ba <UART_SetConfig+0x2e6>
 800a214:	2302      	movs	r3, #2
 800a216:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a21a:	e04e      	b.n	800a2ba <UART_SetConfig+0x2e6>
 800a21c:	2304      	movs	r3, #4
 800a21e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a222:	e04a      	b.n	800a2ba <UART_SetConfig+0x2e6>
 800a224:	2308      	movs	r3, #8
 800a226:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a22a:	e046      	b.n	800a2ba <UART_SetConfig+0x2e6>
 800a22c:	2310      	movs	r3, #16
 800a22e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a232:	e042      	b.n	800a2ba <UART_SetConfig+0x2e6>
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	4a17      	ldr	r2, [pc, #92]	; (800a298 <UART_SetConfig+0x2c4>)
 800a23a:	4293      	cmp	r3, r2
 800a23c:	d13a      	bne.n	800a2b4 <UART_SetConfig+0x2e0>
 800a23e:	4b18      	ldr	r3, [pc, #96]	; (800a2a0 <UART_SetConfig+0x2cc>)
 800a240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a244:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a248:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a24c:	d01a      	beq.n	800a284 <UART_SetConfig+0x2b0>
 800a24e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a252:	d81b      	bhi.n	800a28c <UART_SetConfig+0x2b8>
 800a254:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a258:	d00c      	beq.n	800a274 <UART_SetConfig+0x2a0>
 800a25a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a25e:	d815      	bhi.n	800a28c <UART_SetConfig+0x2b8>
 800a260:	2b00      	cmp	r3, #0
 800a262:	d003      	beq.n	800a26c <UART_SetConfig+0x298>
 800a264:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a268:	d008      	beq.n	800a27c <UART_SetConfig+0x2a8>
 800a26a:	e00f      	b.n	800a28c <UART_SetConfig+0x2b8>
 800a26c:	2300      	movs	r3, #0
 800a26e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a272:	e022      	b.n	800a2ba <UART_SetConfig+0x2e6>
 800a274:	2302      	movs	r3, #2
 800a276:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a27a:	e01e      	b.n	800a2ba <UART_SetConfig+0x2e6>
 800a27c:	2304      	movs	r3, #4
 800a27e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a282:	e01a      	b.n	800a2ba <UART_SetConfig+0x2e6>
 800a284:	2308      	movs	r3, #8
 800a286:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a28a:	e016      	b.n	800a2ba <UART_SetConfig+0x2e6>
 800a28c:	2310      	movs	r3, #16
 800a28e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a292:	e012      	b.n	800a2ba <UART_SetConfig+0x2e6>
 800a294:	efff69f3 	.word	0xefff69f3
 800a298:	40008000 	.word	0x40008000
 800a29c:	40013800 	.word	0x40013800
 800a2a0:	40021000 	.word	0x40021000
 800a2a4:	40004400 	.word	0x40004400
 800a2a8:	40004800 	.word	0x40004800
 800a2ac:	40004c00 	.word	0x40004c00
 800a2b0:	40005000 	.word	0x40005000
 800a2b4:	2310      	movs	r3, #16
 800a2b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	4a9f      	ldr	r2, [pc, #636]	; (800a53c <UART_SetConfig+0x568>)
 800a2c0:	4293      	cmp	r3, r2
 800a2c2:	d17a      	bne.n	800a3ba <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a2c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a2c8:	2b08      	cmp	r3, #8
 800a2ca:	d824      	bhi.n	800a316 <UART_SetConfig+0x342>
 800a2cc:	a201      	add	r2, pc, #4	; (adr r2, 800a2d4 <UART_SetConfig+0x300>)
 800a2ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2d2:	bf00      	nop
 800a2d4:	0800a2f9 	.word	0x0800a2f9
 800a2d8:	0800a317 	.word	0x0800a317
 800a2dc:	0800a301 	.word	0x0800a301
 800a2e0:	0800a317 	.word	0x0800a317
 800a2e4:	0800a307 	.word	0x0800a307
 800a2e8:	0800a317 	.word	0x0800a317
 800a2ec:	0800a317 	.word	0x0800a317
 800a2f0:	0800a317 	.word	0x0800a317
 800a2f4:	0800a30f 	.word	0x0800a30f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a2f8:	f7fc f938 	bl	800656c <HAL_RCC_GetPCLK1Freq>
 800a2fc:	61f8      	str	r0, [r7, #28]
        break;
 800a2fe:	e010      	b.n	800a322 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a300:	4b8f      	ldr	r3, [pc, #572]	; (800a540 <UART_SetConfig+0x56c>)
 800a302:	61fb      	str	r3, [r7, #28]
        break;
 800a304:	e00d      	b.n	800a322 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a306:	f7fc f899 	bl	800643c <HAL_RCC_GetSysClockFreq>
 800a30a:	61f8      	str	r0, [r7, #28]
        break;
 800a30c:	e009      	b.n	800a322 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a30e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a312:	61fb      	str	r3, [r7, #28]
        break;
 800a314:	e005      	b.n	800a322 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800a316:	2300      	movs	r3, #0
 800a318:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a31a:	2301      	movs	r3, #1
 800a31c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800a320:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a322:	69fb      	ldr	r3, [r7, #28]
 800a324:	2b00      	cmp	r3, #0
 800a326:	f000 80fb 	beq.w	800a520 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	685a      	ldr	r2, [r3, #4]
 800a32e:	4613      	mov	r3, r2
 800a330:	005b      	lsls	r3, r3, #1
 800a332:	4413      	add	r3, r2
 800a334:	69fa      	ldr	r2, [r7, #28]
 800a336:	429a      	cmp	r2, r3
 800a338:	d305      	bcc.n	800a346 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	685b      	ldr	r3, [r3, #4]
 800a33e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a340:	69fa      	ldr	r2, [r7, #28]
 800a342:	429a      	cmp	r2, r3
 800a344:	d903      	bls.n	800a34e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800a346:	2301      	movs	r3, #1
 800a348:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800a34c:	e0e8      	b.n	800a520 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800a34e:	69fb      	ldr	r3, [r7, #28]
 800a350:	2200      	movs	r2, #0
 800a352:	461c      	mov	r4, r3
 800a354:	4615      	mov	r5, r2
 800a356:	f04f 0200 	mov.w	r2, #0
 800a35a:	f04f 0300 	mov.w	r3, #0
 800a35e:	022b      	lsls	r3, r5, #8
 800a360:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800a364:	0222      	lsls	r2, r4, #8
 800a366:	68f9      	ldr	r1, [r7, #12]
 800a368:	6849      	ldr	r1, [r1, #4]
 800a36a:	0849      	lsrs	r1, r1, #1
 800a36c:	2000      	movs	r0, #0
 800a36e:	4688      	mov	r8, r1
 800a370:	4681      	mov	r9, r0
 800a372:	eb12 0a08 	adds.w	sl, r2, r8
 800a376:	eb43 0b09 	adc.w	fp, r3, r9
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	685b      	ldr	r3, [r3, #4]
 800a37e:	2200      	movs	r2, #0
 800a380:	603b      	str	r3, [r7, #0]
 800a382:	607a      	str	r2, [r7, #4]
 800a384:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a388:	4650      	mov	r0, sl
 800a38a:	4659      	mov	r1, fp
 800a38c:	f7f6 fc0c 	bl	8000ba8 <__aeabi_uldivmod>
 800a390:	4602      	mov	r2, r0
 800a392:	460b      	mov	r3, r1
 800a394:	4613      	mov	r3, r2
 800a396:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a398:	69bb      	ldr	r3, [r7, #24]
 800a39a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a39e:	d308      	bcc.n	800a3b2 <UART_SetConfig+0x3de>
 800a3a0:	69bb      	ldr	r3, [r7, #24]
 800a3a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a3a6:	d204      	bcs.n	800a3b2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	69ba      	ldr	r2, [r7, #24]
 800a3ae:	60da      	str	r2, [r3, #12]
 800a3b0:	e0b6      	b.n	800a520 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800a3b8:	e0b2      	b.n	800a520 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	69db      	ldr	r3, [r3, #28]
 800a3be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a3c2:	d15e      	bne.n	800a482 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800a3c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a3c8:	2b08      	cmp	r3, #8
 800a3ca:	d828      	bhi.n	800a41e <UART_SetConfig+0x44a>
 800a3cc:	a201      	add	r2, pc, #4	; (adr r2, 800a3d4 <UART_SetConfig+0x400>)
 800a3ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3d2:	bf00      	nop
 800a3d4:	0800a3f9 	.word	0x0800a3f9
 800a3d8:	0800a401 	.word	0x0800a401
 800a3dc:	0800a409 	.word	0x0800a409
 800a3e0:	0800a41f 	.word	0x0800a41f
 800a3e4:	0800a40f 	.word	0x0800a40f
 800a3e8:	0800a41f 	.word	0x0800a41f
 800a3ec:	0800a41f 	.word	0x0800a41f
 800a3f0:	0800a41f 	.word	0x0800a41f
 800a3f4:	0800a417 	.word	0x0800a417
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a3f8:	f7fc f8b8 	bl	800656c <HAL_RCC_GetPCLK1Freq>
 800a3fc:	61f8      	str	r0, [r7, #28]
        break;
 800a3fe:	e014      	b.n	800a42a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a400:	f7fc f8ca 	bl	8006598 <HAL_RCC_GetPCLK2Freq>
 800a404:	61f8      	str	r0, [r7, #28]
        break;
 800a406:	e010      	b.n	800a42a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a408:	4b4d      	ldr	r3, [pc, #308]	; (800a540 <UART_SetConfig+0x56c>)
 800a40a:	61fb      	str	r3, [r7, #28]
        break;
 800a40c:	e00d      	b.n	800a42a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a40e:	f7fc f815 	bl	800643c <HAL_RCC_GetSysClockFreq>
 800a412:	61f8      	str	r0, [r7, #28]
        break;
 800a414:	e009      	b.n	800a42a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a416:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a41a:	61fb      	str	r3, [r7, #28]
        break;
 800a41c:	e005      	b.n	800a42a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800a41e:	2300      	movs	r3, #0
 800a420:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a422:	2301      	movs	r3, #1
 800a424:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800a428:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a42a:	69fb      	ldr	r3, [r7, #28]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d077      	beq.n	800a520 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a430:	69fb      	ldr	r3, [r7, #28]
 800a432:	005a      	lsls	r2, r3, #1
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	685b      	ldr	r3, [r3, #4]
 800a438:	085b      	lsrs	r3, r3, #1
 800a43a:	441a      	add	r2, r3
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	685b      	ldr	r3, [r3, #4]
 800a440:	fbb2 f3f3 	udiv	r3, r2, r3
 800a444:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a446:	69bb      	ldr	r3, [r7, #24]
 800a448:	2b0f      	cmp	r3, #15
 800a44a:	d916      	bls.n	800a47a <UART_SetConfig+0x4a6>
 800a44c:	69bb      	ldr	r3, [r7, #24]
 800a44e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a452:	d212      	bcs.n	800a47a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a454:	69bb      	ldr	r3, [r7, #24]
 800a456:	b29b      	uxth	r3, r3
 800a458:	f023 030f 	bic.w	r3, r3, #15
 800a45c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a45e:	69bb      	ldr	r3, [r7, #24]
 800a460:	085b      	lsrs	r3, r3, #1
 800a462:	b29b      	uxth	r3, r3
 800a464:	f003 0307 	and.w	r3, r3, #7
 800a468:	b29a      	uxth	r2, r3
 800a46a:	8afb      	ldrh	r3, [r7, #22]
 800a46c:	4313      	orrs	r3, r2
 800a46e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	8afa      	ldrh	r2, [r7, #22]
 800a476:	60da      	str	r2, [r3, #12]
 800a478:	e052      	b.n	800a520 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800a47a:	2301      	movs	r3, #1
 800a47c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800a480:	e04e      	b.n	800a520 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a482:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a486:	2b08      	cmp	r3, #8
 800a488:	d827      	bhi.n	800a4da <UART_SetConfig+0x506>
 800a48a:	a201      	add	r2, pc, #4	; (adr r2, 800a490 <UART_SetConfig+0x4bc>)
 800a48c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a490:	0800a4b5 	.word	0x0800a4b5
 800a494:	0800a4bd 	.word	0x0800a4bd
 800a498:	0800a4c5 	.word	0x0800a4c5
 800a49c:	0800a4db 	.word	0x0800a4db
 800a4a0:	0800a4cb 	.word	0x0800a4cb
 800a4a4:	0800a4db 	.word	0x0800a4db
 800a4a8:	0800a4db 	.word	0x0800a4db
 800a4ac:	0800a4db 	.word	0x0800a4db
 800a4b0:	0800a4d3 	.word	0x0800a4d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a4b4:	f7fc f85a 	bl	800656c <HAL_RCC_GetPCLK1Freq>
 800a4b8:	61f8      	str	r0, [r7, #28]
        break;
 800a4ba:	e014      	b.n	800a4e6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a4bc:	f7fc f86c 	bl	8006598 <HAL_RCC_GetPCLK2Freq>
 800a4c0:	61f8      	str	r0, [r7, #28]
        break;
 800a4c2:	e010      	b.n	800a4e6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a4c4:	4b1e      	ldr	r3, [pc, #120]	; (800a540 <UART_SetConfig+0x56c>)
 800a4c6:	61fb      	str	r3, [r7, #28]
        break;
 800a4c8:	e00d      	b.n	800a4e6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a4ca:	f7fb ffb7 	bl	800643c <HAL_RCC_GetSysClockFreq>
 800a4ce:	61f8      	str	r0, [r7, #28]
        break;
 800a4d0:	e009      	b.n	800a4e6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a4d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a4d6:	61fb      	str	r3, [r7, #28]
        break;
 800a4d8:	e005      	b.n	800a4e6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800a4da:	2300      	movs	r3, #0
 800a4dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a4de:	2301      	movs	r3, #1
 800a4e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800a4e4:	bf00      	nop
    }

    if (pclk != 0U)
 800a4e6:	69fb      	ldr	r3, [r7, #28]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d019      	beq.n	800a520 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	685b      	ldr	r3, [r3, #4]
 800a4f0:	085a      	lsrs	r2, r3, #1
 800a4f2:	69fb      	ldr	r3, [r7, #28]
 800a4f4:	441a      	add	r2, r3
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	685b      	ldr	r3, [r3, #4]
 800a4fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4fe:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a500:	69bb      	ldr	r3, [r7, #24]
 800a502:	2b0f      	cmp	r3, #15
 800a504:	d909      	bls.n	800a51a <UART_SetConfig+0x546>
 800a506:	69bb      	ldr	r3, [r7, #24]
 800a508:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a50c:	d205      	bcs.n	800a51a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a50e:	69bb      	ldr	r3, [r7, #24]
 800a510:	b29a      	uxth	r2, r3
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	60da      	str	r2, [r3, #12]
 800a518:	e002      	b.n	800a520 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800a51a:	2301      	movs	r3, #1
 800a51c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	2200      	movs	r2, #0
 800a524:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	2200      	movs	r2, #0
 800a52a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800a52c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800a530:	4618      	mov	r0, r3
 800a532:	3728      	adds	r7, #40	; 0x28
 800a534:	46bd      	mov	sp, r7
 800a536:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a53a:	bf00      	nop
 800a53c:	40008000 	.word	0x40008000
 800a540:	00f42400 	.word	0x00f42400

0800a544 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a544:	b480      	push	{r7}
 800a546:	b083      	sub	sp, #12
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a550:	f003 0301 	and.w	r3, r3, #1
 800a554:	2b00      	cmp	r3, #0
 800a556:	d00a      	beq.n	800a56e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	685b      	ldr	r3, [r3, #4]
 800a55e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	430a      	orrs	r2, r1
 800a56c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a572:	f003 0302 	and.w	r3, r3, #2
 800a576:	2b00      	cmp	r3, #0
 800a578:	d00a      	beq.n	800a590 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	685b      	ldr	r3, [r3, #4]
 800a580:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	430a      	orrs	r2, r1
 800a58e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a594:	f003 0304 	and.w	r3, r3, #4
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d00a      	beq.n	800a5b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	685b      	ldr	r3, [r3, #4]
 800a5a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	430a      	orrs	r2, r1
 800a5b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5b6:	f003 0308 	and.w	r3, r3, #8
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d00a      	beq.n	800a5d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	685b      	ldr	r3, [r3, #4]
 800a5c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	430a      	orrs	r2, r1
 800a5d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5d8:	f003 0310 	and.w	r3, r3, #16
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d00a      	beq.n	800a5f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	689b      	ldr	r3, [r3, #8]
 800a5e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	430a      	orrs	r2, r1
 800a5f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5fa:	f003 0320 	and.w	r3, r3, #32
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d00a      	beq.n	800a618 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	689b      	ldr	r3, [r3, #8]
 800a608:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	430a      	orrs	r2, r1
 800a616:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a61c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a620:	2b00      	cmp	r3, #0
 800a622:	d01a      	beq.n	800a65a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	685b      	ldr	r3, [r3, #4]
 800a62a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	430a      	orrs	r2, r1
 800a638:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a63e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a642:	d10a      	bne.n	800a65a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	685b      	ldr	r3, [r3, #4]
 800a64a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	430a      	orrs	r2, r1
 800a658:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a65e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a662:	2b00      	cmp	r3, #0
 800a664:	d00a      	beq.n	800a67c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	685b      	ldr	r3, [r3, #4]
 800a66c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	430a      	orrs	r2, r1
 800a67a:	605a      	str	r2, [r3, #4]
  }
}
 800a67c:	bf00      	nop
 800a67e:	370c      	adds	r7, #12
 800a680:	46bd      	mov	sp, r7
 800a682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a686:	4770      	bx	lr

0800a688 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b086      	sub	sp, #24
 800a68c:	af02      	add	r7, sp, #8
 800a68e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2200      	movs	r2, #0
 800a694:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a698:	f7f9 fcec 	bl	8004074 <HAL_GetTick>
 800a69c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	f003 0308 	and.w	r3, r3, #8
 800a6a8:	2b08      	cmp	r3, #8
 800a6aa:	d10e      	bne.n	800a6ca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a6ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a6b0:	9300      	str	r3, [sp, #0]
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a6ba:	6878      	ldr	r0, [r7, #4]
 800a6bc:	f000 f82d 	bl	800a71a <UART_WaitOnFlagUntilTimeout>
 800a6c0:	4603      	mov	r3, r0
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d001      	beq.n	800a6ca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a6c6:	2303      	movs	r3, #3
 800a6c8:	e023      	b.n	800a712 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f003 0304 	and.w	r3, r3, #4
 800a6d4:	2b04      	cmp	r3, #4
 800a6d6:	d10e      	bne.n	800a6f6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a6d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a6dc:	9300      	str	r3, [sp, #0]
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f000 f817 	bl	800a71a <UART_WaitOnFlagUntilTimeout>
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d001      	beq.n	800a6f6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a6f2:	2303      	movs	r3, #3
 800a6f4:	e00d      	b.n	800a712 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	2220      	movs	r2, #32
 800a6fa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2220      	movs	r2, #32
 800a700:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2200      	movs	r2, #0
 800a706:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2200      	movs	r2, #0
 800a70c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800a710:	2300      	movs	r3, #0
}
 800a712:	4618      	mov	r0, r3
 800a714:	3710      	adds	r7, #16
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}

0800a71a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a71a:	b580      	push	{r7, lr}
 800a71c:	b09c      	sub	sp, #112	; 0x70
 800a71e:	af00      	add	r7, sp, #0
 800a720:	60f8      	str	r0, [r7, #12]
 800a722:	60b9      	str	r1, [r7, #8]
 800a724:	603b      	str	r3, [r7, #0]
 800a726:	4613      	mov	r3, r2
 800a728:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a72a:	e0a5      	b.n	800a878 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a72c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a72e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a732:	f000 80a1 	beq.w	800a878 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a736:	f7f9 fc9d 	bl	8004074 <HAL_GetTick>
 800a73a:	4602      	mov	r2, r0
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	1ad3      	subs	r3, r2, r3
 800a740:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a742:	429a      	cmp	r2, r3
 800a744:	d302      	bcc.n	800a74c <UART_WaitOnFlagUntilTimeout+0x32>
 800a746:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d13e      	bne.n	800a7ca <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a752:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a754:	e853 3f00 	ldrex	r3, [r3]
 800a758:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a75a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a75c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a760:	667b      	str	r3, [r7, #100]	; 0x64
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	461a      	mov	r2, r3
 800a768:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a76a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a76c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a76e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a770:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a772:	e841 2300 	strex	r3, r2, [r1]
 800a776:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a778:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d1e6      	bne.n	800a74c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	3308      	adds	r3, #8
 800a784:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a786:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a788:	e853 3f00 	ldrex	r3, [r3]
 800a78c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a78e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a790:	f023 0301 	bic.w	r3, r3, #1
 800a794:	663b      	str	r3, [r7, #96]	; 0x60
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	3308      	adds	r3, #8
 800a79c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a79e:	64ba      	str	r2, [r7, #72]	; 0x48
 800a7a0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a7a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a7a6:	e841 2300 	strex	r3, r2, [r1]
 800a7aa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a7ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d1e5      	bne.n	800a77e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	2220      	movs	r2, #32
 800a7b6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	2220      	movs	r2, #32
 800a7bc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800a7c6:	2303      	movs	r3, #3
 800a7c8:	e067      	b.n	800a89a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	f003 0304 	and.w	r3, r3, #4
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d04f      	beq.n	800a878 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	69db      	ldr	r3, [r3, #28]
 800a7de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a7e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a7e6:	d147      	bne.n	800a878 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a7f0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7fa:	e853 3f00 	ldrex	r3, [r3]
 800a7fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a802:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a806:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	461a      	mov	r2, r3
 800a80e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a810:	637b      	str	r3, [r7, #52]	; 0x34
 800a812:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a814:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a816:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a818:	e841 2300 	strex	r3, r2, [r1]
 800a81c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a81e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a820:	2b00      	cmp	r3, #0
 800a822:	d1e6      	bne.n	800a7f2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	3308      	adds	r3, #8
 800a82a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a82c:	697b      	ldr	r3, [r7, #20]
 800a82e:	e853 3f00 	ldrex	r3, [r3]
 800a832:	613b      	str	r3, [r7, #16]
   return(result);
 800a834:	693b      	ldr	r3, [r7, #16]
 800a836:	f023 0301 	bic.w	r3, r3, #1
 800a83a:	66bb      	str	r3, [r7, #104]	; 0x68
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	3308      	adds	r3, #8
 800a842:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a844:	623a      	str	r2, [r7, #32]
 800a846:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a848:	69f9      	ldr	r1, [r7, #28]
 800a84a:	6a3a      	ldr	r2, [r7, #32]
 800a84c:	e841 2300 	strex	r3, r2, [r1]
 800a850:	61bb      	str	r3, [r7, #24]
   return(result);
 800a852:	69bb      	ldr	r3, [r7, #24]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d1e5      	bne.n	800a824 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	2220      	movs	r2, #32
 800a85c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	2220      	movs	r2, #32
 800a862:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	2220      	movs	r2, #32
 800a868:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	2200      	movs	r2, #0
 800a870:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800a874:	2303      	movs	r3, #3
 800a876:	e010      	b.n	800a89a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	69da      	ldr	r2, [r3, #28]
 800a87e:	68bb      	ldr	r3, [r7, #8]
 800a880:	4013      	ands	r3, r2
 800a882:	68ba      	ldr	r2, [r7, #8]
 800a884:	429a      	cmp	r2, r3
 800a886:	bf0c      	ite	eq
 800a888:	2301      	moveq	r3, #1
 800a88a:	2300      	movne	r3, #0
 800a88c:	b2db      	uxtb	r3, r3
 800a88e:	461a      	mov	r2, r3
 800a890:	79fb      	ldrb	r3, [r7, #7]
 800a892:	429a      	cmp	r2, r3
 800a894:	f43f af4a 	beq.w	800a72c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a898:	2300      	movs	r3, #0
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	3770      	adds	r7, #112	; 0x70
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}
	...

0800a8a4 <__errno>:
 800a8a4:	4b01      	ldr	r3, [pc, #4]	; (800a8ac <__errno+0x8>)
 800a8a6:	6818      	ldr	r0, [r3, #0]
 800a8a8:	4770      	bx	lr
 800a8aa:	bf00      	nop
 800a8ac:	200000c8 	.word	0x200000c8

0800a8b0 <__libc_init_array>:
 800a8b0:	b570      	push	{r4, r5, r6, lr}
 800a8b2:	4d0d      	ldr	r5, [pc, #52]	; (800a8e8 <__libc_init_array+0x38>)
 800a8b4:	4c0d      	ldr	r4, [pc, #52]	; (800a8ec <__libc_init_array+0x3c>)
 800a8b6:	1b64      	subs	r4, r4, r5
 800a8b8:	10a4      	asrs	r4, r4, #2
 800a8ba:	2600      	movs	r6, #0
 800a8bc:	42a6      	cmp	r6, r4
 800a8be:	d109      	bne.n	800a8d4 <__libc_init_array+0x24>
 800a8c0:	4d0b      	ldr	r5, [pc, #44]	; (800a8f0 <__libc_init_array+0x40>)
 800a8c2:	4c0c      	ldr	r4, [pc, #48]	; (800a8f4 <__libc_init_array+0x44>)
 800a8c4:	f002 fd38 	bl	800d338 <_init>
 800a8c8:	1b64      	subs	r4, r4, r5
 800a8ca:	10a4      	asrs	r4, r4, #2
 800a8cc:	2600      	movs	r6, #0
 800a8ce:	42a6      	cmp	r6, r4
 800a8d0:	d105      	bne.n	800a8de <__libc_init_array+0x2e>
 800a8d2:	bd70      	pop	{r4, r5, r6, pc}
 800a8d4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8d8:	4798      	blx	r3
 800a8da:	3601      	adds	r6, #1
 800a8dc:	e7ee      	b.n	800a8bc <__libc_init_array+0xc>
 800a8de:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8e2:	4798      	blx	r3
 800a8e4:	3601      	adds	r6, #1
 800a8e6:	e7f2      	b.n	800a8ce <__libc_init_array+0x1e>
 800a8e8:	0800d77c 	.word	0x0800d77c
 800a8ec:	0800d77c 	.word	0x0800d77c
 800a8f0:	0800d77c 	.word	0x0800d77c
 800a8f4:	0800d780 	.word	0x0800d780

0800a8f8 <memset>:
 800a8f8:	4402      	add	r2, r0
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	4293      	cmp	r3, r2
 800a8fe:	d100      	bne.n	800a902 <memset+0xa>
 800a900:	4770      	bx	lr
 800a902:	f803 1b01 	strb.w	r1, [r3], #1
 800a906:	e7f9      	b.n	800a8fc <memset+0x4>

0800a908 <__cvt>:
 800a908:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a90c:	ec55 4b10 	vmov	r4, r5, d0
 800a910:	2d00      	cmp	r5, #0
 800a912:	460e      	mov	r6, r1
 800a914:	4619      	mov	r1, r3
 800a916:	462b      	mov	r3, r5
 800a918:	bfbb      	ittet	lt
 800a91a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a91e:	461d      	movlt	r5, r3
 800a920:	2300      	movge	r3, #0
 800a922:	232d      	movlt	r3, #45	; 0x2d
 800a924:	700b      	strb	r3, [r1, #0]
 800a926:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a928:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a92c:	4691      	mov	r9, r2
 800a92e:	f023 0820 	bic.w	r8, r3, #32
 800a932:	bfbc      	itt	lt
 800a934:	4622      	movlt	r2, r4
 800a936:	4614      	movlt	r4, r2
 800a938:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a93c:	d005      	beq.n	800a94a <__cvt+0x42>
 800a93e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a942:	d100      	bne.n	800a946 <__cvt+0x3e>
 800a944:	3601      	adds	r6, #1
 800a946:	2102      	movs	r1, #2
 800a948:	e000      	b.n	800a94c <__cvt+0x44>
 800a94a:	2103      	movs	r1, #3
 800a94c:	ab03      	add	r3, sp, #12
 800a94e:	9301      	str	r3, [sp, #4]
 800a950:	ab02      	add	r3, sp, #8
 800a952:	9300      	str	r3, [sp, #0]
 800a954:	ec45 4b10 	vmov	d0, r4, r5
 800a958:	4653      	mov	r3, sl
 800a95a:	4632      	mov	r2, r6
 800a95c:	f000 fccc 	bl	800b2f8 <_dtoa_r>
 800a960:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a964:	4607      	mov	r7, r0
 800a966:	d102      	bne.n	800a96e <__cvt+0x66>
 800a968:	f019 0f01 	tst.w	r9, #1
 800a96c:	d022      	beq.n	800a9b4 <__cvt+0xac>
 800a96e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a972:	eb07 0906 	add.w	r9, r7, r6
 800a976:	d110      	bne.n	800a99a <__cvt+0x92>
 800a978:	783b      	ldrb	r3, [r7, #0]
 800a97a:	2b30      	cmp	r3, #48	; 0x30
 800a97c:	d10a      	bne.n	800a994 <__cvt+0x8c>
 800a97e:	2200      	movs	r2, #0
 800a980:	2300      	movs	r3, #0
 800a982:	4620      	mov	r0, r4
 800a984:	4629      	mov	r1, r5
 800a986:	f7f6 f89f 	bl	8000ac8 <__aeabi_dcmpeq>
 800a98a:	b918      	cbnz	r0, 800a994 <__cvt+0x8c>
 800a98c:	f1c6 0601 	rsb	r6, r6, #1
 800a990:	f8ca 6000 	str.w	r6, [sl]
 800a994:	f8da 3000 	ldr.w	r3, [sl]
 800a998:	4499      	add	r9, r3
 800a99a:	2200      	movs	r2, #0
 800a99c:	2300      	movs	r3, #0
 800a99e:	4620      	mov	r0, r4
 800a9a0:	4629      	mov	r1, r5
 800a9a2:	f7f6 f891 	bl	8000ac8 <__aeabi_dcmpeq>
 800a9a6:	b108      	cbz	r0, 800a9ac <__cvt+0xa4>
 800a9a8:	f8cd 900c 	str.w	r9, [sp, #12]
 800a9ac:	2230      	movs	r2, #48	; 0x30
 800a9ae:	9b03      	ldr	r3, [sp, #12]
 800a9b0:	454b      	cmp	r3, r9
 800a9b2:	d307      	bcc.n	800a9c4 <__cvt+0xbc>
 800a9b4:	9b03      	ldr	r3, [sp, #12]
 800a9b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a9b8:	1bdb      	subs	r3, r3, r7
 800a9ba:	4638      	mov	r0, r7
 800a9bc:	6013      	str	r3, [r2, #0]
 800a9be:	b004      	add	sp, #16
 800a9c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9c4:	1c59      	adds	r1, r3, #1
 800a9c6:	9103      	str	r1, [sp, #12]
 800a9c8:	701a      	strb	r2, [r3, #0]
 800a9ca:	e7f0      	b.n	800a9ae <__cvt+0xa6>

0800a9cc <__exponent>:
 800a9cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	2900      	cmp	r1, #0
 800a9d2:	bfb8      	it	lt
 800a9d4:	4249      	neglt	r1, r1
 800a9d6:	f803 2b02 	strb.w	r2, [r3], #2
 800a9da:	bfb4      	ite	lt
 800a9dc:	222d      	movlt	r2, #45	; 0x2d
 800a9de:	222b      	movge	r2, #43	; 0x2b
 800a9e0:	2909      	cmp	r1, #9
 800a9e2:	7042      	strb	r2, [r0, #1]
 800a9e4:	dd2a      	ble.n	800aa3c <__exponent+0x70>
 800a9e6:	f10d 0407 	add.w	r4, sp, #7
 800a9ea:	46a4      	mov	ip, r4
 800a9ec:	270a      	movs	r7, #10
 800a9ee:	46a6      	mov	lr, r4
 800a9f0:	460a      	mov	r2, r1
 800a9f2:	fb91 f6f7 	sdiv	r6, r1, r7
 800a9f6:	fb07 1516 	mls	r5, r7, r6, r1
 800a9fa:	3530      	adds	r5, #48	; 0x30
 800a9fc:	2a63      	cmp	r2, #99	; 0x63
 800a9fe:	f104 34ff 	add.w	r4, r4, #4294967295
 800aa02:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800aa06:	4631      	mov	r1, r6
 800aa08:	dcf1      	bgt.n	800a9ee <__exponent+0x22>
 800aa0a:	3130      	adds	r1, #48	; 0x30
 800aa0c:	f1ae 0502 	sub.w	r5, lr, #2
 800aa10:	f804 1c01 	strb.w	r1, [r4, #-1]
 800aa14:	1c44      	adds	r4, r0, #1
 800aa16:	4629      	mov	r1, r5
 800aa18:	4561      	cmp	r1, ip
 800aa1a:	d30a      	bcc.n	800aa32 <__exponent+0x66>
 800aa1c:	f10d 0209 	add.w	r2, sp, #9
 800aa20:	eba2 020e 	sub.w	r2, r2, lr
 800aa24:	4565      	cmp	r5, ip
 800aa26:	bf88      	it	hi
 800aa28:	2200      	movhi	r2, #0
 800aa2a:	4413      	add	r3, r2
 800aa2c:	1a18      	subs	r0, r3, r0
 800aa2e:	b003      	add	sp, #12
 800aa30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa32:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aa36:	f804 2f01 	strb.w	r2, [r4, #1]!
 800aa3a:	e7ed      	b.n	800aa18 <__exponent+0x4c>
 800aa3c:	2330      	movs	r3, #48	; 0x30
 800aa3e:	3130      	adds	r1, #48	; 0x30
 800aa40:	7083      	strb	r3, [r0, #2]
 800aa42:	70c1      	strb	r1, [r0, #3]
 800aa44:	1d03      	adds	r3, r0, #4
 800aa46:	e7f1      	b.n	800aa2c <__exponent+0x60>

0800aa48 <_printf_float>:
 800aa48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa4c:	ed2d 8b02 	vpush	{d8}
 800aa50:	b08d      	sub	sp, #52	; 0x34
 800aa52:	460c      	mov	r4, r1
 800aa54:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800aa58:	4616      	mov	r6, r2
 800aa5a:	461f      	mov	r7, r3
 800aa5c:	4605      	mov	r5, r0
 800aa5e:	f001 fb2f 	bl	800c0c0 <_localeconv_r>
 800aa62:	f8d0 a000 	ldr.w	sl, [r0]
 800aa66:	4650      	mov	r0, sl
 800aa68:	f7f5 fbb2 	bl	80001d0 <strlen>
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	930a      	str	r3, [sp, #40]	; 0x28
 800aa70:	6823      	ldr	r3, [r4, #0]
 800aa72:	9305      	str	r3, [sp, #20]
 800aa74:	f8d8 3000 	ldr.w	r3, [r8]
 800aa78:	f894 b018 	ldrb.w	fp, [r4, #24]
 800aa7c:	3307      	adds	r3, #7
 800aa7e:	f023 0307 	bic.w	r3, r3, #7
 800aa82:	f103 0208 	add.w	r2, r3, #8
 800aa86:	f8c8 2000 	str.w	r2, [r8]
 800aa8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa8e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800aa92:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800aa96:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800aa9a:	9307      	str	r3, [sp, #28]
 800aa9c:	f8cd 8018 	str.w	r8, [sp, #24]
 800aaa0:	ee08 0a10 	vmov	s16, r0
 800aaa4:	4b9f      	ldr	r3, [pc, #636]	; (800ad24 <_printf_float+0x2dc>)
 800aaa6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aaaa:	f04f 32ff 	mov.w	r2, #4294967295
 800aaae:	f7f6 f83d 	bl	8000b2c <__aeabi_dcmpun>
 800aab2:	bb88      	cbnz	r0, 800ab18 <_printf_float+0xd0>
 800aab4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aab8:	4b9a      	ldr	r3, [pc, #616]	; (800ad24 <_printf_float+0x2dc>)
 800aaba:	f04f 32ff 	mov.w	r2, #4294967295
 800aabe:	f7f6 f817 	bl	8000af0 <__aeabi_dcmple>
 800aac2:	bb48      	cbnz	r0, 800ab18 <_printf_float+0xd0>
 800aac4:	2200      	movs	r2, #0
 800aac6:	2300      	movs	r3, #0
 800aac8:	4640      	mov	r0, r8
 800aaca:	4649      	mov	r1, r9
 800aacc:	f7f6 f806 	bl	8000adc <__aeabi_dcmplt>
 800aad0:	b110      	cbz	r0, 800aad8 <_printf_float+0x90>
 800aad2:	232d      	movs	r3, #45	; 0x2d
 800aad4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aad8:	4b93      	ldr	r3, [pc, #588]	; (800ad28 <_printf_float+0x2e0>)
 800aada:	4894      	ldr	r0, [pc, #592]	; (800ad2c <_printf_float+0x2e4>)
 800aadc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800aae0:	bf94      	ite	ls
 800aae2:	4698      	movls	r8, r3
 800aae4:	4680      	movhi	r8, r0
 800aae6:	2303      	movs	r3, #3
 800aae8:	6123      	str	r3, [r4, #16]
 800aaea:	9b05      	ldr	r3, [sp, #20]
 800aaec:	f023 0204 	bic.w	r2, r3, #4
 800aaf0:	6022      	str	r2, [r4, #0]
 800aaf2:	f04f 0900 	mov.w	r9, #0
 800aaf6:	9700      	str	r7, [sp, #0]
 800aaf8:	4633      	mov	r3, r6
 800aafa:	aa0b      	add	r2, sp, #44	; 0x2c
 800aafc:	4621      	mov	r1, r4
 800aafe:	4628      	mov	r0, r5
 800ab00:	f000 f9d8 	bl	800aeb4 <_printf_common>
 800ab04:	3001      	adds	r0, #1
 800ab06:	f040 8090 	bne.w	800ac2a <_printf_float+0x1e2>
 800ab0a:	f04f 30ff 	mov.w	r0, #4294967295
 800ab0e:	b00d      	add	sp, #52	; 0x34
 800ab10:	ecbd 8b02 	vpop	{d8}
 800ab14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab18:	4642      	mov	r2, r8
 800ab1a:	464b      	mov	r3, r9
 800ab1c:	4640      	mov	r0, r8
 800ab1e:	4649      	mov	r1, r9
 800ab20:	f7f6 f804 	bl	8000b2c <__aeabi_dcmpun>
 800ab24:	b140      	cbz	r0, 800ab38 <_printf_float+0xf0>
 800ab26:	464b      	mov	r3, r9
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	bfbc      	itt	lt
 800ab2c:	232d      	movlt	r3, #45	; 0x2d
 800ab2e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ab32:	487f      	ldr	r0, [pc, #508]	; (800ad30 <_printf_float+0x2e8>)
 800ab34:	4b7f      	ldr	r3, [pc, #508]	; (800ad34 <_printf_float+0x2ec>)
 800ab36:	e7d1      	b.n	800aadc <_printf_float+0x94>
 800ab38:	6863      	ldr	r3, [r4, #4]
 800ab3a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ab3e:	9206      	str	r2, [sp, #24]
 800ab40:	1c5a      	adds	r2, r3, #1
 800ab42:	d13f      	bne.n	800abc4 <_printf_float+0x17c>
 800ab44:	2306      	movs	r3, #6
 800ab46:	6063      	str	r3, [r4, #4]
 800ab48:	9b05      	ldr	r3, [sp, #20]
 800ab4a:	6861      	ldr	r1, [r4, #4]
 800ab4c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ab50:	2300      	movs	r3, #0
 800ab52:	9303      	str	r3, [sp, #12]
 800ab54:	ab0a      	add	r3, sp, #40	; 0x28
 800ab56:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ab5a:	ab09      	add	r3, sp, #36	; 0x24
 800ab5c:	ec49 8b10 	vmov	d0, r8, r9
 800ab60:	9300      	str	r3, [sp, #0]
 800ab62:	6022      	str	r2, [r4, #0]
 800ab64:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ab68:	4628      	mov	r0, r5
 800ab6a:	f7ff fecd 	bl	800a908 <__cvt>
 800ab6e:	9b06      	ldr	r3, [sp, #24]
 800ab70:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ab72:	2b47      	cmp	r3, #71	; 0x47
 800ab74:	4680      	mov	r8, r0
 800ab76:	d108      	bne.n	800ab8a <_printf_float+0x142>
 800ab78:	1cc8      	adds	r0, r1, #3
 800ab7a:	db02      	blt.n	800ab82 <_printf_float+0x13a>
 800ab7c:	6863      	ldr	r3, [r4, #4]
 800ab7e:	4299      	cmp	r1, r3
 800ab80:	dd41      	ble.n	800ac06 <_printf_float+0x1be>
 800ab82:	f1ab 0b02 	sub.w	fp, fp, #2
 800ab86:	fa5f fb8b 	uxtb.w	fp, fp
 800ab8a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ab8e:	d820      	bhi.n	800abd2 <_printf_float+0x18a>
 800ab90:	3901      	subs	r1, #1
 800ab92:	465a      	mov	r2, fp
 800ab94:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ab98:	9109      	str	r1, [sp, #36]	; 0x24
 800ab9a:	f7ff ff17 	bl	800a9cc <__exponent>
 800ab9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aba0:	1813      	adds	r3, r2, r0
 800aba2:	2a01      	cmp	r2, #1
 800aba4:	4681      	mov	r9, r0
 800aba6:	6123      	str	r3, [r4, #16]
 800aba8:	dc02      	bgt.n	800abb0 <_printf_float+0x168>
 800abaa:	6822      	ldr	r2, [r4, #0]
 800abac:	07d2      	lsls	r2, r2, #31
 800abae:	d501      	bpl.n	800abb4 <_printf_float+0x16c>
 800abb0:	3301      	adds	r3, #1
 800abb2:	6123      	str	r3, [r4, #16]
 800abb4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d09c      	beq.n	800aaf6 <_printf_float+0xae>
 800abbc:	232d      	movs	r3, #45	; 0x2d
 800abbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800abc2:	e798      	b.n	800aaf6 <_printf_float+0xae>
 800abc4:	9a06      	ldr	r2, [sp, #24]
 800abc6:	2a47      	cmp	r2, #71	; 0x47
 800abc8:	d1be      	bne.n	800ab48 <_printf_float+0x100>
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d1bc      	bne.n	800ab48 <_printf_float+0x100>
 800abce:	2301      	movs	r3, #1
 800abd0:	e7b9      	b.n	800ab46 <_printf_float+0xfe>
 800abd2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800abd6:	d118      	bne.n	800ac0a <_printf_float+0x1c2>
 800abd8:	2900      	cmp	r1, #0
 800abda:	6863      	ldr	r3, [r4, #4]
 800abdc:	dd0b      	ble.n	800abf6 <_printf_float+0x1ae>
 800abde:	6121      	str	r1, [r4, #16]
 800abe0:	b913      	cbnz	r3, 800abe8 <_printf_float+0x1a0>
 800abe2:	6822      	ldr	r2, [r4, #0]
 800abe4:	07d0      	lsls	r0, r2, #31
 800abe6:	d502      	bpl.n	800abee <_printf_float+0x1a6>
 800abe8:	3301      	adds	r3, #1
 800abea:	440b      	add	r3, r1
 800abec:	6123      	str	r3, [r4, #16]
 800abee:	65a1      	str	r1, [r4, #88]	; 0x58
 800abf0:	f04f 0900 	mov.w	r9, #0
 800abf4:	e7de      	b.n	800abb4 <_printf_float+0x16c>
 800abf6:	b913      	cbnz	r3, 800abfe <_printf_float+0x1b6>
 800abf8:	6822      	ldr	r2, [r4, #0]
 800abfa:	07d2      	lsls	r2, r2, #31
 800abfc:	d501      	bpl.n	800ac02 <_printf_float+0x1ba>
 800abfe:	3302      	adds	r3, #2
 800ac00:	e7f4      	b.n	800abec <_printf_float+0x1a4>
 800ac02:	2301      	movs	r3, #1
 800ac04:	e7f2      	b.n	800abec <_printf_float+0x1a4>
 800ac06:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ac0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac0c:	4299      	cmp	r1, r3
 800ac0e:	db05      	blt.n	800ac1c <_printf_float+0x1d4>
 800ac10:	6823      	ldr	r3, [r4, #0]
 800ac12:	6121      	str	r1, [r4, #16]
 800ac14:	07d8      	lsls	r0, r3, #31
 800ac16:	d5ea      	bpl.n	800abee <_printf_float+0x1a6>
 800ac18:	1c4b      	adds	r3, r1, #1
 800ac1a:	e7e7      	b.n	800abec <_printf_float+0x1a4>
 800ac1c:	2900      	cmp	r1, #0
 800ac1e:	bfd4      	ite	le
 800ac20:	f1c1 0202 	rsble	r2, r1, #2
 800ac24:	2201      	movgt	r2, #1
 800ac26:	4413      	add	r3, r2
 800ac28:	e7e0      	b.n	800abec <_printf_float+0x1a4>
 800ac2a:	6823      	ldr	r3, [r4, #0]
 800ac2c:	055a      	lsls	r2, r3, #21
 800ac2e:	d407      	bmi.n	800ac40 <_printf_float+0x1f8>
 800ac30:	6923      	ldr	r3, [r4, #16]
 800ac32:	4642      	mov	r2, r8
 800ac34:	4631      	mov	r1, r6
 800ac36:	4628      	mov	r0, r5
 800ac38:	47b8      	blx	r7
 800ac3a:	3001      	adds	r0, #1
 800ac3c:	d12c      	bne.n	800ac98 <_printf_float+0x250>
 800ac3e:	e764      	b.n	800ab0a <_printf_float+0xc2>
 800ac40:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ac44:	f240 80e0 	bls.w	800ae08 <_printf_float+0x3c0>
 800ac48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	2300      	movs	r3, #0
 800ac50:	f7f5 ff3a 	bl	8000ac8 <__aeabi_dcmpeq>
 800ac54:	2800      	cmp	r0, #0
 800ac56:	d034      	beq.n	800acc2 <_printf_float+0x27a>
 800ac58:	4a37      	ldr	r2, [pc, #220]	; (800ad38 <_printf_float+0x2f0>)
 800ac5a:	2301      	movs	r3, #1
 800ac5c:	4631      	mov	r1, r6
 800ac5e:	4628      	mov	r0, r5
 800ac60:	47b8      	blx	r7
 800ac62:	3001      	adds	r0, #1
 800ac64:	f43f af51 	beq.w	800ab0a <_printf_float+0xc2>
 800ac68:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ac6c:	429a      	cmp	r2, r3
 800ac6e:	db02      	blt.n	800ac76 <_printf_float+0x22e>
 800ac70:	6823      	ldr	r3, [r4, #0]
 800ac72:	07d8      	lsls	r0, r3, #31
 800ac74:	d510      	bpl.n	800ac98 <_printf_float+0x250>
 800ac76:	ee18 3a10 	vmov	r3, s16
 800ac7a:	4652      	mov	r2, sl
 800ac7c:	4631      	mov	r1, r6
 800ac7e:	4628      	mov	r0, r5
 800ac80:	47b8      	blx	r7
 800ac82:	3001      	adds	r0, #1
 800ac84:	f43f af41 	beq.w	800ab0a <_printf_float+0xc2>
 800ac88:	f04f 0800 	mov.w	r8, #0
 800ac8c:	f104 091a 	add.w	r9, r4, #26
 800ac90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac92:	3b01      	subs	r3, #1
 800ac94:	4543      	cmp	r3, r8
 800ac96:	dc09      	bgt.n	800acac <_printf_float+0x264>
 800ac98:	6823      	ldr	r3, [r4, #0]
 800ac9a:	079b      	lsls	r3, r3, #30
 800ac9c:	f100 8105 	bmi.w	800aeaa <_printf_float+0x462>
 800aca0:	68e0      	ldr	r0, [r4, #12]
 800aca2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aca4:	4298      	cmp	r0, r3
 800aca6:	bfb8      	it	lt
 800aca8:	4618      	movlt	r0, r3
 800acaa:	e730      	b.n	800ab0e <_printf_float+0xc6>
 800acac:	2301      	movs	r3, #1
 800acae:	464a      	mov	r2, r9
 800acb0:	4631      	mov	r1, r6
 800acb2:	4628      	mov	r0, r5
 800acb4:	47b8      	blx	r7
 800acb6:	3001      	adds	r0, #1
 800acb8:	f43f af27 	beq.w	800ab0a <_printf_float+0xc2>
 800acbc:	f108 0801 	add.w	r8, r8, #1
 800acc0:	e7e6      	b.n	800ac90 <_printf_float+0x248>
 800acc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	dc39      	bgt.n	800ad3c <_printf_float+0x2f4>
 800acc8:	4a1b      	ldr	r2, [pc, #108]	; (800ad38 <_printf_float+0x2f0>)
 800acca:	2301      	movs	r3, #1
 800accc:	4631      	mov	r1, r6
 800acce:	4628      	mov	r0, r5
 800acd0:	47b8      	blx	r7
 800acd2:	3001      	adds	r0, #1
 800acd4:	f43f af19 	beq.w	800ab0a <_printf_float+0xc2>
 800acd8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800acdc:	4313      	orrs	r3, r2
 800acde:	d102      	bne.n	800ace6 <_printf_float+0x29e>
 800ace0:	6823      	ldr	r3, [r4, #0]
 800ace2:	07d9      	lsls	r1, r3, #31
 800ace4:	d5d8      	bpl.n	800ac98 <_printf_float+0x250>
 800ace6:	ee18 3a10 	vmov	r3, s16
 800acea:	4652      	mov	r2, sl
 800acec:	4631      	mov	r1, r6
 800acee:	4628      	mov	r0, r5
 800acf0:	47b8      	blx	r7
 800acf2:	3001      	adds	r0, #1
 800acf4:	f43f af09 	beq.w	800ab0a <_printf_float+0xc2>
 800acf8:	f04f 0900 	mov.w	r9, #0
 800acfc:	f104 0a1a 	add.w	sl, r4, #26
 800ad00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad02:	425b      	negs	r3, r3
 800ad04:	454b      	cmp	r3, r9
 800ad06:	dc01      	bgt.n	800ad0c <_printf_float+0x2c4>
 800ad08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad0a:	e792      	b.n	800ac32 <_printf_float+0x1ea>
 800ad0c:	2301      	movs	r3, #1
 800ad0e:	4652      	mov	r2, sl
 800ad10:	4631      	mov	r1, r6
 800ad12:	4628      	mov	r0, r5
 800ad14:	47b8      	blx	r7
 800ad16:	3001      	adds	r0, #1
 800ad18:	f43f aef7 	beq.w	800ab0a <_printf_float+0xc2>
 800ad1c:	f109 0901 	add.w	r9, r9, #1
 800ad20:	e7ee      	b.n	800ad00 <_printf_float+0x2b8>
 800ad22:	bf00      	nop
 800ad24:	7fefffff 	.word	0x7fefffff
 800ad28:	0800d39c 	.word	0x0800d39c
 800ad2c:	0800d3a0 	.word	0x0800d3a0
 800ad30:	0800d3a8 	.word	0x0800d3a8
 800ad34:	0800d3a4 	.word	0x0800d3a4
 800ad38:	0800d3ac 	.word	0x0800d3ac
 800ad3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad3e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ad40:	429a      	cmp	r2, r3
 800ad42:	bfa8      	it	ge
 800ad44:	461a      	movge	r2, r3
 800ad46:	2a00      	cmp	r2, #0
 800ad48:	4691      	mov	r9, r2
 800ad4a:	dc37      	bgt.n	800adbc <_printf_float+0x374>
 800ad4c:	f04f 0b00 	mov.w	fp, #0
 800ad50:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ad54:	f104 021a 	add.w	r2, r4, #26
 800ad58:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ad5a:	9305      	str	r3, [sp, #20]
 800ad5c:	eba3 0309 	sub.w	r3, r3, r9
 800ad60:	455b      	cmp	r3, fp
 800ad62:	dc33      	bgt.n	800adcc <_printf_float+0x384>
 800ad64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ad68:	429a      	cmp	r2, r3
 800ad6a:	db3b      	blt.n	800ade4 <_printf_float+0x39c>
 800ad6c:	6823      	ldr	r3, [r4, #0]
 800ad6e:	07da      	lsls	r2, r3, #31
 800ad70:	d438      	bmi.n	800ade4 <_printf_float+0x39c>
 800ad72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad74:	9a05      	ldr	r2, [sp, #20]
 800ad76:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ad78:	1a9a      	subs	r2, r3, r2
 800ad7a:	eba3 0901 	sub.w	r9, r3, r1
 800ad7e:	4591      	cmp	r9, r2
 800ad80:	bfa8      	it	ge
 800ad82:	4691      	movge	r9, r2
 800ad84:	f1b9 0f00 	cmp.w	r9, #0
 800ad88:	dc35      	bgt.n	800adf6 <_printf_float+0x3ae>
 800ad8a:	f04f 0800 	mov.w	r8, #0
 800ad8e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ad92:	f104 0a1a 	add.w	sl, r4, #26
 800ad96:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ad9a:	1a9b      	subs	r3, r3, r2
 800ad9c:	eba3 0309 	sub.w	r3, r3, r9
 800ada0:	4543      	cmp	r3, r8
 800ada2:	f77f af79 	ble.w	800ac98 <_printf_float+0x250>
 800ada6:	2301      	movs	r3, #1
 800ada8:	4652      	mov	r2, sl
 800adaa:	4631      	mov	r1, r6
 800adac:	4628      	mov	r0, r5
 800adae:	47b8      	blx	r7
 800adb0:	3001      	adds	r0, #1
 800adb2:	f43f aeaa 	beq.w	800ab0a <_printf_float+0xc2>
 800adb6:	f108 0801 	add.w	r8, r8, #1
 800adba:	e7ec      	b.n	800ad96 <_printf_float+0x34e>
 800adbc:	4613      	mov	r3, r2
 800adbe:	4631      	mov	r1, r6
 800adc0:	4642      	mov	r2, r8
 800adc2:	4628      	mov	r0, r5
 800adc4:	47b8      	blx	r7
 800adc6:	3001      	adds	r0, #1
 800adc8:	d1c0      	bne.n	800ad4c <_printf_float+0x304>
 800adca:	e69e      	b.n	800ab0a <_printf_float+0xc2>
 800adcc:	2301      	movs	r3, #1
 800adce:	4631      	mov	r1, r6
 800add0:	4628      	mov	r0, r5
 800add2:	9205      	str	r2, [sp, #20]
 800add4:	47b8      	blx	r7
 800add6:	3001      	adds	r0, #1
 800add8:	f43f ae97 	beq.w	800ab0a <_printf_float+0xc2>
 800addc:	9a05      	ldr	r2, [sp, #20]
 800adde:	f10b 0b01 	add.w	fp, fp, #1
 800ade2:	e7b9      	b.n	800ad58 <_printf_float+0x310>
 800ade4:	ee18 3a10 	vmov	r3, s16
 800ade8:	4652      	mov	r2, sl
 800adea:	4631      	mov	r1, r6
 800adec:	4628      	mov	r0, r5
 800adee:	47b8      	blx	r7
 800adf0:	3001      	adds	r0, #1
 800adf2:	d1be      	bne.n	800ad72 <_printf_float+0x32a>
 800adf4:	e689      	b.n	800ab0a <_printf_float+0xc2>
 800adf6:	9a05      	ldr	r2, [sp, #20]
 800adf8:	464b      	mov	r3, r9
 800adfa:	4442      	add	r2, r8
 800adfc:	4631      	mov	r1, r6
 800adfe:	4628      	mov	r0, r5
 800ae00:	47b8      	blx	r7
 800ae02:	3001      	adds	r0, #1
 800ae04:	d1c1      	bne.n	800ad8a <_printf_float+0x342>
 800ae06:	e680      	b.n	800ab0a <_printf_float+0xc2>
 800ae08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ae0a:	2a01      	cmp	r2, #1
 800ae0c:	dc01      	bgt.n	800ae12 <_printf_float+0x3ca>
 800ae0e:	07db      	lsls	r3, r3, #31
 800ae10:	d538      	bpl.n	800ae84 <_printf_float+0x43c>
 800ae12:	2301      	movs	r3, #1
 800ae14:	4642      	mov	r2, r8
 800ae16:	4631      	mov	r1, r6
 800ae18:	4628      	mov	r0, r5
 800ae1a:	47b8      	blx	r7
 800ae1c:	3001      	adds	r0, #1
 800ae1e:	f43f ae74 	beq.w	800ab0a <_printf_float+0xc2>
 800ae22:	ee18 3a10 	vmov	r3, s16
 800ae26:	4652      	mov	r2, sl
 800ae28:	4631      	mov	r1, r6
 800ae2a:	4628      	mov	r0, r5
 800ae2c:	47b8      	blx	r7
 800ae2e:	3001      	adds	r0, #1
 800ae30:	f43f ae6b 	beq.w	800ab0a <_printf_float+0xc2>
 800ae34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ae38:	2200      	movs	r2, #0
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	f7f5 fe44 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae40:	b9d8      	cbnz	r0, 800ae7a <_printf_float+0x432>
 800ae42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae44:	f108 0201 	add.w	r2, r8, #1
 800ae48:	3b01      	subs	r3, #1
 800ae4a:	4631      	mov	r1, r6
 800ae4c:	4628      	mov	r0, r5
 800ae4e:	47b8      	blx	r7
 800ae50:	3001      	adds	r0, #1
 800ae52:	d10e      	bne.n	800ae72 <_printf_float+0x42a>
 800ae54:	e659      	b.n	800ab0a <_printf_float+0xc2>
 800ae56:	2301      	movs	r3, #1
 800ae58:	4652      	mov	r2, sl
 800ae5a:	4631      	mov	r1, r6
 800ae5c:	4628      	mov	r0, r5
 800ae5e:	47b8      	blx	r7
 800ae60:	3001      	adds	r0, #1
 800ae62:	f43f ae52 	beq.w	800ab0a <_printf_float+0xc2>
 800ae66:	f108 0801 	add.w	r8, r8, #1
 800ae6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae6c:	3b01      	subs	r3, #1
 800ae6e:	4543      	cmp	r3, r8
 800ae70:	dcf1      	bgt.n	800ae56 <_printf_float+0x40e>
 800ae72:	464b      	mov	r3, r9
 800ae74:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ae78:	e6dc      	b.n	800ac34 <_printf_float+0x1ec>
 800ae7a:	f04f 0800 	mov.w	r8, #0
 800ae7e:	f104 0a1a 	add.w	sl, r4, #26
 800ae82:	e7f2      	b.n	800ae6a <_printf_float+0x422>
 800ae84:	2301      	movs	r3, #1
 800ae86:	4642      	mov	r2, r8
 800ae88:	e7df      	b.n	800ae4a <_printf_float+0x402>
 800ae8a:	2301      	movs	r3, #1
 800ae8c:	464a      	mov	r2, r9
 800ae8e:	4631      	mov	r1, r6
 800ae90:	4628      	mov	r0, r5
 800ae92:	47b8      	blx	r7
 800ae94:	3001      	adds	r0, #1
 800ae96:	f43f ae38 	beq.w	800ab0a <_printf_float+0xc2>
 800ae9a:	f108 0801 	add.w	r8, r8, #1
 800ae9e:	68e3      	ldr	r3, [r4, #12]
 800aea0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aea2:	1a5b      	subs	r3, r3, r1
 800aea4:	4543      	cmp	r3, r8
 800aea6:	dcf0      	bgt.n	800ae8a <_printf_float+0x442>
 800aea8:	e6fa      	b.n	800aca0 <_printf_float+0x258>
 800aeaa:	f04f 0800 	mov.w	r8, #0
 800aeae:	f104 0919 	add.w	r9, r4, #25
 800aeb2:	e7f4      	b.n	800ae9e <_printf_float+0x456>

0800aeb4 <_printf_common>:
 800aeb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aeb8:	4616      	mov	r6, r2
 800aeba:	4699      	mov	r9, r3
 800aebc:	688a      	ldr	r2, [r1, #8]
 800aebe:	690b      	ldr	r3, [r1, #16]
 800aec0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aec4:	4293      	cmp	r3, r2
 800aec6:	bfb8      	it	lt
 800aec8:	4613      	movlt	r3, r2
 800aeca:	6033      	str	r3, [r6, #0]
 800aecc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aed0:	4607      	mov	r7, r0
 800aed2:	460c      	mov	r4, r1
 800aed4:	b10a      	cbz	r2, 800aeda <_printf_common+0x26>
 800aed6:	3301      	adds	r3, #1
 800aed8:	6033      	str	r3, [r6, #0]
 800aeda:	6823      	ldr	r3, [r4, #0]
 800aedc:	0699      	lsls	r1, r3, #26
 800aede:	bf42      	ittt	mi
 800aee0:	6833      	ldrmi	r3, [r6, #0]
 800aee2:	3302      	addmi	r3, #2
 800aee4:	6033      	strmi	r3, [r6, #0]
 800aee6:	6825      	ldr	r5, [r4, #0]
 800aee8:	f015 0506 	ands.w	r5, r5, #6
 800aeec:	d106      	bne.n	800aefc <_printf_common+0x48>
 800aeee:	f104 0a19 	add.w	sl, r4, #25
 800aef2:	68e3      	ldr	r3, [r4, #12]
 800aef4:	6832      	ldr	r2, [r6, #0]
 800aef6:	1a9b      	subs	r3, r3, r2
 800aef8:	42ab      	cmp	r3, r5
 800aefa:	dc26      	bgt.n	800af4a <_printf_common+0x96>
 800aefc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800af00:	1e13      	subs	r3, r2, #0
 800af02:	6822      	ldr	r2, [r4, #0]
 800af04:	bf18      	it	ne
 800af06:	2301      	movne	r3, #1
 800af08:	0692      	lsls	r2, r2, #26
 800af0a:	d42b      	bmi.n	800af64 <_printf_common+0xb0>
 800af0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800af10:	4649      	mov	r1, r9
 800af12:	4638      	mov	r0, r7
 800af14:	47c0      	blx	r8
 800af16:	3001      	adds	r0, #1
 800af18:	d01e      	beq.n	800af58 <_printf_common+0xa4>
 800af1a:	6823      	ldr	r3, [r4, #0]
 800af1c:	68e5      	ldr	r5, [r4, #12]
 800af1e:	6832      	ldr	r2, [r6, #0]
 800af20:	f003 0306 	and.w	r3, r3, #6
 800af24:	2b04      	cmp	r3, #4
 800af26:	bf08      	it	eq
 800af28:	1aad      	subeq	r5, r5, r2
 800af2a:	68a3      	ldr	r3, [r4, #8]
 800af2c:	6922      	ldr	r2, [r4, #16]
 800af2e:	bf0c      	ite	eq
 800af30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800af34:	2500      	movne	r5, #0
 800af36:	4293      	cmp	r3, r2
 800af38:	bfc4      	itt	gt
 800af3a:	1a9b      	subgt	r3, r3, r2
 800af3c:	18ed      	addgt	r5, r5, r3
 800af3e:	2600      	movs	r6, #0
 800af40:	341a      	adds	r4, #26
 800af42:	42b5      	cmp	r5, r6
 800af44:	d11a      	bne.n	800af7c <_printf_common+0xc8>
 800af46:	2000      	movs	r0, #0
 800af48:	e008      	b.n	800af5c <_printf_common+0xa8>
 800af4a:	2301      	movs	r3, #1
 800af4c:	4652      	mov	r2, sl
 800af4e:	4649      	mov	r1, r9
 800af50:	4638      	mov	r0, r7
 800af52:	47c0      	blx	r8
 800af54:	3001      	adds	r0, #1
 800af56:	d103      	bne.n	800af60 <_printf_common+0xac>
 800af58:	f04f 30ff 	mov.w	r0, #4294967295
 800af5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af60:	3501      	adds	r5, #1
 800af62:	e7c6      	b.n	800aef2 <_printf_common+0x3e>
 800af64:	18e1      	adds	r1, r4, r3
 800af66:	1c5a      	adds	r2, r3, #1
 800af68:	2030      	movs	r0, #48	; 0x30
 800af6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800af6e:	4422      	add	r2, r4
 800af70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800af74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800af78:	3302      	adds	r3, #2
 800af7a:	e7c7      	b.n	800af0c <_printf_common+0x58>
 800af7c:	2301      	movs	r3, #1
 800af7e:	4622      	mov	r2, r4
 800af80:	4649      	mov	r1, r9
 800af82:	4638      	mov	r0, r7
 800af84:	47c0      	blx	r8
 800af86:	3001      	adds	r0, #1
 800af88:	d0e6      	beq.n	800af58 <_printf_common+0xa4>
 800af8a:	3601      	adds	r6, #1
 800af8c:	e7d9      	b.n	800af42 <_printf_common+0x8e>
	...

0800af90 <_printf_i>:
 800af90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800af94:	7e0f      	ldrb	r7, [r1, #24]
 800af96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800af98:	2f78      	cmp	r7, #120	; 0x78
 800af9a:	4691      	mov	r9, r2
 800af9c:	4680      	mov	r8, r0
 800af9e:	460c      	mov	r4, r1
 800afa0:	469a      	mov	sl, r3
 800afa2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800afa6:	d807      	bhi.n	800afb8 <_printf_i+0x28>
 800afa8:	2f62      	cmp	r7, #98	; 0x62
 800afaa:	d80a      	bhi.n	800afc2 <_printf_i+0x32>
 800afac:	2f00      	cmp	r7, #0
 800afae:	f000 80d8 	beq.w	800b162 <_printf_i+0x1d2>
 800afb2:	2f58      	cmp	r7, #88	; 0x58
 800afb4:	f000 80a3 	beq.w	800b0fe <_printf_i+0x16e>
 800afb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800afbc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800afc0:	e03a      	b.n	800b038 <_printf_i+0xa8>
 800afc2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800afc6:	2b15      	cmp	r3, #21
 800afc8:	d8f6      	bhi.n	800afb8 <_printf_i+0x28>
 800afca:	a101      	add	r1, pc, #4	; (adr r1, 800afd0 <_printf_i+0x40>)
 800afcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800afd0:	0800b029 	.word	0x0800b029
 800afd4:	0800b03d 	.word	0x0800b03d
 800afd8:	0800afb9 	.word	0x0800afb9
 800afdc:	0800afb9 	.word	0x0800afb9
 800afe0:	0800afb9 	.word	0x0800afb9
 800afe4:	0800afb9 	.word	0x0800afb9
 800afe8:	0800b03d 	.word	0x0800b03d
 800afec:	0800afb9 	.word	0x0800afb9
 800aff0:	0800afb9 	.word	0x0800afb9
 800aff4:	0800afb9 	.word	0x0800afb9
 800aff8:	0800afb9 	.word	0x0800afb9
 800affc:	0800b149 	.word	0x0800b149
 800b000:	0800b06d 	.word	0x0800b06d
 800b004:	0800b12b 	.word	0x0800b12b
 800b008:	0800afb9 	.word	0x0800afb9
 800b00c:	0800afb9 	.word	0x0800afb9
 800b010:	0800b16b 	.word	0x0800b16b
 800b014:	0800afb9 	.word	0x0800afb9
 800b018:	0800b06d 	.word	0x0800b06d
 800b01c:	0800afb9 	.word	0x0800afb9
 800b020:	0800afb9 	.word	0x0800afb9
 800b024:	0800b133 	.word	0x0800b133
 800b028:	682b      	ldr	r3, [r5, #0]
 800b02a:	1d1a      	adds	r2, r3, #4
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	602a      	str	r2, [r5, #0]
 800b030:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b034:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b038:	2301      	movs	r3, #1
 800b03a:	e0a3      	b.n	800b184 <_printf_i+0x1f4>
 800b03c:	6820      	ldr	r0, [r4, #0]
 800b03e:	6829      	ldr	r1, [r5, #0]
 800b040:	0606      	lsls	r6, r0, #24
 800b042:	f101 0304 	add.w	r3, r1, #4
 800b046:	d50a      	bpl.n	800b05e <_printf_i+0xce>
 800b048:	680e      	ldr	r6, [r1, #0]
 800b04a:	602b      	str	r3, [r5, #0]
 800b04c:	2e00      	cmp	r6, #0
 800b04e:	da03      	bge.n	800b058 <_printf_i+0xc8>
 800b050:	232d      	movs	r3, #45	; 0x2d
 800b052:	4276      	negs	r6, r6
 800b054:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b058:	485e      	ldr	r0, [pc, #376]	; (800b1d4 <_printf_i+0x244>)
 800b05a:	230a      	movs	r3, #10
 800b05c:	e019      	b.n	800b092 <_printf_i+0x102>
 800b05e:	680e      	ldr	r6, [r1, #0]
 800b060:	602b      	str	r3, [r5, #0]
 800b062:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b066:	bf18      	it	ne
 800b068:	b236      	sxthne	r6, r6
 800b06a:	e7ef      	b.n	800b04c <_printf_i+0xbc>
 800b06c:	682b      	ldr	r3, [r5, #0]
 800b06e:	6820      	ldr	r0, [r4, #0]
 800b070:	1d19      	adds	r1, r3, #4
 800b072:	6029      	str	r1, [r5, #0]
 800b074:	0601      	lsls	r1, r0, #24
 800b076:	d501      	bpl.n	800b07c <_printf_i+0xec>
 800b078:	681e      	ldr	r6, [r3, #0]
 800b07a:	e002      	b.n	800b082 <_printf_i+0xf2>
 800b07c:	0646      	lsls	r6, r0, #25
 800b07e:	d5fb      	bpl.n	800b078 <_printf_i+0xe8>
 800b080:	881e      	ldrh	r6, [r3, #0]
 800b082:	4854      	ldr	r0, [pc, #336]	; (800b1d4 <_printf_i+0x244>)
 800b084:	2f6f      	cmp	r7, #111	; 0x6f
 800b086:	bf0c      	ite	eq
 800b088:	2308      	moveq	r3, #8
 800b08a:	230a      	movne	r3, #10
 800b08c:	2100      	movs	r1, #0
 800b08e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b092:	6865      	ldr	r5, [r4, #4]
 800b094:	60a5      	str	r5, [r4, #8]
 800b096:	2d00      	cmp	r5, #0
 800b098:	bfa2      	ittt	ge
 800b09a:	6821      	ldrge	r1, [r4, #0]
 800b09c:	f021 0104 	bicge.w	r1, r1, #4
 800b0a0:	6021      	strge	r1, [r4, #0]
 800b0a2:	b90e      	cbnz	r6, 800b0a8 <_printf_i+0x118>
 800b0a4:	2d00      	cmp	r5, #0
 800b0a6:	d04d      	beq.n	800b144 <_printf_i+0x1b4>
 800b0a8:	4615      	mov	r5, r2
 800b0aa:	fbb6 f1f3 	udiv	r1, r6, r3
 800b0ae:	fb03 6711 	mls	r7, r3, r1, r6
 800b0b2:	5dc7      	ldrb	r7, [r0, r7]
 800b0b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b0b8:	4637      	mov	r7, r6
 800b0ba:	42bb      	cmp	r3, r7
 800b0bc:	460e      	mov	r6, r1
 800b0be:	d9f4      	bls.n	800b0aa <_printf_i+0x11a>
 800b0c0:	2b08      	cmp	r3, #8
 800b0c2:	d10b      	bne.n	800b0dc <_printf_i+0x14c>
 800b0c4:	6823      	ldr	r3, [r4, #0]
 800b0c6:	07de      	lsls	r6, r3, #31
 800b0c8:	d508      	bpl.n	800b0dc <_printf_i+0x14c>
 800b0ca:	6923      	ldr	r3, [r4, #16]
 800b0cc:	6861      	ldr	r1, [r4, #4]
 800b0ce:	4299      	cmp	r1, r3
 800b0d0:	bfde      	ittt	le
 800b0d2:	2330      	movle	r3, #48	; 0x30
 800b0d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b0d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b0dc:	1b52      	subs	r2, r2, r5
 800b0de:	6122      	str	r2, [r4, #16]
 800b0e0:	f8cd a000 	str.w	sl, [sp]
 800b0e4:	464b      	mov	r3, r9
 800b0e6:	aa03      	add	r2, sp, #12
 800b0e8:	4621      	mov	r1, r4
 800b0ea:	4640      	mov	r0, r8
 800b0ec:	f7ff fee2 	bl	800aeb4 <_printf_common>
 800b0f0:	3001      	adds	r0, #1
 800b0f2:	d14c      	bne.n	800b18e <_printf_i+0x1fe>
 800b0f4:	f04f 30ff 	mov.w	r0, #4294967295
 800b0f8:	b004      	add	sp, #16
 800b0fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0fe:	4835      	ldr	r0, [pc, #212]	; (800b1d4 <_printf_i+0x244>)
 800b100:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b104:	6829      	ldr	r1, [r5, #0]
 800b106:	6823      	ldr	r3, [r4, #0]
 800b108:	f851 6b04 	ldr.w	r6, [r1], #4
 800b10c:	6029      	str	r1, [r5, #0]
 800b10e:	061d      	lsls	r5, r3, #24
 800b110:	d514      	bpl.n	800b13c <_printf_i+0x1ac>
 800b112:	07df      	lsls	r7, r3, #31
 800b114:	bf44      	itt	mi
 800b116:	f043 0320 	orrmi.w	r3, r3, #32
 800b11a:	6023      	strmi	r3, [r4, #0]
 800b11c:	b91e      	cbnz	r6, 800b126 <_printf_i+0x196>
 800b11e:	6823      	ldr	r3, [r4, #0]
 800b120:	f023 0320 	bic.w	r3, r3, #32
 800b124:	6023      	str	r3, [r4, #0]
 800b126:	2310      	movs	r3, #16
 800b128:	e7b0      	b.n	800b08c <_printf_i+0xfc>
 800b12a:	6823      	ldr	r3, [r4, #0]
 800b12c:	f043 0320 	orr.w	r3, r3, #32
 800b130:	6023      	str	r3, [r4, #0]
 800b132:	2378      	movs	r3, #120	; 0x78
 800b134:	4828      	ldr	r0, [pc, #160]	; (800b1d8 <_printf_i+0x248>)
 800b136:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b13a:	e7e3      	b.n	800b104 <_printf_i+0x174>
 800b13c:	0659      	lsls	r1, r3, #25
 800b13e:	bf48      	it	mi
 800b140:	b2b6      	uxthmi	r6, r6
 800b142:	e7e6      	b.n	800b112 <_printf_i+0x182>
 800b144:	4615      	mov	r5, r2
 800b146:	e7bb      	b.n	800b0c0 <_printf_i+0x130>
 800b148:	682b      	ldr	r3, [r5, #0]
 800b14a:	6826      	ldr	r6, [r4, #0]
 800b14c:	6961      	ldr	r1, [r4, #20]
 800b14e:	1d18      	adds	r0, r3, #4
 800b150:	6028      	str	r0, [r5, #0]
 800b152:	0635      	lsls	r5, r6, #24
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	d501      	bpl.n	800b15c <_printf_i+0x1cc>
 800b158:	6019      	str	r1, [r3, #0]
 800b15a:	e002      	b.n	800b162 <_printf_i+0x1d2>
 800b15c:	0670      	lsls	r0, r6, #25
 800b15e:	d5fb      	bpl.n	800b158 <_printf_i+0x1c8>
 800b160:	8019      	strh	r1, [r3, #0]
 800b162:	2300      	movs	r3, #0
 800b164:	6123      	str	r3, [r4, #16]
 800b166:	4615      	mov	r5, r2
 800b168:	e7ba      	b.n	800b0e0 <_printf_i+0x150>
 800b16a:	682b      	ldr	r3, [r5, #0]
 800b16c:	1d1a      	adds	r2, r3, #4
 800b16e:	602a      	str	r2, [r5, #0]
 800b170:	681d      	ldr	r5, [r3, #0]
 800b172:	6862      	ldr	r2, [r4, #4]
 800b174:	2100      	movs	r1, #0
 800b176:	4628      	mov	r0, r5
 800b178:	f7f5 f832 	bl	80001e0 <memchr>
 800b17c:	b108      	cbz	r0, 800b182 <_printf_i+0x1f2>
 800b17e:	1b40      	subs	r0, r0, r5
 800b180:	6060      	str	r0, [r4, #4]
 800b182:	6863      	ldr	r3, [r4, #4]
 800b184:	6123      	str	r3, [r4, #16]
 800b186:	2300      	movs	r3, #0
 800b188:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b18c:	e7a8      	b.n	800b0e0 <_printf_i+0x150>
 800b18e:	6923      	ldr	r3, [r4, #16]
 800b190:	462a      	mov	r2, r5
 800b192:	4649      	mov	r1, r9
 800b194:	4640      	mov	r0, r8
 800b196:	47d0      	blx	sl
 800b198:	3001      	adds	r0, #1
 800b19a:	d0ab      	beq.n	800b0f4 <_printf_i+0x164>
 800b19c:	6823      	ldr	r3, [r4, #0]
 800b19e:	079b      	lsls	r3, r3, #30
 800b1a0:	d413      	bmi.n	800b1ca <_printf_i+0x23a>
 800b1a2:	68e0      	ldr	r0, [r4, #12]
 800b1a4:	9b03      	ldr	r3, [sp, #12]
 800b1a6:	4298      	cmp	r0, r3
 800b1a8:	bfb8      	it	lt
 800b1aa:	4618      	movlt	r0, r3
 800b1ac:	e7a4      	b.n	800b0f8 <_printf_i+0x168>
 800b1ae:	2301      	movs	r3, #1
 800b1b0:	4632      	mov	r2, r6
 800b1b2:	4649      	mov	r1, r9
 800b1b4:	4640      	mov	r0, r8
 800b1b6:	47d0      	blx	sl
 800b1b8:	3001      	adds	r0, #1
 800b1ba:	d09b      	beq.n	800b0f4 <_printf_i+0x164>
 800b1bc:	3501      	adds	r5, #1
 800b1be:	68e3      	ldr	r3, [r4, #12]
 800b1c0:	9903      	ldr	r1, [sp, #12]
 800b1c2:	1a5b      	subs	r3, r3, r1
 800b1c4:	42ab      	cmp	r3, r5
 800b1c6:	dcf2      	bgt.n	800b1ae <_printf_i+0x21e>
 800b1c8:	e7eb      	b.n	800b1a2 <_printf_i+0x212>
 800b1ca:	2500      	movs	r5, #0
 800b1cc:	f104 0619 	add.w	r6, r4, #25
 800b1d0:	e7f5      	b.n	800b1be <_printf_i+0x22e>
 800b1d2:	bf00      	nop
 800b1d4:	0800d3ae 	.word	0x0800d3ae
 800b1d8:	0800d3bf 	.word	0x0800d3bf

0800b1dc <quorem>:
 800b1dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1e0:	6903      	ldr	r3, [r0, #16]
 800b1e2:	690c      	ldr	r4, [r1, #16]
 800b1e4:	42a3      	cmp	r3, r4
 800b1e6:	4607      	mov	r7, r0
 800b1e8:	f2c0 8081 	blt.w	800b2ee <quorem+0x112>
 800b1ec:	3c01      	subs	r4, #1
 800b1ee:	f101 0814 	add.w	r8, r1, #20
 800b1f2:	f100 0514 	add.w	r5, r0, #20
 800b1f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b1fa:	9301      	str	r3, [sp, #4]
 800b1fc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b200:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b204:	3301      	adds	r3, #1
 800b206:	429a      	cmp	r2, r3
 800b208:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b20c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b210:	fbb2 f6f3 	udiv	r6, r2, r3
 800b214:	d331      	bcc.n	800b27a <quorem+0x9e>
 800b216:	f04f 0e00 	mov.w	lr, #0
 800b21a:	4640      	mov	r0, r8
 800b21c:	46ac      	mov	ip, r5
 800b21e:	46f2      	mov	sl, lr
 800b220:	f850 2b04 	ldr.w	r2, [r0], #4
 800b224:	b293      	uxth	r3, r2
 800b226:	fb06 e303 	mla	r3, r6, r3, lr
 800b22a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b22e:	b29b      	uxth	r3, r3
 800b230:	ebaa 0303 	sub.w	r3, sl, r3
 800b234:	f8dc a000 	ldr.w	sl, [ip]
 800b238:	0c12      	lsrs	r2, r2, #16
 800b23a:	fa13 f38a 	uxtah	r3, r3, sl
 800b23e:	fb06 e202 	mla	r2, r6, r2, lr
 800b242:	9300      	str	r3, [sp, #0]
 800b244:	9b00      	ldr	r3, [sp, #0]
 800b246:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b24a:	b292      	uxth	r2, r2
 800b24c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b250:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b254:	f8bd 3000 	ldrh.w	r3, [sp]
 800b258:	4581      	cmp	r9, r0
 800b25a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b25e:	f84c 3b04 	str.w	r3, [ip], #4
 800b262:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b266:	d2db      	bcs.n	800b220 <quorem+0x44>
 800b268:	f855 300b 	ldr.w	r3, [r5, fp]
 800b26c:	b92b      	cbnz	r3, 800b27a <quorem+0x9e>
 800b26e:	9b01      	ldr	r3, [sp, #4]
 800b270:	3b04      	subs	r3, #4
 800b272:	429d      	cmp	r5, r3
 800b274:	461a      	mov	r2, r3
 800b276:	d32e      	bcc.n	800b2d6 <quorem+0xfa>
 800b278:	613c      	str	r4, [r7, #16]
 800b27a:	4638      	mov	r0, r7
 800b27c:	f001 f9c0 	bl	800c600 <__mcmp>
 800b280:	2800      	cmp	r0, #0
 800b282:	db24      	blt.n	800b2ce <quorem+0xf2>
 800b284:	3601      	adds	r6, #1
 800b286:	4628      	mov	r0, r5
 800b288:	f04f 0c00 	mov.w	ip, #0
 800b28c:	f858 2b04 	ldr.w	r2, [r8], #4
 800b290:	f8d0 e000 	ldr.w	lr, [r0]
 800b294:	b293      	uxth	r3, r2
 800b296:	ebac 0303 	sub.w	r3, ip, r3
 800b29a:	0c12      	lsrs	r2, r2, #16
 800b29c:	fa13 f38e 	uxtah	r3, r3, lr
 800b2a0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b2a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b2a8:	b29b      	uxth	r3, r3
 800b2aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b2ae:	45c1      	cmp	r9, r8
 800b2b0:	f840 3b04 	str.w	r3, [r0], #4
 800b2b4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b2b8:	d2e8      	bcs.n	800b28c <quorem+0xb0>
 800b2ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b2be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b2c2:	b922      	cbnz	r2, 800b2ce <quorem+0xf2>
 800b2c4:	3b04      	subs	r3, #4
 800b2c6:	429d      	cmp	r5, r3
 800b2c8:	461a      	mov	r2, r3
 800b2ca:	d30a      	bcc.n	800b2e2 <quorem+0x106>
 800b2cc:	613c      	str	r4, [r7, #16]
 800b2ce:	4630      	mov	r0, r6
 800b2d0:	b003      	add	sp, #12
 800b2d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2d6:	6812      	ldr	r2, [r2, #0]
 800b2d8:	3b04      	subs	r3, #4
 800b2da:	2a00      	cmp	r2, #0
 800b2dc:	d1cc      	bne.n	800b278 <quorem+0x9c>
 800b2de:	3c01      	subs	r4, #1
 800b2e0:	e7c7      	b.n	800b272 <quorem+0x96>
 800b2e2:	6812      	ldr	r2, [r2, #0]
 800b2e4:	3b04      	subs	r3, #4
 800b2e6:	2a00      	cmp	r2, #0
 800b2e8:	d1f0      	bne.n	800b2cc <quorem+0xf0>
 800b2ea:	3c01      	subs	r4, #1
 800b2ec:	e7eb      	b.n	800b2c6 <quorem+0xea>
 800b2ee:	2000      	movs	r0, #0
 800b2f0:	e7ee      	b.n	800b2d0 <quorem+0xf4>
 800b2f2:	0000      	movs	r0, r0
 800b2f4:	0000      	movs	r0, r0
	...

0800b2f8 <_dtoa_r>:
 800b2f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2fc:	ed2d 8b04 	vpush	{d8-d9}
 800b300:	ec57 6b10 	vmov	r6, r7, d0
 800b304:	b093      	sub	sp, #76	; 0x4c
 800b306:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b308:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b30c:	9106      	str	r1, [sp, #24]
 800b30e:	ee10 aa10 	vmov	sl, s0
 800b312:	4604      	mov	r4, r0
 800b314:	9209      	str	r2, [sp, #36]	; 0x24
 800b316:	930c      	str	r3, [sp, #48]	; 0x30
 800b318:	46bb      	mov	fp, r7
 800b31a:	b975      	cbnz	r5, 800b33a <_dtoa_r+0x42>
 800b31c:	2010      	movs	r0, #16
 800b31e:	f000 fed7 	bl	800c0d0 <malloc>
 800b322:	4602      	mov	r2, r0
 800b324:	6260      	str	r0, [r4, #36]	; 0x24
 800b326:	b920      	cbnz	r0, 800b332 <_dtoa_r+0x3a>
 800b328:	4ba7      	ldr	r3, [pc, #668]	; (800b5c8 <_dtoa_r+0x2d0>)
 800b32a:	21ea      	movs	r1, #234	; 0xea
 800b32c:	48a7      	ldr	r0, [pc, #668]	; (800b5cc <_dtoa_r+0x2d4>)
 800b32e:	f001 fddf 	bl	800cef0 <__assert_func>
 800b332:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b336:	6005      	str	r5, [r0, #0]
 800b338:	60c5      	str	r5, [r0, #12]
 800b33a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b33c:	6819      	ldr	r1, [r3, #0]
 800b33e:	b151      	cbz	r1, 800b356 <_dtoa_r+0x5e>
 800b340:	685a      	ldr	r2, [r3, #4]
 800b342:	604a      	str	r2, [r1, #4]
 800b344:	2301      	movs	r3, #1
 800b346:	4093      	lsls	r3, r2
 800b348:	608b      	str	r3, [r1, #8]
 800b34a:	4620      	mov	r0, r4
 800b34c:	f000 ff16 	bl	800c17c <_Bfree>
 800b350:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b352:	2200      	movs	r2, #0
 800b354:	601a      	str	r2, [r3, #0]
 800b356:	1e3b      	subs	r3, r7, #0
 800b358:	bfaa      	itet	ge
 800b35a:	2300      	movge	r3, #0
 800b35c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b360:	f8c8 3000 	strge.w	r3, [r8]
 800b364:	4b9a      	ldr	r3, [pc, #616]	; (800b5d0 <_dtoa_r+0x2d8>)
 800b366:	bfbc      	itt	lt
 800b368:	2201      	movlt	r2, #1
 800b36a:	f8c8 2000 	strlt.w	r2, [r8]
 800b36e:	ea33 030b 	bics.w	r3, r3, fp
 800b372:	d11b      	bne.n	800b3ac <_dtoa_r+0xb4>
 800b374:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b376:	f242 730f 	movw	r3, #9999	; 0x270f
 800b37a:	6013      	str	r3, [r2, #0]
 800b37c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b380:	4333      	orrs	r3, r6
 800b382:	f000 8592 	beq.w	800beaa <_dtoa_r+0xbb2>
 800b386:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b388:	b963      	cbnz	r3, 800b3a4 <_dtoa_r+0xac>
 800b38a:	4b92      	ldr	r3, [pc, #584]	; (800b5d4 <_dtoa_r+0x2dc>)
 800b38c:	e022      	b.n	800b3d4 <_dtoa_r+0xdc>
 800b38e:	4b92      	ldr	r3, [pc, #584]	; (800b5d8 <_dtoa_r+0x2e0>)
 800b390:	9301      	str	r3, [sp, #4]
 800b392:	3308      	adds	r3, #8
 800b394:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b396:	6013      	str	r3, [r2, #0]
 800b398:	9801      	ldr	r0, [sp, #4]
 800b39a:	b013      	add	sp, #76	; 0x4c
 800b39c:	ecbd 8b04 	vpop	{d8-d9}
 800b3a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3a4:	4b8b      	ldr	r3, [pc, #556]	; (800b5d4 <_dtoa_r+0x2dc>)
 800b3a6:	9301      	str	r3, [sp, #4]
 800b3a8:	3303      	adds	r3, #3
 800b3aa:	e7f3      	b.n	800b394 <_dtoa_r+0x9c>
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	4650      	mov	r0, sl
 800b3b2:	4659      	mov	r1, fp
 800b3b4:	f7f5 fb88 	bl	8000ac8 <__aeabi_dcmpeq>
 800b3b8:	ec4b ab19 	vmov	d9, sl, fp
 800b3bc:	4680      	mov	r8, r0
 800b3be:	b158      	cbz	r0, 800b3d8 <_dtoa_r+0xe0>
 800b3c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b3c2:	2301      	movs	r3, #1
 800b3c4:	6013      	str	r3, [r2, #0]
 800b3c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	f000 856b 	beq.w	800bea4 <_dtoa_r+0xbac>
 800b3ce:	4883      	ldr	r0, [pc, #524]	; (800b5dc <_dtoa_r+0x2e4>)
 800b3d0:	6018      	str	r0, [r3, #0]
 800b3d2:	1e43      	subs	r3, r0, #1
 800b3d4:	9301      	str	r3, [sp, #4]
 800b3d6:	e7df      	b.n	800b398 <_dtoa_r+0xa0>
 800b3d8:	ec4b ab10 	vmov	d0, sl, fp
 800b3dc:	aa10      	add	r2, sp, #64	; 0x40
 800b3de:	a911      	add	r1, sp, #68	; 0x44
 800b3e0:	4620      	mov	r0, r4
 800b3e2:	f001 f9b3 	bl	800c74c <__d2b>
 800b3e6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b3ea:	ee08 0a10 	vmov	s16, r0
 800b3ee:	2d00      	cmp	r5, #0
 800b3f0:	f000 8084 	beq.w	800b4fc <_dtoa_r+0x204>
 800b3f4:	ee19 3a90 	vmov	r3, s19
 800b3f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b3fc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b400:	4656      	mov	r6, sl
 800b402:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b406:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b40a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b40e:	4b74      	ldr	r3, [pc, #464]	; (800b5e0 <_dtoa_r+0x2e8>)
 800b410:	2200      	movs	r2, #0
 800b412:	4630      	mov	r0, r6
 800b414:	4639      	mov	r1, r7
 800b416:	f7f4 ff37 	bl	8000288 <__aeabi_dsub>
 800b41a:	a365      	add	r3, pc, #404	; (adr r3, 800b5b0 <_dtoa_r+0x2b8>)
 800b41c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b420:	f7f5 f8ea 	bl	80005f8 <__aeabi_dmul>
 800b424:	a364      	add	r3, pc, #400	; (adr r3, 800b5b8 <_dtoa_r+0x2c0>)
 800b426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b42a:	f7f4 ff2f 	bl	800028c <__adddf3>
 800b42e:	4606      	mov	r6, r0
 800b430:	4628      	mov	r0, r5
 800b432:	460f      	mov	r7, r1
 800b434:	f7f5 f876 	bl	8000524 <__aeabi_i2d>
 800b438:	a361      	add	r3, pc, #388	; (adr r3, 800b5c0 <_dtoa_r+0x2c8>)
 800b43a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b43e:	f7f5 f8db 	bl	80005f8 <__aeabi_dmul>
 800b442:	4602      	mov	r2, r0
 800b444:	460b      	mov	r3, r1
 800b446:	4630      	mov	r0, r6
 800b448:	4639      	mov	r1, r7
 800b44a:	f7f4 ff1f 	bl	800028c <__adddf3>
 800b44e:	4606      	mov	r6, r0
 800b450:	460f      	mov	r7, r1
 800b452:	f7f5 fb81 	bl	8000b58 <__aeabi_d2iz>
 800b456:	2200      	movs	r2, #0
 800b458:	9000      	str	r0, [sp, #0]
 800b45a:	2300      	movs	r3, #0
 800b45c:	4630      	mov	r0, r6
 800b45e:	4639      	mov	r1, r7
 800b460:	f7f5 fb3c 	bl	8000adc <__aeabi_dcmplt>
 800b464:	b150      	cbz	r0, 800b47c <_dtoa_r+0x184>
 800b466:	9800      	ldr	r0, [sp, #0]
 800b468:	f7f5 f85c 	bl	8000524 <__aeabi_i2d>
 800b46c:	4632      	mov	r2, r6
 800b46e:	463b      	mov	r3, r7
 800b470:	f7f5 fb2a 	bl	8000ac8 <__aeabi_dcmpeq>
 800b474:	b910      	cbnz	r0, 800b47c <_dtoa_r+0x184>
 800b476:	9b00      	ldr	r3, [sp, #0]
 800b478:	3b01      	subs	r3, #1
 800b47a:	9300      	str	r3, [sp, #0]
 800b47c:	9b00      	ldr	r3, [sp, #0]
 800b47e:	2b16      	cmp	r3, #22
 800b480:	d85a      	bhi.n	800b538 <_dtoa_r+0x240>
 800b482:	9a00      	ldr	r2, [sp, #0]
 800b484:	4b57      	ldr	r3, [pc, #348]	; (800b5e4 <_dtoa_r+0x2ec>)
 800b486:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b48a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b48e:	ec51 0b19 	vmov	r0, r1, d9
 800b492:	f7f5 fb23 	bl	8000adc <__aeabi_dcmplt>
 800b496:	2800      	cmp	r0, #0
 800b498:	d050      	beq.n	800b53c <_dtoa_r+0x244>
 800b49a:	9b00      	ldr	r3, [sp, #0]
 800b49c:	3b01      	subs	r3, #1
 800b49e:	9300      	str	r3, [sp, #0]
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	930b      	str	r3, [sp, #44]	; 0x2c
 800b4a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b4a6:	1b5d      	subs	r5, r3, r5
 800b4a8:	1e6b      	subs	r3, r5, #1
 800b4aa:	9305      	str	r3, [sp, #20]
 800b4ac:	bf45      	ittet	mi
 800b4ae:	f1c5 0301 	rsbmi	r3, r5, #1
 800b4b2:	9304      	strmi	r3, [sp, #16]
 800b4b4:	2300      	movpl	r3, #0
 800b4b6:	2300      	movmi	r3, #0
 800b4b8:	bf4c      	ite	mi
 800b4ba:	9305      	strmi	r3, [sp, #20]
 800b4bc:	9304      	strpl	r3, [sp, #16]
 800b4be:	9b00      	ldr	r3, [sp, #0]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	db3d      	blt.n	800b540 <_dtoa_r+0x248>
 800b4c4:	9b05      	ldr	r3, [sp, #20]
 800b4c6:	9a00      	ldr	r2, [sp, #0]
 800b4c8:	920a      	str	r2, [sp, #40]	; 0x28
 800b4ca:	4413      	add	r3, r2
 800b4cc:	9305      	str	r3, [sp, #20]
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	9307      	str	r3, [sp, #28]
 800b4d2:	9b06      	ldr	r3, [sp, #24]
 800b4d4:	2b09      	cmp	r3, #9
 800b4d6:	f200 8089 	bhi.w	800b5ec <_dtoa_r+0x2f4>
 800b4da:	2b05      	cmp	r3, #5
 800b4dc:	bfc4      	itt	gt
 800b4de:	3b04      	subgt	r3, #4
 800b4e0:	9306      	strgt	r3, [sp, #24]
 800b4e2:	9b06      	ldr	r3, [sp, #24]
 800b4e4:	f1a3 0302 	sub.w	r3, r3, #2
 800b4e8:	bfcc      	ite	gt
 800b4ea:	2500      	movgt	r5, #0
 800b4ec:	2501      	movle	r5, #1
 800b4ee:	2b03      	cmp	r3, #3
 800b4f0:	f200 8087 	bhi.w	800b602 <_dtoa_r+0x30a>
 800b4f4:	e8df f003 	tbb	[pc, r3]
 800b4f8:	59383a2d 	.word	0x59383a2d
 800b4fc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b500:	441d      	add	r5, r3
 800b502:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b506:	2b20      	cmp	r3, #32
 800b508:	bfc1      	itttt	gt
 800b50a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b50e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b512:	fa0b f303 	lslgt.w	r3, fp, r3
 800b516:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b51a:	bfda      	itte	le
 800b51c:	f1c3 0320 	rsble	r3, r3, #32
 800b520:	fa06 f003 	lslle.w	r0, r6, r3
 800b524:	4318      	orrgt	r0, r3
 800b526:	f7f4 ffed 	bl	8000504 <__aeabi_ui2d>
 800b52a:	2301      	movs	r3, #1
 800b52c:	4606      	mov	r6, r0
 800b52e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b532:	3d01      	subs	r5, #1
 800b534:	930e      	str	r3, [sp, #56]	; 0x38
 800b536:	e76a      	b.n	800b40e <_dtoa_r+0x116>
 800b538:	2301      	movs	r3, #1
 800b53a:	e7b2      	b.n	800b4a2 <_dtoa_r+0x1aa>
 800b53c:	900b      	str	r0, [sp, #44]	; 0x2c
 800b53e:	e7b1      	b.n	800b4a4 <_dtoa_r+0x1ac>
 800b540:	9b04      	ldr	r3, [sp, #16]
 800b542:	9a00      	ldr	r2, [sp, #0]
 800b544:	1a9b      	subs	r3, r3, r2
 800b546:	9304      	str	r3, [sp, #16]
 800b548:	4253      	negs	r3, r2
 800b54a:	9307      	str	r3, [sp, #28]
 800b54c:	2300      	movs	r3, #0
 800b54e:	930a      	str	r3, [sp, #40]	; 0x28
 800b550:	e7bf      	b.n	800b4d2 <_dtoa_r+0x1da>
 800b552:	2300      	movs	r3, #0
 800b554:	9308      	str	r3, [sp, #32]
 800b556:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b558:	2b00      	cmp	r3, #0
 800b55a:	dc55      	bgt.n	800b608 <_dtoa_r+0x310>
 800b55c:	2301      	movs	r3, #1
 800b55e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b562:	461a      	mov	r2, r3
 800b564:	9209      	str	r2, [sp, #36]	; 0x24
 800b566:	e00c      	b.n	800b582 <_dtoa_r+0x28a>
 800b568:	2301      	movs	r3, #1
 800b56a:	e7f3      	b.n	800b554 <_dtoa_r+0x25c>
 800b56c:	2300      	movs	r3, #0
 800b56e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b570:	9308      	str	r3, [sp, #32]
 800b572:	9b00      	ldr	r3, [sp, #0]
 800b574:	4413      	add	r3, r2
 800b576:	9302      	str	r3, [sp, #8]
 800b578:	3301      	adds	r3, #1
 800b57a:	2b01      	cmp	r3, #1
 800b57c:	9303      	str	r3, [sp, #12]
 800b57e:	bfb8      	it	lt
 800b580:	2301      	movlt	r3, #1
 800b582:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b584:	2200      	movs	r2, #0
 800b586:	6042      	str	r2, [r0, #4]
 800b588:	2204      	movs	r2, #4
 800b58a:	f102 0614 	add.w	r6, r2, #20
 800b58e:	429e      	cmp	r6, r3
 800b590:	6841      	ldr	r1, [r0, #4]
 800b592:	d93d      	bls.n	800b610 <_dtoa_r+0x318>
 800b594:	4620      	mov	r0, r4
 800b596:	f000 fdb1 	bl	800c0fc <_Balloc>
 800b59a:	9001      	str	r0, [sp, #4]
 800b59c:	2800      	cmp	r0, #0
 800b59e:	d13b      	bne.n	800b618 <_dtoa_r+0x320>
 800b5a0:	4b11      	ldr	r3, [pc, #68]	; (800b5e8 <_dtoa_r+0x2f0>)
 800b5a2:	4602      	mov	r2, r0
 800b5a4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b5a8:	e6c0      	b.n	800b32c <_dtoa_r+0x34>
 800b5aa:	2301      	movs	r3, #1
 800b5ac:	e7df      	b.n	800b56e <_dtoa_r+0x276>
 800b5ae:	bf00      	nop
 800b5b0:	636f4361 	.word	0x636f4361
 800b5b4:	3fd287a7 	.word	0x3fd287a7
 800b5b8:	8b60c8b3 	.word	0x8b60c8b3
 800b5bc:	3fc68a28 	.word	0x3fc68a28
 800b5c0:	509f79fb 	.word	0x509f79fb
 800b5c4:	3fd34413 	.word	0x3fd34413
 800b5c8:	0800d3dd 	.word	0x0800d3dd
 800b5cc:	0800d3f4 	.word	0x0800d3f4
 800b5d0:	7ff00000 	.word	0x7ff00000
 800b5d4:	0800d3d9 	.word	0x0800d3d9
 800b5d8:	0800d3d0 	.word	0x0800d3d0
 800b5dc:	0800d3ad 	.word	0x0800d3ad
 800b5e0:	3ff80000 	.word	0x3ff80000
 800b5e4:	0800d548 	.word	0x0800d548
 800b5e8:	0800d44f 	.word	0x0800d44f
 800b5ec:	2501      	movs	r5, #1
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	9306      	str	r3, [sp, #24]
 800b5f2:	9508      	str	r5, [sp, #32]
 800b5f4:	f04f 33ff 	mov.w	r3, #4294967295
 800b5f8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	2312      	movs	r3, #18
 800b600:	e7b0      	b.n	800b564 <_dtoa_r+0x26c>
 800b602:	2301      	movs	r3, #1
 800b604:	9308      	str	r3, [sp, #32]
 800b606:	e7f5      	b.n	800b5f4 <_dtoa_r+0x2fc>
 800b608:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b60a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b60e:	e7b8      	b.n	800b582 <_dtoa_r+0x28a>
 800b610:	3101      	adds	r1, #1
 800b612:	6041      	str	r1, [r0, #4]
 800b614:	0052      	lsls	r2, r2, #1
 800b616:	e7b8      	b.n	800b58a <_dtoa_r+0x292>
 800b618:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b61a:	9a01      	ldr	r2, [sp, #4]
 800b61c:	601a      	str	r2, [r3, #0]
 800b61e:	9b03      	ldr	r3, [sp, #12]
 800b620:	2b0e      	cmp	r3, #14
 800b622:	f200 809d 	bhi.w	800b760 <_dtoa_r+0x468>
 800b626:	2d00      	cmp	r5, #0
 800b628:	f000 809a 	beq.w	800b760 <_dtoa_r+0x468>
 800b62c:	9b00      	ldr	r3, [sp, #0]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	dd32      	ble.n	800b698 <_dtoa_r+0x3a0>
 800b632:	4ab7      	ldr	r2, [pc, #732]	; (800b910 <_dtoa_r+0x618>)
 800b634:	f003 030f 	and.w	r3, r3, #15
 800b638:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b63c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b640:	9b00      	ldr	r3, [sp, #0]
 800b642:	05d8      	lsls	r0, r3, #23
 800b644:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b648:	d516      	bpl.n	800b678 <_dtoa_r+0x380>
 800b64a:	4bb2      	ldr	r3, [pc, #712]	; (800b914 <_dtoa_r+0x61c>)
 800b64c:	ec51 0b19 	vmov	r0, r1, d9
 800b650:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b654:	f7f5 f8fa 	bl	800084c <__aeabi_ddiv>
 800b658:	f007 070f 	and.w	r7, r7, #15
 800b65c:	4682      	mov	sl, r0
 800b65e:	468b      	mov	fp, r1
 800b660:	2503      	movs	r5, #3
 800b662:	4eac      	ldr	r6, [pc, #688]	; (800b914 <_dtoa_r+0x61c>)
 800b664:	b957      	cbnz	r7, 800b67c <_dtoa_r+0x384>
 800b666:	4642      	mov	r2, r8
 800b668:	464b      	mov	r3, r9
 800b66a:	4650      	mov	r0, sl
 800b66c:	4659      	mov	r1, fp
 800b66e:	f7f5 f8ed 	bl	800084c <__aeabi_ddiv>
 800b672:	4682      	mov	sl, r0
 800b674:	468b      	mov	fp, r1
 800b676:	e028      	b.n	800b6ca <_dtoa_r+0x3d2>
 800b678:	2502      	movs	r5, #2
 800b67a:	e7f2      	b.n	800b662 <_dtoa_r+0x36a>
 800b67c:	07f9      	lsls	r1, r7, #31
 800b67e:	d508      	bpl.n	800b692 <_dtoa_r+0x39a>
 800b680:	4640      	mov	r0, r8
 800b682:	4649      	mov	r1, r9
 800b684:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b688:	f7f4 ffb6 	bl	80005f8 <__aeabi_dmul>
 800b68c:	3501      	adds	r5, #1
 800b68e:	4680      	mov	r8, r0
 800b690:	4689      	mov	r9, r1
 800b692:	107f      	asrs	r7, r7, #1
 800b694:	3608      	adds	r6, #8
 800b696:	e7e5      	b.n	800b664 <_dtoa_r+0x36c>
 800b698:	f000 809b 	beq.w	800b7d2 <_dtoa_r+0x4da>
 800b69c:	9b00      	ldr	r3, [sp, #0]
 800b69e:	4f9d      	ldr	r7, [pc, #628]	; (800b914 <_dtoa_r+0x61c>)
 800b6a0:	425e      	negs	r6, r3
 800b6a2:	4b9b      	ldr	r3, [pc, #620]	; (800b910 <_dtoa_r+0x618>)
 800b6a4:	f006 020f 	and.w	r2, r6, #15
 800b6a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b6ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b0:	ec51 0b19 	vmov	r0, r1, d9
 800b6b4:	f7f4 ffa0 	bl	80005f8 <__aeabi_dmul>
 800b6b8:	1136      	asrs	r6, r6, #4
 800b6ba:	4682      	mov	sl, r0
 800b6bc:	468b      	mov	fp, r1
 800b6be:	2300      	movs	r3, #0
 800b6c0:	2502      	movs	r5, #2
 800b6c2:	2e00      	cmp	r6, #0
 800b6c4:	d17a      	bne.n	800b7bc <_dtoa_r+0x4c4>
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d1d3      	bne.n	800b672 <_dtoa_r+0x37a>
 800b6ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	f000 8082 	beq.w	800b7d6 <_dtoa_r+0x4de>
 800b6d2:	4b91      	ldr	r3, [pc, #580]	; (800b918 <_dtoa_r+0x620>)
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	4650      	mov	r0, sl
 800b6d8:	4659      	mov	r1, fp
 800b6da:	f7f5 f9ff 	bl	8000adc <__aeabi_dcmplt>
 800b6de:	2800      	cmp	r0, #0
 800b6e0:	d079      	beq.n	800b7d6 <_dtoa_r+0x4de>
 800b6e2:	9b03      	ldr	r3, [sp, #12]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d076      	beq.n	800b7d6 <_dtoa_r+0x4de>
 800b6e8:	9b02      	ldr	r3, [sp, #8]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	dd36      	ble.n	800b75c <_dtoa_r+0x464>
 800b6ee:	9b00      	ldr	r3, [sp, #0]
 800b6f0:	4650      	mov	r0, sl
 800b6f2:	4659      	mov	r1, fp
 800b6f4:	1e5f      	subs	r7, r3, #1
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	4b88      	ldr	r3, [pc, #544]	; (800b91c <_dtoa_r+0x624>)
 800b6fa:	f7f4 ff7d 	bl	80005f8 <__aeabi_dmul>
 800b6fe:	9e02      	ldr	r6, [sp, #8]
 800b700:	4682      	mov	sl, r0
 800b702:	468b      	mov	fp, r1
 800b704:	3501      	adds	r5, #1
 800b706:	4628      	mov	r0, r5
 800b708:	f7f4 ff0c 	bl	8000524 <__aeabi_i2d>
 800b70c:	4652      	mov	r2, sl
 800b70e:	465b      	mov	r3, fp
 800b710:	f7f4 ff72 	bl	80005f8 <__aeabi_dmul>
 800b714:	4b82      	ldr	r3, [pc, #520]	; (800b920 <_dtoa_r+0x628>)
 800b716:	2200      	movs	r2, #0
 800b718:	f7f4 fdb8 	bl	800028c <__adddf3>
 800b71c:	46d0      	mov	r8, sl
 800b71e:	46d9      	mov	r9, fp
 800b720:	4682      	mov	sl, r0
 800b722:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b726:	2e00      	cmp	r6, #0
 800b728:	d158      	bne.n	800b7dc <_dtoa_r+0x4e4>
 800b72a:	4b7e      	ldr	r3, [pc, #504]	; (800b924 <_dtoa_r+0x62c>)
 800b72c:	2200      	movs	r2, #0
 800b72e:	4640      	mov	r0, r8
 800b730:	4649      	mov	r1, r9
 800b732:	f7f4 fda9 	bl	8000288 <__aeabi_dsub>
 800b736:	4652      	mov	r2, sl
 800b738:	465b      	mov	r3, fp
 800b73a:	4680      	mov	r8, r0
 800b73c:	4689      	mov	r9, r1
 800b73e:	f7f5 f9eb 	bl	8000b18 <__aeabi_dcmpgt>
 800b742:	2800      	cmp	r0, #0
 800b744:	f040 8295 	bne.w	800bc72 <_dtoa_r+0x97a>
 800b748:	4652      	mov	r2, sl
 800b74a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b74e:	4640      	mov	r0, r8
 800b750:	4649      	mov	r1, r9
 800b752:	f7f5 f9c3 	bl	8000adc <__aeabi_dcmplt>
 800b756:	2800      	cmp	r0, #0
 800b758:	f040 8289 	bne.w	800bc6e <_dtoa_r+0x976>
 800b75c:	ec5b ab19 	vmov	sl, fp, d9
 800b760:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b762:	2b00      	cmp	r3, #0
 800b764:	f2c0 8148 	blt.w	800b9f8 <_dtoa_r+0x700>
 800b768:	9a00      	ldr	r2, [sp, #0]
 800b76a:	2a0e      	cmp	r2, #14
 800b76c:	f300 8144 	bgt.w	800b9f8 <_dtoa_r+0x700>
 800b770:	4b67      	ldr	r3, [pc, #412]	; (800b910 <_dtoa_r+0x618>)
 800b772:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b776:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b77a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	f280 80d5 	bge.w	800b92c <_dtoa_r+0x634>
 800b782:	9b03      	ldr	r3, [sp, #12]
 800b784:	2b00      	cmp	r3, #0
 800b786:	f300 80d1 	bgt.w	800b92c <_dtoa_r+0x634>
 800b78a:	f040 826f 	bne.w	800bc6c <_dtoa_r+0x974>
 800b78e:	4b65      	ldr	r3, [pc, #404]	; (800b924 <_dtoa_r+0x62c>)
 800b790:	2200      	movs	r2, #0
 800b792:	4640      	mov	r0, r8
 800b794:	4649      	mov	r1, r9
 800b796:	f7f4 ff2f 	bl	80005f8 <__aeabi_dmul>
 800b79a:	4652      	mov	r2, sl
 800b79c:	465b      	mov	r3, fp
 800b79e:	f7f5 f9b1 	bl	8000b04 <__aeabi_dcmpge>
 800b7a2:	9e03      	ldr	r6, [sp, #12]
 800b7a4:	4637      	mov	r7, r6
 800b7a6:	2800      	cmp	r0, #0
 800b7a8:	f040 8245 	bne.w	800bc36 <_dtoa_r+0x93e>
 800b7ac:	9d01      	ldr	r5, [sp, #4]
 800b7ae:	2331      	movs	r3, #49	; 0x31
 800b7b0:	f805 3b01 	strb.w	r3, [r5], #1
 800b7b4:	9b00      	ldr	r3, [sp, #0]
 800b7b6:	3301      	adds	r3, #1
 800b7b8:	9300      	str	r3, [sp, #0]
 800b7ba:	e240      	b.n	800bc3e <_dtoa_r+0x946>
 800b7bc:	07f2      	lsls	r2, r6, #31
 800b7be:	d505      	bpl.n	800b7cc <_dtoa_r+0x4d4>
 800b7c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b7c4:	f7f4 ff18 	bl	80005f8 <__aeabi_dmul>
 800b7c8:	3501      	adds	r5, #1
 800b7ca:	2301      	movs	r3, #1
 800b7cc:	1076      	asrs	r6, r6, #1
 800b7ce:	3708      	adds	r7, #8
 800b7d0:	e777      	b.n	800b6c2 <_dtoa_r+0x3ca>
 800b7d2:	2502      	movs	r5, #2
 800b7d4:	e779      	b.n	800b6ca <_dtoa_r+0x3d2>
 800b7d6:	9f00      	ldr	r7, [sp, #0]
 800b7d8:	9e03      	ldr	r6, [sp, #12]
 800b7da:	e794      	b.n	800b706 <_dtoa_r+0x40e>
 800b7dc:	9901      	ldr	r1, [sp, #4]
 800b7de:	4b4c      	ldr	r3, [pc, #304]	; (800b910 <_dtoa_r+0x618>)
 800b7e0:	4431      	add	r1, r6
 800b7e2:	910d      	str	r1, [sp, #52]	; 0x34
 800b7e4:	9908      	ldr	r1, [sp, #32]
 800b7e6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b7ea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b7ee:	2900      	cmp	r1, #0
 800b7f0:	d043      	beq.n	800b87a <_dtoa_r+0x582>
 800b7f2:	494d      	ldr	r1, [pc, #308]	; (800b928 <_dtoa_r+0x630>)
 800b7f4:	2000      	movs	r0, #0
 800b7f6:	f7f5 f829 	bl	800084c <__aeabi_ddiv>
 800b7fa:	4652      	mov	r2, sl
 800b7fc:	465b      	mov	r3, fp
 800b7fe:	f7f4 fd43 	bl	8000288 <__aeabi_dsub>
 800b802:	9d01      	ldr	r5, [sp, #4]
 800b804:	4682      	mov	sl, r0
 800b806:	468b      	mov	fp, r1
 800b808:	4649      	mov	r1, r9
 800b80a:	4640      	mov	r0, r8
 800b80c:	f7f5 f9a4 	bl	8000b58 <__aeabi_d2iz>
 800b810:	4606      	mov	r6, r0
 800b812:	f7f4 fe87 	bl	8000524 <__aeabi_i2d>
 800b816:	4602      	mov	r2, r0
 800b818:	460b      	mov	r3, r1
 800b81a:	4640      	mov	r0, r8
 800b81c:	4649      	mov	r1, r9
 800b81e:	f7f4 fd33 	bl	8000288 <__aeabi_dsub>
 800b822:	3630      	adds	r6, #48	; 0x30
 800b824:	f805 6b01 	strb.w	r6, [r5], #1
 800b828:	4652      	mov	r2, sl
 800b82a:	465b      	mov	r3, fp
 800b82c:	4680      	mov	r8, r0
 800b82e:	4689      	mov	r9, r1
 800b830:	f7f5 f954 	bl	8000adc <__aeabi_dcmplt>
 800b834:	2800      	cmp	r0, #0
 800b836:	d163      	bne.n	800b900 <_dtoa_r+0x608>
 800b838:	4642      	mov	r2, r8
 800b83a:	464b      	mov	r3, r9
 800b83c:	4936      	ldr	r1, [pc, #216]	; (800b918 <_dtoa_r+0x620>)
 800b83e:	2000      	movs	r0, #0
 800b840:	f7f4 fd22 	bl	8000288 <__aeabi_dsub>
 800b844:	4652      	mov	r2, sl
 800b846:	465b      	mov	r3, fp
 800b848:	f7f5 f948 	bl	8000adc <__aeabi_dcmplt>
 800b84c:	2800      	cmp	r0, #0
 800b84e:	f040 80b5 	bne.w	800b9bc <_dtoa_r+0x6c4>
 800b852:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b854:	429d      	cmp	r5, r3
 800b856:	d081      	beq.n	800b75c <_dtoa_r+0x464>
 800b858:	4b30      	ldr	r3, [pc, #192]	; (800b91c <_dtoa_r+0x624>)
 800b85a:	2200      	movs	r2, #0
 800b85c:	4650      	mov	r0, sl
 800b85e:	4659      	mov	r1, fp
 800b860:	f7f4 feca 	bl	80005f8 <__aeabi_dmul>
 800b864:	4b2d      	ldr	r3, [pc, #180]	; (800b91c <_dtoa_r+0x624>)
 800b866:	4682      	mov	sl, r0
 800b868:	468b      	mov	fp, r1
 800b86a:	4640      	mov	r0, r8
 800b86c:	4649      	mov	r1, r9
 800b86e:	2200      	movs	r2, #0
 800b870:	f7f4 fec2 	bl	80005f8 <__aeabi_dmul>
 800b874:	4680      	mov	r8, r0
 800b876:	4689      	mov	r9, r1
 800b878:	e7c6      	b.n	800b808 <_dtoa_r+0x510>
 800b87a:	4650      	mov	r0, sl
 800b87c:	4659      	mov	r1, fp
 800b87e:	f7f4 febb 	bl	80005f8 <__aeabi_dmul>
 800b882:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b884:	9d01      	ldr	r5, [sp, #4]
 800b886:	930f      	str	r3, [sp, #60]	; 0x3c
 800b888:	4682      	mov	sl, r0
 800b88a:	468b      	mov	fp, r1
 800b88c:	4649      	mov	r1, r9
 800b88e:	4640      	mov	r0, r8
 800b890:	f7f5 f962 	bl	8000b58 <__aeabi_d2iz>
 800b894:	4606      	mov	r6, r0
 800b896:	f7f4 fe45 	bl	8000524 <__aeabi_i2d>
 800b89a:	3630      	adds	r6, #48	; 0x30
 800b89c:	4602      	mov	r2, r0
 800b89e:	460b      	mov	r3, r1
 800b8a0:	4640      	mov	r0, r8
 800b8a2:	4649      	mov	r1, r9
 800b8a4:	f7f4 fcf0 	bl	8000288 <__aeabi_dsub>
 800b8a8:	f805 6b01 	strb.w	r6, [r5], #1
 800b8ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b8ae:	429d      	cmp	r5, r3
 800b8b0:	4680      	mov	r8, r0
 800b8b2:	4689      	mov	r9, r1
 800b8b4:	f04f 0200 	mov.w	r2, #0
 800b8b8:	d124      	bne.n	800b904 <_dtoa_r+0x60c>
 800b8ba:	4b1b      	ldr	r3, [pc, #108]	; (800b928 <_dtoa_r+0x630>)
 800b8bc:	4650      	mov	r0, sl
 800b8be:	4659      	mov	r1, fp
 800b8c0:	f7f4 fce4 	bl	800028c <__adddf3>
 800b8c4:	4602      	mov	r2, r0
 800b8c6:	460b      	mov	r3, r1
 800b8c8:	4640      	mov	r0, r8
 800b8ca:	4649      	mov	r1, r9
 800b8cc:	f7f5 f924 	bl	8000b18 <__aeabi_dcmpgt>
 800b8d0:	2800      	cmp	r0, #0
 800b8d2:	d173      	bne.n	800b9bc <_dtoa_r+0x6c4>
 800b8d4:	4652      	mov	r2, sl
 800b8d6:	465b      	mov	r3, fp
 800b8d8:	4913      	ldr	r1, [pc, #76]	; (800b928 <_dtoa_r+0x630>)
 800b8da:	2000      	movs	r0, #0
 800b8dc:	f7f4 fcd4 	bl	8000288 <__aeabi_dsub>
 800b8e0:	4602      	mov	r2, r0
 800b8e2:	460b      	mov	r3, r1
 800b8e4:	4640      	mov	r0, r8
 800b8e6:	4649      	mov	r1, r9
 800b8e8:	f7f5 f8f8 	bl	8000adc <__aeabi_dcmplt>
 800b8ec:	2800      	cmp	r0, #0
 800b8ee:	f43f af35 	beq.w	800b75c <_dtoa_r+0x464>
 800b8f2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b8f4:	1e6b      	subs	r3, r5, #1
 800b8f6:	930f      	str	r3, [sp, #60]	; 0x3c
 800b8f8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b8fc:	2b30      	cmp	r3, #48	; 0x30
 800b8fe:	d0f8      	beq.n	800b8f2 <_dtoa_r+0x5fa>
 800b900:	9700      	str	r7, [sp, #0]
 800b902:	e049      	b.n	800b998 <_dtoa_r+0x6a0>
 800b904:	4b05      	ldr	r3, [pc, #20]	; (800b91c <_dtoa_r+0x624>)
 800b906:	f7f4 fe77 	bl	80005f8 <__aeabi_dmul>
 800b90a:	4680      	mov	r8, r0
 800b90c:	4689      	mov	r9, r1
 800b90e:	e7bd      	b.n	800b88c <_dtoa_r+0x594>
 800b910:	0800d548 	.word	0x0800d548
 800b914:	0800d520 	.word	0x0800d520
 800b918:	3ff00000 	.word	0x3ff00000
 800b91c:	40240000 	.word	0x40240000
 800b920:	401c0000 	.word	0x401c0000
 800b924:	40140000 	.word	0x40140000
 800b928:	3fe00000 	.word	0x3fe00000
 800b92c:	9d01      	ldr	r5, [sp, #4]
 800b92e:	4656      	mov	r6, sl
 800b930:	465f      	mov	r7, fp
 800b932:	4642      	mov	r2, r8
 800b934:	464b      	mov	r3, r9
 800b936:	4630      	mov	r0, r6
 800b938:	4639      	mov	r1, r7
 800b93a:	f7f4 ff87 	bl	800084c <__aeabi_ddiv>
 800b93e:	f7f5 f90b 	bl	8000b58 <__aeabi_d2iz>
 800b942:	4682      	mov	sl, r0
 800b944:	f7f4 fdee 	bl	8000524 <__aeabi_i2d>
 800b948:	4642      	mov	r2, r8
 800b94a:	464b      	mov	r3, r9
 800b94c:	f7f4 fe54 	bl	80005f8 <__aeabi_dmul>
 800b950:	4602      	mov	r2, r0
 800b952:	460b      	mov	r3, r1
 800b954:	4630      	mov	r0, r6
 800b956:	4639      	mov	r1, r7
 800b958:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b95c:	f7f4 fc94 	bl	8000288 <__aeabi_dsub>
 800b960:	f805 6b01 	strb.w	r6, [r5], #1
 800b964:	9e01      	ldr	r6, [sp, #4]
 800b966:	9f03      	ldr	r7, [sp, #12]
 800b968:	1bae      	subs	r6, r5, r6
 800b96a:	42b7      	cmp	r7, r6
 800b96c:	4602      	mov	r2, r0
 800b96e:	460b      	mov	r3, r1
 800b970:	d135      	bne.n	800b9de <_dtoa_r+0x6e6>
 800b972:	f7f4 fc8b 	bl	800028c <__adddf3>
 800b976:	4642      	mov	r2, r8
 800b978:	464b      	mov	r3, r9
 800b97a:	4606      	mov	r6, r0
 800b97c:	460f      	mov	r7, r1
 800b97e:	f7f5 f8cb 	bl	8000b18 <__aeabi_dcmpgt>
 800b982:	b9d0      	cbnz	r0, 800b9ba <_dtoa_r+0x6c2>
 800b984:	4642      	mov	r2, r8
 800b986:	464b      	mov	r3, r9
 800b988:	4630      	mov	r0, r6
 800b98a:	4639      	mov	r1, r7
 800b98c:	f7f5 f89c 	bl	8000ac8 <__aeabi_dcmpeq>
 800b990:	b110      	cbz	r0, 800b998 <_dtoa_r+0x6a0>
 800b992:	f01a 0f01 	tst.w	sl, #1
 800b996:	d110      	bne.n	800b9ba <_dtoa_r+0x6c2>
 800b998:	4620      	mov	r0, r4
 800b99a:	ee18 1a10 	vmov	r1, s16
 800b99e:	f000 fbed 	bl	800c17c <_Bfree>
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	9800      	ldr	r0, [sp, #0]
 800b9a6:	702b      	strb	r3, [r5, #0]
 800b9a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b9aa:	3001      	adds	r0, #1
 800b9ac:	6018      	str	r0, [r3, #0]
 800b9ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	f43f acf1 	beq.w	800b398 <_dtoa_r+0xa0>
 800b9b6:	601d      	str	r5, [r3, #0]
 800b9b8:	e4ee      	b.n	800b398 <_dtoa_r+0xa0>
 800b9ba:	9f00      	ldr	r7, [sp, #0]
 800b9bc:	462b      	mov	r3, r5
 800b9be:	461d      	mov	r5, r3
 800b9c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b9c4:	2a39      	cmp	r2, #57	; 0x39
 800b9c6:	d106      	bne.n	800b9d6 <_dtoa_r+0x6de>
 800b9c8:	9a01      	ldr	r2, [sp, #4]
 800b9ca:	429a      	cmp	r2, r3
 800b9cc:	d1f7      	bne.n	800b9be <_dtoa_r+0x6c6>
 800b9ce:	9901      	ldr	r1, [sp, #4]
 800b9d0:	2230      	movs	r2, #48	; 0x30
 800b9d2:	3701      	adds	r7, #1
 800b9d4:	700a      	strb	r2, [r1, #0]
 800b9d6:	781a      	ldrb	r2, [r3, #0]
 800b9d8:	3201      	adds	r2, #1
 800b9da:	701a      	strb	r2, [r3, #0]
 800b9dc:	e790      	b.n	800b900 <_dtoa_r+0x608>
 800b9de:	4ba6      	ldr	r3, [pc, #664]	; (800bc78 <_dtoa_r+0x980>)
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	f7f4 fe09 	bl	80005f8 <__aeabi_dmul>
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	4606      	mov	r6, r0
 800b9ec:	460f      	mov	r7, r1
 800b9ee:	f7f5 f86b 	bl	8000ac8 <__aeabi_dcmpeq>
 800b9f2:	2800      	cmp	r0, #0
 800b9f4:	d09d      	beq.n	800b932 <_dtoa_r+0x63a>
 800b9f6:	e7cf      	b.n	800b998 <_dtoa_r+0x6a0>
 800b9f8:	9a08      	ldr	r2, [sp, #32]
 800b9fa:	2a00      	cmp	r2, #0
 800b9fc:	f000 80d7 	beq.w	800bbae <_dtoa_r+0x8b6>
 800ba00:	9a06      	ldr	r2, [sp, #24]
 800ba02:	2a01      	cmp	r2, #1
 800ba04:	f300 80ba 	bgt.w	800bb7c <_dtoa_r+0x884>
 800ba08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ba0a:	2a00      	cmp	r2, #0
 800ba0c:	f000 80b2 	beq.w	800bb74 <_dtoa_r+0x87c>
 800ba10:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ba14:	9e07      	ldr	r6, [sp, #28]
 800ba16:	9d04      	ldr	r5, [sp, #16]
 800ba18:	9a04      	ldr	r2, [sp, #16]
 800ba1a:	441a      	add	r2, r3
 800ba1c:	9204      	str	r2, [sp, #16]
 800ba1e:	9a05      	ldr	r2, [sp, #20]
 800ba20:	2101      	movs	r1, #1
 800ba22:	441a      	add	r2, r3
 800ba24:	4620      	mov	r0, r4
 800ba26:	9205      	str	r2, [sp, #20]
 800ba28:	f000 fc60 	bl	800c2ec <__i2b>
 800ba2c:	4607      	mov	r7, r0
 800ba2e:	2d00      	cmp	r5, #0
 800ba30:	dd0c      	ble.n	800ba4c <_dtoa_r+0x754>
 800ba32:	9b05      	ldr	r3, [sp, #20]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	dd09      	ble.n	800ba4c <_dtoa_r+0x754>
 800ba38:	42ab      	cmp	r3, r5
 800ba3a:	9a04      	ldr	r2, [sp, #16]
 800ba3c:	bfa8      	it	ge
 800ba3e:	462b      	movge	r3, r5
 800ba40:	1ad2      	subs	r2, r2, r3
 800ba42:	9204      	str	r2, [sp, #16]
 800ba44:	9a05      	ldr	r2, [sp, #20]
 800ba46:	1aed      	subs	r5, r5, r3
 800ba48:	1ad3      	subs	r3, r2, r3
 800ba4a:	9305      	str	r3, [sp, #20]
 800ba4c:	9b07      	ldr	r3, [sp, #28]
 800ba4e:	b31b      	cbz	r3, 800ba98 <_dtoa_r+0x7a0>
 800ba50:	9b08      	ldr	r3, [sp, #32]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	f000 80af 	beq.w	800bbb6 <_dtoa_r+0x8be>
 800ba58:	2e00      	cmp	r6, #0
 800ba5a:	dd13      	ble.n	800ba84 <_dtoa_r+0x78c>
 800ba5c:	4639      	mov	r1, r7
 800ba5e:	4632      	mov	r2, r6
 800ba60:	4620      	mov	r0, r4
 800ba62:	f000 fd03 	bl	800c46c <__pow5mult>
 800ba66:	ee18 2a10 	vmov	r2, s16
 800ba6a:	4601      	mov	r1, r0
 800ba6c:	4607      	mov	r7, r0
 800ba6e:	4620      	mov	r0, r4
 800ba70:	f000 fc52 	bl	800c318 <__multiply>
 800ba74:	ee18 1a10 	vmov	r1, s16
 800ba78:	4680      	mov	r8, r0
 800ba7a:	4620      	mov	r0, r4
 800ba7c:	f000 fb7e 	bl	800c17c <_Bfree>
 800ba80:	ee08 8a10 	vmov	s16, r8
 800ba84:	9b07      	ldr	r3, [sp, #28]
 800ba86:	1b9a      	subs	r2, r3, r6
 800ba88:	d006      	beq.n	800ba98 <_dtoa_r+0x7a0>
 800ba8a:	ee18 1a10 	vmov	r1, s16
 800ba8e:	4620      	mov	r0, r4
 800ba90:	f000 fcec 	bl	800c46c <__pow5mult>
 800ba94:	ee08 0a10 	vmov	s16, r0
 800ba98:	2101      	movs	r1, #1
 800ba9a:	4620      	mov	r0, r4
 800ba9c:	f000 fc26 	bl	800c2ec <__i2b>
 800baa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	4606      	mov	r6, r0
 800baa6:	f340 8088 	ble.w	800bbba <_dtoa_r+0x8c2>
 800baaa:	461a      	mov	r2, r3
 800baac:	4601      	mov	r1, r0
 800baae:	4620      	mov	r0, r4
 800bab0:	f000 fcdc 	bl	800c46c <__pow5mult>
 800bab4:	9b06      	ldr	r3, [sp, #24]
 800bab6:	2b01      	cmp	r3, #1
 800bab8:	4606      	mov	r6, r0
 800baba:	f340 8081 	ble.w	800bbc0 <_dtoa_r+0x8c8>
 800babe:	f04f 0800 	mov.w	r8, #0
 800bac2:	6933      	ldr	r3, [r6, #16]
 800bac4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bac8:	6918      	ldr	r0, [r3, #16]
 800baca:	f000 fbbf 	bl	800c24c <__hi0bits>
 800bace:	f1c0 0020 	rsb	r0, r0, #32
 800bad2:	9b05      	ldr	r3, [sp, #20]
 800bad4:	4418      	add	r0, r3
 800bad6:	f010 001f 	ands.w	r0, r0, #31
 800bada:	f000 8092 	beq.w	800bc02 <_dtoa_r+0x90a>
 800bade:	f1c0 0320 	rsb	r3, r0, #32
 800bae2:	2b04      	cmp	r3, #4
 800bae4:	f340 808a 	ble.w	800bbfc <_dtoa_r+0x904>
 800bae8:	f1c0 001c 	rsb	r0, r0, #28
 800baec:	9b04      	ldr	r3, [sp, #16]
 800baee:	4403      	add	r3, r0
 800baf0:	9304      	str	r3, [sp, #16]
 800baf2:	9b05      	ldr	r3, [sp, #20]
 800baf4:	4403      	add	r3, r0
 800baf6:	4405      	add	r5, r0
 800baf8:	9305      	str	r3, [sp, #20]
 800bafa:	9b04      	ldr	r3, [sp, #16]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	dd07      	ble.n	800bb10 <_dtoa_r+0x818>
 800bb00:	ee18 1a10 	vmov	r1, s16
 800bb04:	461a      	mov	r2, r3
 800bb06:	4620      	mov	r0, r4
 800bb08:	f000 fd0a 	bl	800c520 <__lshift>
 800bb0c:	ee08 0a10 	vmov	s16, r0
 800bb10:	9b05      	ldr	r3, [sp, #20]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	dd05      	ble.n	800bb22 <_dtoa_r+0x82a>
 800bb16:	4631      	mov	r1, r6
 800bb18:	461a      	mov	r2, r3
 800bb1a:	4620      	mov	r0, r4
 800bb1c:	f000 fd00 	bl	800c520 <__lshift>
 800bb20:	4606      	mov	r6, r0
 800bb22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d06e      	beq.n	800bc06 <_dtoa_r+0x90e>
 800bb28:	ee18 0a10 	vmov	r0, s16
 800bb2c:	4631      	mov	r1, r6
 800bb2e:	f000 fd67 	bl	800c600 <__mcmp>
 800bb32:	2800      	cmp	r0, #0
 800bb34:	da67      	bge.n	800bc06 <_dtoa_r+0x90e>
 800bb36:	9b00      	ldr	r3, [sp, #0]
 800bb38:	3b01      	subs	r3, #1
 800bb3a:	ee18 1a10 	vmov	r1, s16
 800bb3e:	9300      	str	r3, [sp, #0]
 800bb40:	220a      	movs	r2, #10
 800bb42:	2300      	movs	r3, #0
 800bb44:	4620      	mov	r0, r4
 800bb46:	f000 fb3b 	bl	800c1c0 <__multadd>
 800bb4a:	9b08      	ldr	r3, [sp, #32]
 800bb4c:	ee08 0a10 	vmov	s16, r0
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	f000 81b1 	beq.w	800beb8 <_dtoa_r+0xbc0>
 800bb56:	2300      	movs	r3, #0
 800bb58:	4639      	mov	r1, r7
 800bb5a:	220a      	movs	r2, #10
 800bb5c:	4620      	mov	r0, r4
 800bb5e:	f000 fb2f 	bl	800c1c0 <__multadd>
 800bb62:	9b02      	ldr	r3, [sp, #8]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	4607      	mov	r7, r0
 800bb68:	f300 808e 	bgt.w	800bc88 <_dtoa_r+0x990>
 800bb6c:	9b06      	ldr	r3, [sp, #24]
 800bb6e:	2b02      	cmp	r3, #2
 800bb70:	dc51      	bgt.n	800bc16 <_dtoa_r+0x91e>
 800bb72:	e089      	b.n	800bc88 <_dtoa_r+0x990>
 800bb74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bb76:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bb7a:	e74b      	b.n	800ba14 <_dtoa_r+0x71c>
 800bb7c:	9b03      	ldr	r3, [sp, #12]
 800bb7e:	1e5e      	subs	r6, r3, #1
 800bb80:	9b07      	ldr	r3, [sp, #28]
 800bb82:	42b3      	cmp	r3, r6
 800bb84:	bfbf      	itttt	lt
 800bb86:	9b07      	ldrlt	r3, [sp, #28]
 800bb88:	9607      	strlt	r6, [sp, #28]
 800bb8a:	1af2      	sublt	r2, r6, r3
 800bb8c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800bb8e:	bfb6      	itet	lt
 800bb90:	189b      	addlt	r3, r3, r2
 800bb92:	1b9e      	subge	r6, r3, r6
 800bb94:	930a      	strlt	r3, [sp, #40]	; 0x28
 800bb96:	9b03      	ldr	r3, [sp, #12]
 800bb98:	bfb8      	it	lt
 800bb9a:	2600      	movlt	r6, #0
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	bfb7      	itett	lt
 800bba0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800bba4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800bba8:	1a9d      	sublt	r5, r3, r2
 800bbaa:	2300      	movlt	r3, #0
 800bbac:	e734      	b.n	800ba18 <_dtoa_r+0x720>
 800bbae:	9e07      	ldr	r6, [sp, #28]
 800bbb0:	9d04      	ldr	r5, [sp, #16]
 800bbb2:	9f08      	ldr	r7, [sp, #32]
 800bbb4:	e73b      	b.n	800ba2e <_dtoa_r+0x736>
 800bbb6:	9a07      	ldr	r2, [sp, #28]
 800bbb8:	e767      	b.n	800ba8a <_dtoa_r+0x792>
 800bbba:	9b06      	ldr	r3, [sp, #24]
 800bbbc:	2b01      	cmp	r3, #1
 800bbbe:	dc18      	bgt.n	800bbf2 <_dtoa_r+0x8fa>
 800bbc0:	f1ba 0f00 	cmp.w	sl, #0
 800bbc4:	d115      	bne.n	800bbf2 <_dtoa_r+0x8fa>
 800bbc6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bbca:	b993      	cbnz	r3, 800bbf2 <_dtoa_r+0x8fa>
 800bbcc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bbd0:	0d1b      	lsrs	r3, r3, #20
 800bbd2:	051b      	lsls	r3, r3, #20
 800bbd4:	b183      	cbz	r3, 800bbf8 <_dtoa_r+0x900>
 800bbd6:	9b04      	ldr	r3, [sp, #16]
 800bbd8:	3301      	adds	r3, #1
 800bbda:	9304      	str	r3, [sp, #16]
 800bbdc:	9b05      	ldr	r3, [sp, #20]
 800bbde:	3301      	adds	r3, #1
 800bbe0:	9305      	str	r3, [sp, #20]
 800bbe2:	f04f 0801 	mov.w	r8, #1
 800bbe6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	f47f af6a 	bne.w	800bac2 <_dtoa_r+0x7ca>
 800bbee:	2001      	movs	r0, #1
 800bbf0:	e76f      	b.n	800bad2 <_dtoa_r+0x7da>
 800bbf2:	f04f 0800 	mov.w	r8, #0
 800bbf6:	e7f6      	b.n	800bbe6 <_dtoa_r+0x8ee>
 800bbf8:	4698      	mov	r8, r3
 800bbfa:	e7f4      	b.n	800bbe6 <_dtoa_r+0x8ee>
 800bbfc:	f43f af7d 	beq.w	800bafa <_dtoa_r+0x802>
 800bc00:	4618      	mov	r0, r3
 800bc02:	301c      	adds	r0, #28
 800bc04:	e772      	b.n	800baec <_dtoa_r+0x7f4>
 800bc06:	9b03      	ldr	r3, [sp, #12]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	dc37      	bgt.n	800bc7c <_dtoa_r+0x984>
 800bc0c:	9b06      	ldr	r3, [sp, #24]
 800bc0e:	2b02      	cmp	r3, #2
 800bc10:	dd34      	ble.n	800bc7c <_dtoa_r+0x984>
 800bc12:	9b03      	ldr	r3, [sp, #12]
 800bc14:	9302      	str	r3, [sp, #8]
 800bc16:	9b02      	ldr	r3, [sp, #8]
 800bc18:	b96b      	cbnz	r3, 800bc36 <_dtoa_r+0x93e>
 800bc1a:	4631      	mov	r1, r6
 800bc1c:	2205      	movs	r2, #5
 800bc1e:	4620      	mov	r0, r4
 800bc20:	f000 face 	bl	800c1c0 <__multadd>
 800bc24:	4601      	mov	r1, r0
 800bc26:	4606      	mov	r6, r0
 800bc28:	ee18 0a10 	vmov	r0, s16
 800bc2c:	f000 fce8 	bl	800c600 <__mcmp>
 800bc30:	2800      	cmp	r0, #0
 800bc32:	f73f adbb 	bgt.w	800b7ac <_dtoa_r+0x4b4>
 800bc36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc38:	9d01      	ldr	r5, [sp, #4]
 800bc3a:	43db      	mvns	r3, r3
 800bc3c:	9300      	str	r3, [sp, #0]
 800bc3e:	f04f 0800 	mov.w	r8, #0
 800bc42:	4631      	mov	r1, r6
 800bc44:	4620      	mov	r0, r4
 800bc46:	f000 fa99 	bl	800c17c <_Bfree>
 800bc4a:	2f00      	cmp	r7, #0
 800bc4c:	f43f aea4 	beq.w	800b998 <_dtoa_r+0x6a0>
 800bc50:	f1b8 0f00 	cmp.w	r8, #0
 800bc54:	d005      	beq.n	800bc62 <_dtoa_r+0x96a>
 800bc56:	45b8      	cmp	r8, r7
 800bc58:	d003      	beq.n	800bc62 <_dtoa_r+0x96a>
 800bc5a:	4641      	mov	r1, r8
 800bc5c:	4620      	mov	r0, r4
 800bc5e:	f000 fa8d 	bl	800c17c <_Bfree>
 800bc62:	4639      	mov	r1, r7
 800bc64:	4620      	mov	r0, r4
 800bc66:	f000 fa89 	bl	800c17c <_Bfree>
 800bc6a:	e695      	b.n	800b998 <_dtoa_r+0x6a0>
 800bc6c:	2600      	movs	r6, #0
 800bc6e:	4637      	mov	r7, r6
 800bc70:	e7e1      	b.n	800bc36 <_dtoa_r+0x93e>
 800bc72:	9700      	str	r7, [sp, #0]
 800bc74:	4637      	mov	r7, r6
 800bc76:	e599      	b.n	800b7ac <_dtoa_r+0x4b4>
 800bc78:	40240000 	.word	0x40240000
 800bc7c:	9b08      	ldr	r3, [sp, #32]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	f000 80ca 	beq.w	800be18 <_dtoa_r+0xb20>
 800bc84:	9b03      	ldr	r3, [sp, #12]
 800bc86:	9302      	str	r3, [sp, #8]
 800bc88:	2d00      	cmp	r5, #0
 800bc8a:	dd05      	ble.n	800bc98 <_dtoa_r+0x9a0>
 800bc8c:	4639      	mov	r1, r7
 800bc8e:	462a      	mov	r2, r5
 800bc90:	4620      	mov	r0, r4
 800bc92:	f000 fc45 	bl	800c520 <__lshift>
 800bc96:	4607      	mov	r7, r0
 800bc98:	f1b8 0f00 	cmp.w	r8, #0
 800bc9c:	d05b      	beq.n	800bd56 <_dtoa_r+0xa5e>
 800bc9e:	6879      	ldr	r1, [r7, #4]
 800bca0:	4620      	mov	r0, r4
 800bca2:	f000 fa2b 	bl	800c0fc <_Balloc>
 800bca6:	4605      	mov	r5, r0
 800bca8:	b928      	cbnz	r0, 800bcb6 <_dtoa_r+0x9be>
 800bcaa:	4b87      	ldr	r3, [pc, #540]	; (800bec8 <_dtoa_r+0xbd0>)
 800bcac:	4602      	mov	r2, r0
 800bcae:	f240 21ea 	movw	r1, #746	; 0x2ea
 800bcb2:	f7ff bb3b 	b.w	800b32c <_dtoa_r+0x34>
 800bcb6:	693a      	ldr	r2, [r7, #16]
 800bcb8:	3202      	adds	r2, #2
 800bcba:	0092      	lsls	r2, r2, #2
 800bcbc:	f107 010c 	add.w	r1, r7, #12
 800bcc0:	300c      	adds	r0, #12
 800bcc2:	f000 fa0d 	bl	800c0e0 <memcpy>
 800bcc6:	2201      	movs	r2, #1
 800bcc8:	4629      	mov	r1, r5
 800bcca:	4620      	mov	r0, r4
 800bccc:	f000 fc28 	bl	800c520 <__lshift>
 800bcd0:	9b01      	ldr	r3, [sp, #4]
 800bcd2:	f103 0901 	add.w	r9, r3, #1
 800bcd6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800bcda:	4413      	add	r3, r2
 800bcdc:	9305      	str	r3, [sp, #20]
 800bcde:	f00a 0301 	and.w	r3, sl, #1
 800bce2:	46b8      	mov	r8, r7
 800bce4:	9304      	str	r3, [sp, #16]
 800bce6:	4607      	mov	r7, r0
 800bce8:	4631      	mov	r1, r6
 800bcea:	ee18 0a10 	vmov	r0, s16
 800bcee:	f7ff fa75 	bl	800b1dc <quorem>
 800bcf2:	4641      	mov	r1, r8
 800bcf4:	9002      	str	r0, [sp, #8]
 800bcf6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bcfa:	ee18 0a10 	vmov	r0, s16
 800bcfe:	f000 fc7f 	bl	800c600 <__mcmp>
 800bd02:	463a      	mov	r2, r7
 800bd04:	9003      	str	r0, [sp, #12]
 800bd06:	4631      	mov	r1, r6
 800bd08:	4620      	mov	r0, r4
 800bd0a:	f000 fc95 	bl	800c638 <__mdiff>
 800bd0e:	68c2      	ldr	r2, [r0, #12]
 800bd10:	f109 3bff 	add.w	fp, r9, #4294967295
 800bd14:	4605      	mov	r5, r0
 800bd16:	bb02      	cbnz	r2, 800bd5a <_dtoa_r+0xa62>
 800bd18:	4601      	mov	r1, r0
 800bd1a:	ee18 0a10 	vmov	r0, s16
 800bd1e:	f000 fc6f 	bl	800c600 <__mcmp>
 800bd22:	4602      	mov	r2, r0
 800bd24:	4629      	mov	r1, r5
 800bd26:	4620      	mov	r0, r4
 800bd28:	9207      	str	r2, [sp, #28]
 800bd2a:	f000 fa27 	bl	800c17c <_Bfree>
 800bd2e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800bd32:	ea43 0102 	orr.w	r1, r3, r2
 800bd36:	9b04      	ldr	r3, [sp, #16]
 800bd38:	430b      	orrs	r3, r1
 800bd3a:	464d      	mov	r5, r9
 800bd3c:	d10f      	bne.n	800bd5e <_dtoa_r+0xa66>
 800bd3e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bd42:	d02a      	beq.n	800bd9a <_dtoa_r+0xaa2>
 800bd44:	9b03      	ldr	r3, [sp, #12]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	dd02      	ble.n	800bd50 <_dtoa_r+0xa58>
 800bd4a:	9b02      	ldr	r3, [sp, #8]
 800bd4c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800bd50:	f88b a000 	strb.w	sl, [fp]
 800bd54:	e775      	b.n	800bc42 <_dtoa_r+0x94a>
 800bd56:	4638      	mov	r0, r7
 800bd58:	e7ba      	b.n	800bcd0 <_dtoa_r+0x9d8>
 800bd5a:	2201      	movs	r2, #1
 800bd5c:	e7e2      	b.n	800bd24 <_dtoa_r+0xa2c>
 800bd5e:	9b03      	ldr	r3, [sp, #12]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	db04      	blt.n	800bd6e <_dtoa_r+0xa76>
 800bd64:	9906      	ldr	r1, [sp, #24]
 800bd66:	430b      	orrs	r3, r1
 800bd68:	9904      	ldr	r1, [sp, #16]
 800bd6a:	430b      	orrs	r3, r1
 800bd6c:	d122      	bne.n	800bdb4 <_dtoa_r+0xabc>
 800bd6e:	2a00      	cmp	r2, #0
 800bd70:	ddee      	ble.n	800bd50 <_dtoa_r+0xa58>
 800bd72:	ee18 1a10 	vmov	r1, s16
 800bd76:	2201      	movs	r2, #1
 800bd78:	4620      	mov	r0, r4
 800bd7a:	f000 fbd1 	bl	800c520 <__lshift>
 800bd7e:	4631      	mov	r1, r6
 800bd80:	ee08 0a10 	vmov	s16, r0
 800bd84:	f000 fc3c 	bl	800c600 <__mcmp>
 800bd88:	2800      	cmp	r0, #0
 800bd8a:	dc03      	bgt.n	800bd94 <_dtoa_r+0xa9c>
 800bd8c:	d1e0      	bne.n	800bd50 <_dtoa_r+0xa58>
 800bd8e:	f01a 0f01 	tst.w	sl, #1
 800bd92:	d0dd      	beq.n	800bd50 <_dtoa_r+0xa58>
 800bd94:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bd98:	d1d7      	bne.n	800bd4a <_dtoa_r+0xa52>
 800bd9a:	2339      	movs	r3, #57	; 0x39
 800bd9c:	f88b 3000 	strb.w	r3, [fp]
 800bda0:	462b      	mov	r3, r5
 800bda2:	461d      	mov	r5, r3
 800bda4:	3b01      	subs	r3, #1
 800bda6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bdaa:	2a39      	cmp	r2, #57	; 0x39
 800bdac:	d071      	beq.n	800be92 <_dtoa_r+0xb9a>
 800bdae:	3201      	adds	r2, #1
 800bdb0:	701a      	strb	r2, [r3, #0]
 800bdb2:	e746      	b.n	800bc42 <_dtoa_r+0x94a>
 800bdb4:	2a00      	cmp	r2, #0
 800bdb6:	dd07      	ble.n	800bdc8 <_dtoa_r+0xad0>
 800bdb8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bdbc:	d0ed      	beq.n	800bd9a <_dtoa_r+0xaa2>
 800bdbe:	f10a 0301 	add.w	r3, sl, #1
 800bdc2:	f88b 3000 	strb.w	r3, [fp]
 800bdc6:	e73c      	b.n	800bc42 <_dtoa_r+0x94a>
 800bdc8:	9b05      	ldr	r3, [sp, #20]
 800bdca:	f809 ac01 	strb.w	sl, [r9, #-1]
 800bdce:	4599      	cmp	r9, r3
 800bdd0:	d047      	beq.n	800be62 <_dtoa_r+0xb6a>
 800bdd2:	ee18 1a10 	vmov	r1, s16
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	220a      	movs	r2, #10
 800bdda:	4620      	mov	r0, r4
 800bddc:	f000 f9f0 	bl	800c1c0 <__multadd>
 800bde0:	45b8      	cmp	r8, r7
 800bde2:	ee08 0a10 	vmov	s16, r0
 800bde6:	f04f 0300 	mov.w	r3, #0
 800bdea:	f04f 020a 	mov.w	r2, #10
 800bdee:	4641      	mov	r1, r8
 800bdf0:	4620      	mov	r0, r4
 800bdf2:	d106      	bne.n	800be02 <_dtoa_r+0xb0a>
 800bdf4:	f000 f9e4 	bl	800c1c0 <__multadd>
 800bdf8:	4680      	mov	r8, r0
 800bdfa:	4607      	mov	r7, r0
 800bdfc:	f109 0901 	add.w	r9, r9, #1
 800be00:	e772      	b.n	800bce8 <_dtoa_r+0x9f0>
 800be02:	f000 f9dd 	bl	800c1c0 <__multadd>
 800be06:	4639      	mov	r1, r7
 800be08:	4680      	mov	r8, r0
 800be0a:	2300      	movs	r3, #0
 800be0c:	220a      	movs	r2, #10
 800be0e:	4620      	mov	r0, r4
 800be10:	f000 f9d6 	bl	800c1c0 <__multadd>
 800be14:	4607      	mov	r7, r0
 800be16:	e7f1      	b.n	800bdfc <_dtoa_r+0xb04>
 800be18:	9b03      	ldr	r3, [sp, #12]
 800be1a:	9302      	str	r3, [sp, #8]
 800be1c:	9d01      	ldr	r5, [sp, #4]
 800be1e:	ee18 0a10 	vmov	r0, s16
 800be22:	4631      	mov	r1, r6
 800be24:	f7ff f9da 	bl	800b1dc <quorem>
 800be28:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800be2c:	9b01      	ldr	r3, [sp, #4]
 800be2e:	f805 ab01 	strb.w	sl, [r5], #1
 800be32:	1aea      	subs	r2, r5, r3
 800be34:	9b02      	ldr	r3, [sp, #8]
 800be36:	4293      	cmp	r3, r2
 800be38:	dd09      	ble.n	800be4e <_dtoa_r+0xb56>
 800be3a:	ee18 1a10 	vmov	r1, s16
 800be3e:	2300      	movs	r3, #0
 800be40:	220a      	movs	r2, #10
 800be42:	4620      	mov	r0, r4
 800be44:	f000 f9bc 	bl	800c1c0 <__multadd>
 800be48:	ee08 0a10 	vmov	s16, r0
 800be4c:	e7e7      	b.n	800be1e <_dtoa_r+0xb26>
 800be4e:	9b02      	ldr	r3, [sp, #8]
 800be50:	2b00      	cmp	r3, #0
 800be52:	bfc8      	it	gt
 800be54:	461d      	movgt	r5, r3
 800be56:	9b01      	ldr	r3, [sp, #4]
 800be58:	bfd8      	it	le
 800be5a:	2501      	movle	r5, #1
 800be5c:	441d      	add	r5, r3
 800be5e:	f04f 0800 	mov.w	r8, #0
 800be62:	ee18 1a10 	vmov	r1, s16
 800be66:	2201      	movs	r2, #1
 800be68:	4620      	mov	r0, r4
 800be6a:	f000 fb59 	bl	800c520 <__lshift>
 800be6e:	4631      	mov	r1, r6
 800be70:	ee08 0a10 	vmov	s16, r0
 800be74:	f000 fbc4 	bl	800c600 <__mcmp>
 800be78:	2800      	cmp	r0, #0
 800be7a:	dc91      	bgt.n	800bda0 <_dtoa_r+0xaa8>
 800be7c:	d102      	bne.n	800be84 <_dtoa_r+0xb8c>
 800be7e:	f01a 0f01 	tst.w	sl, #1
 800be82:	d18d      	bne.n	800bda0 <_dtoa_r+0xaa8>
 800be84:	462b      	mov	r3, r5
 800be86:	461d      	mov	r5, r3
 800be88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800be8c:	2a30      	cmp	r2, #48	; 0x30
 800be8e:	d0fa      	beq.n	800be86 <_dtoa_r+0xb8e>
 800be90:	e6d7      	b.n	800bc42 <_dtoa_r+0x94a>
 800be92:	9a01      	ldr	r2, [sp, #4]
 800be94:	429a      	cmp	r2, r3
 800be96:	d184      	bne.n	800bda2 <_dtoa_r+0xaaa>
 800be98:	9b00      	ldr	r3, [sp, #0]
 800be9a:	3301      	adds	r3, #1
 800be9c:	9300      	str	r3, [sp, #0]
 800be9e:	2331      	movs	r3, #49	; 0x31
 800bea0:	7013      	strb	r3, [r2, #0]
 800bea2:	e6ce      	b.n	800bc42 <_dtoa_r+0x94a>
 800bea4:	4b09      	ldr	r3, [pc, #36]	; (800becc <_dtoa_r+0xbd4>)
 800bea6:	f7ff ba95 	b.w	800b3d4 <_dtoa_r+0xdc>
 800beaa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800beac:	2b00      	cmp	r3, #0
 800beae:	f47f aa6e 	bne.w	800b38e <_dtoa_r+0x96>
 800beb2:	4b07      	ldr	r3, [pc, #28]	; (800bed0 <_dtoa_r+0xbd8>)
 800beb4:	f7ff ba8e 	b.w	800b3d4 <_dtoa_r+0xdc>
 800beb8:	9b02      	ldr	r3, [sp, #8]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	dcae      	bgt.n	800be1c <_dtoa_r+0xb24>
 800bebe:	9b06      	ldr	r3, [sp, #24]
 800bec0:	2b02      	cmp	r3, #2
 800bec2:	f73f aea8 	bgt.w	800bc16 <_dtoa_r+0x91e>
 800bec6:	e7a9      	b.n	800be1c <_dtoa_r+0xb24>
 800bec8:	0800d44f 	.word	0x0800d44f
 800becc:	0800d3ac 	.word	0x0800d3ac
 800bed0:	0800d3d0 	.word	0x0800d3d0

0800bed4 <std>:
 800bed4:	2300      	movs	r3, #0
 800bed6:	b510      	push	{r4, lr}
 800bed8:	4604      	mov	r4, r0
 800beda:	e9c0 3300 	strd	r3, r3, [r0]
 800bede:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bee2:	6083      	str	r3, [r0, #8]
 800bee4:	8181      	strh	r1, [r0, #12]
 800bee6:	6643      	str	r3, [r0, #100]	; 0x64
 800bee8:	81c2      	strh	r2, [r0, #14]
 800beea:	6183      	str	r3, [r0, #24]
 800beec:	4619      	mov	r1, r3
 800beee:	2208      	movs	r2, #8
 800bef0:	305c      	adds	r0, #92	; 0x5c
 800bef2:	f7fe fd01 	bl	800a8f8 <memset>
 800bef6:	4b05      	ldr	r3, [pc, #20]	; (800bf0c <std+0x38>)
 800bef8:	6263      	str	r3, [r4, #36]	; 0x24
 800befa:	4b05      	ldr	r3, [pc, #20]	; (800bf10 <std+0x3c>)
 800befc:	62a3      	str	r3, [r4, #40]	; 0x28
 800befe:	4b05      	ldr	r3, [pc, #20]	; (800bf14 <std+0x40>)
 800bf00:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bf02:	4b05      	ldr	r3, [pc, #20]	; (800bf18 <std+0x44>)
 800bf04:	6224      	str	r4, [r4, #32]
 800bf06:	6323      	str	r3, [r4, #48]	; 0x30
 800bf08:	bd10      	pop	{r4, pc}
 800bf0a:	bf00      	nop
 800bf0c:	0800ccc5 	.word	0x0800ccc5
 800bf10:	0800cce7 	.word	0x0800cce7
 800bf14:	0800cd1f 	.word	0x0800cd1f
 800bf18:	0800cd43 	.word	0x0800cd43

0800bf1c <_cleanup_r>:
 800bf1c:	4901      	ldr	r1, [pc, #4]	; (800bf24 <_cleanup_r+0x8>)
 800bf1e:	f000 b8af 	b.w	800c080 <_fwalk_reent>
 800bf22:	bf00      	nop
 800bf24:	0800d059 	.word	0x0800d059

0800bf28 <__sfmoreglue>:
 800bf28:	b570      	push	{r4, r5, r6, lr}
 800bf2a:	2268      	movs	r2, #104	; 0x68
 800bf2c:	1e4d      	subs	r5, r1, #1
 800bf2e:	4355      	muls	r5, r2
 800bf30:	460e      	mov	r6, r1
 800bf32:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bf36:	f000 fce7 	bl	800c908 <_malloc_r>
 800bf3a:	4604      	mov	r4, r0
 800bf3c:	b140      	cbz	r0, 800bf50 <__sfmoreglue+0x28>
 800bf3e:	2100      	movs	r1, #0
 800bf40:	e9c0 1600 	strd	r1, r6, [r0]
 800bf44:	300c      	adds	r0, #12
 800bf46:	60a0      	str	r0, [r4, #8]
 800bf48:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bf4c:	f7fe fcd4 	bl	800a8f8 <memset>
 800bf50:	4620      	mov	r0, r4
 800bf52:	bd70      	pop	{r4, r5, r6, pc}

0800bf54 <__sfp_lock_acquire>:
 800bf54:	4801      	ldr	r0, [pc, #4]	; (800bf5c <__sfp_lock_acquire+0x8>)
 800bf56:	f000 b8b8 	b.w	800c0ca <__retarget_lock_acquire_recursive>
 800bf5a:	bf00      	nop
 800bf5c:	200008ba 	.word	0x200008ba

0800bf60 <__sfp_lock_release>:
 800bf60:	4801      	ldr	r0, [pc, #4]	; (800bf68 <__sfp_lock_release+0x8>)
 800bf62:	f000 b8b3 	b.w	800c0cc <__retarget_lock_release_recursive>
 800bf66:	bf00      	nop
 800bf68:	200008ba 	.word	0x200008ba

0800bf6c <__sinit_lock_acquire>:
 800bf6c:	4801      	ldr	r0, [pc, #4]	; (800bf74 <__sinit_lock_acquire+0x8>)
 800bf6e:	f000 b8ac 	b.w	800c0ca <__retarget_lock_acquire_recursive>
 800bf72:	bf00      	nop
 800bf74:	200008bb 	.word	0x200008bb

0800bf78 <__sinit_lock_release>:
 800bf78:	4801      	ldr	r0, [pc, #4]	; (800bf80 <__sinit_lock_release+0x8>)
 800bf7a:	f000 b8a7 	b.w	800c0cc <__retarget_lock_release_recursive>
 800bf7e:	bf00      	nop
 800bf80:	200008bb 	.word	0x200008bb

0800bf84 <__sinit>:
 800bf84:	b510      	push	{r4, lr}
 800bf86:	4604      	mov	r4, r0
 800bf88:	f7ff fff0 	bl	800bf6c <__sinit_lock_acquire>
 800bf8c:	69a3      	ldr	r3, [r4, #24]
 800bf8e:	b11b      	cbz	r3, 800bf98 <__sinit+0x14>
 800bf90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf94:	f7ff bff0 	b.w	800bf78 <__sinit_lock_release>
 800bf98:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bf9c:	6523      	str	r3, [r4, #80]	; 0x50
 800bf9e:	4b13      	ldr	r3, [pc, #76]	; (800bfec <__sinit+0x68>)
 800bfa0:	4a13      	ldr	r2, [pc, #76]	; (800bff0 <__sinit+0x6c>)
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	62a2      	str	r2, [r4, #40]	; 0x28
 800bfa6:	42a3      	cmp	r3, r4
 800bfa8:	bf04      	itt	eq
 800bfaa:	2301      	moveq	r3, #1
 800bfac:	61a3      	streq	r3, [r4, #24]
 800bfae:	4620      	mov	r0, r4
 800bfb0:	f000 f820 	bl	800bff4 <__sfp>
 800bfb4:	6060      	str	r0, [r4, #4]
 800bfb6:	4620      	mov	r0, r4
 800bfb8:	f000 f81c 	bl	800bff4 <__sfp>
 800bfbc:	60a0      	str	r0, [r4, #8]
 800bfbe:	4620      	mov	r0, r4
 800bfc0:	f000 f818 	bl	800bff4 <__sfp>
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	60e0      	str	r0, [r4, #12]
 800bfc8:	2104      	movs	r1, #4
 800bfca:	6860      	ldr	r0, [r4, #4]
 800bfcc:	f7ff ff82 	bl	800bed4 <std>
 800bfd0:	68a0      	ldr	r0, [r4, #8]
 800bfd2:	2201      	movs	r2, #1
 800bfd4:	2109      	movs	r1, #9
 800bfd6:	f7ff ff7d 	bl	800bed4 <std>
 800bfda:	68e0      	ldr	r0, [r4, #12]
 800bfdc:	2202      	movs	r2, #2
 800bfde:	2112      	movs	r1, #18
 800bfe0:	f7ff ff78 	bl	800bed4 <std>
 800bfe4:	2301      	movs	r3, #1
 800bfe6:	61a3      	str	r3, [r4, #24]
 800bfe8:	e7d2      	b.n	800bf90 <__sinit+0xc>
 800bfea:	bf00      	nop
 800bfec:	0800d398 	.word	0x0800d398
 800bff0:	0800bf1d 	.word	0x0800bf1d

0800bff4 <__sfp>:
 800bff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bff6:	4607      	mov	r7, r0
 800bff8:	f7ff ffac 	bl	800bf54 <__sfp_lock_acquire>
 800bffc:	4b1e      	ldr	r3, [pc, #120]	; (800c078 <__sfp+0x84>)
 800bffe:	681e      	ldr	r6, [r3, #0]
 800c000:	69b3      	ldr	r3, [r6, #24]
 800c002:	b913      	cbnz	r3, 800c00a <__sfp+0x16>
 800c004:	4630      	mov	r0, r6
 800c006:	f7ff ffbd 	bl	800bf84 <__sinit>
 800c00a:	3648      	adds	r6, #72	; 0x48
 800c00c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c010:	3b01      	subs	r3, #1
 800c012:	d503      	bpl.n	800c01c <__sfp+0x28>
 800c014:	6833      	ldr	r3, [r6, #0]
 800c016:	b30b      	cbz	r3, 800c05c <__sfp+0x68>
 800c018:	6836      	ldr	r6, [r6, #0]
 800c01a:	e7f7      	b.n	800c00c <__sfp+0x18>
 800c01c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c020:	b9d5      	cbnz	r5, 800c058 <__sfp+0x64>
 800c022:	4b16      	ldr	r3, [pc, #88]	; (800c07c <__sfp+0x88>)
 800c024:	60e3      	str	r3, [r4, #12]
 800c026:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c02a:	6665      	str	r5, [r4, #100]	; 0x64
 800c02c:	f000 f84c 	bl	800c0c8 <__retarget_lock_init_recursive>
 800c030:	f7ff ff96 	bl	800bf60 <__sfp_lock_release>
 800c034:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c038:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c03c:	6025      	str	r5, [r4, #0]
 800c03e:	61a5      	str	r5, [r4, #24]
 800c040:	2208      	movs	r2, #8
 800c042:	4629      	mov	r1, r5
 800c044:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c048:	f7fe fc56 	bl	800a8f8 <memset>
 800c04c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c050:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c054:	4620      	mov	r0, r4
 800c056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c058:	3468      	adds	r4, #104	; 0x68
 800c05a:	e7d9      	b.n	800c010 <__sfp+0x1c>
 800c05c:	2104      	movs	r1, #4
 800c05e:	4638      	mov	r0, r7
 800c060:	f7ff ff62 	bl	800bf28 <__sfmoreglue>
 800c064:	4604      	mov	r4, r0
 800c066:	6030      	str	r0, [r6, #0]
 800c068:	2800      	cmp	r0, #0
 800c06a:	d1d5      	bne.n	800c018 <__sfp+0x24>
 800c06c:	f7ff ff78 	bl	800bf60 <__sfp_lock_release>
 800c070:	230c      	movs	r3, #12
 800c072:	603b      	str	r3, [r7, #0]
 800c074:	e7ee      	b.n	800c054 <__sfp+0x60>
 800c076:	bf00      	nop
 800c078:	0800d398 	.word	0x0800d398
 800c07c:	ffff0001 	.word	0xffff0001

0800c080 <_fwalk_reent>:
 800c080:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c084:	4606      	mov	r6, r0
 800c086:	4688      	mov	r8, r1
 800c088:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c08c:	2700      	movs	r7, #0
 800c08e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c092:	f1b9 0901 	subs.w	r9, r9, #1
 800c096:	d505      	bpl.n	800c0a4 <_fwalk_reent+0x24>
 800c098:	6824      	ldr	r4, [r4, #0]
 800c09a:	2c00      	cmp	r4, #0
 800c09c:	d1f7      	bne.n	800c08e <_fwalk_reent+0xe>
 800c09e:	4638      	mov	r0, r7
 800c0a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0a4:	89ab      	ldrh	r3, [r5, #12]
 800c0a6:	2b01      	cmp	r3, #1
 800c0a8:	d907      	bls.n	800c0ba <_fwalk_reent+0x3a>
 800c0aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c0ae:	3301      	adds	r3, #1
 800c0b0:	d003      	beq.n	800c0ba <_fwalk_reent+0x3a>
 800c0b2:	4629      	mov	r1, r5
 800c0b4:	4630      	mov	r0, r6
 800c0b6:	47c0      	blx	r8
 800c0b8:	4307      	orrs	r7, r0
 800c0ba:	3568      	adds	r5, #104	; 0x68
 800c0bc:	e7e9      	b.n	800c092 <_fwalk_reent+0x12>
	...

0800c0c0 <_localeconv_r>:
 800c0c0:	4800      	ldr	r0, [pc, #0]	; (800c0c4 <_localeconv_r+0x4>)
 800c0c2:	4770      	bx	lr
 800c0c4:	2000021c 	.word	0x2000021c

0800c0c8 <__retarget_lock_init_recursive>:
 800c0c8:	4770      	bx	lr

0800c0ca <__retarget_lock_acquire_recursive>:
 800c0ca:	4770      	bx	lr

0800c0cc <__retarget_lock_release_recursive>:
 800c0cc:	4770      	bx	lr
	...

0800c0d0 <malloc>:
 800c0d0:	4b02      	ldr	r3, [pc, #8]	; (800c0dc <malloc+0xc>)
 800c0d2:	4601      	mov	r1, r0
 800c0d4:	6818      	ldr	r0, [r3, #0]
 800c0d6:	f000 bc17 	b.w	800c908 <_malloc_r>
 800c0da:	bf00      	nop
 800c0dc:	200000c8 	.word	0x200000c8

0800c0e0 <memcpy>:
 800c0e0:	440a      	add	r2, r1
 800c0e2:	4291      	cmp	r1, r2
 800c0e4:	f100 33ff 	add.w	r3, r0, #4294967295
 800c0e8:	d100      	bne.n	800c0ec <memcpy+0xc>
 800c0ea:	4770      	bx	lr
 800c0ec:	b510      	push	{r4, lr}
 800c0ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c0f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c0f6:	4291      	cmp	r1, r2
 800c0f8:	d1f9      	bne.n	800c0ee <memcpy+0xe>
 800c0fa:	bd10      	pop	{r4, pc}

0800c0fc <_Balloc>:
 800c0fc:	b570      	push	{r4, r5, r6, lr}
 800c0fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c100:	4604      	mov	r4, r0
 800c102:	460d      	mov	r5, r1
 800c104:	b976      	cbnz	r6, 800c124 <_Balloc+0x28>
 800c106:	2010      	movs	r0, #16
 800c108:	f7ff ffe2 	bl	800c0d0 <malloc>
 800c10c:	4602      	mov	r2, r0
 800c10e:	6260      	str	r0, [r4, #36]	; 0x24
 800c110:	b920      	cbnz	r0, 800c11c <_Balloc+0x20>
 800c112:	4b18      	ldr	r3, [pc, #96]	; (800c174 <_Balloc+0x78>)
 800c114:	4818      	ldr	r0, [pc, #96]	; (800c178 <_Balloc+0x7c>)
 800c116:	2166      	movs	r1, #102	; 0x66
 800c118:	f000 feea 	bl	800cef0 <__assert_func>
 800c11c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c120:	6006      	str	r6, [r0, #0]
 800c122:	60c6      	str	r6, [r0, #12]
 800c124:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c126:	68f3      	ldr	r3, [r6, #12]
 800c128:	b183      	cbz	r3, 800c14c <_Balloc+0x50>
 800c12a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c12c:	68db      	ldr	r3, [r3, #12]
 800c12e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c132:	b9b8      	cbnz	r0, 800c164 <_Balloc+0x68>
 800c134:	2101      	movs	r1, #1
 800c136:	fa01 f605 	lsl.w	r6, r1, r5
 800c13a:	1d72      	adds	r2, r6, #5
 800c13c:	0092      	lsls	r2, r2, #2
 800c13e:	4620      	mov	r0, r4
 800c140:	f000 fb60 	bl	800c804 <_calloc_r>
 800c144:	b160      	cbz	r0, 800c160 <_Balloc+0x64>
 800c146:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c14a:	e00e      	b.n	800c16a <_Balloc+0x6e>
 800c14c:	2221      	movs	r2, #33	; 0x21
 800c14e:	2104      	movs	r1, #4
 800c150:	4620      	mov	r0, r4
 800c152:	f000 fb57 	bl	800c804 <_calloc_r>
 800c156:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c158:	60f0      	str	r0, [r6, #12]
 800c15a:	68db      	ldr	r3, [r3, #12]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d1e4      	bne.n	800c12a <_Balloc+0x2e>
 800c160:	2000      	movs	r0, #0
 800c162:	bd70      	pop	{r4, r5, r6, pc}
 800c164:	6802      	ldr	r2, [r0, #0]
 800c166:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c16a:	2300      	movs	r3, #0
 800c16c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c170:	e7f7      	b.n	800c162 <_Balloc+0x66>
 800c172:	bf00      	nop
 800c174:	0800d3dd 	.word	0x0800d3dd
 800c178:	0800d4c0 	.word	0x0800d4c0

0800c17c <_Bfree>:
 800c17c:	b570      	push	{r4, r5, r6, lr}
 800c17e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c180:	4605      	mov	r5, r0
 800c182:	460c      	mov	r4, r1
 800c184:	b976      	cbnz	r6, 800c1a4 <_Bfree+0x28>
 800c186:	2010      	movs	r0, #16
 800c188:	f7ff ffa2 	bl	800c0d0 <malloc>
 800c18c:	4602      	mov	r2, r0
 800c18e:	6268      	str	r0, [r5, #36]	; 0x24
 800c190:	b920      	cbnz	r0, 800c19c <_Bfree+0x20>
 800c192:	4b09      	ldr	r3, [pc, #36]	; (800c1b8 <_Bfree+0x3c>)
 800c194:	4809      	ldr	r0, [pc, #36]	; (800c1bc <_Bfree+0x40>)
 800c196:	218a      	movs	r1, #138	; 0x8a
 800c198:	f000 feaa 	bl	800cef0 <__assert_func>
 800c19c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c1a0:	6006      	str	r6, [r0, #0]
 800c1a2:	60c6      	str	r6, [r0, #12]
 800c1a4:	b13c      	cbz	r4, 800c1b6 <_Bfree+0x3a>
 800c1a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c1a8:	6862      	ldr	r2, [r4, #4]
 800c1aa:	68db      	ldr	r3, [r3, #12]
 800c1ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c1b0:	6021      	str	r1, [r4, #0]
 800c1b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c1b6:	bd70      	pop	{r4, r5, r6, pc}
 800c1b8:	0800d3dd 	.word	0x0800d3dd
 800c1bc:	0800d4c0 	.word	0x0800d4c0

0800c1c0 <__multadd>:
 800c1c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1c4:	690d      	ldr	r5, [r1, #16]
 800c1c6:	4607      	mov	r7, r0
 800c1c8:	460c      	mov	r4, r1
 800c1ca:	461e      	mov	r6, r3
 800c1cc:	f101 0c14 	add.w	ip, r1, #20
 800c1d0:	2000      	movs	r0, #0
 800c1d2:	f8dc 3000 	ldr.w	r3, [ip]
 800c1d6:	b299      	uxth	r1, r3
 800c1d8:	fb02 6101 	mla	r1, r2, r1, r6
 800c1dc:	0c1e      	lsrs	r6, r3, #16
 800c1de:	0c0b      	lsrs	r3, r1, #16
 800c1e0:	fb02 3306 	mla	r3, r2, r6, r3
 800c1e4:	b289      	uxth	r1, r1
 800c1e6:	3001      	adds	r0, #1
 800c1e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c1ec:	4285      	cmp	r5, r0
 800c1ee:	f84c 1b04 	str.w	r1, [ip], #4
 800c1f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c1f6:	dcec      	bgt.n	800c1d2 <__multadd+0x12>
 800c1f8:	b30e      	cbz	r6, 800c23e <__multadd+0x7e>
 800c1fa:	68a3      	ldr	r3, [r4, #8]
 800c1fc:	42ab      	cmp	r3, r5
 800c1fe:	dc19      	bgt.n	800c234 <__multadd+0x74>
 800c200:	6861      	ldr	r1, [r4, #4]
 800c202:	4638      	mov	r0, r7
 800c204:	3101      	adds	r1, #1
 800c206:	f7ff ff79 	bl	800c0fc <_Balloc>
 800c20a:	4680      	mov	r8, r0
 800c20c:	b928      	cbnz	r0, 800c21a <__multadd+0x5a>
 800c20e:	4602      	mov	r2, r0
 800c210:	4b0c      	ldr	r3, [pc, #48]	; (800c244 <__multadd+0x84>)
 800c212:	480d      	ldr	r0, [pc, #52]	; (800c248 <__multadd+0x88>)
 800c214:	21b5      	movs	r1, #181	; 0xb5
 800c216:	f000 fe6b 	bl	800cef0 <__assert_func>
 800c21a:	6922      	ldr	r2, [r4, #16]
 800c21c:	3202      	adds	r2, #2
 800c21e:	f104 010c 	add.w	r1, r4, #12
 800c222:	0092      	lsls	r2, r2, #2
 800c224:	300c      	adds	r0, #12
 800c226:	f7ff ff5b 	bl	800c0e0 <memcpy>
 800c22a:	4621      	mov	r1, r4
 800c22c:	4638      	mov	r0, r7
 800c22e:	f7ff ffa5 	bl	800c17c <_Bfree>
 800c232:	4644      	mov	r4, r8
 800c234:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c238:	3501      	adds	r5, #1
 800c23a:	615e      	str	r6, [r3, #20]
 800c23c:	6125      	str	r5, [r4, #16]
 800c23e:	4620      	mov	r0, r4
 800c240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c244:	0800d44f 	.word	0x0800d44f
 800c248:	0800d4c0 	.word	0x0800d4c0

0800c24c <__hi0bits>:
 800c24c:	0c03      	lsrs	r3, r0, #16
 800c24e:	041b      	lsls	r3, r3, #16
 800c250:	b9d3      	cbnz	r3, 800c288 <__hi0bits+0x3c>
 800c252:	0400      	lsls	r0, r0, #16
 800c254:	2310      	movs	r3, #16
 800c256:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c25a:	bf04      	itt	eq
 800c25c:	0200      	lsleq	r0, r0, #8
 800c25e:	3308      	addeq	r3, #8
 800c260:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c264:	bf04      	itt	eq
 800c266:	0100      	lsleq	r0, r0, #4
 800c268:	3304      	addeq	r3, #4
 800c26a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c26e:	bf04      	itt	eq
 800c270:	0080      	lsleq	r0, r0, #2
 800c272:	3302      	addeq	r3, #2
 800c274:	2800      	cmp	r0, #0
 800c276:	db05      	blt.n	800c284 <__hi0bits+0x38>
 800c278:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c27c:	f103 0301 	add.w	r3, r3, #1
 800c280:	bf08      	it	eq
 800c282:	2320      	moveq	r3, #32
 800c284:	4618      	mov	r0, r3
 800c286:	4770      	bx	lr
 800c288:	2300      	movs	r3, #0
 800c28a:	e7e4      	b.n	800c256 <__hi0bits+0xa>

0800c28c <__lo0bits>:
 800c28c:	6803      	ldr	r3, [r0, #0]
 800c28e:	f013 0207 	ands.w	r2, r3, #7
 800c292:	4601      	mov	r1, r0
 800c294:	d00b      	beq.n	800c2ae <__lo0bits+0x22>
 800c296:	07da      	lsls	r2, r3, #31
 800c298:	d423      	bmi.n	800c2e2 <__lo0bits+0x56>
 800c29a:	0798      	lsls	r0, r3, #30
 800c29c:	bf49      	itett	mi
 800c29e:	085b      	lsrmi	r3, r3, #1
 800c2a0:	089b      	lsrpl	r3, r3, #2
 800c2a2:	2001      	movmi	r0, #1
 800c2a4:	600b      	strmi	r3, [r1, #0]
 800c2a6:	bf5c      	itt	pl
 800c2a8:	600b      	strpl	r3, [r1, #0]
 800c2aa:	2002      	movpl	r0, #2
 800c2ac:	4770      	bx	lr
 800c2ae:	b298      	uxth	r0, r3
 800c2b0:	b9a8      	cbnz	r0, 800c2de <__lo0bits+0x52>
 800c2b2:	0c1b      	lsrs	r3, r3, #16
 800c2b4:	2010      	movs	r0, #16
 800c2b6:	b2da      	uxtb	r2, r3
 800c2b8:	b90a      	cbnz	r2, 800c2be <__lo0bits+0x32>
 800c2ba:	3008      	adds	r0, #8
 800c2bc:	0a1b      	lsrs	r3, r3, #8
 800c2be:	071a      	lsls	r2, r3, #28
 800c2c0:	bf04      	itt	eq
 800c2c2:	091b      	lsreq	r3, r3, #4
 800c2c4:	3004      	addeq	r0, #4
 800c2c6:	079a      	lsls	r2, r3, #30
 800c2c8:	bf04      	itt	eq
 800c2ca:	089b      	lsreq	r3, r3, #2
 800c2cc:	3002      	addeq	r0, #2
 800c2ce:	07da      	lsls	r2, r3, #31
 800c2d0:	d403      	bmi.n	800c2da <__lo0bits+0x4e>
 800c2d2:	085b      	lsrs	r3, r3, #1
 800c2d4:	f100 0001 	add.w	r0, r0, #1
 800c2d8:	d005      	beq.n	800c2e6 <__lo0bits+0x5a>
 800c2da:	600b      	str	r3, [r1, #0]
 800c2dc:	4770      	bx	lr
 800c2de:	4610      	mov	r0, r2
 800c2e0:	e7e9      	b.n	800c2b6 <__lo0bits+0x2a>
 800c2e2:	2000      	movs	r0, #0
 800c2e4:	4770      	bx	lr
 800c2e6:	2020      	movs	r0, #32
 800c2e8:	4770      	bx	lr
	...

0800c2ec <__i2b>:
 800c2ec:	b510      	push	{r4, lr}
 800c2ee:	460c      	mov	r4, r1
 800c2f0:	2101      	movs	r1, #1
 800c2f2:	f7ff ff03 	bl	800c0fc <_Balloc>
 800c2f6:	4602      	mov	r2, r0
 800c2f8:	b928      	cbnz	r0, 800c306 <__i2b+0x1a>
 800c2fa:	4b05      	ldr	r3, [pc, #20]	; (800c310 <__i2b+0x24>)
 800c2fc:	4805      	ldr	r0, [pc, #20]	; (800c314 <__i2b+0x28>)
 800c2fe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c302:	f000 fdf5 	bl	800cef0 <__assert_func>
 800c306:	2301      	movs	r3, #1
 800c308:	6144      	str	r4, [r0, #20]
 800c30a:	6103      	str	r3, [r0, #16]
 800c30c:	bd10      	pop	{r4, pc}
 800c30e:	bf00      	nop
 800c310:	0800d44f 	.word	0x0800d44f
 800c314:	0800d4c0 	.word	0x0800d4c0

0800c318 <__multiply>:
 800c318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c31c:	4691      	mov	r9, r2
 800c31e:	690a      	ldr	r2, [r1, #16]
 800c320:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c324:	429a      	cmp	r2, r3
 800c326:	bfb8      	it	lt
 800c328:	460b      	movlt	r3, r1
 800c32a:	460c      	mov	r4, r1
 800c32c:	bfbc      	itt	lt
 800c32e:	464c      	movlt	r4, r9
 800c330:	4699      	movlt	r9, r3
 800c332:	6927      	ldr	r7, [r4, #16]
 800c334:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c338:	68a3      	ldr	r3, [r4, #8]
 800c33a:	6861      	ldr	r1, [r4, #4]
 800c33c:	eb07 060a 	add.w	r6, r7, sl
 800c340:	42b3      	cmp	r3, r6
 800c342:	b085      	sub	sp, #20
 800c344:	bfb8      	it	lt
 800c346:	3101      	addlt	r1, #1
 800c348:	f7ff fed8 	bl	800c0fc <_Balloc>
 800c34c:	b930      	cbnz	r0, 800c35c <__multiply+0x44>
 800c34e:	4602      	mov	r2, r0
 800c350:	4b44      	ldr	r3, [pc, #272]	; (800c464 <__multiply+0x14c>)
 800c352:	4845      	ldr	r0, [pc, #276]	; (800c468 <__multiply+0x150>)
 800c354:	f240 115d 	movw	r1, #349	; 0x15d
 800c358:	f000 fdca 	bl	800cef0 <__assert_func>
 800c35c:	f100 0514 	add.w	r5, r0, #20
 800c360:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c364:	462b      	mov	r3, r5
 800c366:	2200      	movs	r2, #0
 800c368:	4543      	cmp	r3, r8
 800c36a:	d321      	bcc.n	800c3b0 <__multiply+0x98>
 800c36c:	f104 0314 	add.w	r3, r4, #20
 800c370:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c374:	f109 0314 	add.w	r3, r9, #20
 800c378:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c37c:	9202      	str	r2, [sp, #8]
 800c37e:	1b3a      	subs	r2, r7, r4
 800c380:	3a15      	subs	r2, #21
 800c382:	f022 0203 	bic.w	r2, r2, #3
 800c386:	3204      	adds	r2, #4
 800c388:	f104 0115 	add.w	r1, r4, #21
 800c38c:	428f      	cmp	r7, r1
 800c38e:	bf38      	it	cc
 800c390:	2204      	movcc	r2, #4
 800c392:	9201      	str	r2, [sp, #4]
 800c394:	9a02      	ldr	r2, [sp, #8]
 800c396:	9303      	str	r3, [sp, #12]
 800c398:	429a      	cmp	r2, r3
 800c39a:	d80c      	bhi.n	800c3b6 <__multiply+0x9e>
 800c39c:	2e00      	cmp	r6, #0
 800c39e:	dd03      	ble.n	800c3a8 <__multiply+0x90>
 800c3a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d05a      	beq.n	800c45e <__multiply+0x146>
 800c3a8:	6106      	str	r6, [r0, #16]
 800c3aa:	b005      	add	sp, #20
 800c3ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3b0:	f843 2b04 	str.w	r2, [r3], #4
 800c3b4:	e7d8      	b.n	800c368 <__multiply+0x50>
 800c3b6:	f8b3 a000 	ldrh.w	sl, [r3]
 800c3ba:	f1ba 0f00 	cmp.w	sl, #0
 800c3be:	d024      	beq.n	800c40a <__multiply+0xf2>
 800c3c0:	f104 0e14 	add.w	lr, r4, #20
 800c3c4:	46a9      	mov	r9, r5
 800c3c6:	f04f 0c00 	mov.w	ip, #0
 800c3ca:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c3ce:	f8d9 1000 	ldr.w	r1, [r9]
 800c3d2:	fa1f fb82 	uxth.w	fp, r2
 800c3d6:	b289      	uxth	r1, r1
 800c3d8:	fb0a 110b 	mla	r1, sl, fp, r1
 800c3dc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c3e0:	f8d9 2000 	ldr.w	r2, [r9]
 800c3e4:	4461      	add	r1, ip
 800c3e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c3ea:	fb0a c20b 	mla	r2, sl, fp, ip
 800c3ee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c3f2:	b289      	uxth	r1, r1
 800c3f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c3f8:	4577      	cmp	r7, lr
 800c3fa:	f849 1b04 	str.w	r1, [r9], #4
 800c3fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c402:	d8e2      	bhi.n	800c3ca <__multiply+0xb2>
 800c404:	9a01      	ldr	r2, [sp, #4]
 800c406:	f845 c002 	str.w	ip, [r5, r2]
 800c40a:	9a03      	ldr	r2, [sp, #12]
 800c40c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c410:	3304      	adds	r3, #4
 800c412:	f1b9 0f00 	cmp.w	r9, #0
 800c416:	d020      	beq.n	800c45a <__multiply+0x142>
 800c418:	6829      	ldr	r1, [r5, #0]
 800c41a:	f104 0c14 	add.w	ip, r4, #20
 800c41e:	46ae      	mov	lr, r5
 800c420:	f04f 0a00 	mov.w	sl, #0
 800c424:	f8bc b000 	ldrh.w	fp, [ip]
 800c428:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c42c:	fb09 220b 	mla	r2, r9, fp, r2
 800c430:	4492      	add	sl, r2
 800c432:	b289      	uxth	r1, r1
 800c434:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c438:	f84e 1b04 	str.w	r1, [lr], #4
 800c43c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c440:	f8be 1000 	ldrh.w	r1, [lr]
 800c444:	0c12      	lsrs	r2, r2, #16
 800c446:	fb09 1102 	mla	r1, r9, r2, r1
 800c44a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c44e:	4567      	cmp	r7, ip
 800c450:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c454:	d8e6      	bhi.n	800c424 <__multiply+0x10c>
 800c456:	9a01      	ldr	r2, [sp, #4]
 800c458:	50a9      	str	r1, [r5, r2]
 800c45a:	3504      	adds	r5, #4
 800c45c:	e79a      	b.n	800c394 <__multiply+0x7c>
 800c45e:	3e01      	subs	r6, #1
 800c460:	e79c      	b.n	800c39c <__multiply+0x84>
 800c462:	bf00      	nop
 800c464:	0800d44f 	.word	0x0800d44f
 800c468:	0800d4c0 	.word	0x0800d4c0

0800c46c <__pow5mult>:
 800c46c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c470:	4615      	mov	r5, r2
 800c472:	f012 0203 	ands.w	r2, r2, #3
 800c476:	4606      	mov	r6, r0
 800c478:	460f      	mov	r7, r1
 800c47a:	d007      	beq.n	800c48c <__pow5mult+0x20>
 800c47c:	4c25      	ldr	r4, [pc, #148]	; (800c514 <__pow5mult+0xa8>)
 800c47e:	3a01      	subs	r2, #1
 800c480:	2300      	movs	r3, #0
 800c482:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c486:	f7ff fe9b 	bl	800c1c0 <__multadd>
 800c48a:	4607      	mov	r7, r0
 800c48c:	10ad      	asrs	r5, r5, #2
 800c48e:	d03d      	beq.n	800c50c <__pow5mult+0xa0>
 800c490:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c492:	b97c      	cbnz	r4, 800c4b4 <__pow5mult+0x48>
 800c494:	2010      	movs	r0, #16
 800c496:	f7ff fe1b 	bl	800c0d0 <malloc>
 800c49a:	4602      	mov	r2, r0
 800c49c:	6270      	str	r0, [r6, #36]	; 0x24
 800c49e:	b928      	cbnz	r0, 800c4ac <__pow5mult+0x40>
 800c4a0:	4b1d      	ldr	r3, [pc, #116]	; (800c518 <__pow5mult+0xac>)
 800c4a2:	481e      	ldr	r0, [pc, #120]	; (800c51c <__pow5mult+0xb0>)
 800c4a4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c4a8:	f000 fd22 	bl	800cef0 <__assert_func>
 800c4ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c4b0:	6004      	str	r4, [r0, #0]
 800c4b2:	60c4      	str	r4, [r0, #12]
 800c4b4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c4b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c4bc:	b94c      	cbnz	r4, 800c4d2 <__pow5mult+0x66>
 800c4be:	f240 2171 	movw	r1, #625	; 0x271
 800c4c2:	4630      	mov	r0, r6
 800c4c4:	f7ff ff12 	bl	800c2ec <__i2b>
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	f8c8 0008 	str.w	r0, [r8, #8]
 800c4ce:	4604      	mov	r4, r0
 800c4d0:	6003      	str	r3, [r0, #0]
 800c4d2:	f04f 0900 	mov.w	r9, #0
 800c4d6:	07eb      	lsls	r3, r5, #31
 800c4d8:	d50a      	bpl.n	800c4f0 <__pow5mult+0x84>
 800c4da:	4639      	mov	r1, r7
 800c4dc:	4622      	mov	r2, r4
 800c4de:	4630      	mov	r0, r6
 800c4e0:	f7ff ff1a 	bl	800c318 <__multiply>
 800c4e4:	4639      	mov	r1, r7
 800c4e6:	4680      	mov	r8, r0
 800c4e8:	4630      	mov	r0, r6
 800c4ea:	f7ff fe47 	bl	800c17c <_Bfree>
 800c4ee:	4647      	mov	r7, r8
 800c4f0:	106d      	asrs	r5, r5, #1
 800c4f2:	d00b      	beq.n	800c50c <__pow5mult+0xa0>
 800c4f4:	6820      	ldr	r0, [r4, #0]
 800c4f6:	b938      	cbnz	r0, 800c508 <__pow5mult+0x9c>
 800c4f8:	4622      	mov	r2, r4
 800c4fa:	4621      	mov	r1, r4
 800c4fc:	4630      	mov	r0, r6
 800c4fe:	f7ff ff0b 	bl	800c318 <__multiply>
 800c502:	6020      	str	r0, [r4, #0]
 800c504:	f8c0 9000 	str.w	r9, [r0]
 800c508:	4604      	mov	r4, r0
 800c50a:	e7e4      	b.n	800c4d6 <__pow5mult+0x6a>
 800c50c:	4638      	mov	r0, r7
 800c50e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c512:	bf00      	nop
 800c514:	0800d610 	.word	0x0800d610
 800c518:	0800d3dd 	.word	0x0800d3dd
 800c51c:	0800d4c0 	.word	0x0800d4c0

0800c520 <__lshift>:
 800c520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c524:	460c      	mov	r4, r1
 800c526:	6849      	ldr	r1, [r1, #4]
 800c528:	6923      	ldr	r3, [r4, #16]
 800c52a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c52e:	68a3      	ldr	r3, [r4, #8]
 800c530:	4607      	mov	r7, r0
 800c532:	4691      	mov	r9, r2
 800c534:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c538:	f108 0601 	add.w	r6, r8, #1
 800c53c:	42b3      	cmp	r3, r6
 800c53e:	db0b      	blt.n	800c558 <__lshift+0x38>
 800c540:	4638      	mov	r0, r7
 800c542:	f7ff fddb 	bl	800c0fc <_Balloc>
 800c546:	4605      	mov	r5, r0
 800c548:	b948      	cbnz	r0, 800c55e <__lshift+0x3e>
 800c54a:	4602      	mov	r2, r0
 800c54c:	4b2a      	ldr	r3, [pc, #168]	; (800c5f8 <__lshift+0xd8>)
 800c54e:	482b      	ldr	r0, [pc, #172]	; (800c5fc <__lshift+0xdc>)
 800c550:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c554:	f000 fccc 	bl	800cef0 <__assert_func>
 800c558:	3101      	adds	r1, #1
 800c55a:	005b      	lsls	r3, r3, #1
 800c55c:	e7ee      	b.n	800c53c <__lshift+0x1c>
 800c55e:	2300      	movs	r3, #0
 800c560:	f100 0114 	add.w	r1, r0, #20
 800c564:	f100 0210 	add.w	r2, r0, #16
 800c568:	4618      	mov	r0, r3
 800c56a:	4553      	cmp	r3, sl
 800c56c:	db37      	blt.n	800c5de <__lshift+0xbe>
 800c56e:	6920      	ldr	r0, [r4, #16]
 800c570:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c574:	f104 0314 	add.w	r3, r4, #20
 800c578:	f019 091f 	ands.w	r9, r9, #31
 800c57c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c580:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c584:	d02f      	beq.n	800c5e6 <__lshift+0xc6>
 800c586:	f1c9 0e20 	rsb	lr, r9, #32
 800c58a:	468a      	mov	sl, r1
 800c58c:	f04f 0c00 	mov.w	ip, #0
 800c590:	681a      	ldr	r2, [r3, #0]
 800c592:	fa02 f209 	lsl.w	r2, r2, r9
 800c596:	ea42 020c 	orr.w	r2, r2, ip
 800c59a:	f84a 2b04 	str.w	r2, [sl], #4
 800c59e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5a2:	4298      	cmp	r0, r3
 800c5a4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c5a8:	d8f2      	bhi.n	800c590 <__lshift+0x70>
 800c5aa:	1b03      	subs	r3, r0, r4
 800c5ac:	3b15      	subs	r3, #21
 800c5ae:	f023 0303 	bic.w	r3, r3, #3
 800c5b2:	3304      	adds	r3, #4
 800c5b4:	f104 0215 	add.w	r2, r4, #21
 800c5b8:	4290      	cmp	r0, r2
 800c5ba:	bf38      	it	cc
 800c5bc:	2304      	movcc	r3, #4
 800c5be:	f841 c003 	str.w	ip, [r1, r3]
 800c5c2:	f1bc 0f00 	cmp.w	ip, #0
 800c5c6:	d001      	beq.n	800c5cc <__lshift+0xac>
 800c5c8:	f108 0602 	add.w	r6, r8, #2
 800c5cc:	3e01      	subs	r6, #1
 800c5ce:	4638      	mov	r0, r7
 800c5d0:	612e      	str	r6, [r5, #16]
 800c5d2:	4621      	mov	r1, r4
 800c5d4:	f7ff fdd2 	bl	800c17c <_Bfree>
 800c5d8:	4628      	mov	r0, r5
 800c5da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5de:	f842 0f04 	str.w	r0, [r2, #4]!
 800c5e2:	3301      	adds	r3, #1
 800c5e4:	e7c1      	b.n	800c56a <__lshift+0x4a>
 800c5e6:	3904      	subs	r1, #4
 800c5e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5ec:	f841 2f04 	str.w	r2, [r1, #4]!
 800c5f0:	4298      	cmp	r0, r3
 800c5f2:	d8f9      	bhi.n	800c5e8 <__lshift+0xc8>
 800c5f4:	e7ea      	b.n	800c5cc <__lshift+0xac>
 800c5f6:	bf00      	nop
 800c5f8:	0800d44f 	.word	0x0800d44f
 800c5fc:	0800d4c0 	.word	0x0800d4c0

0800c600 <__mcmp>:
 800c600:	b530      	push	{r4, r5, lr}
 800c602:	6902      	ldr	r2, [r0, #16]
 800c604:	690c      	ldr	r4, [r1, #16]
 800c606:	1b12      	subs	r2, r2, r4
 800c608:	d10e      	bne.n	800c628 <__mcmp+0x28>
 800c60a:	f100 0314 	add.w	r3, r0, #20
 800c60e:	3114      	adds	r1, #20
 800c610:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c614:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c618:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c61c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c620:	42a5      	cmp	r5, r4
 800c622:	d003      	beq.n	800c62c <__mcmp+0x2c>
 800c624:	d305      	bcc.n	800c632 <__mcmp+0x32>
 800c626:	2201      	movs	r2, #1
 800c628:	4610      	mov	r0, r2
 800c62a:	bd30      	pop	{r4, r5, pc}
 800c62c:	4283      	cmp	r3, r0
 800c62e:	d3f3      	bcc.n	800c618 <__mcmp+0x18>
 800c630:	e7fa      	b.n	800c628 <__mcmp+0x28>
 800c632:	f04f 32ff 	mov.w	r2, #4294967295
 800c636:	e7f7      	b.n	800c628 <__mcmp+0x28>

0800c638 <__mdiff>:
 800c638:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c63c:	460c      	mov	r4, r1
 800c63e:	4606      	mov	r6, r0
 800c640:	4611      	mov	r1, r2
 800c642:	4620      	mov	r0, r4
 800c644:	4690      	mov	r8, r2
 800c646:	f7ff ffdb 	bl	800c600 <__mcmp>
 800c64a:	1e05      	subs	r5, r0, #0
 800c64c:	d110      	bne.n	800c670 <__mdiff+0x38>
 800c64e:	4629      	mov	r1, r5
 800c650:	4630      	mov	r0, r6
 800c652:	f7ff fd53 	bl	800c0fc <_Balloc>
 800c656:	b930      	cbnz	r0, 800c666 <__mdiff+0x2e>
 800c658:	4b3a      	ldr	r3, [pc, #232]	; (800c744 <__mdiff+0x10c>)
 800c65a:	4602      	mov	r2, r0
 800c65c:	f240 2132 	movw	r1, #562	; 0x232
 800c660:	4839      	ldr	r0, [pc, #228]	; (800c748 <__mdiff+0x110>)
 800c662:	f000 fc45 	bl	800cef0 <__assert_func>
 800c666:	2301      	movs	r3, #1
 800c668:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c66c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c670:	bfa4      	itt	ge
 800c672:	4643      	movge	r3, r8
 800c674:	46a0      	movge	r8, r4
 800c676:	4630      	mov	r0, r6
 800c678:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c67c:	bfa6      	itte	ge
 800c67e:	461c      	movge	r4, r3
 800c680:	2500      	movge	r5, #0
 800c682:	2501      	movlt	r5, #1
 800c684:	f7ff fd3a 	bl	800c0fc <_Balloc>
 800c688:	b920      	cbnz	r0, 800c694 <__mdiff+0x5c>
 800c68a:	4b2e      	ldr	r3, [pc, #184]	; (800c744 <__mdiff+0x10c>)
 800c68c:	4602      	mov	r2, r0
 800c68e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c692:	e7e5      	b.n	800c660 <__mdiff+0x28>
 800c694:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c698:	6926      	ldr	r6, [r4, #16]
 800c69a:	60c5      	str	r5, [r0, #12]
 800c69c:	f104 0914 	add.w	r9, r4, #20
 800c6a0:	f108 0514 	add.w	r5, r8, #20
 800c6a4:	f100 0e14 	add.w	lr, r0, #20
 800c6a8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c6ac:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c6b0:	f108 0210 	add.w	r2, r8, #16
 800c6b4:	46f2      	mov	sl, lr
 800c6b6:	2100      	movs	r1, #0
 800c6b8:	f859 3b04 	ldr.w	r3, [r9], #4
 800c6bc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c6c0:	fa1f f883 	uxth.w	r8, r3
 800c6c4:	fa11 f18b 	uxtah	r1, r1, fp
 800c6c8:	0c1b      	lsrs	r3, r3, #16
 800c6ca:	eba1 0808 	sub.w	r8, r1, r8
 800c6ce:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c6d2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c6d6:	fa1f f888 	uxth.w	r8, r8
 800c6da:	1419      	asrs	r1, r3, #16
 800c6dc:	454e      	cmp	r6, r9
 800c6de:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c6e2:	f84a 3b04 	str.w	r3, [sl], #4
 800c6e6:	d8e7      	bhi.n	800c6b8 <__mdiff+0x80>
 800c6e8:	1b33      	subs	r3, r6, r4
 800c6ea:	3b15      	subs	r3, #21
 800c6ec:	f023 0303 	bic.w	r3, r3, #3
 800c6f0:	3304      	adds	r3, #4
 800c6f2:	3415      	adds	r4, #21
 800c6f4:	42a6      	cmp	r6, r4
 800c6f6:	bf38      	it	cc
 800c6f8:	2304      	movcc	r3, #4
 800c6fa:	441d      	add	r5, r3
 800c6fc:	4473      	add	r3, lr
 800c6fe:	469e      	mov	lr, r3
 800c700:	462e      	mov	r6, r5
 800c702:	4566      	cmp	r6, ip
 800c704:	d30e      	bcc.n	800c724 <__mdiff+0xec>
 800c706:	f10c 0203 	add.w	r2, ip, #3
 800c70a:	1b52      	subs	r2, r2, r5
 800c70c:	f022 0203 	bic.w	r2, r2, #3
 800c710:	3d03      	subs	r5, #3
 800c712:	45ac      	cmp	ip, r5
 800c714:	bf38      	it	cc
 800c716:	2200      	movcc	r2, #0
 800c718:	441a      	add	r2, r3
 800c71a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c71e:	b17b      	cbz	r3, 800c740 <__mdiff+0x108>
 800c720:	6107      	str	r7, [r0, #16]
 800c722:	e7a3      	b.n	800c66c <__mdiff+0x34>
 800c724:	f856 8b04 	ldr.w	r8, [r6], #4
 800c728:	fa11 f288 	uxtah	r2, r1, r8
 800c72c:	1414      	asrs	r4, r2, #16
 800c72e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c732:	b292      	uxth	r2, r2
 800c734:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c738:	f84e 2b04 	str.w	r2, [lr], #4
 800c73c:	1421      	asrs	r1, r4, #16
 800c73e:	e7e0      	b.n	800c702 <__mdiff+0xca>
 800c740:	3f01      	subs	r7, #1
 800c742:	e7ea      	b.n	800c71a <__mdiff+0xe2>
 800c744:	0800d44f 	.word	0x0800d44f
 800c748:	0800d4c0 	.word	0x0800d4c0

0800c74c <__d2b>:
 800c74c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c750:	4689      	mov	r9, r1
 800c752:	2101      	movs	r1, #1
 800c754:	ec57 6b10 	vmov	r6, r7, d0
 800c758:	4690      	mov	r8, r2
 800c75a:	f7ff fccf 	bl	800c0fc <_Balloc>
 800c75e:	4604      	mov	r4, r0
 800c760:	b930      	cbnz	r0, 800c770 <__d2b+0x24>
 800c762:	4602      	mov	r2, r0
 800c764:	4b25      	ldr	r3, [pc, #148]	; (800c7fc <__d2b+0xb0>)
 800c766:	4826      	ldr	r0, [pc, #152]	; (800c800 <__d2b+0xb4>)
 800c768:	f240 310a 	movw	r1, #778	; 0x30a
 800c76c:	f000 fbc0 	bl	800cef0 <__assert_func>
 800c770:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c774:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c778:	bb35      	cbnz	r5, 800c7c8 <__d2b+0x7c>
 800c77a:	2e00      	cmp	r6, #0
 800c77c:	9301      	str	r3, [sp, #4]
 800c77e:	d028      	beq.n	800c7d2 <__d2b+0x86>
 800c780:	4668      	mov	r0, sp
 800c782:	9600      	str	r6, [sp, #0]
 800c784:	f7ff fd82 	bl	800c28c <__lo0bits>
 800c788:	9900      	ldr	r1, [sp, #0]
 800c78a:	b300      	cbz	r0, 800c7ce <__d2b+0x82>
 800c78c:	9a01      	ldr	r2, [sp, #4]
 800c78e:	f1c0 0320 	rsb	r3, r0, #32
 800c792:	fa02 f303 	lsl.w	r3, r2, r3
 800c796:	430b      	orrs	r3, r1
 800c798:	40c2      	lsrs	r2, r0
 800c79a:	6163      	str	r3, [r4, #20]
 800c79c:	9201      	str	r2, [sp, #4]
 800c79e:	9b01      	ldr	r3, [sp, #4]
 800c7a0:	61a3      	str	r3, [r4, #24]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	bf14      	ite	ne
 800c7a6:	2202      	movne	r2, #2
 800c7a8:	2201      	moveq	r2, #1
 800c7aa:	6122      	str	r2, [r4, #16]
 800c7ac:	b1d5      	cbz	r5, 800c7e4 <__d2b+0x98>
 800c7ae:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c7b2:	4405      	add	r5, r0
 800c7b4:	f8c9 5000 	str.w	r5, [r9]
 800c7b8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c7bc:	f8c8 0000 	str.w	r0, [r8]
 800c7c0:	4620      	mov	r0, r4
 800c7c2:	b003      	add	sp, #12
 800c7c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c7c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c7cc:	e7d5      	b.n	800c77a <__d2b+0x2e>
 800c7ce:	6161      	str	r1, [r4, #20]
 800c7d0:	e7e5      	b.n	800c79e <__d2b+0x52>
 800c7d2:	a801      	add	r0, sp, #4
 800c7d4:	f7ff fd5a 	bl	800c28c <__lo0bits>
 800c7d8:	9b01      	ldr	r3, [sp, #4]
 800c7da:	6163      	str	r3, [r4, #20]
 800c7dc:	2201      	movs	r2, #1
 800c7de:	6122      	str	r2, [r4, #16]
 800c7e0:	3020      	adds	r0, #32
 800c7e2:	e7e3      	b.n	800c7ac <__d2b+0x60>
 800c7e4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c7e8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c7ec:	f8c9 0000 	str.w	r0, [r9]
 800c7f0:	6918      	ldr	r0, [r3, #16]
 800c7f2:	f7ff fd2b 	bl	800c24c <__hi0bits>
 800c7f6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c7fa:	e7df      	b.n	800c7bc <__d2b+0x70>
 800c7fc:	0800d44f 	.word	0x0800d44f
 800c800:	0800d4c0 	.word	0x0800d4c0

0800c804 <_calloc_r>:
 800c804:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c806:	fba1 2402 	umull	r2, r4, r1, r2
 800c80a:	b94c      	cbnz	r4, 800c820 <_calloc_r+0x1c>
 800c80c:	4611      	mov	r1, r2
 800c80e:	9201      	str	r2, [sp, #4]
 800c810:	f000 f87a 	bl	800c908 <_malloc_r>
 800c814:	9a01      	ldr	r2, [sp, #4]
 800c816:	4605      	mov	r5, r0
 800c818:	b930      	cbnz	r0, 800c828 <_calloc_r+0x24>
 800c81a:	4628      	mov	r0, r5
 800c81c:	b003      	add	sp, #12
 800c81e:	bd30      	pop	{r4, r5, pc}
 800c820:	220c      	movs	r2, #12
 800c822:	6002      	str	r2, [r0, #0]
 800c824:	2500      	movs	r5, #0
 800c826:	e7f8      	b.n	800c81a <_calloc_r+0x16>
 800c828:	4621      	mov	r1, r4
 800c82a:	f7fe f865 	bl	800a8f8 <memset>
 800c82e:	e7f4      	b.n	800c81a <_calloc_r+0x16>

0800c830 <_free_r>:
 800c830:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c832:	2900      	cmp	r1, #0
 800c834:	d044      	beq.n	800c8c0 <_free_r+0x90>
 800c836:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c83a:	9001      	str	r0, [sp, #4]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	f1a1 0404 	sub.w	r4, r1, #4
 800c842:	bfb8      	it	lt
 800c844:	18e4      	addlt	r4, r4, r3
 800c846:	f000 fcdf 	bl	800d208 <__malloc_lock>
 800c84a:	4a1e      	ldr	r2, [pc, #120]	; (800c8c4 <_free_r+0x94>)
 800c84c:	9801      	ldr	r0, [sp, #4]
 800c84e:	6813      	ldr	r3, [r2, #0]
 800c850:	b933      	cbnz	r3, 800c860 <_free_r+0x30>
 800c852:	6063      	str	r3, [r4, #4]
 800c854:	6014      	str	r4, [r2, #0]
 800c856:	b003      	add	sp, #12
 800c858:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c85c:	f000 bcda 	b.w	800d214 <__malloc_unlock>
 800c860:	42a3      	cmp	r3, r4
 800c862:	d908      	bls.n	800c876 <_free_r+0x46>
 800c864:	6825      	ldr	r5, [r4, #0]
 800c866:	1961      	adds	r1, r4, r5
 800c868:	428b      	cmp	r3, r1
 800c86a:	bf01      	itttt	eq
 800c86c:	6819      	ldreq	r1, [r3, #0]
 800c86e:	685b      	ldreq	r3, [r3, #4]
 800c870:	1949      	addeq	r1, r1, r5
 800c872:	6021      	streq	r1, [r4, #0]
 800c874:	e7ed      	b.n	800c852 <_free_r+0x22>
 800c876:	461a      	mov	r2, r3
 800c878:	685b      	ldr	r3, [r3, #4]
 800c87a:	b10b      	cbz	r3, 800c880 <_free_r+0x50>
 800c87c:	42a3      	cmp	r3, r4
 800c87e:	d9fa      	bls.n	800c876 <_free_r+0x46>
 800c880:	6811      	ldr	r1, [r2, #0]
 800c882:	1855      	adds	r5, r2, r1
 800c884:	42a5      	cmp	r5, r4
 800c886:	d10b      	bne.n	800c8a0 <_free_r+0x70>
 800c888:	6824      	ldr	r4, [r4, #0]
 800c88a:	4421      	add	r1, r4
 800c88c:	1854      	adds	r4, r2, r1
 800c88e:	42a3      	cmp	r3, r4
 800c890:	6011      	str	r1, [r2, #0]
 800c892:	d1e0      	bne.n	800c856 <_free_r+0x26>
 800c894:	681c      	ldr	r4, [r3, #0]
 800c896:	685b      	ldr	r3, [r3, #4]
 800c898:	6053      	str	r3, [r2, #4]
 800c89a:	4421      	add	r1, r4
 800c89c:	6011      	str	r1, [r2, #0]
 800c89e:	e7da      	b.n	800c856 <_free_r+0x26>
 800c8a0:	d902      	bls.n	800c8a8 <_free_r+0x78>
 800c8a2:	230c      	movs	r3, #12
 800c8a4:	6003      	str	r3, [r0, #0]
 800c8a6:	e7d6      	b.n	800c856 <_free_r+0x26>
 800c8a8:	6825      	ldr	r5, [r4, #0]
 800c8aa:	1961      	adds	r1, r4, r5
 800c8ac:	428b      	cmp	r3, r1
 800c8ae:	bf04      	itt	eq
 800c8b0:	6819      	ldreq	r1, [r3, #0]
 800c8b2:	685b      	ldreq	r3, [r3, #4]
 800c8b4:	6063      	str	r3, [r4, #4]
 800c8b6:	bf04      	itt	eq
 800c8b8:	1949      	addeq	r1, r1, r5
 800c8ba:	6021      	streq	r1, [r4, #0]
 800c8bc:	6054      	str	r4, [r2, #4]
 800c8be:	e7ca      	b.n	800c856 <_free_r+0x26>
 800c8c0:	b003      	add	sp, #12
 800c8c2:	bd30      	pop	{r4, r5, pc}
 800c8c4:	200008bc 	.word	0x200008bc

0800c8c8 <sbrk_aligned>:
 800c8c8:	b570      	push	{r4, r5, r6, lr}
 800c8ca:	4e0e      	ldr	r6, [pc, #56]	; (800c904 <sbrk_aligned+0x3c>)
 800c8cc:	460c      	mov	r4, r1
 800c8ce:	6831      	ldr	r1, [r6, #0]
 800c8d0:	4605      	mov	r5, r0
 800c8d2:	b911      	cbnz	r1, 800c8da <sbrk_aligned+0x12>
 800c8d4:	f000 f9e6 	bl	800cca4 <_sbrk_r>
 800c8d8:	6030      	str	r0, [r6, #0]
 800c8da:	4621      	mov	r1, r4
 800c8dc:	4628      	mov	r0, r5
 800c8de:	f000 f9e1 	bl	800cca4 <_sbrk_r>
 800c8e2:	1c43      	adds	r3, r0, #1
 800c8e4:	d00a      	beq.n	800c8fc <sbrk_aligned+0x34>
 800c8e6:	1cc4      	adds	r4, r0, #3
 800c8e8:	f024 0403 	bic.w	r4, r4, #3
 800c8ec:	42a0      	cmp	r0, r4
 800c8ee:	d007      	beq.n	800c900 <sbrk_aligned+0x38>
 800c8f0:	1a21      	subs	r1, r4, r0
 800c8f2:	4628      	mov	r0, r5
 800c8f4:	f000 f9d6 	bl	800cca4 <_sbrk_r>
 800c8f8:	3001      	adds	r0, #1
 800c8fa:	d101      	bne.n	800c900 <sbrk_aligned+0x38>
 800c8fc:	f04f 34ff 	mov.w	r4, #4294967295
 800c900:	4620      	mov	r0, r4
 800c902:	bd70      	pop	{r4, r5, r6, pc}
 800c904:	200008c0 	.word	0x200008c0

0800c908 <_malloc_r>:
 800c908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c90c:	1ccd      	adds	r5, r1, #3
 800c90e:	f025 0503 	bic.w	r5, r5, #3
 800c912:	3508      	adds	r5, #8
 800c914:	2d0c      	cmp	r5, #12
 800c916:	bf38      	it	cc
 800c918:	250c      	movcc	r5, #12
 800c91a:	2d00      	cmp	r5, #0
 800c91c:	4607      	mov	r7, r0
 800c91e:	db01      	blt.n	800c924 <_malloc_r+0x1c>
 800c920:	42a9      	cmp	r1, r5
 800c922:	d905      	bls.n	800c930 <_malloc_r+0x28>
 800c924:	230c      	movs	r3, #12
 800c926:	603b      	str	r3, [r7, #0]
 800c928:	2600      	movs	r6, #0
 800c92a:	4630      	mov	r0, r6
 800c92c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c930:	4e2e      	ldr	r6, [pc, #184]	; (800c9ec <_malloc_r+0xe4>)
 800c932:	f000 fc69 	bl	800d208 <__malloc_lock>
 800c936:	6833      	ldr	r3, [r6, #0]
 800c938:	461c      	mov	r4, r3
 800c93a:	bb34      	cbnz	r4, 800c98a <_malloc_r+0x82>
 800c93c:	4629      	mov	r1, r5
 800c93e:	4638      	mov	r0, r7
 800c940:	f7ff ffc2 	bl	800c8c8 <sbrk_aligned>
 800c944:	1c43      	adds	r3, r0, #1
 800c946:	4604      	mov	r4, r0
 800c948:	d14d      	bne.n	800c9e6 <_malloc_r+0xde>
 800c94a:	6834      	ldr	r4, [r6, #0]
 800c94c:	4626      	mov	r6, r4
 800c94e:	2e00      	cmp	r6, #0
 800c950:	d140      	bne.n	800c9d4 <_malloc_r+0xcc>
 800c952:	6823      	ldr	r3, [r4, #0]
 800c954:	4631      	mov	r1, r6
 800c956:	4638      	mov	r0, r7
 800c958:	eb04 0803 	add.w	r8, r4, r3
 800c95c:	f000 f9a2 	bl	800cca4 <_sbrk_r>
 800c960:	4580      	cmp	r8, r0
 800c962:	d13a      	bne.n	800c9da <_malloc_r+0xd2>
 800c964:	6821      	ldr	r1, [r4, #0]
 800c966:	3503      	adds	r5, #3
 800c968:	1a6d      	subs	r5, r5, r1
 800c96a:	f025 0503 	bic.w	r5, r5, #3
 800c96e:	3508      	adds	r5, #8
 800c970:	2d0c      	cmp	r5, #12
 800c972:	bf38      	it	cc
 800c974:	250c      	movcc	r5, #12
 800c976:	4629      	mov	r1, r5
 800c978:	4638      	mov	r0, r7
 800c97a:	f7ff ffa5 	bl	800c8c8 <sbrk_aligned>
 800c97e:	3001      	adds	r0, #1
 800c980:	d02b      	beq.n	800c9da <_malloc_r+0xd2>
 800c982:	6823      	ldr	r3, [r4, #0]
 800c984:	442b      	add	r3, r5
 800c986:	6023      	str	r3, [r4, #0]
 800c988:	e00e      	b.n	800c9a8 <_malloc_r+0xa0>
 800c98a:	6822      	ldr	r2, [r4, #0]
 800c98c:	1b52      	subs	r2, r2, r5
 800c98e:	d41e      	bmi.n	800c9ce <_malloc_r+0xc6>
 800c990:	2a0b      	cmp	r2, #11
 800c992:	d916      	bls.n	800c9c2 <_malloc_r+0xba>
 800c994:	1961      	adds	r1, r4, r5
 800c996:	42a3      	cmp	r3, r4
 800c998:	6025      	str	r5, [r4, #0]
 800c99a:	bf18      	it	ne
 800c99c:	6059      	strne	r1, [r3, #4]
 800c99e:	6863      	ldr	r3, [r4, #4]
 800c9a0:	bf08      	it	eq
 800c9a2:	6031      	streq	r1, [r6, #0]
 800c9a4:	5162      	str	r2, [r4, r5]
 800c9a6:	604b      	str	r3, [r1, #4]
 800c9a8:	4638      	mov	r0, r7
 800c9aa:	f104 060b 	add.w	r6, r4, #11
 800c9ae:	f000 fc31 	bl	800d214 <__malloc_unlock>
 800c9b2:	f026 0607 	bic.w	r6, r6, #7
 800c9b6:	1d23      	adds	r3, r4, #4
 800c9b8:	1af2      	subs	r2, r6, r3
 800c9ba:	d0b6      	beq.n	800c92a <_malloc_r+0x22>
 800c9bc:	1b9b      	subs	r3, r3, r6
 800c9be:	50a3      	str	r3, [r4, r2]
 800c9c0:	e7b3      	b.n	800c92a <_malloc_r+0x22>
 800c9c2:	6862      	ldr	r2, [r4, #4]
 800c9c4:	42a3      	cmp	r3, r4
 800c9c6:	bf0c      	ite	eq
 800c9c8:	6032      	streq	r2, [r6, #0]
 800c9ca:	605a      	strne	r2, [r3, #4]
 800c9cc:	e7ec      	b.n	800c9a8 <_malloc_r+0xa0>
 800c9ce:	4623      	mov	r3, r4
 800c9d0:	6864      	ldr	r4, [r4, #4]
 800c9d2:	e7b2      	b.n	800c93a <_malloc_r+0x32>
 800c9d4:	4634      	mov	r4, r6
 800c9d6:	6876      	ldr	r6, [r6, #4]
 800c9d8:	e7b9      	b.n	800c94e <_malloc_r+0x46>
 800c9da:	230c      	movs	r3, #12
 800c9dc:	603b      	str	r3, [r7, #0]
 800c9de:	4638      	mov	r0, r7
 800c9e0:	f000 fc18 	bl	800d214 <__malloc_unlock>
 800c9e4:	e7a1      	b.n	800c92a <_malloc_r+0x22>
 800c9e6:	6025      	str	r5, [r4, #0]
 800c9e8:	e7de      	b.n	800c9a8 <_malloc_r+0xa0>
 800c9ea:	bf00      	nop
 800c9ec:	200008bc 	.word	0x200008bc

0800c9f0 <__sfputc_r>:
 800c9f0:	6893      	ldr	r3, [r2, #8]
 800c9f2:	3b01      	subs	r3, #1
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	b410      	push	{r4}
 800c9f8:	6093      	str	r3, [r2, #8]
 800c9fa:	da08      	bge.n	800ca0e <__sfputc_r+0x1e>
 800c9fc:	6994      	ldr	r4, [r2, #24]
 800c9fe:	42a3      	cmp	r3, r4
 800ca00:	db01      	blt.n	800ca06 <__sfputc_r+0x16>
 800ca02:	290a      	cmp	r1, #10
 800ca04:	d103      	bne.n	800ca0e <__sfputc_r+0x1e>
 800ca06:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca0a:	f000 b99f 	b.w	800cd4c <__swbuf_r>
 800ca0e:	6813      	ldr	r3, [r2, #0]
 800ca10:	1c58      	adds	r0, r3, #1
 800ca12:	6010      	str	r0, [r2, #0]
 800ca14:	7019      	strb	r1, [r3, #0]
 800ca16:	4608      	mov	r0, r1
 800ca18:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca1c:	4770      	bx	lr

0800ca1e <__sfputs_r>:
 800ca1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca20:	4606      	mov	r6, r0
 800ca22:	460f      	mov	r7, r1
 800ca24:	4614      	mov	r4, r2
 800ca26:	18d5      	adds	r5, r2, r3
 800ca28:	42ac      	cmp	r4, r5
 800ca2a:	d101      	bne.n	800ca30 <__sfputs_r+0x12>
 800ca2c:	2000      	movs	r0, #0
 800ca2e:	e007      	b.n	800ca40 <__sfputs_r+0x22>
 800ca30:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca34:	463a      	mov	r2, r7
 800ca36:	4630      	mov	r0, r6
 800ca38:	f7ff ffda 	bl	800c9f0 <__sfputc_r>
 800ca3c:	1c43      	adds	r3, r0, #1
 800ca3e:	d1f3      	bne.n	800ca28 <__sfputs_r+0xa>
 800ca40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ca44 <_vfiprintf_r>:
 800ca44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca48:	460d      	mov	r5, r1
 800ca4a:	b09d      	sub	sp, #116	; 0x74
 800ca4c:	4614      	mov	r4, r2
 800ca4e:	4698      	mov	r8, r3
 800ca50:	4606      	mov	r6, r0
 800ca52:	b118      	cbz	r0, 800ca5c <_vfiprintf_r+0x18>
 800ca54:	6983      	ldr	r3, [r0, #24]
 800ca56:	b90b      	cbnz	r3, 800ca5c <_vfiprintf_r+0x18>
 800ca58:	f7ff fa94 	bl	800bf84 <__sinit>
 800ca5c:	4b89      	ldr	r3, [pc, #548]	; (800cc84 <_vfiprintf_r+0x240>)
 800ca5e:	429d      	cmp	r5, r3
 800ca60:	d11b      	bne.n	800ca9a <_vfiprintf_r+0x56>
 800ca62:	6875      	ldr	r5, [r6, #4]
 800ca64:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca66:	07d9      	lsls	r1, r3, #31
 800ca68:	d405      	bmi.n	800ca76 <_vfiprintf_r+0x32>
 800ca6a:	89ab      	ldrh	r3, [r5, #12]
 800ca6c:	059a      	lsls	r2, r3, #22
 800ca6e:	d402      	bmi.n	800ca76 <_vfiprintf_r+0x32>
 800ca70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca72:	f7ff fb2a 	bl	800c0ca <__retarget_lock_acquire_recursive>
 800ca76:	89ab      	ldrh	r3, [r5, #12]
 800ca78:	071b      	lsls	r3, r3, #28
 800ca7a:	d501      	bpl.n	800ca80 <_vfiprintf_r+0x3c>
 800ca7c:	692b      	ldr	r3, [r5, #16]
 800ca7e:	b9eb      	cbnz	r3, 800cabc <_vfiprintf_r+0x78>
 800ca80:	4629      	mov	r1, r5
 800ca82:	4630      	mov	r0, r6
 800ca84:	f000 f9c6 	bl	800ce14 <__swsetup_r>
 800ca88:	b1c0      	cbz	r0, 800cabc <_vfiprintf_r+0x78>
 800ca8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca8c:	07dc      	lsls	r4, r3, #31
 800ca8e:	d50e      	bpl.n	800caae <_vfiprintf_r+0x6a>
 800ca90:	f04f 30ff 	mov.w	r0, #4294967295
 800ca94:	b01d      	add	sp, #116	; 0x74
 800ca96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca9a:	4b7b      	ldr	r3, [pc, #492]	; (800cc88 <_vfiprintf_r+0x244>)
 800ca9c:	429d      	cmp	r5, r3
 800ca9e:	d101      	bne.n	800caa4 <_vfiprintf_r+0x60>
 800caa0:	68b5      	ldr	r5, [r6, #8]
 800caa2:	e7df      	b.n	800ca64 <_vfiprintf_r+0x20>
 800caa4:	4b79      	ldr	r3, [pc, #484]	; (800cc8c <_vfiprintf_r+0x248>)
 800caa6:	429d      	cmp	r5, r3
 800caa8:	bf08      	it	eq
 800caaa:	68f5      	ldreq	r5, [r6, #12]
 800caac:	e7da      	b.n	800ca64 <_vfiprintf_r+0x20>
 800caae:	89ab      	ldrh	r3, [r5, #12]
 800cab0:	0598      	lsls	r0, r3, #22
 800cab2:	d4ed      	bmi.n	800ca90 <_vfiprintf_r+0x4c>
 800cab4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cab6:	f7ff fb09 	bl	800c0cc <__retarget_lock_release_recursive>
 800caba:	e7e9      	b.n	800ca90 <_vfiprintf_r+0x4c>
 800cabc:	2300      	movs	r3, #0
 800cabe:	9309      	str	r3, [sp, #36]	; 0x24
 800cac0:	2320      	movs	r3, #32
 800cac2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cac6:	f8cd 800c 	str.w	r8, [sp, #12]
 800caca:	2330      	movs	r3, #48	; 0x30
 800cacc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cc90 <_vfiprintf_r+0x24c>
 800cad0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cad4:	f04f 0901 	mov.w	r9, #1
 800cad8:	4623      	mov	r3, r4
 800cada:	469a      	mov	sl, r3
 800cadc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cae0:	b10a      	cbz	r2, 800cae6 <_vfiprintf_r+0xa2>
 800cae2:	2a25      	cmp	r2, #37	; 0x25
 800cae4:	d1f9      	bne.n	800cada <_vfiprintf_r+0x96>
 800cae6:	ebba 0b04 	subs.w	fp, sl, r4
 800caea:	d00b      	beq.n	800cb04 <_vfiprintf_r+0xc0>
 800caec:	465b      	mov	r3, fp
 800caee:	4622      	mov	r2, r4
 800caf0:	4629      	mov	r1, r5
 800caf2:	4630      	mov	r0, r6
 800caf4:	f7ff ff93 	bl	800ca1e <__sfputs_r>
 800caf8:	3001      	adds	r0, #1
 800cafa:	f000 80aa 	beq.w	800cc52 <_vfiprintf_r+0x20e>
 800cafe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb00:	445a      	add	r2, fp
 800cb02:	9209      	str	r2, [sp, #36]	; 0x24
 800cb04:	f89a 3000 	ldrb.w	r3, [sl]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	f000 80a2 	beq.w	800cc52 <_vfiprintf_r+0x20e>
 800cb0e:	2300      	movs	r3, #0
 800cb10:	f04f 32ff 	mov.w	r2, #4294967295
 800cb14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb18:	f10a 0a01 	add.w	sl, sl, #1
 800cb1c:	9304      	str	r3, [sp, #16]
 800cb1e:	9307      	str	r3, [sp, #28]
 800cb20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cb24:	931a      	str	r3, [sp, #104]	; 0x68
 800cb26:	4654      	mov	r4, sl
 800cb28:	2205      	movs	r2, #5
 800cb2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb2e:	4858      	ldr	r0, [pc, #352]	; (800cc90 <_vfiprintf_r+0x24c>)
 800cb30:	f7f3 fb56 	bl	80001e0 <memchr>
 800cb34:	9a04      	ldr	r2, [sp, #16]
 800cb36:	b9d8      	cbnz	r0, 800cb70 <_vfiprintf_r+0x12c>
 800cb38:	06d1      	lsls	r1, r2, #27
 800cb3a:	bf44      	itt	mi
 800cb3c:	2320      	movmi	r3, #32
 800cb3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb42:	0713      	lsls	r3, r2, #28
 800cb44:	bf44      	itt	mi
 800cb46:	232b      	movmi	r3, #43	; 0x2b
 800cb48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb4c:	f89a 3000 	ldrb.w	r3, [sl]
 800cb50:	2b2a      	cmp	r3, #42	; 0x2a
 800cb52:	d015      	beq.n	800cb80 <_vfiprintf_r+0x13c>
 800cb54:	9a07      	ldr	r2, [sp, #28]
 800cb56:	4654      	mov	r4, sl
 800cb58:	2000      	movs	r0, #0
 800cb5a:	f04f 0c0a 	mov.w	ip, #10
 800cb5e:	4621      	mov	r1, r4
 800cb60:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb64:	3b30      	subs	r3, #48	; 0x30
 800cb66:	2b09      	cmp	r3, #9
 800cb68:	d94e      	bls.n	800cc08 <_vfiprintf_r+0x1c4>
 800cb6a:	b1b0      	cbz	r0, 800cb9a <_vfiprintf_r+0x156>
 800cb6c:	9207      	str	r2, [sp, #28]
 800cb6e:	e014      	b.n	800cb9a <_vfiprintf_r+0x156>
 800cb70:	eba0 0308 	sub.w	r3, r0, r8
 800cb74:	fa09 f303 	lsl.w	r3, r9, r3
 800cb78:	4313      	orrs	r3, r2
 800cb7a:	9304      	str	r3, [sp, #16]
 800cb7c:	46a2      	mov	sl, r4
 800cb7e:	e7d2      	b.n	800cb26 <_vfiprintf_r+0xe2>
 800cb80:	9b03      	ldr	r3, [sp, #12]
 800cb82:	1d19      	adds	r1, r3, #4
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	9103      	str	r1, [sp, #12]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	bfbb      	ittet	lt
 800cb8c:	425b      	neglt	r3, r3
 800cb8e:	f042 0202 	orrlt.w	r2, r2, #2
 800cb92:	9307      	strge	r3, [sp, #28]
 800cb94:	9307      	strlt	r3, [sp, #28]
 800cb96:	bfb8      	it	lt
 800cb98:	9204      	strlt	r2, [sp, #16]
 800cb9a:	7823      	ldrb	r3, [r4, #0]
 800cb9c:	2b2e      	cmp	r3, #46	; 0x2e
 800cb9e:	d10c      	bne.n	800cbba <_vfiprintf_r+0x176>
 800cba0:	7863      	ldrb	r3, [r4, #1]
 800cba2:	2b2a      	cmp	r3, #42	; 0x2a
 800cba4:	d135      	bne.n	800cc12 <_vfiprintf_r+0x1ce>
 800cba6:	9b03      	ldr	r3, [sp, #12]
 800cba8:	1d1a      	adds	r2, r3, #4
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	9203      	str	r2, [sp, #12]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	bfb8      	it	lt
 800cbb2:	f04f 33ff 	movlt.w	r3, #4294967295
 800cbb6:	3402      	adds	r4, #2
 800cbb8:	9305      	str	r3, [sp, #20]
 800cbba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cca0 <_vfiprintf_r+0x25c>
 800cbbe:	7821      	ldrb	r1, [r4, #0]
 800cbc0:	2203      	movs	r2, #3
 800cbc2:	4650      	mov	r0, sl
 800cbc4:	f7f3 fb0c 	bl	80001e0 <memchr>
 800cbc8:	b140      	cbz	r0, 800cbdc <_vfiprintf_r+0x198>
 800cbca:	2340      	movs	r3, #64	; 0x40
 800cbcc:	eba0 000a 	sub.w	r0, r0, sl
 800cbd0:	fa03 f000 	lsl.w	r0, r3, r0
 800cbd4:	9b04      	ldr	r3, [sp, #16]
 800cbd6:	4303      	orrs	r3, r0
 800cbd8:	3401      	adds	r4, #1
 800cbda:	9304      	str	r3, [sp, #16]
 800cbdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbe0:	482c      	ldr	r0, [pc, #176]	; (800cc94 <_vfiprintf_r+0x250>)
 800cbe2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cbe6:	2206      	movs	r2, #6
 800cbe8:	f7f3 fafa 	bl	80001e0 <memchr>
 800cbec:	2800      	cmp	r0, #0
 800cbee:	d03f      	beq.n	800cc70 <_vfiprintf_r+0x22c>
 800cbf0:	4b29      	ldr	r3, [pc, #164]	; (800cc98 <_vfiprintf_r+0x254>)
 800cbf2:	bb1b      	cbnz	r3, 800cc3c <_vfiprintf_r+0x1f8>
 800cbf4:	9b03      	ldr	r3, [sp, #12]
 800cbf6:	3307      	adds	r3, #7
 800cbf8:	f023 0307 	bic.w	r3, r3, #7
 800cbfc:	3308      	adds	r3, #8
 800cbfe:	9303      	str	r3, [sp, #12]
 800cc00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc02:	443b      	add	r3, r7
 800cc04:	9309      	str	r3, [sp, #36]	; 0x24
 800cc06:	e767      	b.n	800cad8 <_vfiprintf_r+0x94>
 800cc08:	fb0c 3202 	mla	r2, ip, r2, r3
 800cc0c:	460c      	mov	r4, r1
 800cc0e:	2001      	movs	r0, #1
 800cc10:	e7a5      	b.n	800cb5e <_vfiprintf_r+0x11a>
 800cc12:	2300      	movs	r3, #0
 800cc14:	3401      	adds	r4, #1
 800cc16:	9305      	str	r3, [sp, #20]
 800cc18:	4619      	mov	r1, r3
 800cc1a:	f04f 0c0a 	mov.w	ip, #10
 800cc1e:	4620      	mov	r0, r4
 800cc20:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc24:	3a30      	subs	r2, #48	; 0x30
 800cc26:	2a09      	cmp	r2, #9
 800cc28:	d903      	bls.n	800cc32 <_vfiprintf_r+0x1ee>
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d0c5      	beq.n	800cbba <_vfiprintf_r+0x176>
 800cc2e:	9105      	str	r1, [sp, #20]
 800cc30:	e7c3      	b.n	800cbba <_vfiprintf_r+0x176>
 800cc32:	fb0c 2101 	mla	r1, ip, r1, r2
 800cc36:	4604      	mov	r4, r0
 800cc38:	2301      	movs	r3, #1
 800cc3a:	e7f0      	b.n	800cc1e <_vfiprintf_r+0x1da>
 800cc3c:	ab03      	add	r3, sp, #12
 800cc3e:	9300      	str	r3, [sp, #0]
 800cc40:	462a      	mov	r2, r5
 800cc42:	4b16      	ldr	r3, [pc, #88]	; (800cc9c <_vfiprintf_r+0x258>)
 800cc44:	a904      	add	r1, sp, #16
 800cc46:	4630      	mov	r0, r6
 800cc48:	f7fd fefe 	bl	800aa48 <_printf_float>
 800cc4c:	4607      	mov	r7, r0
 800cc4e:	1c78      	adds	r0, r7, #1
 800cc50:	d1d6      	bne.n	800cc00 <_vfiprintf_r+0x1bc>
 800cc52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cc54:	07d9      	lsls	r1, r3, #31
 800cc56:	d405      	bmi.n	800cc64 <_vfiprintf_r+0x220>
 800cc58:	89ab      	ldrh	r3, [r5, #12]
 800cc5a:	059a      	lsls	r2, r3, #22
 800cc5c:	d402      	bmi.n	800cc64 <_vfiprintf_r+0x220>
 800cc5e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cc60:	f7ff fa34 	bl	800c0cc <__retarget_lock_release_recursive>
 800cc64:	89ab      	ldrh	r3, [r5, #12]
 800cc66:	065b      	lsls	r3, r3, #25
 800cc68:	f53f af12 	bmi.w	800ca90 <_vfiprintf_r+0x4c>
 800cc6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cc6e:	e711      	b.n	800ca94 <_vfiprintf_r+0x50>
 800cc70:	ab03      	add	r3, sp, #12
 800cc72:	9300      	str	r3, [sp, #0]
 800cc74:	462a      	mov	r2, r5
 800cc76:	4b09      	ldr	r3, [pc, #36]	; (800cc9c <_vfiprintf_r+0x258>)
 800cc78:	a904      	add	r1, sp, #16
 800cc7a:	4630      	mov	r0, r6
 800cc7c:	f7fe f988 	bl	800af90 <_printf_i>
 800cc80:	e7e4      	b.n	800cc4c <_vfiprintf_r+0x208>
 800cc82:	bf00      	nop
 800cc84:	0800d480 	.word	0x0800d480
 800cc88:	0800d4a0 	.word	0x0800d4a0
 800cc8c:	0800d460 	.word	0x0800d460
 800cc90:	0800d61c 	.word	0x0800d61c
 800cc94:	0800d626 	.word	0x0800d626
 800cc98:	0800aa49 	.word	0x0800aa49
 800cc9c:	0800ca1f 	.word	0x0800ca1f
 800cca0:	0800d622 	.word	0x0800d622

0800cca4 <_sbrk_r>:
 800cca4:	b538      	push	{r3, r4, r5, lr}
 800cca6:	4d06      	ldr	r5, [pc, #24]	; (800ccc0 <_sbrk_r+0x1c>)
 800cca8:	2300      	movs	r3, #0
 800ccaa:	4604      	mov	r4, r0
 800ccac:	4608      	mov	r0, r1
 800ccae:	602b      	str	r3, [r5, #0]
 800ccb0:	f7f6 fcfe 	bl	80036b0 <_sbrk>
 800ccb4:	1c43      	adds	r3, r0, #1
 800ccb6:	d102      	bne.n	800ccbe <_sbrk_r+0x1a>
 800ccb8:	682b      	ldr	r3, [r5, #0]
 800ccba:	b103      	cbz	r3, 800ccbe <_sbrk_r+0x1a>
 800ccbc:	6023      	str	r3, [r4, #0]
 800ccbe:	bd38      	pop	{r3, r4, r5, pc}
 800ccc0:	200008c4 	.word	0x200008c4

0800ccc4 <__sread>:
 800ccc4:	b510      	push	{r4, lr}
 800ccc6:	460c      	mov	r4, r1
 800ccc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cccc:	f000 faa8 	bl	800d220 <_read_r>
 800ccd0:	2800      	cmp	r0, #0
 800ccd2:	bfab      	itete	ge
 800ccd4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ccd6:	89a3      	ldrhlt	r3, [r4, #12]
 800ccd8:	181b      	addge	r3, r3, r0
 800ccda:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ccde:	bfac      	ite	ge
 800cce0:	6563      	strge	r3, [r4, #84]	; 0x54
 800cce2:	81a3      	strhlt	r3, [r4, #12]
 800cce4:	bd10      	pop	{r4, pc}

0800cce6 <__swrite>:
 800cce6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccea:	461f      	mov	r7, r3
 800ccec:	898b      	ldrh	r3, [r1, #12]
 800ccee:	05db      	lsls	r3, r3, #23
 800ccf0:	4605      	mov	r5, r0
 800ccf2:	460c      	mov	r4, r1
 800ccf4:	4616      	mov	r6, r2
 800ccf6:	d505      	bpl.n	800cd04 <__swrite+0x1e>
 800ccf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccfc:	2302      	movs	r3, #2
 800ccfe:	2200      	movs	r2, #0
 800cd00:	f000 f9f8 	bl	800d0f4 <_lseek_r>
 800cd04:	89a3      	ldrh	r3, [r4, #12]
 800cd06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cd0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cd0e:	81a3      	strh	r3, [r4, #12]
 800cd10:	4632      	mov	r2, r6
 800cd12:	463b      	mov	r3, r7
 800cd14:	4628      	mov	r0, r5
 800cd16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cd1a:	f000 b869 	b.w	800cdf0 <_write_r>

0800cd1e <__sseek>:
 800cd1e:	b510      	push	{r4, lr}
 800cd20:	460c      	mov	r4, r1
 800cd22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd26:	f000 f9e5 	bl	800d0f4 <_lseek_r>
 800cd2a:	1c43      	adds	r3, r0, #1
 800cd2c:	89a3      	ldrh	r3, [r4, #12]
 800cd2e:	bf15      	itete	ne
 800cd30:	6560      	strne	r0, [r4, #84]	; 0x54
 800cd32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cd36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cd3a:	81a3      	strheq	r3, [r4, #12]
 800cd3c:	bf18      	it	ne
 800cd3e:	81a3      	strhne	r3, [r4, #12]
 800cd40:	bd10      	pop	{r4, pc}

0800cd42 <__sclose>:
 800cd42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd46:	f000 b8f1 	b.w	800cf2c <_close_r>
	...

0800cd4c <__swbuf_r>:
 800cd4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd4e:	460e      	mov	r6, r1
 800cd50:	4614      	mov	r4, r2
 800cd52:	4605      	mov	r5, r0
 800cd54:	b118      	cbz	r0, 800cd5e <__swbuf_r+0x12>
 800cd56:	6983      	ldr	r3, [r0, #24]
 800cd58:	b90b      	cbnz	r3, 800cd5e <__swbuf_r+0x12>
 800cd5a:	f7ff f913 	bl	800bf84 <__sinit>
 800cd5e:	4b21      	ldr	r3, [pc, #132]	; (800cde4 <__swbuf_r+0x98>)
 800cd60:	429c      	cmp	r4, r3
 800cd62:	d12b      	bne.n	800cdbc <__swbuf_r+0x70>
 800cd64:	686c      	ldr	r4, [r5, #4]
 800cd66:	69a3      	ldr	r3, [r4, #24]
 800cd68:	60a3      	str	r3, [r4, #8]
 800cd6a:	89a3      	ldrh	r3, [r4, #12]
 800cd6c:	071a      	lsls	r2, r3, #28
 800cd6e:	d52f      	bpl.n	800cdd0 <__swbuf_r+0x84>
 800cd70:	6923      	ldr	r3, [r4, #16]
 800cd72:	b36b      	cbz	r3, 800cdd0 <__swbuf_r+0x84>
 800cd74:	6923      	ldr	r3, [r4, #16]
 800cd76:	6820      	ldr	r0, [r4, #0]
 800cd78:	1ac0      	subs	r0, r0, r3
 800cd7a:	6963      	ldr	r3, [r4, #20]
 800cd7c:	b2f6      	uxtb	r6, r6
 800cd7e:	4283      	cmp	r3, r0
 800cd80:	4637      	mov	r7, r6
 800cd82:	dc04      	bgt.n	800cd8e <__swbuf_r+0x42>
 800cd84:	4621      	mov	r1, r4
 800cd86:	4628      	mov	r0, r5
 800cd88:	f000 f966 	bl	800d058 <_fflush_r>
 800cd8c:	bb30      	cbnz	r0, 800cddc <__swbuf_r+0x90>
 800cd8e:	68a3      	ldr	r3, [r4, #8]
 800cd90:	3b01      	subs	r3, #1
 800cd92:	60a3      	str	r3, [r4, #8]
 800cd94:	6823      	ldr	r3, [r4, #0]
 800cd96:	1c5a      	adds	r2, r3, #1
 800cd98:	6022      	str	r2, [r4, #0]
 800cd9a:	701e      	strb	r6, [r3, #0]
 800cd9c:	6963      	ldr	r3, [r4, #20]
 800cd9e:	3001      	adds	r0, #1
 800cda0:	4283      	cmp	r3, r0
 800cda2:	d004      	beq.n	800cdae <__swbuf_r+0x62>
 800cda4:	89a3      	ldrh	r3, [r4, #12]
 800cda6:	07db      	lsls	r3, r3, #31
 800cda8:	d506      	bpl.n	800cdb8 <__swbuf_r+0x6c>
 800cdaa:	2e0a      	cmp	r6, #10
 800cdac:	d104      	bne.n	800cdb8 <__swbuf_r+0x6c>
 800cdae:	4621      	mov	r1, r4
 800cdb0:	4628      	mov	r0, r5
 800cdb2:	f000 f951 	bl	800d058 <_fflush_r>
 800cdb6:	b988      	cbnz	r0, 800cddc <__swbuf_r+0x90>
 800cdb8:	4638      	mov	r0, r7
 800cdba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cdbc:	4b0a      	ldr	r3, [pc, #40]	; (800cde8 <__swbuf_r+0x9c>)
 800cdbe:	429c      	cmp	r4, r3
 800cdc0:	d101      	bne.n	800cdc6 <__swbuf_r+0x7a>
 800cdc2:	68ac      	ldr	r4, [r5, #8]
 800cdc4:	e7cf      	b.n	800cd66 <__swbuf_r+0x1a>
 800cdc6:	4b09      	ldr	r3, [pc, #36]	; (800cdec <__swbuf_r+0xa0>)
 800cdc8:	429c      	cmp	r4, r3
 800cdca:	bf08      	it	eq
 800cdcc:	68ec      	ldreq	r4, [r5, #12]
 800cdce:	e7ca      	b.n	800cd66 <__swbuf_r+0x1a>
 800cdd0:	4621      	mov	r1, r4
 800cdd2:	4628      	mov	r0, r5
 800cdd4:	f000 f81e 	bl	800ce14 <__swsetup_r>
 800cdd8:	2800      	cmp	r0, #0
 800cdda:	d0cb      	beq.n	800cd74 <__swbuf_r+0x28>
 800cddc:	f04f 37ff 	mov.w	r7, #4294967295
 800cde0:	e7ea      	b.n	800cdb8 <__swbuf_r+0x6c>
 800cde2:	bf00      	nop
 800cde4:	0800d480 	.word	0x0800d480
 800cde8:	0800d4a0 	.word	0x0800d4a0
 800cdec:	0800d460 	.word	0x0800d460

0800cdf0 <_write_r>:
 800cdf0:	b538      	push	{r3, r4, r5, lr}
 800cdf2:	4d07      	ldr	r5, [pc, #28]	; (800ce10 <_write_r+0x20>)
 800cdf4:	4604      	mov	r4, r0
 800cdf6:	4608      	mov	r0, r1
 800cdf8:	4611      	mov	r1, r2
 800cdfa:	2200      	movs	r2, #0
 800cdfc:	602a      	str	r2, [r5, #0]
 800cdfe:	461a      	mov	r2, r3
 800ce00:	f7f6 fc05 	bl	800360e <_write>
 800ce04:	1c43      	adds	r3, r0, #1
 800ce06:	d102      	bne.n	800ce0e <_write_r+0x1e>
 800ce08:	682b      	ldr	r3, [r5, #0]
 800ce0a:	b103      	cbz	r3, 800ce0e <_write_r+0x1e>
 800ce0c:	6023      	str	r3, [r4, #0]
 800ce0e:	bd38      	pop	{r3, r4, r5, pc}
 800ce10:	200008c4 	.word	0x200008c4

0800ce14 <__swsetup_r>:
 800ce14:	4b32      	ldr	r3, [pc, #200]	; (800cee0 <__swsetup_r+0xcc>)
 800ce16:	b570      	push	{r4, r5, r6, lr}
 800ce18:	681d      	ldr	r5, [r3, #0]
 800ce1a:	4606      	mov	r6, r0
 800ce1c:	460c      	mov	r4, r1
 800ce1e:	b125      	cbz	r5, 800ce2a <__swsetup_r+0x16>
 800ce20:	69ab      	ldr	r3, [r5, #24]
 800ce22:	b913      	cbnz	r3, 800ce2a <__swsetup_r+0x16>
 800ce24:	4628      	mov	r0, r5
 800ce26:	f7ff f8ad 	bl	800bf84 <__sinit>
 800ce2a:	4b2e      	ldr	r3, [pc, #184]	; (800cee4 <__swsetup_r+0xd0>)
 800ce2c:	429c      	cmp	r4, r3
 800ce2e:	d10f      	bne.n	800ce50 <__swsetup_r+0x3c>
 800ce30:	686c      	ldr	r4, [r5, #4]
 800ce32:	89a3      	ldrh	r3, [r4, #12]
 800ce34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ce38:	0719      	lsls	r1, r3, #28
 800ce3a:	d42c      	bmi.n	800ce96 <__swsetup_r+0x82>
 800ce3c:	06dd      	lsls	r5, r3, #27
 800ce3e:	d411      	bmi.n	800ce64 <__swsetup_r+0x50>
 800ce40:	2309      	movs	r3, #9
 800ce42:	6033      	str	r3, [r6, #0]
 800ce44:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ce48:	81a3      	strh	r3, [r4, #12]
 800ce4a:	f04f 30ff 	mov.w	r0, #4294967295
 800ce4e:	e03e      	b.n	800cece <__swsetup_r+0xba>
 800ce50:	4b25      	ldr	r3, [pc, #148]	; (800cee8 <__swsetup_r+0xd4>)
 800ce52:	429c      	cmp	r4, r3
 800ce54:	d101      	bne.n	800ce5a <__swsetup_r+0x46>
 800ce56:	68ac      	ldr	r4, [r5, #8]
 800ce58:	e7eb      	b.n	800ce32 <__swsetup_r+0x1e>
 800ce5a:	4b24      	ldr	r3, [pc, #144]	; (800ceec <__swsetup_r+0xd8>)
 800ce5c:	429c      	cmp	r4, r3
 800ce5e:	bf08      	it	eq
 800ce60:	68ec      	ldreq	r4, [r5, #12]
 800ce62:	e7e6      	b.n	800ce32 <__swsetup_r+0x1e>
 800ce64:	0758      	lsls	r0, r3, #29
 800ce66:	d512      	bpl.n	800ce8e <__swsetup_r+0x7a>
 800ce68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ce6a:	b141      	cbz	r1, 800ce7e <__swsetup_r+0x6a>
 800ce6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ce70:	4299      	cmp	r1, r3
 800ce72:	d002      	beq.n	800ce7a <__swsetup_r+0x66>
 800ce74:	4630      	mov	r0, r6
 800ce76:	f7ff fcdb 	bl	800c830 <_free_r>
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	6363      	str	r3, [r4, #52]	; 0x34
 800ce7e:	89a3      	ldrh	r3, [r4, #12]
 800ce80:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ce84:	81a3      	strh	r3, [r4, #12]
 800ce86:	2300      	movs	r3, #0
 800ce88:	6063      	str	r3, [r4, #4]
 800ce8a:	6923      	ldr	r3, [r4, #16]
 800ce8c:	6023      	str	r3, [r4, #0]
 800ce8e:	89a3      	ldrh	r3, [r4, #12]
 800ce90:	f043 0308 	orr.w	r3, r3, #8
 800ce94:	81a3      	strh	r3, [r4, #12]
 800ce96:	6923      	ldr	r3, [r4, #16]
 800ce98:	b94b      	cbnz	r3, 800ceae <__swsetup_r+0x9a>
 800ce9a:	89a3      	ldrh	r3, [r4, #12]
 800ce9c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cea0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cea4:	d003      	beq.n	800ceae <__swsetup_r+0x9a>
 800cea6:	4621      	mov	r1, r4
 800cea8:	4630      	mov	r0, r6
 800ceaa:	f000 f95b 	bl	800d164 <__smakebuf_r>
 800ceae:	89a0      	ldrh	r0, [r4, #12]
 800ceb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ceb4:	f010 0301 	ands.w	r3, r0, #1
 800ceb8:	d00a      	beq.n	800ced0 <__swsetup_r+0xbc>
 800ceba:	2300      	movs	r3, #0
 800cebc:	60a3      	str	r3, [r4, #8]
 800cebe:	6963      	ldr	r3, [r4, #20]
 800cec0:	425b      	negs	r3, r3
 800cec2:	61a3      	str	r3, [r4, #24]
 800cec4:	6923      	ldr	r3, [r4, #16]
 800cec6:	b943      	cbnz	r3, 800ceda <__swsetup_r+0xc6>
 800cec8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cecc:	d1ba      	bne.n	800ce44 <__swsetup_r+0x30>
 800cece:	bd70      	pop	{r4, r5, r6, pc}
 800ced0:	0781      	lsls	r1, r0, #30
 800ced2:	bf58      	it	pl
 800ced4:	6963      	ldrpl	r3, [r4, #20]
 800ced6:	60a3      	str	r3, [r4, #8]
 800ced8:	e7f4      	b.n	800cec4 <__swsetup_r+0xb0>
 800ceda:	2000      	movs	r0, #0
 800cedc:	e7f7      	b.n	800cece <__swsetup_r+0xba>
 800cede:	bf00      	nop
 800cee0:	200000c8 	.word	0x200000c8
 800cee4:	0800d480 	.word	0x0800d480
 800cee8:	0800d4a0 	.word	0x0800d4a0
 800ceec:	0800d460 	.word	0x0800d460

0800cef0 <__assert_func>:
 800cef0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cef2:	4614      	mov	r4, r2
 800cef4:	461a      	mov	r2, r3
 800cef6:	4b09      	ldr	r3, [pc, #36]	; (800cf1c <__assert_func+0x2c>)
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	4605      	mov	r5, r0
 800cefc:	68d8      	ldr	r0, [r3, #12]
 800cefe:	b14c      	cbz	r4, 800cf14 <__assert_func+0x24>
 800cf00:	4b07      	ldr	r3, [pc, #28]	; (800cf20 <__assert_func+0x30>)
 800cf02:	9100      	str	r1, [sp, #0]
 800cf04:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cf08:	4906      	ldr	r1, [pc, #24]	; (800cf24 <__assert_func+0x34>)
 800cf0a:	462b      	mov	r3, r5
 800cf0c:	f000 f8e0 	bl	800d0d0 <fiprintf>
 800cf10:	f000 f9a5 	bl	800d25e <abort>
 800cf14:	4b04      	ldr	r3, [pc, #16]	; (800cf28 <__assert_func+0x38>)
 800cf16:	461c      	mov	r4, r3
 800cf18:	e7f3      	b.n	800cf02 <__assert_func+0x12>
 800cf1a:	bf00      	nop
 800cf1c:	200000c8 	.word	0x200000c8
 800cf20:	0800d62d 	.word	0x0800d62d
 800cf24:	0800d63a 	.word	0x0800d63a
 800cf28:	0800d668 	.word	0x0800d668

0800cf2c <_close_r>:
 800cf2c:	b538      	push	{r3, r4, r5, lr}
 800cf2e:	4d06      	ldr	r5, [pc, #24]	; (800cf48 <_close_r+0x1c>)
 800cf30:	2300      	movs	r3, #0
 800cf32:	4604      	mov	r4, r0
 800cf34:	4608      	mov	r0, r1
 800cf36:	602b      	str	r3, [r5, #0]
 800cf38:	f7f6 fb85 	bl	8003646 <_close>
 800cf3c:	1c43      	adds	r3, r0, #1
 800cf3e:	d102      	bne.n	800cf46 <_close_r+0x1a>
 800cf40:	682b      	ldr	r3, [r5, #0]
 800cf42:	b103      	cbz	r3, 800cf46 <_close_r+0x1a>
 800cf44:	6023      	str	r3, [r4, #0]
 800cf46:	bd38      	pop	{r3, r4, r5, pc}
 800cf48:	200008c4 	.word	0x200008c4

0800cf4c <__sflush_r>:
 800cf4c:	898a      	ldrh	r2, [r1, #12]
 800cf4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf52:	4605      	mov	r5, r0
 800cf54:	0710      	lsls	r0, r2, #28
 800cf56:	460c      	mov	r4, r1
 800cf58:	d458      	bmi.n	800d00c <__sflush_r+0xc0>
 800cf5a:	684b      	ldr	r3, [r1, #4]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	dc05      	bgt.n	800cf6c <__sflush_r+0x20>
 800cf60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	dc02      	bgt.n	800cf6c <__sflush_r+0x20>
 800cf66:	2000      	movs	r0, #0
 800cf68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cf6e:	2e00      	cmp	r6, #0
 800cf70:	d0f9      	beq.n	800cf66 <__sflush_r+0x1a>
 800cf72:	2300      	movs	r3, #0
 800cf74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cf78:	682f      	ldr	r7, [r5, #0]
 800cf7a:	602b      	str	r3, [r5, #0]
 800cf7c:	d032      	beq.n	800cfe4 <__sflush_r+0x98>
 800cf7e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cf80:	89a3      	ldrh	r3, [r4, #12]
 800cf82:	075a      	lsls	r2, r3, #29
 800cf84:	d505      	bpl.n	800cf92 <__sflush_r+0x46>
 800cf86:	6863      	ldr	r3, [r4, #4]
 800cf88:	1ac0      	subs	r0, r0, r3
 800cf8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cf8c:	b10b      	cbz	r3, 800cf92 <__sflush_r+0x46>
 800cf8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cf90:	1ac0      	subs	r0, r0, r3
 800cf92:	2300      	movs	r3, #0
 800cf94:	4602      	mov	r2, r0
 800cf96:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cf98:	6a21      	ldr	r1, [r4, #32]
 800cf9a:	4628      	mov	r0, r5
 800cf9c:	47b0      	blx	r6
 800cf9e:	1c43      	adds	r3, r0, #1
 800cfa0:	89a3      	ldrh	r3, [r4, #12]
 800cfa2:	d106      	bne.n	800cfb2 <__sflush_r+0x66>
 800cfa4:	6829      	ldr	r1, [r5, #0]
 800cfa6:	291d      	cmp	r1, #29
 800cfa8:	d82c      	bhi.n	800d004 <__sflush_r+0xb8>
 800cfaa:	4a2a      	ldr	r2, [pc, #168]	; (800d054 <__sflush_r+0x108>)
 800cfac:	40ca      	lsrs	r2, r1
 800cfae:	07d6      	lsls	r6, r2, #31
 800cfb0:	d528      	bpl.n	800d004 <__sflush_r+0xb8>
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	6062      	str	r2, [r4, #4]
 800cfb6:	04d9      	lsls	r1, r3, #19
 800cfb8:	6922      	ldr	r2, [r4, #16]
 800cfba:	6022      	str	r2, [r4, #0]
 800cfbc:	d504      	bpl.n	800cfc8 <__sflush_r+0x7c>
 800cfbe:	1c42      	adds	r2, r0, #1
 800cfc0:	d101      	bne.n	800cfc6 <__sflush_r+0x7a>
 800cfc2:	682b      	ldr	r3, [r5, #0]
 800cfc4:	b903      	cbnz	r3, 800cfc8 <__sflush_r+0x7c>
 800cfc6:	6560      	str	r0, [r4, #84]	; 0x54
 800cfc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cfca:	602f      	str	r7, [r5, #0]
 800cfcc:	2900      	cmp	r1, #0
 800cfce:	d0ca      	beq.n	800cf66 <__sflush_r+0x1a>
 800cfd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cfd4:	4299      	cmp	r1, r3
 800cfd6:	d002      	beq.n	800cfde <__sflush_r+0x92>
 800cfd8:	4628      	mov	r0, r5
 800cfda:	f7ff fc29 	bl	800c830 <_free_r>
 800cfde:	2000      	movs	r0, #0
 800cfe0:	6360      	str	r0, [r4, #52]	; 0x34
 800cfe2:	e7c1      	b.n	800cf68 <__sflush_r+0x1c>
 800cfe4:	6a21      	ldr	r1, [r4, #32]
 800cfe6:	2301      	movs	r3, #1
 800cfe8:	4628      	mov	r0, r5
 800cfea:	47b0      	blx	r6
 800cfec:	1c41      	adds	r1, r0, #1
 800cfee:	d1c7      	bne.n	800cf80 <__sflush_r+0x34>
 800cff0:	682b      	ldr	r3, [r5, #0]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d0c4      	beq.n	800cf80 <__sflush_r+0x34>
 800cff6:	2b1d      	cmp	r3, #29
 800cff8:	d001      	beq.n	800cffe <__sflush_r+0xb2>
 800cffa:	2b16      	cmp	r3, #22
 800cffc:	d101      	bne.n	800d002 <__sflush_r+0xb6>
 800cffe:	602f      	str	r7, [r5, #0]
 800d000:	e7b1      	b.n	800cf66 <__sflush_r+0x1a>
 800d002:	89a3      	ldrh	r3, [r4, #12]
 800d004:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d008:	81a3      	strh	r3, [r4, #12]
 800d00a:	e7ad      	b.n	800cf68 <__sflush_r+0x1c>
 800d00c:	690f      	ldr	r7, [r1, #16]
 800d00e:	2f00      	cmp	r7, #0
 800d010:	d0a9      	beq.n	800cf66 <__sflush_r+0x1a>
 800d012:	0793      	lsls	r3, r2, #30
 800d014:	680e      	ldr	r6, [r1, #0]
 800d016:	bf08      	it	eq
 800d018:	694b      	ldreq	r3, [r1, #20]
 800d01a:	600f      	str	r7, [r1, #0]
 800d01c:	bf18      	it	ne
 800d01e:	2300      	movne	r3, #0
 800d020:	eba6 0807 	sub.w	r8, r6, r7
 800d024:	608b      	str	r3, [r1, #8]
 800d026:	f1b8 0f00 	cmp.w	r8, #0
 800d02a:	dd9c      	ble.n	800cf66 <__sflush_r+0x1a>
 800d02c:	6a21      	ldr	r1, [r4, #32]
 800d02e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d030:	4643      	mov	r3, r8
 800d032:	463a      	mov	r2, r7
 800d034:	4628      	mov	r0, r5
 800d036:	47b0      	blx	r6
 800d038:	2800      	cmp	r0, #0
 800d03a:	dc06      	bgt.n	800d04a <__sflush_r+0xfe>
 800d03c:	89a3      	ldrh	r3, [r4, #12]
 800d03e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d042:	81a3      	strh	r3, [r4, #12]
 800d044:	f04f 30ff 	mov.w	r0, #4294967295
 800d048:	e78e      	b.n	800cf68 <__sflush_r+0x1c>
 800d04a:	4407      	add	r7, r0
 800d04c:	eba8 0800 	sub.w	r8, r8, r0
 800d050:	e7e9      	b.n	800d026 <__sflush_r+0xda>
 800d052:	bf00      	nop
 800d054:	20400001 	.word	0x20400001

0800d058 <_fflush_r>:
 800d058:	b538      	push	{r3, r4, r5, lr}
 800d05a:	690b      	ldr	r3, [r1, #16]
 800d05c:	4605      	mov	r5, r0
 800d05e:	460c      	mov	r4, r1
 800d060:	b913      	cbnz	r3, 800d068 <_fflush_r+0x10>
 800d062:	2500      	movs	r5, #0
 800d064:	4628      	mov	r0, r5
 800d066:	bd38      	pop	{r3, r4, r5, pc}
 800d068:	b118      	cbz	r0, 800d072 <_fflush_r+0x1a>
 800d06a:	6983      	ldr	r3, [r0, #24]
 800d06c:	b90b      	cbnz	r3, 800d072 <_fflush_r+0x1a>
 800d06e:	f7fe ff89 	bl	800bf84 <__sinit>
 800d072:	4b14      	ldr	r3, [pc, #80]	; (800d0c4 <_fflush_r+0x6c>)
 800d074:	429c      	cmp	r4, r3
 800d076:	d11b      	bne.n	800d0b0 <_fflush_r+0x58>
 800d078:	686c      	ldr	r4, [r5, #4]
 800d07a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d0ef      	beq.n	800d062 <_fflush_r+0xa>
 800d082:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d084:	07d0      	lsls	r0, r2, #31
 800d086:	d404      	bmi.n	800d092 <_fflush_r+0x3a>
 800d088:	0599      	lsls	r1, r3, #22
 800d08a:	d402      	bmi.n	800d092 <_fflush_r+0x3a>
 800d08c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d08e:	f7ff f81c 	bl	800c0ca <__retarget_lock_acquire_recursive>
 800d092:	4628      	mov	r0, r5
 800d094:	4621      	mov	r1, r4
 800d096:	f7ff ff59 	bl	800cf4c <__sflush_r>
 800d09a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d09c:	07da      	lsls	r2, r3, #31
 800d09e:	4605      	mov	r5, r0
 800d0a0:	d4e0      	bmi.n	800d064 <_fflush_r+0xc>
 800d0a2:	89a3      	ldrh	r3, [r4, #12]
 800d0a4:	059b      	lsls	r3, r3, #22
 800d0a6:	d4dd      	bmi.n	800d064 <_fflush_r+0xc>
 800d0a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d0aa:	f7ff f80f 	bl	800c0cc <__retarget_lock_release_recursive>
 800d0ae:	e7d9      	b.n	800d064 <_fflush_r+0xc>
 800d0b0:	4b05      	ldr	r3, [pc, #20]	; (800d0c8 <_fflush_r+0x70>)
 800d0b2:	429c      	cmp	r4, r3
 800d0b4:	d101      	bne.n	800d0ba <_fflush_r+0x62>
 800d0b6:	68ac      	ldr	r4, [r5, #8]
 800d0b8:	e7df      	b.n	800d07a <_fflush_r+0x22>
 800d0ba:	4b04      	ldr	r3, [pc, #16]	; (800d0cc <_fflush_r+0x74>)
 800d0bc:	429c      	cmp	r4, r3
 800d0be:	bf08      	it	eq
 800d0c0:	68ec      	ldreq	r4, [r5, #12]
 800d0c2:	e7da      	b.n	800d07a <_fflush_r+0x22>
 800d0c4:	0800d480 	.word	0x0800d480
 800d0c8:	0800d4a0 	.word	0x0800d4a0
 800d0cc:	0800d460 	.word	0x0800d460

0800d0d0 <fiprintf>:
 800d0d0:	b40e      	push	{r1, r2, r3}
 800d0d2:	b503      	push	{r0, r1, lr}
 800d0d4:	4601      	mov	r1, r0
 800d0d6:	ab03      	add	r3, sp, #12
 800d0d8:	4805      	ldr	r0, [pc, #20]	; (800d0f0 <fiprintf+0x20>)
 800d0da:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0de:	6800      	ldr	r0, [r0, #0]
 800d0e0:	9301      	str	r3, [sp, #4]
 800d0e2:	f7ff fcaf 	bl	800ca44 <_vfiprintf_r>
 800d0e6:	b002      	add	sp, #8
 800d0e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d0ec:	b003      	add	sp, #12
 800d0ee:	4770      	bx	lr
 800d0f0:	200000c8 	.word	0x200000c8

0800d0f4 <_lseek_r>:
 800d0f4:	b538      	push	{r3, r4, r5, lr}
 800d0f6:	4d07      	ldr	r5, [pc, #28]	; (800d114 <_lseek_r+0x20>)
 800d0f8:	4604      	mov	r4, r0
 800d0fa:	4608      	mov	r0, r1
 800d0fc:	4611      	mov	r1, r2
 800d0fe:	2200      	movs	r2, #0
 800d100:	602a      	str	r2, [r5, #0]
 800d102:	461a      	mov	r2, r3
 800d104:	f7f6 fac6 	bl	8003694 <_lseek>
 800d108:	1c43      	adds	r3, r0, #1
 800d10a:	d102      	bne.n	800d112 <_lseek_r+0x1e>
 800d10c:	682b      	ldr	r3, [r5, #0]
 800d10e:	b103      	cbz	r3, 800d112 <_lseek_r+0x1e>
 800d110:	6023      	str	r3, [r4, #0]
 800d112:	bd38      	pop	{r3, r4, r5, pc}
 800d114:	200008c4 	.word	0x200008c4

0800d118 <__swhatbuf_r>:
 800d118:	b570      	push	{r4, r5, r6, lr}
 800d11a:	460e      	mov	r6, r1
 800d11c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d120:	2900      	cmp	r1, #0
 800d122:	b096      	sub	sp, #88	; 0x58
 800d124:	4614      	mov	r4, r2
 800d126:	461d      	mov	r5, r3
 800d128:	da08      	bge.n	800d13c <__swhatbuf_r+0x24>
 800d12a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d12e:	2200      	movs	r2, #0
 800d130:	602a      	str	r2, [r5, #0]
 800d132:	061a      	lsls	r2, r3, #24
 800d134:	d410      	bmi.n	800d158 <__swhatbuf_r+0x40>
 800d136:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d13a:	e00e      	b.n	800d15a <__swhatbuf_r+0x42>
 800d13c:	466a      	mov	r2, sp
 800d13e:	f000 f895 	bl	800d26c <_fstat_r>
 800d142:	2800      	cmp	r0, #0
 800d144:	dbf1      	blt.n	800d12a <__swhatbuf_r+0x12>
 800d146:	9a01      	ldr	r2, [sp, #4]
 800d148:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d14c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d150:	425a      	negs	r2, r3
 800d152:	415a      	adcs	r2, r3
 800d154:	602a      	str	r2, [r5, #0]
 800d156:	e7ee      	b.n	800d136 <__swhatbuf_r+0x1e>
 800d158:	2340      	movs	r3, #64	; 0x40
 800d15a:	2000      	movs	r0, #0
 800d15c:	6023      	str	r3, [r4, #0]
 800d15e:	b016      	add	sp, #88	; 0x58
 800d160:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d164 <__smakebuf_r>:
 800d164:	898b      	ldrh	r3, [r1, #12]
 800d166:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d168:	079d      	lsls	r5, r3, #30
 800d16a:	4606      	mov	r6, r0
 800d16c:	460c      	mov	r4, r1
 800d16e:	d507      	bpl.n	800d180 <__smakebuf_r+0x1c>
 800d170:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d174:	6023      	str	r3, [r4, #0]
 800d176:	6123      	str	r3, [r4, #16]
 800d178:	2301      	movs	r3, #1
 800d17a:	6163      	str	r3, [r4, #20]
 800d17c:	b002      	add	sp, #8
 800d17e:	bd70      	pop	{r4, r5, r6, pc}
 800d180:	ab01      	add	r3, sp, #4
 800d182:	466a      	mov	r2, sp
 800d184:	f7ff ffc8 	bl	800d118 <__swhatbuf_r>
 800d188:	9900      	ldr	r1, [sp, #0]
 800d18a:	4605      	mov	r5, r0
 800d18c:	4630      	mov	r0, r6
 800d18e:	f7ff fbbb 	bl	800c908 <_malloc_r>
 800d192:	b948      	cbnz	r0, 800d1a8 <__smakebuf_r+0x44>
 800d194:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d198:	059a      	lsls	r2, r3, #22
 800d19a:	d4ef      	bmi.n	800d17c <__smakebuf_r+0x18>
 800d19c:	f023 0303 	bic.w	r3, r3, #3
 800d1a0:	f043 0302 	orr.w	r3, r3, #2
 800d1a4:	81a3      	strh	r3, [r4, #12]
 800d1a6:	e7e3      	b.n	800d170 <__smakebuf_r+0xc>
 800d1a8:	4b0d      	ldr	r3, [pc, #52]	; (800d1e0 <__smakebuf_r+0x7c>)
 800d1aa:	62b3      	str	r3, [r6, #40]	; 0x28
 800d1ac:	89a3      	ldrh	r3, [r4, #12]
 800d1ae:	6020      	str	r0, [r4, #0]
 800d1b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d1b4:	81a3      	strh	r3, [r4, #12]
 800d1b6:	9b00      	ldr	r3, [sp, #0]
 800d1b8:	6163      	str	r3, [r4, #20]
 800d1ba:	9b01      	ldr	r3, [sp, #4]
 800d1bc:	6120      	str	r0, [r4, #16]
 800d1be:	b15b      	cbz	r3, 800d1d8 <__smakebuf_r+0x74>
 800d1c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d1c4:	4630      	mov	r0, r6
 800d1c6:	f000 f863 	bl	800d290 <_isatty_r>
 800d1ca:	b128      	cbz	r0, 800d1d8 <__smakebuf_r+0x74>
 800d1cc:	89a3      	ldrh	r3, [r4, #12]
 800d1ce:	f023 0303 	bic.w	r3, r3, #3
 800d1d2:	f043 0301 	orr.w	r3, r3, #1
 800d1d6:	81a3      	strh	r3, [r4, #12]
 800d1d8:	89a0      	ldrh	r0, [r4, #12]
 800d1da:	4305      	orrs	r5, r0
 800d1dc:	81a5      	strh	r5, [r4, #12]
 800d1de:	e7cd      	b.n	800d17c <__smakebuf_r+0x18>
 800d1e0:	0800bf1d 	.word	0x0800bf1d

0800d1e4 <__ascii_mbtowc>:
 800d1e4:	b082      	sub	sp, #8
 800d1e6:	b901      	cbnz	r1, 800d1ea <__ascii_mbtowc+0x6>
 800d1e8:	a901      	add	r1, sp, #4
 800d1ea:	b142      	cbz	r2, 800d1fe <__ascii_mbtowc+0x1a>
 800d1ec:	b14b      	cbz	r3, 800d202 <__ascii_mbtowc+0x1e>
 800d1ee:	7813      	ldrb	r3, [r2, #0]
 800d1f0:	600b      	str	r3, [r1, #0]
 800d1f2:	7812      	ldrb	r2, [r2, #0]
 800d1f4:	1e10      	subs	r0, r2, #0
 800d1f6:	bf18      	it	ne
 800d1f8:	2001      	movne	r0, #1
 800d1fa:	b002      	add	sp, #8
 800d1fc:	4770      	bx	lr
 800d1fe:	4610      	mov	r0, r2
 800d200:	e7fb      	b.n	800d1fa <__ascii_mbtowc+0x16>
 800d202:	f06f 0001 	mvn.w	r0, #1
 800d206:	e7f8      	b.n	800d1fa <__ascii_mbtowc+0x16>

0800d208 <__malloc_lock>:
 800d208:	4801      	ldr	r0, [pc, #4]	; (800d210 <__malloc_lock+0x8>)
 800d20a:	f7fe bf5e 	b.w	800c0ca <__retarget_lock_acquire_recursive>
 800d20e:	bf00      	nop
 800d210:	200008b9 	.word	0x200008b9

0800d214 <__malloc_unlock>:
 800d214:	4801      	ldr	r0, [pc, #4]	; (800d21c <__malloc_unlock+0x8>)
 800d216:	f7fe bf59 	b.w	800c0cc <__retarget_lock_release_recursive>
 800d21a:	bf00      	nop
 800d21c:	200008b9 	.word	0x200008b9

0800d220 <_read_r>:
 800d220:	b538      	push	{r3, r4, r5, lr}
 800d222:	4d07      	ldr	r5, [pc, #28]	; (800d240 <_read_r+0x20>)
 800d224:	4604      	mov	r4, r0
 800d226:	4608      	mov	r0, r1
 800d228:	4611      	mov	r1, r2
 800d22a:	2200      	movs	r2, #0
 800d22c:	602a      	str	r2, [r5, #0]
 800d22e:	461a      	mov	r2, r3
 800d230:	f7f6 f9d0 	bl	80035d4 <_read>
 800d234:	1c43      	adds	r3, r0, #1
 800d236:	d102      	bne.n	800d23e <_read_r+0x1e>
 800d238:	682b      	ldr	r3, [r5, #0]
 800d23a:	b103      	cbz	r3, 800d23e <_read_r+0x1e>
 800d23c:	6023      	str	r3, [r4, #0]
 800d23e:	bd38      	pop	{r3, r4, r5, pc}
 800d240:	200008c4 	.word	0x200008c4

0800d244 <__ascii_wctomb>:
 800d244:	b149      	cbz	r1, 800d25a <__ascii_wctomb+0x16>
 800d246:	2aff      	cmp	r2, #255	; 0xff
 800d248:	bf85      	ittet	hi
 800d24a:	238a      	movhi	r3, #138	; 0x8a
 800d24c:	6003      	strhi	r3, [r0, #0]
 800d24e:	700a      	strbls	r2, [r1, #0]
 800d250:	f04f 30ff 	movhi.w	r0, #4294967295
 800d254:	bf98      	it	ls
 800d256:	2001      	movls	r0, #1
 800d258:	4770      	bx	lr
 800d25a:	4608      	mov	r0, r1
 800d25c:	4770      	bx	lr

0800d25e <abort>:
 800d25e:	b508      	push	{r3, lr}
 800d260:	2006      	movs	r0, #6
 800d262:	f000 f84d 	bl	800d300 <raise>
 800d266:	2001      	movs	r0, #1
 800d268:	f7f6 f9aa 	bl	80035c0 <_exit>

0800d26c <_fstat_r>:
 800d26c:	b538      	push	{r3, r4, r5, lr}
 800d26e:	4d07      	ldr	r5, [pc, #28]	; (800d28c <_fstat_r+0x20>)
 800d270:	2300      	movs	r3, #0
 800d272:	4604      	mov	r4, r0
 800d274:	4608      	mov	r0, r1
 800d276:	4611      	mov	r1, r2
 800d278:	602b      	str	r3, [r5, #0]
 800d27a:	f7f6 f9f0 	bl	800365e <_fstat>
 800d27e:	1c43      	adds	r3, r0, #1
 800d280:	d102      	bne.n	800d288 <_fstat_r+0x1c>
 800d282:	682b      	ldr	r3, [r5, #0]
 800d284:	b103      	cbz	r3, 800d288 <_fstat_r+0x1c>
 800d286:	6023      	str	r3, [r4, #0]
 800d288:	bd38      	pop	{r3, r4, r5, pc}
 800d28a:	bf00      	nop
 800d28c:	200008c4 	.word	0x200008c4

0800d290 <_isatty_r>:
 800d290:	b538      	push	{r3, r4, r5, lr}
 800d292:	4d06      	ldr	r5, [pc, #24]	; (800d2ac <_isatty_r+0x1c>)
 800d294:	2300      	movs	r3, #0
 800d296:	4604      	mov	r4, r0
 800d298:	4608      	mov	r0, r1
 800d29a:	602b      	str	r3, [r5, #0]
 800d29c:	f7f6 f9ef 	bl	800367e <_isatty>
 800d2a0:	1c43      	adds	r3, r0, #1
 800d2a2:	d102      	bne.n	800d2aa <_isatty_r+0x1a>
 800d2a4:	682b      	ldr	r3, [r5, #0]
 800d2a6:	b103      	cbz	r3, 800d2aa <_isatty_r+0x1a>
 800d2a8:	6023      	str	r3, [r4, #0]
 800d2aa:	bd38      	pop	{r3, r4, r5, pc}
 800d2ac:	200008c4 	.word	0x200008c4

0800d2b0 <_raise_r>:
 800d2b0:	291f      	cmp	r1, #31
 800d2b2:	b538      	push	{r3, r4, r5, lr}
 800d2b4:	4604      	mov	r4, r0
 800d2b6:	460d      	mov	r5, r1
 800d2b8:	d904      	bls.n	800d2c4 <_raise_r+0x14>
 800d2ba:	2316      	movs	r3, #22
 800d2bc:	6003      	str	r3, [r0, #0]
 800d2be:	f04f 30ff 	mov.w	r0, #4294967295
 800d2c2:	bd38      	pop	{r3, r4, r5, pc}
 800d2c4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d2c6:	b112      	cbz	r2, 800d2ce <_raise_r+0x1e>
 800d2c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d2cc:	b94b      	cbnz	r3, 800d2e2 <_raise_r+0x32>
 800d2ce:	4620      	mov	r0, r4
 800d2d0:	f000 f830 	bl	800d334 <_getpid_r>
 800d2d4:	462a      	mov	r2, r5
 800d2d6:	4601      	mov	r1, r0
 800d2d8:	4620      	mov	r0, r4
 800d2da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d2de:	f000 b817 	b.w	800d310 <_kill_r>
 800d2e2:	2b01      	cmp	r3, #1
 800d2e4:	d00a      	beq.n	800d2fc <_raise_r+0x4c>
 800d2e6:	1c59      	adds	r1, r3, #1
 800d2e8:	d103      	bne.n	800d2f2 <_raise_r+0x42>
 800d2ea:	2316      	movs	r3, #22
 800d2ec:	6003      	str	r3, [r0, #0]
 800d2ee:	2001      	movs	r0, #1
 800d2f0:	e7e7      	b.n	800d2c2 <_raise_r+0x12>
 800d2f2:	2400      	movs	r4, #0
 800d2f4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d2f8:	4628      	mov	r0, r5
 800d2fa:	4798      	blx	r3
 800d2fc:	2000      	movs	r0, #0
 800d2fe:	e7e0      	b.n	800d2c2 <_raise_r+0x12>

0800d300 <raise>:
 800d300:	4b02      	ldr	r3, [pc, #8]	; (800d30c <raise+0xc>)
 800d302:	4601      	mov	r1, r0
 800d304:	6818      	ldr	r0, [r3, #0]
 800d306:	f7ff bfd3 	b.w	800d2b0 <_raise_r>
 800d30a:	bf00      	nop
 800d30c:	200000c8 	.word	0x200000c8

0800d310 <_kill_r>:
 800d310:	b538      	push	{r3, r4, r5, lr}
 800d312:	4d07      	ldr	r5, [pc, #28]	; (800d330 <_kill_r+0x20>)
 800d314:	2300      	movs	r3, #0
 800d316:	4604      	mov	r4, r0
 800d318:	4608      	mov	r0, r1
 800d31a:	4611      	mov	r1, r2
 800d31c:	602b      	str	r3, [r5, #0]
 800d31e:	f7f6 f93f 	bl	80035a0 <_kill>
 800d322:	1c43      	adds	r3, r0, #1
 800d324:	d102      	bne.n	800d32c <_kill_r+0x1c>
 800d326:	682b      	ldr	r3, [r5, #0]
 800d328:	b103      	cbz	r3, 800d32c <_kill_r+0x1c>
 800d32a:	6023      	str	r3, [r4, #0]
 800d32c:	bd38      	pop	{r3, r4, r5, pc}
 800d32e:	bf00      	nop
 800d330:	200008c4 	.word	0x200008c4

0800d334 <_getpid_r>:
 800d334:	f7f6 b92c 	b.w	8003590 <_getpid>

0800d338 <_init>:
 800d338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d33a:	bf00      	nop
 800d33c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d33e:	bc08      	pop	{r3}
 800d340:	469e      	mov	lr, r3
 800d342:	4770      	bx	lr

0800d344 <_fini>:
 800d344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d346:	bf00      	nop
 800d348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d34a:	bc08      	pop	{r3}
 800d34c:	469e      	mov	lr, r3
 800d34e:	4770      	bx	lr
