
LedDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000815c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  080082ec  080082ec  000182ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083d8  080083d8  000200f8  2**0
                  CONTENTS
  4 .ARM          00000008  080083d8  080083d8  000183d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080083e0  080083e0  000200f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083e0  080083e0  000183e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080083e4  080083e4  000183e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f8  20000000  080083e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007b8  200000f8  080084e0  000200f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008b0  080084e0  000208b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b560  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000380c  00000000  00000000  0003b688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001458  00000000  00000000  0003ee98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012c0  00000000  00000000  000402f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a43b  00000000  00000000  000415b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000181ec  00000000  00000000  0006b9eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc55f  00000000  00000000  00083bd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00180136  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a90  00000000  00000000  0018018c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000f8 	.word	0x200000f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080082d4 	.word	0x080082d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000fc 	.word	0x200000fc
 80001cc:	080082d4 	.word	0x080082d4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800056e:	4b0c      	ldr	r3, [pc, #48]	; (80005a0 <MX_DMA_Init+0x38>)
 8000570:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000572:	4a0b      	ldr	r2, [pc, #44]	; (80005a0 <MX_DMA_Init+0x38>)
 8000574:	f043 0301 	orr.w	r3, r3, #1
 8000578:	6493      	str	r3, [r2, #72]	; 0x48
 800057a:	4b09      	ldr	r3, [pc, #36]	; (80005a0 <MX_DMA_Init+0x38>)
 800057c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800057e:	f003 0301 	and.w	r3, r3, #1
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000586:	2200      	movs	r2, #0
 8000588:	2100      	movs	r1, #0
 800058a:	200b      	movs	r0, #11
 800058c:	f001 fe09 	bl	80021a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000590:	200b      	movs	r0, #11
 8000592:	f001 fe22 	bl	80021da <HAL_NVIC_EnableIRQ>

}
 8000596:	bf00      	nop
 8000598:	3708      	adds	r7, #8
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	40021000 	.word	0x40021000

080005a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b085      	sub	sp, #20
 80005a8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005aa:	4b15      	ldr	r3, [pc, #84]	; (8000600 <MX_GPIO_Init+0x5c>)
 80005ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ae:	4a14      	ldr	r2, [pc, #80]	; (8000600 <MX_GPIO_Init+0x5c>)
 80005b0:	f043 0304 	orr.w	r3, r3, #4
 80005b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005b6:	4b12      	ldr	r3, [pc, #72]	; (8000600 <MX_GPIO_Init+0x5c>)
 80005b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ba:	f003 0304 	and.w	r3, r3, #4
 80005be:	60fb      	str	r3, [r7, #12]
 80005c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c2:	4b0f      	ldr	r3, [pc, #60]	; (8000600 <MX_GPIO_Init+0x5c>)
 80005c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005c6:	4a0e      	ldr	r2, [pc, #56]	; (8000600 <MX_GPIO_Init+0x5c>)
 80005c8:	f043 0301 	orr.w	r3, r3, #1
 80005cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ce:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <MX_GPIO_Init+0x5c>)
 80005d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005d2:	f003 0301 	and.w	r3, r3, #1
 80005d6:	60bb      	str	r3, [r7, #8]
 80005d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005da:	4b09      	ldr	r3, [pc, #36]	; (8000600 <MX_GPIO_Init+0x5c>)
 80005dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005de:	4a08      	ldr	r2, [pc, #32]	; (8000600 <MX_GPIO_Init+0x5c>)
 80005e0:	f043 0302 	orr.w	r3, r3, #2
 80005e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005e6:	4b06      	ldr	r3, [pc, #24]	; (8000600 <MX_GPIO_Init+0x5c>)
 80005e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ea:	f003 0302 	and.w	r3, r3, #2
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]

}
 80005f2:	bf00      	nop
 80005f4:	3714      	adds	r7, #20
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	40021000 	.word	0x40021000

08000604 <calc_pulse>:
static volatile uint32_t received_value;
static int received_bits;


static pulse_t calc_pulse(uint32_t time)
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
	if (time < 250)
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	2bf9      	cmp	r3, #249	; 0xf9
 8000610:	d801      	bhi.n	8000616 <calc_pulse+0x12>
		return PULSE_ERROR;
 8000612:	2305      	movs	r3, #5
 8000614:	e021      	b.n	800065a <calc_pulse+0x56>
	else if (time < 1200)
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800061c:	d201      	bcs.n	8000622 <calc_pulse+0x1e>
		return PULSE_SHORT;
 800061e:	2304      	movs	r3, #4
 8000620:	e01b      	b.n	800065a <calc_pulse+0x56>
	else if (time < 2000)
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000628:	d201      	bcs.n	800062e <calc_pulse+0x2a>
		return PULSE_LONG;
 800062a:	2303      	movs	r3, #3
 800062c:	e015      	b.n	800065a <calc_pulse+0x56>
	else if (time < 3000)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000634:	4293      	cmp	r3, r2
 8000636:	d801      	bhi.n	800063c <calc_pulse+0x38>
		return PULSE_2MS;
 8000638:	2302      	movs	r3, #2
 800063a:	e00e      	b.n	800065a <calc_pulse+0x56>
	else if (time < 6000)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	f241 726f 	movw	r2, #5999	; 0x176f
 8000642:	4293      	cmp	r3, r2
 8000644:	d801      	bhi.n	800064a <calc_pulse+0x46>
		return PULSE_4MS;
 8000646:	2301      	movs	r3, #1
 8000648:	e007      	b.n	800065a <calc_pulse+0x56>
	else if (time < 12000)
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	f642 62df 	movw	r2, #11999	; 0x2edf
 8000650:	4293      	cmp	r3, r2
 8000652:	d801      	bhi.n	8000658 <calc_pulse+0x54>
		return PULSE_9MS;
 8000654:	2300      	movs	r3, #0
 8000656:	e000      	b.n	800065a <calc_pulse+0x56>
	else
		return PULSE_ERROR;
 8000658:	2305      	movs	r3, #5
}
 800065a:	4618      	mov	r0, r3
 800065c:	370c      	adds	r7, #12
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr
	...

08000668 <ir_tim_interrupt>:


void ir_tim_interrupt(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
	pulse_t pulse;

	if (received_bits >= 32)
 800066e:	4b1f      	ldr	r3, [pc, #124]	; (80006ec <ir_tim_interrupt+0x84>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	2b1f      	cmp	r3, #31
 8000674:	dc36      	bgt.n	80006e4 <ir_tim_interrupt+0x7c>
		return;

	pulse = calc_pulse(HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1));
 8000676:	2100      	movs	r1, #0
 8000678:	481d      	ldr	r0, [pc, #116]	; (80006f0 <ir_tim_interrupt+0x88>)
 800067a:	f005 f9e7 	bl	8005a4c <HAL_TIM_ReadCapturedValue>
 800067e:	4603      	mov	r3, r0
 8000680:	4618      	mov	r0, r3
 8000682:	f7ff ffbf 	bl	8000604 <calc_pulse>
 8000686:	4603      	mov	r3, r0
 8000688:	71fb      	strb	r3, [r7, #7]

	switch (pulse) {
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	2b04      	cmp	r3, #4
 800068e:	d006      	beq.n	800069e <ir_tim_interrupt+0x36>
 8000690:	2b04      	cmp	r3, #4
 8000692:	dc23      	bgt.n	80006dc <ir_tim_interrupt+0x74>
 8000694:	2b01      	cmp	r3, #1
 8000696:	d01a      	beq.n	80006ce <ir_tim_interrupt+0x66>
 8000698:	2b03      	cmp	r3, #3
 800069a:	d00b      	beq.n	80006b4 <ir_tim_interrupt+0x4c>
 800069c:	e01e      	b.n	80006dc <ir_tim_interrupt+0x74>
	case PULSE_SHORT:
		received_value = received_value >> 1;
 800069e:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <ir_tim_interrupt+0x8c>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	085b      	lsrs	r3, r3, #1
 80006a4:	4a13      	ldr	r2, [pc, #76]	; (80006f4 <ir_tim_interrupt+0x8c>)
 80006a6:	6013      	str	r3, [r2, #0]
		received_bits++;
 80006a8:	4b10      	ldr	r3, [pc, #64]	; (80006ec <ir_tim_interrupt+0x84>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	3301      	adds	r3, #1
 80006ae:	4a0f      	ldr	r2, [pc, #60]	; (80006ec <ir_tim_interrupt+0x84>)
 80006b0:	6013      	str	r3, [r2, #0]
		break;
 80006b2:	e018      	b.n	80006e6 <ir_tim_interrupt+0x7e>
	case PULSE_LONG:
		received_value = (received_value >> 1) | 0x80000000;
 80006b4:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <ir_tim_interrupt+0x8c>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	085b      	lsrs	r3, r3, #1
 80006ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80006be:	4a0d      	ldr	r2, [pc, #52]	; (80006f4 <ir_tim_interrupt+0x8c>)
 80006c0:	6013      	str	r3, [r2, #0]
		received_bits++;
 80006c2:	4b0a      	ldr	r3, [pc, #40]	; (80006ec <ir_tim_interrupt+0x84>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	3301      	adds	r3, #1
 80006c8:	4a08      	ldr	r2, [pc, #32]	; (80006ec <ir_tim_interrupt+0x84>)
 80006ca:	6013      	str	r3, [r2, #0]
		break;
 80006cc:	e00b      	b.n	80006e6 <ir_tim_interrupt+0x7e>
	case PULSE_4MS:
		received_value = 0;
 80006ce:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <ir_tim_interrupt+0x8c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
		received_bits = 0;
 80006d4:	4b05      	ldr	r3, [pc, #20]	; (80006ec <ir_tim_interrupt+0x84>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
		break;
 80006da:	e004      	b.n	80006e6 <ir_tim_interrupt+0x7e>
//	case PULSE_2MS:
//		if (received_bits == 0)
//			received_bits = 32;
//		break;
	default:
		received_bits = 0;
 80006dc:	4b03      	ldr	r3, [pc, #12]	; (80006ec <ir_tim_interrupt+0x84>)
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
		break;
 80006e2:	e000      	b.n	80006e6 <ir_tim_interrupt+0x7e>
		return;
 80006e4:	bf00      	nop
	}
}
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	20000118 	.word	0x20000118
 80006f0:	20000784 	.word	0x20000784
 80006f4:	20000114 	.word	0x20000114

080006f8 <ir_init>:


void ir_init(void){
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim2);
 80006fc:	4804      	ldr	r0, [pc, #16]	; (8000710 <ir_init+0x18>)
 80006fe:	f004 f953 	bl	80049a8 <HAL_TIM_Base_Start>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000702:	2100      	movs	r1, #0
 8000704:	4802      	ldr	r0, [pc, #8]	; (8000710 <ir_init+0x18>)
 8000706:	f004 fc93 	bl	8005030 <HAL_TIM_IC_Start_IT>
}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20000784 	.word	0x20000784

08000714 <ir_read>:


int ir_read(void){
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
	if(received_bits!=32){
 800071a:	4b0a      	ldr	r3, [pc, #40]	; (8000744 <ir_read+0x30>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	2b20      	cmp	r3, #32
 8000720:	d002      	beq.n	8000728 <ir_read+0x14>
		return -1;
 8000722:	f04f 33ff 	mov.w	r3, #4294967295
 8000726:	e007      	b.n	8000738 <ir_read+0x24>
	}

	uint8_t value=received_value>>16;
 8000728:	4b07      	ldr	r3, [pc, #28]	; (8000748 <ir_read+0x34>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	0c1b      	lsrs	r3, r3, #16
 800072e:	71fb      	strb	r3, [r7, #7]
	received_bits=0;
 8000730:	4b04      	ldr	r3, [pc, #16]	; (8000744 <ir_read+0x30>)
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
	return value;
 8000736:	79fb      	ldrb	r3, [r7, #7]
}
 8000738:	4618      	mov	r0, r3
 800073a:	370c      	adds	r7, #12
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr
 8000744:	20000118 	.word	0x20000118
 8000748:	20000114 	.word	0x20000114

0800074c <__io_putchar>:

// Funtions rewrite;


int __io_putchar(int ch)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	2b0a      	cmp	r3, #10
 8000758:	d102      	bne.n	8000760 <__io_putchar+0x14>
    __io_putchar('\r');
 800075a:	200d      	movs	r0, #13
 800075c:	f7ff fff6 	bl	800074c <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000760:	1d39      	adds	r1, r7, #4
 8000762:	f04f 33ff 	mov.w	r3, #4294967295
 8000766:	2201      	movs	r2, #1
 8000768:	4803      	ldr	r0, [pc, #12]	; (8000778 <__io_putchar+0x2c>)
 800076a:	f006 f9a5 	bl	8006ab8 <HAL_UART_Transmit>

  return 1;
 800076e:	2301      	movs	r3, #1
}
 8000770:	4618      	mov	r0, r3
 8000772:	3708      	adds	r7, #8
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	20000818 	.word	0x20000818

0800077c <HAL_RTC_AlarmAEventCallback>:



// Callbacks from interrupts

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]


	if (TurnOnMenuMode() == MENU_TIME_LEVEL || TurnOnMenuMode()==MENU_TIME_HOUR_SECOND_DIGIT) {
 8000784:	f000 f910 	bl	80009a8 <TurnOnMenuMode>
 8000788:	4603      	mov	r3, r0
 800078a:	2b01      	cmp	r3, #1
 800078c:	d004      	beq.n	8000798 <HAL_RTC_AlarmAEventCallback+0x1c>
 800078e:	f000 f90b 	bl	80009a8 <TurnOnMenuMode>
 8000792:	4603      	mov	r3, r0
 8000794:	2b03      	cmp	r3, #3
 8000796:	d10f      	bne.n	80007b8 <HAL_RTC_AlarmAEventCallback+0x3c>


			if (flag_TurnOnMenuModeHour == 1) {
 8000798:	4b18      	ldr	r3, [pc, #96]	; (80007fc <HAL_RTC_AlarmAEventCallback+0x80>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2b01      	cmp	r3, #1
 800079e:	d105      	bne.n	80007ac <HAL_RTC_AlarmAEventCallback+0x30>
				ws2811_hourReset();
 80007a0:	f001 fae6 	bl	8001d70 <ws2811_hourReset>
				flag_TurnOnMenuModeHour = 0;
 80007a4:	4b15      	ldr	r3, [pc, #84]	; (80007fc <HAL_RTC_AlarmAEventCallback+0x80>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
			if (flag_TurnOnMenuModeHour == 1) {
 80007aa:	e022      	b.n	80007f2 <HAL_RTC_AlarmAEventCallback+0x76>
			} else {
				clockStart();
 80007ac:	f000 fe72 	bl	8001494 <clockStart>
				flag_TurnOnMenuModeHour = 1;
 80007b0:	4b12      	ldr	r3, [pc, #72]	; (80007fc <HAL_RTC_AlarmAEventCallback+0x80>)
 80007b2:	2201      	movs	r2, #1
 80007b4:	601a      	str	r2, [r3, #0]
			if (flag_TurnOnMenuModeHour == 1) {
 80007b6:	e01c      	b.n	80007f2 <HAL_RTC_AlarmAEventCallback+0x76>
			}



	}else if(TurnOnMenuMode()==MENU_TIME_MINUTE_LEVEL || TurnOnMenuMode()==MENU_TIME_MINUTE_SECOND_DIGIT){
 80007b8:	f000 f8f6 	bl	80009a8 <TurnOnMenuMode>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b02      	cmp	r3, #2
 80007c0:	d004      	beq.n	80007cc <HAL_RTC_AlarmAEventCallback+0x50>
 80007c2:	f000 f8f1 	bl	80009a8 <TurnOnMenuMode>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b04      	cmp	r3, #4
 80007ca:	d10f      	bne.n	80007ec <HAL_RTC_AlarmAEventCallback+0x70>
		if (flag_TurnOnMenuModeMinute == 1) {
 80007cc:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <HAL_RTC_AlarmAEventCallback+0x84>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	2b01      	cmp	r3, #1
 80007d2:	d105      	bne.n	80007e0 <HAL_RTC_AlarmAEventCallback+0x64>
						ws2811_minuteReset();
 80007d4:	f001 faf8 	bl	8001dc8 <ws2811_minuteReset>
						flag_TurnOnMenuModeMinute = 0;
 80007d8:	4b09      	ldr	r3, [pc, #36]	; (8000800 <HAL_RTC_AlarmAEventCallback+0x84>)
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
		if (flag_TurnOnMenuModeMinute == 1) {
 80007de:	e008      	b.n	80007f2 <HAL_RTC_AlarmAEventCallback+0x76>
					} else {
						clockStart();
 80007e0:	f000 fe58 	bl	8001494 <clockStart>
						flag_TurnOnMenuModeMinute = 1;
 80007e4:	4b06      	ldr	r3, [pc, #24]	; (8000800 <HAL_RTC_AlarmAEventCallback+0x84>)
 80007e6:	2201      	movs	r2, #1
 80007e8:	601a      	str	r2, [r3, #0]
		if (flag_TurnOnMenuModeMinute == 1) {
 80007ea:	e002      	b.n	80007f2 <HAL_RTC_AlarmAEventCallback+0x76>
					}
	}
	else {
		dwukropekStart();
 80007ec:	f000 fcf6 	bl	80011dc <dwukropekStart>
	}

}
 80007f0:	bf00      	nop
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	20000000 	.word	0x20000000
 8000800:	20000004 	.word	0x20000004

08000804 <HAL_TIM_IC_CaptureCallback>:





void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]


	  if (htim == &htim2) {
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	4a09      	ldr	r2, [pc, #36]	; (8000834 <HAL_TIM_IC_CaptureCallback+0x30>)
 8000810:	4293      	cmp	r3, r2
 8000812:	d108      	bne.n	8000826 <HAL_TIM_IC_CaptureCallback+0x22>
	    switch (HAL_TIM_GetActiveChannel(&htim2)) {
 8000814:	4807      	ldr	r0, [pc, #28]	; (8000834 <HAL_TIM_IC_CaptureCallback+0x30>)
 8000816:	f005 f999 	bl	8005b4c <HAL_TIM_GetActiveChannel>
 800081a:	4603      	mov	r3, r0
 800081c:	2b01      	cmp	r3, #1
 800081e:	d104      	bne.n	800082a <HAL_TIM_IC_CaptureCallback+0x26>
	      case HAL_TIM_ACTIVE_CHANNEL_1:
	        ir_tim_interrupt();
 8000820:	f7ff ff22 	bl	8000668 <ir_tim_interrupt>
	        break;
 8000824:	e002      	b.n	800082c <HAL_TIM_IC_CaptureCallback+0x28>
	      default:
	        break;
		}
	}
 8000826:	bf00      	nop
 8000828:	e000      	b.n	800082c <HAL_TIM_IC_CaptureCallback+0x28>
	        break;
 800082a:	bf00      	nop
}
 800082c:	bf00      	nop
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	20000784 	.word	0x20000784

08000838 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800083e:	f001 fb60 	bl	8001f02 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000842:	f000 f835 	bl	80008b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000846:	f7ff fead 	bl	80005a4 <MX_GPIO_Init>
  MX_DMA_Init();
 800084a:	f7ff fe8d 	bl	8000568 <MX_DMA_Init>
  MX_TIM4_Init();
 800084e:	f001 f875 	bl	800193c <MX_TIM4_Init>
  MX_RTC_Init();
 8000852:	f000 fb4f 	bl	8000ef4 <MX_RTC_Init>
  MX_TIM2_Init();
 8000856:	f000 ffe5 	bl	8001824 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800085a:	f001 f99f 	bl	8001b9c <MX_USART2_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800085e:	f000 f889 	bl	8000974 <MX_NVIC_Init>




	// Inicjalizacja programu
	ws2811_init();
 8000862:	f001 fa53 	bl	8001d0c <ws2811_init>
	ir_init();
 8000866:	f7ff ff47 	bl	80006f8 <ir_init>
	changeColor(RED);
 800086a:	4b10      	ldr	r3, [pc, #64]	; (80008ac <main+0x74>)
 800086c:	781a      	ldrb	r2, [r3, #0]
 800086e:	7859      	ldrb	r1, [r3, #1]
 8000870:	0209      	lsls	r1, r1, #8
 8000872:	430a      	orrs	r2, r1
 8000874:	789b      	ldrb	r3, [r3, #2]
 8000876:	041b      	lsls	r3, r3, #16
 8000878:	431a      	orrs	r2, r3
 800087a:	2300      	movs	r3, #0
 800087c:	f362 0317 	bfi	r3, r2, #0, #24
 8000880:	4618      	mov	r0, r3
 8000882:	f000 fbf9 	bl	8001078 <changeColor>


	while (1) {

				// ZEGAR:
				if(TurnOnMenuMode()==0){
 8000886:	f000 f88f 	bl	80009a8 <TurnOnMenuMode>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d101      	bne.n	8000894 <main+0x5c>
					clockStart();
 8000890:	f000 fe00 	bl	8001494 <clockStart>
				}



				int value=ir_read();
 8000894:	f7ff ff3e 	bl	8000714 <ir_read>
 8000898:	6078      	str	r0, [r7, #4]
				if(value!=-1){
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008a0:	d0f1      	beq.n	8000886 <main+0x4e>
					menu(value);
 80008a2:	6878      	ldr	r0, [r7, #4]
 80008a4:	f000 f94e 	bl	8000b44 <menu>
	while (1) {
 80008a8:	e7ed      	b.n	8000886 <main+0x4e>
 80008aa:	bf00      	nop
 80008ac:	20000074 	.word	0x20000074

080008b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b096      	sub	sp, #88	; 0x58
 80008b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008b6:	f107 0314 	add.w	r3, r7, #20
 80008ba:	2244      	movs	r2, #68	; 0x44
 80008bc:	2100      	movs	r1, #0
 80008be:	4618      	mov	r0, r3
 80008c0:	f006 fdaa 	bl	8007418 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c4:	463b      	mov	r3, r7
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	60da      	str	r2, [r3, #12]
 80008d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008d2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008d6:	f002 f85b 	bl	8002990 <HAL_PWREx_ControlVoltageScaling>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80008e0:	f000 f85c 	bl	800099c <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80008e4:	f002 f836 	bl	8002954 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80008e8:	4b21      	ldr	r3, [pc, #132]	; (8000970 <SystemClock_Config+0xc0>)
 80008ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80008ee:	4a20      	ldr	r2, [pc, #128]	; (8000970 <SystemClock_Config+0xc0>)
 80008f0:	f023 0318 	bic.w	r3, r3, #24
 80008f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80008f8:	2314      	movs	r3, #20
 80008fa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80008fc:	2301      	movs	r3, #1
 80008fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000900:	2301      	movs	r3, #1
 8000902:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000904:	2300      	movs	r3, #0
 8000906:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000908:	2360      	movs	r3, #96	; 0x60
 800090a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800090c:	2302      	movs	r3, #2
 800090e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000910:	2301      	movs	r3, #1
 8000912:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000914:	2301      	movs	r3, #1
 8000916:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000918:	2328      	movs	r3, #40	; 0x28
 800091a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800091c:	2307      	movs	r3, #7
 800091e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000920:	2302      	movs	r3, #2
 8000922:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000924:	2302      	movs	r3, #2
 8000926:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000928:	f107 0314 	add.w	r3, r7, #20
 800092c:	4618      	mov	r0, r3
 800092e:	f002 f885 	bl	8002a3c <HAL_RCC_OscConfig>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000938:	f000 f830 	bl	800099c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800093c:	230f      	movs	r3, #15
 800093e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000940:	2303      	movs	r3, #3
 8000942:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000944:	2300      	movs	r3, #0
 8000946:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000948:	2300      	movs	r3, #0
 800094a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800094c:	2300      	movs	r3, #0
 800094e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000950:	463b      	mov	r3, r7
 8000952:	2104      	movs	r1, #4
 8000954:	4618      	mov	r0, r3
 8000956:	f002 fc57 	bl	8003208 <HAL_RCC_ClockConfig>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000960:	f000 f81c 	bl	800099c <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000964:	f003 f940 	bl	8003be8 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000968:	bf00      	nop
 800096a:	3758      	adds	r7, #88	; 0x58
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	40021000 	.word	0x40021000

08000974 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* RTC_Alarm_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 3, 0);
 8000978:	2200      	movs	r2, #0
 800097a:	2103      	movs	r1, #3
 800097c:	2029      	movs	r0, #41	; 0x29
 800097e:	f001 fc10 	bl	80021a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000982:	2029      	movs	r0, #41	; 0x29
 8000984:	f001 fc29 	bl	80021da <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8000988:	2200      	movs	r2, #0
 800098a:	2102      	movs	r1, #2
 800098c:	201c      	movs	r0, #28
 800098e:	f001 fc08 	bl	80021a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000992:	201c      	movs	r0, #28
 8000994:	f001 fc21 	bl	80021da <HAL_NVIC_EnableIRQ>
}
 8000998:	bf00      	nop
 800099a:	bd80      	pop	{r7, pc}

0800099c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a0:	b672      	cpsid	i
}
 80009a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80009a4:	e7fe      	b.n	80009a4 <Error_Handler+0x8>
	...

080009a8 <TurnOnMenuMode>:



// Funtions:

int TurnOnMenuMode(void){
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
	return flagMenu;
 80009ac:	4b03      	ldr	r3, [pc, #12]	; (80009bc <TurnOnMenuMode+0x14>)
 80009ae:	681b      	ldr	r3, [r3, #0]
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	20000120 	.word	0x20000120

080009c0 <isInRange>:

int isInRange(uint8_t entryData){
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	71fb      	strb	r3, [r7, #7]
	if(entryData>23){
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	2b17      	cmp	r3, #23
 80009ce:	d901      	bls.n	80009d4 <isInRange+0x14>
		return 1;
 80009d0:	2301      	movs	r3, #1
 80009d2:	e000      	b.n	80009d6 <isInRange+0x16>
	}else{
		return 0;
 80009d4:	2300      	movs	r3, #0
	}
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr

080009e2 <isInRangeMinute>:

int isInRangeMinute(uint8_t entryData){
 80009e2:	b480      	push	{r7}
 80009e4:	b083      	sub	sp, #12
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	4603      	mov	r3, r0
 80009ea:	71fb      	strb	r3, [r7, #7]
	if(entryData>60){
 80009ec:	79fb      	ldrb	r3, [r7, #7]
 80009ee:	2b3c      	cmp	r3, #60	; 0x3c
 80009f0:	d901      	bls.n	80009f6 <isInRangeMinute+0x14>
		return 1;
 80009f2:	2301      	movs	r3, #1
 80009f4:	e000      	b.n	80009f8 <isInRangeMinute+0x16>
	}else{
		return 0;
 80009f6:	2300      	movs	r3, #0
	}
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	370c      	adds	r7, #12
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr

08000a04 <colorMenu>:

void colorMenu(struct colorRgb color){
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
	if (flagColor == MENU_COLOR_LEVEL) {
 8000a0c:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <colorMenu+0x24>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d105      	bne.n	8000a20 <colorMenu+0x1c>
				changeColor(color);
 8000a14:	6878      	ldr	r0, [r7, #4]
 8000a16:	f000 fb2f 	bl	8001078 <changeColor>
				flagColor = MENU_OFF;
 8000a1a:	4b03      	ldr	r3, [pc, #12]	; (8000a28 <colorMenu+0x24>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
			}
}
 8000a20:	bf00      	nop
 8000a22:	3708      	adds	r7, #8
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	2000011c 	.word	0x2000011c

08000a2c <firstDigitHour>:

void firstDigitHour(uint8_t forAdd){
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	71fb      	strb	r3, [r7, #7]
	if (flagMenu == MENU_TIME_LEVEL) {
 8000a36:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <firstDigitHour+0x2c>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	d105      	bne.n	8000a4a <firstDigitHour+0x1e>
		hoursChange = forAdd;
 8000a3e:	4a07      	ldr	r2, [pc, #28]	; (8000a5c <firstDigitHour+0x30>)
 8000a40:	79fb      	ldrb	r3, [r7, #7]
 8000a42:	7013      	strb	r3, [r2, #0]
		flagMenu = MENU_TIME_HOUR_SECOND_DIGIT;
 8000a44:	4b04      	ldr	r3, [pc, #16]	; (8000a58 <firstDigitHour+0x2c>)
 8000a46:	2203      	movs	r2, #3
 8000a48:	601a      	str	r2, [r3, #0]
	}
}
 8000a4a:	bf00      	nop
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	20000120 	.word	0x20000120
 8000a5c:	20000125 	.word	0x20000125

08000a60 <secondDigitHour>:

void secondDigitHour(uint8_t forAdd){
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	4603      	mov	r3, r0
 8000a68:	71fb      	strb	r3, [r7, #7]
	if (flagMenu == MENU_TIME_HOUR_SECOND_DIGIT) {
 8000a6a:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <secondDigitHour+0x50>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	2b03      	cmp	r3, #3
 8000a70:	d119      	bne.n	8000aa6 <secondDigitHour+0x46>

		hoursChange += forAdd;
 8000a72:	4b10      	ldr	r3, [pc, #64]	; (8000ab4 <secondDigitHour+0x54>)
 8000a74:	781a      	ldrb	r2, [r3, #0]
 8000a76:	79fb      	ldrb	r3, [r7, #7]
 8000a78:	4413      	add	r3, r2
 8000a7a:	b2da      	uxtb	r2, r3
 8000a7c:	4b0d      	ldr	r3, [pc, #52]	; (8000ab4 <secondDigitHour+0x54>)
 8000a7e:	701a      	strb	r2, [r3, #0]

		if (isInRange(hoursChange)) {
 8000a80:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <secondDigitHour+0x54>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	4618      	mov	r0, r3
 8000a86:	f7ff ff9b 	bl	80009c0 <isInRange>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d002      	beq.n	8000a96 <secondDigitHour+0x36>
			hoursChange = 0;
 8000a90:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <secondDigitHour+0x54>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	701a      	strb	r2, [r3, #0]
		}

		setHours(hoursChange);
 8000a96:	4b07      	ldr	r3, [pc, #28]	; (8000ab4 <secondDigitHour+0x54>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f000 fd54 	bl	8001548 <setHours>
		flagMenu = MENU_TIME_LEVEL;
 8000aa0:	4b03      	ldr	r3, [pc, #12]	; (8000ab0 <secondDigitHour+0x50>)
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	601a      	str	r2, [r3, #0]
	}
}
 8000aa6:	bf00      	nop
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20000120 	.word	0x20000120
 8000ab4:	20000125 	.word	0x20000125

08000ab8 <firstDigitMinute>:

void firstDigitMinute(uint8_t forAdd){
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	71fb      	strb	r3, [r7, #7]
	if (flagMenu == MENU_TIME_MINUTE_LEVEL) {
 8000ac2:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <firstDigitMinute+0x2c>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	2b02      	cmp	r3, #2
 8000ac8:	d105      	bne.n	8000ad6 <firstDigitMinute+0x1e>
		minutesChange = forAdd;
 8000aca:	4a07      	ldr	r2, [pc, #28]	; (8000ae8 <firstDigitMinute+0x30>)
 8000acc:	79fb      	ldrb	r3, [r7, #7]
 8000ace:	7013      	strb	r3, [r2, #0]
		flagMenu = MENU_TIME_MINUTE_SECOND_DIGIT;
 8000ad0:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <firstDigitMinute+0x2c>)
 8000ad2:	2204      	movs	r2, #4
 8000ad4:	601a      	str	r2, [r3, #0]

	}
}
 8000ad6:	bf00      	nop
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	20000120 	.word	0x20000120
 8000ae8:	20000124 	.word	0x20000124

08000aec <secondDigitMinute>:

void secondDigitMinute(uint8_t forAdd){
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	71fb      	strb	r3, [r7, #7]
	if (flagMenu == MENU_TIME_MINUTE_SECOND_DIGIT) {
 8000af6:	4b11      	ldr	r3, [pc, #68]	; (8000b3c <secondDigitMinute+0x50>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	2b04      	cmp	r3, #4
 8000afc:	d119      	bne.n	8000b32 <secondDigitMinute+0x46>
		minutesChange += forAdd;
 8000afe:	4b10      	ldr	r3, [pc, #64]	; (8000b40 <secondDigitMinute+0x54>)
 8000b00:	781a      	ldrb	r2, [r3, #0]
 8000b02:	79fb      	ldrb	r3, [r7, #7]
 8000b04:	4413      	add	r3, r2
 8000b06:	b2da      	uxtb	r2, r3
 8000b08:	4b0d      	ldr	r3, [pc, #52]	; (8000b40 <secondDigitMinute+0x54>)
 8000b0a:	701a      	strb	r2, [r3, #0]

		if (isInRangeMinute(minutesChange)) {
 8000b0c:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <secondDigitMinute+0x54>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	4618      	mov	r0, r3
 8000b12:	f7ff ff66 	bl	80009e2 <isInRangeMinute>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d002      	beq.n	8000b22 <secondDigitMinute+0x36>
			minutesChange = 0;
 8000b1c:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <secondDigitMinute+0x54>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	701a      	strb	r2, [r3, #0]
		}
		setMinutes(minutesChange);
 8000b22:	4b07      	ldr	r3, [pc, #28]	; (8000b40 <secondDigitMinute+0x54>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	4618      	mov	r0, r3
 8000b28:	f000 fce2 	bl	80014f0 <setMinutes>
		flagMenu = MENU_TIME_MINUTE_LEVEL;
 8000b2c:	4b03      	ldr	r3, [pc, #12]	; (8000b3c <secondDigitMinute+0x50>)
 8000b2e:	2202      	movs	r2, #2
 8000b30:	601a      	str	r2, [r3, #0]
	}
}
 8000b32:	bf00      	nop
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20000120 	.word	0x20000120
 8000b40:	20000124 	.word	0x20000124

08000b44 <menu>:
/*
 *
 * Obluga przycisku pilota
 *
 */
void menu(int value) {
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b088      	sub	sp, #32
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]

	printf("code=%02x\n", value);
 8000b4c:	6879      	ldr	r1, [r7, #4]
 8000b4e:	48c0      	ldr	r0, [pc, #768]	; (8000e50 <menu+0x30c>)
 8000b50:	f006 fc6a 	bl	8007428 <iprintf>

	RTC_TimeTypeDef time = {0};
 8000b54:	f107 030c 	add.w	r3, r7, #12
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef date = {0};
 8000b64:	2300      	movs	r3, #0
 8000b66:	60bb      	str	r3, [r7, #8]

	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8000b68:	f107 030c 	add.w	r3, r7, #12
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	4619      	mov	r1, r3
 8000b70:	48b8      	ldr	r0, [pc, #736]	; (8000e54 <menu+0x310>)
 8000b72:	f003 fb33 	bl	80041dc <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8000b76:	f107 0308 	add.w	r3, r7, #8
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	48b5      	ldr	r0, [pc, #724]	; (8000e54 <menu+0x310>)
 8000b80:	f003 fc0f 	bl	80043a2 <HAL_RTC_GetDate>
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	3b07      	subs	r3, #7
 8000b88:	2b57      	cmp	r3, #87	; 0x57
 8000b8a:	f200 81a9 	bhi.w	8000ee0 <menu+0x39c>
 8000b8e:	a201      	add	r2, pc, #4	; (adr r2, 8000b94 <menu+0x50>)
 8000b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b94:	08000d15 	.word	0x08000d15
 8000b98:	08000db9 	.word	0x08000db9
 8000b9c:	08000d0d 	.word	0x08000d0d
 8000ba0:	08000ee1 	.word	0x08000ee1
 8000ba4:	08000ee1 	.word	0x08000ee1
 8000ba8:	08000d1d 	.word	0x08000d1d
 8000bac:	08000cf5 	.word	0x08000cf5
 8000bb0:	08000ee1 	.word	0x08000ee1
 8000bb4:	08000ee1 	.word	0x08000ee1
 8000bb8:	08000ee1 	.word	0x08000ee1
 8000bbc:	08000ee1 	.word	0x08000ee1
 8000bc0:	08000ee1 	.word	0x08000ee1
 8000bc4:	08000ee1 	.word	0x08000ee1
 8000bc8:	08000ee1 	.word	0x08000ee1
 8000bcc:	08000d05 	.word	0x08000d05
 8000bd0:	08000e75 	.word	0x08000e75
 8000bd4:	08000ee1 	.word	0x08000ee1
 8000bd8:	08000d53 	.word	0x08000d53
 8000bdc:	08000cf5 	.word	0x08000cf5
 8000be0:	08000ee1 	.word	0x08000ee1
 8000be4:	08000ee1 	.word	0x08000ee1
 8000be8:	08000de9 	.word	0x08000de9
 8000bec:	08000ee1 	.word	0x08000ee1
 8000bf0:	08000ee1 	.word	0x08000ee1
 8000bf4:	08000ee1 	.word	0x08000ee1
 8000bf8:	08000ee1 	.word	0x08000ee1
 8000bfc:	08000ee1 	.word	0x08000ee1
 8000c00:	08000ee1 	.word	0x08000ee1
 8000c04:	08000ee1 	.word	0x08000ee1
 8000c08:	08000ee1 	.word	0x08000ee1
 8000c0c:	08000ee1 	.word	0x08000ee1
 8000c10:	08000ee1 	.word	0x08000ee1
 8000c14:	08000ee1 	.word	0x08000ee1
 8000c18:	08000ee1 	.word	0x08000ee1
 8000c1c:	08000ee1 	.word	0x08000ee1
 8000c20:	08000ee1 	.word	0x08000ee1
 8000c24:	08000ee1 	.word	0x08000ee1
 8000c28:	08000ee1 	.word	0x08000ee1
 8000c2c:	08000ee1 	.word	0x08000ee1
 8000c30:	08000ee1 	.word	0x08000ee1
 8000c34:	08000ee1 	.word	0x08000ee1
 8000c38:	08000ee1 	.word	0x08000ee1
 8000c3c:	08000ee1 	.word	0x08000ee1
 8000c40:	08000ee1 	.word	0x08000ee1
 8000c44:	08000ee1 	.word	0x08000ee1
 8000c48:	08000ee1 	.word	0x08000ee1
 8000c4c:	08000ee1 	.word	0x08000ee1
 8000c50:	08000ee1 	.word	0x08000ee1
 8000c54:	08000ee1 	.word	0x08000ee1
 8000c58:	08000ee1 	.word	0x08000ee1
 8000c5c:	08000ee1 	.word	0x08000ee1
 8000c60:	08000ee1 	.word	0x08000ee1
 8000c64:	08000ee1 	.word	0x08000ee1
 8000c68:	08000ee1 	.word	0x08000ee1
 8000c6c:	08000ee1 	.word	0x08000ee1
 8000c70:	08000ee1 	.word	0x08000ee1
 8000c74:	08000ee1 	.word	0x08000ee1
 8000c78:	08000edf 	.word	0x08000edf
 8000c7c:	08000ee1 	.word	0x08000ee1
 8000c80:	08000e27 	.word	0x08000e27
 8000c84:	08000ee1 	.word	0x08000ee1
 8000c88:	08000ee1 	.word	0x08000ee1
 8000c8c:	08000ee1 	.word	0x08000ee1
 8000c90:	08000ee1 	.word	0x08000ee1
 8000c94:	08000cfd 	.word	0x08000cfd
 8000c98:	08000ee1 	.word	0x08000ee1
 8000c9c:	08000ee1 	.word	0x08000ee1
 8000ca0:	08000e43 	.word	0x08000e43
 8000ca4:	08000ee1 	.word	0x08000ee1
 8000ca8:	08000ee1 	.word	0x08000ee1
 8000cac:	08000ee1 	.word	0x08000ee1
 8000cb0:	08000ee1 	.word	0x08000ee1
 8000cb4:	08000ee1 	.word	0x08000ee1
 8000cb8:	08000ee1 	.word	0x08000ee1
 8000cbc:	08000ee1 	.word	0x08000ee1
 8000cc0:	08000e35 	.word	0x08000e35
 8000cc4:	08000ee1 	.word	0x08000ee1
 8000cc8:	08000ee1 	.word	0x08000ee1
 8000ccc:	08000ee1 	.word	0x08000ee1
 8000cd0:	08000ee1 	.word	0x08000ee1
 8000cd4:	08000ee1 	.word	0x08000ee1
 8000cd8:	08000ee1 	.word	0x08000ee1
 8000cdc:	08000ee1 	.word	0x08000ee1
 8000ce0:	08000e19 	.word	0x08000e19
 8000ce4:	08000ee1 	.word	0x08000ee1
 8000ce8:	08000ee1 	.word	0x08000ee1
 8000cec:	08000ee1 	.word	0x08000ee1
 8000cf0:	08000d89 	.word	0x08000d89
//		time.Hours = hoursAdd;
//		time.Minutes = minutesAdd;
//		HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN);
//		break;
	case IR_CODE_CANCEL:
		flagColor = MENU_COLOR_LEVEL;
 8000cf4:	4b58      	ldr	r3, [pc, #352]	; (8000e58 <menu+0x314>)
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	601a      	str	r2, [r3, #0]
		break;
 8000cfa:	e0f1      	b.n	8000ee0 <menu+0x39c>



	case IR_CODE_MENU:
		flagMenu=MENU_TIME_LEVEL;
 8000cfc:	4b57      	ldr	r3, [pc, #348]	; (8000e5c <menu+0x318>)
 8000cfe:	2201      	movs	r2, #1
 8000d00:	601a      	str	r2, [r3, #0]
		break;
 8000d02:	e0ed      	b.n	8000ee0 <menu+0x39c>

	case IR_CODE_PLAY:
		flagMenu=MENU_OFF;
 8000d04:	4b55      	ldr	r3, [pc, #340]	; (8000e5c <menu+0x318>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
		break;
 8000d0a:	e0e9      	b.n	8000ee0 <menu+0x39c>

	case IR_CODE_FORWARD:
		if(flagMenu==MENU_TIME_LEVEL || MENU_TIME_HOUR_SECOND_DIGIT){
			flagMenu=MENU_TIME_MINUTE_LEVEL;
 8000d0c:	4b53      	ldr	r3, [pc, #332]	; (8000e5c <menu+0x318>)
 8000d0e:	2202      	movs	r2, #2
 8000d10:	601a      	str	r2, [r3, #0]
		}
		break;
 8000d12:	e0e5      	b.n	8000ee0 <menu+0x39c>

	case IR_CODE_REWIND:
		if(flagMenu==MENU_TIME_MINUTE_LEVEL|| MENU_TIME_MINUTE_SECOND_DIGIT){
			flagMenu=MENU_TIME_LEVEL;
 8000d14:	4b51      	ldr	r3, [pc, #324]	; (8000e5c <menu+0x318>)
 8000d16:	2201      	movs	r2, #1
 8000d18:	601a      	str	r2, [r3, #0]
		}
		break;
 8000d1a:	e0e1      	b.n	8000ee0 <menu+0x39c>



	case IR_CODE_1:
		// COLOR
		colorMenu(BLUE);
 8000d1c:	4b50      	ldr	r3, [pc, #320]	; (8000e60 <menu+0x31c>)
 8000d1e:	781a      	ldrb	r2, [r3, #0]
 8000d20:	7859      	ldrb	r1, [r3, #1]
 8000d22:	0209      	lsls	r1, r1, #8
 8000d24:	430a      	orrs	r2, r1
 8000d26:	789b      	ldrb	r3, [r3, #2]
 8000d28:	041b      	lsls	r3, r3, #16
 8000d2a:	431a      	orrs	r2, r3
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	f362 0317 	bfi	r3, r2, #0, #24
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff fe66 	bl	8000a04 <colorMenu>

		// FUNCTIONS MUST BE IN THIS ORDER

		// SECOND DIGIT_HOUR
		secondDigitHour(1);
 8000d38:	2001      	movs	r0, #1
 8000d3a:	f7ff fe91 	bl	8000a60 <secondDigitHour>

		// FIRST DIGIT HOUR

		firstDigitHour(10);
 8000d3e:	200a      	movs	r0, #10
 8000d40:	f7ff fe74 	bl	8000a2c <firstDigitHour>

		// SECOND DIGIT MINUTE
		secondDigitMinute(1);
 8000d44:	2001      	movs	r0, #1
 8000d46:	f7ff fed1 	bl	8000aec <secondDigitMinute>

		// FIRST DIGIT MINUTE
		firstDigitMinute(10);
 8000d4a:	200a      	movs	r0, #10
 8000d4c:	f7ff feb4 	bl	8000ab8 <firstDigitMinute>


		break;
 8000d50:	e0c6      	b.n	8000ee0 <menu+0x39c>


	case IR_CODE_2:
		//COLOR
		colorMenu(RED);
 8000d52:	4b44      	ldr	r3, [pc, #272]	; (8000e64 <menu+0x320>)
 8000d54:	781a      	ldrb	r2, [r3, #0]
 8000d56:	7859      	ldrb	r1, [r3, #1]
 8000d58:	0209      	lsls	r1, r1, #8
 8000d5a:	430a      	orrs	r2, r1
 8000d5c:	789b      	ldrb	r3, [r3, #2]
 8000d5e:	041b      	lsls	r3, r3, #16
 8000d60:	431a      	orrs	r2, r3
 8000d62:	2300      	movs	r3, #0
 8000d64:	f362 0317 	bfi	r3, r2, #0, #24
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff fe4b 	bl	8000a04 <colorMenu>

		// FUNCTIONS MUST BE IN THIS ORDER

		// SECOND DIGIT_HOUR
		secondDigitHour(2);
 8000d6e:	2002      	movs	r0, #2
 8000d70:	f7ff fe76 	bl	8000a60 <secondDigitHour>

		// FIRST DIGIT HOUR

		firstDigitHour(20);
 8000d74:	2014      	movs	r0, #20
 8000d76:	f7ff fe59 	bl	8000a2c <firstDigitHour>

		// SECOND DIGIT MINUTE
		secondDigitMinute(2);
 8000d7a:	2002      	movs	r0, #2
 8000d7c:	f7ff feb6 	bl	8000aec <secondDigitMinute>

		// FIRST DIGIT MINUTE
		firstDigitMinute(20);
 8000d80:	2014      	movs	r0, #20
 8000d82:	f7ff fe99 	bl	8000ab8 <firstDigitMinute>

		break;
 8000d86:	e0ab      	b.n	8000ee0 <menu+0x39c>


	case IR_CODE_3:
		// COLOR
		colorMenu(GREEN);
 8000d88:	4b37      	ldr	r3, [pc, #220]	; (8000e68 <menu+0x324>)
 8000d8a:	781a      	ldrb	r2, [r3, #0]
 8000d8c:	7859      	ldrb	r1, [r3, #1]
 8000d8e:	0209      	lsls	r1, r1, #8
 8000d90:	430a      	orrs	r2, r1
 8000d92:	789b      	ldrb	r3, [r3, #2]
 8000d94:	041b      	lsls	r3, r3, #16
 8000d96:	431a      	orrs	r2, r3
 8000d98:	2300      	movs	r3, #0
 8000d9a:	f362 0317 	bfi	r3, r2, #0, #24
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff fe30 	bl	8000a04 <colorMenu>

		// FUNCTIONS MUST BE IN THIS ORDER

		// SECOND DIGIT_HOUR
		secondDigitHour(3);
 8000da4:	2003      	movs	r0, #3
 8000da6:	f7ff fe5b 	bl	8000a60 <secondDigitHour>
		// FIRST DIGIT HOUR

		// NULL

		// SECOND DIGIT MINUTE
		secondDigitMinute(3);
 8000daa:	2003      	movs	r0, #3
 8000dac:	f7ff fe9e 	bl	8000aec <secondDigitMinute>

		// FIRST DIGIT MINUTE
		firstDigitMinute(30);
 8000db0:	201e      	movs	r0, #30
 8000db2:	f7ff fe81 	bl	8000ab8 <firstDigitMinute>
		break;
 8000db6:	e093      	b.n	8000ee0 <menu+0x39c>


	case IR_CODE_4:

		//COLOR
		colorMenu(YELLOW);
 8000db8:	4b2c      	ldr	r3, [pc, #176]	; (8000e6c <menu+0x328>)
 8000dba:	781a      	ldrb	r2, [r3, #0]
 8000dbc:	7859      	ldrb	r1, [r3, #1]
 8000dbe:	0209      	lsls	r1, r1, #8
 8000dc0:	430a      	orrs	r2, r1
 8000dc2:	789b      	ldrb	r3, [r3, #2]
 8000dc4:	041b      	lsls	r3, r3, #16
 8000dc6:	431a      	orrs	r2, r3
 8000dc8:	2300      	movs	r3, #0
 8000dca:	f362 0317 	bfi	r3, r2, #0, #24
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff fe18 	bl	8000a04 <colorMenu>

		// FUNCTIONS MUST BE IN THIS ORDER

		// SECOND DIGIT_HOUR
		secondDigitHour(4);
 8000dd4:	2004      	movs	r0, #4
 8000dd6:	f7ff fe43 	bl	8000a60 <secondDigitHour>
		// FIRST DIGIT HOUR

		// NULL

		// SECOND DIGIT MINUTE
		secondDigitMinute(4);
 8000dda:	2004      	movs	r0, #4
 8000ddc:	f7ff fe86 	bl	8000aec <secondDigitMinute>

		// FIRST DIGIT MINUTE
		firstDigitMinute(40);
 8000de0:	2028      	movs	r0, #40	; 0x28
 8000de2:	f7ff fe69 	bl	8000ab8 <firstDigitMinute>
		break;
 8000de6:	e07b      	b.n	8000ee0 <menu+0x39c>


	case IR_CODE_5:
		//COLOR
		colorMenu(PINK);
 8000de8:	4b21      	ldr	r3, [pc, #132]	; (8000e70 <menu+0x32c>)
 8000dea:	781a      	ldrb	r2, [r3, #0]
 8000dec:	7859      	ldrb	r1, [r3, #1]
 8000dee:	0209      	lsls	r1, r1, #8
 8000df0:	430a      	orrs	r2, r1
 8000df2:	789b      	ldrb	r3, [r3, #2]
 8000df4:	041b      	lsls	r3, r3, #16
 8000df6:	431a      	orrs	r2, r3
 8000df8:	2300      	movs	r3, #0
 8000dfa:	f362 0317 	bfi	r3, r2, #0, #24
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff fe00 	bl	8000a04 <colorMenu>

		// FUNCTIONS MUST BE IN THIS ORDER

		// SECOND DIGIT_HOUR
		secondDigitHour(5);
 8000e04:	2005      	movs	r0, #5
 8000e06:	f7ff fe2b 	bl	8000a60 <secondDigitHour>
		// FIRST DIGIT HOUR

		// NULL

		// SECOND DIGIT MINUTE
		secondDigitMinute(5);
 8000e0a:	2005      	movs	r0, #5
 8000e0c:	f7ff fe6e 	bl	8000aec <secondDigitMinute>

		// FIRST DIGIT MINUTE
		firstDigitMinute(50);
 8000e10:	2032      	movs	r0, #50	; 0x32
 8000e12:	f7ff fe51 	bl	8000ab8 <firstDigitMinute>


		break;
 8000e16:	e063      	b.n	8000ee0 <menu+0x39c>
		//COLOR

		// FUNCTIONS MUST BE IN THIS ORDER

		// SECOND DIGIT_HOUR
		secondDigitHour(6);
 8000e18:	2006      	movs	r0, #6
 8000e1a:	f7ff fe21 	bl	8000a60 <secondDigitHour>
		// FIRST DIGIT HOUR

		// NULL

		// SECOND DIGIT MINUTE
		secondDigitMinute(6);
 8000e1e:	2006      	movs	r0, #6
 8000e20:	f7ff fe64 	bl	8000aec <secondDigitMinute>

		// FIRST DIGIT MINUTE

		// NULL

		break;
 8000e24:	e05c      	b.n	8000ee0 <menu+0x39c>
		//COLOR

		// FUNCTIONS MUST BE IN THIS ORDER

		// SECOND DIGIT_HOUR
		secondDigitHour(7);
 8000e26:	2007      	movs	r0, #7
 8000e28:	f7ff fe1a 	bl	8000a60 <secondDigitHour>
		// FIRST DIGIT HOUR

		// NULL

		// SECOND DIGIT MINUTE
		secondDigitMinute(7);
 8000e2c:	2007      	movs	r0, #7
 8000e2e:	f7ff fe5d 	bl	8000aec <secondDigitMinute>

		// FIRST DIGIT MINUTE

		// NULL

		break;
 8000e32:	e055      	b.n	8000ee0 <menu+0x39c>
		//COLOR

		// FUNCTIONS MUST BE IN THIS ORDER

		// SECOND DIGIT_HOUR
		secondDigitHour(8);
 8000e34:	2008      	movs	r0, #8
 8000e36:	f7ff fe13 	bl	8000a60 <secondDigitHour>
		// FIRST DIGIT HOUR

		// NULL

		// SECOND DIGIT MINUTE
		secondDigitMinute(8);
 8000e3a:	2008      	movs	r0, #8
 8000e3c:	f7ff fe56 	bl	8000aec <secondDigitMinute>

		// FIRST DIGIT MINUTE

		// NULL
		break;
 8000e40:	e04e      	b.n	8000ee0 <menu+0x39c>
		//COLOR

		// FUNCTIONS MUST BE IN THIS ORDER

		// SECOND DIGIT_HOUR
		secondDigitHour(9);
 8000e42:	2009      	movs	r0, #9
 8000e44:	f7ff fe0c 	bl	8000a60 <secondDigitHour>
		// FIRST DIGIT HOUR

		// NULL

		// SECOND DIGIT MINUTE
		secondDigitMinute(9);
 8000e48:	2009      	movs	r0, #9
 8000e4a:	f7ff fe4f 	bl	8000aec <secondDigitMinute>

		// FIRST DIGIT MINUTE

		// NULL

		break;
 8000e4e:	e047      	b.n	8000ee0 <menu+0x39c>
 8000e50:	080082ec 	.word	0x080082ec
 8000e54:	20000710 	.word	0x20000710
 8000e58:	2000011c 	.word	0x2000011c
 8000e5c:	20000120 	.word	0x20000120
 8000e60:	2000007c 	.word	0x2000007c
 8000e64:	20000074 	.word	0x20000074
 8000e68:	20000078 	.word	0x20000078
 8000e6c:	20000080 	.word	0x20000080
 8000e70:	20000084 	.word	0x20000084

		// NULL

		// SECOND DIGIT_HOUR

		if (flagMenu == MENU_TIME_HOUR_SECOND_DIGIT) {
 8000e74:	4b1c      	ldr	r3, [pc, #112]	; (8000ee8 <menu+0x3a4>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2b03      	cmp	r3, #3
 8000e7a:	d112      	bne.n	8000ea2 <menu+0x35e>

			if (isInRange(hoursChange)) {
 8000e7c:	4b1b      	ldr	r3, [pc, #108]	; (8000eec <menu+0x3a8>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff fd9d 	bl	80009c0 <isInRange>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d002      	beq.n	8000e92 <menu+0x34e>
				hoursChange = 0;
 8000e8c:	4b17      	ldr	r3, [pc, #92]	; (8000eec <menu+0x3a8>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	701a      	strb	r2, [r3, #0]
			}

			setHours(hoursChange);
 8000e92:	4b16      	ldr	r3, [pc, #88]	; (8000eec <menu+0x3a8>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	4618      	mov	r0, r3
 8000e98:	f000 fb56 	bl	8001548 <setHours>
			flagMenu = MENU_TIME_LEVEL;
 8000e9c:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <menu+0x3a4>)
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	601a      	str	r2, [r3, #0]



		// FIRST DIGIT HOUR

		firstDigitHour(0);
 8000ea2:	2000      	movs	r0, #0
 8000ea4:	f7ff fdc2 	bl	8000a2c <firstDigitHour>

		// SECOND DIGIT MINUTE
		if (flagMenu == MENU_TIME_MINUTE_SECOND_DIGIT) {
 8000ea8:	4b0f      	ldr	r3, [pc, #60]	; (8000ee8 <menu+0x3a4>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2b04      	cmp	r3, #4
 8000eae:	d112      	bne.n	8000ed6 <menu+0x392>

			if (isInRangeMinute(minutesChange)) {
 8000eb0:	4b0f      	ldr	r3, [pc, #60]	; (8000ef0 <menu+0x3ac>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff fd94 	bl	80009e2 <isInRangeMinute>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d002      	beq.n	8000ec6 <menu+0x382>
				minutesChange = 0;
 8000ec0:	4b0b      	ldr	r3, [pc, #44]	; (8000ef0 <menu+0x3ac>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	701a      	strb	r2, [r3, #0]
			}
			setMinutes(minutesChange);
 8000ec6:	4b0a      	ldr	r3, [pc, #40]	; (8000ef0 <menu+0x3ac>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f000 fb10 	bl	80014f0 <setMinutes>
			flagMenu = MENU_TIME_MINUTE_LEVEL;
 8000ed0:	4b05      	ldr	r3, [pc, #20]	; (8000ee8 <menu+0x3a4>)
 8000ed2:	2202      	movs	r2, #2
 8000ed4:	601a      	str	r2, [r3, #0]



		// FIRST DIGIT MINUTE

		firstDigitMinute(0);
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	f7ff fdee 	bl	8000ab8 <firstDigitMinute>

		break;
 8000edc:	e000      	b.n	8000ee0 <menu+0x39c>
		break;
 8000ede:	bf00      	nop

	}


}
 8000ee0:	bf00      	nop
 8000ee2:	3720      	adds	r7, #32
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20000120 	.word	0x20000120
 8000eec:	20000125 	.word	0x20000125
 8000ef0:	20000124 	.word	0x20000124

08000ef4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b092      	sub	sp, #72	; 0x48
 8000ef8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000efa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	605a      	str	r2, [r3, #4]
 8000f04:	609a      	str	r2, [r3, #8]
 8000f06:	60da      	str	r2, [r3, #12]
 8000f08:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 8000f0e:	1d3b      	adds	r3, r7, #4
 8000f10:	222c      	movs	r2, #44	; 0x2c
 8000f12:	2100      	movs	r1, #0
 8000f14:	4618      	mov	r0, r3
 8000f16:	f006 fa7f 	bl	8007418 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000f1a:	4b3c      	ldr	r3, [pc, #240]	; (800100c <MX_RTC_Init+0x118>)
 8000f1c:	4a3c      	ldr	r2, [pc, #240]	; (8001010 <MX_RTC_Init+0x11c>)
 8000f1e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000f20:	4b3a      	ldr	r3, [pc, #232]	; (800100c <MX_RTC_Init+0x118>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000f26:	4b39      	ldr	r3, [pc, #228]	; (800100c <MX_RTC_Init+0x118>)
 8000f28:	227f      	movs	r2, #127	; 0x7f
 8000f2a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000f2c:	4b37      	ldr	r3, [pc, #220]	; (800100c <MX_RTC_Init+0x118>)
 8000f2e:	22ff      	movs	r2, #255	; 0xff
 8000f30:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000f32:	4b36      	ldr	r3, [pc, #216]	; (800100c <MX_RTC_Init+0x118>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000f38:	4b34      	ldr	r3, [pc, #208]	; (800100c <MX_RTC_Init+0x118>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000f3e:	4b33      	ldr	r3, [pc, #204]	; (800100c <MX_RTC_Init+0x118>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000f44:	4b31      	ldr	r3, [pc, #196]	; (800100c <MX_RTC_Init+0x118>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000f4a:	4830      	ldr	r0, [pc, #192]	; (800100c <MX_RTC_Init+0x118>)
 8000f4c:	f003 f82e 	bl	8003fac <HAL_RTC_Init>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8000f56:	f7ff fd21 	bl	800099c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 23;
 8000f5a:	2317      	movs	r3, #23
 8000f5c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 59;
 8000f60:	233b      	movs	r3, #59	; 0x3b
 8000f62:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 50;
 8000f66:	2332      	movs	r3, #50	; 0x32
 8000f68:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000f70:	2300      	movs	r3, #0
 8000f72:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000f74:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f78:	2200      	movs	r2, #0
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4823      	ldr	r0, [pc, #140]	; (800100c <MX_RTC_Init+0x118>)
 8000f7e:	f003 f890 	bl	80040a2 <HAL_RTC_SetTime>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8000f88:	f7ff fd08 	bl	800099c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 8000f8c:	2307      	movs	r3, #7
 8000f8e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 8000f92:	2301      	movs	r3, #1
 8000f94:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 16;
 8000f98:	2310      	movs	r3, #16
 8000f9a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 22;
 8000f9e:	2316      	movs	r3, #22
 8000fa0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000fa4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fa8:	2200      	movs	r2, #0
 8000faa:	4619      	mov	r1, r3
 8000fac:	4817      	ldr	r0, [pc, #92]	; (800100c <MX_RTC_Init+0x118>)
 8000fae:	f003 f971 	bl	8004294 <HAL_RTC_SetDate>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8000fb8:	f7ff fcf0 	bl	800099c <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 23;
 8000fbc:	2317      	movs	r3, #23
 8000fbe:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 59;
 8000fc0:	233b      	movs	r3, #59	; 0x3b
 8000fc2:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 55;
 8000fc4:	2337      	movs	r3, #55	; 0x37
 8000fc6:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_ALL;
 8000fd4:	f04f 3380 	mov.w	r3, #2155905152	; 0x80808080
 8000fd8:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 1;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8000fe8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fec:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8000fee:	1d3b      	adds	r3, r7, #4
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4805      	ldr	r0, [pc, #20]	; (800100c <MX_RTC_Init+0x118>)
 8000ff6:	f003 fa21 	bl	800443c <HAL_RTC_SetAlarm_IT>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_RTC_Init+0x110>
  {
    Error_Handler();
 8001000:	f7ff fccc 	bl	800099c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001004:	bf00      	nop
 8001006:	3748      	adds	r7, #72	; 0x48
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20000710 	.word	0x20000710
 8001010:	40002800 	.word	0x40002800

08001014 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b0a4      	sub	sp, #144	; 0x90
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800101c:	f107 0308 	add.w	r3, r7, #8
 8001020:	2288      	movs	r2, #136	; 0x88
 8001022:	2100      	movs	r1, #0
 8001024:	4618      	mov	r0, r3
 8001026:	f006 f9f7 	bl	8007418 <memset>
  if(rtcHandle->Instance==RTC)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a10      	ldr	r2, [pc, #64]	; (8001070 <HAL_RTC_MspInit+0x5c>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d118      	bne.n	8001066 <HAL_RTC_MspInit+0x52>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001034:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001038:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800103a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800103e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001042:	f107 0308 	add.w	r3, r7, #8
 8001046:	4618      	mov	r0, r3
 8001048:	f002 fae4 	bl	8003614 <HAL_RCCEx_PeriphCLKConfig>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001052:	f7ff fca3 	bl	800099c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001056:	4b07      	ldr	r3, [pc, #28]	; (8001074 <HAL_RTC_MspInit+0x60>)
 8001058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800105c:	4a05      	ldr	r2, [pc, #20]	; (8001074 <HAL_RTC_MspInit+0x60>)
 800105e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001062:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001066:	bf00      	nop
 8001068:	3790      	adds	r7, #144	; 0x90
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40002800 	.word	0x40002800
 8001074:	40021000 	.word	0x40021000

08001078 <changeColor>:





void changeColor(struct colorRgb newColor){
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
		actualColor.blue=newColor.blue;
 8001080:	797a      	ldrb	r2, [r7, #5]
 8001082:	4b07      	ldr	r3, [pc, #28]	; (80010a0 <changeColor+0x28>)
 8001084:	705a      	strb	r2, [r3, #1]
		actualColor.red=newColor.red;
 8001086:	793a      	ldrb	r2, [r7, #4]
 8001088:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <changeColor+0x28>)
 800108a:	701a      	strb	r2, [r3, #0]
		actualColor.green=newColor.green;
 800108c:	79ba      	ldrb	r2, [r7, #6]
 800108e:	4b04      	ldr	r3, [pc, #16]	; (80010a0 <changeColor+0x28>)
 8001090:	709a      	strb	r2, [r3, #2]
	}
 8001092:	bf00      	nop
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	20000734 	.word	0x20000734

080010a4 <firstSegment>:


	void firstSegment(uint8_t number[]) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
		uint8_t x = 0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	73fb      	strb	r3, [r7, #15]
		for (int i = 0; i <= 13; i++) {
 80010b0:	2300      	movs	r3, #0
 80010b2:	60bb      	str	r3, [r7, #8]
 80010b4:	e01d      	b.n	80010f2 <firstSegment+0x4e>

			if (number[x] == i) {
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
 80010b8:	687a      	ldr	r2, [r7, #4]
 80010ba:	4413      	add	r3, r2
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	461a      	mov	r2, r3
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d10c      	bne.n	80010e0 <firstSegment+0x3c>
				ws2811_set_color(i, actualColor.red, actualColor.green, actualColor.blue);
 80010c6:	68b8      	ldr	r0, [r7, #8]
 80010c8:	4b0e      	ldr	r3, [pc, #56]	; (8001104 <firstSegment+0x60>)
 80010ca:	7819      	ldrb	r1, [r3, #0]
 80010cc:	4b0d      	ldr	r3, [pc, #52]	; (8001104 <firstSegment+0x60>)
 80010ce:	789a      	ldrb	r2, [r3, #2]
 80010d0:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <firstSegment+0x60>)
 80010d2:	785b      	ldrb	r3, [r3, #1]
 80010d4:	f000 feb6 	bl	8001e44 <ws2811_set_color>
				x++;
 80010d8:	7bfb      	ldrb	r3, [r7, #15]
 80010da:	3301      	adds	r3, #1
 80010dc:	73fb      	strb	r3, [r7, #15]
 80010de:	e005      	b.n	80010ec <firstSegment+0x48>
			} else {
				ws2811_set_color(i, 0, 0, 0);
 80010e0:	68b8      	ldr	r0, [r7, #8]
 80010e2:	2300      	movs	r3, #0
 80010e4:	2200      	movs	r2, #0
 80010e6:	2100      	movs	r1, #0
 80010e8:	f000 feac 	bl	8001e44 <ws2811_set_color>
		for (int i = 0; i <= 13; i++) {
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	3301      	adds	r3, #1
 80010f0:	60bb      	str	r3, [r7, #8]
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	2b0d      	cmp	r3, #13
 80010f6:	ddde      	ble.n	80010b6 <firstSegment+0x12>
			}
		}
	}
 80010f8:	bf00      	nop
 80010fa:	bf00      	nop
 80010fc:	3710      	adds	r7, #16
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	20000734 	.word	0x20000734

08001108 <secondSegment>:

	void secondSegment(uint8_t number[]) {
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
		uint8_t x = 0;
 8001110:	2300      	movs	r3, #0
 8001112:	73fb      	strb	r3, [r7, #15]
		for (int i = 14; i <= 27; i++) {
 8001114:	230e      	movs	r3, #14
 8001116:	60bb      	str	r3, [r7, #8]
 8001118:	e01e      	b.n	8001158 <secondSegment+0x50>

			if (number[x] == i - 14) {
 800111a:	7bfb      	ldrb	r3, [r7, #15]
 800111c:	687a      	ldr	r2, [r7, #4]
 800111e:	4413      	add	r3, r2
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	461a      	mov	r2, r3
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	3b0e      	subs	r3, #14
 8001128:	429a      	cmp	r2, r3
 800112a:	d10c      	bne.n	8001146 <secondSegment+0x3e>
				ws2811_set_color(i,actualColor.red, actualColor.green, actualColor.blue);
 800112c:	68b8      	ldr	r0, [r7, #8]
 800112e:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <secondSegment+0x60>)
 8001130:	7819      	ldrb	r1, [r3, #0]
 8001132:	4b0d      	ldr	r3, [pc, #52]	; (8001168 <secondSegment+0x60>)
 8001134:	789a      	ldrb	r2, [r3, #2]
 8001136:	4b0c      	ldr	r3, [pc, #48]	; (8001168 <secondSegment+0x60>)
 8001138:	785b      	ldrb	r3, [r3, #1]
 800113a:	f000 fe83 	bl	8001e44 <ws2811_set_color>
				x++;
 800113e:	7bfb      	ldrb	r3, [r7, #15]
 8001140:	3301      	adds	r3, #1
 8001142:	73fb      	strb	r3, [r7, #15]
 8001144:	e005      	b.n	8001152 <secondSegment+0x4a>
			} else {
				ws2811_set_color(i, 0, 0, 0);
 8001146:	68b8      	ldr	r0, [r7, #8]
 8001148:	2300      	movs	r3, #0
 800114a:	2200      	movs	r2, #0
 800114c:	2100      	movs	r1, #0
 800114e:	f000 fe79 	bl	8001e44 <ws2811_set_color>
		for (int i = 14; i <= 27; i++) {
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	3301      	adds	r3, #1
 8001156:	60bb      	str	r3, [r7, #8]
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	2b1b      	cmp	r3, #27
 800115c:	dddd      	ble.n	800111a <secondSegment+0x12>
			}
		}
	}
 800115e:	bf00      	nop
 8001160:	bf00      	nop
 8001162:	3710      	adds	r7, #16
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	20000734 	.word	0x20000734

0800116c <dwukropekTurnOn>:

	void dwukropekTurnOn() {
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0

		ws2811_set_color(28,  actualColor.red, actualColor.green, actualColor.blue);
 8001170:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <dwukropekTurnOn+0x38>)
 8001172:	7819      	ldrb	r1, [r3, #0]
 8001174:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <dwukropekTurnOn+0x38>)
 8001176:	789a      	ldrb	r2, [r3, #2]
 8001178:	4b0a      	ldr	r3, [pc, #40]	; (80011a4 <dwukropekTurnOn+0x38>)
 800117a:	785b      	ldrb	r3, [r3, #1]
 800117c:	201c      	movs	r0, #28
 800117e:	f000 fe61 	bl	8001e44 <ws2811_set_color>
		ws2811_set_color(29,  actualColor.red, actualColor.green, actualColor.blue);
 8001182:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <dwukropekTurnOn+0x38>)
 8001184:	7819      	ldrb	r1, [r3, #0]
 8001186:	4b07      	ldr	r3, [pc, #28]	; (80011a4 <dwukropekTurnOn+0x38>)
 8001188:	789a      	ldrb	r2, [r3, #2]
 800118a:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <dwukropekTurnOn+0x38>)
 800118c:	785b      	ldrb	r3, [r3, #1]
 800118e:	201d      	movs	r0, #29
 8001190:	f000 fe58 	bl	8001e44 <ws2811_set_color>
		ws2811_update();
 8001194:	f000 fe46 	bl	8001e24 <ws2811_update>
		doubleDot=0;
 8001198:	4b03      	ldr	r3, [pc, #12]	; (80011a8 <dwukropekTurnOn+0x3c>)
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]

	}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20000734 	.word	0x20000734
 80011a8:	20000128 	.word	0x20000128

080011ac <dwukropekTurnOff>:

	void dwukropekTurnOff() {
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0

		ws2811_set_color(28, 0, 0, 0);
 80011b0:	2300      	movs	r3, #0
 80011b2:	2200      	movs	r2, #0
 80011b4:	2100      	movs	r1, #0
 80011b6:	201c      	movs	r0, #28
 80011b8:	f000 fe44 	bl	8001e44 <ws2811_set_color>
		ws2811_set_color(29, 0, 0, 0);
 80011bc:	2300      	movs	r3, #0
 80011be:	2200      	movs	r2, #0
 80011c0:	2100      	movs	r1, #0
 80011c2:	201d      	movs	r0, #29
 80011c4:	f000 fe3e 	bl	8001e44 <ws2811_set_color>
		ws2811_update();
 80011c8:	f000 fe2c 	bl	8001e24 <ws2811_update>
		doubleDot=1;
 80011cc:	4b02      	ldr	r3, [pc, #8]	; (80011d8 <dwukropekTurnOff+0x2c>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	601a      	str	r2, [r3, #0]
}
 80011d2:	bf00      	nop
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20000128 	.word	0x20000128

080011dc <dwukropekStart>:


	void dwukropekStart(void){
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
		if (doubleDot == 1) {
 80011e0:	4b05      	ldr	r3, [pc, #20]	; (80011f8 <dwukropekStart+0x1c>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d102      	bne.n	80011ee <dwukropekStart+0x12>
					dwukropekTurnOn();
 80011e8:	f7ff ffc0 	bl	800116c <dwukropekTurnOn>
					//HAL_Delay(1000);
				} else {
					dwukropekTurnOff();
					//HAL_Delay(1000);
				}
	}
 80011ec:	e001      	b.n	80011f2 <dwukropekStart+0x16>
					dwukropekTurnOff();
 80011ee:	f7ff ffdd 	bl	80011ac <dwukropekTurnOff>
	}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20000128 	.word	0x20000128

080011fc <thirdSegment>:

	void thirdSegment(uint8_t number[]) {
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
		uint8_t x = 0;
 8001204:	2300      	movs	r3, #0
 8001206:	73fb      	strb	r3, [r7, #15]
		for (int i = 30; i <= 43; i++) {
 8001208:	231e      	movs	r3, #30
 800120a:	60bb      	str	r3, [r7, #8]
 800120c:	e01e      	b.n	800124c <thirdSegment+0x50>

			if (number[x] == i - 30) {
 800120e:	7bfb      	ldrb	r3, [r7, #15]
 8001210:	687a      	ldr	r2, [r7, #4]
 8001212:	4413      	add	r3, r2
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	461a      	mov	r2, r3
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	3b1e      	subs	r3, #30
 800121c:	429a      	cmp	r2, r3
 800121e:	d10c      	bne.n	800123a <thirdSegment+0x3e>
				ws2811_set_color(i, actualColor.red, actualColor.green, actualColor.blue);
 8001220:	68b8      	ldr	r0, [r7, #8]
 8001222:	4b0e      	ldr	r3, [pc, #56]	; (800125c <thirdSegment+0x60>)
 8001224:	7819      	ldrb	r1, [r3, #0]
 8001226:	4b0d      	ldr	r3, [pc, #52]	; (800125c <thirdSegment+0x60>)
 8001228:	789a      	ldrb	r2, [r3, #2]
 800122a:	4b0c      	ldr	r3, [pc, #48]	; (800125c <thirdSegment+0x60>)
 800122c:	785b      	ldrb	r3, [r3, #1]
 800122e:	f000 fe09 	bl	8001e44 <ws2811_set_color>
				x++;
 8001232:	7bfb      	ldrb	r3, [r7, #15]
 8001234:	3301      	adds	r3, #1
 8001236:	73fb      	strb	r3, [r7, #15]
 8001238:	e005      	b.n	8001246 <thirdSegment+0x4a>
			} else {
				ws2811_set_color(i, 0, 0, 0);
 800123a:	68b8      	ldr	r0, [r7, #8]
 800123c:	2300      	movs	r3, #0
 800123e:	2200      	movs	r2, #0
 8001240:	2100      	movs	r1, #0
 8001242:	f000 fdff 	bl	8001e44 <ws2811_set_color>
		for (int i = 30; i <= 43; i++) {
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	3301      	adds	r3, #1
 800124a:	60bb      	str	r3, [r7, #8]
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	2b2b      	cmp	r3, #43	; 0x2b
 8001250:	dddd      	ble.n	800120e <thirdSegment+0x12>
			}
		}
	}
 8001252:	bf00      	nop
 8001254:	bf00      	nop
 8001256:	3710      	adds	r7, #16
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	20000734 	.word	0x20000734

08001260 <fourthSegment>:

	void fourthSegment(uint8_t number[]) {
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
		uint8_t x = 0;
 8001268:	2300      	movs	r3, #0
 800126a:	73fb      	strb	r3, [r7, #15]
		for (int i = 44; i <= 57; i++) {
 800126c:	232c      	movs	r3, #44	; 0x2c
 800126e:	60bb      	str	r3, [r7, #8]
 8001270:	e01e      	b.n	80012b0 <fourthSegment+0x50>

			if (number[x] == i - 44) {
 8001272:	7bfb      	ldrb	r3, [r7, #15]
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	4413      	add	r3, r2
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	461a      	mov	r2, r3
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	3b2c      	subs	r3, #44	; 0x2c
 8001280:	429a      	cmp	r2, r3
 8001282:	d10c      	bne.n	800129e <fourthSegment+0x3e>
				ws2811_set_color(i, actualColor.red, actualColor.green, actualColor.blue);
 8001284:	68b8      	ldr	r0, [r7, #8]
 8001286:	4b0e      	ldr	r3, [pc, #56]	; (80012c0 <fourthSegment+0x60>)
 8001288:	7819      	ldrb	r1, [r3, #0]
 800128a:	4b0d      	ldr	r3, [pc, #52]	; (80012c0 <fourthSegment+0x60>)
 800128c:	789a      	ldrb	r2, [r3, #2]
 800128e:	4b0c      	ldr	r3, [pc, #48]	; (80012c0 <fourthSegment+0x60>)
 8001290:	785b      	ldrb	r3, [r3, #1]
 8001292:	f000 fdd7 	bl	8001e44 <ws2811_set_color>
				x++;
 8001296:	7bfb      	ldrb	r3, [r7, #15]
 8001298:	3301      	adds	r3, #1
 800129a:	73fb      	strb	r3, [r7, #15]
 800129c:	e005      	b.n	80012aa <fourthSegment+0x4a>
			} else {
				ws2811_set_color(i, 0, 0, 0);
 800129e:	68b8      	ldr	r0, [r7, #8]
 80012a0:	2300      	movs	r3, #0
 80012a2:	2200      	movs	r2, #0
 80012a4:	2100      	movs	r1, #0
 80012a6:	f000 fdcd 	bl	8001e44 <ws2811_set_color>
		for (int i = 44; i <= 57; i++) {
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	3301      	adds	r3, #1
 80012ae:	60bb      	str	r3, [r7, #8]
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	2b39      	cmp	r3, #57	; 0x39
 80012b4:	dddd      	ble.n	8001272 <fourthSegment+0x12>
			}
		}
	}
 80012b6:	bf00      	nop
 80012b8:	bf00      	nop
 80012ba:	3710      	adds	r7, #16
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20000734 	.word	0x20000734

080012c4 <numberToMatrix>:

	uint8_t* numberToMatrix(int number) {
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2b09      	cmp	r3, #9
 80012d0:	d82a      	bhi.n	8001328 <numberToMatrix+0x64>
 80012d2:	a201      	add	r2, pc, #4	; (adr r2, 80012d8 <numberToMatrix+0x14>)
 80012d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012d8:	08001301 	.word	0x08001301
 80012dc:	08001305 	.word	0x08001305
 80012e0:	08001309 	.word	0x08001309
 80012e4:	0800130d 	.word	0x0800130d
 80012e8:	08001311 	.word	0x08001311
 80012ec:	08001315 	.word	0x08001315
 80012f0:	08001319 	.word	0x08001319
 80012f4:	0800131d 	.word	0x0800131d
 80012f8:	08001321 	.word	0x08001321
 80012fc:	08001325 	.word	0x08001325
		switch (number) {
		case 0:
			return zero;
 8001300:	4b0d      	ldr	r3, [pc, #52]	; (8001338 <numberToMatrix+0x74>)
 8001302:	e012      	b.n	800132a <numberToMatrix+0x66>
			break;
		case 1:
			return one;
 8001304:	4b0d      	ldr	r3, [pc, #52]	; (800133c <numberToMatrix+0x78>)
 8001306:	e010      	b.n	800132a <numberToMatrix+0x66>
			break;
		case 2:
			return two;
 8001308:	4b0d      	ldr	r3, [pc, #52]	; (8001340 <numberToMatrix+0x7c>)
 800130a:	e00e      	b.n	800132a <numberToMatrix+0x66>
			break;
		case 3:
			return three;
 800130c:	4b0d      	ldr	r3, [pc, #52]	; (8001344 <numberToMatrix+0x80>)
 800130e:	e00c      	b.n	800132a <numberToMatrix+0x66>
			break;
		case 4:
			return four;
 8001310:	4b0d      	ldr	r3, [pc, #52]	; (8001348 <numberToMatrix+0x84>)
 8001312:	e00a      	b.n	800132a <numberToMatrix+0x66>
			break;
		case 5:
			return five;
 8001314:	4b0d      	ldr	r3, [pc, #52]	; (800134c <numberToMatrix+0x88>)
 8001316:	e008      	b.n	800132a <numberToMatrix+0x66>
			break;
		case 6:
			return six;
 8001318:	4b0d      	ldr	r3, [pc, #52]	; (8001350 <numberToMatrix+0x8c>)
 800131a:	e006      	b.n	800132a <numberToMatrix+0x66>
			break;
		case 7:
			return seven;
 800131c:	4b0d      	ldr	r3, [pc, #52]	; (8001354 <numberToMatrix+0x90>)
 800131e:	e004      	b.n	800132a <numberToMatrix+0x66>
			break;
		case 8:
			return eight;
 8001320:	4b0d      	ldr	r3, [pc, #52]	; (8001358 <numberToMatrix+0x94>)
 8001322:	e002      	b.n	800132a <numberToMatrix+0x66>
			break;
		case 9:
			return nine;
 8001324:	4b0d      	ldr	r3, [pc, #52]	; (800135c <numberToMatrix+0x98>)
 8001326:	e000      	b.n	800132a <numberToMatrix+0x66>
			break;
		default:
			return 0;
 8001328:	2300      	movs	r3, #0
		}

	}
 800132a:	4618      	mov	r0, r3
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	20000008 	.word	0x20000008
 800133c:	20000014 	.word	0x20000014
 8001340:	20000018 	.word	0x20000018
 8001344:	20000024 	.word	0x20000024
 8001348:	20000030 	.word	0x20000030
 800134c:	20000038 	.word	0x20000038
 8001350:	20000044 	.word	0x20000044
 8001354:	20000050 	.word	0x20000050
 8001358:	20000058 	.word	0x20000058
 800135c:	20000068 	.word	0x20000068

08001360 <destroy>:

	struct manyNumber destroy(uint8_t numberToDestroy) {
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	71fb      	strb	r3, [r7, #7]

		struct manyNumber temp;

		temp.firstNumber = numberToDestroy / 10;
 800136a:	79fb      	ldrb	r3, [r7, #7]
 800136c:	4a10      	ldr	r2, [pc, #64]	; (80013b0 <destroy+0x50>)
 800136e:	fba2 2303 	umull	r2, r3, r2, r3
 8001372:	08db      	lsrs	r3, r3, #3
 8001374:	b2db      	uxtb	r3, r3
 8001376:	723b      	strb	r3, [r7, #8]
		temp.secondNumber = numberToDestroy % 10;
 8001378:	79fa      	ldrb	r2, [r7, #7]
 800137a:	4b0d      	ldr	r3, [pc, #52]	; (80013b0 <destroy+0x50>)
 800137c:	fba3 1302 	umull	r1, r3, r3, r2
 8001380:	08d9      	lsrs	r1, r3, #3
 8001382:	460b      	mov	r3, r1
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	440b      	add	r3, r1
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	b2db      	uxtb	r3, r3
 800138e:	727b      	strb	r3, [r7, #9]
		return temp;
 8001390:	893b      	ldrh	r3, [r7, #8]
 8001392:	81bb      	strh	r3, [r7, #12]
 8001394:	2300      	movs	r3, #0
 8001396:	7b3a      	ldrb	r2, [r7, #12]
 8001398:	f362 0307 	bfi	r3, r2, #0, #8
 800139c:	7b7a      	ldrb	r2, [r7, #13]
 800139e:	f362 230f 	bfi	r3, r2, #8, #8
	}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3714      	adds	r7, #20
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	cccccccd 	.word	0xcccccccd

080013b4 <putMinutes>:

	void putMinutes(uint8_t minutes) {
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	71fb      	strb	r3, [r7, #7]
		if (minutes <= 9) {
 80013be:	79fb      	ldrb	r3, [r7, #7]
 80013c0:	2b09      	cmp	r3, #9
 80013c2:	d812      	bhi.n	80013ea <putMinutes+0x36>
			thirdSegment(zero);
 80013c4:	4816      	ldr	r0, [pc, #88]	; (8001420 <putMinutes+0x6c>)
 80013c6:	f7ff ff19 	bl	80011fc <thirdSegment>
			if (minutes == 0) {
 80013ca:	79fb      	ldrb	r3, [r7, #7]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d103      	bne.n	80013d8 <putMinutes+0x24>
				fourthSegment(zero);
 80013d0:	4813      	ldr	r0, [pc, #76]	; (8001420 <putMinutes+0x6c>)
 80013d2:	f7ff ff45 	bl	8001260 <fourthSegment>
		} else {
			struct manyNumber temp = destroy(minutes);
			thirdSegment(numberToMatrix(temp.firstNumber));
			fourthSegment(numberToMatrix(temp.secondNumber));
		}
	}
 80013d6:	e01e      	b.n	8001416 <putMinutes+0x62>
				fourthSegment(numberToMatrix(minutes));
 80013d8:	79fb      	ldrb	r3, [r7, #7]
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff ff72 	bl	80012c4 <numberToMatrix>
 80013e0:	4603      	mov	r3, r0
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff ff3c 	bl	8001260 <fourthSegment>
	}
 80013e8:	e015      	b.n	8001416 <putMinutes+0x62>
			struct manyNumber temp = destroy(minutes);
 80013ea:	79fb      	ldrb	r3, [r7, #7]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff ffb7 	bl	8001360 <destroy>
 80013f2:	4603      	mov	r3, r0
 80013f4:	81bb      	strh	r3, [r7, #12]
			thirdSegment(numberToMatrix(temp.firstNumber));
 80013f6:	7b3b      	ldrb	r3, [r7, #12]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff ff63 	bl	80012c4 <numberToMatrix>
 80013fe:	4603      	mov	r3, r0
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff fefb 	bl	80011fc <thirdSegment>
			fourthSegment(numberToMatrix(temp.secondNumber));
 8001406:	7b7b      	ldrb	r3, [r7, #13]
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff ff5b 	bl	80012c4 <numberToMatrix>
 800140e:	4603      	mov	r3, r0
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff ff25 	bl	8001260 <fourthSegment>
	}
 8001416:	bf00      	nop
 8001418:	3710      	adds	r7, #16
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000008 	.word	0x20000008

08001424 <putHours>:

	void putHours(uint8_t hours) {
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	71fb      	strb	r3, [r7, #7]
		if (hours <= 9) {
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	2b09      	cmp	r3, #9
 8001432:	d812      	bhi.n	800145a <putHours+0x36>
			firstSegment(zero);
 8001434:	4816      	ldr	r0, [pc, #88]	; (8001490 <putHours+0x6c>)
 8001436:	f7ff fe35 	bl	80010a4 <firstSegment>
			if (hours == 0) {
 800143a:	79fb      	ldrb	r3, [r7, #7]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d103      	bne.n	8001448 <putHours+0x24>
				secondSegment(zero);
 8001440:	4813      	ldr	r0, [pc, #76]	; (8001490 <putHours+0x6c>)
 8001442:	f7ff fe61 	bl	8001108 <secondSegment>
		} else {
			struct manyNumber temp = destroy(hours);
			firstSegment(numberToMatrix(temp.firstNumber));
			secondSegment(numberToMatrix(temp.secondNumber));
		}
	}
 8001446:	e01e      	b.n	8001486 <putHours+0x62>
				secondSegment(numberToMatrix(hours));
 8001448:	79fb      	ldrb	r3, [r7, #7]
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff ff3a 	bl	80012c4 <numberToMatrix>
 8001450:	4603      	mov	r3, r0
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff fe58 	bl	8001108 <secondSegment>
	}
 8001458:	e015      	b.n	8001486 <putHours+0x62>
			struct manyNumber temp = destroy(hours);
 800145a:	79fb      	ldrb	r3, [r7, #7]
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff ff7f 	bl	8001360 <destroy>
 8001462:	4603      	mov	r3, r0
 8001464:	81bb      	strh	r3, [r7, #12]
			firstSegment(numberToMatrix(temp.firstNumber));
 8001466:	7b3b      	ldrb	r3, [r7, #12]
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff ff2b 	bl	80012c4 <numberToMatrix>
 800146e:	4603      	mov	r3, r0
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff fe17 	bl	80010a4 <firstSegment>
			secondSegment(numberToMatrix(temp.secondNumber));
 8001476:	7b7b      	ldrb	r3, [r7, #13]
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff ff23 	bl	80012c4 <numberToMatrix>
 800147e:	4603      	mov	r3, r0
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff fe41 	bl	8001108 <secondSegment>
	}
 8001486:	bf00      	nop
 8001488:	3710      	adds	r7, #16
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	20000008 	.word	0x20000008

08001494 <clockStart>:


	void clockStart(){
 8001494:	b580      	push	{r7, lr}
 8001496:	b088      	sub	sp, #32
 8001498:	af00      	add	r7, sp, #0

		RTC_TimeTypeDef time = {0};
 800149a:	f107 0308 	add.w	r3, r7, #8
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	605a      	str	r2, [r3, #4]
 80014a4:	609a      	str	r2, [r3, #8]
 80014a6:	60da      	str	r2, [r3, #12]
 80014a8:	611a      	str	r2, [r3, #16]
		RTC_DateTypeDef date = {0};
 80014aa:	2300      	movs	r3, #0
 80014ac:	607b      	str	r3, [r7, #4]

		HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 80014ae:	f107 0308 	add.w	r3, r7, #8
 80014b2:	2200      	movs	r2, #0
 80014b4:	4619      	mov	r1, r3
 80014b6:	480d      	ldr	r0, [pc, #52]	; (80014ec <clockStart+0x58>)
 80014b8:	f002 fe90 	bl	80041dc <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 80014bc:	1d3b      	adds	r3, r7, #4
 80014be:	2200      	movs	r2, #0
 80014c0:	4619      	mov	r1, r3
 80014c2:	480a      	ldr	r0, [pc, #40]	; (80014ec <clockStart+0x58>)
 80014c4:	f002 ff6d 	bl	80043a2 <HAL_RTC_GetDate>

		uint8_t hours = time.Hours;
 80014c8:	7a3b      	ldrb	r3, [r7, #8]
 80014ca:	77fb      	strb	r3, [r7, #31]
		uint8_t minutes = time.Minutes;
 80014cc:	7a7b      	ldrb	r3, [r7, #9]
 80014ce:	77bb      	strb	r3, [r7, #30]

		putHours(hours);
 80014d0:	7ffb      	ldrb	r3, [r7, #31]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff ffa6 	bl	8001424 <putHours>
		putMinutes(minutes);
 80014d8:	7fbb      	ldrb	r3, [r7, #30]
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff ff6a 	bl	80013b4 <putMinutes>
		ws2811_update();
 80014e0:	f000 fca0 	bl	8001e24 <ws2811_update>
	}
 80014e4:	bf00      	nop
 80014e6:	3720      	adds	r7, #32
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	20000710 	.word	0x20000710

080014f0 <setMinutes>:

	void setMinutes(uint8_t minute){
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b088      	sub	sp, #32
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	71fb      	strb	r3, [r7, #7]
		RTC_TimeTypeDef time = {0};
 80014fa:	f107 030c 	add.w	r3, r7, #12
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	605a      	str	r2, [r3, #4]
 8001504:	609a      	str	r2, [r3, #8]
 8001506:	60da      	str	r2, [r3, #12]
 8001508:	611a      	str	r2, [r3, #16]
		RTC_DateTypeDef date = {0};
 800150a:	2300      	movs	r3, #0
 800150c:	60bb      	str	r3, [r7, #8]

		HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 800150e:	f107 030c 	add.w	r3, r7, #12
 8001512:	2200      	movs	r2, #0
 8001514:	4619      	mov	r1, r3
 8001516:	480b      	ldr	r0, [pc, #44]	; (8001544 <setMinutes+0x54>)
 8001518:	f002 fe60 	bl	80041dc <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 800151c:	f107 0308 	add.w	r3, r7, #8
 8001520:	2200      	movs	r2, #0
 8001522:	4619      	mov	r1, r3
 8001524:	4807      	ldr	r0, [pc, #28]	; (8001544 <setMinutes+0x54>)
 8001526:	f002 ff3c 	bl	80043a2 <HAL_RTC_GetDate>

		time.Minutes=minute;
 800152a:	79fb      	ldrb	r3, [r7, #7]
 800152c:	737b      	strb	r3, [r7, #13]

		HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN);
 800152e:	f107 030c 	add.w	r3, r7, #12
 8001532:	2200      	movs	r2, #0
 8001534:	4619      	mov	r1, r3
 8001536:	4803      	ldr	r0, [pc, #12]	; (8001544 <setMinutes+0x54>)
 8001538:	f002 fdb3 	bl	80040a2 <HAL_RTC_SetTime>
	}
 800153c:	bf00      	nop
 800153e:	3720      	adds	r7, #32
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	20000710 	.word	0x20000710

08001548 <setHours>:

	void setHours(uint8_t hours){
 8001548:	b580      	push	{r7, lr}
 800154a:	b088      	sub	sp, #32
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	71fb      	strb	r3, [r7, #7]
			RTC_TimeTypeDef time = {0};
 8001552:	f107 030c 	add.w	r3, r7, #12
 8001556:	2200      	movs	r2, #0
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	605a      	str	r2, [r3, #4]
 800155c:	609a      	str	r2, [r3, #8]
 800155e:	60da      	str	r2, [r3, #12]
 8001560:	611a      	str	r2, [r3, #16]
			RTC_DateTypeDef date = {0};
 8001562:	2300      	movs	r3, #0
 8001564:	60bb      	str	r3, [r7, #8]

			HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8001566:	f107 030c 	add.w	r3, r7, #12
 800156a:	2200      	movs	r2, #0
 800156c:	4619      	mov	r1, r3
 800156e:	480b      	ldr	r0, [pc, #44]	; (800159c <setHours+0x54>)
 8001570:	f002 fe34 	bl	80041dc <HAL_RTC_GetTime>
			HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8001574:	f107 0308 	add.w	r3, r7, #8
 8001578:	2200      	movs	r2, #0
 800157a:	4619      	mov	r1, r3
 800157c:	4807      	ldr	r0, [pc, #28]	; (800159c <setHours+0x54>)
 800157e:	f002 ff10 	bl	80043a2 <HAL_RTC_GetDate>

			time.Hours=hours;
 8001582:	79fb      	ldrb	r3, [r7, #7]
 8001584:	733b      	strb	r3, [r7, #12]

			HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8001586:	f107 030c 	add.w	r3, r7, #12
 800158a:	2200      	movs	r2, #0
 800158c:	4619      	mov	r1, r3
 800158e:	4803      	ldr	r0, [pc, #12]	; (800159c <setHours+0x54>)
 8001590:	f002 fd87 	bl	80040a2 <HAL_RTC_SetTime>
		}
 8001594:	bf00      	nop
 8001596:	3720      	adds	r7, #32
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	20000710 	.word	0x20000710

080015a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015a6:	4b0f      	ldr	r3, [pc, #60]	; (80015e4 <HAL_MspInit+0x44>)
 80015a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015aa:	4a0e      	ldr	r2, [pc, #56]	; (80015e4 <HAL_MspInit+0x44>)
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	6613      	str	r3, [r2, #96]	; 0x60
 80015b2:	4b0c      	ldr	r3, [pc, #48]	; (80015e4 <HAL_MspInit+0x44>)
 80015b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	607b      	str	r3, [r7, #4]
 80015bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015be:	4b09      	ldr	r3, [pc, #36]	; (80015e4 <HAL_MspInit+0x44>)
 80015c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c2:	4a08      	ldr	r2, [pc, #32]	; (80015e4 <HAL_MspInit+0x44>)
 80015c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015c8:	6593      	str	r3, [r2, #88]	; 0x58
 80015ca:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <HAL_MspInit+0x44>)
 80015cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d2:	603b      	str	r3, [r7, #0]
 80015d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015d6:	bf00      	nop
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	40021000 	.word	0x40021000

080015e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015ec:	e7fe      	b.n	80015ec <NMI_Handler+0x4>

080015ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015f2:	e7fe      	b.n	80015f2 <HardFault_Handler+0x4>

080015f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015f8:	e7fe      	b.n	80015f8 <MemManage_Handler+0x4>

080015fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015fa:	b480      	push	{r7}
 80015fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015fe:	e7fe      	b.n	80015fe <BusFault_Handler+0x4>

08001600 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001604:	e7fe      	b.n	8001604 <UsageFault_Handler+0x4>

08001606 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001606:	b480      	push	{r7}
 8001608:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001618:	bf00      	nop
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr

08001622 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001622:	b480      	push	{r7}
 8001624:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001634:	f000 fcba 	bl	8001fac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001638:	bf00      	nop
 800163a:	bd80      	pop	{r7, pc}

0800163c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8001640:	4802      	ldr	r0, [pc, #8]	; (800164c <DMA1_Channel1_IRQHandler+0x10>)
 8001642:	f000 fefd 	bl	8002440 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	200007d0 	.word	0x200007d0

08001650 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001654:	4802      	ldr	r0, [pc, #8]	; (8001660 <TIM2_IRQHandler+0x10>)
 8001656:	f003 fe2d 	bl	80052b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	20000784 	.word	0x20000784

08001664 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001668:	4802      	ldr	r0, [pc, #8]	; (8001674 <RTC_Alarm_IRQHandler+0x10>)
 800166a:	f003 f823 	bl	80046b4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	20000710 	.word	0x20000710

08001678 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b086      	sub	sp, #24
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	60b9      	str	r1, [r7, #8]
 8001682:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001684:	2300      	movs	r3, #0
 8001686:	617b      	str	r3, [r7, #20]
 8001688:	e00a      	b.n	80016a0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800168a:	f3af 8000 	nop.w
 800168e:	4601      	mov	r1, r0
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	1c5a      	adds	r2, r3, #1
 8001694:	60ba      	str	r2, [r7, #8]
 8001696:	b2ca      	uxtb	r2, r1
 8001698:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	3301      	adds	r3, #1
 800169e:	617b      	str	r3, [r7, #20]
 80016a0:	697a      	ldr	r2, [r7, #20]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	dbf0      	blt.n	800168a <_read+0x12>
	}

return len;
 80016a8:	687b      	ldr	r3, [r7, #4]
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3718      	adds	r7, #24
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b086      	sub	sp, #24
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	60f8      	str	r0, [r7, #12]
 80016ba:	60b9      	str	r1, [r7, #8]
 80016bc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016be:	2300      	movs	r3, #0
 80016c0:	617b      	str	r3, [r7, #20]
 80016c2:	e009      	b.n	80016d8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	1c5a      	adds	r2, r3, #1
 80016c8:	60ba      	str	r2, [r7, #8]
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff f83d 	bl	800074c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	3301      	adds	r3, #1
 80016d6:	617b      	str	r3, [r7, #20]
 80016d8:	697a      	ldr	r2, [r7, #20]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	429a      	cmp	r2, r3
 80016de:	dbf1      	blt.n	80016c4 <_write+0x12>
	}
	return len;
 80016e0:	687b      	ldr	r3, [r7, #4]
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3718      	adds	r7, #24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <_close>:

int _close(int file)
{
 80016ea:	b480      	push	{r7}
 80016ec:	b083      	sub	sp, #12
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
	return -1;
 80016f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001702:	b480      	push	{r7}
 8001704:	b083      	sub	sp, #12
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
 800170a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001712:	605a      	str	r2, [r3, #4]
	return 0;
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr

08001722 <_isatty>:

int _isatty(int file)
{
 8001722:	b480      	push	{r7}
 8001724:	b083      	sub	sp, #12
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
	return 1;
 800172a:	2301      	movs	r3, #1
}
 800172c:	4618      	mov	r0, r3
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001738:	b480      	push	{r7}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	607a      	str	r2, [r7, #4]
	return 0;
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	3714      	adds	r7, #20
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
	...

08001754 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800175c:	4a14      	ldr	r2, [pc, #80]	; (80017b0 <_sbrk+0x5c>)
 800175e:	4b15      	ldr	r3, [pc, #84]	; (80017b4 <_sbrk+0x60>)
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001768:	4b13      	ldr	r3, [pc, #76]	; (80017b8 <_sbrk+0x64>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d102      	bne.n	8001776 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001770:	4b11      	ldr	r3, [pc, #68]	; (80017b8 <_sbrk+0x64>)
 8001772:	4a12      	ldr	r2, [pc, #72]	; (80017bc <_sbrk+0x68>)
 8001774:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001776:	4b10      	ldr	r3, [pc, #64]	; (80017b8 <_sbrk+0x64>)
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4413      	add	r3, r2
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	429a      	cmp	r2, r3
 8001782:	d207      	bcs.n	8001794 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001784:	f005 fe1e 	bl	80073c4 <__errno>
 8001788:	4603      	mov	r3, r0
 800178a:	220c      	movs	r2, #12
 800178c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800178e:	f04f 33ff 	mov.w	r3, #4294967295
 8001792:	e009      	b.n	80017a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001794:	4b08      	ldr	r3, [pc, #32]	; (80017b8 <_sbrk+0x64>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800179a:	4b07      	ldr	r3, [pc, #28]	; (80017b8 <_sbrk+0x64>)
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4413      	add	r3, r2
 80017a2:	4a05      	ldr	r2, [pc, #20]	; (80017b8 <_sbrk+0x64>)
 80017a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017a6:	68fb      	ldr	r3, [r7, #12]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3718      	adds	r7, #24
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20018000 	.word	0x20018000
 80017b4:	00000400 	.word	0x00000400
 80017b8:	2000012c 	.word	0x2000012c
 80017bc:	200008b0 	.word	0x200008b0

080017c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80017c4:	4b15      	ldr	r3, [pc, #84]	; (800181c <SystemInit+0x5c>)
 80017c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017ca:	4a14      	ldr	r2, [pc, #80]	; (800181c <SystemInit+0x5c>)
 80017cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80017d4:	4b12      	ldr	r3, [pc, #72]	; (8001820 <SystemInit+0x60>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a11      	ldr	r2, [pc, #68]	; (8001820 <SystemInit+0x60>)
 80017da:	f043 0301 	orr.w	r3, r3, #1
 80017de:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80017e0:	4b0f      	ldr	r3, [pc, #60]	; (8001820 <SystemInit+0x60>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80017e6:	4b0e      	ldr	r3, [pc, #56]	; (8001820 <SystemInit+0x60>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a0d      	ldr	r2, [pc, #52]	; (8001820 <SystemInit+0x60>)
 80017ec:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80017f0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80017f4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80017f6:	4b0a      	ldr	r3, [pc, #40]	; (8001820 <SystemInit+0x60>)
 80017f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017fc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80017fe:	4b08      	ldr	r3, [pc, #32]	; (8001820 <SystemInit+0x60>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a07      	ldr	r2, [pc, #28]	; (8001820 <SystemInit+0x60>)
 8001804:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001808:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800180a:	4b05      	ldr	r3, [pc, #20]	; (8001820 <SystemInit+0x60>)
 800180c:	2200      	movs	r2, #0
 800180e:	619a      	str	r2, [r3, #24]
}
 8001810:	bf00      	nop
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	e000ed00 	.word	0xe000ed00
 8001820:	40021000 	.word	0x40021000

08001824 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
DMA_HandleTypeDef hdma_tim4_ch1;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b090      	sub	sp, #64	; 0x40
 8001828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800182a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	605a      	str	r2, [r3, #4]
 8001834:	609a      	str	r2, [r3, #8]
 8001836:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001838:	f107 031c 	add.w	r3, r7, #28
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	60da      	str	r2, [r3, #12]
 8001846:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001848:	f107 0310 	add.w	r3, r7, #16
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001854:	463b      	mov	r3, r7
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	605a      	str	r2, [r3, #4]
 800185c:	609a      	str	r2, [r3, #8]
 800185e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001860:	4b35      	ldr	r3, [pc, #212]	; (8001938 <MX_TIM2_Init+0x114>)
 8001862:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001866:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8001868:	4b33      	ldr	r3, [pc, #204]	; (8001938 <MX_TIM2_Init+0x114>)
 800186a:	224f      	movs	r2, #79	; 0x4f
 800186c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800186e:	4b32      	ldr	r3, [pc, #200]	; (8001938 <MX_TIM2_Init+0x114>)
 8001870:	2200      	movs	r2, #0
 8001872:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001874:	4b30      	ldr	r3, [pc, #192]	; (8001938 <MX_TIM2_Init+0x114>)
 8001876:	f04f 32ff 	mov.w	r2, #4294967295
 800187a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800187c:	4b2e      	ldr	r3, [pc, #184]	; (8001938 <MX_TIM2_Init+0x114>)
 800187e:	2200      	movs	r2, #0
 8001880:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001882:	4b2d      	ldr	r3, [pc, #180]	; (8001938 <MX_TIM2_Init+0x114>)
 8001884:	2200      	movs	r2, #0
 8001886:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001888:	482b      	ldr	r0, [pc, #172]	; (8001938 <MX_TIM2_Init+0x114>)
 800188a:	f003 f835 	bl	80048f8 <HAL_TIM_Base_Init>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001894:	f7ff f882 	bl	800099c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001898:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800189c:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800189e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018a2:	4619      	mov	r1, r3
 80018a4:	4824      	ldr	r0, [pc, #144]	; (8001938 <MX_TIM2_Init+0x114>)
 80018a6:	f003 ffc9 	bl	800583c <HAL_TIM_ConfigClockSource>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80018b0:	f7ff f874 	bl	800099c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80018b4:	4820      	ldr	r0, [pc, #128]	; (8001938 <MX_TIM2_Init+0x114>)
 80018b6:	f003 fb59 	bl	8004f6c <HAL_TIM_IC_Init>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80018c0:	f7ff f86c 	bl	800099c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80018c4:	2304      	movs	r3, #4
 80018c6:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 80018c8:	2340      	movs	r3, #64	; 0x40
 80018ca:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80018cc:	2300      	movs	r3, #0
 80018ce:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 80018d0:	2300      	movs	r3, #0
 80018d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80018d4:	f107 031c 	add.w	r3, r7, #28
 80018d8:	4619      	mov	r1, r3
 80018da:	4817      	ldr	r0, [pc, #92]	; (8001938 <MX_TIM2_Init+0x114>)
 80018dc:	f004 f874 	bl	80059c8 <HAL_TIM_SlaveConfigSynchro>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 80018e6:	f7ff f859 	bl	800099c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ea:	2300      	movs	r3, #0
 80018ec:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ee:	2300      	movs	r3, #0
 80018f0:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018f2:	f107 0310 	add.w	r3, r7, #16
 80018f6:	4619      	mov	r1, r3
 80018f8:	480f      	ldr	r0, [pc, #60]	; (8001938 <MX_TIM2_Init+0x114>)
 80018fa:	f004 ffe9 	bl	80068d0 <HAL_TIMEx_MasterConfigSynchronization>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_TIM2_Init+0xe4>
  {
    Error_Handler();
 8001904:	f7ff f84a 	bl	800099c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001908:	2302      	movs	r3, #2
 800190a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800190c:	2301      	movs	r3, #1
 800190e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001910:	2300      	movs	r3, #0
 8001912:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001914:	2300      	movs	r3, #0
 8001916:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001918:	463b      	mov	r3, r7
 800191a:	2200      	movs	r2, #0
 800191c:	4619      	mov	r1, r3
 800191e:	4806      	ldr	r0, [pc, #24]	; (8001938 <MX_TIM2_Init+0x114>)
 8001920:	f003 fde7 	bl	80054f2 <HAL_TIM_IC_ConfigChannel>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <MX_TIM2_Init+0x10a>
  {
    Error_Handler();
 800192a:	f7ff f837 	bl	800099c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800192e:	bf00      	nop
 8001930:	3740      	adds	r7, #64	; 0x40
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20000784 	.word	0x20000784

0800193c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b08e      	sub	sp, #56	; 0x38
 8001940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001942:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001946:	2200      	movs	r2, #0
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	605a      	str	r2, [r3, #4]
 800194c:	609a      	str	r2, [r3, #8]
 800194e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001950:	f107 031c 	add.w	r3, r7, #28
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	605a      	str	r2, [r3, #4]
 800195a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800195c:	463b      	mov	r3, r7
 800195e:	2200      	movs	r2, #0
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	605a      	str	r2, [r3, #4]
 8001964:	609a      	str	r2, [r3, #8]
 8001966:	60da      	str	r2, [r3, #12]
 8001968:	611a      	str	r2, [r3, #16]
 800196a:	615a      	str	r2, [r3, #20]
 800196c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800196e:	4b2c      	ldr	r3, [pc, #176]	; (8001a20 <MX_TIM4_Init+0xe4>)
 8001970:	4a2c      	ldr	r2, [pc, #176]	; (8001a24 <MX_TIM4_Init+0xe8>)
 8001972:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001974:	4b2a      	ldr	r3, [pc, #168]	; (8001a20 <MX_TIM4_Init+0xe4>)
 8001976:	2200      	movs	r2, #0
 8001978:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800197a:	4b29      	ldr	r3, [pc, #164]	; (8001a20 <MX_TIM4_Init+0xe4>)
 800197c:	2200      	movs	r2, #0
 800197e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 199;
 8001980:	4b27      	ldr	r3, [pc, #156]	; (8001a20 <MX_TIM4_Init+0xe4>)
 8001982:	22c7      	movs	r2, #199	; 0xc7
 8001984:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001986:	4b26      	ldr	r3, [pc, #152]	; (8001a20 <MX_TIM4_Init+0xe4>)
 8001988:	2200      	movs	r2, #0
 800198a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800198c:	4b24      	ldr	r3, [pc, #144]	; (8001a20 <MX_TIM4_Init+0xe4>)
 800198e:	2200      	movs	r2, #0
 8001990:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001992:	4823      	ldr	r0, [pc, #140]	; (8001a20 <MX_TIM4_Init+0xe4>)
 8001994:	f002 ffb0 	bl	80048f8 <HAL_TIM_Base_Init>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800199e:	f7fe fffd 	bl	800099c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019a6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80019a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019ac:	4619      	mov	r1, r3
 80019ae:	481c      	ldr	r0, [pc, #112]	; (8001a20 <MX_TIM4_Init+0xe4>)
 80019b0:	f003 ff44 	bl	800583c <HAL_TIM_ConfigClockSource>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80019ba:	f7fe ffef 	bl	800099c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80019be:	4818      	ldr	r0, [pc, #96]	; (8001a20 <MX_TIM4_Init+0xe4>)
 80019c0:	f003 f85a 	bl	8004a78 <HAL_TIM_PWM_Init>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80019ca:	f7fe ffe7 	bl	800099c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019ce:	2300      	movs	r3, #0
 80019d0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019d2:	2300      	movs	r3, #0
 80019d4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80019d6:	f107 031c 	add.w	r3, r7, #28
 80019da:	4619      	mov	r1, r3
 80019dc:	4810      	ldr	r0, [pc, #64]	; (8001a20 <MX_TIM4_Init+0xe4>)
 80019de:	f004 ff77 	bl	80068d0 <HAL_TIMEx_MasterConfigSynchronization>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80019e8:	f7fe ffd8 	bl	800099c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019ec:	2360      	movs	r3, #96	; 0x60
 80019ee:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80019f0:	2300      	movs	r3, #0
 80019f2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019f4:	2300      	movs	r3, #0
 80019f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019f8:	2300      	movs	r3, #0
 80019fa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019fc:	463b      	mov	r3, r7
 80019fe:	2200      	movs	r2, #0
 8001a00:	4619      	mov	r1, r3
 8001a02:	4807      	ldr	r0, [pc, #28]	; (8001a20 <MX_TIM4_Init+0xe4>)
 8001a04:	f003 fe0a 	bl	800561c <HAL_TIM_PWM_ConfigChannel>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001a0e:	f7fe ffc5 	bl	800099c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001a12:	4803      	ldr	r0, [pc, #12]	; (8001a20 <MX_TIM4_Init+0xe4>)
 8001a14:	f000 f88a 	bl	8001b2c <HAL_TIM_MspPostInit>

}
 8001a18:	bf00      	nop
 8001a1a:	3738      	adds	r7, #56	; 0x38
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	20000738 	.word	0x20000738
 8001a24:	40000800 	.word	0x40000800

08001a28 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b08a      	sub	sp, #40	; 0x28
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a30:	f107 0314 	add.w	r3, r7, #20
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	605a      	str	r2, [r3, #4]
 8001a3a:	609a      	str	r2, [r3, #8]
 8001a3c:	60da      	str	r2, [r3, #12]
 8001a3e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a48:	d129      	bne.n	8001a9e <HAL_TIM_Base_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a4a:	4b34      	ldr	r3, [pc, #208]	; (8001b1c <HAL_TIM_Base_MspInit+0xf4>)
 8001a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a4e:	4a33      	ldr	r2, [pc, #204]	; (8001b1c <HAL_TIM_Base_MspInit+0xf4>)
 8001a50:	f043 0301 	orr.w	r3, r3, #1
 8001a54:	6593      	str	r3, [r2, #88]	; 0x58
 8001a56:	4b31      	ldr	r3, [pc, #196]	; (8001b1c <HAL_TIM_Base_MspInit+0xf4>)
 8001a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	613b      	str	r3, [r7, #16]
 8001a60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a62:	4b2e      	ldr	r3, [pc, #184]	; (8001b1c <HAL_TIM_Base_MspInit+0xf4>)
 8001a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a66:	4a2d      	ldr	r2, [pc, #180]	; (8001b1c <HAL_TIM_Base_MspInit+0xf4>)
 8001a68:	f043 0301 	orr.w	r3, r3, #1
 8001a6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a6e:	4b2b      	ldr	r3, [pc, #172]	; (8001b1c <HAL_TIM_Base_MspInit+0xf4>)
 8001a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a82:	2300      	movs	r3, #0
 8001a84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a86:	2300      	movs	r3, #0
 8001a88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a8e:	f107 0314 	add.w	r3, r7, #20
 8001a92:	4619      	mov	r1, r3
 8001a94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a98:	f000 fdb2 	bl	8002600 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001a9c:	e03a      	b.n	8001b14 <HAL_TIM_Base_MspInit+0xec>
  else if(tim_baseHandle->Instance==TIM4)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a1f      	ldr	r2, [pc, #124]	; (8001b20 <HAL_TIM_Base_MspInit+0xf8>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d135      	bne.n	8001b14 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001aa8:	4b1c      	ldr	r3, [pc, #112]	; (8001b1c <HAL_TIM_Base_MspInit+0xf4>)
 8001aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aac:	4a1b      	ldr	r2, [pc, #108]	; (8001b1c <HAL_TIM_Base_MspInit+0xf4>)
 8001aae:	f043 0304 	orr.w	r3, r3, #4
 8001ab2:	6593      	str	r3, [r2, #88]	; 0x58
 8001ab4:	4b19      	ldr	r3, [pc, #100]	; (8001b1c <HAL_TIM_Base_MspInit+0xf4>)
 8001ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab8:	f003 0304 	and.w	r3, r3, #4
 8001abc:	60bb      	str	r3, [r7, #8]
 8001abe:	68bb      	ldr	r3, [r7, #8]
    hdma_tim4_ch1.Instance = DMA1_Channel1;
 8001ac0:	4b18      	ldr	r3, [pc, #96]	; (8001b24 <HAL_TIM_Base_MspInit+0xfc>)
 8001ac2:	4a19      	ldr	r2, [pc, #100]	; (8001b28 <HAL_TIM_Base_MspInit+0x100>)
 8001ac4:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Request = DMA_REQUEST_6;
 8001ac6:	4b17      	ldr	r3, [pc, #92]	; (8001b24 <HAL_TIM_Base_MspInit+0xfc>)
 8001ac8:	2206      	movs	r2, #6
 8001aca:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001acc:	4b15      	ldr	r3, [pc, #84]	; (8001b24 <HAL_TIM_Base_MspInit+0xfc>)
 8001ace:	2210      	movs	r2, #16
 8001ad0:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ad2:	4b14      	ldr	r3, [pc, #80]	; (8001b24 <HAL_TIM_Base_MspInit+0xfc>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001ad8:	4b12      	ldr	r3, [pc, #72]	; (8001b24 <HAL_TIM_Base_MspInit+0xfc>)
 8001ada:	2280      	movs	r2, #128	; 0x80
 8001adc:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ade:	4b11      	ldr	r3, [pc, #68]	; (8001b24 <HAL_TIM_Base_MspInit+0xfc>)
 8001ae0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ae4:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ae6:	4b0f      	ldr	r3, [pc, #60]	; (8001b24 <HAL_TIM_Base_MspInit+0xfc>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_NORMAL;
 8001aec:	4b0d      	ldr	r3, [pc, #52]	; (8001b24 <HAL_TIM_Base_MspInit+0xfc>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001af2:	4b0c      	ldr	r3, [pc, #48]	; (8001b24 <HAL_TIM_Base_MspInit+0xfc>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 8001af8:	480a      	ldr	r0, [pc, #40]	; (8001b24 <HAL_TIM_Base_MspInit+0xfc>)
 8001afa:	f000 fb89 	bl	8002210 <HAL_DMA_Init>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <HAL_TIM_Base_MspInit+0xe0>
      Error_Handler();
 8001b04:	f7fe ff4a 	bl	800099c <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4a06      	ldr	r2, [pc, #24]	; (8001b24 <HAL_TIM_Base_MspInit+0xfc>)
 8001b0c:	625a      	str	r2, [r3, #36]	; 0x24
 8001b0e:	4a05      	ldr	r2, [pc, #20]	; (8001b24 <HAL_TIM_Base_MspInit+0xfc>)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001b14:	bf00      	nop
 8001b16:	3728      	adds	r7, #40	; 0x28
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	40000800 	.word	0x40000800
 8001b24:	200007d0 	.word	0x200007d0
 8001b28:	40020008 	.word	0x40020008

08001b2c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b088      	sub	sp, #32
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b34:	f107 030c 	add.w	r3, r7, #12
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	605a      	str	r2, [r3, #4]
 8001b3e:	609a      	str	r2, [r3, #8]
 8001b40:	60da      	str	r2, [r3, #12]
 8001b42:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a11      	ldr	r2, [pc, #68]	; (8001b90 <HAL_TIM_MspPostInit+0x64>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d11b      	bne.n	8001b86 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b4e:	4b11      	ldr	r3, [pc, #68]	; (8001b94 <HAL_TIM_MspPostInit+0x68>)
 8001b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b52:	4a10      	ldr	r2, [pc, #64]	; (8001b94 <HAL_TIM_MspPostInit+0x68>)
 8001b54:	f043 0302 	orr.w	r3, r3, #2
 8001b58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b5a:	4b0e      	ldr	r3, [pc, #56]	; (8001b94 <HAL_TIM_MspPostInit+0x68>)
 8001b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	60bb      	str	r3, [r7, #8]
 8001b64:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b66:	2340      	movs	r3, #64	; 0x40
 8001b68:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b72:	2300      	movs	r3, #0
 8001b74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001b76:	2302      	movs	r3, #2
 8001b78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b7a:	f107 030c 	add.w	r3, r7, #12
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4805      	ldr	r0, [pc, #20]	; (8001b98 <HAL_TIM_MspPostInit+0x6c>)
 8001b82:	f000 fd3d 	bl	8002600 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001b86:	bf00      	nop
 8001b88:	3720      	adds	r7, #32
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	40000800 	.word	0x40000800
 8001b94:	40021000 	.word	0x40021000
 8001b98:	48000400 	.word	0x48000400

08001b9c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ba0:	4b14      	ldr	r3, [pc, #80]	; (8001bf4 <MX_USART2_UART_Init+0x58>)
 8001ba2:	4a15      	ldr	r2, [pc, #84]	; (8001bf8 <MX_USART2_UART_Init+0x5c>)
 8001ba4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ba6:	4b13      	ldr	r3, [pc, #76]	; (8001bf4 <MX_USART2_UART_Init+0x58>)
 8001ba8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bae:	4b11      	ldr	r3, [pc, #68]	; (8001bf4 <MX_USART2_UART_Init+0x58>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bb4:	4b0f      	ldr	r3, [pc, #60]	; (8001bf4 <MX_USART2_UART_Init+0x58>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bba:	4b0e      	ldr	r3, [pc, #56]	; (8001bf4 <MX_USART2_UART_Init+0x58>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bc0:	4b0c      	ldr	r3, [pc, #48]	; (8001bf4 <MX_USART2_UART_Init+0x58>)
 8001bc2:	220c      	movs	r2, #12
 8001bc4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bc6:	4b0b      	ldr	r3, [pc, #44]	; (8001bf4 <MX_USART2_UART_Init+0x58>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bcc:	4b09      	ldr	r3, [pc, #36]	; (8001bf4 <MX_USART2_UART_Init+0x58>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bd2:	4b08      	ldr	r3, [pc, #32]	; (8001bf4 <MX_USART2_UART_Init+0x58>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bd8:	4b06      	ldr	r3, [pc, #24]	; (8001bf4 <MX_USART2_UART_Init+0x58>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bde:	4805      	ldr	r0, [pc, #20]	; (8001bf4 <MX_USART2_UART_Init+0x58>)
 8001be0:	f004 ff1c 	bl	8006a1c <HAL_UART_Init>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001bea:	f7fe fed7 	bl	800099c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	20000818 	.word	0x20000818
 8001bf8:	40004400 	.word	0x40004400

08001bfc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b0ac      	sub	sp, #176	; 0xb0
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c04:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	605a      	str	r2, [r3, #4]
 8001c0e:	609a      	str	r2, [r3, #8]
 8001c10:	60da      	str	r2, [r3, #12]
 8001c12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c14:	f107 0314 	add.w	r3, r7, #20
 8001c18:	2288      	movs	r2, #136	; 0x88
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f005 fbfb 	bl	8007418 <memset>
  if(uartHandle->Instance==USART2)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a21      	ldr	r2, [pc, #132]	; (8001cac <HAL_UART_MspInit+0xb0>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d13b      	bne.n	8001ca4 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001c30:	2300      	movs	r3, #0
 8001c32:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c34:	f107 0314 	add.w	r3, r7, #20
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f001 fceb 	bl	8003614 <HAL_RCCEx_PeriphCLKConfig>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c44:	f7fe feaa 	bl	800099c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c48:	4b19      	ldr	r3, [pc, #100]	; (8001cb0 <HAL_UART_MspInit+0xb4>)
 8001c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c4c:	4a18      	ldr	r2, [pc, #96]	; (8001cb0 <HAL_UART_MspInit+0xb4>)
 8001c4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c52:	6593      	str	r3, [r2, #88]	; 0x58
 8001c54:	4b16      	ldr	r3, [pc, #88]	; (8001cb0 <HAL_UART_MspInit+0xb4>)
 8001c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5c:	613b      	str	r3, [r7, #16]
 8001c5e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c60:	4b13      	ldr	r3, [pc, #76]	; (8001cb0 <HAL_UART_MspInit+0xb4>)
 8001c62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c64:	4a12      	ldr	r2, [pc, #72]	; (8001cb0 <HAL_UART_MspInit+0xb4>)
 8001c66:	f043 0301 	orr.w	r3, r3, #1
 8001c6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c6c:	4b10      	ldr	r3, [pc, #64]	; (8001cb0 <HAL_UART_MspInit+0xb4>)
 8001c6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c70:	f003 0301 	and.w	r3, r3, #1
 8001c74:	60fb      	str	r3, [r7, #12]
 8001c76:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c78:	230c      	movs	r3, #12
 8001c7a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c84:	2300      	movs	r3, #0
 8001c86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c90:	2307      	movs	r3, #7
 8001c92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c96:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ca0:	f000 fcae 	bl	8002600 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001ca4:	bf00      	nop
 8001ca6:	37b0      	adds	r7, #176	; 0xb0
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40004400 	.word	0x40004400
 8001cb0:	40021000 	.word	0x40021000

08001cb4 <set_byte>:

static uint8_t led_buffer[RESET_LEN+24*LED_N+1];

// Konwertowanie 8 bitowej liczby na 8 bajtow;

static void set_byte(uint32_t pos, uint8_t value){
 8001cb4:	b480      	push	{r7}
 8001cb6:	b085      	sub	sp, #20
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	70fb      	strb	r3, [r7, #3]
	int i;
	for(i=0; i<8;i++){
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	e016      	b.n	8001cf4 <set_byte+0x40>
		if(value & 0x80){
 8001cc6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	da06      	bge.n	8001cdc <set_byte+0x28>
			led_buffer[pos+i]=BIT_1_TIME;
 8001cce:	68fa      	ldr	r2, [r7, #12]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	4a0c      	ldr	r2, [pc, #48]	; (8001d08 <set_byte+0x54>)
 8001cd6:	2140      	movs	r1, #64	; 0x40
 8001cd8:	54d1      	strb	r1, [r2, r3]
 8001cda:	e005      	b.n	8001ce8 <set_byte+0x34>
		}else{
			led_buffer[pos+i]=BIT_0_TIME;
 8001cdc:	68fa      	ldr	r2, [r7, #12]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	4a09      	ldr	r2, [pc, #36]	; (8001d08 <set_byte+0x54>)
 8001ce4:	2120      	movs	r1, #32
 8001ce6:	54d1      	strb	r1, [r2, r3]
		}
		value<<=1;
 8001ce8:	78fb      	ldrb	r3, [r7, #3]
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	70fb      	strb	r3, [r7, #3]
	for(i=0; i<8;i++){
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	60fb      	str	r3, [r7, #12]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2b07      	cmp	r3, #7
 8001cf8:	dde5      	ble.n	8001cc6 <set_byte+0x12>
	}
}
 8001cfa:	bf00      	nop
 8001cfc:	bf00      	nop
 8001cfe:	3714      	adds	r7, #20
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	20000130 	.word	0x20000130

08001d0c <ws2811_init>:


// DEFINICJE FUNKCJI

void ws2811_init(void){
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
	int i;

	// Wysłanie resetu:
	for(i=0;i<RESET_LEN;i++){
 8001d12:	2300      	movs	r3, #0
 8001d14:	607b      	str	r3, [r7, #4]
 8001d16:	e007      	b.n	8001d28 <ws2811_init+0x1c>
		led_buffer[i]=0;
 8001d18:	4a13      	ldr	r2, [pc, #76]	; (8001d68 <ws2811_init+0x5c>)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	2200      	movs	r2, #0
 8001d20:	701a      	strb	r2, [r3, #0]
	for(i=0;i<RESET_LEN;i++){
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	3301      	adds	r3, #1
 8001d26:	607b      	str	r3, [r7, #4]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2b63      	cmp	r3, #99	; 0x63
 8001d2c:	ddf4      	ble.n	8001d18 <ws2811_init+0xc>
	}

	// Zgaszenie wszystkich diod:
	for(i=0; i<24*LED_N;i++){
 8001d2e:	2300      	movs	r3, #0
 8001d30:	607b      	str	r3, [r7, #4]
 8001d32:	e007      	b.n	8001d44 <ws2811_init+0x38>
		led_buffer[RESET_LEN+i]=BIT_0_TIME;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	3364      	adds	r3, #100	; 0x64
 8001d38:	4a0b      	ldr	r2, [pc, #44]	; (8001d68 <ws2811_init+0x5c>)
 8001d3a:	2120      	movs	r1, #32
 8001d3c:	54d1      	strb	r1, [r2, r3]
	for(i=0; i<24*LED_N;i++){
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	3301      	adds	r3, #1
 8001d42:	607b      	str	r3, [r7, #4]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f5b3 6fae 	cmp.w	r3, #1392	; 0x570
 8001d4a:	dbf3      	blt.n	8001d34 <ws2811_init+0x28>
	}

	// Wypełnienie na koniec:

	led_buffer[RESET_LEN+24*LED_N]=100;
 8001d4c:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <ws2811_init+0x5c>)
 8001d4e:	2264      	movs	r2, #100	; 0x64
 8001d50:	f883 25d4 	strb.w	r2, [r3, #1492]	; 0x5d4

	// Wlączenie timera:
	HAL_TIM_Base_Start(&htim4);
 8001d54:	4805      	ldr	r0, [pc, #20]	; (8001d6c <ws2811_init+0x60>)
 8001d56:	f002 fe27 	bl	80049a8 <HAL_TIM_Base_Start>
	// Zacznij odswiezanie:
	ws2811_update();
 8001d5a:	f000 f863 	bl	8001e24 <ws2811_update>

}
 8001d5e:	bf00      	nop
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	20000130 	.word	0x20000130
 8001d6c:	20000738 	.word	0x20000738

08001d70 <ws2811_hourReset>:

void ws2811_hourReset(void){
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
	int i;

		// Wysłanie resetu:
		for(i=0;i<RESET_LEN;i++){
 8001d76:	2300      	movs	r3, #0
 8001d78:	607b      	str	r3, [r7, #4]
 8001d7a:	e007      	b.n	8001d8c <ws2811_hourReset+0x1c>
			led_buffer[i]=0;
 8001d7c:	4a11      	ldr	r2, [pc, #68]	; (8001dc4 <ws2811_hourReset+0x54>)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4413      	add	r3, r2
 8001d82:	2200      	movs	r2, #0
 8001d84:	701a      	strb	r2, [r3, #0]
		for(i=0;i<RESET_LEN;i++){
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	3301      	adds	r3, #1
 8001d8a:	607b      	str	r3, [r7, #4]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2b63      	cmp	r3, #99	; 0x63
 8001d90:	ddf4      	ble.n	8001d7c <ws2811_hourReset+0xc>
		}

		// Zgaszenie wszystkich diod:
		for(i=0; i<24*LED_N_HOURS_FOR_SECTOR;i++){
 8001d92:	2300      	movs	r3, #0
 8001d94:	607b      	str	r3, [r7, #4]
 8001d96:	e007      	b.n	8001da8 <ws2811_hourReset+0x38>
			led_buffer[RESET_LEN+i]=BIT_0_TIME;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	3364      	adds	r3, #100	; 0x64
 8001d9c:	4a09      	ldr	r2, [pc, #36]	; (8001dc4 <ws2811_hourReset+0x54>)
 8001d9e:	2120      	movs	r1, #32
 8001da0:	54d1      	strb	r1, [r2, r3]
		for(i=0; i<24*LED_N_HOURS_FOR_SECTOR;i++){
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	3301      	adds	r3, #1
 8001da6:	607b      	str	r3, [r7, #4]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f5b3 7f28 	cmp.w	r3, #672	; 0x2a0
 8001dae:	dbf3      	blt.n	8001d98 <ws2811_hourReset+0x28>
		}

		// Wypełnienie na koniec:

		led_buffer[RESET_LEN+24*LED_N]=100;
 8001db0:	4b04      	ldr	r3, [pc, #16]	; (8001dc4 <ws2811_hourReset+0x54>)
 8001db2:	2264      	movs	r2, #100	; 0x64
 8001db4:	f883 25d4 	strb.w	r2, [r3, #1492]	; 0x5d4

		// Zacznij odswiezanie:
		ws2811_update();
 8001db8:	f000 f834 	bl	8001e24 <ws2811_update>
}
 8001dbc:	bf00      	nop
 8001dbe:	3708      	adds	r7, #8
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	20000130 	.word	0x20000130

08001dc8 <ws2811_minuteReset>:

void ws2811_minuteReset(void){
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
	int i;

		// Wysłanie resetu:
		for(i=0;i<RESET_LEN;i++){
 8001dce:	2300      	movs	r3, #0
 8001dd0:	607b      	str	r3, [r7, #4]
 8001dd2:	e007      	b.n	8001de4 <ws2811_minuteReset+0x1c>
			led_buffer[i]=0;
 8001dd4:	4a12      	ldr	r2, [pc, #72]	; (8001e20 <ws2811_minuteReset+0x58>)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4413      	add	r3, r2
 8001dda:	2200      	movs	r2, #0
 8001ddc:	701a      	strb	r2, [r3, #0]
		for(i=0;i<RESET_LEN;i++){
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	3301      	adds	r3, #1
 8001de2:	607b      	str	r3, [r7, #4]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2b63      	cmp	r3, #99	; 0x63
 8001de8:	ddf4      	ble.n	8001dd4 <ws2811_minuteReset+0xc>
		}

		// Zgaszenie wszystkich diod:
		for(i=0; i<24*LED_N_MINUTES_FOR_SECTOR;i++){
 8001dea:	2300      	movs	r3, #0
 8001dec:	607b      	str	r3, [r7, #4]
 8001dee:	e008      	b.n	8001e02 <ws2811_minuteReset+0x3a>
			led_buffer[RESET_LEN+24*LED_N_HOURS_FOR_SECTOR+24*2+i]=BIT_0_TIME;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8001df6:	4a0a      	ldr	r2, [pc, #40]	; (8001e20 <ws2811_minuteReset+0x58>)
 8001df8:	2120      	movs	r1, #32
 8001dfa:	54d1      	strb	r1, [r2, r3]
		for(i=0; i<24*LED_N_MINUTES_FOR_SECTOR;i++){
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	3301      	adds	r3, #1
 8001e00:	607b      	str	r3, [r7, #4]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f5b3 7f28 	cmp.w	r3, #672	; 0x2a0
 8001e08:	dbf2      	blt.n	8001df0 <ws2811_minuteReset+0x28>
		}

		// Wypełnienie na koniec:

		led_buffer[RESET_LEN+24*LED_N]=100;
 8001e0a:	4b05      	ldr	r3, [pc, #20]	; (8001e20 <ws2811_minuteReset+0x58>)
 8001e0c:	2264      	movs	r2, #100	; 0x64
 8001e0e:	f883 25d4 	strb.w	r2, [r3, #1492]	; 0x5d4

		// Zacznij odswiezanie:
		ws2811_update();
 8001e12:	f000 f807 	bl	8001e24 <ws2811_update>
}
 8001e16:	bf00      	nop
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	20000130 	.word	0x20000130

08001e24 <ws2811_update>:

void ws2811_update(void){
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start_DMA(&htim4, TIM_CHANNEL_1, (uint32_t*)led_buffer, sizeof(led_buffer));
 8001e28:	f240 53d5 	movw	r3, #1493	; 0x5d5
 8001e2c:	4a03      	ldr	r2, [pc, #12]	; (8001e3c <ws2811_update+0x18>)
 8001e2e:	2100      	movs	r1, #0
 8001e30:	4803      	ldr	r0, [pc, #12]	; (8001e40 <ws2811_update+0x1c>)
 8001e32:	f002 fe83 	bl	8004b3c <HAL_TIM_PWM_Start_DMA>
}
 8001e36:	bf00      	nop
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	20000130 	.word	0x20000130
 8001e40:	20000738 	.word	0x20000738

08001e44 <ws2811_set_color>:

	}
}


void ws2811_set_color(uint32_t led, uint8_t red, uint8_t green, uint8_t blue){
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	4608      	mov	r0, r1
 8001e4e:	4611      	mov	r1, r2
 8001e50:	461a      	mov	r2, r3
 8001e52:	4603      	mov	r3, r0
 8001e54:	70fb      	strb	r3, [r7, #3]
 8001e56:	460b      	mov	r3, r1
 8001e58:	70bb      	strb	r3, [r7, #2]
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	707b      	strb	r3, [r7, #1]
	if(led<LED_N){
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2b39      	cmp	r3, #57	; 0x39
 8001e62:	d820      	bhi.n	8001ea6 <ws2811_set_color+0x62>
		set_byte(RESET_LEN+24*led, green);
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	4613      	mov	r3, r2
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	4413      	add	r3, r2
 8001e6c:	00db      	lsls	r3, r3, #3
 8001e6e:	3364      	adds	r3, #100	; 0x64
 8001e70:	78ba      	ldrb	r2, [r7, #2]
 8001e72:	4611      	mov	r1, r2
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff ff1d 	bl	8001cb4 <set_byte>
		set_byte(RESET_LEN+24*led+8, red);
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	4413      	add	r3, r2
 8001e82:	00db      	lsls	r3, r3, #3
 8001e84:	336c      	adds	r3, #108	; 0x6c
 8001e86:	78fa      	ldrb	r2, [r7, #3]
 8001e88:	4611      	mov	r1, r2
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7ff ff12 	bl	8001cb4 <set_byte>
		set_byte(RESET_LEN+24*led+16, blue);
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	4613      	mov	r3, r2
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	4413      	add	r3, r2
 8001e98:	00db      	lsls	r3, r3, #3
 8001e9a:	3374      	adds	r3, #116	; 0x74
 8001e9c:	787a      	ldrb	r2, [r7, #1]
 8001e9e:	4611      	mov	r1, r2
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff ff07 	bl	8001cb4 <set_byte>
	}
}
 8001ea6:	bf00      	nop
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
	...

08001eb0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001eb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ee8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001eb4:	f7ff fc84 	bl	80017c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001eb8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001eba:	e003      	b.n	8001ec4 <LoopCopyDataInit>

08001ebc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001ebc:	4b0b      	ldr	r3, [pc, #44]	; (8001eec <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001ebe:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001ec0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001ec2:	3104      	adds	r1, #4

08001ec4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001ec4:	480a      	ldr	r0, [pc, #40]	; (8001ef0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001ec6:	4b0b      	ldr	r3, [pc, #44]	; (8001ef4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001ec8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001eca:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001ecc:	d3f6      	bcc.n	8001ebc <CopyDataInit>
	ldr	r2, =_sbss
 8001ece:	4a0a      	ldr	r2, [pc, #40]	; (8001ef8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001ed0:	e002      	b.n	8001ed8 <LoopFillZerobss>

08001ed2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001ed2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001ed4:	f842 3b04 	str.w	r3, [r2], #4

08001ed8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001ed8:	4b08      	ldr	r3, [pc, #32]	; (8001efc <LoopForever+0x16>)
	cmp	r2, r3
 8001eda:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001edc:	d3f9      	bcc.n	8001ed2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ede:	f005 fa77 	bl	80073d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ee2:	f7fe fca9 	bl	8000838 <main>

08001ee6 <LoopForever>:

LoopForever:
    b LoopForever
 8001ee6:	e7fe      	b.n	8001ee6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ee8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001eec:	080083e8 	.word	0x080083e8
	ldr	r0, =_sdata
 8001ef0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001ef4:	200000f8 	.word	0x200000f8
	ldr	r2, =_sbss
 8001ef8:	200000f8 	.word	0x200000f8
	ldr	r3, = _ebss
 8001efc:	200008b0 	.word	0x200008b0

08001f00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f00:	e7fe      	b.n	8001f00 <ADC1_2_IRQHandler>

08001f02 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b082      	sub	sp, #8
 8001f06:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f0c:	2003      	movs	r0, #3
 8001f0e:	f000 f93d 	bl	800218c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f12:	2000      	movs	r0, #0
 8001f14:	f000 f80e 	bl	8001f34 <HAL_InitTick>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d002      	beq.n	8001f24 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	71fb      	strb	r3, [r7, #7]
 8001f22:	e001      	b.n	8001f28 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f24:	f7ff fb3c 	bl	80015a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f28:	79fb      	ldrb	r3, [r7, #7]
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
	...

08001f34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001f40:	4b17      	ldr	r3, [pc, #92]	; (8001fa0 <HAL_InitTick+0x6c>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d023      	beq.n	8001f90 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001f48:	4b16      	ldr	r3, [pc, #88]	; (8001fa4 <HAL_InitTick+0x70>)
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	4b14      	ldr	r3, [pc, #80]	; (8001fa0 <HAL_InitTick+0x6c>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	4619      	mov	r1, r3
 8001f52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f56:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f000 f949 	bl	80021f6 <HAL_SYSTICK_Config>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d10f      	bne.n	8001f8a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2b0f      	cmp	r3, #15
 8001f6e:	d809      	bhi.n	8001f84 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f70:	2200      	movs	r2, #0
 8001f72:	6879      	ldr	r1, [r7, #4]
 8001f74:	f04f 30ff 	mov.w	r0, #4294967295
 8001f78:	f000 f913 	bl	80021a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f7c:	4a0a      	ldr	r2, [pc, #40]	; (8001fa8 <HAL_InitTick+0x74>)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6013      	str	r3, [r2, #0]
 8001f82:	e007      	b.n	8001f94 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	73fb      	strb	r3, [r7, #15]
 8001f88:	e004      	b.n	8001f94 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	73fb      	strb	r3, [r7, #15]
 8001f8e:	e001      	b.n	8001f94 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3710      	adds	r7, #16
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	20000090 	.word	0x20000090
 8001fa4:	20000088 	.word	0x20000088
 8001fa8:	2000008c 	.word	0x2000008c

08001fac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001fb0:	4b06      	ldr	r3, [pc, #24]	; (8001fcc <HAL_IncTick+0x20>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	4b06      	ldr	r3, [pc, #24]	; (8001fd0 <HAL_IncTick+0x24>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4413      	add	r3, r2
 8001fbc:	4a04      	ldr	r2, [pc, #16]	; (8001fd0 <HAL_IncTick+0x24>)
 8001fbe:	6013      	str	r3, [r2, #0]
}
 8001fc0:	bf00      	nop
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	20000090 	.word	0x20000090
 8001fd0:	2000089c 	.word	0x2000089c

08001fd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  return uwTick;
 8001fd8:	4b03      	ldr	r3, [pc, #12]	; (8001fe8 <HAL_GetTick+0x14>)
 8001fda:	681b      	ldr	r3, [r3, #0]
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	2000089c 	.word	0x2000089c

08001fec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f003 0307 	and.w	r3, r3, #7
 8001ffa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ffc:	4b0c      	ldr	r3, [pc, #48]	; (8002030 <__NVIC_SetPriorityGrouping+0x44>)
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002002:	68ba      	ldr	r2, [r7, #8]
 8002004:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002008:	4013      	ands	r3, r2
 800200a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002014:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002018:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800201c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800201e:	4a04      	ldr	r2, [pc, #16]	; (8002030 <__NVIC_SetPriorityGrouping+0x44>)
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	60d3      	str	r3, [r2, #12]
}
 8002024:	bf00      	nop
 8002026:	3714      	adds	r7, #20
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr
 8002030:	e000ed00 	.word	0xe000ed00

08002034 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002038:	4b04      	ldr	r3, [pc, #16]	; (800204c <__NVIC_GetPriorityGrouping+0x18>)
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	0a1b      	lsrs	r3, r3, #8
 800203e:	f003 0307 	and.w	r3, r3, #7
}
 8002042:	4618      	mov	r0, r3
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	e000ed00 	.word	0xe000ed00

08002050 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	4603      	mov	r3, r0
 8002058:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800205a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205e:	2b00      	cmp	r3, #0
 8002060:	db0b      	blt.n	800207a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002062:	79fb      	ldrb	r3, [r7, #7]
 8002064:	f003 021f 	and.w	r2, r3, #31
 8002068:	4907      	ldr	r1, [pc, #28]	; (8002088 <__NVIC_EnableIRQ+0x38>)
 800206a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800206e:	095b      	lsrs	r3, r3, #5
 8002070:	2001      	movs	r0, #1
 8002072:	fa00 f202 	lsl.w	r2, r0, r2
 8002076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800207a:	bf00      	nop
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	e000e100 	.word	0xe000e100

0800208c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	4603      	mov	r3, r0
 8002094:	6039      	str	r1, [r7, #0]
 8002096:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209c:	2b00      	cmp	r3, #0
 800209e:	db0a      	blt.n	80020b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	b2da      	uxtb	r2, r3
 80020a4:	490c      	ldr	r1, [pc, #48]	; (80020d8 <__NVIC_SetPriority+0x4c>)
 80020a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020aa:	0112      	lsls	r2, r2, #4
 80020ac:	b2d2      	uxtb	r2, r2
 80020ae:	440b      	add	r3, r1
 80020b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020b4:	e00a      	b.n	80020cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	b2da      	uxtb	r2, r3
 80020ba:	4908      	ldr	r1, [pc, #32]	; (80020dc <__NVIC_SetPriority+0x50>)
 80020bc:	79fb      	ldrb	r3, [r7, #7]
 80020be:	f003 030f 	and.w	r3, r3, #15
 80020c2:	3b04      	subs	r3, #4
 80020c4:	0112      	lsls	r2, r2, #4
 80020c6:	b2d2      	uxtb	r2, r2
 80020c8:	440b      	add	r3, r1
 80020ca:	761a      	strb	r2, [r3, #24]
}
 80020cc:	bf00      	nop
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr
 80020d8:	e000e100 	.word	0xe000e100
 80020dc:	e000ed00 	.word	0xe000ed00

080020e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b089      	sub	sp, #36	; 0x24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f003 0307 	and.w	r3, r3, #7
 80020f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	f1c3 0307 	rsb	r3, r3, #7
 80020fa:	2b04      	cmp	r3, #4
 80020fc:	bf28      	it	cs
 80020fe:	2304      	movcs	r3, #4
 8002100:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	3304      	adds	r3, #4
 8002106:	2b06      	cmp	r3, #6
 8002108:	d902      	bls.n	8002110 <NVIC_EncodePriority+0x30>
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	3b03      	subs	r3, #3
 800210e:	e000      	b.n	8002112 <NVIC_EncodePriority+0x32>
 8002110:	2300      	movs	r3, #0
 8002112:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002114:	f04f 32ff 	mov.w	r2, #4294967295
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	fa02 f303 	lsl.w	r3, r2, r3
 800211e:	43da      	mvns	r2, r3
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	401a      	ands	r2, r3
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002128:	f04f 31ff 	mov.w	r1, #4294967295
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	fa01 f303 	lsl.w	r3, r1, r3
 8002132:	43d9      	mvns	r1, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002138:	4313      	orrs	r3, r2
         );
}
 800213a:	4618      	mov	r0, r3
 800213c:	3724      	adds	r7, #36	; 0x24
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
	...

08002148 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	3b01      	subs	r3, #1
 8002154:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002158:	d301      	bcc.n	800215e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800215a:	2301      	movs	r3, #1
 800215c:	e00f      	b.n	800217e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800215e:	4a0a      	ldr	r2, [pc, #40]	; (8002188 <SysTick_Config+0x40>)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	3b01      	subs	r3, #1
 8002164:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002166:	210f      	movs	r1, #15
 8002168:	f04f 30ff 	mov.w	r0, #4294967295
 800216c:	f7ff ff8e 	bl	800208c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002170:	4b05      	ldr	r3, [pc, #20]	; (8002188 <SysTick_Config+0x40>)
 8002172:	2200      	movs	r2, #0
 8002174:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002176:	4b04      	ldr	r3, [pc, #16]	; (8002188 <SysTick_Config+0x40>)
 8002178:	2207      	movs	r2, #7
 800217a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	e000e010 	.word	0xe000e010

0800218c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f7ff ff29 	bl	8001fec <__NVIC_SetPriorityGrouping>
}
 800219a:	bf00      	nop
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b086      	sub	sp, #24
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	4603      	mov	r3, r0
 80021aa:	60b9      	str	r1, [r7, #8]
 80021ac:	607a      	str	r2, [r7, #4]
 80021ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80021b0:	2300      	movs	r3, #0
 80021b2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80021b4:	f7ff ff3e 	bl	8002034 <__NVIC_GetPriorityGrouping>
 80021b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	68b9      	ldr	r1, [r7, #8]
 80021be:	6978      	ldr	r0, [r7, #20]
 80021c0:	f7ff ff8e 	bl	80020e0 <NVIC_EncodePriority>
 80021c4:	4602      	mov	r2, r0
 80021c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ca:	4611      	mov	r1, r2
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7ff ff5d 	bl	800208c <__NVIC_SetPriority>
}
 80021d2:	bf00      	nop
 80021d4:	3718      	adds	r7, #24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b082      	sub	sp, #8
 80021de:	af00      	add	r7, sp, #0
 80021e0:	4603      	mov	r3, r0
 80021e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff ff31 	bl	8002050 <__NVIC_EnableIRQ>
}
 80021ee:	bf00      	nop
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b082      	sub	sp, #8
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f7ff ffa2 	bl	8002148 <SysTick_Config>
 8002204:	4603      	mov	r3, r0
}
 8002206:	4618      	mov	r0, r3
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
	...

08002210 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002210:	b480      	push	{r7}
 8002212:	b085      	sub	sp, #20
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d101      	bne.n	8002222 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e098      	b.n	8002354 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	461a      	mov	r2, r3
 8002228:	4b4d      	ldr	r3, [pc, #308]	; (8002360 <HAL_DMA_Init+0x150>)
 800222a:	429a      	cmp	r2, r3
 800222c:	d80f      	bhi.n	800224e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	461a      	mov	r2, r3
 8002234:	4b4b      	ldr	r3, [pc, #300]	; (8002364 <HAL_DMA_Init+0x154>)
 8002236:	4413      	add	r3, r2
 8002238:	4a4b      	ldr	r2, [pc, #300]	; (8002368 <HAL_DMA_Init+0x158>)
 800223a:	fba2 2303 	umull	r2, r3, r2, r3
 800223e:	091b      	lsrs	r3, r3, #4
 8002240:	009a      	lsls	r2, r3, #2
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a48      	ldr	r2, [pc, #288]	; (800236c <HAL_DMA_Init+0x15c>)
 800224a:	641a      	str	r2, [r3, #64]	; 0x40
 800224c:	e00e      	b.n	800226c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	461a      	mov	r2, r3
 8002254:	4b46      	ldr	r3, [pc, #280]	; (8002370 <HAL_DMA_Init+0x160>)
 8002256:	4413      	add	r3, r2
 8002258:	4a43      	ldr	r2, [pc, #268]	; (8002368 <HAL_DMA_Init+0x158>)
 800225a:	fba2 2303 	umull	r2, r3, r2, r3
 800225e:	091b      	lsrs	r3, r3, #4
 8002260:	009a      	lsls	r2, r3, #2
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a42      	ldr	r2, [pc, #264]	; (8002374 <HAL_DMA_Init+0x164>)
 800226a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2202      	movs	r2, #2
 8002270:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002286:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002290:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800229c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	699b      	ldr	r3, [r3, #24]
 80022a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a1b      	ldr	r3, [r3, #32]
 80022ae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80022b0:	68fa      	ldr	r2, [r7, #12]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68fa      	ldr	r2, [r7, #12]
 80022bc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80022c6:	d039      	beq.n	800233c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022cc:	4a27      	ldr	r2, [pc, #156]	; (800236c <HAL_DMA_Init+0x15c>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d11a      	bne.n	8002308 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80022d2:	4b29      	ldr	r3, [pc, #164]	; (8002378 <HAL_DMA_Init+0x168>)
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022da:	f003 031c 	and.w	r3, r3, #28
 80022de:	210f      	movs	r1, #15
 80022e0:	fa01 f303 	lsl.w	r3, r1, r3
 80022e4:	43db      	mvns	r3, r3
 80022e6:	4924      	ldr	r1, [pc, #144]	; (8002378 <HAL_DMA_Init+0x168>)
 80022e8:	4013      	ands	r3, r2
 80022ea:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80022ec:	4b22      	ldr	r3, [pc, #136]	; (8002378 <HAL_DMA_Init+0x168>)
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6859      	ldr	r1, [r3, #4]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f8:	f003 031c 	and.w	r3, r3, #28
 80022fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002300:	491d      	ldr	r1, [pc, #116]	; (8002378 <HAL_DMA_Init+0x168>)
 8002302:	4313      	orrs	r3, r2
 8002304:	600b      	str	r3, [r1, #0]
 8002306:	e019      	b.n	800233c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002308:	4b1c      	ldr	r3, [pc, #112]	; (800237c <HAL_DMA_Init+0x16c>)
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002310:	f003 031c 	and.w	r3, r3, #28
 8002314:	210f      	movs	r1, #15
 8002316:	fa01 f303 	lsl.w	r3, r1, r3
 800231a:	43db      	mvns	r3, r3
 800231c:	4917      	ldr	r1, [pc, #92]	; (800237c <HAL_DMA_Init+0x16c>)
 800231e:	4013      	ands	r3, r2
 8002320:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002322:	4b16      	ldr	r3, [pc, #88]	; (800237c <HAL_DMA_Init+0x16c>)
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6859      	ldr	r1, [r3, #4]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232e:	f003 031c 	and.w	r3, r3, #28
 8002332:	fa01 f303 	lsl.w	r3, r1, r3
 8002336:	4911      	ldr	r1, [pc, #68]	; (800237c <HAL_DMA_Init+0x16c>)
 8002338:	4313      	orrs	r3, r2
 800233a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2201      	movs	r2, #1
 8002346:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002352:	2300      	movs	r3, #0
}
 8002354:	4618      	mov	r0, r3
 8002356:	3714      	adds	r7, #20
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	40020407 	.word	0x40020407
 8002364:	bffdfff8 	.word	0xbffdfff8
 8002368:	cccccccd 	.word	0xcccccccd
 800236c:	40020000 	.word	0x40020000
 8002370:	bffdfbf8 	.word	0xbffdfbf8
 8002374:	40020400 	.word	0x40020400
 8002378:	400200a8 	.word	0x400200a8
 800237c:	400204a8 	.word	0x400204a8

08002380 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	607a      	str	r2, [r7, #4]
 800238c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800238e:	2300      	movs	r3, #0
 8002390:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002398:	2b01      	cmp	r3, #1
 800239a:	d101      	bne.n	80023a0 <HAL_DMA_Start_IT+0x20>
 800239c:	2302      	movs	r3, #2
 800239e:	e04b      	b.n	8002438 <HAL_DMA_Start_IT+0xb8>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d13a      	bne.n	800242a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2202      	movs	r2, #2
 80023b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2200      	movs	r2, #0
 80023c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f022 0201 	bic.w	r2, r2, #1
 80023d0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	68b9      	ldr	r1, [r7, #8]
 80023d8:	68f8      	ldr	r0, [r7, #12]
 80023da:	f000 f8e0 	bl	800259e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d008      	beq.n	80023f8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f042 020e 	orr.w	r2, r2, #14
 80023f4:	601a      	str	r2, [r3, #0]
 80023f6:	e00f      	b.n	8002418 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f022 0204 	bic.w	r2, r2, #4
 8002406:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f042 020a 	orr.w	r2, r2, #10
 8002416:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f042 0201 	orr.w	r2, r2, #1
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	e005      	b.n	8002436 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002432:	2302      	movs	r3, #2
 8002434:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002436:	7dfb      	ldrb	r3, [r7, #23]
}
 8002438:	4618      	mov	r0, r3
 800243a:	3718      	adds	r7, #24
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245c:	f003 031c 	and.w	r3, r3, #28
 8002460:	2204      	movs	r2, #4
 8002462:	409a      	lsls	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	4013      	ands	r3, r2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d026      	beq.n	80024ba <HAL_DMA_IRQHandler+0x7a>
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	f003 0304 	and.w	r3, r3, #4
 8002472:	2b00      	cmp	r3, #0
 8002474:	d021      	beq.n	80024ba <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0320 	and.w	r3, r3, #32
 8002480:	2b00      	cmp	r3, #0
 8002482:	d107      	bne.n	8002494 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f022 0204 	bic.w	r2, r2, #4
 8002492:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002498:	f003 021c 	and.w	r2, r3, #28
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a0:	2104      	movs	r1, #4
 80024a2:	fa01 f202 	lsl.w	r2, r1, r2
 80024a6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d071      	beq.n	8002594 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80024b8:	e06c      	b.n	8002594 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024be:	f003 031c 	and.w	r3, r3, #28
 80024c2:	2202      	movs	r2, #2
 80024c4:	409a      	lsls	r2, r3
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	4013      	ands	r3, r2
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d02e      	beq.n	800252c <HAL_DMA_IRQHandler+0xec>
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	f003 0302 	and.w	r3, r3, #2
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d029      	beq.n	800252c <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0320 	and.w	r3, r3, #32
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d10b      	bne.n	80024fe <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f022 020a 	bic.w	r2, r2, #10
 80024f4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2201      	movs	r2, #1
 80024fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002502:	f003 021c 	and.w	r2, r3, #28
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250a:	2102      	movs	r1, #2
 800250c:	fa01 f202 	lsl.w	r2, r1, r2
 8002510:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800251e:	2b00      	cmp	r3, #0
 8002520:	d038      	beq.n	8002594 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800252a:	e033      	b.n	8002594 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002530:	f003 031c 	and.w	r3, r3, #28
 8002534:	2208      	movs	r2, #8
 8002536:	409a      	lsls	r2, r3
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	4013      	ands	r3, r2
 800253c:	2b00      	cmp	r3, #0
 800253e:	d02a      	beq.n	8002596 <HAL_DMA_IRQHandler+0x156>
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	f003 0308 	and.w	r3, r3, #8
 8002546:	2b00      	cmp	r3, #0
 8002548:	d025      	beq.n	8002596 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f022 020e 	bic.w	r2, r2, #14
 8002558:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255e:	f003 021c 	and.w	r2, r3, #28
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002566:	2101      	movs	r1, #1
 8002568:	fa01 f202 	lsl.w	r2, r1, r2
 800256c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2201      	movs	r2, #1
 8002572:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002588:	2b00      	cmp	r3, #0
 800258a:	d004      	beq.n	8002596 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002594:	bf00      	nop
 8002596:	bf00      	nop
}
 8002598:	3710      	adds	r7, #16
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800259e:	b480      	push	{r7}
 80025a0:	b085      	sub	sp, #20
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	60f8      	str	r0, [r7, #12]
 80025a6:	60b9      	str	r1, [r7, #8]
 80025a8:	607a      	str	r2, [r7, #4]
 80025aa:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b0:	f003 021c 	and.w	r2, r3, #28
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b8:	2101      	movs	r1, #1
 80025ba:	fa01 f202 	lsl.w	r2, r1, r2
 80025be:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	683a      	ldr	r2, [r7, #0]
 80025c6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	2b10      	cmp	r3, #16
 80025ce:	d108      	bne.n	80025e2 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	68ba      	ldr	r2, [r7, #8]
 80025de:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80025e0:	e007      	b.n	80025f2 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68ba      	ldr	r2, [r7, #8]
 80025e8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	60da      	str	r2, [r3, #12]
}
 80025f2:	bf00      	nop
 80025f4:	3714      	adds	r7, #20
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
	...

08002600 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002600:	b480      	push	{r7}
 8002602:	b087      	sub	sp, #28
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800260a:	2300      	movs	r3, #0
 800260c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800260e:	e17f      	b.n	8002910 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	2101      	movs	r1, #1
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	fa01 f303 	lsl.w	r3, r1, r3
 800261c:	4013      	ands	r3, r2
 800261e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2b00      	cmp	r3, #0
 8002624:	f000 8171 	beq.w	800290a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	2b01      	cmp	r3, #1
 800262e:	d00b      	beq.n	8002648 <HAL_GPIO_Init+0x48>
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	2b02      	cmp	r3, #2
 8002636:	d007      	beq.n	8002648 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800263c:	2b11      	cmp	r3, #17
 800263e:	d003      	beq.n	8002648 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	2b12      	cmp	r3, #18
 8002646:	d130      	bne.n	80026aa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	2203      	movs	r2, #3
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	43db      	mvns	r3, r3
 800265a:	693a      	ldr	r2, [r7, #16]
 800265c:	4013      	ands	r3, r2
 800265e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	68da      	ldr	r2, [r3, #12]
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	693a      	ldr	r2, [r7, #16]
 800266e:	4313      	orrs	r3, r2
 8002670:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	693a      	ldr	r2, [r7, #16]
 8002676:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800267e:	2201      	movs	r2, #1
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	fa02 f303 	lsl.w	r3, r2, r3
 8002686:	43db      	mvns	r3, r3
 8002688:	693a      	ldr	r2, [r7, #16]
 800268a:	4013      	ands	r3, r2
 800268c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	091b      	lsrs	r3, r3, #4
 8002694:	f003 0201 	and.w	r2, r3, #1
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	fa02 f303 	lsl.w	r3, r2, r3
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f003 0303 	and.w	r3, r3, #3
 80026b2:	2b03      	cmp	r3, #3
 80026b4:	d118      	bne.n	80026e8 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80026bc:	2201      	movs	r2, #1
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	43db      	mvns	r3, r3
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	4013      	ands	r3, r2
 80026ca:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	08db      	lsrs	r3, r3, #3
 80026d2:	f003 0201 	and.w	r2, r3, #1
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	693a      	ldr	r2, [r7, #16]
 80026de:	4313      	orrs	r3, r2
 80026e0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	2203      	movs	r2, #3
 80026f4:	fa02 f303 	lsl.w	r3, r2, r3
 80026f8:	43db      	mvns	r3, r3
 80026fa:	693a      	ldr	r2, [r7, #16]
 80026fc:	4013      	ands	r3, r2
 80026fe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	689a      	ldr	r2, [r3, #8]
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	693a      	ldr	r2, [r7, #16]
 800270e:	4313      	orrs	r3, r2
 8002710:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	2b02      	cmp	r3, #2
 800271e:	d003      	beq.n	8002728 <HAL_GPIO_Init+0x128>
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	2b12      	cmp	r3, #18
 8002726:	d123      	bne.n	8002770 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	08da      	lsrs	r2, r3, #3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	3208      	adds	r2, #8
 8002730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002734:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	f003 0307 	and.w	r3, r3, #7
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	220f      	movs	r2, #15
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	43db      	mvns	r3, r3
 8002746:	693a      	ldr	r2, [r7, #16]
 8002748:	4013      	ands	r3, r2
 800274a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	691a      	ldr	r2, [r3, #16]
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	f003 0307 	and.w	r3, r3, #7
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	4313      	orrs	r3, r2
 8002760:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	08da      	lsrs	r2, r3, #3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	3208      	adds	r2, #8
 800276a:	6939      	ldr	r1, [r7, #16]
 800276c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	005b      	lsls	r3, r3, #1
 800277a:	2203      	movs	r2, #3
 800277c:	fa02 f303 	lsl.w	r3, r2, r3
 8002780:	43db      	mvns	r3, r3
 8002782:	693a      	ldr	r2, [r7, #16]
 8002784:	4013      	ands	r3, r2
 8002786:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f003 0203 	and.w	r2, r3, #3
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	005b      	lsls	r3, r3, #1
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	693a      	ldr	r2, [r7, #16]
 800279a:	4313      	orrs	r3, r2
 800279c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f000 80ac 	beq.w	800290a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027b2:	4b5f      	ldr	r3, [pc, #380]	; (8002930 <HAL_GPIO_Init+0x330>)
 80027b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027b6:	4a5e      	ldr	r2, [pc, #376]	; (8002930 <HAL_GPIO_Init+0x330>)
 80027b8:	f043 0301 	orr.w	r3, r3, #1
 80027bc:	6613      	str	r3, [r2, #96]	; 0x60
 80027be:	4b5c      	ldr	r3, [pc, #368]	; (8002930 <HAL_GPIO_Init+0x330>)
 80027c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	60bb      	str	r3, [r7, #8]
 80027c8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80027ca:	4a5a      	ldr	r2, [pc, #360]	; (8002934 <HAL_GPIO_Init+0x334>)
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	089b      	lsrs	r3, r3, #2
 80027d0:	3302      	adds	r3, #2
 80027d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	f003 0303 	and.w	r3, r3, #3
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	220f      	movs	r2, #15
 80027e2:	fa02 f303 	lsl.w	r3, r2, r3
 80027e6:	43db      	mvns	r3, r3
 80027e8:	693a      	ldr	r2, [r7, #16]
 80027ea:	4013      	ands	r3, r2
 80027ec:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80027f4:	d025      	beq.n	8002842 <HAL_GPIO_Init+0x242>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a4f      	ldr	r2, [pc, #316]	; (8002938 <HAL_GPIO_Init+0x338>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d01f      	beq.n	800283e <HAL_GPIO_Init+0x23e>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a4e      	ldr	r2, [pc, #312]	; (800293c <HAL_GPIO_Init+0x33c>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d019      	beq.n	800283a <HAL_GPIO_Init+0x23a>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a4d      	ldr	r2, [pc, #308]	; (8002940 <HAL_GPIO_Init+0x340>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d013      	beq.n	8002836 <HAL_GPIO_Init+0x236>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a4c      	ldr	r2, [pc, #304]	; (8002944 <HAL_GPIO_Init+0x344>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d00d      	beq.n	8002832 <HAL_GPIO_Init+0x232>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a4b      	ldr	r2, [pc, #300]	; (8002948 <HAL_GPIO_Init+0x348>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d007      	beq.n	800282e <HAL_GPIO_Init+0x22e>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a4a      	ldr	r2, [pc, #296]	; (800294c <HAL_GPIO_Init+0x34c>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d101      	bne.n	800282a <HAL_GPIO_Init+0x22a>
 8002826:	2306      	movs	r3, #6
 8002828:	e00c      	b.n	8002844 <HAL_GPIO_Init+0x244>
 800282a:	2307      	movs	r3, #7
 800282c:	e00a      	b.n	8002844 <HAL_GPIO_Init+0x244>
 800282e:	2305      	movs	r3, #5
 8002830:	e008      	b.n	8002844 <HAL_GPIO_Init+0x244>
 8002832:	2304      	movs	r3, #4
 8002834:	e006      	b.n	8002844 <HAL_GPIO_Init+0x244>
 8002836:	2303      	movs	r3, #3
 8002838:	e004      	b.n	8002844 <HAL_GPIO_Init+0x244>
 800283a:	2302      	movs	r3, #2
 800283c:	e002      	b.n	8002844 <HAL_GPIO_Init+0x244>
 800283e:	2301      	movs	r3, #1
 8002840:	e000      	b.n	8002844 <HAL_GPIO_Init+0x244>
 8002842:	2300      	movs	r3, #0
 8002844:	697a      	ldr	r2, [r7, #20]
 8002846:	f002 0203 	and.w	r2, r2, #3
 800284a:	0092      	lsls	r2, r2, #2
 800284c:	4093      	lsls	r3, r2
 800284e:	693a      	ldr	r2, [r7, #16]
 8002850:	4313      	orrs	r3, r2
 8002852:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002854:	4937      	ldr	r1, [pc, #220]	; (8002934 <HAL_GPIO_Init+0x334>)
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	089b      	lsrs	r3, r3, #2
 800285a:	3302      	adds	r3, #2
 800285c:	693a      	ldr	r2, [r7, #16]
 800285e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002862:	4b3b      	ldr	r3, [pc, #236]	; (8002950 <HAL_GPIO_Init+0x350>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	43db      	mvns	r3, r3
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	4013      	ands	r3, r2
 8002870:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d003      	beq.n	8002886 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800287e:	693a      	ldr	r2, [r7, #16]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	4313      	orrs	r3, r2
 8002884:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002886:	4a32      	ldr	r2, [pc, #200]	; (8002950 <HAL_GPIO_Init+0x350>)
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800288c:	4b30      	ldr	r3, [pc, #192]	; (8002950 <HAL_GPIO_Init+0x350>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	43db      	mvns	r3, r3
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	4013      	ands	r3, r2
 800289a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d003      	beq.n	80028b0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80028a8:	693a      	ldr	r2, [r7, #16]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80028b0:	4a27      	ldr	r2, [pc, #156]	; (8002950 <HAL_GPIO_Init+0x350>)
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80028b6:	4b26      	ldr	r3, [pc, #152]	; (8002950 <HAL_GPIO_Init+0x350>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	43db      	mvns	r3, r3
 80028c0:	693a      	ldr	r2, [r7, #16]
 80028c2:	4013      	ands	r3, r2
 80028c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d003      	beq.n	80028da <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80028da:	4a1d      	ldr	r2, [pc, #116]	; (8002950 <HAL_GPIO_Init+0x350>)
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80028e0:	4b1b      	ldr	r3, [pc, #108]	; (8002950 <HAL_GPIO_Init+0x350>)
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	43db      	mvns	r3, r3
 80028ea:	693a      	ldr	r2, [r7, #16]
 80028ec:	4013      	ands	r3, r2
 80028ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d003      	beq.n	8002904 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80028fc:	693a      	ldr	r2, [r7, #16]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	4313      	orrs	r3, r2
 8002902:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002904:	4a12      	ldr	r2, [pc, #72]	; (8002950 <HAL_GPIO_Init+0x350>)
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	3301      	adds	r3, #1
 800290e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	fa22 f303 	lsr.w	r3, r2, r3
 800291a:	2b00      	cmp	r3, #0
 800291c:	f47f ae78 	bne.w	8002610 <HAL_GPIO_Init+0x10>
  }
}
 8002920:	bf00      	nop
 8002922:	bf00      	nop
 8002924:	371c      	adds	r7, #28
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	40021000 	.word	0x40021000
 8002934:	40010000 	.word	0x40010000
 8002938:	48000400 	.word	0x48000400
 800293c:	48000800 	.word	0x48000800
 8002940:	48000c00 	.word	0x48000c00
 8002944:	48001000 	.word	0x48001000
 8002948:	48001400 	.word	0x48001400
 800294c:	48001800 	.word	0x48001800
 8002950:	40010400 	.word	0x40010400

08002954 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002958:	4b05      	ldr	r3, [pc, #20]	; (8002970 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a04      	ldr	r2, [pc, #16]	; (8002970 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800295e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002962:	6013      	str	r3, [r2, #0]
}
 8002964:	bf00      	nop
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	40007000 	.word	0x40007000

08002974 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002978:	4b04      	ldr	r3, [pc, #16]	; (800298c <HAL_PWREx_GetVoltageRange+0x18>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002980:	4618      	mov	r0, r3
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	40007000 	.word	0x40007000

08002990 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002990:	b480      	push	{r7}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800299e:	d130      	bne.n	8002a02 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80029a0:	4b23      	ldr	r3, [pc, #140]	; (8002a30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80029a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029ac:	d038      	beq.n	8002a20 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80029ae:	4b20      	ldr	r3, [pc, #128]	; (8002a30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80029b6:	4a1e      	ldr	r2, [pc, #120]	; (8002a30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029bc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80029be:	4b1d      	ldr	r3, [pc, #116]	; (8002a34 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2232      	movs	r2, #50	; 0x32
 80029c4:	fb02 f303 	mul.w	r3, r2, r3
 80029c8:	4a1b      	ldr	r2, [pc, #108]	; (8002a38 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80029ca:	fba2 2303 	umull	r2, r3, r2, r3
 80029ce:	0c9b      	lsrs	r3, r3, #18
 80029d0:	3301      	adds	r3, #1
 80029d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029d4:	e002      	b.n	80029dc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	3b01      	subs	r3, #1
 80029da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029dc:	4b14      	ldr	r3, [pc, #80]	; (8002a30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029de:	695b      	ldr	r3, [r3, #20]
 80029e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029e8:	d102      	bne.n	80029f0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d1f2      	bne.n	80029d6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80029f0:	4b0f      	ldr	r3, [pc, #60]	; (8002a30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029f2:	695b      	ldr	r3, [r3, #20]
 80029f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029fc:	d110      	bne.n	8002a20 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e00f      	b.n	8002a22 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a02:	4b0b      	ldr	r3, [pc, #44]	; (8002a30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a0e:	d007      	beq.n	8002a20 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002a10:	4b07      	ldr	r3, [pc, #28]	; (8002a30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a18:	4a05      	ldr	r2, [pc, #20]	; (8002a30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a1e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3714      	adds	r7, #20
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	40007000 	.word	0x40007000
 8002a34:	20000088 	.word	0x20000088
 8002a38:	431bde83 	.word	0x431bde83

08002a3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b088      	sub	sp, #32
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d101      	bne.n	8002a4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e3d4      	b.n	80031f8 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a4e:	4ba1      	ldr	r3, [pc, #644]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f003 030c 	and.w	r3, r3, #12
 8002a56:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a58:	4b9e      	ldr	r3, [pc, #632]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	f003 0303 	and.w	r3, r3, #3
 8002a60:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0310 	and.w	r3, r3, #16
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	f000 80e4 	beq.w	8002c38 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d007      	beq.n	8002a86 <HAL_RCC_OscConfig+0x4a>
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	2b0c      	cmp	r3, #12
 8002a7a:	f040 808b 	bne.w	8002b94 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	f040 8087 	bne.w	8002b94 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a86:	4b93      	ldr	r3, [pc, #588]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d005      	beq.n	8002a9e <HAL_RCC_OscConfig+0x62>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d101      	bne.n	8002a9e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e3ac      	b.n	80031f8 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a1a      	ldr	r2, [r3, #32]
 8002aa2:	4b8c      	ldr	r3, [pc, #560]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0308 	and.w	r3, r3, #8
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d004      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x7c>
 8002aae:	4b89      	ldr	r3, [pc, #548]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ab6:	e005      	b.n	8002ac4 <HAL_RCC_OscConfig+0x88>
 8002ab8:	4b86      	ldr	r3, [pc, #536]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002aba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002abe:	091b      	lsrs	r3, r3, #4
 8002ac0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d223      	bcs.n	8002b10 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6a1b      	ldr	r3, [r3, #32]
 8002acc:	4618      	mov	r0, r3
 8002ace:	f000 fd41 	bl	8003554 <RCC_SetFlashLatencyFromMSIRange>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d001      	beq.n	8002adc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e38d      	b.n	80031f8 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002adc:	4b7d      	ldr	r3, [pc, #500]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a7c      	ldr	r2, [pc, #496]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002ae2:	f043 0308 	orr.w	r3, r3, #8
 8002ae6:	6013      	str	r3, [r2, #0]
 8002ae8:	4b7a      	ldr	r3, [pc, #488]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a1b      	ldr	r3, [r3, #32]
 8002af4:	4977      	ldr	r1, [pc, #476]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002afa:	4b76      	ldr	r3, [pc, #472]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	69db      	ldr	r3, [r3, #28]
 8002b06:	021b      	lsls	r3, r3, #8
 8002b08:	4972      	ldr	r1, [pc, #456]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	604b      	str	r3, [r1, #4]
 8002b0e:	e025      	b.n	8002b5c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b10:	4b70      	ldr	r3, [pc, #448]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a6f      	ldr	r2, [pc, #444]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002b16:	f043 0308 	orr.w	r3, r3, #8
 8002b1a:	6013      	str	r3, [r2, #0]
 8002b1c:	4b6d      	ldr	r3, [pc, #436]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a1b      	ldr	r3, [r3, #32]
 8002b28:	496a      	ldr	r1, [pc, #424]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b2e:	4b69      	ldr	r3, [pc, #420]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	69db      	ldr	r3, [r3, #28]
 8002b3a:	021b      	lsls	r3, r3, #8
 8002b3c:	4965      	ldr	r1, [pc, #404]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d109      	bne.n	8002b5c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a1b      	ldr	r3, [r3, #32]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f000 fd01 	bl	8003554 <RCC_SetFlashLatencyFromMSIRange>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d001      	beq.n	8002b5c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e34d      	b.n	80031f8 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b5c:	f000 fc36 	bl	80033cc <HAL_RCC_GetSysClockFreq>
 8002b60:	4602      	mov	r2, r0
 8002b62:	4b5c      	ldr	r3, [pc, #368]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	091b      	lsrs	r3, r3, #4
 8002b68:	f003 030f 	and.w	r3, r3, #15
 8002b6c:	495a      	ldr	r1, [pc, #360]	; (8002cd8 <HAL_RCC_OscConfig+0x29c>)
 8002b6e:	5ccb      	ldrb	r3, [r1, r3]
 8002b70:	f003 031f 	and.w	r3, r3, #31
 8002b74:	fa22 f303 	lsr.w	r3, r2, r3
 8002b78:	4a58      	ldr	r2, [pc, #352]	; (8002cdc <HAL_RCC_OscConfig+0x2a0>)
 8002b7a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b7c:	4b58      	ldr	r3, [pc, #352]	; (8002ce0 <HAL_RCC_OscConfig+0x2a4>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7ff f9d7 	bl	8001f34 <HAL_InitTick>
 8002b86:	4603      	mov	r3, r0
 8002b88:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002b8a:	7bfb      	ldrb	r3, [r7, #15]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d052      	beq.n	8002c36 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002b90:	7bfb      	ldrb	r3, [r7, #15]
 8002b92:	e331      	b.n	80031f8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d032      	beq.n	8002c02 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b9c:	4b4d      	ldr	r3, [pc, #308]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a4c      	ldr	r2, [pc, #304]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002ba2:	f043 0301 	orr.w	r3, r3, #1
 8002ba6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ba8:	f7ff fa14 	bl	8001fd4 <HAL_GetTick>
 8002bac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002bae:	e008      	b.n	8002bc2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bb0:	f7ff fa10 	bl	8001fd4 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e31a      	b.n	80031f8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002bc2:	4b44      	ldr	r3, [pc, #272]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d0f0      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bce:	4b41      	ldr	r3, [pc, #260]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a40      	ldr	r2, [pc, #256]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002bd4:	f043 0308 	orr.w	r3, r3, #8
 8002bd8:	6013      	str	r3, [r2, #0]
 8002bda:	4b3e      	ldr	r3, [pc, #248]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a1b      	ldr	r3, [r3, #32]
 8002be6:	493b      	ldr	r1, [pc, #236]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bec:	4b39      	ldr	r3, [pc, #228]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	69db      	ldr	r3, [r3, #28]
 8002bf8:	021b      	lsls	r3, r3, #8
 8002bfa:	4936      	ldr	r1, [pc, #216]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	604b      	str	r3, [r1, #4]
 8002c00:	e01a      	b.n	8002c38 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002c02:	4b34      	ldr	r3, [pc, #208]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a33      	ldr	r2, [pc, #204]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002c08:	f023 0301 	bic.w	r3, r3, #1
 8002c0c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c0e:	f7ff f9e1 	bl	8001fd4 <HAL_GetTick>
 8002c12:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c14:	e008      	b.n	8002c28 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c16:	f7ff f9dd 	bl	8001fd4 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d901      	bls.n	8002c28 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e2e7      	b.n	80031f8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c28:	4b2a      	ldr	r3, [pc, #168]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0302 	and.w	r3, r3, #2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d1f0      	bne.n	8002c16 <HAL_RCC_OscConfig+0x1da>
 8002c34:	e000      	b.n	8002c38 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c36:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0301 	and.w	r3, r3, #1
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d074      	beq.n	8002d2e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	2b08      	cmp	r3, #8
 8002c48:	d005      	beq.n	8002c56 <HAL_RCC_OscConfig+0x21a>
 8002c4a:	69bb      	ldr	r3, [r7, #24]
 8002c4c:	2b0c      	cmp	r3, #12
 8002c4e:	d10e      	bne.n	8002c6e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	2b03      	cmp	r3, #3
 8002c54:	d10b      	bne.n	8002c6e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c56:	4b1f      	ldr	r3, [pc, #124]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d064      	beq.n	8002d2c <HAL_RCC_OscConfig+0x2f0>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d160      	bne.n	8002d2c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e2c4      	b.n	80031f8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c76:	d106      	bne.n	8002c86 <HAL_RCC_OscConfig+0x24a>
 8002c78:	4b16      	ldr	r3, [pc, #88]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a15      	ldr	r2, [pc, #84]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002c7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c82:	6013      	str	r3, [r2, #0]
 8002c84:	e01d      	b.n	8002cc2 <HAL_RCC_OscConfig+0x286>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c8e:	d10c      	bne.n	8002caa <HAL_RCC_OscConfig+0x26e>
 8002c90:	4b10      	ldr	r3, [pc, #64]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a0f      	ldr	r2, [pc, #60]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002c96:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c9a:	6013      	str	r3, [r2, #0]
 8002c9c:	4b0d      	ldr	r3, [pc, #52]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a0c      	ldr	r2, [pc, #48]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002ca2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ca6:	6013      	str	r3, [r2, #0]
 8002ca8:	e00b      	b.n	8002cc2 <HAL_RCC_OscConfig+0x286>
 8002caa:	4b0a      	ldr	r3, [pc, #40]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a09      	ldr	r2, [pc, #36]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002cb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cb4:	6013      	str	r3, [r2, #0]
 8002cb6:	4b07      	ldr	r3, [pc, #28]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a06      	ldr	r2, [pc, #24]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002cbc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cc0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d01c      	beq.n	8002d04 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cca:	f7ff f983 	bl	8001fd4 <HAL_GetTick>
 8002cce:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cd0:	e011      	b.n	8002cf6 <HAL_RCC_OscConfig+0x2ba>
 8002cd2:	bf00      	nop
 8002cd4:	40021000 	.word	0x40021000
 8002cd8:	080082f8 	.word	0x080082f8
 8002cdc:	20000088 	.word	0x20000088
 8002ce0:	2000008c 	.word	0x2000008c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ce4:	f7ff f976 	bl	8001fd4 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b64      	cmp	r3, #100	; 0x64
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e280      	b.n	80031f8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cf6:	4baf      	ldr	r3, [pc, #700]	; (8002fb4 <HAL_RCC_OscConfig+0x578>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d0f0      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x2a8>
 8002d02:	e014      	b.n	8002d2e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d04:	f7ff f966 	bl	8001fd4 <HAL_GetTick>
 8002d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d0a:	e008      	b.n	8002d1e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d0c:	f7ff f962 	bl	8001fd4 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b64      	cmp	r3, #100	; 0x64
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e26c      	b.n	80031f8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d1e:	4ba5      	ldr	r3, [pc, #660]	; (8002fb4 <HAL_RCC_OscConfig+0x578>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1f0      	bne.n	8002d0c <HAL_RCC_OscConfig+0x2d0>
 8002d2a:	e000      	b.n	8002d2e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d060      	beq.n	8002dfc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	2b04      	cmp	r3, #4
 8002d3e:	d005      	beq.n	8002d4c <HAL_RCC_OscConfig+0x310>
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	2b0c      	cmp	r3, #12
 8002d44:	d119      	bne.n	8002d7a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d116      	bne.n	8002d7a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d4c:	4b99      	ldr	r3, [pc, #612]	; (8002fb4 <HAL_RCC_OscConfig+0x578>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d005      	beq.n	8002d64 <HAL_RCC_OscConfig+0x328>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d101      	bne.n	8002d64 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e249      	b.n	80031f8 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d64:	4b93      	ldr	r3, [pc, #588]	; (8002fb4 <HAL_RCC_OscConfig+0x578>)
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	061b      	lsls	r3, r3, #24
 8002d72:	4990      	ldr	r1, [pc, #576]	; (8002fb4 <HAL_RCC_OscConfig+0x578>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d78:	e040      	b.n	8002dfc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d023      	beq.n	8002dca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d82:	4b8c      	ldr	r3, [pc, #560]	; (8002fb4 <HAL_RCC_OscConfig+0x578>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a8b      	ldr	r2, [pc, #556]	; (8002fb4 <HAL_RCC_OscConfig+0x578>)
 8002d88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d8e:	f7ff f921 	bl	8001fd4 <HAL_GetTick>
 8002d92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d94:	e008      	b.n	8002da8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d96:	f7ff f91d 	bl	8001fd4 <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d901      	bls.n	8002da8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e227      	b.n	80031f8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002da8:	4b82      	ldr	r3, [pc, #520]	; (8002fb4 <HAL_RCC_OscConfig+0x578>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d0f0      	beq.n	8002d96 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002db4:	4b7f      	ldr	r3, [pc, #508]	; (8002fb4 <HAL_RCC_OscConfig+0x578>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	061b      	lsls	r3, r3, #24
 8002dc2:	497c      	ldr	r1, [pc, #496]	; (8002fb4 <HAL_RCC_OscConfig+0x578>)
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	604b      	str	r3, [r1, #4]
 8002dc8:	e018      	b.n	8002dfc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dca:	4b7a      	ldr	r3, [pc, #488]	; (8002fb4 <HAL_RCC_OscConfig+0x578>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a79      	ldr	r2, [pc, #484]	; (8002fb4 <HAL_RCC_OscConfig+0x578>)
 8002dd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002dd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd6:	f7ff f8fd 	bl	8001fd4 <HAL_GetTick>
 8002dda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ddc:	e008      	b.n	8002df0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dde:	f7ff f8f9 	bl	8001fd4 <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d901      	bls.n	8002df0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e203      	b.n	80031f8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002df0:	4b70      	ldr	r3, [pc, #448]	; (8002fb4 <HAL_RCC_OscConfig+0x578>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d1f0      	bne.n	8002dde <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0308 	and.w	r3, r3, #8
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d03c      	beq.n	8002e82 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	695b      	ldr	r3, [r3, #20]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d01c      	beq.n	8002e4a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e10:	4b68      	ldr	r3, [pc, #416]	; (8002fb4 <HAL_RCC_OscConfig+0x578>)
 8002e12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e16:	4a67      	ldr	r2, [pc, #412]	; (8002fb4 <HAL_RCC_OscConfig+0x578>)
 8002e18:	f043 0301 	orr.w	r3, r3, #1
 8002e1c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e20:	f7ff f8d8 	bl	8001fd4 <HAL_GetTick>
 8002e24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e26:	e008      	b.n	8002e3a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e28:	f7ff f8d4 	bl	8001fd4 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e1de      	b.n	80031f8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e3a:	4b5e      	ldr	r3, [pc, #376]	; (8002fb4 <HAL_RCC_OscConfig+0x578>)
 8002e3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e40:	f003 0302 	and.w	r3, r3, #2
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d0ef      	beq.n	8002e28 <HAL_RCC_OscConfig+0x3ec>
 8002e48:	e01b      	b.n	8002e82 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e4a:	4b5a      	ldr	r3, [pc, #360]	; (8002fb4 <HAL_RCC_OscConfig+0x578>)
 8002e4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e50:	4a58      	ldr	r2, [pc, #352]	; (8002fb4 <HAL_RCC_OscConfig+0x578>)
 8002e52:	f023 0301 	bic.w	r3, r3, #1
 8002e56:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e5a:	f7ff f8bb 	bl	8001fd4 <HAL_GetTick>
 8002e5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e60:	e008      	b.n	8002e74 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e62:	f7ff f8b7 	bl	8001fd4 <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d901      	bls.n	8002e74 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e1c1      	b.n	80031f8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e74:	4b4f      	ldr	r3, [pc, #316]	; (8002fb4 <HAL_RCC_OscConfig+0x578>)
 8002e76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d1ef      	bne.n	8002e62 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0304 	and.w	r3, r3, #4
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	f000 80a6 	beq.w	8002fdc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e90:	2300      	movs	r3, #0
 8002e92:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002e94:	4b47      	ldr	r3, [pc, #284]	; (8002fb4 <HAL_RCC_OscConfig+0x578>)
 8002e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d10d      	bne.n	8002ebc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ea0:	4b44      	ldr	r3, [pc, #272]	; (8002fb4 <HAL_RCC_OscConfig+0x578>)
 8002ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ea4:	4a43      	ldr	r2, [pc, #268]	; (8002fb4 <HAL_RCC_OscConfig+0x578>)
 8002ea6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eaa:	6593      	str	r3, [r2, #88]	; 0x58
 8002eac:	4b41      	ldr	r3, [pc, #260]	; (8002fb4 <HAL_RCC_OscConfig+0x578>)
 8002eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eb4:	60bb      	str	r3, [r7, #8]
 8002eb6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ebc:	4b3e      	ldr	r3, [pc, #248]	; (8002fb8 <HAL_RCC_OscConfig+0x57c>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d118      	bne.n	8002efa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ec8:	4b3b      	ldr	r3, [pc, #236]	; (8002fb8 <HAL_RCC_OscConfig+0x57c>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a3a      	ldr	r2, [pc, #232]	; (8002fb8 <HAL_RCC_OscConfig+0x57c>)
 8002ece:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ed2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ed4:	f7ff f87e 	bl	8001fd4 <HAL_GetTick>
 8002ed8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002eda:	e008      	b.n	8002eee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002edc:	f7ff f87a 	bl	8001fd4 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e184      	b.n	80031f8 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002eee:	4b32      	ldr	r3, [pc, #200]	; (8002fb8 <HAL_RCC_OscConfig+0x57c>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d0f0      	beq.n	8002edc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d108      	bne.n	8002f14 <HAL_RCC_OscConfig+0x4d8>
 8002f02:	4b2c      	ldr	r3, [pc, #176]	; (8002fb4 <HAL_RCC_OscConfig+0x578>)
 8002f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f08:	4a2a      	ldr	r2, [pc, #168]	; (8002fb4 <HAL_RCC_OscConfig+0x578>)
 8002f0a:	f043 0301 	orr.w	r3, r3, #1
 8002f0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f12:	e024      	b.n	8002f5e <HAL_RCC_OscConfig+0x522>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	2b05      	cmp	r3, #5
 8002f1a:	d110      	bne.n	8002f3e <HAL_RCC_OscConfig+0x502>
 8002f1c:	4b25      	ldr	r3, [pc, #148]	; (8002fb4 <HAL_RCC_OscConfig+0x578>)
 8002f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f22:	4a24      	ldr	r2, [pc, #144]	; (8002fb4 <HAL_RCC_OscConfig+0x578>)
 8002f24:	f043 0304 	orr.w	r3, r3, #4
 8002f28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f2c:	4b21      	ldr	r3, [pc, #132]	; (8002fb4 <HAL_RCC_OscConfig+0x578>)
 8002f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f32:	4a20      	ldr	r2, [pc, #128]	; (8002fb4 <HAL_RCC_OscConfig+0x578>)
 8002f34:	f043 0301 	orr.w	r3, r3, #1
 8002f38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f3c:	e00f      	b.n	8002f5e <HAL_RCC_OscConfig+0x522>
 8002f3e:	4b1d      	ldr	r3, [pc, #116]	; (8002fb4 <HAL_RCC_OscConfig+0x578>)
 8002f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f44:	4a1b      	ldr	r2, [pc, #108]	; (8002fb4 <HAL_RCC_OscConfig+0x578>)
 8002f46:	f023 0301 	bic.w	r3, r3, #1
 8002f4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f4e:	4b19      	ldr	r3, [pc, #100]	; (8002fb4 <HAL_RCC_OscConfig+0x578>)
 8002f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f54:	4a17      	ldr	r2, [pc, #92]	; (8002fb4 <HAL_RCC_OscConfig+0x578>)
 8002f56:	f023 0304 	bic.w	r3, r3, #4
 8002f5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d016      	beq.n	8002f94 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f66:	f7ff f835 	bl	8001fd4 <HAL_GetTick>
 8002f6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f6c:	e00a      	b.n	8002f84 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f6e:	f7ff f831 	bl	8001fd4 <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d901      	bls.n	8002f84 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e139      	b.n	80031f8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f84:	4b0b      	ldr	r3, [pc, #44]	; (8002fb4 <HAL_RCC_OscConfig+0x578>)
 8002f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d0ed      	beq.n	8002f6e <HAL_RCC_OscConfig+0x532>
 8002f92:	e01a      	b.n	8002fca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f94:	f7ff f81e 	bl	8001fd4 <HAL_GetTick>
 8002f98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f9a:	e00f      	b.n	8002fbc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f9c:	f7ff f81a 	bl	8001fd4 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d906      	bls.n	8002fbc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e122      	b.n	80031f8 <HAL_RCC_OscConfig+0x7bc>
 8002fb2:	bf00      	nop
 8002fb4:	40021000 	.word	0x40021000
 8002fb8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002fbc:	4b90      	ldr	r3, [pc, #576]	; (8003200 <HAL_RCC_OscConfig+0x7c4>)
 8002fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1e8      	bne.n	8002f9c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fca:	7ffb      	ldrb	r3, [r7, #31]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d105      	bne.n	8002fdc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fd0:	4b8b      	ldr	r3, [pc, #556]	; (8003200 <HAL_RCC_OscConfig+0x7c4>)
 8002fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd4:	4a8a      	ldr	r2, [pc, #552]	; (8003200 <HAL_RCC_OscConfig+0x7c4>)
 8002fd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fda:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	f000 8108 	beq.w	80031f6 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	f040 80d0 	bne.w	8003190 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002ff0:	4b83      	ldr	r3, [pc, #524]	; (8003200 <HAL_RCC_OscConfig+0x7c4>)
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	f003 0203 	and.w	r2, r3, #3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003000:	429a      	cmp	r2, r3
 8003002:	d130      	bne.n	8003066 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300e:	3b01      	subs	r3, #1
 8003010:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003012:	429a      	cmp	r2, r3
 8003014:	d127      	bne.n	8003066 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003020:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003022:	429a      	cmp	r2, r3
 8003024:	d11f      	bne.n	8003066 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003030:	2a07      	cmp	r2, #7
 8003032:	bf14      	ite	ne
 8003034:	2201      	movne	r2, #1
 8003036:	2200      	moveq	r2, #0
 8003038:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800303a:	4293      	cmp	r3, r2
 800303c:	d113      	bne.n	8003066 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003048:	085b      	lsrs	r3, r3, #1
 800304a:	3b01      	subs	r3, #1
 800304c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800304e:	429a      	cmp	r2, r3
 8003050:	d109      	bne.n	8003066 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305c:	085b      	lsrs	r3, r3, #1
 800305e:	3b01      	subs	r3, #1
 8003060:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003062:	429a      	cmp	r2, r3
 8003064:	d06e      	beq.n	8003144 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	2b0c      	cmp	r3, #12
 800306a:	d069      	beq.n	8003140 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800306c:	4b64      	ldr	r3, [pc, #400]	; (8003200 <HAL_RCC_OscConfig+0x7c4>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d105      	bne.n	8003084 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003078:	4b61      	ldr	r3, [pc, #388]	; (8003200 <HAL_RCC_OscConfig+0x7c4>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d001      	beq.n	8003088 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e0b7      	b.n	80031f8 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003088:	4b5d      	ldr	r3, [pc, #372]	; (8003200 <HAL_RCC_OscConfig+0x7c4>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a5c      	ldr	r2, [pc, #368]	; (8003200 <HAL_RCC_OscConfig+0x7c4>)
 800308e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003092:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003094:	f7fe ff9e 	bl	8001fd4 <HAL_GetTick>
 8003098:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800309a:	e008      	b.n	80030ae <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800309c:	f7fe ff9a 	bl	8001fd4 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e0a4      	b.n	80031f8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030ae:	4b54      	ldr	r3, [pc, #336]	; (8003200 <HAL_RCC_OscConfig+0x7c4>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d1f0      	bne.n	800309c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030ba:	4b51      	ldr	r3, [pc, #324]	; (8003200 <HAL_RCC_OscConfig+0x7c4>)
 80030bc:	68da      	ldr	r2, [r3, #12]
 80030be:	4b51      	ldr	r3, [pc, #324]	; (8003204 <HAL_RCC_OscConfig+0x7c8>)
 80030c0:	4013      	ands	r3, r2
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80030ca:	3a01      	subs	r2, #1
 80030cc:	0112      	lsls	r2, r2, #4
 80030ce:	4311      	orrs	r1, r2
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80030d4:	0212      	lsls	r2, r2, #8
 80030d6:	4311      	orrs	r1, r2
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80030dc:	0852      	lsrs	r2, r2, #1
 80030de:	3a01      	subs	r2, #1
 80030e0:	0552      	lsls	r2, r2, #21
 80030e2:	4311      	orrs	r1, r2
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80030e8:	0852      	lsrs	r2, r2, #1
 80030ea:	3a01      	subs	r2, #1
 80030ec:	0652      	lsls	r2, r2, #25
 80030ee:	4311      	orrs	r1, r2
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80030f4:	0912      	lsrs	r2, r2, #4
 80030f6:	0452      	lsls	r2, r2, #17
 80030f8:	430a      	orrs	r2, r1
 80030fa:	4941      	ldr	r1, [pc, #260]	; (8003200 <HAL_RCC_OscConfig+0x7c4>)
 80030fc:	4313      	orrs	r3, r2
 80030fe:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003100:	4b3f      	ldr	r3, [pc, #252]	; (8003200 <HAL_RCC_OscConfig+0x7c4>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a3e      	ldr	r2, [pc, #248]	; (8003200 <HAL_RCC_OscConfig+0x7c4>)
 8003106:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800310a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800310c:	4b3c      	ldr	r3, [pc, #240]	; (8003200 <HAL_RCC_OscConfig+0x7c4>)
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	4a3b      	ldr	r2, [pc, #236]	; (8003200 <HAL_RCC_OscConfig+0x7c4>)
 8003112:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003116:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003118:	f7fe ff5c 	bl	8001fd4 <HAL_GetTick>
 800311c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800311e:	e008      	b.n	8003132 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003120:	f7fe ff58 	bl	8001fd4 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b02      	cmp	r3, #2
 800312c:	d901      	bls.n	8003132 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e062      	b.n	80031f8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003132:	4b33      	ldr	r3, [pc, #204]	; (8003200 <HAL_RCC_OscConfig+0x7c4>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d0f0      	beq.n	8003120 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800313e:	e05a      	b.n	80031f6 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e059      	b.n	80031f8 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003144:	4b2e      	ldr	r3, [pc, #184]	; (8003200 <HAL_RCC_OscConfig+0x7c4>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d152      	bne.n	80031f6 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003150:	4b2b      	ldr	r3, [pc, #172]	; (8003200 <HAL_RCC_OscConfig+0x7c4>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a2a      	ldr	r2, [pc, #168]	; (8003200 <HAL_RCC_OscConfig+0x7c4>)
 8003156:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800315a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800315c:	4b28      	ldr	r3, [pc, #160]	; (8003200 <HAL_RCC_OscConfig+0x7c4>)
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	4a27      	ldr	r2, [pc, #156]	; (8003200 <HAL_RCC_OscConfig+0x7c4>)
 8003162:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003166:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003168:	f7fe ff34 	bl	8001fd4 <HAL_GetTick>
 800316c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800316e:	e008      	b.n	8003182 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003170:	f7fe ff30 	bl	8001fd4 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b02      	cmp	r3, #2
 800317c:	d901      	bls.n	8003182 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e03a      	b.n	80031f8 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003182:	4b1f      	ldr	r3, [pc, #124]	; (8003200 <HAL_RCC_OscConfig+0x7c4>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d0f0      	beq.n	8003170 <HAL_RCC_OscConfig+0x734>
 800318e:	e032      	b.n	80031f6 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	2b0c      	cmp	r3, #12
 8003194:	d02d      	beq.n	80031f2 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003196:	4b1a      	ldr	r3, [pc, #104]	; (8003200 <HAL_RCC_OscConfig+0x7c4>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a19      	ldr	r2, [pc, #100]	; (8003200 <HAL_RCC_OscConfig+0x7c4>)
 800319c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031a0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80031a2:	4b17      	ldr	r3, [pc, #92]	; (8003200 <HAL_RCC_OscConfig+0x7c4>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d105      	bne.n	80031ba <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80031ae:	4b14      	ldr	r3, [pc, #80]	; (8003200 <HAL_RCC_OscConfig+0x7c4>)
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	4a13      	ldr	r2, [pc, #76]	; (8003200 <HAL_RCC_OscConfig+0x7c4>)
 80031b4:	f023 0303 	bic.w	r3, r3, #3
 80031b8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80031ba:	4b11      	ldr	r3, [pc, #68]	; (8003200 <HAL_RCC_OscConfig+0x7c4>)
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	4a10      	ldr	r2, [pc, #64]	; (8003200 <HAL_RCC_OscConfig+0x7c4>)
 80031c0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80031c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031c8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ca:	f7fe ff03 	bl	8001fd4 <HAL_GetTick>
 80031ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031d0:	e008      	b.n	80031e4 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031d2:	f7fe feff 	bl	8001fd4 <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d901      	bls.n	80031e4 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	e009      	b.n	80031f8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031e4:	4b06      	ldr	r3, [pc, #24]	; (8003200 <HAL_RCC_OscConfig+0x7c4>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d1f0      	bne.n	80031d2 <HAL_RCC_OscConfig+0x796>
 80031f0:	e001      	b.n	80031f6 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e000      	b.n	80031f8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80031f6:	2300      	movs	r3, #0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3720      	adds	r7, #32
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	40021000 	.word	0x40021000
 8003204:	f99d808c 	.word	0xf99d808c

08003208 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d101      	bne.n	800321c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e0c8      	b.n	80033ae <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800321c:	4b66      	ldr	r3, [pc, #408]	; (80033b8 <HAL_RCC_ClockConfig+0x1b0>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0307 	and.w	r3, r3, #7
 8003224:	683a      	ldr	r2, [r7, #0]
 8003226:	429a      	cmp	r2, r3
 8003228:	d910      	bls.n	800324c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800322a:	4b63      	ldr	r3, [pc, #396]	; (80033b8 <HAL_RCC_ClockConfig+0x1b0>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f023 0207 	bic.w	r2, r3, #7
 8003232:	4961      	ldr	r1, [pc, #388]	; (80033b8 <HAL_RCC_ClockConfig+0x1b0>)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	4313      	orrs	r3, r2
 8003238:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800323a:	4b5f      	ldr	r3, [pc, #380]	; (80033b8 <HAL_RCC_ClockConfig+0x1b0>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0307 	and.w	r3, r3, #7
 8003242:	683a      	ldr	r2, [r7, #0]
 8003244:	429a      	cmp	r2, r3
 8003246:	d001      	beq.n	800324c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e0b0      	b.n	80033ae <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0301 	and.w	r3, r3, #1
 8003254:	2b00      	cmp	r3, #0
 8003256:	d04c      	beq.n	80032f2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	2b03      	cmp	r3, #3
 800325e:	d107      	bne.n	8003270 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003260:	4b56      	ldr	r3, [pc, #344]	; (80033bc <HAL_RCC_ClockConfig+0x1b4>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d121      	bne.n	80032b0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e09e      	b.n	80033ae <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	2b02      	cmp	r3, #2
 8003276:	d107      	bne.n	8003288 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003278:	4b50      	ldr	r3, [pc, #320]	; (80033bc <HAL_RCC_ClockConfig+0x1b4>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d115      	bne.n	80032b0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e092      	b.n	80033ae <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d107      	bne.n	80032a0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003290:	4b4a      	ldr	r3, [pc, #296]	; (80033bc <HAL_RCC_ClockConfig+0x1b4>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0302 	and.w	r3, r3, #2
 8003298:	2b00      	cmp	r3, #0
 800329a:	d109      	bne.n	80032b0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e086      	b.n	80033ae <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032a0:	4b46      	ldr	r3, [pc, #280]	; (80033bc <HAL_RCC_ClockConfig+0x1b4>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d101      	bne.n	80032b0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e07e      	b.n	80033ae <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032b0:	4b42      	ldr	r3, [pc, #264]	; (80033bc <HAL_RCC_ClockConfig+0x1b4>)
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f023 0203 	bic.w	r2, r3, #3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	493f      	ldr	r1, [pc, #252]	; (80033bc <HAL_RCC_ClockConfig+0x1b4>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032c2:	f7fe fe87 	bl	8001fd4 <HAL_GetTick>
 80032c6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032c8:	e00a      	b.n	80032e0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032ca:	f7fe fe83 	bl	8001fd4 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d8:	4293      	cmp	r3, r2
 80032da:	d901      	bls.n	80032e0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e066      	b.n	80033ae <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032e0:	4b36      	ldr	r3, [pc, #216]	; (80033bc <HAL_RCC_ClockConfig+0x1b4>)
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f003 020c 	and.w	r2, r3, #12
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d1eb      	bne.n	80032ca <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0302 	and.w	r3, r3, #2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d008      	beq.n	8003310 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032fe:	4b2f      	ldr	r3, [pc, #188]	; (80033bc <HAL_RCC_ClockConfig+0x1b4>)
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	492c      	ldr	r1, [pc, #176]	; (80033bc <HAL_RCC_ClockConfig+0x1b4>)
 800330c:	4313      	orrs	r3, r2
 800330e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003310:	4b29      	ldr	r3, [pc, #164]	; (80033b8 <HAL_RCC_ClockConfig+0x1b0>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0307 	and.w	r3, r3, #7
 8003318:	683a      	ldr	r2, [r7, #0]
 800331a:	429a      	cmp	r2, r3
 800331c:	d210      	bcs.n	8003340 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800331e:	4b26      	ldr	r3, [pc, #152]	; (80033b8 <HAL_RCC_ClockConfig+0x1b0>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f023 0207 	bic.w	r2, r3, #7
 8003326:	4924      	ldr	r1, [pc, #144]	; (80033b8 <HAL_RCC_ClockConfig+0x1b0>)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	4313      	orrs	r3, r2
 800332c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800332e:	4b22      	ldr	r3, [pc, #136]	; (80033b8 <HAL_RCC_ClockConfig+0x1b0>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0307 	and.w	r3, r3, #7
 8003336:	683a      	ldr	r2, [r7, #0]
 8003338:	429a      	cmp	r2, r3
 800333a:	d001      	beq.n	8003340 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e036      	b.n	80033ae <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0304 	and.w	r3, r3, #4
 8003348:	2b00      	cmp	r3, #0
 800334a:	d008      	beq.n	800335e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800334c:	4b1b      	ldr	r3, [pc, #108]	; (80033bc <HAL_RCC_ClockConfig+0x1b4>)
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	4918      	ldr	r1, [pc, #96]	; (80033bc <HAL_RCC_ClockConfig+0x1b4>)
 800335a:	4313      	orrs	r3, r2
 800335c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0308 	and.w	r3, r3, #8
 8003366:	2b00      	cmp	r3, #0
 8003368:	d009      	beq.n	800337e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800336a:	4b14      	ldr	r3, [pc, #80]	; (80033bc <HAL_RCC_ClockConfig+0x1b4>)
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	00db      	lsls	r3, r3, #3
 8003378:	4910      	ldr	r1, [pc, #64]	; (80033bc <HAL_RCC_ClockConfig+0x1b4>)
 800337a:	4313      	orrs	r3, r2
 800337c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800337e:	f000 f825 	bl	80033cc <HAL_RCC_GetSysClockFreq>
 8003382:	4602      	mov	r2, r0
 8003384:	4b0d      	ldr	r3, [pc, #52]	; (80033bc <HAL_RCC_ClockConfig+0x1b4>)
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	091b      	lsrs	r3, r3, #4
 800338a:	f003 030f 	and.w	r3, r3, #15
 800338e:	490c      	ldr	r1, [pc, #48]	; (80033c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003390:	5ccb      	ldrb	r3, [r1, r3]
 8003392:	f003 031f 	and.w	r3, r3, #31
 8003396:	fa22 f303 	lsr.w	r3, r2, r3
 800339a:	4a0a      	ldr	r2, [pc, #40]	; (80033c4 <HAL_RCC_ClockConfig+0x1bc>)
 800339c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800339e:	4b0a      	ldr	r3, [pc, #40]	; (80033c8 <HAL_RCC_ClockConfig+0x1c0>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7fe fdc6 	bl	8001f34 <HAL_InitTick>
 80033a8:	4603      	mov	r3, r0
 80033aa:	72fb      	strb	r3, [r7, #11]

  return status;
 80033ac:	7afb      	ldrb	r3, [r7, #11]
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3710      	adds	r7, #16
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	40022000 	.word	0x40022000
 80033bc:	40021000 	.word	0x40021000
 80033c0:	080082f8 	.word	0x080082f8
 80033c4:	20000088 	.word	0x20000088
 80033c8:	2000008c 	.word	0x2000008c

080033cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b089      	sub	sp, #36	; 0x24
 80033d0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80033d2:	2300      	movs	r3, #0
 80033d4:	61fb      	str	r3, [r7, #28]
 80033d6:	2300      	movs	r3, #0
 80033d8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033da:	4b3e      	ldr	r3, [pc, #248]	; (80034d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f003 030c 	and.w	r3, r3, #12
 80033e2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033e4:	4b3b      	ldr	r3, [pc, #236]	; (80034d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	f003 0303 	and.w	r3, r3, #3
 80033ec:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d005      	beq.n	8003400 <HAL_RCC_GetSysClockFreq+0x34>
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	2b0c      	cmp	r3, #12
 80033f8:	d121      	bne.n	800343e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d11e      	bne.n	800343e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003400:	4b34      	ldr	r3, [pc, #208]	; (80034d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0308 	and.w	r3, r3, #8
 8003408:	2b00      	cmp	r3, #0
 800340a:	d107      	bne.n	800341c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800340c:	4b31      	ldr	r3, [pc, #196]	; (80034d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800340e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003412:	0a1b      	lsrs	r3, r3, #8
 8003414:	f003 030f 	and.w	r3, r3, #15
 8003418:	61fb      	str	r3, [r7, #28]
 800341a:	e005      	b.n	8003428 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800341c:	4b2d      	ldr	r3, [pc, #180]	; (80034d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	091b      	lsrs	r3, r3, #4
 8003422:	f003 030f 	and.w	r3, r3, #15
 8003426:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003428:	4a2b      	ldr	r2, [pc, #172]	; (80034d8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003430:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d10d      	bne.n	8003454 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800343c:	e00a      	b.n	8003454 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	2b04      	cmp	r3, #4
 8003442:	d102      	bne.n	800344a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003444:	4b25      	ldr	r3, [pc, #148]	; (80034dc <HAL_RCC_GetSysClockFreq+0x110>)
 8003446:	61bb      	str	r3, [r7, #24]
 8003448:	e004      	b.n	8003454 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	2b08      	cmp	r3, #8
 800344e:	d101      	bne.n	8003454 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003450:	4b23      	ldr	r3, [pc, #140]	; (80034e0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003452:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	2b0c      	cmp	r3, #12
 8003458:	d134      	bne.n	80034c4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800345a:	4b1e      	ldr	r3, [pc, #120]	; (80034d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	f003 0303 	and.w	r3, r3, #3
 8003462:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	2b02      	cmp	r3, #2
 8003468:	d003      	beq.n	8003472 <HAL_RCC_GetSysClockFreq+0xa6>
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	2b03      	cmp	r3, #3
 800346e:	d003      	beq.n	8003478 <HAL_RCC_GetSysClockFreq+0xac>
 8003470:	e005      	b.n	800347e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003472:	4b1a      	ldr	r3, [pc, #104]	; (80034dc <HAL_RCC_GetSysClockFreq+0x110>)
 8003474:	617b      	str	r3, [r7, #20]
      break;
 8003476:	e005      	b.n	8003484 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003478:	4b19      	ldr	r3, [pc, #100]	; (80034e0 <HAL_RCC_GetSysClockFreq+0x114>)
 800347a:	617b      	str	r3, [r7, #20]
      break;
 800347c:	e002      	b.n	8003484 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	617b      	str	r3, [r7, #20]
      break;
 8003482:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003484:	4b13      	ldr	r3, [pc, #76]	; (80034d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	091b      	lsrs	r3, r3, #4
 800348a:	f003 0307 	and.w	r3, r3, #7
 800348e:	3301      	adds	r3, #1
 8003490:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003492:	4b10      	ldr	r3, [pc, #64]	; (80034d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	0a1b      	lsrs	r3, r3, #8
 8003498:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800349c:	697a      	ldr	r2, [r7, #20]
 800349e:	fb02 f203 	mul.w	r2, r2, r3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80034aa:	4b0a      	ldr	r3, [pc, #40]	; (80034d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	0e5b      	lsrs	r3, r3, #25
 80034b0:	f003 0303 	and.w	r3, r3, #3
 80034b4:	3301      	adds	r3, #1
 80034b6:	005b      	lsls	r3, r3, #1
 80034b8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80034ba:	697a      	ldr	r2, [r7, #20]
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	fbb2 f3f3 	udiv	r3, r2, r3
 80034c2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80034c4:	69bb      	ldr	r3, [r7, #24]
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3724      	adds	r7, #36	; 0x24
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	40021000 	.word	0x40021000
 80034d8:	08008310 	.word	0x08008310
 80034dc:	00f42400 	.word	0x00f42400
 80034e0:	007a1200 	.word	0x007a1200

080034e4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034e4:	b480      	push	{r7}
 80034e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034e8:	4b03      	ldr	r3, [pc, #12]	; (80034f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80034ea:	681b      	ldr	r3, [r3, #0]
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	20000088 	.word	0x20000088

080034fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003500:	f7ff fff0 	bl	80034e4 <HAL_RCC_GetHCLKFreq>
 8003504:	4602      	mov	r2, r0
 8003506:	4b06      	ldr	r3, [pc, #24]	; (8003520 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	0a1b      	lsrs	r3, r3, #8
 800350c:	f003 0307 	and.w	r3, r3, #7
 8003510:	4904      	ldr	r1, [pc, #16]	; (8003524 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003512:	5ccb      	ldrb	r3, [r1, r3]
 8003514:	f003 031f 	and.w	r3, r3, #31
 8003518:	fa22 f303 	lsr.w	r3, r2, r3
}
 800351c:	4618      	mov	r0, r3
 800351e:	bd80      	pop	{r7, pc}
 8003520:	40021000 	.word	0x40021000
 8003524:	08008308 	.word	0x08008308

08003528 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800352c:	f7ff ffda 	bl	80034e4 <HAL_RCC_GetHCLKFreq>
 8003530:	4602      	mov	r2, r0
 8003532:	4b06      	ldr	r3, [pc, #24]	; (800354c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	0adb      	lsrs	r3, r3, #11
 8003538:	f003 0307 	and.w	r3, r3, #7
 800353c:	4904      	ldr	r1, [pc, #16]	; (8003550 <HAL_RCC_GetPCLK2Freq+0x28>)
 800353e:	5ccb      	ldrb	r3, [r1, r3]
 8003540:	f003 031f 	and.w	r3, r3, #31
 8003544:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003548:	4618      	mov	r0, r3
 800354a:	bd80      	pop	{r7, pc}
 800354c:	40021000 	.word	0x40021000
 8003550:	08008308 	.word	0x08008308

08003554 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b086      	sub	sp, #24
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800355c:	2300      	movs	r3, #0
 800355e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003560:	4b2a      	ldr	r3, [pc, #168]	; (800360c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d003      	beq.n	8003574 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800356c:	f7ff fa02 	bl	8002974 <HAL_PWREx_GetVoltageRange>
 8003570:	6178      	str	r0, [r7, #20]
 8003572:	e014      	b.n	800359e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003574:	4b25      	ldr	r3, [pc, #148]	; (800360c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003578:	4a24      	ldr	r2, [pc, #144]	; (800360c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800357a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800357e:	6593      	str	r3, [r2, #88]	; 0x58
 8003580:	4b22      	ldr	r3, [pc, #136]	; (800360c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003588:	60fb      	str	r3, [r7, #12]
 800358a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800358c:	f7ff f9f2 	bl	8002974 <HAL_PWREx_GetVoltageRange>
 8003590:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003592:	4b1e      	ldr	r3, [pc, #120]	; (800360c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003596:	4a1d      	ldr	r2, [pc, #116]	; (800360c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003598:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800359c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035a4:	d10b      	bne.n	80035be <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2b80      	cmp	r3, #128	; 0x80
 80035aa:	d919      	bls.n	80035e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2ba0      	cmp	r3, #160	; 0xa0
 80035b0:	d902      	bls.n	80035b8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035b2:	2302      	movs	r3, #2
 80035b4:	613b      	str	r3, [r7, #16]
 80035b6:	e013      	b.n	80035e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035b8:	2301      	movs	r3, #1
 80035ba:	613b      	str	r3, [r7, #16]
 80035bc:	e010      	b.n	80035e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2b80      	cmp	r3, #128	; 0x80
 80035c2:	d902      	bls.n	80035ca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80035c4:	2303      	movs	r3, #3
 80035c6:	613b      	str	r3, [r7, #16]
 80035c8:	e00a      	b.n	80035e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2b80      	cmp	r3, #128	; 0x80
 80035ce:	d102      	bne.n	80035d6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035d0:	2302      	movs	r3, #2
 80035d2:	613b      	str	r3, [r7, #16]
 80035d4:	e004      	b.n	80035e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2b70      	cmp	r3, #112	; 0x70
 80035da:	d101      	bne.n	80035e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035dc:	2301      	movs	r3, #1
 80035de:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80035e0:	4b0b      	ldr	r3, [pc, #44]	; (8003610 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f023 0207 	bic.w	r2, r3, #7
 80035e8:	4909      	ldr	r1, [pc, #36]	; (8003610 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80035f0:	4b07      	ldr	r3, [pc, #28]	; (8003610 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0307 	and.w	r3, r3, #7
 80035f8:	693a      	ldr	r2, [r7, #16]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d001      	beq.n	8003602 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e000      	b.n	8003604 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	3718      	adds	r7, #24
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	40021000 	.word	0x40021000
 8003610:	40022000 	.word	0x40022000

08003614 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b086      	sub	sp, #24
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800361c:	2300      	movs	r3, #0
 800361e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003620:	2300      	movs	r3, #0
 8003622:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800362c:	2b00      	cmp	r3, #0
 800362e:	d041      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003634:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003638:	d02a      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800363a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800363e:	d824      	bhi.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003640:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003644:	d008      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003646:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800364a:	d81e      	bhi.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00a      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003650:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003654:	d010      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003656:	e018      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003658:	4b86      	ldr	r3, [pc, #536]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	4a85      	ldr	r2, [pc, #532]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800365e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003662:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003664:	e015      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	3304      	adds	r3, #4
 800366a:	2100      	movs	r1, #0
 800366c:	4618      	mov	r0, r3
 800366e:	f000 facb 	bl	8003c08 <RCCEx_PLLSAI1_Config>
 8003672:	4603      	mov	r3, r0
 8003674:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003676:	e00c      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	3320      	adds	r3, #32
 800367c:	2100      	movs	r1, #0
 800367e:	4618      	mov	r0, r3
 8003680:	f000 fbb6 	bl	8003df0 <RCCEx_PLLSAI2_Config>
 8003684:	4603      	mov	r3, r0
 8003686:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003688:	e003      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	74fb      	strb	r3, [r7, #19]
      break;
 800368e:	e000      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003690:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003692:	7cfb      	ldrb	r3, [r7, #19]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d10b      	bne.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003698:	4b76      	ldr	r3, [pc, #472]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800369a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800369e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036a6:	4973      	ldr	r1, [pc, #460]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80036ae:	e001      	b.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036b0:	7cfb      	ldrb	r3, [r7, #19]
 80036b2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d041      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036c4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80036c8:	d02a      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80036ca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80036ce:	d824      	bhi.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80036d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036d4:	d008      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80036d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036da:	d81e      	bhi.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d00a      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80036e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036e4:	d010      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80036e6:	e018      	b.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80036e8:	4b62      	ldr	r3, [pc, #392]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	4a61      	ldr	r2, [pc, #388]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036f2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80036f4:	e015      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	3304      	adds	r3, #4
 80036fa:	2100      	movs	r1, #0
 80036fc:	4618      	mov	r0, r3
 80036fe:	f000 fa83 	bl	8003c08 <RCCEx_PLLSAI1_Config>
 8003702:	4603      	mov	r3, r0
 8003704:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003706:	e00c      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	3320      	adds	r3, #32
 800370c:	2100      	movs	r1, #0
 800370e:	4618      	mov	r0, r3
 8003710:	f000 fb6e 	bl	8003df0 <RCCEx_PLLSAI2_Config>
 8003714:	4603      	mov	r3, r0
 8003716:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003718:	e003      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	74fb      	strb	r3, [r7, #19]
      break;
 800371e:	e000      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003720:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003722:	7cfb      	ldrb	r3, [r7, #19]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d10b      	bne.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003728:	4b52      	ldr	r3, [pc, #328]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800372a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800372e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003736:	494f      	ldr	r1, [pc, #316]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003738:	4313      	orrs	r3, r2
 800373a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800373e:	e001      	b.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003740:	7cfb      	ldrb	r3, [r7, #19]
 8003742:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800374c:	2b00      	cmp	r3, #0
 800374e:	f000 80a0 	beq.w	8003892 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003752:	2300      	movs	r3, #0
 8003754:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003756:	4b47      	ldr	r3, [pc, #284]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800375a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d101      	bne.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003762:	2301      	movs	r3, #1
 8003764:	e000      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003766:	2300      	movs	r3, #0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d00d      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800376c:	4b41      	ldr	r3, [pc, #260]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800376e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003770:	4a40      	ldr	r2, [pc, #256]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003772:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003776:	6593      	str	r3, [r2, #88]	; 0x58
 8003778:	4b3e      	ldr	r3, [pc, #248]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800377a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800377c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003780:	60bb      	str	r3, [r7, #8]
 8003782:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003784:	2301      	movs	r3, #1
 8003786:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003788:	4b3b      	ldr	r3, [pc, #236]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a3a      	ldr	r2, [pc, #232]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800378e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003792:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003794:	f7fe fc1e 	bl	8001fd4 <HAL_GetTick>
 8003798:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800379a:	e009      	b.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800379c:	f7fe fc1a 	bl	8001fd4 <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d902      	bls.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	74fb      	strb	r3, [r7, #19]
        break;
 80037ae:	e005      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80037b0:	4b31      	ldr	r3, [pc, #196]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d0ef      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80037bc:	7cfb      	ldrb	r3, [r7, #19]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d15c      	bne.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80037c2:	4b2c      	ldr	r3, [pc, #176]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037cc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d01f      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037da:	697a      	ldr	r2, [r7, #20]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d019      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80037e0:	4b24      	ldr	r3, [pc, #144]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037ea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80037ec:	4b21      	ldr	r3, [pc, #132]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f2:	4a20      	ldr	r2, [pc, #128]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80037fc:	4b1d      	ldr	r3, [pc, #116]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003802:	4a1c      	ldr	r2, [pc, #112]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003804:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003808:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800380c:	4a19      	ldr	r2, [pc, #100]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	2b00      	cmp	r3, #0
 800381c:	d016      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800381e:	f7fe fbd9 	bl	8001fd4 <HAL_GetTick>
 8003822:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003824:	e00b      	b.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003826:	f7fe fbd5 	bl	8001fd4 <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	f241 3288 	movw	r2, #5000	; 0x1388
 8003834:	4293      	cmp	r3, r2
 8003836:	d902      	bls.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	74fb      	strb	r3, [r7, #19]
            break;
 800383c:	e006      	b.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800383e:	4b0d      	ldr	r3, [pc, #52]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003844:	f003 0302 	and.w	r3, r3, #2
 8003848:	2b00      	cmp	r3, #0
 800384a:	d0ec      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800384c:	7cfb      	ldrb	r3, [r7, #19]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d10c      	bne.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003852:	4b08      	ldr	r3, [pc, #32]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003854:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003858:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003862:	4904      	ldr	r1, [pc, #16]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003864:	4313      	orrs	r3, r2
 8003866:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800386a:	e009      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800386c:	7cfb      	ldrb	r3, [r7, #19]
 800386e:	74bb      	strb	r3, [r7, #18]
 8003870:	e006      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003872:	bf00      	nop
 8003874:	40021000 	.word	0x40021000
 8003878:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800387c:	7cfb      	ldrb	r3, [r7, #19]
 800387e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003880:	7c7b      	ldrb	r3, [r7, #17]
 8003882:	2b01      	cmp	r3, #1
 8003884:	d105      	bne.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003886:	4b9e      	ldr	r3, [pc, #632]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800388a:	4a9d      	ldr	r2, [pc, #628]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800388c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003890:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00a      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800389e:	4b98      	ldr	r3, [pc, #608]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038a4:	f023 0203 	bic.w	r2, r3, #3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ac:	4994      	ldr	r1, [pc, #592]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0302 	and.w	r3, r3, #2
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d00a      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038c0:	4b8f      	ldr	r3, [pc, #572]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c6:	f023 020c 	bic.w	r2, r3, #12
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ce:	498c      	ldr	r1, [pc, #560]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0304 	and.w	r3, r3, #4
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d00a      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80038e2:	4b87      	ldr	r3, [pc, #540]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f0:	4983      	ldr	r1, [pc, #524]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0308 	and.w	r3, r3, #8
 8003900:	2b00      	cmp	r3, #0
 8003902:	d00a      	beq.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003904:	4b7e      	ldr	r3, [pc, #504]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800390a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003912:	497b      	ldr	r1, [pc, #492]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003914:	4313      	orrs	r3, r2
 8003916:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0310 	and.w	r3, r3, #16
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00a      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003926:	4b76      	ldr	r3, [pc, #472]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003928:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800392c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003934:	4972      	ldr	r1, [pc, #456]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003936:	4313      	orrs	r3, r2
 8003938:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0320 	and.w	r3, r3, #32
 8003944:	2b00      	cmp	r3, #0
 8003946:	d00a      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003948:	4b6d      	ldr	r3, [pc, #436]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800394a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800394e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003956:	496a      	ldr	r1, [pc, #424]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003958:	4313      	orrs	r3, r2
 800395a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00a      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800396a:	4b65      	ldr	r3, [pc, #404]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800396c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003970:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003978:	4961      	ldr	r1, [pc, #388]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800397a:	4313      	orrs	r3, r2
 800397c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003988:	2b00      	cmp	r3, #0
 800398a:	d00a      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800398c:	4b5c      	ldr	r3, [pc, #368]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800398e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003992:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800399a:	4959      	ldr	r1, [pc, #356]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800399c:	4313      	orrs	r3, r2
 800399e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00a      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039ae:	4b54      	ldr	r3, [pc, #336]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039bc:	4950      	ldr	r1, [pc, #320]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d00a      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80039d0:	4b4b      	ldr	r3, [pc, #300]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039de:	4948      	ldr	r1, [pc, #288]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00a      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80039f2:	4b43      	ldr	r3, [pc, #268]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a00:	493f      	ldr	r1, [pc, #252]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a02:	4313      	orrs	r3, r2
 8003a04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d028      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a14:	4b3a      	ldr	r3, [pc, #232]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a1a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a22:	4937      	ldr	r1, [pc, #220]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a32:	d106      	bne.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a34:	4b32      	ldr	r3, [pc, #200]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	4a31      	ldr	r2, [pc, #196]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a3e:	60d3      	str	r3, [r2, #12]
 8003a40:	e011      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a46:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a4a:	d10c      	bne.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	3304      	adds	r3, #4
 8003a50:	2101      	movs	r1, #1
 8003a52:	4618      	mov	r0, r3
 8003a54:	f000 f8d8 	bl	8003c08 <RCCEx_PLLSAI1_Config>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003a5c:	7cfb      	ldrb	r3, [r7, #19]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d001      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003a62:	7cfb      	ldrb	r3, [r7, #19]
 8003a64:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d028      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003a72:	4b23      	ldr	r3, [pc, #140]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a78:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a80:	491f      	ldr	r1, [pc, #124]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a90:	d106      	bne.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a92:	4b1b      	ldr	r3, [pc, #108]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	4a1a      	ldr	r2, [pc, #104]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a9c:	60d3      	str	r3, [r2, #12]
 8003a9e:	e011      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003aa8:	d10c      	bne.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	3304      	adds	r3, #4
 8003aae:	2101      	movs	r1, #1
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f000 f8a9 	bl	8003c08 <RCCEx_PLLSAI1_Config>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003aba:	7cfb      	ldrb	r3, [r7, #19]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d001      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003ac0:	7cfb      	ldrb	r3, [r7, #19]
 8003ac2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d02b      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ad0:	4b0b      	ldr	r3, [pc, #44]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ade:	4908      	ldr	r1, [pc, #32]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003aee:	d109      	bne.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003af0:	4b03      	ldr	r3, [pc, #12]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	4a02      	ldr	r2, [pc, #8]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003af6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003afa:	60d3      	str	r3, [r2, #12]
 8003afc:	e014      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003afe:	bf00      	nop
 8003b00:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b08:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b0c:	d10c      	bne.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	3304      	adds	r3, #4
 8003b12:	2101      	movs	r1, #1
 8003b14:	4618      	mov	r0, r3
 8003b16:	f000 f877 	bl	8003c08 <RCCEx_PLLSAI1_Config>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b1e:	7cfb      	ldrb	r3, [r7, #19]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d001      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003b24:	7cfb      	ldrb	r3, [r7, #19]
 8003b26:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d02f      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b34:	4b2b      	ldr	r3, [pc, #172]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b3a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b42:	4928      	ldr	r1, [pc, #160]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b52:	d10d      	bne.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	3304      	adds	r3, #4
 8003b58:	2102      	movs	r1, #2
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f000 f854 	bl	8003c08 <RCCEx_PLLSAI1_Config>
 8003b60:	4603      	mov	r3, r0
 8003b62:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b64:	7cfb      	ldrb	r3, [r7, #19]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d014      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003b6a:	7cfb      	ldrb	r3, [r7, #19]
 8003b6c:	74bb      	strb	r3, [r7, #18]
 8003b6e:	e011      	b.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b78:	d10c      	bne.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	3320      	adds	r3, #32
 8003b7e:	2102      	movs	r1, #2
 8003b80:	4618      	mov	r0, r3
 8003b82:	f000 f935 	bl	8003df0 <RCCEx_PLLSAI2_Config>
 8003b86:	4603      	mov	r3, r0
 8003b88:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b8a:	7cfb      	ldrb	r3, [r7, #19]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d001      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003b90:	7cfb      	ldrb	r3, [r7, #19]
 8003b92:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d00a      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003ba0:	4b10      	ldr	r3, [pc, #64]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ba6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bae:	490d      	ldr	r1, [pc, #52]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d00b      	beq.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003bc2:	4b08      	ldr	r3, [pc, #32]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bc8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bd2:	4904      	ldr	r1, [pc, #16]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003bda:	7cbb      	ldrb	r3, [r7, #18]
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3718      	adds	r7, #24
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	40021000 	.word	0x40021000

08003be8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003be8:	b480      	push	{r7}
 8003bea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003bec:	4b05      	ldr	r3, [pc, #20]	; (8003c04 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a04      	ldr	r2, [pc, #16]	; (8003c04 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003bf2:	f043 0304 	orr.w	r3, r3, #4
 8003bf6:	6013      	str	r3, [r2, #0]
}
 8003bf8:	bf00      	nop
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	40021000 	.word	0x40021000

08003c08 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c12:	2300      	movs	r3, #0
 8003c14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003c16:	4b75      	ldr	r3, [pc, #468]	; (8003dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	f003 0303 	and.w	r3, r3, #3
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d018      	beq.n	8003c54 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003c22:	4b72      	ldr	r3, [pc, #456]	; (8003dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	f003 0203 	and.w	r2, r3, #3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d10d      	bne.n	8003c4e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
       ||
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d009      	beq.n	8003c4e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003c3a:	4b6c      	ldr	r3, [pc, #432]	; (8003dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	091b      	lsrs	r3, r3, #4
 8003c40:	f003 0307 	and.w	r3, r3, #7
 8003c44:	1c5a      	adds	r2, r3, #1
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
       ||
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d047      	beq.n	8003cde <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	73fb      	strb	r3, [r7, #15]
 8003c52:	e044      	b.n	8003cde <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2b03      	cmp	r3, #3
 8003c5a:	d018      	beq.n	8003c8e <RCCEx_PLLSAI1_Config+0x86>
 8003c5c:	2b03      	cmp	r3, #3
 8003c5e:	d825      	bhi.n	8003cac <RCCEx_PLLSAI1_Config+0xa4>
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d002      	beq.n	8003c6a <RCCEx_PLLSAI1_Config+0x62>
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d009      	beq.n	8003c7c <RCCEx_PLLSAI1_Config+0x74>
 8003c68:	e020      	b.n	8003cac <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003c6a:	4b60      	ldr	r3, [pc, #384]	; (8003dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d11d      	bne.n	8003cb2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c7a:	e01a      	b.n	8003cb2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003c7c:	4b5b      	ldr	r3, [pc, #364]	; (8003dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d116      	bne.n	8003cb6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c8c:	e013      	b.n	8003cb6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003c8e:	4b57      	ldr	r3, [pc, #348]	; (8003dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d10f      	bne.n	8003cba <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c9a:	4b54      	ldr	r3, [pc, #336]	; (8003dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d109      	bne.n	8003cba <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003caa:	e006      	b.n	8003cba <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	73fb      	strb	r3, [r7, #15]
      break;
 8003cb0:	e004      	b.n	8003cbc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003cb2:	bf00      	nop
 8003cb4:	e002      	b.n	8003cbc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003cb6:	bf00      	nop
 8003cb8:	e000      	b.n	8003cbc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003cba:	bf00      	nop
    }

    if(status == HAL_OK)
 8003cbc:	7bfb      	ldrb	r3, [r7, #15]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d10d      	bne.n	8003cde <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003cc2:	4b4a      	ldr	r3, [pc, #296]	; (8003dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6819      	ldr	r1, [r3, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	3b01      	subs	r3, #1
 8003cd4:	011b      	lsls	r3, r3, #4
 8003cd6:	430b      	orrs	r3, r1
 8003cd8:	4944      	ldr	r1, [pc, #272]	; (8003dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003cde:	7bfb      	ldrb	r3, [r7, #15]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d17d      	bne.n	8003de0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003ce4:	4b41      	ldr	r3, [pc, #260]	; (8003dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a40      	ldr	r2, [pc, #256]	; (8003dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003cee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cf0:	f7fe f970 	bl	8001fd4 <HAL_GetTick>
 8003cf4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003cf6:	e009      	b.n	8003d0c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003cf8:	f7fe f96c 	bl	8001fd4 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d902      	bls.n	8003d0c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	73fb      	strb	r3, [r7, #15]
        break;
 8003d0a:	e005      	b.n	8003d18 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d0c:	4b37      	ldr	r3, [pc, #220]	; (8003dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d1ef      	bne.n	8003cf8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003d18:	7bfb      	ldrb	r3, [r7, #15]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d160      	bne.n	8003de0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d111      	bne.n	8003d48 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d24:	4b31      	ldr	r3, [pc, #196]	; (8003dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d26:	691b      	ldr	r3, [r3, #16]
 8003d28:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003d2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	6892      	ldr	r2, [r2, #8]
 8003d34:	0211      	lsls	r1, r2, #8
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	68d2      	ldr	r2, [r2, #12]
 8003d3a:	0912      	lsrs	r2, r2, #4
 8003d3c:	0452      	lsls	r2, r2, #17
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	492a      	ldr	r1, [pc, #168]	; (8003dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d42:	4313      	orrs	r3, r2
 8003d44:	610b      	str	r3, [r1, #16]
 8003d46:	e027      	b.n	8003d98 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d112      	bne.n	8003d74 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d4e:	4b27      	ldr	r3, [pc, #156]	; (8003dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003d56:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	6892      	ldr	r2, [r2, #8]
 8003d5e:	0211      	lsls	r1, r2, #8
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	6912      	ldr	r2, [r2, #16]
 8003d64:	0852      	lsrs	r2, r2, #1
 8003d66:	3a01      	subs	r2, #1
 8003d68:	0552      	lsls	r2, r2, #21
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	491f      	ldr	r1, [pc, #124]	; (8003dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	610b      	str	r3, [r1, #16]
 8003d72:	e011      	b.n	8003d98 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d74:	4b1d      	ldr	r3, [pc, #116]	; (8003dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d76:	691b      	ldr	r3, [r3, #16]
 8003d78:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003d7c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	6892      	ldr	r2, [r2, #8]
 8003d84:	0211      	lsls	r1, r2, #8
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	6952      	ldr	r2, [r2, #20]
 8003d8a:	0852      	lsrs	r2, r2, #1
 8003d8c:	3a01      	subs	r2, #1
 8003d8e:	0652      	lsls	r2, r2, #25
 8003d90:	430a      	orrs	r2, r1
 8003d92:	4916      	ldr	r1, [pc, #88]	; (8003dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d94:	4313      	orrs	r3, r2
 8003d96:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003d98:	4b14      	ldr	r3, [pc, #80]	; (8003dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a13      	ldr	r2, [pc, #76]	; (8003dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d9e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003da2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003da4:	f7fe f916 	bl	8001fd4 <HAL_GetTick>
 8003da8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003daa:	e009      	b.n	8003dc0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003dac:	f7fe f912 	bl	8001fd4 <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d902      	bls.n	8003dc0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	73fb      	strb	r3, [r7, #15]
          break;
 8003dbe:	e005      	b.n	8003dcc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003dc0:	4b0a      	ldr	r3, [pc, #40]	; (8003dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d0ef      	beq.n	8003dac <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003dcc:	7bfb      	ldrb	r3, [r7, #15]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d106      	bne.n	8003de0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003dd2:	4b06      	ldr	r3, [pc, #24]	; (8003dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dd4:	691a      	ldr	r2, [r3, #16]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	4904      	ldr	r1, [pc, #16]	; (8003dec <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3710      	adds	r7, #16
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	40021000 	.word	0x40021000

08003df0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003dfe:	4b6a      	ldr	r3, [pc, #424]	; (8003fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	f003 0303 	and.w	r3, r3, #3
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d018      	beq.n	8003e3c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003e0a:	4b67      	ldr	r3, [pc, #412]	; (8003fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	f003 0203 	and.w	r2, r3, #3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d10d      	bne.n	8003e36 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
       ||
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d009      	beq.n	8003e36 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003e22:	4b61      	ldr	r3, [pc, #388]	; (8003fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	091b      	lsrs	r3, r3, #4
 8003e28:	f003 0307 	and.w	r3, r3, #7
 8003e2c:	1c5a      	adds	r2, r3, #1
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
       ||
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d047      	beq.n	8003ec6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	73fb      	strb	r3, [r7, #15]
 8003e3a:	e044      	b.n	8003ec6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2b03      	cmp	r3, #3
 8003e42:	d018      	beq.n	8003e76 <RCCEx_PLLSAI2_Config+0x86>
 8003e44:	2b03      	cmp	r3, #3
 8003e46:	d825      	bhi.n	8003e94 <RCCEx_PLLSAI2_Config+0xa4>
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d002      	beq.n	8003e52 <RCCEx_PLLSAI2_Config+0x62>
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d009      	beq.n	8003e64 <RCCEx_PLLSAI2_Config+0x74>
 8003e50:	e020      	b.n	8003e94 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003e52:	4b55      	ldr	r3, [pc, #340]	; (8003fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0302 	and.w	r3, r3, #2
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d11d      	bne.n	8003e9a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e62:	e01a      	b.n	8003e9a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003e64:	4b50      	ldr	r3, [pc, #320]	; (8003fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d116      	bne.n	8003e9e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e74:	e013      	b.n	8003e9e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003e76:	4b4c      	ldr	r3, [pc, #304]	; (8003fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d10f      	bne.n	8003ea2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003e82:	4b49      	ldr	r3, [pc, #292]	; (8003fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d109      	bne.n	8003ea2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003e92:	e006      	b.n	8003ea2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	73fb      	strb	r3, [r7, #15]
      break;
 8003e98:	e004      	b.n	8003ea4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e9a:	bf00      	nop
 8003e9c:	e002      	b.n	8003ea4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e9e:	bf00      	nop
 8003ea0:	e000      	b.n	8003ea4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003ea2:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ea4:	7bfb      	ldrb	r3, [r7, #15]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d10d      	bne.n	8003ec6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003eaa:	4b3f      	ldr	r3, [pc, #252]	; (8003fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6819      	ldr	r1, [r3, #0]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	011b      	lsls	r3, r3, #4
 8003ebe:	430b      	orrs	r3, r1
 8003ec0:	4939      	ldr	r1, [pc, #228]	; (8003fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003ec6:	7bfb      	ldrb	r3, [r7, #15]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d167      	bne.n	8003f9c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003ecc:	4b36      	ldr	r3, [pc, #216]	; (8003fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a35      	ldr	r2, [pc, #212]	; (8003fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ed2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ed6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ed8:	f7fe f87c 	bl	8001fd4 <HAL_GetTick>
 8003edc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003ede:	e009      	b.n	8003ef4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003ee0:	f7fe f878 	bl	8001fd4 <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d902      	bls.n	8003ef4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	73fb      	strb	r3, [r7, #15]
        break;
 8003ef2:	e005      	b.n	8003f00 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003ef4:	4b2c      	ldr	r3, [pc, #176]	; (8003fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d1ef      	bne.n	8003ee0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003f00:	7bfb      	ldrb	r3, [r7, #15]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d14a      	bne.n	8003f9c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d111      	bne.n	8003f30 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003f0c:	4b26      	ldr	r3, [pc, #152]	; (8003fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f0e:	695b      	ldr	r3, [r3, #20]
 8003f10:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003f14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	6892      	ldr	r2, [r2, #8]
 8003f1c:	0211      	lsls	r1, r2, #8
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	68d2      	ldr	r2, [r2, #12]
 8003f22:	0912      	lsrs	r2, r2, #4
 8003f24:	0452      	lsls	r2, r2, #17
 8003f26:	430a      	orrs	r2, r1
 8003f28:	491f      	ldr	r1, [pc, #124]	; (8003fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	614b      	str	r3, [r1, #20]
 8003f2e:	e011      	b.n	8003f54 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003f30:	4b1d      	ldr	r3, [pc, #116]	; (8003fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f32:	695b      	ldr	r3, [r3, #20]
 8003f34:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003f38:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	6892      	ldr	r2, [r2, #8]
 8003f40:	0211      	lsls	r1, r2, #8
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	6912      	ldr	r2, [r2, #16]
 8003f46:	0852      	lsrs	r2, r2, #1
 8003f48:	3a01      	subs	r2, #1
 8003f4a:	0652      	lsls	r2, r2, #25
 8003f4c:	430a      	orrs	r2, r1
 8003f4e:	4916      	ldr	r1, [pc, #88]	; (8003fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003f54:	4b14      	ldr	r3, [pc, #80]	; (8003fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a13      	ldr	r2, [pc, #76]	; (8003fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f5e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f60:	f7fe f838 	bl	8001fd4 <HAL_GetTick>
 8003f64:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003f66:	e009      	b.n	8003f7c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003f68:	f7fe f834 	bl	8001fd4 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d902      	bls.n	8003f7c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	73fb      	strb	r3, [r7, #15]
          break;
 8003f7a:	e005      	b.n	8003f88 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003f7c:	4b0a      	ldr	r3, [pc, #40]	; (8003fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d0ef      	beq.n	8003f68 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003f88:	7bfb      	ldrb	r3, [r7, #15]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d106      	bne.n	8003f9c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003f8e:	4b06      	ldr	r3, [pc, #24]	; (8003fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f90:	695a      	ldr	r2, [r3, #20]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	695b      	ldr	r3, [r3, #20]
 8003f96:	4904      	ldr	r1, [pc, #16]	; (8003fa8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3710      	adds	r7, #16
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	40021000 	.word	0x40021000

08003fac <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d06c      	beq.n	8004098 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d106      	bne.n	8003fd8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f7fd f81e 	bl	8001014 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2202      	movs	r2, #2
 8003fdc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	22ca      	movs	r2, #202	; 0xca
 8003fe6:	625a      	str	r2, [r3, #36]	; 0x24
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2253      	movs	r2, #83	; 0x53
 8003fee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f000 fbcb 	bl	800478c <RTC_EnterInitMode>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8003ffa:	7bfb      	ldrb	r3, [r7, #15]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d14b      	bne.n	8004098 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	6812      	ldr	r2, [r2, #0]
 800400a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800400e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004012:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	6899      	ldr	r1, [r3, #8]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685a      	ldr	r2, [r3, #4]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	431a      	orrs	r2, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	699b      	ldr	r3, [r3, #24]
 8004028:	431a      	orrs	r2, r3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	430a      	orrs	r2, r1
 8004030:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	68d2      	ldr	r2, [r2, #12]
 800403a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	6919      	ldr	r1, [r3, #16]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	041a      	lsls	r2, r3, #16
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	430a      	orrs	r2, r1
 800404e:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f000 fbcf 	bl	80047f4 <RTC_ExitInitMode>
 8004056:	4603      	mov	r3, r0
 8004058:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800405a:	7bfb      	ldrb	r3, [r7, #15]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d11b      	bne.n	8004098 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f022 0203 	bic.w	r2, r2, #3
 800406e:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	69da      	ldr	r2, [r3, #28]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	431a      	orrs	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	430a      	orrs	r2, r1
 8004086:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	22ff      	movs	r2, #255	; 0xff
 800408e:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8004098:	7bfb      	ldrb	r3, [r7, #15]
}
 800409a:	4618      	mov	r0, r3
 800409c:	3710      	adds	r7, #16
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80040a2:	b590      	push	{r4, r7, lr}
 80040a4:	b087      	sub	sp, #28
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	60f8      	str	r0, [r7, #12]
 80040aa:	60b9      	str	r1, [r7, #8]
 80040ac:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d101      	bne.n	80040bc <HAL_RTC_SetTime+0x1a>
 80040b8:	2302      	movs	r3, #2
 80040ba:	e08b      	b.n	80041d4 <HAL_RTC_SetTime+0x132>
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2202      	movs	r2, #2
 80040c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	22ca      	movs	r2, #202	; 0xca
 80040d2:	625a      	str	r2, [r3, #36]	; 0x24
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2253      	movs	r2, #83	; 0x53
 80040da:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80040dc:	68f8      	ldr	r0, [r7, #12]
 80040de:	f000 fb55 	bl	800478c <RTC_EnterInitMode>
 80040e2:	4603      	mov	r3, r0
 80040e4:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80040e6:	7cfb      	ldrb	r3, [r7, #19]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d163      	bne.n	80041b4 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d126      	bne.n	8004140 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d102      	bne.n	8004106 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	2200      	movs	r2, #0
 8004104:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	4618      	mov	r0, r3
 800410c:	f000 fbb0 	bl	8004870 <RTC_ByteToBcd2>
 8004110:	4603      	mov	r3, r0
 8004112:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	785b      	ldrb	r3, [r3, #1]
 8004118:	4618      	mov	r0, r3
 800411a:	f000 fba9 	bl	8004870 <RTC_ByteToBcd2>
 800411e:	4603      	mov	r3, r0
 8004120:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004122:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	789b      	ldrb	r3, [r3, #2]
 8004128:	4618      	mov	r0, r3
 800412a:	f000 fba1 	bl	8004870 <RTC_ByteToBcd2>
 800412e:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004130:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	78db      	ldrb	r3, [r3, #3]
 8004138:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800413a:	4313      	orrs	r3, r2
 800413c:	617b      	str	r3, [r7, #20]
 800413e:	e018      	b.n	8004172 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800414a:	2b00      	cmp	r3, #0
 800414c:	d102      	bne.n	8004154 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	2200      	movs	r2, #0
 8004152:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	785b      	ldrb	r3, [r3, #1]
 800415e:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004160:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004162:	68ba      	ldr	r2, [r7, #8]
 8004164:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004166:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	78db      	ldrb	r3, [r3, #3]
 800416c:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800416e:	4313      	orrs	r3, r2
 8004170:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800417c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004180:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	689a      	ldr	r2, [r3, #8]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004190:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	6899      	ldr	r1, [r3, #8]
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	68da      	ldr	r2, [r3, #12]
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	431a      	orrs	r2, r3
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	430a      	orrs	r2, r1
 80041a8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80041aa:	68f8      	ldr	r0, [r7, #12]
 80041ac:	f000 fb22 	bl	80047f4 <RTC_ExitInitMode>
 80041b0:	4603      	mov	r3, r0
 80041b2:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	22ff      	movs	r2, #255	; 0xff
 80041ba:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80041bc:	7cfb      	ldrb	r3, [r7, #19]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d103      	bne.n	80041ca <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2201      	movs	r2, #1
 80041c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80041d2:	7cfb      	ldrb	r3, [r7, #19]
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	371c      	adds	r7, #28
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd90      	pop	{r4, r7, pc}

080041dc <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b086      	sub	sp, #24
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	691b      	ldr	r3, [r3, #16]
 80041f8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800420a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800420e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	0c1b      	lsrs	r3, r3, #16
 8004214:	b2db      	uxtb	r3, r3
 8004216:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800421a:	b2da      	uxtb	r2, r3
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	0a1b      	lsrs	r3, r3, #8
 8004224:	b2db      	uxtb	r3, r3
 8004226:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800422a:	b2da      	uxtb	r2, r3
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	b2db      	uxtb	r3, r3
 8004234:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004238:	b2da      	uxtb	r2, r3
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	0d9b      	lsrs	r3, r3, #22
 8004242:	b2db      	uxtb	r3, r3
 8004244:	f003 0301 	and.w	r3, r3, #1
 8004248:	b2da      	uxtb	r2, r3
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d11a      	bne.n	800428a <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	4618      	mov	r0, r3
 800425a:	f000 fb29 	bl	80048b0 <RTC_Bcd2ToByte>
 800425e:	4603      	mov	r3, r0
 8004260:	461a      	mov	r2, r3
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	785b      	ldrb	r3, [r3, #1]
 800426a:	4618      	mov	r0, r3
 800426c:	f000 fb20 	bl	80048b0 <RTC_Bcd2ToByte>
 8004270:	4603      	mov	r3, r0
 8004272:	461a      	mov	r2, r3
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	789b      	ldrb	r3, [r3, #2]
 800427c:	4618      	mov	r0, r3
 800427e:	f000 fb17 	bl	80048b0 <RTC_Bcd2ToByte>
 8004282:	4603      	mov	r3, r0
 8004284:	461a      	mov	r2, r3
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800428a:	2300      	movs	r3, #0
}
 800428c:	4618      	mov	r0, r3
 800428e:	3718      	adds	r7, #24
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004294:	b590      	push	{r4, r7, lr}
 8004296:	b087      	sub	sp, #28
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d101      	bne.n	80042ae <HAL_RTC_SetDate+0x1a>
 80042aa:	2302      	movs	r3, #2
 80042ac:	e075      	b.n	800439a <HAL_RTC_SetDate+0x106>
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2201      	movs	r2, #1
 80042b2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2202      	movs	r2, #2
 80042ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d10e      	bne.n	80042e2 <HAL_RTC_SetDate+0x4e>
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	785b      	ldrb	r3, [r3, #1]
 80042c8:	f003 0310 	and.w	r3, r3, #16
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d008      	beq.n	80042e2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	785b      	ldrb	r3, [r3, #1]
 80042d4:	f023 0310 	bic.w	r3, r3, #16
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	330a      	adds	r3, #10
 80042dc:	b2da      	uxtb	r2, r3
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d11c      	bne.n	8004322 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	78db      	ldrb	r3, [r3, #3]
 80042ec:	4618      	mov	r0, r3
 80042ee:	f000 fabf 	bl	8004870 <RTC_ByteToBcd2>
 80042f2:	4603      	mov	r3, r0
 80042f4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	785b      	ldrb	r3, [r3, #1]
 80042fa:	4618      	mov	r0, r3
 80042fc:	f000 fab8 	bl	8004870 <RTC_ByteToBcd2>
 8004300:	4603      	mov	r3, r0
 8004302:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004304:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	789b      	ldrb	r3, [r3, #2]
 800430a:	4618      	mov	r0, r3
 800430c:	f000 fab0 	bl	8004870 <RTC_ByteToBcd2>
 8004310:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004312:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800431c:	4313      	orrs	r3, r2
 800431e:	617b      	str	r3, [r7, #20]
 8004320:	e00e      	b.n	8004340 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	78db      	ldrb	r3, [r3, #3]
 8004326:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	785b      	ldrb	r3, [r3, #1]
 800432c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800432e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8004330:	68ba      	ldr	r2, [r7, #8]
 8004332:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004334:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800433c:	4313      	orrs	r3, r2
 800433e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	22ca      	movs	r2, #202	; 0xca
 8004346:	625a      	str	r2, [r3, #36]	; 0x24
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2253      	movs	r2, #83	; 0x53
 800434e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004350:	68f8      	ldr	r0, [r7, #12]
 8004352:	f000 fa1b 	bl	800478c <RTC_EnterInitMode>
 8004356:	4603      	mov	r3, r0
 8004358:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800435a:	7cfb      	ldrb	r3, [r7, #19]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d10c      	bne.n	800437a <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800436a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800436e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004370:	68f8      	ldr	r0, [r7, #12]
 8004372:	f000 fa3f 	bl	80047f4 <RTC_ExitInitMode>
 8004376:	4603      	mov	r3, r0
 8004378:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	22ff      	movs	r2, #255	; 0xff
 8004380:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004382:	7cfb      	ldrb	r3, [r7, #19]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d103      	bne.n	8004390 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8004398:	7cfb      	ldrb	r3, [r7, #19]
}
 800439a:	4618      	mov	r0, r3
 800439c:	371c      	adds	r7, #28
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd90      	pop	{r4, r7, pc}

080043a2 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80043a2:	b580      	push	{r7, lr}
 80043a4:	b086      	sub	sp, #24
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	60f8      	str	r0, [r7, #12]
 80043aa:	60b9      	str	r1, [r7, #8]
 80043ac:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80043b8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80043bc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	0c1b      	lsrs	r3, r3, #16
 80043c2:	b2da      	uxtb	r2, r3
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	0a1b      	lsrs	r3, r3, #8
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	f003 031f 	and.w	r3, r3, #31
 80043d2:	b2da      	uxtb	r2, r3
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043e0:	b2da      	uxtb	r2, r3
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	0b5b      	lsrs	r3, r3, #13
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	f003 0307 	and.w	r3, r3, #7
 80043f0:	b2da      	uxtb	r2, r3
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d11a      	bne.n	8004432 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	78db      	ldrb	r3, [r3, #3]
 8004400:	4618      	mov	r0, r3
 8004402:	f000 fa55 	bl	80048b0 <RTC_Bcd2ToByte>
 8004406:	4603      	mov	r3, r0
 8004408:	461a      	mov	r2, r3
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	785b      	ldrb	r3, [r3, #1]
 8004412:	4618      	mov	r0, r3
 8004414:	f000 fa4c 	bl	80048b0 <RTC_Bcd2ToByte>
 8004418:	4603      	mov	r3, r0
 800441a:	461a      	mov	r2, r3
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	789b      	ldrb	r3, [r3, #2]
 8004424:	4618      	mov	r0, r3
 8004426:	f000 fa43 	bl	80048b0 <RTC_Bcd2ToByte>
 800442a:	4603      	mov	r3, r0
 800442c:	461a      	mov	r2, r3
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004432:	2300      	movs	r3, #0
}
 8004434:	4618      	mov	r0, r3
 8004436:	3718      	adds	r7, #24
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}

0800443c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800443c:	b590      	push	{r4, r7, lr}
 800443e:	b089      	sub	sp, #36	; 0x24
 8004440:	af00      	add	r7, sp, #0
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	60b9      	str	r1, [r7, #8]
 8004446:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800444e:	2b01      	cmp	r3, #1
 8004450:	d101      	bne.n	8004456 <HAL_RTC_SetAlarm_IT+0x1a>
 8004452:	2302      	movs	r3, #2
 8004454:	e127      	b.n	80046a6 <HAL_RTC_SetAlarm_IT+0x26a>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2201      	movs	r2, #1
 800445a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2202      	movs	r2, #2
 8004462:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d137      	bne.n	80044dc <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004476:	2b00      	cmp	r3, #0
 8004478:	d102      	bne.n	8004480 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	2200      	movs	r2, #0
 800447e:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	4618      	mov	r0, r3
 8004486:	f000 f9f3 	bl	8004870 <RTC_ByteToBcd2>
 800448a:	4603      	mov	r3, r0
 800448c:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	785b      	ldrb	r3, [r3, #1]
 8004492:	4618      	mov	r0, r3
 8004494:	f000 f9ec 	bl	8004870 <RTC_ByteToBcd2>
 8004498:	4603      	mov	r3, r0
 800449a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800449c:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	789b      	ldrb	r3, [r3, #2]
 80044a2:	4618      	mov	r0, r3
 80044a4:	f000 f9e4 	bl	8004870 <RTC_ByteToBcd2>
 80044a8:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80044aa:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	78db      	ldrb	r3, [r3, #3]
 80044b2:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80044b4:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80044be:	4618      	mov	r0, r3
 80044c0:	f000 f9d6 	bl	8004870 <RTC_ByteToBcd2>
 80044c4:	4603      	mov	r3, r0
 80044c6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80044c8:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80044d0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80044d6:	4313      	orrs	r3, r2
 80044d8:	61fb      	str	r3, [r7, #28]
 80044da:	e023      	b.n	8004524 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d102      	bne.n	80044f0 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	2200      	movs	r2, #0
 80044ee:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	785b      	ldrb	r3, [r3, #1]
 80044fa:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80044fc:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80044fe:	68ba      	ldr	r2, [r7, #8]
 8004500:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004502:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	78db      	ldrb	r3, [r3, #3]
 8004508:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800450a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004512:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004514:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800451a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004520:	4313      	orrs	r3, r2
 8004522:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	685a      	ldr	r2, [r3, #4]
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	69db      	ldr	r3, [r3, #28]
 800452c:	4313      	orrs	r3, r2
 800452e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	22ca      	movs	r2, #202	; 0xca
 8004536:	625a      	str	r2, [r3, #36]	; 0x24
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2253      	movs	r2, #83	; 0x53
 800453e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004544:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004548:	d14a      	bne.n	80045e0 <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	689a      	ldr	r2, [r3, #8]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004558:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	b2da      	uxtb	r2, r3
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800456a:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 800456c:	f7fd fd32 	bl	8001fd4 <HAL_GetTick>
 8004570:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004572:	e015      	b.n	80045a0 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004574:	f7fd fd2e 	bl	8001fd4 <HAL_GetTick>
 8004578:	4602      	mov	r2, r0
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004582:	d90d      	bls.n	80045a0 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	22ff      	movs	r2, #255	; 0xff
 800458a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2203      	movs	r2, #3
 8004590:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2200      	movs	r2, #0
 8004598:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800459c:	2303      	movs	r3, #3
 800459e:	e082      	b.n	80046a6 <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	f003 0301 	and.w	r3, r3, #1
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d0e2      	beq.n	8004574 <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	69fa      	ldr	r2, [r7, #28]
 80045b4:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	69ba      	ldr	r2, [r7, #24]
 80045bc:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	689a      	ldr	r2, [r3, #8]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045cc:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	689a      	ldr	r2, [r3, #8]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80045dc:	609a      	str	r2, [r3, #8]
 80045de:	e049      	b.n	8004674 <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	689a      	ldr	r2, [r3, #8]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80045ee:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	b2da      	uxtb	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f462 7220 	orn	r2, r2, #640	; 0x280
 8004600:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 8004602:	f7fd fce7 	bl	8001fd4 <HAL_GetTick>
 8004606:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004608:	e015      	b.n	8004636 <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800460a:	f7fd fce3 	bl	8001fd4 <HAL_GetTick>
 800460e:	4602      	mov	r2, r0
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004618:	d90d      	bls.n	8004636 <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	22ff      	movs	r2, #255	; 0xff
 8004620:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2203      	movs	r2, #3
 8004626:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2200      	movs	r2, #0
 800462e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e037      	b.n	80046a6 <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	f003 0302 	and.w	r3, r3, #2
 8004640:	2b00      	cmp	r3, #0
 8004642:	d0e2      	beq.n	800460a <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	69fa      	ldr	r2, [r7, #28]
 800464a:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	69ba      	ldr	r2, [r7, #24]
 8004652:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	689a      	ldr	r2, [r3, #8]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004662:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	689a      	ldr	r2, [r3, #8]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004672:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004674:	4b0e      	ldr	r3, [pc, #56]	; (80046b0 <HAL_RTC_SetAlarm_IT+0x274>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a0d      	ldr	r2, [pc, #52]	; (80046b0 <HAL_RTC_SetAlarm_IT+0x274>)
 800467a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800467e:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8004680:	4b0b      	ldr	r3, [pc, #44]	; (80046b0 <HAL_RTC_SetAlarm_IT+0x274>)
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	4a0a      	ldr	r2, [pc, #40]	; (80046b0 <HAL_RTC_SetAlarm_IT+0x274>)
 8004686:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800468a:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	22ff      	movs	r2, #255	; 0xff
 8004692:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3724      	adds	r7, #36	; 0x24
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd90      	pop	{r4, r7, pc}
 80046ae:	bf00      	nop
 80046b0:	40010400 	.word	0x40010400

080046b4 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b082      	sub	sp, #8
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80046bc:	4b1f      	ldr	r3, [pc, #124]	; (800473c <HAL_RTC_AlarmIRQHandler+0x88>)
 80046be:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80046c2:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d012      	beq.n	80046f8 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d00b      	beq.n	80046f8 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	b2da      	uxtb	r2, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80046f0:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f7fc f842 	bl	800077c <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d012      	beq.n	800472c <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004710:	2b00      	cmp	r3, #0
 8004712:	d00b      	beq.n	800472c <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	b2da      	uxtb	r2, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f462 7220 	orn	r2, r2, #640	; 0x280
 8004724:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 f8dc 	bl	80048e4 <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8004734:	bf00      	nop
 8004736:	3708      	adds	r7, #8
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}
 800473c:	40010400 	.word	0x40010400

08004740 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68da      	ldr	r2, [r3, #12]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004756:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8004758:	f7fd fc3c 	bl	8001fd4 <HAL_GetTick>
 800475c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800475e:	e009      	b.n	8004774 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004760:	f7fd fc38 	bl	8001fd4 <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800476e:	d901      	bls.n	8004774 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004770:	2303      	movs	r3, #3
 8004772:	e007      	b.n	8004784 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	f003 0320 	and.w	r3, r3, #32
 800477e:	2b00      	cmp	r3, #0
 8004780:	d0ee      	beq.n	8004760 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8004782:	2300      	movs	r3, #0
}
 8004784:	4618      	mov	r0, r3
 8004786:	3710      	adds	r7, #16
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004794:	2300      	movs	r3, #0
 8004796:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d120      	bne.n	80047e8 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f04f 32ff 	mov.w	r2, #4294967295
 80047ae:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80047b0:	f7fd fc10 	bl	8001fd4 <HAL_GetTick>
 80047b4:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80047b6:	e00d      	b.n	80047d4 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80047b8:	f7fd fc0c 	bl	8001fd4 <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80047c6:	d905      	bls.n	80047d4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2203      	movs	r2, #3
 80047d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d102      	bne.n	80047e8 <RTC_EnterInitMode+0x5c>
 80047e2:	7bfb      	ldrb	r3, [r7, #15]
 80047e4:	2b03      	cmp	r3, #3
 80047e6:	d1e7      	bne.n	80047b8 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80047e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3710      	adds	r7, #16
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
	...

080047f4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047fc:	2300      	movs	r3, #0
 80047fe:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8004800:	4b1a      	ldr	r3, [pc, #104]	; (800486c <RTC_ExitInitMode+0x78>)
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	4a19      	ldr	r2, [pc, #100]	; (800486c <RTC_ExitInitMode+0x78>)
 8004806:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800480a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800480c:	4b17      	ldr	r3, [pc, #92]	; (800486c <RTC_ExitInitMode+0x78>)
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	f003 0320 	and.w	r3, r3, #32
 8004814:	2b00      	cmp	r3, #0
 8004816:	d10c      	bne.n	8004832 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f7ff ff91 	bl	8004740 <HAL_RTC_WaitForSynchro>
 800481e:	4603      	mov	r3, r0
 8004820:	2b00      	cmp	r3, #0
 8004822:	d01e      	beq.n	8004862 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2203      	movs	r2, #3
 8004828:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	73fb      	strb	r3, [r7, #15]
 8004830:	e017      	b.n	8004862 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004832:	4b0e      	ldr	r3, [pc, #56]	; (800486c <RTC_ExitInitMode+0x78>)
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	4a0d      	ldr	r2, [pc, #52]	; (800486c <RTC_ExitInitMode+0x78>)
 8004838:	f023 0320 	bic.w	r3, r3, #32
 800483c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f7ff ff7e 	bl	8004740 <HAL_RTC_WaitForSynchro>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d005      	beq.n	8004856 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2203      	movs	r2, #3
 800484e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004852:	2303      	movs	r3, #3
 8004854:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004856:	4b05      	ldr	r3, [pc, #20]	; (800486c <RTC_ExitInitMode+0x78>)
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	4a04      	ldr	r2, [pc, #16]	; (800486c <RTC_ExitInitMode+0x78>)
 800485c:	f043 0320 	orr.w	r3, r3, #32
 8004860:	6093      	str	r3, [r2, #8]
  }

  return status;
 8004862:	7bfb      	ldrb	r3, [r7, #15]
}
 8004864:	4618      	mov	r0, r3
 8004866:	3710      	adds	r7, #16
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}
 800486c:	40002800 	.word	0x40002800

08004870 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004870:	b480      	push	{r7}
 8004872:	b085      	sub	sp, #20
 8004874:	af00      	add	r7, sp, #0
 8004876:	4603      	mov	r3, r0
 8004878:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800487a:	2300      	movs	r3, #0
 800487c:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800487e:	79fb      	ldrb	r3, [r7, #7]
 8004880:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8004882:	e005      	b.n	8004890 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	3301      	adds	r3, #1
 8004888:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800488a:	7afb      	ldrb	r3, [r7, #11]
 800488c:	3b0a      	subs	r3, #10
 800488e:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8004890:	7afb      	ldrb	r3, [r7, #11]
 8004892:	2b09      	cmp	r3, #9
 8004894:	d8f6      	bhi.n	8004884 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	b2db      	uxtb	r3, r3
 800489a:	011b      	lsls	r3, r3, #4
 800489c:	b2da      	uxtb	r2, r3
 800489e:	7afb      	ldrb	r3, [r7, #11]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	b2db      	uxtb	r3, r3
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3714      	adds	r7, #20
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr

080048b0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b085      	sub	sp, #20
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	4603      	mov	r3, r0
 80048b8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 80048ba:	79fb      	ldrb	r3, [r7, #7]
 80048bc:	091b      	lsrs	r3, r3, #4
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	461a      	mov	r2, r3
 80048c2:	0092      	lsls	r2, r2, #2
 80048c4:	4413      	add	r3, r2
 80048c6:	005b      	lsls	r3, r3, #1
 80048c8:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 80048ca:	79fb      	ldrb	r3, [r7, #7]
 80048cc:	f003 030f 	and.w	r3, r3, #15
 80048d0:	b2da      	uxtb	r2, r3
 80048d2:	7bfb      	ldrb	r3, [r7, #15]
 80048d4:	4413      	add	r3, r2
 80048d6:	b2db      	uxtb	r3, r3
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3714      	adds	r7, #20
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80048ec:	bf00      	nop
 80048ee:	370c      	adds	r7, #12
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr

080048f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d101      	bne.n	800490a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e049      	b.n	800499e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004910:	b2db      	uxtb	r3, r3
 8004912:	2b00      	cmp	r3, #0
 8004914:	d106      	bne.n	8004924 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f7fd f882 	bl	8001a28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2202      	movs	r2, #2
 8004928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	3304      	adds	r3, #4
 8004934:	4619      	mov	r1, r3
 8004936:	4610      	mov	r0, r2
 8004938:	f001 f9e6 	bl	8005d08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3708      	adds	r7, #8
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
	...

080049a8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b085      	sub	sp, #20
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d001      	beq.n	80049c0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e047      	b.n	8004a50 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2202      	movs	r2, #2
 80049c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a23      	ldr	r2, [pc, #140]	; (8004a5c <HAL_TIM_Base_Start+0xb4>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d01d      	beq.n	8004a0e <HAL_TIM_Base_Start+0x66>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049da:	d018      	beq.n	8004a0e <HAL_TIM_Base_Start+0x66>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a1f      	ldr	r2, [pc, #124]	; (8004a60 <HAL_TIM_Base_Start+0xb8>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d013      	beq.n	8004a0e <HAL_TIM_Base_Start+0x66>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a1e      	ldr	r2, [pc, #120]	; (8004a64 <HAL_TIM_Base_Start+0xbc>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d00e      	beq.n	8004a0e <HAL_TIM_Base_Start+0x66>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a1c      	ldr	r2, [pc, #112]	; (8004a68 <HAL_TIM_Base_Start+0xc0>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d009      	beq.n	8004a0e <HAL_TIM_Base_Start+0x66>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a1b      	ldr	r2, [pc, #108]	; (8004a6c <HAL_TIM_Base_Start+0xc4>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d004      	beq.n	8004a0e <HAL_TIM_Base_Start+0x66>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a19      	ldr	r2, [pc, #100]	; (8004a70 <HAL_TIM_Base_Start+0xc8>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d115      	bne.n	8004a3a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	689a      	ldr	r2, [r3, #8]
 8004a14:	4b17      	ldr	r3, [pc, #92]	; (8004a74 <HAL_TIM_Base_Start+0xcc>)
 8004a16:	4013      	ands	r3, r2
 8004a18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2b06      	cmp	r3, #6
 8004a1e:	d015      	beq.n	8004a4c <HAL_TIM_Base_Start+0xa4>
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a26:	d011      	beq.n	8004a4c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f042 0201 	orr.w	r2, r2, #1
 8004a36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a38:	e008      	b.n	8004a4c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f042 0201 	orr.w	r2, r2, #1
 8004a48:	601a      	str	r2, [r3, #0]
 8004a4a:	e000      	b.n	8004a4e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a4c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a4e:	2300      	movs	r3, #0
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3714      	adds	r7, #20
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr
 8004a5c:	40012c00 	.word	0x40012c00
 8004a60:	40000400 	.word	0x40000400
 8004a64:	40000800 	.word	0x40000800
 8004a68:	40000c00 	.word	0x40000c00
 8004a6c:	40013400 	.word	0x40013400
 8004a70:	40014000 	.word	0x40014000
 8004a74:	00010007 	.word	0x00010007

08004a78 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d101      	bne.n	8004a8a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e049      	b.n	8004b1e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d106      	bne.n	8004aa4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 f841 	bl	8004b26 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2202      	movs	r2, #2
 8004aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	3304      	adds	r3, #4
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	4610      	mov	r0, r2
 8004ab8:	f001 f926 	bl	8005d08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3708      	adds	r7, #8
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}

08004b26 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004b26:	b480      	push	{r7}
 8004b28:	b083      	sub	sp, #12
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004b2e:	bf00      	nop
 8004b30:	370c      	adds	r7, #12
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr
	...

08004b3c <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b086      	sub	sp, #24
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	60f8      	str	r0, [r7, #12]
 8004b44:	60b9      	str	r1, [r7, #8]
 8004b46:	607a      	str	r2, [r7, #4]
 8004b48:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d109      	bne.n	8004b64 <HAL_TIM_PWM_Start_DMA+0x28>
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	bf0c      	ite	eq
 8004b5c:	2301      	moveq	r3, #1
 8004b5e:	2300      	movne	r3, #0
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	e03c      	b.n	8004bde <HAL_TIM_PWM_Start_DMA+0xa2>
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	2b04      	cmp	r3, #4
 8004b68:	d109      	bne.n	8004b7e <HAL_TIM_PWM_Start_DMA+0x42>
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	bf0c      	ite	eq
 8004b76:	2301      	moveq	r3, #1
 8004b78:	2300      	movne	r3, #0
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	e02f      	b.n	8004bde <HAL_TIM_PWM_Start_DMA+0xa2>
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	2b08      	cmp	r3, #8
 8004b82:	d109      	bne.n	8004b98 <HAL_TIM_PWM_Start_DMA+0x5c>
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	2b02      	cmp	r3, #2
 8004b8e:	bf0c      	ite	eq
 8004b90:	2301      	moveq	r3, #1
 8004b92:	2300      	movne	r3, #0
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	e022      	b.n	8004bde <HAL_TIM_PWM_Start_DMA+0xa2>
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	2b0c      	cmp	r3, #12
 8004b9c:	d109      	bne.n	8004bb2 <HAL_TIM_PWM_Start_DMA+0x76>
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	bf0c      	ite	eq
 8004baa:	2301      	moveq	r3, #1
 8004bac:	2300      	movne	r3, #0
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	e015      	b.n	8004bde <HAL_TIM_PWM_Start_DMA+0xa2>
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	2b10      	cmp	r3, #16
 8004bb6:	d109      	bne.n	8004bcc <HAL_TIM_PWM_Start_DMA+0x90>
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	2b02      	cmp	r3, #2
 8004bc2:	bf0c      	ite	eq
 8004bc4:	2301      	moveq	r3, #1
 8004bc6:	2300      	movne	r3, #0
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	e008      	b.n	8004bde <HAL_TIM_PWM_Start_DMA+0xa2>
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	bf0c      	ite	eq
 8004bd8:	2301      	moveq	r3, #1
 8004bda:	2300      	movne	r3, #0
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d001      	beq.n	8004be6 <HAL_TIM_PWM_Start_DMA+0xaa>
  {
    return HAL_BUSY;
 8004be2:	2302      	movs	r3, #2
 8004be4:	e1a6      	b.n	8004f34 <HAL_TIM_PWM_Start_DMA+0x3f8>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d109      	bne.n	8004c00 <HAL_TIM_PWM_Start_DMA+0xc4>
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	bf0c      	ite	eq
 8004bf8:	2301      	moveq	r3, #1
 8004bfa:	2300      	movne	r3, #0
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	e03c      	b.n	8004c7a <HAL_TIM_PWM_Start_DMA+0x13e>
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	2b04      	cmp	r3, #4
 8004c04:	d109      	bne.n	8004c1a <HAL_TIM_PWM_Start_DMA+0xde>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	bf0c      	ite	eq
 8004c12:	2301      	moveq	r3, #1
 8004c14:	2300      	movne	r3, #0
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	e02f      	b.n	8004c7a <HAL_TIM_PWM_Start_DMA+0x13e>
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	2b08      	cmp	r3, #8
 8004c1e:	d109      	bne.n	8004c34 <HAL_TIM_PWM_Start_DMA+0xf8>
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	bf0c      	ite	eq
 8004c2c:	2301      	moveq	r3, #1
 8004c2e:	2300      	movne	r3, #0
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	e022      	b.n	8004c7a <HAL_TIM_PWM_Start_DMA+0x13e>
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	2b0c      	cmp	r3, #12
 8004c38:	d109      	bne.n	8004c4e <HAL_TIM_PWM_Start_DMA+0x112>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	bf0c      	ite	eq
 8004c46:	2301      	moveq	r3, #1
 8004c48:	2300      	movne	r3, #0
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	e015      	b.n	8004c7a <HAL_TIM_PWM_Start_DMA+0x13e>
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	2b10      	cmp	r3, #16
 8004c52:	d109      	bne.n	8004c68 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	bf0c      	ite	eq
 8004c60:	2301      	moveq	r3, #1
 8004c62:	2300      	movne	r3, #0
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	e008      	b.n	8004c7a <HAL_TIM_PWM_Start_DMA+0x13e>
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	bf0c      	ite	eq
 8004c74:	2301      	moveq	r3, #1
 8004c76:	2300      	movne	r3, #0
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d034      	beq.n	8004ce8 <HAL_TIM_PWM_Start_DMA+0x1ac>
  {
    if ((pData == NULL) && (Length > 0U))
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d104      	bne.n	8004c8e <HAL_TIM_PWM_Start_DMA+0x152>
 8004c84:	887b      	ldrh	r3, [r7, #2]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d001      	beq.n	8004c8e <HAL_TIM_PWM_Start_DMA+0x152>
    {
      return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e152      	b.n	8004f34 <HAL_TIM_PWM_Start_DMA+0x3f8>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d104      	bne.n	8004c9e <HAL_TIM_PWM_Start_DMA+0x162>
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2202      	movs	r2, #2
 8004c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c9c:	e026      	b.n	8004cec <HAL_TIM_PWM_Start_DMA+0x1b0>
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	2b04      	cmp	r3, #4
 8004ca2:	d104      	bne.n	8004cae <HAL_TIM_PWM_Start_DMA+0x172>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2202      	movs	r2, #2
 8004ca8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cac:	e01e      	b.n	8004cec <HAL_TIM_PWM_Start_DMA+0x1b0>
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	2b08      	cmp	r3, #8
 8004cb2:	d104      	bne.n	8004cbe <HAL_TIM_PWM_Start_DMA+0x182>
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2202      	movs	r2, #2
 8004cb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cbc:	e016      	b.n	8004cec <HAL_TIM_PWM_Start_DMA+0x1b0>
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	2b0c      	cmp	r3, #12
 8004cc2:	d104      	bne.n	8004cce <HAL_TIM_PWM_Start_DMA+0x192>
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2202      	movs	r2, #2
 8004cc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ccc:	e00e      	b.n	8004cec <HAL_TIM_PWM_Start_DMA+0x1b0>
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	2b10      	cmp	r3, #16
 8004cd2:	d104      	bne.n	8004cde <HAL_TIM_PWM_Start_DMA+0x1a2>
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2202      	movs	r2, #2
 8004cd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cdc:	e006      	b.n	8004cec <HAL_TIM_PWM_Start_DMA+0x1b0>
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2202      	movs	r2, #2
 8004ce2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ce6:	e001      	b.n	8004cec <HAL_TIM_PWM_Start_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e123      	b.n	8004f34 <HAL_TIM_PWM_Start_DMA+0x3f8>
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	2b0c      	cmp	r3, #12
 8004cf0:	f200 80ae 	bhi.w	8004e50 <HAL_TIM_PWM_Start_DMA+0x314>
 8004cf4:	a201      	add	r2, pc, #4	; (adr r2, 8004cfc <HAL_TIM_PWM_Start_DMA+0x1c0>)
 8004cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cfa:	bf00      	nop
 8004cfc:	08004d31 	.word	0x08004d31
 8004d00:	08004e51 	.word	0x08004e51
 8004d04:	08004e51 	.word	0x08004e51
 8004d08:	08004e51 	.word	0x08004e51
 8004d0c:	08004d79 	.word	0x08004d79
 8004d10:	08004e51 	.word	0x08004e51
 8004d14:	08004e51 	.word	0x08004e51
 8004d18:	08004e51 	.word	0x08004e51
 8004d1c:	08004dc1 	.word	0x08004dc1
 8004d20:	08004e51 	.word	0x08004e51
 8004d24:	08004e51 	.word	0x08004e51
 8004d28:	08004e51 	.word	0x08004e51
 8004d2c:	08004e09 	.word	0x08004e09
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d34:	4a81      	ldr	r2, [pc, #516]	; (8004f3c <HAL_TIM_PWM_Start_DMA+0x400>)
 8004d36:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3c:	4a80      	ldr	r2, [pc, #512]	; (8004f40 <HAL_TIM_PWM_Start_DMA+0x404>)
 8004d3e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d44:	4a7f      	ldr	r2, [pc, #508]	; (8004f44 <HAL_TIM_PWM_Start_DMA+0x408>)
 8004d46:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004d4c:	6879      	ldr	r1, [r7, #4]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	3334      	adds	r3, #52	; 0x34
 8004d54:	461a      	mov	r2, r3
 8004d56:	887b      	ldrh	r3, [r7, #2]
 8004d58:	f7fd fb12 	bl	8002380 <HAL_DMA_Start_IT>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d001      	beq.n	8004d66 <HAL_TIM_PWM_Start_DMA+0x22a>
      {
        /* Return error status */
        return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e0e6      	b.n	8004f34 <HAL_TIM_PWM_Start_DMA+0x3f8>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	68da      	ldr	r2, [r3, #12]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d74:	60da      	str	r2, [r3, #12]
      break;
 8004d76:	e06c      	b.n	8004e52 <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d7c:	4a6f      	ldr	r2, [pc, #444]	; (8004f3c <HAL_TIM_PWM_Start_DMA+0x400>)
 8004d7e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d84:	4a6e      	ldr	r2, [pc, #440]	; (8004f40 <HAL_TIM_PWM_Start_DMA+0x404>)
 8004d86:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d8c:	4a6d      	ldr	r2, [pc, #436]	; (8004f44 <HAL_TIM_PWM_Start_DMA+0x408>)
 8004d8e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004d94:	6879      	ldr	r1, [r7, #4]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	3338      	adds	r3, #56	; 0x38
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	887b      	ldrh	r3, [r7, #2]
 8004da0:	f7fd faee 	bl	8002380 <HAL_DMA_Start_IT>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d001      	beq.n	8004dae <HAL_TIM_PWM_Start_DMA+0x272>
      {
        /* Return error status */
        return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e0c2      	b.n	8004f34 <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68da      	ldr	r2, [r3, #12]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004dbc:	60da      	str	r2, [r3, #12]
      break;
 8004dbe:	e048      	b.n	8004e52 <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc4:	4a5d      	ldr	r2, [pc, #372]	; (8004f3c <HAL_TIM_PWM_Start_DMA+0x400>)
 8004dc6:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dcc:	4a5c      	ldr	r2, [pc, #368]	; (8004f40 <HAL_TIM_PWM_Start_DMA+0x404>)
 8004dce:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd4:	4a5b      	ldr	r2, [pc, #364]	; (8004f44 <HAL_TIM_PWM_Start_DMA+0x408>)
 8004dd6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004ddc:	6879      	ldr	r1, [r7, #4]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	333c      	adds	r3, #60	; 0x3c
 8004de4:	461a      	mov	r2, r3
 8004de6:	887b      	ldrh	r3, [r7, #2]
 8004de8:	f7fd faca 	bl	8002380 <HAL_DMA_Start_IT>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d001      	beq.n	8004df6 <HAL_TIM_PWM_Start_DMA+0x2ba>
      {
        /* Return error status */
        return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e09e      	b.n	8004f34 <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	68da      	ldr	r2, [r3, #12]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e04:	60da      	str	r2, [r3, #12]
      break;
 8004e06:	e024      	b.n	8004e52 <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e0c:	4a4b      	ldr	r2, [pc, #300]	; (8004f3c <HAL_TIM_PWM_Start_DMA+0x400>)
 8004e0e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e14:	4a4a      	ldr	r2, [pc, #296]	; (8004f40 <HAL_TIM_PWM_Start_DMA+0x404>)
 8004e16:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e1c:	4a49      	ldr	r2, [pc, #292]	; (8004f44 <HAL_TIM_PWM_Start_DMA+0x408>)
 8004e1e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004e24:	6879      	ldr	r1, [r7, #4]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	3340      	adds	r3, #64	; 0x40
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	887b      	ldrh	r3, [r7, #2]
 8004e30:	f7fd faa6 	bl	8002380 <HAL_DMA_Start_IT>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d001      	beq.n	8004e3e <HAL_TIM_PWM_Start_DMA+0x302>
      {
        /* Return error status */
        return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e07a      	b.n	8004f34 <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	68da      	ldr	r2, [r3, #12]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004e4c:	60da      	str	r2, [r3, #12]
      break;
 8004e4e:	e000      	b.n	8004e52 <HAL_TIM_PWM_Start_DMA+0x316>
    }

    default:
      break;
 8004e50:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	2201      	movs	r2, #1
 8004e58:	68b9      	ldr	r1, [r7, #8]
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f001 fd12 	bl	8006884 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a38      	ldr	r2, [pc, #224]	; (8004f48 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d013      	beq.n	8004e92 <HAL_TIM_PWM_Start_DMA+0x356>
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a37      	ldr	r2, [pc, #220]	; (8004f4c <HAL_TIM_PWM_Start_DMA+0x410>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d00e      	beq.n	8004e92 <HAL_TIM_PWM_Start_DMA+0x356>
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a35      	ldr	r2, [pc, #212]	; (8004f50 <HAL_TIM_PWM_Start_DMA+0x414>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d009      	beq.n	8004e92 <HAL_TIM_PWM_Start_DMA+0x356>
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a34      	ldr	r2, [pc, #208]	; (8004f54 <HAL_TIM_PWM_Start_DMA+0x418>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d004      	beq.n	8004e92 <HAL_TIM_PWM_Start_DMA+0x356>
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a32      	ldr	r2, [pc, #200]	; (8004f58 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d101      	bne.n	8004e96 <HAL_TIM_PWM_Start_DMA+0x35a>
 8004e92:	2301      	movs	r3, #1
 8004e94:	e000      	b.n	8004e98 <HAL_TIM_PWM_Start_DMA+0x35c>
 8004e96:	2300      	movs	r3, #0
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d007      	beq.n	8004eac <HAL_TIM_PWM_Start_DMA+0x370>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004eaa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a25      	ldr	r2, [pc, #148]	; (8004f48 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d01d      	beq.n	8004ef2 <HAL_TIM_PWM_Start_DMA+0x3b6>
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ebe:	d018      	beq.n	8004ef2 <HAL_TIM_PWM_Start_DMA+0x3b6>
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a25      	ldr	r2, [pc, #148]	; (8004f5c <HAL_TIM_PWM_Start_DMA+0x420>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d013      	beq.n	8004ef2 <HAL_TIM_PWM_Start_DMA+0x3b6>
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a24      	ldr	r2, [pc, #144]	; (8004f60 <HAL_TIM_PWM_Start_DMA+0x424>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d00e      	beq.n	8004ef2 <HAL_TIM_PWM_Start_DMA+0x3b6>
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a22      	ldr	r2, [pc, #136]	; (8004f64 <HAL_TIM_PWM_Start_DMA+0x428>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d009      	beq.n	8004ef2 <HAL_TIM_PWM_Start_DMA+0x3b6>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a1a      	ldr	r2, [pc, #104]	; (8004f4c <HAL_TIM_PWM_Start_DMA+0x410>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d004      	beq.n	8004ef2 <HAL_TIM_PWM_Start_DMA+0x3b6>
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a18      	ldr	r2, [pc, #96]	; (8004f50 <HAL_TIM_PWM_Start_DMA+0x414>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d115      	bne.n	8004f1e <HAL_TIM_PWM_Start_DMA+0x3e2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	689a      	ldr	r2, [r3, #8]
 8004ef8:	4b1b      	ldr	r3, [pc, #108]	; (8004f68 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8004efa:	4013      	ands	r3, r2
 8004efc:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	2b06      	cmp	r3, #6
 8004f02:	d015      	beq.n	8004f30 <HAL_TIM_PWM_Start_DMA+0x3f4>
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f0a:	d011      	beq.n	8004f30 <HAL_TIM_PWM_Start_DMA+0x3f4>
    {
      __HAL_TIM_ENABLE(htim);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f042 0201 	orr.w	r2, r2, #1
 8004f1a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f1c:	e008      	b.n	8004f30 <HAL_TIM_PWM_Start_DMA+0x3f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f042 0201 	orr.w	r2, r2, #1
 8004f2c:	601a      	str	r2, [r3, #0]
 8004f2e:	e000      	b.n	8004f32 <HAL_TIM_PWM_Start_DMA+0x3f6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f30:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f32:	2300      	movs	r3, #0
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3718      	adds	r7, #24
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	08005bf7 	.word	0x08005bf7
 8004f40:	08005c9f 	.word	0x08005c9f
 8004f44:	08005b65 	.word	0x08005b65
 8004f48:	40012c00 	.word	0x40012c00
 8004f4c:	40013400 	.word	0x40013400
 8004f50:	40014000 	.word	0x40014000
 8004f54:	40014400 	.word	0x40014400
 8004f58:	40014800 	.word	0x40014800
 8004f5c:	40000400 	.word	0x40000400
 8004f60:	40000800 	.word	0x40000800
 8004f64:	40000c00 	.word	0x40000c00
 8004f68:	00010007 	.word	0x00010007

08004f6c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d101      	bne.n	8004f7e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e049      	b.n	8005012 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d106      	bne.n	8004f98 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f000 f841 	bl	800501a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2202      	movs	r2, #2
 8004f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	3304      	adds	r3, #4
 8004fa8:	4619      	mov	r1, r3
 8004faa:	4610      	mov	r0, r2
 8004fac:	f000 feac 	bl	8005d08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3708      	adds	r7, #8
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}

0800501a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800501a:	b480      	push	{r7}
 800501c:	b083      	sub	sp, #12
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005022:	bf00      	nop
 8005024:	370c      	adds	r7, #12
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr
	...

08005030 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d104      	bne.n	800504a <HAL_TIM_IC_Start_IT+0x1a>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005046:	b2db      	uxtb	r3, r3
 8005048:	e023      	b.n	8005092 <HAL_TIM_IC_Start_IT+0x62>
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	2b04      	cmp	r3, #4
 800504e:	d104      	bne.n	800505a <HAL_TIM_IC_Start_IT+0x2a>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005056:	b2db      	uxtb	r3, r3
 8005058:	e01b      	b.n	8005092 <HAL_TIM_IC_Start_IT+0x62>
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	2b08      	cmp	r3, #8
 800505e:	d104      	bne.n	800506a <HAL_TIM_IC_Start_IT+0x3a>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005066:	b2db      	uxtb	r3, r3
 8005068:	e013      	b.n	8005092 <HAL_TIM_IC_Start_IT+0x62>
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	2b0c      	cmp	r3, #12
 800506e:	d104      	bne.n	800507a <HAL_TIM_IC_Start_IT+0x4a>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005076:	b2db      	uxtb	r3, r3
 8005078:	e00b      	b.n	8005092 <HAL_TIM_IC_Start_IT+0x62>
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	2b10      	cmp	r3, #16
 800507e:	d104      	bne.n	800508a <HAL_TIM_IC_Start_IT+0x5a>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005086:	b2db      	uxtb	r3, r3
 8005088:	e003      	b.n	8005092 <HAL_TIM_IC_Start_IT+0x62>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005090:	b2db      	uxtb	r3, r3
 8005092:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d104      	bne.n	80050a4 <HAL_TIM_IC_Start_IT+0x74>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	e013      	b.n	80050cc <HAL_TIM_IC_Start_IT+0x9c>
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	2b04      	cmp	r3, #4
 80050a8:	d104      	bne.n	80050b4 <HAL_TIM_IC_Start_IT+0x84>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	e00b      	b.n	80050cc <HAL_TIM_IC_Start_IT+0x9c>
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	2b08      	cmp	r3, #8
 80050b8:	d104      	bne.n	80050c4 <HAL_TIM_IC_Start_IT+0x94>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	e003      	b.n	80050cc <HAL_TIM_IC_Start_IT+0x9c>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80050ce:	7bfb      	ldrb	r3, [r7, #15]
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d102      	bne.n	80050da <HAL_TIM_IC_Start_IT+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80050d4:	7bbb      	ldrb	r3, [r7, #14]
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d001      	beq.n	80050de <HAL_TIM_IC_Start_IT+0xae>
  {
    return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e0d8      	b.n	8005290 <HAL_TIM_IC_Start_IT+0x260>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d104      	bne.n	80050ee <HAL_TIM_IC_Start_IT+0xbe>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2202      	movs	r2, #2
 80050e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050ec:	e023      	b.n	8005136 <HAL_TIM_IC_Start_IT+0x106>
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	2b04      	cmp	r3, #4
 80050f2:	d104      	bne.n	80050fe <HAL_TIM_IC_Start_IT+0xce>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2202      	movs	r2, #2
 80050f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050fc:	e01b      	b.n	8005136 <HAL_TIM_IC_Start_IT+0x106>
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	2b08      	cmp	r3, #8
 8005102:	d104      	bne.n	800510e <HAL_TIM_IC_Start_IT+0xde>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2202      	movs	r2, #2
 8005108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800510c:	e013      	b.n	8005136 <HAL_TIM_IC_Start_IT+0x106>
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	2b0c      	cmp	r3, #12
 8005112:	d104      	bne.n	800511e <HAL_TIM_IC_Start_IT+0xee>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2202      	movs	r2, #2
 8005118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800511c:	e00b      	b.n	8005136 <HAL_TIM_IC_Start_IT+0x106>
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	2b10      	cmp	r3, #16
 8005122:	d104      	bne.n	800512e <HAL_TIM_IC_Start_IT+0xfe>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2202      	movs	r2, #2
 8005128:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800512c:	e003      	b.n	8005136 <HAL_TIM_IC_Start_IT+0x106>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2202      	movs	r2, #2
 8005132:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d104      	bne.n	8005146 <HAL_TIM_IC_Start_IT+0x116>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2202      	movs	r2, #2
 8005140:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005144:	e013      	b.n	800516e <HAL_TIM_IC_Start_IT+0x13e>
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	2b04      	cmp	r3, #4
 800514a:	d104      	bne.n	8005156 <HAL_TIM_IC_Start_IT+0x126>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2202      	movs	r2, #2
 8005150:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005154:	e00b      	b.n	800516e <HAL_TIM_IC_Start_IT+0x13e>
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	2b08      	cmp	r3, #8
 800515a:	d104      	bne.n	8005166 <HAL_TIM_IC_Start_IT+0x136>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2202      	movs	r2, #2
 8005160:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005164:	e003      	b.n	800516e <HAL_TIM_IC_Start_IT+0x13e>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2202      	movs	r2, #2
 800516a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	2b0c      	cmp	r3, #12
 8005172:	d841      	bhi.n	80051f8 <HAL_TIM_IC_Start_IT+0x1c8>
 8005174:	a201      	add	r2, pc, #4	; (adr r2, 800517c <HAL_TIM_IC_Start_IT+0x14c>)
 8005176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800517a:	bf00      	nop
 800517c:	080051b1 	.word	0x080051b1
 8005180:	080051f9 	.word	0x080051f9
 8005184:	080051f9 	.word	0x080051f9
 8005188:	080051f9 	.word	0x080051f9
 800518c:	080051c3 	.word	0x080051c3
 8005190:	080051f9 	.word	0x080051f9
 8005194:	080051f9 	.word	0x080051f9
 8005198:	080051f9 	.word	0x080051f9
 800519c:	080051d5 	.word	0x080051d5
 80051a0:	080051f9 	.word	0x080051f9
 80051a4:	080051f9 	.word	0x080051f9
 80051a8:	080051f9 	.word	0x080051f9
 80051ac:	080051e7 	.word	0x080051e7
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	68da      	ldr	r2, [r3, #12]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f042 0202 	orr.w	r2, r2, #2
 80051be:	60da      	str	r2, [r3, #12]
      break;
 80051c0:	e01b      	b.n	80051fa <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	68da      	ldr	r2, [r3, #12]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f042 0204 	orr.w	r2, r2, #4
 80051d0:	60da      	str	r2, [r3, #12]
      break;
 80051d2:	e012      	b.n	80051fa <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	68da      	ldr	r2, [r3, #12]
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f042 0208 	orr.w	r2, r2, #8
 80051e2:	60da      	str	r2, [r3, #12]
      break;
 80051e4:	e009      	b.n	80051fa <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	68da      	ldr	r2, [r3, #12]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f042 0210 	orr.w	r2, r2, #16
 80051f4:	60da      	str	r2, [r3, #12]
      break;
 80051f6:	e000      	b.n	80051fa <HAL_TIM_IC_Start_IT+0x1ca>
    }

    default:
      break;
 80051f8:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	2201      	movs	r2, #1
 8005200:	6839      	ldr	r1, [r7, #0]
 8005202:	4618      	mov	r0, r3
 8005204:	f001 fb3e 	bl	8006884 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a22      	ldr	r2, [pc, #136]	; (8005298 <HAL_TIM_IC_Start_IT+0x268>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d01d      	beq.n	800524e <HAL_TIM_IC_Start_IT+0x21e>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800521a:	d018      	beq.n	800524e <HAL_TIM_IC_Start_IT+0x21e>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a1e      	ldr	r2, [pc, #120]	; (800529c <HAL_TIM_IC_Start_IT+0x26c>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d013      	beq.n	800524e <HAL_TIM_IC_Start_IT+0x21e>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a1d      	ldr	r2, [pc, #116]	; (80052a0 <HAL_TIM_IC_Start_IT+0x270>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d00e      	beq.n	800524e <HAL_TIM_IC_Start_IT+0x21e>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a1b      	ldr	r2, [pc, #108]	; (80052a4 <HAL_TIM_IC_Start_IT+0x274>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d009      	beq.n	800524e <HAL_TIM_IC_Start_IT+0x21e>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a1a      	ldr	r2, [pc, #104]	; (80052a8 <HAL_TIM_IC_Start_IT+0x278>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d004      	beq.n	800524e <HAL_TIM_IC_Start_IT+0x21e>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a18      	ldr	r2, [pc, #96]	; (80052ac <HAL_TIM_IC_Start_IT+0x27c>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d115      	bne.n	800527a <HAL_TIM_IC_Start_IT+0x24a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	689a      	ldr	r2, [r3, #8]
 8005254:	4b16      	ldr	r3, [pc, #88]	; (80052b0 <HAL_TIM_IC_Start_IT+0x280>)
 8005256:	4013      	ands	r3, r2
 8005258:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	2b06      	cmp	r3, #6
 800525e:	d015      	beq.n	800528c <HAL_TIM_IC_Start_IT+0x25c>
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005266:	d011      	beq.n	800528c <HAL_TIM_IC_Start_IT+0x25c>
    {
      __HAL_TIM_ENABLE(htim);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f042 0201 	orr.w	r2, r2, #1
 8005276:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005278:	e008      	b.n	800528c <HAL_TIM_IC_Start_IT+0x25c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f042 0201 	orr.w	r2, r2, #1
 8005288:	601a      	str	r2, [r3, #0]
 800528a:	e000      	b.n	800528e <HAL_TIM_IC_Start_IT+0x25e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800528c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800528e:	2300      	movs	r3, #0
}
 8005290:	4618      	mov	r0, r3
 8005292:	3710      	adds	r7, #16
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}
 8005298:	40012c00 	.word	0x40012c00
 800529c:	40000400 	.word	0x40000400
 80052a0:	40000800 	.word	0x40000800
 80052a4:	40000c00 	.word	0x40000c00
 80052a8:	40013400 	.word	0x40013400
 80052ac:	40014000 	.word	0x40014000
 80052b0:	00010007 	.word	0x00010007

080052b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b082      	sub	sp, #8
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	f003 0302 	and.w	r3, r3, #2
 80052c6:	2b02      	cmp	r3, #2
 80052c8:	d122      	bne.n	8005310 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	f003 0302 	and.w	r3, r3, #2
 80052d4:	2b02      	cmp	r3, #2
 80052d6:	d11b      	bne.n	8005310 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f06f 0202 	mvn.w	r2, #2
 80052e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2201      	movs	r2, #1
 80052e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	699b      	ldr	r3, [r3, #24]
 80052ee:	f003 0303 	and.w	r3, r3, #3
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d003      	beq.n	80052fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f7fb fa84 	bl	8000804 <HAL_TIM_IC_CaptureCallback>
 80052fc:	e005      	b.n	800530a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 fbf2 	bl	8005ae8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f000 fbf9 	bl	8005afc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	f003 0304 	and.w	r3, r3, #4
 800531a:	2b04      	cmp	r3, #4
 800531c:	d122      	bne.n	8005364 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	f003 0304 	and.w	r3, r3, #4
 8005328:	2b04      	cmp	r3, #4
 800532a:	d11b      	bne.n	8005364 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f06f 0204 	mvn.w	r2, #4
 8005334:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2202      	movs	r2, #2
 800533a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	699b      	ldr	r3, [r3, #24]
 8005342:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005346:	2b00      	cmp	r3, #0
 8005348:	d003      	beq.n	8005352 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f7fb fa5a 	bl	8000804 <HAL_TIM_IC_CaptureCallback>
 8005350:	e005      	b.n	800535e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 fbc8 	bl	8005ae8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f000 fbcf 	bl	8005afc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	f003 0308 	and.w	r3, r3, #8
 800536e:	2b08      	cmp	r3, #8
 8005370:	d122      	bne.n	80053b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	f003 0308 	and.w	r3, r3, #8
 800537c:	2b08      	cmp	r3, #8
 800537e:	d11b      	bne.n	80053b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f06f 0208 	mvn.w	r2, #8
 8005388:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2204      	movs	r2, #4
 800538e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	69db      	ldr	r3, [r3, #28]
 8005396:	f003 0303 	and.w	r3, r3, #3
 800539a:	2b00      	cmp	r3, #0
 800539c:	d003      	beq.n	80053a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f7fb fa30 	bl	8000804 <HAL_TIM_IC_CaptureCallback>
 80053a4:	e005      	b.n	80053b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 fb9e 	bl	8005ae8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f000 fba5 	bl	8005afc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	f003 0310 	and.w	r3, r3, #16
 80053c2:	2b10      	cmp	r3, #16
 80053c4:	d122      	bne.n	800540c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	f003 0310 	and.w	r3, r3, #16
 80053d0:	2b10      	cmp	r3, #16
 80053d2:	d11b      	bne.n	800540c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f06f 0210 	mvn.w	r2, #16
 80053dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2208      	movs	r2, #8
 80053e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	69db      	ldr	r3, [r3, #28]
 80053ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d003      	beq.n	80053fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f7fb fa06 	bl	8000804 <HAL_TIM_IC_CaptureCallback>
 80053f8:	e005      	b.n	8005406 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f000 fb74 	bl	8005ae8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f000 fb7b 	bl	8005afc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	f003 0301 	and.w	r3, r3, #1
 8005416:	2b01      	cmp	r3, #1
 8005418:	d10e      	bne.n	8005438 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	f003 0301 	and.w	r3, r3, #1
 8005424:	2b01      	cmp	r3, #1
 8005426:	d107      	bne.n	8005438 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f06f 0201 	mvn.w	r2, #1
 8005430:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 fb4e 	bl	8005ad4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005442:	2b80      	cmp	r3, #128	; 0x80
 8005444:	d10e      	bne.n	8005464 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005450:	2b80      	cmp	r3, #128	; 0x80
 8005452:	d107      	bne.n	8005464 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800545c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f001 fac8 	bl	80069f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	691b      	ldr	r3, [r3, #16]
 800546a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800546e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005472:	d10e      	bne.n	8005492 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800547e:	2b80      	cmp	r3, #128	; 0x80
 8005480:	d107      	bne.n	8005492 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800548a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f001 fabb 	bl	8006a08 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	691b      	ldr	r3, [r3, #16]
 8005498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800549c:	2b40      	cmp	r3, #64	; 0x40
 800549e:	d10e      	bne.n	80054be <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054aa:	2b40      	cmp	r3, #64	; 0x40
 80054ac:	d107      	bne.n	80054be <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f000 fb33 	bl	8005b24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	691b      	ldr	r3, [r3, #16]
 80054c4:	f003 0320 	and.w	r3, r3, #32
 80054c8:	2b20      	cmp	r3, #32
 80054ca:	d10e      	bne.n	80054ea <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	f003 0320 	and.w	r3, r3, #32
 80054d6:	2b20      	cmp	r3, #32
 80054d8:	d107      	bne.n	80054ea <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f06f 0220 	mvn.w	r2, #32
 80054e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f001 fa7b 	bl	80069e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054ea:	bf00      	nop
 80054ec:	3708      	adds	r7, #8
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}

080054f2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80054f2:	b580      	push	{r7, lr}
 80054f4:	b084      	sub	sp, #16
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	60f8      	str	r0, [r7, #12]
 80054fa:	60b9      	str	r1, [r7, #8]
 80054fc:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005504:	2b01      	cmp	r3, #1
 8005506:	d101      	bne.n	800550c <HAL_TIM_IC_ConfigChannel+0x1a>
 8005508:	2302      	movs	r3, #2
 800550a:	e082      	b.n	8005612 <HAL_TIM_IC_ConfigChannel+0x120>
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d11b      	bne.n	8005552 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6818      	ldr	r0, [r3, #0]
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	6819      	ldr	r1, [r3, #0]
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	685a      	ldr	r2, [r3, #4]
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	f000 ffed 	bl	8006508 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	699a      	ldr	r2, [r3, #24]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f022 020c 	bic.w	r2, r2, #12
 800553c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	6999      	ldr	r1, [r3, #24]
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	689a      	ldr	r2, [r3, #8]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	430a      	orrs	r2, r1
 800554e:	619a      	str	r2, [r3, #24]
 8005550:	e05a      	b.n	8005608 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2b04      	cmp	r3, #4
 8005556:	d11c      	bne.n	8005592 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6818      	ldr	r0, [r3, #0]
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	6819      	ldr	r1, [r3, #0]
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	685a      	ldr	r2, [r3, #4]
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	f001 f86b 	bl	8006642 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	699a      	ldr	r2, [r3, #24]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800557a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	6999      	ldr	r1, [r3, #24]
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	021a      	lsls	r2, r3, #8
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	430a      	orrs	r2, r1
 800558e:	619a      	str	r2, [r3, #24]
 8005590:	e03a      	b.n	8005608 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2b08      	cmp	r3, #8
 8005596:	d11b      	bne.n	80055d0 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6818      	ldr	r0, [r3, #0]
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	6819      	ldr	r1, [r3, #0]
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	685a      	ldr	r2, [r3, #4]
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	f001 f8b8 	bl	800671c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	69da      	ldr	r2, [r3, #28]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f022 020c 	bic.w	r2, r2, #12
 80055ba:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	69d9      	ldr	r1, [r3, #28]
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	689a      	ldr	r2, [r3, #8]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	430a      	orrs	r2, r1
 80055cc:	61da      	str	r2, [r3, #28]
 80055ce:	e01b      	b.n	8005608 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6818      	ldr	r0, [r3, #0]
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	6819      	ldr	r1, [r3, #0]
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	685a      	ldr	r2, [r3, #4]
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	f001 f8d8 	bl	8006794 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	69da      	ldr	r2, [r3, #28]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80055f2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	69d9      	ldr	r1, [r3, #28]
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	021a      	lsls	r2, r3, #8
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	430a      	orrs	r2, r1
 8005606:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2200      	movs	r2, #0
 800560c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005610:	2300      	movs	r3, #0
}
 8005612:	4618      	mov	r0, r3
 8005614:	3710      	adds	r7, #16
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
	...

0800561c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
 8005622:	60f8      	str	r0, [r7, #12]
 8005624:	60b9      	str	r1, [r7, #8]
 8005626:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800562e:	2b01      	cmp	r3, #1
 8005630:	d101      	bne.n	8005636 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005632:	2302      	movs	r3, #2
 8005634:	e0fd      	b.n	8005832 <HAL_TIM_PWM_ConfigChannel+0x216>
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2201      	movs	r2, #1
 800563a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2b14      	cmp	r3, #20
 8005642:	f200 80f0 	bhi.w	8005826 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8005646:	a201      	add	r2, pc, #4	; (adr r2, 800564c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800564c:	080056a1 	.word	0x080056a1
 8005650:	08005827 	.word	0x08005827
 8005654:	08005827 	.word	0x08005827
 8005658:	08005827 	.word	0x08005827
 800565c:	080056e1 	.word	0x080056e1
 8005660:	08005827 	.word	0x08005827
 8005664:	08005827 	.word	0x08005827
 8005668:	08005827 	.word	0x08005827
 800566c:	08005723 	.word	0x08005723
 8005670:	08005827 	.word	0x08005827
 8005674:	08005827 	.word	0x08005827
 8005678:	08005827 	.word	0x08005827
 800567c:	08005763 	.word	0x08005763
 8005680:	08005827 	.word	0x08005827
 8005684:	08005827 	.word	0x08005827
 8005688:	08005827 	.word	0x08005827
 800568c:	080057a5 	.word	0x080057a5
 8005690:	08005827 	.word	0x08005827
 8005694:	08005827 	.word	0x08005827
 8005698:	08005827 	.word	0x08005827
 800569c:	080057e5 	.word	0x080057e5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	68b9      	ldr	r1, [r7, #8]
 80056a6:	4618      	mov	r0, r3
 80056a8:	f000 fbc8 	bl	8005e3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	699a      	ldr	r2, [r3, #24]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f042 0208 	orr.w	r2, r2, #8
 80056ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	699a      	ldr	r2, [r3, #24]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f022 0204 	bic.w	r2, r2, #4
 80056ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	6999      	ldr	r1, [r3, #24]
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	691a      	ldr	r2, [r3, #16]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	430a      	orrs	r2, r1
 80056dc:	619a      	str	r2, [r3, #24]
      break;
 80056de:	e0a3      	b.n	8005828 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	68b9      	ldr	r1, [r7, #8]
 80056e6:	4618      	mov	r0, r3
 80056e8:	f000 fc38 	bl	8005f5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	699a      	ldr	r2, [r3, #24]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	699a      	ldr	r2, [r3, #24]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800570a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	6999      	ldr	r1, [r3, #24]
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	021a      	lsls	r2, r3, #8
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	430a      	orrs	r2, r1
 800571e:	619a      	str	r2, [r3, #24]
      break;
 8005720:	e082      	b.n	8005828 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	68b9      	ldr	r1, [r7, #8]
 8005728:	4618      	mov	r0, r3
 800572a:	f000 fca1 	bl	8006070 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	69da      	ldr	r2, [r3, #28]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f042 0208 	orr.w	r2, r2, #8
 800573c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	69da      	ldr	r2, [r3, #28]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f022 0204 	bic.w	r2, r2, #4
 800574c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	69d9      	ldr	r1, [r3, #28]
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	691a      	ldr	r2, [r3, #16]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	430a      	orrs	r2, r1
 800575e:	61da      	str	r2, [r3, #28]
      break;
 8005760:	e062      	b.n	8005828 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	68b9      	ldr	r1, [r7, #8]
 8005768:	4618      	mov	r0, r3
 800576a:	f000 fd09 	bl	8006180 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	69da      	ldr	r2, [r3, #28]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800577c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	69da      	ldr	r2, [r3, #28]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800578c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	69d9      	ldr	r1, [r3, #28]
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	691b      	ldr	r3, [r3, #16]
 8005798:	021a      	lsls	r2, r3, #8
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	430a      	orrs	r2, r1
 80057a0:	61da      	str	r2, [r3, #28]
      break;
 80057a2:	e041      	b.n	8005828 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	68b9      	ldr	r1, [r7, #8]
 80057aa:	4618      	mov	r0, r3
 80057ac:	f000 fd52 	bl	8006254 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f042 0208 	orr.w	r2, r2, #8
 80057be:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f022 0204 	bic.w	r2, r2, #4
 80057ce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	691a      	ldr	r2, [r3, #16]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	430a      	orrs	r2, r1
 80057e0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80057e2:	e021      	b.n	8005828 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	68b9      	ldr	r1, [r7, #8]
 80057ea:	4618      	mov	r0, r3
 80057ec:	f000 fd96 	bl	800631c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057fe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800580e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	691b      	ldr	r3, [r3, #16]
 800581a:	021a      	lsls	r2, r3, #8
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	430a      	orrs	r2, r1
 8005822:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005824:	e000      	b.n	8005828 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8005826:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2200      	movs	r2, #0
 800582c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005830:	2300      	movs	r3, #0
}
 8005832:	4618      	mov	r0, r3
 8005834:	3710      	adds	r7, #16
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop

0800583c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b084      	sub	sp, #16
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800584c:	2b01      	cmp	r3, #1
 800584e:	d101      	bne.n	8005854 <HAL_TIM_ConfigClockSource+0x18>
 8005850:	2302      	movs	r3, #2
 8005852:	e0b5      	b.n	80059c0 <HAL_TIM_ConfigClockSource+0x184>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2202      	movs	r2, #2
 8005860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005872:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005876:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800587e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	68fa      	ldr	r2, [r7, #12]
 8005886:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005890:	d03e      	beq.n	8005910 <HAL_TIM_ConfigClockSource+0xd4>
 8005892:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005896:	f200 8087 	bhi.w	80059a8 <HAL_TIM_ConfigClockSource+0x16c>
 800589a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800589e:	f000 8085 	beq.w	80059ac <HAL_TIM_ConfigClockSource+0x170>
 80058a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058a6:	d87f      	bhi.n	80059a8 <HAL_TIM_ConfigClockSource+0x16c>
 80058a8:	2b70      	cmp	r3, #112	; 0x70
 80058aa:	d01a      	beq.n	80058e2 <HAL_TIM_ConfigClockSource+0xa6>
 80058ac:	2b70      	cmp	r3, #112	; 0x70
 80058ae:	d87b      	bhi.n	80059a8 <HAL_TIM_ConfigClockSource+0x16c>
 80058b0:	2b60      	cmp	r3, #96	; 0x60
 80058b2:	d050      	beq.n	8005956 <HAL_TIM_ConfigClockSource+0x11a>
 80058b4:	2b60      	cmp	r3, #96	; 0x60
 80058b6:	d877      	bhi.n	80059a8 <HAL_TIM_ConfigClockSource+0x16c>
 80058b8:	2b50      	cmp	r3, #80	; 0x50
 80058ba:	d03c      	beq.n	8005936 <HAL_TIM_ConfigClockSource+0xfa>
 80058bc:	2b50      	cmp	r3, #80	; 0x50
 80058be:	d873      	bhi.n	80059a8 <HAL_TIM_ConfigClockSource+0x16c>
 80058c0:	2b40      	cmp	r3, #64	; 0x40
 80058c2:	d058      	beq.n	8005976 <HAL_TIM_ConfigClockSource+0x13a>
 80058c4:	2b40      	cmp	r3, #64	; 0x40
 80058c6:	d86f      	bhi.n	80059a8 <HAL_TIM_ConfigClockSource+0x16c>
 80058c8:	2b30      	cmp	r3, #48	; 0x30
 80058ca:	d064      	beq.n	8005996 <HAL_TIM_ConfigClockSource+0x15a>
 80058cc:	2b30      	cmp	r3, #48	; 0x30
 80058ce:	d86b      	bhi.n	80059a8 <HAL_TIM_ConfigClockSource+0x16c>
 80058d0:	2b20      	cmp	r3, #32
 80058d2:	d060      	beq.n	8005996 <HAL_TIM_ConfigClockSource+0x15a>
 80058d4:	2b20      	cmp	r3, #32
 80058d6:	d867      	bhi.n	80059a8 <HAL_TIM_ConfigClockSource+0x16c>
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d05c      	beq.n	8005996 <HAL_TIM_ConfigClockSource+0x15a>
 80058dc:	2b10      	cmp	r3, #16
 80058de:	d05a      	beq.n	8005996 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80058e0:	e062      	b.n	80059a8 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6818      	ldr	r0, [r3, #0]
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	6899      	ldr	r1, [r3, #8]
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	685a      	ldr	r2, [r3, #4]
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	f000 ffa7 	bl	8006844 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005904:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	68fa      	ldr	r2, [r7, #12]
 800590c:	609a      	str	r2, [r3, #8]
      break;
 800590e:	e04e      	b.n	80059ae <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6818      	ldr	r0, [r3, #0]
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	6899      	ldr	r1, [r3, #8]
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	685a      	ldr	r2, [r3, #4]
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	f000 ff90 	bl	8006844 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	689a      	ldr	r2, [r3, #8]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005932:	609a      	str	r2, [r3, #8]
      break;
 8005934:	e03b      	b.n	80059ae <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6818      	ldr	r0, [r3, #0]
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	6859      	ldr	r1, [r3, #4]
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	461a      	mov	r2, r3
 8005944:	f000 fe4e 	bl	80065e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	2150      	movs	r1, #80	; 0x50
 800594e:	4618      	mov	r0, r3
 8005950:	f000 ff5d 	bl	800680e <TIM_ITRx_SetConfig>
      break;
 8005954:	e02b      	b.n	80059ae <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6818      	ldr	r0, [r3, #0]
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	6859      	ldr	r1, [r3, #4]
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	68db      	ldr	r3, [r3, #12]
 8005962:	461a      	mov	r2, r3
 8005964:	f000 feaa 	bl	80066bc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	2160      	movs	r1, #96	; 0x60
 800596e:	4618      	mov	r0, r3
 8005970:	f000 ff4d 	bl	800680e <TIM_ITRx_SetConfig>
      break;
 8005974:	e01b      	b.n	80059ae <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6818      	ldr	r0, [r3, #0]
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	6859      	ldr	r1, [r3, #4]
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	68db      	ldr	r3, [r3, #12]
 8005982:	461a      	mov	r2, r3
 8005984:	f000 fe2e 	bl	80065e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	2140      	movs	r1, #64	; 0x40
 800598e:	4618      	mov	r0, r3
 8005990:	f000 ff3d 	bl	800680e <TIM_ITRx_SetConfig>
      break;
 8005994:	e00b      	b.n	80059ae <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4619      	mov	r1, r3
 80059a0:	4610      	mov	r0, r2
 80059a2:	f000 ff34 	bl	800680e <TIM_ITRx_SetConfig>
        break;
 80059a6:	e002      	b.n	80059ae <HAL_TIM_ConfigClockSource+0x172>
      break;
 80059a8:	bf00      	nop
 80059aa:	e000      	b.n	80059ae <HAL_TIM_ConfigClockSource+0x172>
      break;
 80059ac:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2201      	movs	r2, #1
 80059b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059be:	2300      	movs	r3, #0
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3710      	adds	r7, #16
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}

080059c8 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b082      	sub	sp, #8
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d101      	bne.n	80059e0 <HAL_TIM_SlaveConfigSynchro+0x18>
 80059dc:	2302      	movs	r3, #2
 80059de:	e031      	b.n	8005a44 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2202      	movs	r2, #2
 80059ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80059f0:	6839      	ldr	r1, [r7, #0]
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 fcf8 	bl	80063e8 <TIM_SlaveTimer_SetConfig>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d009      	beq.n	8005a12 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2201      	movs	r2, #1
 8005a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e018      	b.n	8005a44 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	68da      	ldr	r2, [r3, #12]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a20:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68da      	ldr	r2, [r3, #12]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005a30:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2201      	movs	r2, #1
 8005a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a42:	2300      	movs	r3, #0
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3708      	adds	r7, #8
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}

08005a4c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b085      	sub	sp, #20
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005a56:	2300      	movs	r3, #0
 8005a58:	60fb      	str	r3, [r7, #12]
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	2b0c      	cmp	r3, #12
 8005a5e:	d831      	bhi.n	8005ac4 <HAL_TIM_ReadCapturedValue+0x78>
 8005a60:	a201      	add	r2, pc, #4	; (adr r2, 8005a68 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a66:	bf00      	nop
 8005a68:	08005a9d 	.word	0x08005a9d
 8005a6c:	08005ac5 	.word	0x08005ac5
 8005a70:	08005ac5 	.word	0x08005ac5
 8005a74:	08005ac5 	.word	0x08005ac5
 8005a78:	08005aa7 	.word	0x08005aa7
 8005a7c:	08005ac5 	.word	0x08005ac5
 8005a80:	08005ac5 	.word	0x08005ac5
 8005a84:	08005ac5 	.word	0x08005ac5
 8005a88:	08005ab1 	.word	0x08005ab1
 8005a8c:	08005ac5 	.word	0x08005ac5
 8005a90:	08005ac5 	.word	0x08005ac5
 8005a94:	08005ac5 	.word	0x08005ac5
 8005a98:	08005abb 	.word	0x08005abb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aa2:	60fb      	str	r3, [r7, #12]

      break;
 8005aa4:	e00f      	b.n	8005ac6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aac:	60fb      	str	r3, [r7, #12]

      break;
 8005aae:	e00a      	b.n	8005ac6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ab6:	60fb      	str	r3, [r7, #12]

      break;
 8005ab8:	e005      	b.n	8005ac6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac0:	60fb      	str	r3, [r7, #12]

      break;
 8005ac2:	e000      	b.n	8005ac6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005ac4:	bf00      	nop
  }

  return tmpreg;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3714      	adds	r7, #20
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr

08005ad4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005adc:	bf00      	nop
 8005ade:	370c      	adds	r7, #12
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr

08005ae8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b083      	sub	sp, #12
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005af0:	bf00      	nop
 8005af2:	370c      	adds	r7, #12
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b04:	bf00      	nop
 8005b06:	370c      	adds	r7, #12
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8005b18:	bf00      	nop
 8005b1a:	370c      	adds	r7, #12
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b2c:	bf00      	nop
 8005b2e:	370c      	adds	r7, #12
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005b40:	bf00      	nop
 8005b42:	370c      	adds	r7, #12
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr

08005b4c <HAL_TIM_GetActiveChannel>:
  * @brief  Return the TIM Encoder Mode handle state.
  * @param  htim TIM handle
  * @retval Active channel
  */
HAL_TIM_ActiveChannel HAL_TIM_GetActiveChannel(TIM_HandleTypeDef *htim)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b083      	sub	sp, #12
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  return htim->Channel;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	7f1b      	ldrb	r3, [r3, #28]
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	370c      	adds	r7, #12
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr

08005b64 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b084      	sub	sp, #16
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b70:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d107      	bne.n	8005b8c <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2201      	movs	r2, #1
 8005b86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b8a:	e02a      	b.n	8005be2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d107      	bne.n	8005ba6 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2202      	movs	r2, #2
 8005b9a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ba4:	e01d      	b.n	8005be2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d107      	bne.n	8005bc0 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2204      	movs	r2, #4
 8005bb4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bbe:	e010      	b.n	8005be2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d107      	bne.n	8005bda <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2208      	movs	r2, #8
 8005bce:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005bd8:	e003      	b.n	8005be2 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2201      	movs	r2, #1
 8005bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005be2:	68f8      	ldr	r0, [r7, #12]
 8005be4:	f7ff ffa8 	bl	8005b38 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2200      	movs	r2, #0
 8005bec:	771a      	strb	r2, [r3, #28]
}
 8005bee:	bf00      	nop
 8005bf0:	3710      	adds	r7, #16
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}

08005bf6 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8005bf6:	b580      	push	{r7, lr}
 8005bf8:	b084      	sub	sp, #16
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c02:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d10b      	bne.n	8005c26 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2201      	movs	r2, #1
 8005c12:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	69db      	ldr	r3, [r3, #28]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d136      	bne.n	8005c8a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c24:	e031      	b.n	8005c8a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d10b      	bne.n	8005c48 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2202      	movs	r2, #2
 8005c34:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	69db      	ldr	r3, [r3, #28]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d125      	bne.n	8005c8a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2201      	movs	r2, #1
 8005c42:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c46:	e020      	b.n	8005c8a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d10b      	bne.n	8005c6a <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2204      	movs	r2, #4
 8005c56:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	69db      	ldr	r3, [r3, #28]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d114      	bne.n	8005c8a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c68:	e00f      	b.n	8005c8a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d10a      	bne.n	8005c8a <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2208      	movs	r2, #8
 8005c78:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	69db      	ldr	r3, [r3, #28]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d103      	bne.n	8005c8a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2201      	movs	r2, #1
 8005c86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c8a:	68f8      	ldr	r0, [r7, #12]
 8005c8c:	f7ff ff36 	bl	8005afc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2200      	movs	r2, #0
 8005c94:	771a      	strb	r2, [r3, #28]
}
 8005c96:	bf00      	nop
 8005c98:	3710      	adds	r7, #16
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}

08005c9e <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005c9e:	b580      	push	{r7, lr}
 8005ca0:	b084      	sub	sp, #16
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005caa:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d103      	bne.n	8005cbe <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2201      	movs	r2, #1
 8005cba:	771a      	strb	r2, [r3, #28]
 8005cbc:	e019      	b.n	8005cf2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d103      	bne.n	8005cd0 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2202      	movs	r2, #2
 8005ccc:	771a      	strb	r2, [r3, #28]
 8005cce:	e010      	b.n	8005cf2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d103      	bne.n	8005ce2 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2204      	movs	r2, #4
 8005cde:	771a      	strb	r2, [r3, #28]
 8005ce0:	e007      	b.n	8005cf2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d102      	bne.n	8005cf2 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2208      	movs	r2, #8
 8005cf0:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005cf2:	68f8      	ldr	r0, [r7, #12]
 8005cf4:	f7ff ff0c 	bl	8005b10 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	771a      	strb	r2, [r3, #28]
}
 8005cfe:	bf00      	nop
 8005d00:	3710      	adds	r7, #16
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}
	...

08005d08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b085      	sub	sp, #20
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4a40      	ldr	r2, [pc, #256]	; (8005e1c <TIM_Base_SetConfig+0x114>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d013      	beq.n	8005d48 <TIM_Base_SetConfig+0x40>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d26:	d00f      	beq.n	8005d48 <TIM_Base_SetConfig+0x40>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4a3d      	ldr	r2, [pc, #244]	; (8005e20 <TIM_Base_SetConfig+0x118>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d00b      	beq.n	8005d48 <TIM_Base_SetConfig+0x40>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a3c      	ldr	r2, [pc, #240]	; (8005e24 <TIM_Base_SetConfig+0x11c>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d007      	beq.n	8005d48 <TIM_Base_SetConfig+0x40>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	4a3b      	ldr	r2, [pc, #236]	; (8005e28 <TIM_Base_SetConfig+0x120>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d003      	beq.n	8005d48 <TIM_Base_SetConfig+0x40>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4a3a      	ldr	r2, [pc, #232]	; (8005e2c <TIM_Base_SetConfig+0x124>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d108      	bne.n	8005d5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4a2f      	ldr	r2, [pc, #188]	; (8005e1c <TIM_Base_SetConfig+0x114>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d01f      	beq.n	8005da2 <TIM_Base_SetConfig+0x9a>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d68:	d01b      	beq.n	8005da2 <TIM_Base_SetConfig+0x9a>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4a2c      	ldr	r2, [pc, #176]	; (8005e20 <TIM_Base_SetConfig+0x118>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d017      	beq.n	8005da2 <TIM_Base_SetConfig+0x9a>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	4a2b      	ldr	r2, [pc, #172]	; (8005e24 <TIM_Base_SetConfig+0x11c>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d013      	beq.n	8005da2 <TIM_Base_SetConfig+0x9a>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	4a2a      	ldr	r2, [pc, #168]	; (8005e28 <TIM_Base_SetConfig+0x120>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d00f      	beq.n	8005da2 <TIM_Base_SetConfig+0x9a>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4a29      	ldr	r2, [pc, #164]	; (8005e2c <TIM_Base_SetConfig+0x124>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d00b      	beq.n	8005da2 <TIM_Base_SetConfig+0x9a>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4a28      	ldr	r2, [pc, #160]	; (8005e30 <TIM_Base_SetConfig+0x128>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d007      	beq.n	8005da2 <TIM_Base_SetConfig+0x9a>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a27      	ldr	r2, [pc, #156]	; (8005e34 <TIM_Base_SetConfig+0x12c>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d003      	beq.n	8005da2 <TIM_Base_SetConfig+0x9a>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a26      	ldr	r2, [pc, #152]	; (8005e38 <TIM_Base_SetConfig+0x130>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d108      	bne.n	8005db4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005da8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	68fa      	ldr	r2, [r7, #12]
 8005db0:	4313      	orrs	r3, r2
 8005db2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	695b      	ldr	r3, [r3, #20]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	68fa      	ldr	r2, [r7, #12]
 8005dc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	689a      	ldr	r2, [r3, #8]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	4a10      	ldr	r2, [pc, #64]	; (8005e1c <TIM_Base_SetConfig+0x114>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d00f      	beq.n	8005e00 <TIM_Base_SetConfig+0xf8>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	4a12      	ldr	r2, [pc, #72]	; (8005e2c <TIM_Base_SetConfig+0x124>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d00b      	beq.n	8005e00 <TIM_Base_SetConfig+0xf8>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	4a11      	ldr	r2, [pc, #68]	; (8005e30 <TIM_Base_SetConfig+0x128>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d007      	beq.n	8005e00 <TIM_Base_SetConfig+0xf8>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	4a10      	ldr	r2, [pc, #64]	; (8005e34 <TIM_Base_SetConfig+0x12c>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d003      	beq.n	8005e00 <TIM_Base_SetConfig+0xf8>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	4a0f      	ldr	r2, [pc, #60]	; (8005e38 <TIM_Base_SetConfig+0x130>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d103      	bne.n	8005e08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	691a      	ldr	r2, [r3, #16]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	615a      	str	r2, [r3, #20]
}
 8005e0e:	bf00      	nop
 8005e10:	3714      	adds	r7, #20
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr
 8005e1a:	bf00      	nop
 8005e1c:	40012c00 	.word	0x40012c00
 8005e20:	40000400 	.word	0x40000400
 8005e24:	40000800 	.word	0x40000800
 8005e28:	40000c00 	.word	0x40000c00
 8005e2c:	40013400 	.word	0x40013400
 8005e30:	40014000 	.word	0x40014000
 8005e34:	40014400 	.word	0x40014400
 8005e38:	40014800 	.word	0x40014800

08005e3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b087      	sub	sp, #28
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6a1b      	ldr	r3, [r3, #32]
 8005e4a:	f023 0201 	bic.w	r2, r3, #1
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6a1b      	ldr	r3, [r3, #32]
 8005e56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	699b      	ldr	r3, [r3, #24]
 8005e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f023 0303 	bic.w	r3, r3, #3
 8005e76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68fa      	ldr	r2, [r7, #12]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	f023 0302 	bic.w	r3, r3, #2
 8005e88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	697a      	ldr	r2, [r7, #20]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	4a2c      	ldr	r2, [pc, #176]	; (8005f48 <TIM_OC1_SetConfig+0x10c>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d00f      	beq.n	8005ebc <TIM_OC1_SetConfig+0x80>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	4a2b      	ldr	r2, [pc, #172]	; (8005f4c <TIM_OC1_SetConfig+0x110>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d00b      	beq.n	8005ebc <TIM_OC1_SetConfig+0x80>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	4a2a      	ldr	r2, [pc, #168]	; (8005f50 <TIM_OC1_SetConfig+0x114>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d007      	beq.n	8005ebc <TIM_OC1_SetConfig+0x80>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	4a29      	ldr	r2, [pc, #164]	; (8005f54 <TIM_OC1_SetConfig+0x118>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d003      	beq.n	8005ebc <TIM_OC1_SetConfig+0x80>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	4a28      	ldr	r2, [pc, #160]	; (8005f58 <TIM_OC1_SetConfig+0x11c>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d10c      	bne.n	8005ed6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	f023 0308 	bic.w	r3, r3, #8
 8005ec2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	697a      	ldr	r2, [r7, #20]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	f023 0304 	bic.w	r3, r3, #4
 8005ed4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4a1b      	ldr	r2, [pc, #108]	; (8005f48 <TIM_OC1_SetConfig+0x10c>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d00f      	beq.n	8005efe <TIM_OC1_SetConfig+0xc2>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4a1a      	ldr	r2, [pc, #104]	; (8005f4c <TIM_OC1_SetConfig+0x110>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d00b      	beq.n	8005efe <TIM_OC1_SetConfig+0xc2>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	4a19      	ldr	r2, [pc, #100]	; (8005f50 <TIM_OC1_SetConfig+0x114>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d007      	beq.n	8005efe <TIM_OC1_SetConfig+0xc2>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4a18      	ldr	r2, [pc, #96]	; (8005f54 <TIM_OC1_SetConfig+0x118>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d003      	beq.n	8005efe <TIM_OC1_SetConfig+0xc2>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4a17      	ldr	r2, [pc, #92]	; (8005f58 <TIM_OC1_SetConfig+0x11c>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d111      	bne.n	8005f22 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	695b      	ldr	r3, [r3, #20]
 8005f12:	693a      	ldr	r2, [r7, #16]
 8005f14:	4313      	orrs	r3, r2
 8005f16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	699b      	ldr	r3, [r3, #24]
 8005f1c:	693a      	ldr	r2, [r7, #16]
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	693a      	ldr	r2, [r7, #16]
 8005f26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	68fa      	ldr	r2, [r7, #12]
 8005f2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	685a      	ldr	r2, [r3, #4]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	697a      	ldr	r2, [r7, #20]
 8005f3a:	621a      	str	r2, [r3, #32]
}
 8005f3c:	bf00      	nop
 8005f3e:	371c      	adds	r7, #28
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr
 8005f48:	40012c00 	.word	0x40012c00
 8005f4c:	40013400 	.word	0x40013400
 8005f50:	40014000 	.word	0x40014000
 8005f54:	40014400 	.word	0x40014400
 8005f58:	40014800 	.word	0x40014800

08005f5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b087      	sub	sp, #28
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6a1b      	ldr	r3, [r3, #32]
 8005f6a:	f023 0210 	bic.w	r2, r3, #16
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a1b      	ldr	r3, [r3, #32]
 8005f76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	699b      	ldr	r3, [r3, #24]
 8005f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	021b      	lsls	r3, r3, #8
 8005f9e:	68fa      	ldr	r2, [r7, #12]
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	f023 0320 	bic.w	r3, r3, #32
 8005faa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	011b      	lsls	r3, r3, #4
 8005fb2:	697a      	ldr	r2, [r7, #20]
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	4a28      	ldr	r2, [pc, #160]	; (800605c <TIM_OC2_SetConfig+0x100>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d003      	beq.n	8005fc8 <TIM_OC2_SetConfig+0x6c>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4a27      	ldr	r2, [pc, #156]	; (8006060 <TIM_OC2_SetConfig+0x104>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d10d      	bne.n	8005fe4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	011b      	lsls	r3, r3, #4
 8005fd6:	697a      	ldr	r2, [r7, #20]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fe2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	4a1d      	ldr	r2, [pc, #116]	; (800605c <TIM_OC2_SetConfig+0x100>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d00f      	beq.n	800600c <TIM_OC2_SetConfig+0xb0>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	4a1c      	ldr	r2, [pc, #112]	; (8006060 <TIM_OC2_SetConfig+0x104>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d00b      	beq.n	800600c <TIM_OC2_SetConfig+0xb0>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	4a1b      	ldr	r2, [pc, #108]	; (8006064 <TIM_OC2_SetConfig+0x108>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d007      	beq.n	800600c <TIM_OC2_SetConfig+0xb0>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	4a1a      	ldr	r2, [pc, #104]	; (8006068 <TIM_OC2_SetConfig+0x10c>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d003      	beq.n	800600c <TIM_OC2_SetConfig+0xb0>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	4a19      	ldr	r2, [pc, #100]	; (800606c <TIM_OC2_SetConfig+0x110>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d113      	bne.n	8006034 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006012:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800601a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	695b      	ldr	r3, [r3, #20]
 8006020:	009b      	lsls	r3, r3, #2
 8006022:	693a      	ldr	r2, [r7, #16]
 8006024:	4313      	orrs	r3, r2
 8006026:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	699b      	ldr	r3, [r3, #24]
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	693a      	ldr	r2, [r7, #16]
 8006030:	4313      	orrs	r3, r2
 8006032:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	693a      	ldr	r2, [r7, #16]
 8006038:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	68fa      	ldr	r2, [r7, #12]
 800603e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	685a      	ldr	r2, [r3, #4]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	697a      	ldr	r2, [r7, #20]
 800604c:	621a      	str	r2, [r3, #32]
}
 800604e:	bf00      	nop
 8006050:	371c      	adds	r7, #28
 8006052:	46bd      	mov	sp, r7
 8006054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006058:	4770      	bx	lr
 800605a:	bf00      	nop
 800605c:	40012c00 	.word	0x40012c00
 8006060:	40013400 	.word	0x40013400
 8006064:	40014000 	.word	0x40014000
 8006068:	40014400 	.word	0x40014400
 800606c:	40014800 	.word	0x40014800

08006070 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006070:	b480      	push	{r7}
 8006072:	b087      	sub	sp, #28
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6a1b      	ldr	r3, [r3, #32]
 800607e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6a1b      	ldr	r3, [r3, #32]
 800608a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	69db      	ldr	r3, [r3, #28]
 8006096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800609e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f023 0303 	bic.w	r3, r3, #3
 80060aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	68fa      	ldr	r2, [r7, #12]
 80060b2:	4313      	orrs	r3, r2
 80060b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80060bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	021b      	lsls	r3, r3, #8
 80060c4:	697a      	ldr	r2, [r7, #20]
 80060c6:	4313      	orrs	r3, r2
 80060c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4a27      	ldr	r2, [pc, #156]	; (800616c <TIM_OC3_SetConfig+0xfc>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d003      	beq.n	80060da <TIM_OC3_SetConfig+0x6a>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	4a26      	ldr	r2, [pc, #152]	; (8006170 <TIM_OC3_SetConfig+0x100>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d10d      	bne.n	80060f6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	68db      	ldr	r3, [r3, #12]
 80060e6:	021b      	lsls	r3, r3, #8
 80060e8:	697a      	ldr	r2, [r7, #20]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80060f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	4a1c      	ldr	r2, [pc, #112]	; (800616c <TIM_OC3_SetConfig+0xfc>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d00f      	beq.n	800611e <TIM_OC3_SetConfig+0xae>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	4a1b      	ldr	r2, [pc, #108]	; (8006170 <TIM_OC3_SetConfig+0x100>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d00b      	beq.n	800611e <TIM_OC3_SetConfig+0xae>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	4a1a      	ldr	r2, [pc, #104]	; (8006174 <TIM_OC3_SetConfig+0x104>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d007      	beq.n	800611e <TIM_OC3_SetConfig+0xae>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	4a19      	ldr	r2, [pc, #100]	; (8006178 <TIM_OC3_SetConfig+0x108>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d003      	beq.n	800611e <TIM_OC3_SetConfig+0xae>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	4a18      	ldr	r2, [pc, #96]	; (800617c <TIM_OC3_SetConfig+0x10c>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d113      	bne.n	8006146 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006124:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800612c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	695b      	ldr	r3, [r3, #20]
 8006132:	011b      	lsls	r3, r3, #4
 8006134:	693a      	ldr	r2, [r7, #16]
 8006136:	4313      	orrs	r3, r2
 8006138:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	699b      	ldr	r3, [r3, #24]
 800613e:	011b      	lsls	r3, r3, #4
 8006140:	693a      	ldr	r2, [r7, #16]
 8006142:	4313      	orrs	r3, r2
 8006144:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	693a      	ldr	r2, [r7, #16]
 800614a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	68fa      	ldr	r2, [r7, #12]
 8006150:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	685a      	ldr	r2, [r3, #4]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	697a      	ldr	r2, [r7, #20]
 800615e:	621a      	str	r2, [r3, #32]
}
 8006160:	bf00      	nop
 8006162:	371c      	adds	r7, #28
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr
 800616c:	40012c00 	.word	0x40012c00
 8006170:	40013400 	.word	0x40013400
 8006174:	40014000 	.word	0x40014000
 8006178:	40014400 	.word	0x40014400
 800617c:	40014800 	.word	0x40014800

08006180 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006180:	b480      	push	{r7}
 8006182:	b087      	sub	sp, #28
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6a1b      	ldr	r3, [r3, #32]
 800618e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6a1b      	ldr	r3, [r3, #32]
 800619a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	69db      	ldr	r3, [r3, #28]
 80061a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80061ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	021b      	lsls	r3, r3, #8
 80061c2:	68fa      	ldr	r2, [r7, #12]
 80061c4:	4313      	orrs	r3, r2
 80061c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80061ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	031b      	lsls	r3, r3, #12
 80061d6:	693a      	ldr	r2, [r7, #16]
 80061d8:	4313      	orrs	r3, r2
 80061da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	4a18      	ldr	r2, [pc, #96]	; (8006240 <TIM_OC4_SetConfig+0xc0>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d00f      	beq.n	8006204 <TIM_OC4_SetConfig+0x84>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	4a17      	ldr	r2, [pc, #92]	; (8006244 <TIM_OC4_SetConfig+0xc4>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d00b      	beq.n	8006204 <TIM_OC4_SetConfig+0x84>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	4a16      	ldr	r2, [pc, #88]	; (8006248 <TIM_OC4_SetConfig+0xc8>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d007      	beq.n	8006204 <TIM_OC4_SetConfig+0x84>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	4a15      	ldr	r2, [pc, #84]	; (800624c <TIM_OC4_SetConfig+0xcc>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d003      	beq.n	8006204 <TIM_OC4_SetConfig+0x84>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	4a14      	ldr	r2, [pc, #80]	; (8006250 <TIM_OC4_SetConfig+0xd0>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d109      	bne.n	8006218 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800620a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	695b      	ldr	r3, [r3, #20]
 8006210:	019b      	lsls	r3, r3, #6
 8006212:	697a      	ldr	r2, [r7, #20]
 8006214:	4313      	orrs	r3, r2
 8006216:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	697a      	ldr	r2, [r7, #20]
 800621c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	68fa      	ldr	r2, [r7, #12]
 8006222:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	685a      	ldr	r2, [r3, #4]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	693a      	ldr	r2, [r7, #16]
 8006230:	621a      	str	r2, [r3, #32]
}
 8006232:	bf00      	nop
 8006234:	371c      	adds	r7, #28
 8006236:	46bd      	mov	sp, r7
 8006238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623c:	4770      	bx	lr
 800623e:	bf00      	nop
 8006240:	40012c00 	.word	0x40012c00
 8006244:	40013400 	.word	0x40013400
 8006248:	40014000 	.word	0x40014000
 800624c:	40014400 	.word	0x40014400
 8006250:	40014800 	.word	0x40014800

08006254 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006254:	b480      	push	{r7}
 8006256:	b087      	sub	sp, #28
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6a1b      	ldr	r3, [r3, #32]
 8006262:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6a1b      	ldr	r3, [r3, #32]
 800626e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800627a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006286:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	68fa      	ldr	r2, [r7, #12]
 800628e:	4313      	orrs	r3, r2
 8006290:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006298:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	041b      	lsls	r3, r3, #16
 80062a0:	693a      	ldr	r2, [r7, #16]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	4a17      	ldr	r2, [pc, #92]	; (8006308 <TIM_OC5_SetConfig+0xb4>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d00f      	beq.n	80062ce <TIM_OC5_SetConfig+0x7a>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	4a16      	ldr	r2, [pc, #88]	; (800630c <TIM_OC5_SetConfig+0xb8>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d00b      	beq.n	80062ce <TIM_OC5_SetConfig+0x7a>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	4a15      	ldr	r2, [pc, #84]	; (8006310 <TIM_OC5_SetConfig+0xbc>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d007      	beq.n	80062ce <TIM_OC5_SetConfig+0x7a>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4a14      	ldr	r2, [pc, #80]	; (8006314 <TIM_OC5_SetConfig+0xc0>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d003      	beq.n	80062ce <TIM_OC5_SetConfig+0x7a>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4a13      	ldr	r2, [pc, #76]	; (8006318 <TIM_OC5_SetConfig+0xc4>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d109      	bne.n	80062e2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062d4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	695b      	ldr	r3, [r3, #20]
 80062da:	021b      	lsls	r3, r3, #8
 80062dc:	697a      	ldr	r2, [r7, #20]
 80062de:	4313      	orrs	r3, r2
 80062e0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	697a      	ldr	r2, [r7, #20]
 80062e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	68fa      	ldr	r2, [r7, #12]
 80062ec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	685a      	ldr	r2, [r3, #4]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	693a      	ldr	r2, [r7, #16]
 80062fa:	621a      	str	r2, [r3, #32]
}
 80062fc:	bf00      	nop
 80062fe:	371c      	adds	r7, #28
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr
 8006308:	40012c00 	.word	0x40012c00
 800630c:	40013400 	.word	0x40013400
 8006310:	40014000 	.word	0x40014000
 8006314:	40014400 	.word	0x40014400
 8006318:	40014800 	.word	0x40014800

0800631c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800631c:	b480      	push	{r7}
 800631e:	b087      	sub	sp, #28
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6a1b      	ldr	r3, [r3, #32]
 800632a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6a1b      	ldr	r3, [r3, #32]
 8006336:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800634a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800634e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	021b      	lsls	r3, r3, #8
 8006356:	68fa      	ldr	r2, [r7, #12]
 8006358:	4313      	orrs	r3, r2
 800635a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006362:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	051b      	lsls	r3, r3, #20
 800636a:	693a      	ldr	r2, [r7, #16]
 800636c:	4313      	orrs	r3, r2
 800636e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	4a18      	ldr	r2, [pc, #96]	; (80063d4 <TIM_OC6_SetConfig+0xb8>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d00f      	beq.n	8006398 <TIM_OC6_SetConfig+0x7c>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	4a17      	ldr	r2, [pc, #92]	; (80063d8 <TIM_OC6_SetConfig+0xbc>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d00b      	beq.n	8006398 <TIM_OC6_SetConfig+0x7c>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	4a16      	ldr	r2, [pc, #88]	; (80063dc <TIM_OC6_SetConfig+0xc0>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d007      	beq.n	8006398 <TIM_OC6_SetConfig+0x7c>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	4a15      	ldr	r2, [pc, #84]	; (80063e0 <TIM_OC6_SetConfig+0xc4>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d003      	beq.n	8006398 <TIM_OC6_SetConfig+0x7c>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	4a14      	ldr	r2, [pc, #80]	; (80063e4 <TIM_OC6_SetConfig+0xc8>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d109      	bne.n	80063ac <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800639e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	695b      	ldr	r3, [r3, #20]
 80063a4:	029b      	lsls	r3, r3, #10
 80063a6:	697a      	ldr	r2, [r7, #20]
 80063a8:	4313      	orrs	r3, r2
 80063aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	697a      	ldr	r2, [r7, #20]
 80063b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	68fa      	ldr	r2, [r7, #12]
 80063b6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	685a      	ldr	r2, [r3, #4]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	693a      	ldr	r2, [r7, #16]
 80063c4:	621a      	str	r2, [r3, #32]
}
 80063c6:	bf00      	nop
 80063c8:	371c      	adds	r7, #28
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr
 80063d2:	bf00      	nop
 80063d4:	40012c00 	.word	0x40012c00
 80063d8:	40013400 	.word	0x40013400
 80063dc:	40014000 	.word	0x40014000
 80063e0:	40014400 	.word	0x40014400
 80063e4:	40014800 	.word	0x40014800

080063e8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b086      	sub	sp, #24
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006400:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	697a      	ldr	r2, [r7, #20]
 8006408:	4313      	orrs	r3, r2
 800640a:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006412:	f023 0307 	bic.w	r3, r3, #7
 8006416:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	697a      	ldr	r2, [r7, #20]
 800641e:	4313      	orrs	r3, r2
 8006420:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	697a      	ldr	r2, [r7, #20]
 8006428:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	2b70      	cmp	r3, #112	; 0x70
 8006430:	d01a      	beq.n	8006468 <TIM_SlaveTimer_SetConfig+0x80>
 8006432:	2b70      	cmp	r3, #112	; 0x70
 8006434:	d860      	bhi.n	80064f8 <TIM_SlaveTimer_SetConfig+0x110>
 8006436:	2b60      	cmp	r3, #96	; 0x60
 8006438:	d054      	beq.n	80064e4 <TIM_SlaveTimer_SetConfig+0xfc>
 800643a:	2b60      	cmp	r3, #96	; 0x60
 800643c:	d85c      	bhi.n	80064f8 <TIM_SlaveTimer_SetConfig+0x110>
 800643e:	2b50      	cmp	r3, #80	; 0x50
 8006440:	d046      	beq.n	80064d0 <TIM_SlaveTimer_SetConfig+0xe8>
 8006442:	2b50      	cmp	r3, #80	; 0x50
 8006444:	d858      	bhi.n	80064f8 <TIM_SlaveTimer_SetConfig+0x110>
 8006446:	2b40      	cmp	r3, #64	; 0x40
 8006448:	d019      	beq.n	800647e <TIM_SlaveTimer_SetConfig+0x96>
 800644a:	2b40      	cmp	r3, #64	; 0x40
 800644c:	d854      	bhi.n	80064f8 <TIM_SlaveTimer_SetConfig+0x110>
 800644e:	2b30      	cmp	r3, #48	; 0x30
 8006450:	d054      	beq.n	80064fc <TIM_SlaveTimer_SetConfig+0x114>
 8006452:	2b30      	cmp	r3, #48	; 0x30
 8006454:	d850      	bhi.n	80064f8 <TIM_SlaveTimer_SetConfig+0x110>
 8006456:	2b20      	cmp	r3, #32
 8006458:	d050      	beq.n	80064fc <TIM_SlaveTimer_SetConfig+0x114>
 800645a:	2b20      	cmp	r3, #32
 800645c:	d84c      	bhi.n	80064f8 <TIM_SlaveTimer_SetConfig+0x110>
 800645e:	2b00      	cmp	r3, #0
 8006460:	d04c      	beq.n	80064fc <TIM_SlaveTimer_SetConfig+0x114>
 8006462:	2b10      	cmp	r3, #16
 8006464:	d04a      	beq.n	80064fc <TIM_SlaveTimer_SetConfig+0x114>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8006466:	e047      	b.n	80064f8 <TIM_SlaveTimer_SetConfig+0x110>
      TIM_ETR_SetConfig(htim->Instance,
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6818      	ldr	r0, [r3, #0]
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	68d9      	ldr	r1, [r3, #12]
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	689a      	ldr	r2, [r3, #8]
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	691b      	ldr	r3, [r3, #16]
 8006478:	f000 f9e4 	bl	8006844 <TIM_ETR_SetConfig>
      break;
 800647c:	e03f      	b.n	80064fe <TIM_SlaveTimer_SetConfig+0x116>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	2b05      	cmp	r3, #5
 8006484:	d101      	bne.n	800648a <TIM_SlaveTimer_SetConfig+0xa2>
        return HAL_ERROR;
 8006486:	2301      	movs	r3, #1
 8006488:	e03a      	b.n	8006500 <TIM_SlaveTimer_SetConfig+0x118>
      tmpccer = htim->Instance->CCER;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	6a1b      	ldr	r3, [r3, #32]
 8006490:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	6a1a      	ldr	r2, [r3, #32]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f022 0201 	bic.w	r2, r2, #1
 80064a0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	699b      	ldr	r3, [r3, #24]
 80064a8:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064b0:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	011b      	lsls	r3, r3, #4
 80064b8:	68fa      	ldr	r2, [r7, #12]
 80064ba:	4313      	orrs	r3, r2
 80064bc:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	68fa      	ldr	r2, [r7, #12]
 80064c4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	693a      	ldr	r2, [r7, #16]
 80064cc:	621a      	str	r2, [r3, #32]
      break;
 80064ce:	e016      	b.n	80064fe <TIM_SlaveTimer_SetConfig+0x116>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6818      	ldr	r0, [r3, #0]
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	6899      	ldr	r1, [r3, #8]
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	691b      	ldr	r3, [r3, #16]
 80064dc:	461a      	mov	r2, r3
 80064de:	f000 f881 	bl	80065e4 <TIM_TI1_ConfigInputStage>
      break;
 80064e2:	e00c      	b.n	80064fe <TIM_SlaveTimer_SetConfig+0x116>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6818      	ldr	r0, [r3, #0]
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	6899      	ldr	r1, [r3, #8]
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	691b      	ldr	r3, [r3, #16]
 80064f0:	461a      	mov	r2, r3
 80064f2:	f000 f8e3 	bl	80066bc <TIM_TI2_ConfigInputStage>
      break;
 80064f6:	e002      	b.n	80064fe <TIM_SlaveTimer_SetConfig+0x116>
      break;
 80064f8:	bf00      	nop
 80064fa:	e000      	b.n	80064fe <TIM_SlaveTimer_SetConfig+0x116>
        break;
 80064fc:	bf00      	nop
  }
  return HAL_OK;
 80064fe:	2300      	movs	r3, #0
}
 8006500:	4618      	mov	r0, r3
 8006502:	3718      	adds	r7, #24
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}

08006508 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006508:	b480      	push	{r7}
 800650a:	b087      	sub	sp, #28
 800650c:	af00      	add	r7, sp, #0
 800650e:	60f8      	str	r0, [r7, #12]
 8006510:	60b9      	str	r1, [r7, #8]
 8006512:	607a      	str	r2, [r7, #4]
 8006514:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	6a1b      	ldr	r3, [r3, #32]
 800651a:	f023 0201 	bic.w	r2, r3, #1
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	699b      	ldr	r3, [r3, #24]
 8006526:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	6a1b      	ldr	r3, [r3, #32]
 800652c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	4a26      	ldr	r2, [pc, #152]	; (80065cc <TIM_TI1_SetConfig+0xc4>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d017      	beq.n	8006566 <TIM_TI1_SetConfig+0x5e>
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800653c:	d013      	beq.n	8006566 <TIM_TI1_SetConfig+0x5e>
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	4a23      	ldr	r2, [pc, #140]	; (80065d0 <TIM_TI1_SetConfig+0xc8>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d00f      	beq.n	8006566 <TIM_TI1_SetConfig+0x5e>
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	4a22      	ldr	r2, [pc, #136]	; (80065d4 <TIM_TI1_SetConfig+0xcc>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d00b      	beq.n	8006566 <TIM_TI1_SetConfig+0x5e>
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	4a21      	ldr	r2, [pc, #132]	; (80065d8 <TIM_TI1_SetConfig+0xd0>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d007      	beq.n	8006566 <TIM_TI1_SetConfig+0x5e>
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	4a20      	ldr	r2, [pc, #128]	; (80065dc <TIM_TI1_SetConfig+0xd4>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d003      	beq.n	8006566 <TIM_TI1_SetConfig+0x5e>
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	4a1f      	ldr	r2, [pc, #124]	; (80065e0 <TIM_TI1_SetConfig+0xd8>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d101      	bne.n	800656a <TIM_TI1_SetConfig+0x62>
 8006566:	2301      	movs	r3, #1
 8006568:	e000      	b.n	800656c <TIM_TI1_SetConfig+0x64>
 800656a:	2300      	movs	r3, #0
 800656c:	2b00      	cmp	r3, #0
 800656e:	d008      	beq.n	8006582 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	f023 0303 	bic.w	r3, r3, #3
 8006576:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006578:	697a      	ldr	r2, [r7, #20]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	4313      	orrs	r3, r2
 800657e:	617b      	str	r3, [r7, #20]
 8006580:	e003      	b.n	800658a <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	f043 0301 	orr.w	r3, r3, #1
 8006588:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006590:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	011b      	lsls	r3, r3, #4
 8006596:	b2db      	uxtb	r3, r3
 8006598:	697a      	ldr	r2, [r7, #20]
 800659a:	4313      	orrs	r3, r2
 800659c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	f023 030a 	bic.w	r3, r3, #10
 80065a4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	f003 030a 	and.w	r3, r3, #10
 80065ac:	693a      	ldr	r2, [r7, #16]
 80065ae:	4313      	orrs	r3, r2
 80065b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	697a      	ldr	r2, [r7, #20]
 80065b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	693a      	ldr	r2, [r7, #16]
 80065bc:	621a      	str	r2, [r3, #32]
}
 80065be:	bf00      	nop
 80065c0:	371c      	adds	r7, #28
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr
 80065ca:	bf00      	nop
 80065cc:	40012c00 	.word	0x40012c00
 80065d0:	40000400 	.word	0x40000400
 80065d4:	40000800 	.word	0x40000800
 80065d8:	40000c00 	.word	0x40000c00
 80065dc:	40013400 	.word	0x40013400
 80065e0:	40014000 	.word	0x40014000

080065e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b087      	sub	sp, #28
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	60f8      	str	r0, [r7, #12]
 80065ec:	60b9      	str	r1, [r7, #8]
 80065ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	6a1b      	ldr	r3, [r3, #32]
 80065f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	6a1b      	ldr	r3, [r3, #32]
 80065fa:	f023 0201 	bic.w	r2, r3, #1
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	699b      	ldr	r3, [r3, #24]
 8006606:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800660e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	011b      	lsls	r3, r3, #4
 8006614:	693a      	ldr	r2, [r7, #16]
 8006616:	4313      	orrs	r3, r2
 8006618:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	f023 030a 	bic.w	r3, r3, #10
 8006620:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006622:	697a      	ldr	r2, [r7, #20]
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	4313      	orrs	r3, r2
 8006628:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	693a      	ldr	r2, [r7, #16]
 800662e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	697a      	ldr	r2, [r7, #20]
 8006634:	621a      	str	r2, [r3, #32]
}
 8006636:	bf00      	nop
 8006638:	371c      	adds	r7, #28
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr

08006642 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006642:	b480      	push	{r7}
 8006644:	b087      	sub	sp, #28
 8006646:	af00      	add	r7, sp, #0
 8006648:	60f8      	str	r0, [r7, #12]
 800664a:	60b9      	str	r1, [r7, #8]
 800664c:	607a      	str	r2, [r7, #4]
 800664e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	6a1b      	ldr	r3, [r3, #32]
 8006654:	f023 0210 	bic.w	r2, r3, #16
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	699b      	ldr	r3, [r3, #24]
 8006660:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	6a1b      	ldr	r3, [r3, #32]
 8006666:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800666e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	021b      	lsls	r3, r3, #8
 8006674:	697a      	ldr	r2, [r7, #20]
 8006676:	4313      	orrs	r3, r2
 8006678:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006680:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	031b      	lsls	r3, r3, #12
 8006686:	b29b      	uxth	r3, r3
 8006688:	697a      	ldr	r2, [r7, #20]
 800668a:	4313      	orrs	r3, r2
 800668c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006694:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	011b      	lsls	r3, r3, #4
 800669a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800669e:	693a      	ldr	r2, [r7, #16]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	697a      	ldr	r2, [r7, #20]
 80066a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	693a      	ldr	r2, [r7, #16]
 80066ae:	621a      	str	r2, [r3, #32]
}
 80066b0:	bf00      	nop
 80066b2:	371c      	adds	r7, #28
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr

080066bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066bc:	b480      	push	{r7}
 80066be:	b087      	sub	sp, #28
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	60f8      	str	r0, [r7, #12]
 80066c4:	60b9      	str	r1, [r7, #8]
 80066c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6a1b      	ldr	r3, [r3, #32]
 80066cc:	f023 0210 	bic.w	r2, r3, #16
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	699b      	ldr	r3, [r3, #24]
 80066d8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	6a1b      	ldr	r3, [r3, #32]
 80066de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80066e6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	031b      	lsls	r3, r3, #12
 80066ec:	697a      	ldr	r2, [r7, #20]
 80066ee:	4313      	orrs	r3, r2
 80066f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80066f8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	011b      	lsls	r3, r3, #4
 80066fe:	693a      	ldr	r2, [r7, #16]
 8006700:	4313      	orrs	r3, r2
 8006702:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	697a      	ldr	r2, [r7, #20]
 8006708:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	693a      	ldr	r2, [r7, #16]
 800670e:	621a      	str	r2, [r3, #32]
}
 8006710:	bf00      	nop
 8006712:	371c      	adds	r7, #28
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr

0800671c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800671c:	b480      	push	{r7}
 800671e:	b087      	sub	sp, #28
 8006720:	af00      	add	r7, sp, #0
 8006722:	60f8      	str	r0, [r7, #12]
 8006724:	60b9      	str	r1, [r7, #8]
 8006726:	607a      	str	r2, [r7, #4]
 8006728:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	6a1b      	ldr	r3, [r3, #32]
 800672e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	69db      	ldr	r3, [r3, #28]
 800673a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	6a1b      	ldr	r3, [r3, #32]
 8006740:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	f023 0303 	bic.w	r3, r3, #3
 8006748:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800674a:	697a      	ldr	r2, [r7, #20]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	4313      	orrs	r3, r2
 8006750:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006758:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	011b      	lsls	r3, r3, #4
 800675e:	b2db      	uxtb	r3, r3
 8006760:	697a      	ldr	r2, [r7, #20]
 8006762:	4313      	orrs	r3, r2
 8006764:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800676c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	021b      	lsls	r3, r3, #8
 8006772:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006776:	693a      	ldr	r2, [r7, #16]
 8006778:	4313      	orrs	r3, r2
 800677a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	697a      	ldr	r2, [r7, #20]
 8006780:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	693a      	ldr	r2, [r7, #16]
 8006786:	621a      	str	r2, [r3, #32]
}
 8006788:	bf00      	nop
 800678a:	371c      	adds	r7, #28
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr

08006794 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006794:	b480      	push	{r7}
 8006796:	b087      	sub	sp, #28
 8006798:	af00      	add	r7, sp, #0
 800679a:	60f8      	str	r0, [r7, #12]
 800679c:	60b9      	str	r1, [r7, #8]
 800679e:	607a      	str	r2, [r7, #4]
 80067a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	6a1b      	ldr	r3, [r3, #32]
 80067a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	69db      	ldr	r3, [r3, #28]
 80067b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	6a1b      	ldr	r3, [r3, #32]
 80067b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067c0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	021b      	lsls	r3, r3, #8
 80067c6:	697a      	ldr	r2, [r7, #20]
 80067c8:	4313      	orrs	r3, r2
 80067ca:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80067d2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	031b      	lsls	r3, r3, #12
 80067d8:	b29b      	uxth	r3, r3
 80067da:	697a      	ldr	r2, [r7, #20]
 80067dc:	4313      	orrs	r3, r2
 80067de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80067e6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	031b      	lsls	r3, r3, #12
 80067ec:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80067f0:	693a      	ldr	r2, [r7, #16]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	697a      	ldr	r2, [r7, #20]
 80067fa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	693a      	ldr	r2, [r7, #16]
 8006800:	621a      	str	r2, [r3, #32]
}
 8006802:	bf00      	nop
 8006804:	371c      	adds	r7, #28
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr

0800680e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800680e:	b480      	push	{r7}
 8006810:	b085      	sub	sp, #20
 8006812:	af00      	add	r7, sp, #0
 8006814:	6078      	str	r0, [r7, #4]
 8006816:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006824:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006826:	683a      	ldr	r2, [r7, #0]
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	4313      	orrs	r3, r2
 800682c:	f043 0307 	orr.w	r3, r3, #7
 8006830:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	68fa      	ldr	r2, [r7, #12]
 8006836:	609a      	str	r2, [r3, #8]
}
 8006838:	bf00      	nop
 800683a:	3714      	adds	r7, #20
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr

08006844 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006844:	b480      	push	{r7}
 8006846:	b087      	sub	sp, #28
 8006848:	af00      	add	r7, sp, #0
 800684a:	60f8      	str	r0, [r7, #12]
 800684c:	60b9      	str	r1, [r7, #8]
 800684e:	607a      	str	r2, [r7, #4]
 8006850:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	689b      	ldr	r3, [r3, #8]
 8006856:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800685e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	021a      	lsls	r2, r3, #8
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	431a      	orrs	r2, r3
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	4313      	orrs	r3, r2
 800686c:	697a      	ldr	r2, [r7, #20]
 800686e:	4313      	orrs	r3, r2
 8006870:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	697a      	ldr	r2, [r7, #20]
 8006876:	609a      	str	r2, [r3, #8]
}
 8006878:	bf00      	nop
 800687a:	371c      	adds	r7, #28
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr

08006884 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006884:	b480      	push	{r7}
 8006886:	b087      	sub	sp, #28
 8006888:	af00      	add	r7, sp, #0
 800688a:	60f8      	str	r0, [r7, #12]
 800688c:	60b9      	str	r1, [r7, #8]
 800688e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	f003 031f 	and.w	r3, r3, #31
 8006896:	2201      	movs	r2, #1
 8006898:	fa02 f303 	lsl.w	r3, r2, r3
 800689c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	6a1a      	ldr	r2, [r3, #32]
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	43db      	mvns	r3, r3
 80068a6:	401a      	ands	r2, r3
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	6a1a      	ldr	r2, [r3, #32]
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	f003 031f 	and.w	r3, r3, #31
 80068b6:	6879      	ldr	r1, [r7, #4]
 80068b8:	fa01 f303 	lsl.w	r3, r1, r3
 80068bc:	431a      	orrs	r2, r3
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	621a      	str	r2, [r3, #32]
}
 80068c2:	bf00      	nop
 80068c4:	371c      	adds	r7, #28
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr
	...

080068d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b085      	sub	sp, #20
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d101      	bne.n	80068e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80068e4:	2302      	movs	r3, #2
 80068e6:	e068      	b.n	80069ba <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2201      	movs	r2, #1
 80068ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2202      	movs	r2, #2
 80068f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a2e      	ldr	r2, [pc, #184]	; (80069c8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d004      	beq.n	800691c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a2d      	ldr	r2, [pc, #180]	; (80069cc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d108      	bne.n	800692e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006922:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	68fa      	ldr	r2, [r7, #12]
 800692a:	4313      	orrs	r3, r2
 800692c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006934:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	68fa      	ldr	r2, [r7, #12]
 800693c:	4313      	orrs	r3, r2
 800693e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	68fa      	ldr	r2, [r7, #12]
 8006946:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a1e      	ldr	r2, [pc, #120]	; (80069c8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d01d      	beq.n	800698e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800695a:	d018      	beq.n	800698e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a1b      	ldr	r2, [pc, #108]	; (80069d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d013      	beq.n	800698e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a1a      	ldr	r2, [pc, #104]	; (80069d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d00e      	beq.n	800698e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a18      	ldr	r2, [pc, #96]	; (80069d8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d009      	beq.n	800698e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a13      	ldr	r2, [pc, #76]	; (80069cc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d004      	beq.n	800698e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a14      	ldr	r2, [pc, #80]	; (80069dc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d10c      	bne.n	80069a8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006994:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	68ba      	ldr	r2, [r7, #8]
 800699c:	4313      	orrs	r3, r2
 800699e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	68ba      	ldr	r2, [r7, #8]
 80069a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2201      	movs	r2, #1
 80069ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069b8:	2300      	movs	r3, #0
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3714      	adds	r7, #20
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr
 80069c6:	bf00      	nop
 80069c8:	40012c00 	.word	0x40012c00
 80069cc:	40013400 	.word	0x40013400
 80069d0:	40000400 	.word	0x40000400
 80069d4:	40000800 	.word	0x40000800
 80069d8:	40000c00 	.word	0x40000c00
 80069dc:	40014000 	.word	0x40014000

080069e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b083      	sub	sp, #12
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80069e8:	bf00      	nop
 80069ea:	370c      	adds	r7, #12
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr

080069f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b083      	sub	sp, #12
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80069fc:	bf00      	nop
 80069fe:	370c      	adds	r7, #12
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr

08006a08 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b083      	sub	sp, #12
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006a10:	bf00      	nop
 8006a12:	370c      	adds	r7, #12
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr

08006a1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b082      	sub	sp, #8
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d101      	bne.n	8006a2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	e040      	b.n	8006ab0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d106      	bne.n	8006a44 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f7fb f8dc 	bl	8001bfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2224      	movs	r2, #36	; 0x24
 8006a48:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f022 0201 	bic.w	r2, r2, #1
 8006a58:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 f8c0 	bl	8006be0 <UART_SetConfig>
 8006a60:	4603      	mov	r3, r0
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d101      	bne.n	8006a6a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006a66:	2301      	movs	r3, #1
 8006a68:	e022      	b.n	8006ab0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d002      	beq.n	8006a78 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 fb3e 	bl	80070f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	685a      	ldr	r2, [r3, #4]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	689a      	ldr	r2, [r3, #8]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	681a      	ldr	r2, [r3, #0]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f042 0201 	orr.w	r2, r2, #1
 8006aa6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f000 fbc5 	bl	8007238 <UART_CheckIdleState>
 8006aae:	4603      	mov	r3, r0
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3708      	adds	r7, #8
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b08a      	sub	sp, #40	; 0x28
 8006abc:	af02      	add	r7, sp, #8
 8006abe:	60f8      	str	r0, [r7, #12]
 8006ac0:	60b9      	str	r1, [r7, #8]
 8006ac2:	603b      	str	r3, [r7, #0]
 8006ac4:	4613      	mov	r3, r2
 8006ac6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006acc:	2b20      	cmp	r3, #32
 8006ace:	f040 8082 	bne.w	8006bd6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d002      	beq.n	8006ade <HAL_UART_Transmit+0x26>
 8006ad8:	88fb      	ldrh	r3, [r7, #6]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d101      	bne.n	8006ae2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	e07a      	b.n	8006bd8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d101      	bne.n	8006af0 <HAL_UART_Transmit+0x38>
 8006aec:	2302      	movs	r3, #2
 8006aee:	e073      	b.n	8006bd8 <HAL_UART_Transmit+0x120>
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2201      	movs	r2, #1
 8006af4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2200      	movs	r2, #0
 8006afc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2221      	movs	r2, #33	; 0x21
 8006b04:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006b06:	f7fb fa65 	bl	8001fd4 <HAL_GetTick>
 8006b0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	88fa      	ldrh	r2, [r7, #6]
 8006b10:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	88fa      	ldrh	r2, [r7, #6]
 8006b18:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b24:	d108      	bne.n	8006b38 <HAL_UART_Transmit+0x80>
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	691b      	ldr	r3, [r3, #16]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d104      	bne.n	8006b38 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	61bb      	str	r3, [r7, #24]
 8006b36:	e003      	b.n	8006b40 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2200      	movs	r2, #0
 8006b44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006b48:	e02d      	b.n	8006ba6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	9300      	str	r3, [sp, #0]
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	2200      	movs	r2, #0
 8006b52:	2180      	movs	r1, #128	; 0x80
 8006b54:	68f8      	ldr	r0, [r7, #12]
 8006b56:	f000 fbb8 	bl	80072ca <UART_WaitOnFlagUntilTimeout>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d001      	beq.n	8006b64 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006b60:	2303      	movs	r3, #3
 8006b62:	e039      	b.n	8006bd8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006b64:	69fb      	ldr	r3, [r7, #28]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d10b      	bne.n	8006b82 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006b6a:	69bb      	ldr	r3, [r7, #24]
 8006b6c:	881a      	ldrh	r2, [r3, #0]
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b76:	b292      	uxth	r2, r2
 8006b78:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006b7a:	69bb      	ldr	r3, [r7, #24]
 8006b7c:	3302      	adds	r3, #2
 8006b7e:	61bb      	str	r3, [r7, #24]
 8006b80:	e008      	b.n	8006b94 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b82:	69fb      	ldr	r3, [r7, #28]
 8006b84:	781a      	ldrb	r2, [r3, #0]
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	b292      	uxth	r2, r2
 8006b8c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006b8e:	69fb      	ldr	r3, [r7, #28]
 8006b90:	3301      	adds	r3, #1
 8006b92:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	3b01      	subs	r3, #1
 8006b9e:	b29a      	uxth	r2, r3
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d1cb      	bne.n	8006b4a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	9300      	str	r3, [sp, #0]
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	2140      	movs	r1, #64	; 0x40
 8006bbc:	68f8      	ldr	r0, [r7, #12]
 8006bbe:	f000 fb84 	bl	80072ca <UART_WaitOnFlagUntilTimeout>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d001      	beq.n	8006bcc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006bc8:	2303      	movs	r3, #3
 8006bca:	e005      	b.n	8006bd8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2220      	movs	r2, #32
 8006bd0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	e000      	b.n	8006bd8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006bd6:	2302      	movs	r3, #2
  }
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3720      	adds	r7, #32
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006be0:	b5b0      	push	{r4, r5, r7, lr}
 8006be2:	b088      	sub	sp, #32
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006be8:	2300      	movs	r3, #0
 8006bea:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	689a      	ldr	r2, [r3, #8]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	691b      	ldr	r3, [r3, #16]
 8006bf4:	431a      	orrs	r2, r3
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	695b      	ldr	r3, [r3, #20]
 8006bfa:	431a      	orrs	r2, r3
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	69db      	ldr	r3, [r3, #28]
 8006c00:	4313      	orrs	r3, r2
 8006c02:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	4bad      	ldr	r3, [pc, #692]	; (8006ec0 <UART_SetConfig+0x2e0>)
 8006c0c:	4013      	ands	r3, r2
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	6812      	ldr	r2, [r2, #0]
 8006c12:	69f9      	ldr	r1, [r7, #28]
 8006c14:	430b      	orrs	r3, r1
 8006c16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	68da      	ldr	r2, [r3, #12]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	430a      	orrs	r2, r1
 8006c2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	699b      	ldr	r3, [r3, #24]
 8006c32:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4aa2      	ldr	r2, [pc, #648]	; (8006ec4 <UART_SetConfig+0x2e4>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d004      	beq.n	8006c48 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6a1b      	ldr	r3, [r3, #32]
 8006c42:	69fa      	ldr	r2, [r7, #28]
 8006c44:	4313      	orrs	r3, r2
 8006c46:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	689b      	ldr	r3, [r3, #8]
 8006c4e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	69fa      	ldr	r2, [r7, #28]
 8006c58:	430a      	orrs	r2, r1
 8006c5a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a99      	ldr	r2, [pc, #612]	; (8006ec8 <UART_SetConfig+0x2e8>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d121      	bne.n	8006caa <UART_SetConfig+0xca>
 8006c66:	4b99      	ldr	r3, [pc, #612]	; (8006ecc <UART_SetConfig+0x2ec>)
 8006c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c6c:	f003 0303 	and.w	r3, r3, #3
 8006c70:	2b03      	cmp	r3, #3
 8006c72:	d817      	bhi.n	8006ca4 <UART_SetConfig+0xc4>
 8006c74:	a201      	add	r2, pc, #4	; (adr r2, 8006c7c <UART_SetConfig+0x9c>)
 8006c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c7a:	bf00      	nop
 8006c7c:	08006c8d 	.word	0x08006c8d
 8006c80:	08006c99 	.word	0x08006c99
 8006c84:	08006c93 	.word	0x08006c93
 8006c88:	08006c9f 	.word	0x08006c9f
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	76fb      	strb	r3, [r7, #27]
 8006c90:	e0e7      	b.n	8006e62 <UART_SetConfig+0x282>
 8006c92:	2302      	movs	r3, #2
 8006c94:	76fb      	strb	r3, [r7, #27]
 8006c96:	e0e4      	b.n	8006e62 <UART_SetConfig+0x282>
 8006c98:	2304      	movs	r3, #4
 8006c9a:	76fb      	strb	r3, [r7, #27]
 8006c9c:	e0e1      	b.n	8006e62 <UART_SetConfig+0x282>
 8006c9e:	2308      	movs	r3, #8
 8006ca0:	76fb      	strb	r3, [r7, #27]
 8006ca2:	e0de      	b.n	8006e62 <UART_SetConfig+0x282>
 8006ca4:	2310      	movs	r3, #16
 8006ca6:	76fb      	strb	r3, [r7, #27]
 8006ca8:	e0db      	b.n	8006e62 <UART_SetConfig+0x282>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a88      	ldr	r2, [pc, #544]	; (8006ed0 <UART_SetConfig+0x2f0>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d132      	bne.n	8006d1a <UART_SetConfig+0x13a>
 8006cb4:	4b85      	ldr	r3, [pc, #532]	; (8006ecc <UART_SetConfig+0x2ec>)
 8006cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cba:	f003 030c 	and.w	r3, r3, #12
 8006cbe:	2b0c      	cmp	r3, #12
 8006cc0:	d828      	bhi.n	8006d14 <UART_SetConfig+0x134>
 8006cc2:	a201      	add	r2, pc, #4	; (adr r2, 8006cc8 <UART_SetConfig+0xe8>)
 8006cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cc8:	08006cfd 	.word	0x08006cfd
 8006ccc:	08006d15 	.word	0x08006d15
 8006cd0:	08006d15 	.word	0x08006d15
 8006cd4:	08006d15 	.word	0x08006d15
 8006cd8:	08006d09 	.word	0x08006d09
 8006cdc:	08006d15 	.word	0x08006d15
 8006ce0:	08006d15 	.word	0x08006d15
 8006ce4:	08006d15 	.word	0x08006d15
 8006ce8:	08006d03 	.word	0x08006d03
 8006cec:	08006d15 	.word	0x08006d15
 8006cf0:	08006d15 	.word	0x08006d15
 8006cf4:	08006d15 	.word	0x08006d15
 8006cf8:	08006d0f 	.word	0x08006d0f
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	76fb      	strb	r3, [r7, #27]
 8006d00:	e0af      	b.n	8006e62 <UART_SetConfig+0x282>
 8006d02:	2302      	movs	r3, #2
 8006d04:	76fb      	strb	r3, [r7, #27]
 8006d06:	e0ac      	b.n	8006e62 <UART_SetConfig+0x282>
 8006d08:	2304      	movs	r3, #4
 8006d0a:	76fb      	strb	r3, [r7, #27]
 8006d0c:	e0a9      	b.n	8006e62 <UART_SetConfig+0x282>
 8006d0e:	2308      	movs	r3, #8
 8006d10:	76fb      	strb	r3, [r7, #27]
 8006d12:	e0a6      	b.n	8006e62 <UART_SetConfig+0x282>
 8006d14:	2310      	movs	r3, #16
 8006d16:	76fb      	strb	r3, [r7, #27]
 8006d18:	e0a3      	b.n	8006e62 <UART_SetConfig+0x282>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a6d      	ldr	r2, [pc, #436]	; (8006ed4 <UART_SetConfig+0x2f4>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d120      	bne.n	8006d66 <UART_SetConfig+0x186>
 8006d24:	4b69      	ldr	r3, [pc, #420]	; (8006ecc <UART_SetConfig+0x2ec>)
 8006d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d2a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006d2e:	2b30      	cmp	r3, #48	; 0x30
 8006d30:	d013      	beq.n	8006d5a <UART_SetConfig+0x17a>
 8006d32:	2b30      	cmp	r3, #48	; 0x30
 8006d34:	d814      	bhi.n	8006d60 <UART_SetConfig+0x180>
 8006d36:	2b20      	cmp	r3, #32
 8006d38:	d009      	beq.n	8006d4e <UART_SetConfig+0x16e>
 8006d3a:	2b20      	cmp	r3, #32
 8006d3c:	d810      	bhi.n	8006d60 <UART_SetConfig+0x180>
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d002      	beq.n	8006d48 <UART_SetConfig+0x168>
 8006d42:	2b10      	cmp	r3, #16
 8006d44:	d006      	beq.n	8006d54 <UART_SetConfig+0x174>
 8006d46:	e00b      	b.n	8006d60 <UART_SetConfig+0x180>
 8006d48:	2300      	movs	r3, #0
 8006d4a:	76fb      	strb	r3, [r7, #27]
 8006d4c:	e089      	b.n	8006e62 <UART_SetConfig+0x282>
 8006d4e:	2302      	movs	r3, #2
 8006d50:	76fb      	strb	r3, [r7, #27]
 8006d52:	e086      	b.n	8006e62 <UART_SetConfig+0x282>
 8006d54:	2304      	movs	r3, #4
 8006d56:	76fb      	strb	r3, [r7, #27]
 8006d58:	e083      	b.n	8006e62 <UART_SetConfig+0x282>
 8006d5a:	2308      	movs	r3, #8
 8006d5c:	76fb      	strb	r3, [r7, #27]
 8006d5e:	e080      	b.n	8006e62 <UART_SetConfig+0x282>
 8006d60:	2310      	movs	r3, #16
 8006d62:	76fb      	strb	r3, [r7, #27]
 8006d64:	e07d      	b.n	8006e62 <UART_SetConfig+0x282>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a5b      	ldr	r2, [pc, #364]	; (8006ed8 <UART_SetConfig+0x2f8>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d120      	bne.n	8006db2 <UART_SetConfig+0x1d2>
 8006d70:	4b56      	ldr	r3, [pc, #344]	; (8006ecc <UART_SetConfig+0x2ec>)
 8006d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d76:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006d7a:	2bc0      	cmp	r3, #192	; 0xc0
 8006d7c:	d013      	beq.n	8006da6 <UART_SetConfig+0x1c6>
 8006d7e:	2bc0      	cmp	r3, #192	; 0xc0
 8006d80:	d814      	bhi.n	8006dac <UART_SetConfig+0x1cc>
 8006d82:	2b80      	cmp	r3, #128	; 0x80
 8006d84:	d009      	beq.n	8006d9a <UART_SetConfig+0x1ba>
 8006d86:	2b80      	cmp	r3, #128	; 0x80
 8006d88:	d810      	bhi.n	8006dac <UART_SetConfig+0x1cc>
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d002      	beq.n	8006d94 <UART_SetConfig+0x1b4>
 8006d8e:	2b40      	cmp	r3, #64	; 0x40
 8006d90:	d006      	beq.n	8006da0 <UART_SetConfig+0x1c0>
 8006d92:	e00b      	b.n	8006dac <UART_SetConfig+0x1cc>
 8006d94:	2300      	movs	r3, #0
 8006d96:	76fb      	strb	r3, [r7, #27]
 8006d98:	e063      	b.n	8006e62 <UART_SetConfig+0x282>
 8006d9a:	2302      	movs	r3, #2
 8006d9c:	76fb      	strb	r3, [r7, #27]
 8006d9e:	e060      	b.n	8006e62 <UART_SetConfig+0x282>
 8006da0:	2304      	movs	r3, #4
 8006da2:	76fb      	strb	r3, [r7, #27]
 8006da4:	e05d      	b.n	8006e62 <UART_SetConfig+0x282>
 8006da6:	2308      	movs	r3, #8
 8006da8:	76fb      	strb	r3, [r7, #27]
 8006daa:	e05a      	b.n	8006e62 <UART_SetConfig+0x282>
 8006dac:	2310      	movs	r3, #16
 8006dae:	76fb      	strb	r3, [r7, #27]
 8006db0:	e057      	b.n	8006e62 <UART_SetConfig+0x282>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a49      	ldr	r2, [pc, #292]	; (8006edc <UART_SetConfig+0x2fc>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d125      	bne.n	8006e08 <UART_SetConfig+0x228>
 8006dbc:	4b43      	ldr	r3, [pc, #268]	; (8006ecc <UART_SetConfig+0x2ec>)
 8006dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006dca:	d017      	beq.n	8006dfc <UART_SetConfig+0x21c>
 8006dcc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006dd0:	d817      	bhi.n	8006e02 <UART_SetConfig+0x222>
 8006dd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dd6:	d00b      	beq.n	8006df0 <UART_SetConfig+0x210>
 8006dd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ddc:	d811      	bhi.n	8006e02 <UART_SetConfig+0x222>
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d003      	beq.n	8006dea <UART_SetConfig+0x20a>
 8006de2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006de6:	d006      	beq.n	8006df6 <UART_SetConfig+0x216>
 8006de8:	e00b      	b.n	8006e02 <UART_SetConfig+0x222>
 8006dea:	2300      	movs	r3, #0
 8006dec:	76fb      	strb	r3, [r7, #27]
 8006dee:	e038      	b.n	8006e62 <UART_SetConfig+0x282>
 8006df0:	2302      	movs	r3, #2
 8006df2:	76fb      	strb	r3, [r7, #27]
 8006df4:	e035      	b.n	8006e62 <UART_SetConfig+0x282>
 8006df6:	2304      	movs	r3, #4
 8006df8:	76fb      	strb	r3, [r7, #27]
 8006dfa:	e032      	b.n	8006e62 <UART_SetConfig+0x282>
 8006dfc:	2308      	movs	r3, #8
 8006dfe:	76fb      	strb	r3, [r7, #27]
 8006e00:	e02f      	b.n	8006e62 <UART_SetConfig+0x282>
 8006e02:	2310      	movs	r3, #16
 8006e04:	76fb      	strb	r3, [r7, #27]
 8006e06:	e02c      	b.n	8006e62 <UART_SetConfig+0x282>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a2d      	ldr	r2, [pc, #180]	; (8006ec4 <UART_SetConfig+0x2e4>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d125      	bne.n	8006e5e <UART_SetConfig+0x27e>
 8006e12:	4b2e      	ldr	r3, [pc, #184]	; (8006ecc <UART_SetConfig+0x2ec>)
 8006e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e18:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006e1c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e20:	d017      	beq.n	8006e52 <UART_SetConfig+0x272>
 8006e22:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e26:	d817      	bhi.n	8006e58 <UART_SetConfig+0x278>
 8006e28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e2c:	d00b      	beq.n	8006e46 <UART_SetConfig+0x266>
 8006e2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e32:	d811      	bhi.n	8006e58 <UART_SetConfig+0x278>
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d003      	beq.n	8006e40 <UART_SetConfig+0x260>
 8006e38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e3c:	d006      	beq.n	8006e4c <UART_SetConfig+0x26c>
 8006e3e:	e00b      	b.n	8006e58 <UART_SetConfig+0x278>
 8006e40:	2300      	movs	r3, #0
 8006e42:	76fb      	strb	r3, [r7, #27]
 8006e44:	e00d      	b.n	8006e62 <UART_SetConfig+0x282>
 8006e46:	2302      	movs	r3, #2
 8006e48:	76fb      	strb	r3, [r7, #27]
 8006e4a:	e00a      	b.n	8006e62 <UART_SetConfig+0x282>
 8006e4c:	2304      	movs	r3, #4
 8006e4e:	76fb      	strb	r3, [r7, #27]
 8006e50:	e007      	b.n	8006e62 <UART_SetConfig+0x282>
 8006e52:	2308      	movs	r3, #8
 8006e54:	76fb      	strb	r3, [r7, #27]
 8006e56:	e004      	b.n	8006e62 <UART_SetConfig+0x282>
 8006e58:	2310      	movs	r3, #16
 8006e5a:	76fb      	strb	r3, [r7, #27]
 8006e5c:	e001      	b.n	8006e62 <UART_SetConfig+0x282>
 8006e5e:	2310      	movs	r3, #16
 8006e60:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a17      	ldr	r2, [pc, #92]	; (8006ec4 <UART_SetConfig+0x2e4>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	f040 8087 	bne.w	8006f7c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006e6e:	7efb      	ldrb	r3, [r7, #27]
 8006e70:	2b08      	cmp	r3, #8
 8006e72:	d837      	bhi.n	8006ee4 <UART_SetConfig+0x304>
 8006e74:	a201      	add	r2, pc, #4	; (adr r2, 8006e7c <UART_SetConfig+0x29c>)
 8006e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e7a:	bf00      	nop
 8006e7c:	08006ea1 	.word	0x08006ea1
 8006e80:	08006ee5 	.word	0x08006ee5
 8006e84:	08006ea9 	.word	0x08006ea9
 8006e88:	08006ee5 	.word	0x08006ee5
 8006e8c:	08006eaf 	.word	0x08006eaf
 8006e90:	08006ee5 	.word	0x08006ee5
 8006e94:	08006ee5 	.word	0x08006ee5
 8006e98:	08006ee5 	.word	0x08006ee5
 8006e9c:	08006eb7 	.word	0x08006eb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ea0:	f7fc fb2c 	bl	80034fc <HAL_RCC_GetPCLK1Freq>
 8006ea4:	6178      	str	r0, [r7, #20]
        break;
 8006ea6:	e022      	b.n	8006eee <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ea8:	4b0d      	ldr	r3, [pc, #52]	; (8006ee0 <UART_SetConfig+0x300>)
 8006eaa:	617b      	str	r3, [r7, #20]
        break;
 8006eac:	e01f      	b.n	8006eee <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006eae:	f7fc fa8d 	bl	80033cc <HAL_RCC_GetSysClockFreq>
 8006eb2:	6178      	str	r0, [r7, #20]
        break;
 8006eb4:	e01b      	b.n	8006eee <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006eb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006eba:	617b      	str	r3, [r7, #20]
        break;
 8006ebc:	e017      	b.n	8006eee <UART_SetConfig+0x30e>
 8006ebe:	bf00      	nop
 8006ec0:	efff69f3 	.word	0xefff69f3
 8006ec4:	40008000 	.word	0x40008000
 8006ec8:	40013800 	.word	0x40013800
 8006ecc:	40021000 	.word	0x40021000
 8006ed0:	40004400 	.word	0x40004400
 8006ed4:	40004800 	.word	0x40004800
 8006ed8:	40004c00 	.word	0x40004c00
 8006edc:	40005000 	.word	0x40005000
 8006ee0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	76bb      	strb	r3, [r7, #26]
        break;
 8006eec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	f000 80f1 	beq.w	80070d8 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	685a      	ldr	r2, [r3, #4]
 8006efa:	4613      	mov	r3, r2
 8006efc:	005b      	lsls	r3, r3, #1
 8006efe:	4413      	add	r3, r2
 8006f00:	697a      	ldr	r2, [r7, #20]
 8006f02:	429a      	cmp	r2, r3
 8006f04:	d305      	bcc.n	8006f12 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006f0c:	697a      	ldr	r2, [r7, #20]
 8006f0e:	429a      	cmp	r2, r3
 8006f10:	d902      	bls.n	8006f18 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8006f12:	2301      	movs	r3, #1
 8006f14:	76bb      	strb	r3, [r7, #26]
 8006f16:	e0df      	b.n	80070d8 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f04f 0100 	mov.w	r1, #0
 8006f20:	f04f 0200 	mov.w	r2, #0
 8006f24:	f04f 0300 	mov.w	r3, #0
 8006f28:	020b      	lsls	r3, r1, #8
 8006f2a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006f2e:	0202      	lsls	r2, r0, #8
 8006f30:	6879      	ldr	r1, [r7, #4]
 8006f32:	6849      	ldr	r1, [r1, #4]
 8006f34:	0849      	lsrs	r1, r1, #1
 8006f36:	4608      	mov	r0, r1
 8006f38:	f04f 0100 	mov.w	r1, #0
 8006f3c:	1814      	adds	r4, r2, r0
 8006f3e:	eb43 0501 	adc.w	r5, r3, r1
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	461a      	mov	r2, r3
 8006f48:	f04f 0300 	mov.w	r3, #0
 8006f4c:	4620      	mov	r0, r4
 8006f4e:	4629      	mov	r1, r5
 8006f50:	f7f9 f98e 	bl	8000270 <__aeabi_uldivmod>
 8006f54:	4602      	mov	r2, r0
 8006f56:	460b      	mov	r3, r1
 8006f58:	4613      	mov	r3, r2
 8006f5a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f62:	d308      	bcc.n	8006f76 <UART_SetConfig+0x396>
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f6a:	d204      	bcs.n	8006f76 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	693a      	ldr	r2, [r7, #16]
 8006f72:	60da      	str	r2, [r3, #12]
 8006f74:	e0b0      	b.n	80070d8 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
 8006f78:	76bb      	strb	r3, [r7, #26]
 8006f7a:	e0ad      	b.n	80070d8 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	69db      	ldr	r3, [r3, #28]
 8006f80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f84:	d15c      	bne.n	8007040 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8006f86:	7efb      	ldrb	r3, [r7, #27]
 8006f88:	2b08      	cmp	r3, #8
 8006f8a:	d828      	bhi.n	8006fde <UART_SetConfig+0x3fe>
 8006f8c:	a201      	add	r2, pc, #4	; (adr r2, 8006f94 <UART_SetConfig+0x3b4>)
 8006f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f92:	bf00      	nop
 8006f94:	08006fb9 	.word	0x08006fb9
 8006f98:	08006fc1 	.word	0x08006fc1
 8006f9c:	08006fc9 	.word	0x08006fc9
 8006fa0:	08006fdf 	.word	0x08006fdf
 8006fa4:	08006fcf 	.word	0x08006fcf
 8006fa8:	08006fdf 	.word	0x08006fdf
 8006fac:	08006fdf 	.word	0x08006fdf
 8006fb0:	08006fdf 	.word	0x08006fdf
 8006fb4:	08006fd7 	.word	0x08006fd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fb8:	f7fc faa0 	bl	80034fc <HAL_RCC_GetPCLK1Freq>
 8006fbc:	6178      	str	r0, [r7, #20]
        break;
 8006fbe:	e013      	b.n	8006fe8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006fc0:	f7fc fab2 	bl	8003528 <HAL_RCC_GetPCLK2Freq>
 8006fc4:	6178      	str	r0, [r7, #20]
        break;
 8006fc6:	e00f      	b.n	8006fe8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006fc8:	4b49      	ldr	r3, [pc, #292]	; (80070f0 <UART_SetConfig+0x510>)
 8006fca:	617b      	str	r3, [r7, #20]
        break;
 8006fcc:	e00c      	b.n	8006fe8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006fce:	f7fc f9fd 	bl	80033cc <HAL_RCC_GetSysClockFreq>
 8006fd2:	6178      	str	r0, [r7, #20]
        break;
 8006fd4:	e008      	b.n	8006fe8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fda:	617b      	str	r3, [r7, #20]
        break;
 8006fdc:	e004      	b.n	8006fe8 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	76bb      	strb	r3, [r7, #26]
        break;
 8006fe6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d074      	beq.n	80070d8 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	005a      	lsls	r2, r3, #1
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	085b      	lsrs	r3, r3, #1
 8006ff8:	441a      	add	r2, r3
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007002:	b29b      	uxth	r3, r3
 8007004:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	2b0f      	cmp	r3, #15
 800700a:	d916      	bls.n	800703a <UART_SetConfig+0x45a>
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007012:	d212      	bcs.n	800703a <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	b29b      	uxth	r3, r3
 8007018:	f023 030f 	bic.w	r3, r3, #15
 800701c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	085b      	lsrs	r3, r3, #1
 8007022:	b29b      	uxth	r3, r3
 8007024:	f003 0307 	and.w	r3, r3, #7
 8007028:	b29a      	uxth	r2, r3
 800702a:	89fb      	ldrh	r3, [r7, #14]
 800702c:	4313      	orrs	r3, r2
 800702e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	89fa      	ldrh	r2, [r7, #14]
 8007036:	60da      	str	r2, [r3, #12]
 8007038:	e04e      	b.n	80070d8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800703a:	2301      	movs	r3, #1
 800703c:	76bb      	strb	r3, [r7, #26]
 800703e:	e04b      	b.n	80070d8 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007040:	7efb      	ldrb	r3, [r7, #27]
 8007042:	2b08      	cmp	r3, #8
 8007044:	d827      	bhi.n	8007096 <UART_SetConfig+0x4b6>
 8007046:	a201      	add	r2, pc, #4	; (adr r2, 800704c <UART_SetConfig+0x46c>)
 8007048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800704c:	08007071 	.word	0x08007071
 8007050:	08007079 	.word	0x08007079
 8007054:	08007081 	.word	0x08007081
 8007058:	08007097 	.word	0x08007097
 800705c:	08007087 	.word	0x08007087
 8007060:	08007097 	.word	0x08007097
 8007064:	08007097 	.word	0x08007097
 8007068:	08007097 	.word	0x08007097
 800706c:	0800708f 	.word	0x0800708f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007070:	f7fc fa44 	bl	80034fc <HAL_RCC_GetPCLK1Freq>
 8007074:	6178      	str	r0, [r7, #20]
        break;
 8007076:	e013      	b.n	80070a0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007078:	f7fc fa56 	bl	8003528 <HAL_RCC_GetPCLK2Freq>
 800707c:	6178      	str	r0, [r7, #20]
        break;
 800707e:	e00f      	b.n	80070a0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007080:	4b1b      	ldr	r3, [pc, #108]	; (80070f0 <UART_SetConfig+0x510>)
 8007082:	617b      	str	r3, [r7, #20]
        break;
 8007084:	e00c      	b.n	80070a0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007086:	f7fc f9a1 	bl	80033cc <HAL_RCC_GetSysClockFreq>
 800708a:	6178      	str	r0, [r7, #20]
        break;
 800708c:	e008      	b.n	80070a0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800708e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007092:	617b      	str	r3, [r7, #20]
        break;
 8007094:	e004      	b.n	80070a0 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8007096:	2300      	movs	r3, #0
 8007098:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	76bb      	strb	r3, [r7, #26]
        break;
 800709e:	bf00      	nop
    }

    if (pclk != 0U)
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d018      	beq.n	80070d8 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	085a      	lsrs	r2, r3, #1
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	441a      	add	r2, r3
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	2b0f      	cmp	r3, #15
 80070c0:	d908      	bls.n	80070d4 <UART_SetConfig+0x4f4>
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070c8:	d204      	bcs.n	80070d4 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	693a      	ldr	r2, [r7, #16]
 80070d0:	60da      	str	r2, [r3, #12]
 80070d2:	e001      	b.n	80070d8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80070d4:	2301      	movs	r3, #1
 80070d6:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2200      	movs	r2, #0
 80070dc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2200      	movs	r2, #0
 80070e2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80070e4:	7ebb      	ldrb	r3, [r7, #26]
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3720      	adds	r7, #32
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bdb0      	pop	{r4, r5, r7, pc}
 80070ee:	bf00      	nop
 80070f0:	00f42400 	.word	0x00f42400

080070f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b083      	sub	sp, #12
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007100:	f003 0301 	and.w	r3, r3, #1
 8007104:	2b00      	cmp	r3, #0
 8007106:	d00a      	beq.n	800711e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	430a      	orrs	r2, r1
 800711c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007122:	f003 0302 	and.w	r3, r3, #2
 8007126:	2b00      	cmp	r3, #0
 8007128:	d00a      	beq.n	8007140 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	430a      	orrs	r2, r1
 800713e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007144:	f003 0304 	and.w	r3, r3, #4
 8007148:	2b00      	cmp	r3, #0
 800714a:	d00a      	beq.n	8007162 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	430a      	orrs	r2, r1
 8007160:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007166:	f003 0308 	and.w	r3, r3, #8
 800716a:	2b00      	cmp	r3, #0
 800716c:	d00a      	beq.n	8007184 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	430a      	orrs	r2, r1
 8007182:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007188:	f003 0310 	and.w	r3, r3, #16
 800718c:	2b00      	cmp	r3, #0
 800718e:	d00a      	beq.n	80071a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	689b      	ldr	r3, [r3, #8]
 8007196:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	430a      	orrs	r2, r1
 80071a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071aa:	f003 0320 	and.w	r3, r3, #32
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d00a      	beq.n	80071c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	689b      	ldr	r3, [r3, #8]
 80071b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	430a      	orrs	r2, r1
 80071c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d01a      	beq.n	800720a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	430a      	orrs	r2, r1
 80071e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071f2:	d10a      	bne.n	800720a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	430a      	orrs	r2, r1
 8007208:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800720e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007212:	2b00      	cmp	r3, #0
 8007214:	d00a      	beq.n	800722c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	430a      	orrs	r2, r1
 800722a:	605a      	str	r2, [r3, #4]
  }
}
 800722c:	bf00      	nop
 800722e:	370c      	adds	r7, #12
 8007230:	46bd      	mov	sp, r7
 8007232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007236:	4770      	bx	lr

08007238 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b086      	sub	sp, #24
 800723c:	af02      	add	r7, sp, #8
 800723e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2200      	movs	r2, #0
 8007244:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007248:	f7fa fec4 	bl	8001fd4 <HAL_GetTick>
 800724c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f003 0308 	and.w	r3, r3, #8
 8007258:	2b08      	cmp	r3, #8
 800725a:	d10e      	bne.n	800727a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800725c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007260:	9300      	str	r3, [sp, #0]
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2200      	movs	r2, #0
 8007266:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 f82d 	bl	80072ca <UART_WaitOnFlagUntilTimeout>
 8007270:	4603      	mov	r3, r0
 8007272:	2b00      	cmp	r3, #0
 8007274:	d001      	beq.n	800727a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007276:	2303      	movs	r3, #3
 8007278:	e023      	b.n	80072c2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f003 0304 	and.w	r3, r3, #4
 8007284:	2b04      	cmp	r3, #4
 8007286:	d10e      	bne.n	80072a6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007288:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800728c:	9300      	str	r3, [sp, #0]
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2200      	movs	r2, #0
 8007292:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f000 f817 	bl	80072ca <UART_WaitOnFlagUntilTimeout>
 800729c:	4603      	mov	r3, r0
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d001      	beq.n	80072a6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072a2:	2303      	movs	r3, #3
 80072a4:	e00d      	b.n	80072c2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2220      	movs	r2, #32
 80072aa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2220      	movs	r2, #32
 80072b0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2200      	movs	r2, #0
 80072b6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2200      	movs	r2, #0
 80072bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80072c0:	2300      	movs	r3, #0
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	3710      	adds	r7, #16
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}

080072ca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80072ca:	b580      	push	{r7, lr}
 80072cc:	b084      	sub	sp, #16
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	60f8      	str	r0, [r7, #12]
 80072d2:	60b9      	str	r1, [r7, #8]
 80072d4:	603b      	str	r3, [r7, #0]
 80072d6:	4613      	mov	r3, r2
 80072d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072da:	e05e      	b.n	800739a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072dc:	69bb      	ldr	r3, [r7, #24]
 80072de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072e2:	d05a      	beq.n	800739a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072e4:	f7fa fe76 	bl	8001fd4 <HAL_GetTick>
 80072e8:	4602      	mov	r2, r0
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	1ad3      	subs	r3, r2, r3
 80072ee:	69ba      	ldr	r2, [r7, #24]
 80072f0:	429a      	cmp	r2, r3
 80072f2:	d302      	bcc.n	80072fa <UART_WaitOnFlagUntilTimeout+0x30>
 80072f4:	69bb      	ldr	r3, [r7, #24]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d11b      	bne.n	8007332 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	681a      	ldr	r2, [r3, #0]
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007308:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	689a      	ldr	r2, [r3, #8]
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f022 0201 	bic.w	r2, r2, #1
 8007318:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2220      	movs	r2, #32
 800731e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2220      	movs	r2, #32
 8007324:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2200      	movs	r2, #0
 800732a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800732e:	2303      	movs	r3, #3
 8007330:	e043      	b.n	80073ba <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f003 0304 	and.w	r3, r3, #4
 800733c:	2b00      	cmp	r3, #0
 800733e:	d02c      	beq.n	800739a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	69db      	ldr	r3, [r3, #28]
 8007346:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800734a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800734e:	d124      	bne.n	800739a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007358:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	681a      	ldr	r2, [r3, #0]
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007368:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	689a      	ldr	r2, [r3, #8]
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f022 0201 	bic.w	r2, r2, #1
 8007378:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2220      	movs	r2, #32
 800737e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2220      	movs	r2, #32
 8007384:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2220      	movs	r2, #32
 800738a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2200      	movs	r2, #0
 8007392:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007396:	2303      	movs	r3, #3
 8007398:	e00f      	b.n	80073ba <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	69da      	ldr	r2, [r3, #28]
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	4013      	ands	r3, r2
 80073a4:	68ba      	ldr	r2, [r7, #8]
 80073a6:	429a      	cmp	r2, r3
 80073a8:	bf0c      	ite	eq
 80073aa:	2301      	moveq	r3, #1
 80073ac:	2300      	movne	r3, #0
 80073ae:	b2db      	uxtb	r3, r3
 80073b0:	461a      	mov	r2, r3
 80073b2:	79fb      	ldrb	r3, [r7, #7]
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d091      	beq.n	80072dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80073b8:	2300      	movs	r3, #0
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3710      	adds	r7, #16
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}
	...

080073c4 <__errno>:
 80073c4:	4b01      	ldr	r3, [pc, #4]	; (80073cc <__errno+0x8>)
 80073c6:	6818      	ldr	r0, [r3, #0]
 80073c8:	4770      	bx	lr
 80073ca:	bf00      	nop
 80073cc:	20000094 	.word	0x20000094

080073d0 <__libc_init_array>:
 80073d0:	b570      	push	{r4, r5, r6, lr}
 80073d2:	4d0d      	ldr	r5, [pc, #52]	; (8007408 <__libc_init_array+0x38>)
 80073d4:	4c0d      	ldr	r4, [pc, #52]	; (800740c <__libc_init_array+0x3c>)
 80073d6:	1b64      	subs	r4, r4, r5
 80073d8:	10a4      	asrs	r4, r4, #2
 80073da:	2600      	movs	r6, #0
 80073dc:	42a6      	cmp	r6, r4
 80073de:	d109      	bne.n	80073f4 <__libc_init_array+0x24>
 80073e0:	4d0b      	ldr	r5, [pc, #44]	; (8007410 <__libc_init_array+0x40>)
 80073e2:	4c0c      	ldr	r4, [pc, #48]	; (8007414 <__libc_init_array+0x44>)
 80073e4:	f000 ff76 	bl	80082d4 <_init>
 80073e8:	1b64      	subs	r4, r4, r5
 80073ea:	10a4      	asrs	r4, r4, #2
 80073ec:	2600      	movs	r6, #0
 80073ee:	42a6      	cmp	r6, r4
 80073f0:	d105      	bne.n	80073fe <__libc_init_array+0x2e>
 80073f2:	bd70      	pop	{r4, r5, r6, pc}
 80073f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80073f8:	4798      	blx	r3
 80073fa:	3601      	adds	r6, #1
 80073fc:	e7ee      	b.n	80073dc <__libc_init_array+0xc>
 80073fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8007402:	4798      	blx	r3
 8007404:	3601      	adds	r6, #1
 8007406:	e7f2      	b.n	80073ee <__libc_init_array+0x1e>
 8007408:	080083e0 	.word	0x080083e0
 800740c:	080083e0 	.word	0x080083e0
 8007410:	080083e0 	.word	0x080083e0
 8007414:	080083e4 	.word	0x080083e4

08007418 <memset>:
 8007418:	4402      	add	r2, r0
 800741a:	4603      	mov	r3, r0
 800741c:	4293      	cmp	r3, r2
 800741e:	d100      	bne.n	8007422 <memset+0xa>
 8007420:	4770      	bx	lr
 8007422:	f803 1b01 	strb.w	r1, [r3], #1
 8007426:	e7f9      	b.n	800741c <memset+0x4>

08007428 <iprintf>:
 8007428:	b40f      	push	{r0, r1, r2, r3}
 800742a:	4b0a      	ldr	r3, [pc, #40]	; (8007454 <iprintf+0x2c>)
 800742c:	b513      	push	{r0, r1, r4, lr}
 800742e:	681c      	ldr	r4, [r3, #0]
 8007430:	b124      	cbz	r4, 800743c <iprintf+0x14>
 8007432:	69a3      	ldr	r3, [r4, #24]
 8007434:	b913      	cbnz	r3, 800743c <iprintf+0x14>
 8007436:	4620      	mov	r0, r4
 8007438:	f000 f866 	bl	8007508 <__sinit>
 800743c:	ab05      	add	r3, sp, #20
 800743e:	9a04      	ldr	r2, [sp, #16]
 8007440:	68a1      	ldr	r1, [r4, #8]
 8007442:	9301      	str	r3, [sp, #4]
 8007444:	4620      	mov	r0, r4
 8007446:	f000 f983 	bl	8007750 <_vfiprintf_r>
 800744a:	b002      	add	sp, #8
 800744c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007450:	b004      	add	sp, #16
 8007452:	4770      	bx	lr
 8007454:	20000094 	.word	0x20000094

08007458 <std>:
 8007458:	2300      	movs	r3, #0
 800745a:	b510      	push	{r4, lr}
 800745c:	4604      	mov	r4, r0
 800745e:	e9c0 3300 	strd	r3, r3, [r0]
 8007462:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007466:	6083      	str	r3, [r0, #8]
 8007468:	8181      	strh	r1, [r0, #12]
 800746a:	6643      	str	r3, [r0, #100]	; 0x64
 800746c:	81c2      	strh	r2, [r0, #14]
 800746e:	6183      	str	r3, [r0, #24]
 8007470:	4619      	mov	r1, r3
 8007472:	2208      	movs	r2, #8
 8007474:	305c      	adds	r0, #92	; 0x5c
 8007476:	f7ff ffcf 	bl	8007418 <memset>
 800747a:	4b05      	ldr	r3, [pc, #20]	; (8007490 <std+0x38>)
 800747c:	6263      	str	r3, [r4, #36]	; 0x24
 800747e:	4b05      	ldr	r3, [pc, #20]	; (8007494 <std+0x3c>)
 8007480:	62a3      	str	r3, [r4, #40]	; 0x28
 8007482:	4b05      	ldr	r3, [pc, #20]	; (8007498 <std+0x40>)
 8007484:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007486:	4b05      	ldr	r3, [pc, #20]	; (800749c <std+0x44>)
 8007488:	6224      	str	r4, [r4, #32]
 800748a:	6323      	str	r3, [r4, #48]	; 0x30
 800748c:	bd10      	pop	{r4, pc}
 800748e:	bf00      	nop
 8007490:	08007cf9 	.word	0x08007cf9
 8007494:	08007d1b 	.word	0x08007d1b
 8007498:	08007d53 	.word	0x08007d53
 800749c:	08007d77 	.word	0x08007d77

080074a0 <_cleanup_r>:
 80074a0:	4901      	ldr	r1, [pc, #4]	; (80074a8 <_cleanup_r+0x8>)
 80074a2:	f000 b8af 	b.w	8007604 <_fwalk_reent>
 80074a6:	bf00      	nop
 80074a8:	08008051 	.word	0x08008051

080074ac <__sfmoreglue>:
 80074ac:	b570      	push	{r4, r5, r6, lr}
 80074ae:	1e4a      	subs	r2, r1, #1
 80074b0:	2568      	movs	r5, #104	; 0x68
 80074b2:	4355      	muls	r5, r2
 80074b4:	460e      	mov	r6, r1
 80074b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80074ba:	f000 f8c5 	bl	8007648 <_malloc_r>
 80074be:	4604      	mov	r4, r0
 80074c0:	b140      	cbz	r0, 80074d4 <__sfmoreglue+0x28>
 80074c2:	2100      	movs	r1, #0
 80074c4:	e9c0 1600 	strd	r1, r6, [r0]
 80074c8:	300c      	adds	r0, #12
 80074ca:	60a0      	str	r0, [r4, #8]
 80074cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80074d0:	f7ff ffa2 	bl	8007418 <memset>
 80074d4:	4620      	mov	r0, r4
 80074d6:	bd70      	pop	{r4, r5, r6, pc}

080074d8 <__sfp_lock_acquire>:
 80074d8:	4801      	ldr	r0, [pc, #4]	; (80074e0 <__sfp_lock_acquire+0x8>)
 80074da:	f000 b8b3 	b.w	8007644 <__retarget_lock_acquire_recursive>
 80074de:	bf00      	nop
 80074e0:	200008a8 	.word	0x200008a8

080074e4 <__sfp_lock_release>:
 80074e4:	4801      	ldr	r0, [pc, #4]	; (80074ec <__sfp_lock_release+0x8>)
 80074e6:	f000 b8ae 	b.w	8007646 <__retarget_lock_release_recursive>
 80074ea:	bf00      	nop
 80074ec:	200008a8 	.word	0x200008a8

080074f0 <__sinit_lock_acquire>:
 80074f0:	4801      	ldr	r0, [pc, #4]	; (80074f8 <__sinit_lock_acquire+0x8>)
 80074f2:	f000 b8a7 	b.w	8007644 <__retarget_lock_acquire_recursive>
 80074f6:	bf00      	nop
 80074f8:	200008a3 	.word	0x200008a3

080074fc <__sinit_lock_release>:
 80074fc:	4801      	ldr	r0, [pc, #4]	; (8007504 <__sinit_lock_release+0x8>)
 80074fe:	f000 b8a2 	b.w	8007646 <__retarget_lock_release_recursive>
 8007502:	bf00      	nop
 8007504:	200008a3 	.word	0x200008a3

08007508 <__sinit>:
 8007508:	b510      	push	{r4, lr}
 800750a:	4604      	mov	r4, r0
 800750c:	f7ff fff0 	bl	80074f0 <__sinit_lock_acquire>
 8007510:	69a3      	ldr	r3, [r4, #24]
 8007512:	b11b      	cbz	r3, 800751c <__sinit+0x14>
 8007514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007518:	f7ff bff0 	b.w	80074fc <__sinit_lock_release>
 800751c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007520:	6523      	str	r3, [r4, #80]	; 0x50
 8007522:	4b13      	ldr	r3, [pc, #76]	; (8007570 <__sinit+0x68>)
 8007524:	4a13      	ldr	r2, [pc, #76]	; (8007574 <__sinit+0x6c>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	62a2      	str	r2, [r4, #40]	; 0x28
 800752a:	42a3      	cmp	r3, r4
 800752c:	bf04      	itt	eq
 800752e:	2301      	moveq	r3, #1
 8007530:	61a3      	streq	r3, [r4, #24]
 8007532:	4620      	mov	r0, r4
 8007534:	f000 f820 	bl	8007578 <__sfp>
 8007538:	6060      	str	r0, [r4, #4]
 800753a:	4620      	mov	r0, r4
 800753c:	f000 f81c 	bl	8007578 <__sfp>
 8007540:	60a0      	str	r0, [r4, #8]
 8007542:	4620      	mov	r0, r4
 8007544:	f000 f818 	bl	8007578 <__sfp>
 8007548:	2200      	movs	r2, #0
 800754a:	60e0      	str	r0, [r4, #12]
 800754c:	2104      	movs	r1, #4
 800754e:	6860      	ldr	r0, [r4, #4]
 8007550:	f7ff ff82 	bl	8007458 <std>
 8007554:	68a0      	ldr	r0, [r4, #8]
 8007556:	2201      	movs	r2, #1
 8007558:	2109      	movs	r1, #9
 800755a:	f7ff ff7d 	bl	8007458 <std>
 800755e:	68e0      	ldr	r0, [r4, #12]
 8007560:	2202      	movs	r2, #2
 8007562:	2112      	movs	r1, #18
 8007564:	f7ff ff78 	bl	8007458 <std>
 8007568:	2301      	movs	r3, #1
 800756a:	61a3      	str	r3, [r4, #24]
 800756c:	e7d2      	b.n	8007514 <__sinit+0xc>
 800756e:	bf00      	nop
 8007570:	08008340 	.word	0x08008340
 8007574:	080074a1 	.word	0x080074a1

08007578 <__sfp>:
 8007578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800757a:	4607      	mov	r7, r0
 800757c:	f7ff ffac 	bl	80074d8 <__sfp_lock_acquire>
 8007580:	4b1e      	ldr	r3, [pc, #120]	; (80075fc <__sfp+0x84>)
 8007582:	681e      	ldr	r6, [r3, #0]
 8007584:	69b3      	ldr	r3, [r6, #24]
 8007586:	b913      	cbnz	r3, 800758e <__sfp+0x16>
 8007588:	4630      	mov	r0, r6
 800758a:	f7ff ffbd 	bl	8007508 <__sinit>
 800758e:	3648      	adds	r6, #72	; 0x48
 8007590:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007594:	3b01      	subs	r3, #1
 8007596:	d503      	bpl.n	80075a0 <__sfp+0x28>
 8007598:	6833      	ldr	r3, [r6, #0]
 800759a:	b30b      	cbz	r3, 80075e0 <__sfp+0x68>
 800759c:	6836      	ldr	r6, [r6, #0]
 800759e:	e7f7      	b.n	8007590 <__sfp+0x18>
 80075a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80075a4:	b9d5      	cbnz	r5, 80075dc <__sfp+0x64>
 80075a6:	4b16      	ldr	r3, [pc, #88]	; (8007600 <__sfp+0x88>)
 80075a8:	60e3      	str	r3, [r4, #12]
 80075aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80075ae:	6665      	str	r5, [r4, #100]	; 0x64
 80075b0:	f000 f847 	bl	8007642 <__retarget_lock_init_recursive>
 80075b4:	f7ff ff96 	bl	80074e4 <__sfp_lock_release>
 80075b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80075bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80075c0:	6025      	str	r5, [r4, #0]
 80075c2:	61a5      	str	r5, [r4, #24]
 80075c4:	2208      	movs	r2, #8
 80075c6:	4629      	mov	r1, r5
 80075c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80075cc:	f7ff ff24 	bl	8007418 <memset>
 80075d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80075d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80075d8:	4620      	mov	r0, r4
 80075da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075dc:	3468      	adds	r4, #104	; 0x68
 80075de:	e7d9      	b.n	8007594 <__sfp+0x1c>
 80075e0:	2104      	movs	r1, #4
 80075e2:	4638      	mov	r0, r7
 80075e4:	f7ff ff62 	bl	80074ac <__sfmoreglue>
 80075e8:	4604      	mov	r4, r0
 80075ea:	6030      	str	r0, [r6, #0]
 80075ec:	2800      	cmp	r0, #0
 80075ee:	d1d5      	bne.n	800759c <__sfp+0x24>
 80075f0:	f7ff ff78 	bl	80074e4 <__sfp_lock_release>
 80075f4:	230c      	movs	r3, #12
 80075f6:	603b      	str	r3, [r7, #0]
 80075f8:	e7ee      	b.n	80075d8 <__sfp+0x60>
 80075fa:	bf00      	nop
 80075fc:	08008340 	.word	0x08008340
 8007600:	ffff0001 	.word	0xffff0001

08007604 <_fwalk_reent>:
 8007604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007608:	4606      	mov	r6, r0
 800760a:	4688      	mov	r8, r1
 800760c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007610:	2700      	movs	r7, #0
 8007612:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007616:	f1b9 0901 	subs.w	r9, r9, #1
 800761a:	d505      	bpl.n	8007628 <_fwalk_reent+0x24>
 800761c:	6824      	ldr	r4, [r4, #0]
 800761e:	2c00      	cmp	r4, #0
 8007620:	d1f7      	bne.n	8007612 <_fwalk_reent+0xe>
 8007622:	4638      	mov	r0, r7
 8007624:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007628:	89ab      	ldrh	r3, [r5, #12]
 800762a:	2b01      	cmp	r3, #1
 800762c:	d907      	bls.n	800763e <_fwalk_reent+0x3a>
 800762e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007632:	3301      	adds	r3, #1
 8007634:	d003      	beq.n	800763e <_fwalk_reent+0x3a>
 8007636:	4629      	mov	r1, r5
 8007638:	4630      	mov	r0, r6
 800763a:	47c0      	blx	r8
 800763c:	4307      	orrs	r7, r0
 800763e:	3568      	adds	r5, #104	; 0x68
 8007640:	e7e9      	b.n	8007616 <_fwalk_reent+0x12>

08007642 <__retarget_lock_init_recursive>:
 8007642:	4770      	bx	lr

08007644 <__retarget_lock_acquire_recursive>:
 8007644:	4770      	bx	lr

08007646 <__retarget_lock_release_recursive>:
 8007646:	4770      	bx	lr

08007648 <_malloc_r>:
 8007648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800764a:	1ccd      	adds	r5, r1, #3
 800764c:	f025 0503 	bic.w	r5, r5, #3
 8007650:	3508      	adds	r5, #8
 8007652:	2d0c      	cmp	r5, #12
 8007654:	bf38      	it	cc
 8007656:	250c      	movcc	r5, #12
 8007658:	2d00      	cmp	r5, #0
 800765a:	4606      	mov	r6, r0
 800765c:	db01      	blt.n	8007662 <_malloc_r+0x1a>
 800765e:	42a9      	cmp	r1, r5
 8007660:	d903      	bls.n	800766a <_malloc_r+0x22>
 8007662:	230c      	movs	r3, #12
 8007664:	6033      	str	r3, [r6, #0]
 8007666:	2000      	movs	r0, #0
 8007668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800766a:	f000 fda3 	bl	80081b4 <__malloc_lock>
 800766e:	4921      	ldr	r1, [pc, #132]	; (80076f4 <_malloc_r+0xac>)
 8007670:	680a      	ldr	r2, [r1, #0]
 8007672:	4614      	mov	r4, r2
 8007674:	b99c      	cbnz	r4, 800769e <_malloc_r+0x56>
 8007676:	4f20      	ldr	r7, [pc, #128]	; (80076f8 <_malloc_r+0xb0>)
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	b923      	cbnz	r3, 8007686 <_malloc_r+0x3e>
 800767c:	4621      	mov	r1, r4
 800767e:	4630      	mov	r0, r6
 8007680:	f000 fb2a 	bl	8007cd8 <_sbrk_r>
 8007684:	6038      	str	r0, [r7, #0]
 8007686:	4629      	mov	r1, r5
 8007688:	4630      	mov	r0, r6
 800768a:	f000 fb25 	bl	8007cd8 <_sbrk_r>
 800768e:	1c43      	adds	r3, r0, #1
 8007690:	d123      	bne.n	80076da <_malloc_r+0x92>
 8007692:	230c      	movs	r3, #12
 8007694:	6033      	str	r3, [r6, #0]
 8007696:	4630      	mov	r0, r6
 8007698:	f000 fd92 	bl	80081c0 <__malloc_unlock>
 800769c:	e7e3      	b.n	8007666 <_malloc_r+0x1e>
 800769e:	6823      	ldr	r3, [r4, #0]
 80076a0:	1b5b      	subs	r3, r3, r5
 80076a2:	d417      	bmi.n	80076d4 <_malloc_r+0x8c>
 80076a4:	2b0b      	cmp	r3, #11
 80076a6:	d903      	bls.n	80076b0 <_malloc_r+0x68>
 80076a8:	6023      	str	r3, [r4, #0]
 80076aa:	441c      	add	r4, r3
 80076ac:	6025      	str	r5, [r4, #0]
 80076ae:	e004      	b.n	80076ba <_malloc_r+0x72>
 80076b0:	6863      	ldr	r3, [r4, #4]
 80076b2:	42a2      	cmp	r2, r4
 80076b4:	bf0c      	ite	eq
 80076b6:	600b      	streq	r3, [r1, #0]
 80076b8:	6053      	strne	r3, [r2, #4]
 80076ba:	4630      	mov	r0, r6
 80076bc:	f000 fd80 	bl	80081c0 <__malloc_unlock>
 80076c0:	f104 000b 	add.w	r0, r4, #11
 80076c4:	1d23      	adds	r3, r4, #4
 80076c6:	f020 0007 	bic.w	r0, r0, #7
 80076ca:	1ac2      	subs	r2, r0, r3
 80076cc:	d0cc      	beq.n	8007668 <_malloc_r+0x20>
 80076ce:	1a1b      	subs	r3, r3, r0
 80076d0:	50a3      	str	r3, [r4, r2]
 80076d2:	e7c9      	b.n	8007668 <_malloc_r+0x20>
 80076d4:	4622      	mov	r2, r4
 80076d6:	6864      	ldr	r4, [r4, #4]
 80076d8:	e7cc      	b.n	8007674 <_malloc_r+0x2c>
 80076da:	1cc4      	adds	r4, r0, #3
 80076dc:	f024 0403 	bic.w	r4, r4, #3
 80076e0:	42a0      	cmp	r0, r4
 80076e2:	d0e3      	beq.n	80076ac <_malloc_r+0x64>
 80076e4:	1a21      	subs	r1, r4, r0
 80076e6:	4630      	mov	r0, r6
 80076e8:	f000 faf6 	bl	8007cd8 <_sbrk_r>
 80076ec:	3001      	adds	r0, #1
 80076ee:	d1dd      	bne.n	80076ac <_malloc_r+0x64>
 80076f0:	e7cf      	b.n	8007692 <_malloc_r+0x4a>
 80076f2:	bf00      	nop
 80076f4:	20000708 	.word	0x20000708
 80076f8:	2000070c 	.word	0x2000070c

080076fc <__sfputc_r>:
 80076fc:	6893      	ldr	r3, [r2, #8]
 80076fe:	3b01      	subs	r3, #1
 8007700:	2b00      	cmp	r3, #0
 8007702:	b410      	push	{r4}
 8007704:	6093      	str	r3, [r2, #8]
 8007706:	da08      	bge.n	800771a <__sfputc_r+0x1e>
 8007708:	6994      	ldr	r4, [r2, #24]
 800770a:	42a3      	cmp	r3, r4
 800770c:	db01      	blt.n	8007712 <__sfputc_r+0x16>
 800770e:	290a      	cmp	r1, #10
 8007710:	d103      	bne.n	800771a <__sfputc_r+0x1e>
 8007712:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007716:	f000 bb33 	b.w	8007d80 <__swbuf_r>
 800771a:	6813      	ldr	r3, [r2, #0]
 800771c:	1c58      	adds	r0, r3, #1
 800771e:	6010      	str	r0, [r2, #0]
 8007720:	7019      	strb	r1, [r3, #0]
 8007722:	4608      	mov	r0, r1
 8007724:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007728:	4770      	bx	lr

0800772a <__sfputs_r>:
 800772a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800772c:	4606      	mov	r6, r0
 800772e:	460f      	mov	r7, r1
 8007730:	4614      	mov	r4, r2
 8007732:	18d5      	adds	r5, r2, r3
 8007734:	42ac      	cmp	r4, r5
 8007736:	d101      	bne.n	800773c <__sfputs_r+0x12>
 8007738:	2000      	movs	r0, #0
 800773a:	e007      	b.n	800774c <__sfputs_r+0x22>
 800773c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007740:	463a      	mov	r2, r7
 8007742:	4630      	mov	r0, r6
 8007744:	f7ff ffda 	bl	80076fc <__sfputc_r>
 8007748:	1c43      	adds	r3, r0, #1
 800774a:	d1f3      	bne.n	8007734 <__sfputs_r+0xa>
 800774c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007750 <_vfiprintf_r>:
 8007750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007754:	460d      	mov	r5, r1
 8007756:	b09d      	sub	sp, #116	; 0x74
 8007758:	4614      	mov	r4, r2
 800775a:	4698      	mov	r8, r3
 800775c:	4606      	mov	r6, r0
 800775e:	b118      	cbz	r0, 8007768 <_vfiprintf_r+0x18>
 8007760:	6983      	ldr	r3, [r0, #24]
 8007762:	b90b      	cbnz	r3, 8007768 <_vfiprintf_r+0x18>
 8007764:	f7ff fed0 	bl	8007508 <__sinit>
 8007768:	4b89      	ldr	r3, [pc, #548]	; (8007990 <_vfiprintf_r+0x240>)
 800776a:	429d      	cmp	r5, r3
 800776c:	d11b      	bne.n	80077a6 <_vfiprintf_r+0x56>
 800776e:	6875      	ldr	r5, [r6, #4]
 8007770:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007772:	07d9      	lsls	r1, r3, #31
 8007774:	d405      	bmi.n	8007782 <_vfiprintf_r+0x32>
 8007776:	89ab      	ldrh	r3, [r5, #12]
 8007778:	059a      	lsls	r2, r3, #22
 800777a:	d402      	bmi.n	8007782 <_vfiprintf_r+0x32>
 800777c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800777e:	f7ff ff61 	bl	8007644 <__retarget_lock_acquire_recursive>
 8007782:	89ab      	ldrh	r3, [r5, #12]
 8007784:	071b      	lsls	r3, r3, #28
 8007786:	d501      	bpl.n	800778c <_vfiprintf_r+0x3c>
 8007788:	692b      	ldr	r3, [r5, #16]
 800778a:	b9eb      	cbnz	r3, 80077c8 <_vfiprintf_r+0x78>
 800778c:	4629      	mov	r1, r5
 800778e:	4630      	mov	r0, r6
 8007790:	f000 fb5a 	bl	8007e48 <__swsetup_r>
 8007794:	b1c0      	cbz	r0, 80077c8 <_vfiprintf_r+0x78>
 8007796:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007798:	07dc      	lsls	r4, r3, #31
 800779a:	d50e      	bpl.n	80077ba <_vfiprintf_r+0x6a>
 800779c:	f04f 30ff 	mov.w	r0, #4294967295
 80077a0:	b01d      	add	sp, #116	; 0x74
 80077a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077a6:	4b7b      	ldr	r3, [pc, #492]	; (8007994 <_vfiprintf_r+0x244>)
 80077a8:	429d      	cmp	r5, r3
 80077aa:	d101      	bne.n	80077b0 <_vfiprintf_r+0x60>
 80077ac:	68b5      	ldr	r5, [r6, #8]
 80077ae:	e7df      	b.n	8007770 <_vfiprintf_r+0x20>
 80077b0:	4b79      	ldr	r3, [pc, #484]	; (8007998 <_vfiprintf_r+0x248>)
 80077b2:	429d      	cmp	r5, r3
 80077b4:	bf08      	it	eq
 80077b6:	68f5      	ldreq	r5, [r6, #12]
 80077b8:	e7da      	b.n	8007770 <_vfiprintf_r+0x20>
 80077ba:	89ab      	ldrh	r3, [r5, #12]
 80077bc:	0598      	lsls	r0, r3, #22
 80077be:	d4ed      	bmi.n	800779c <_vfiprintf_r+0x4c>
 80077c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80077c2:	f7ff ff40 	bl	8007646 <__retarget_lock_release_recursive>
 80077c6:	e7e9      	b.n	800779c <_vfiprintf_r+0x4c>
 80077c8:	2300      	movs	r3, #0
 80077ca:	9309      	str	r3, [sp, #36]	; 0x24
 80077cc:	2320      	movs	r3, #32
 80077ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80077d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80077d6:	2330      	movs	r3, #48	; 0x30
 80077d8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800799c <_vfiprintf_r+0x24c>
 80077dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80077e0:	f04f 0901 	mov.w	r9, #1
 80077e4:	4623      	mov	r3, r4
 80077e6:	469a      	mov	sl, r3
 80077e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80077ec:	b10a      	cbz	r2, 80077f2 <_vfiprintf_r+0xa2>
 80077ee:	2a25      	cmp	r2, #37	; 0x25
 80077f0:	d1f9      	bne.n	80077e6 <_vfiprintf_r+0x96>
 80077f2:	ebba 0b04 	subs.w	fp, sl, r4
 80077f6:	d00b      	beq.n	8007810 <_vfiprintf_r+0xc0>
 80077f8:	465b      	mov	r3, fp
 80077fa:	4622      	mov	r2, r4
 80077fc:	4629      	mov	r1, r5
 80077fe:	4630      	mov	r0, r6
 8007800:	f7ff ff93 	bl	800772a <__sfputs_r>
 8007804:	3001      	adds	r0, #1
 8007806:	f000 80aa 	beq.w	800795e <_vfiprintf_r+0x20e>
 800780a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800780c:	445a      	add	r2, fp
 800780e:	9209      	str	r2, [sp, #36]	; 0x24
 8007810:	f89a 3000 	ldrb.w	r3, [sl]
 8007814:	2b00      	cmp	r3, #0
 8007816:	f000 80a2 	beq.w	800795e <_vfiprintf_r+0x20e>
 800781a:	2300      	movs	r3, #0
 800781c:	f04f 32ff 	mov.w	r2, #4294967295
 8007820:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007824:	f10a 0a01 	add.w	sl, sl, #1
 8007828:	9304      	str	r3, [sp, #16]
 800782a:	9307      	str	r3, [sp, #28]
 800782c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007830:	931a      	str	r3, [sp, #104]	; 0x68
 8007832:	4654      	mov	r4, sl
 8007834:	2205      	movs	r2, #5
 8007836:	f814 1b01 	ldrb.w	r1, [r4], #1
 800783a:	4858      	ldr	r0, [pc, #352]	; (800799c <_vfiprintf_r+0x24c>)
 800783c:	f7f8 fcc8 	bl	80001d0 <memchr>
 8007840:	9a04      	ldr	r2, [sp, #16]
 8007842:	b9d8      	cbnz	r0, 800787c <_vfiprintf_r+0x12c>
 8007844:	06d1      	lsls	r1, r2, #27
 8007846:	bf44      	itt	mi
 8007848:	2320      	movmi	r3, #32
 800784a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800784e:	0713      	lsls	r3, r2, #28
 8007850:	bf44      	itt	mi
 8007852:	232b      	movmi	r3, #43	; 0x2b
 8007854:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007858:	f89a 3000 	ldrb.w	r3, [sl]
 800785c:	2b2a      	cmp	r3, #42	; 0x2a
 800785e:	d015      	beq.n	800788c <_vfiprintf_r+0x13c>
 8007860:	9a07      	ldr	r2, [sp, #28]
 8007862:	4654      	mov	r4, sl
 8007864:	2000      	movs	r0, #0
 8007866:	f04f 0c0a 	mov.w	ip, #10
 800786a:	4621      	mov	r1, r4
 800786c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007870:	3b30      	subs	r3, #48	; 0x30
 8007872:	2b09      	cmp	r3, #9
 8007874:	d94e      	bls.n	8007914 <_vfiprintf_r+0x1c4>
 8007876:	b1b0      	cbz	r0, 80078a6 <_vfiprintf_r+0x156>
 8007878:	9207      	str	r2, [sp, #28]
 800787a:	e014      	b.n	80078a6 <_vfiprintf_r+0x156>
 800787c:	eba0 0308 	sub.w	r3, r0, r8
 8007880:	fa09 f303 	lsl.w	r3, r9, r3
 8007884:	4313      	orrs	r3, r2
 8007886:	9304      	str	r3, [sp, #16]
 8007888:	46a2      	mov	sl, r4
 800788a:	e7d2      	b.n	8007832 <_vfiprintf_r+0xe2>
 800788c:	9b03      	ldr	r3, [sp, #12]
 800788e:	1d19      	adds	r1, r3, #4
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	9103      	str	r1, [sp, #12]
 8007894:	2b00      	cmp	r3, #0
 8007896:	bfbb      	ittet	lt
 8007898:	425b      	neglt	r3, r3
 800789a:	f042 0202 	orrlt.w	r2, r2, #2
 800789e:	9307      	strge	r3, [sp, #28]
 80078a0:	9307      	strlt	r3, [sp, #28]
 80078a2:	bfb8      	it	lt
 80078a4:	9204      	strlt	r2, [sp, #16]
 80078a6:	7823      	ldrb	r3, [r4, #0]
 80078a8:	2b2e      	cmp	r3, #46	; 0x2e
 80078aa:	d10c      	bne.n	80078c6 <_vfiprintf_r+0x176>
 80078ac:	7863      	ldrb	r3, [r4, #1]
 80078ae:	2b2a      	cmp	r3, #42	; 0x2a
 80078b0:	d135      	bne.n	800791e <_vfiprintf_r+0x1ce>
 80078b2:	9b03      	ldr	r3, [sp, #12]
 80078b4:	1d1a      	adds	r2, r3, #4
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	9203      	str	r2, [sp, #12]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	bfb8      	it	lt
 80078be:	f04f 33ff 	movlt.w	r3, #4294967295
 80078c2:	3402      	adds	r4, #2
 80078c4:	9305      	str	r3, [sp, #20]
 80078c6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80079ac <_vfiprintf_r+0x25c>
 80078ca:	7821      	ldrb	r1, [r4, #0]
 80078cc:	2203      	movs	r2, #3
 80078ce:	4650      	mov	r0, sl
 80078d0:	f7f8 fc7e 	bl	80001d0 <memchr>
 80078d4:	b140      	cbz	r0, 80078e8 <_vfiprintf_r+0x198>
 80078d6:	2340      	movs	r3, #64	; 0x40
 80078d8:	eba0 000a 	sub.w	r0, r0, sl
 80078dc:	fa03 f000 	lsl.w	r0, r3, r0
 80078e0:	9b04      	ldr	r3, [sp, #16]
 80078e2:	4303      	orrs	r3, r0
 80078e4:	3401      	adds	r4, #1
 80078e6:	9304      	str	r3, [sp, #16]
 80078e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078ec:	482c      	ldr	r0, [pc, #176]	; (80079a0 <_vfiprintf_r+0x250>)
 80078ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80078f2:	2206      	movs	r2, #6
 80078f4:	f7f8 fc6c 	bl	80001d0 <memchr>
 80078f8:	2800      	cmp	r0, #0
 80078fa:	d03f      	beq.n	800797c <_vfiprintf_r+0x22c>
 80078fc:	4b29      	ldr	r3, [pc, #164]	; (80079a4 <_vfiprintf_r+0x254>)
 80078fe:	bb1b      	cbnz	r3, 8007948 <_vfiprintf_r+0x1f8>
 8007900:	9b03      	ldr	r3, [sp, #12]
 8007902:	3307      	adds	r3, #7
 8007904:	f023 0307 	bic.w	r3, r3, #7
 8007908:	3308      	adds	r3, #8
 800790a:	9303      	str	r3, [sp, #12]
 800790c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800790e:	443b      	add	r3, r7
 8007910:	9309      	str	r3, [sp, #36]	; 0x24
 8007912:	e767      	b.n	80077e4 <_vfiprintf_r+0x94>
 8007914:	fb0c 3202 	mla	r2, ip, r2, r3
 8007918:	460c      	mov	r4, r1
 800791a:	2001      	movs	r0, #1
 800791c:	e7a5      	b.n	800786a <_vfiprintf_r+0x11a>
 800791e:	2300      	movs	r3, #0
 8007920:	3401      	adds	r4, #1
 8007922:	9305      	str	r3, [sp, #20]
 8007924:	4619      	mov	r1, r3
 8007926:	f04f 0c0a 	mov.w	ip, #10
 800792a:	4620      	mov	r0, r4
 800792c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007930:	3a30      	subs	r2, #48	; 0x30
 8007932:	2a09      	cmp	r2, #9
 8007934:	d903      	bls.n	800793e <_vfiprintf_r+0x1ee>
 8007936:	2b00      	cmp	r3, #0
 8007938:	d0c5      	beq.n	80078c6 <_vfiprintf_r+0x176>
 800793a:	9105      	str	r1, [sp, #20]
 800793c:	e7c3      	b.n	80078c6 <_vfiprintf_r+0x176>
 800793e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007942:	4604      	mov	r4, r0
 8007944:	2301      	movs	r3, #1
 8007946:	e7f0      	b.n	800792a <_vfiprintf_r+0x1da>
 8007948:	ab03      	add	r3, sp, #12
 800794a:	9300      	str	r3, [sp, #0]
 800794c:	462a      	mov	r2, r5
 800794e:	4b16      	ldr	r3, [pc, #88]	; (80079a8 <_vfiprintf_r+0x258>)
 8007950:	a904      	add	r1, sp, #16
 8007952:	4630      	mov	r0, r6
 8007954:	f3af 8000 	nop.w
 8007958:	4607      	mov	r7, r0
 800795a:	1c78      	adds	r0, r7, #1
 800795c:	d1d6      	bne.n	800790c <_vfiprintf_r+0x1bc>
 800795e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007960:	07d9      	lsls	r1, r3, #31
 8007962:	d405      	bmi.n	8007970 <_vfiprintf_r+0x220>
 8007964:	89ab      	ldrh	r3, [r5, #12]
 8007966:	059a      	lsls	r2, r3, #22
 8007968:	d402      	bmi.n	8007970 <_vfiprintf_r+0x220>
 800796a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800796c:	f7ff fe6b 	bl	8007646 <__retarget_lock_release_recursive>
 8007970:	89ab      	ldrh	r3, [r5, #12]
 8007972:	065b      	lsls	r3, r3, #25
 8007974:	f53f af12 	bmi.w	800779c <_vfiprintf_r+0x4c>
 8007978:	9809      	ldr	r0, [sp, #36]	; 0x24
 800797a:	e711      	b.n	80077a0 <_vfiprintf_r+0x50>
 800797c:	ab03      	add	r3, sp, #12
 800797e:	9300      	str	r3, [sp, #0]
 8007980:	462a      	mov	r2, r5
 8007982:	4b09      	ldr	r3, [pc, #36]	; (80079a8 <_vfiprintf_r+0x258>)
 8007984:	a904      	add	r1, sp, #16
 8007986:	4630      	mov	r0, r6
 8007988:	f000 f880 	bl	8007a8c <_printf_i>
 800798c:	e7e4      	b.n	8007958 <_vfiprintf_r+0x208>
 800798e:	bf00      	nop
 8007990:	08008364 	.word	0x08008364
 8007994:	08008384 	.word	0x08008384
 8007998:	08008344 	.word	0x08008344
 800799c:	080083a4 	.word	0x080083a4
 80079a0:	080083ae 	.word	0x080083ae
 80079a4:	00000000 	.word	0x00000000
 80079a8:	0800772b 	.word	0x0800772b
 80079ac:	080083aa 	.word	0x080083aa

080079b0 <_printf_common>:
 80079b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079b4:	4616      	mov	r6, r2
 80079b6:	4699      	mov	r9, r3
 80079b8:	688a      	ldr	r2, [r1, #8]
 80079ba:	690b      	ldr	r3, [r1, #16]
 80079bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80079c0:	4293      	cmp	r3, r2
 80079c2:	bfb8      	it	lt
 80079c4:	4613      	movlt	r3, r2
 80079c6:	6033      	str	r3, [r6, #0]
 80079c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80079cc:	4607      	mov	r7, r0
 80079ce:	460c      	mov	r4, r1
 80079d0:	b10a      	cbz	r2, 80079d6 <_printf_common+0x26>
 80079d2:	3301      	adds	r3, #1
 80079d4:	6033      	str	r3, [r6, #0]
 80079d6:	6823      	ldr	r3, [r4, #0]
 80079d8:	0699      	lsls	r1, r3, #26
 80079da:	bf42      	ittt	mi
 80079dc:	6833      	ldrmi	r3, [r6, #0]
 80079de:	3302      	addmi	r3, #2
 80079e0:	6033      	strmi	r3, [r6, #0]
 80079e2:	6825      	ldr	r5, [r4, #0]
 80079e4:	f015 0506 	ands.w	r5, r5, #6
 80079e8:	d106      	bne.n	80079f8 <_printf_common+0x48>
 80079ea:	f104 0a19 	add.w	sl, r4, #25
 80079ee:	68e3      	ldr	r3, [r4, #12]
 80079f0:	6832      	ldr	r2, [r6, #0]
 80079f2:	1a9b      	subs	r3, r3, r2
 80079f4:	42ab      	cmp	r3, r5
 80079f6:	dc26      	bgt.n	8007a46 <_printf_common+0x96>
 80079f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80079fc:	1e13      	subs	r3, r2, #0
 80079fe:	6822      	ldr	r2, [r4, #0]
 8007a00:	bf18      	it	ne
 8007a02:	2301      	movne	r3, #1
 8007a04:	0692      	lsls	r2, r2, #26
 8007a06:	d42b      	bmi.n	8007a60 <_printf_common+0xb0>
 8007a08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007a0c:	4649      	mov	r1, r9
 8007a0e:	4638      	mov	r0, r7
 8007a10:	47c0      	blx	r8
 8007a12:	3001      	adds	r0, #1
 8007a14:	d01e      	beq.n	8007a54 <_printf_common+0xa4>
 8007a16:	6823      	ldr	r3, [r4, #0]
 8007a18:	68e5      	ldr	r5, [r4, #12]
 8007a1a:	6832      	ldr	r2, [r6, #0]
 8007a1c:	f003 0306 	and.w	r3, r3, #6
 8007a20:	2b04      	cmp	r3, #4
 8007a22:	bf08      	it	eq
 8007a24:	1aad      	subeq	r5, r5, r2
 8007a26:	68a3      	ldr	r3, [r4, #8]
 8007a28:	6922      	ldr	r2, [r4, #16]
 8007a2a:	bf0c      	ite	eq
 8007a2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a30:	2500      	movne	r5, #0
 8007a32:	4293      	cmp	r3, r2
 8007a34:	bfc4      	itt	gt
 8007a36:	1a9b      	subgt	r3, r3, r2
 8007a38:	18ed      	addgt	r5, r5, r3
 8007a3a:	2600      	movs	r6, #0
 8007a3c:	341a      	adds	r4, #26
 8007a3e:	42b5      	cmp	r5, r6
 8007a40:	d11a      	bne.n	8007a78 <_printf_common+0xc8>
 8007a42:	2000      	movs	r0, #0
 8007a44:	e008      	b.n	8007a58 <_printf_common+0xa8>
 8007a46:	2301      	movs	r3, #1
 8007a48:	4652      	mov	r2, sl
 8007a4a:	4649      	mov	r1, r9
 8007a4c:	4638      	mov	r0, r7
 8007a4e:	47c0      	blx	r8
 8007a50:	3001      	adds	r0, #1
 8007a52:	d103      	bne.n	8007a5c <_printf_common+0xac>
 8007a54:	f04f 30ff 	mov.w	r0, #4294967295
 8007a58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a5c:	3501      	adds	r5, #1
 8007a5e:	e7c6      	b.n	80079ee <_printf_common+0x3e>
 8007a60:	18e1      	adds	r1, r4, r3
 8007a62:	1c5a      	adds	r2, r3, #1
 8007a64:	2030      	movs	r0, #48	; 0x30
 8007a66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a6a:	4422      	add	r2, r4
 8007a6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a74:	3302      	adds	r3, #2
 8007a76:	e7c7      	b.n	8007a08 <_printf_common+0x58>
 8007a78:	2301      	movs	r3, #1
 8007a7a:	4622      	mov	r2, r4
 8007a7c:	4649      	mov	r1, r9
 8007a7e:	4638      	mov	r0, r7
 8007a80:	47c0      	blx	r8
 8007a82:	3001      	adds	r0, #1
 8007a84:	d0e6      	beq.n	8007a54 <_printf_common+0xa4>
 8007a86:	3601      	adds	r6, #1
 8007a88:	e7d9      	b.n	8007a3e <_printf_common+0x8e>
	...

08007a8c <_printf_i>:
 8007a8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a90:	460c      	mov	r4, r1
 8007a92:	4691      	mov	r9, r2
 8007a94:	7e27      	ldrb	r7, [r4, #24]
 8007a96:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007a98:	2f78      	cmp	r7, #120	; 0x78
 8007a9a:	4680      	mov	r8, r0
 8007a9c:	469a      	mov	sl, r3
 8007a9e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007aa2:	d807      	bhi.n	8007ab4 <_printf_i+0x28>
 8007aa4:	2f62      	cmp	r7, #98	; 0x62
 8007aa6:	d80a      	bhi.n	8007abe <_printf_i+0x32>
 8007aa8:	2f00      	cmp	r7, #0
 8007aaa:	f000 80d8 	beq.w	8007c5e <_printf_i+0x1d2>
 8007aae:	2f58      	cmp	r7, #88	; 0x58
 8007ab0:	f000 80a3 	beq.w	8007bfa <_printf_i+0x16e>
 8007ab4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007ab8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007abc:	e03a      	b.n	8007b34 <_printf_i+0xa8>
 8007abe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007ac2:	2b15      	cmp	r3, #21
 8007ac4:	d8f6      	bhi.n	8007ab4 <_printf_i+0x28>
 8007ac6:	a001      	add	r0, pc, #4	; (adr r0, 8007acc <_printf_i+0x40>)
 8007ac8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007acc:	08007b25 	.word	0x08007b25
 8007ad0:	08007b39 	.word	0x08007b39
 8007ad4:	08007ab5 	.word	0x08007ab5
 8007ad8:	08007ab5 	.word	0x08007ab5
 8007adc:	08007ab5 	.word	0x08007ab5
 8007ae0:	08007ab5 	.word	0x08007ab5
 8007ae4:	08007b39 	.word	0x08007b39
 8007ae8:	08007ab5 	.word	0x08007ab5
 8007aec:	08007ab5 	.word	0x08007ab5
 8007af0:	08007ab5 	.word	0x08007ab5
 8007af4:	08007ab5 	.word	0x08007ab5
 8007af8:	08007c45 	.word	0x08007c45
 8007afc:	08007b69 	.word	0x08007b69
 8007b00:	08007c27 	.word	0x08007c27
 8007b04:	08007ab5 	.word	0x08007ab5
 8007b08:	08007ab5 	.word	0x08007ab5
 8007b0c:	08007c67 	.word	0x08007c67
 8007b10:	08007ab5 	.word	0x08007ab5
 8007b14:	08007b69 	.word	0x08007b69
 8007b18:	08007ab5 	.word	0x08007ab5
 8007b1c:	08007ab5 	.word	0x08007ab5
 8007b20:	08007c2f 	.word	0x08007c2f
 8007b24:	680b      	ldr	r3, [r1, #0]
 8007b26:	1d1a      	adds	r2, r3, #4
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	600a      	str	r2, [r1, #0]
 8007b2c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007b30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b34:	2301      	movs	r3, #1
 8007b36:	e0a3      	b.n	8007c80 <_printf_i+0x1f4>
 8007b38:	6825      	ldr	r5, [r4, #0]
 8007b3a:	6808      	ldr	r0, [r1, #0]
 8007b3c:	062e      	lsls	r6, r5, #24
 8007b3e:	f100 0304 	add.w	r3, r0, #4
 8007b42:	d50a      	bpl.n	8007b5a <_printf_i+0xce>
 8007b44:	6805      	ldr	r5, [r0, #0]
 8007b46:	600b      	str	r3, [r1, #0]
 8007b48:	2d00      	cmp	r5, #0
 8007b4a:	da03      	bge.n	8007b54 <_printf_i+0xc8>
 8007b4c:	232d      	movs	r3, #45	; 0x2d
 8007b4e:	426d      	negs	r5, r5
 8007b50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b54:	485e      	ldr	r0, [pc, #376]	; (8007cd0 <_printf_i+0x244>)
 8007b56:	230a      	movs	r3, #10
 8007b58:	e019      	b.n	8007b8e <_printf_i+0x102>
 8007b5a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007b5e:	6805      	ldr	r5, [r0, #0]
 8007b60:	600b      	str	r3, [r1, #0]
 8007b62:	bf18      	it	ne
 8007b64:	b22d      	sxthne	r5, r5
 8007b66:	e7ef      	b.n	8007b48 <_printf_i+0xbc>
 8007b68:	680b      	ldr	r3, [r1, #0]
 8007b6a:	6825      	ldr	r5, [r4, #0]
 8007b6c:	1d18      	adds	r0, r3, #4
 8007b6e:	6008      	str	r0, [r1, #0]
 8007b70:	0628      	lsls	r0, r5, #24
 8007b72:	d501      	bpl.n	8007b78 <_printf_i+0xec>
 8007b74:	681d      	ldr	r5, [r3, #0]
 8007b76:	e002      	b.n	8007b7e <_printf_i+0xf2>
 8007b78:	0669      	lsls	r1, r5, #25
 8007b7a:	d5fb      	bpl.n	8007b74 <_printf_i+0xe8>
 8007b7c:	881d      	ldrh	r5, [r3, #0]
 8007b7e:	4854      	ldr	r0, [pc, #336]	; (8007cd0 <_printf_i+0x244>)
 8007b80:	2f6f      	cmp	r7, #111	; 0x6f
 8007b82:	bf0c      	ite	eq
 8007b84:	2308      	moveq	r3, #8
 8007b86:	230a      	movne	r3, #10
 8007b88:	2100      	movs	r1, #0
 8007b8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007b8e:	6866      	ldr	r6, [r4, #4]
 8007b90:	60a6      	str	r6, [r4, #8]
 8007b92:	2e00      	cmp	r6, #0
 8007b94:	bfa2      	ittt	ge
 8007b96:	6821      	ldrge	r1, [r4, #0]
 8007b98:	f021 0104 	bicge.w	r1, r1, #4
 8007b9c:	6021      	strge	r1, [r4, #0]
 8007b9e:	b90d      	cbnz	r5, 8007ba4 <_printf_i+0x118>
 8007ba0:	2e00      	cmp	r6, #0
 8007ba2:	d04d      	beq.n	8007c40 <_printf_i+0x1b4>
 8007ba4:	4616      	mov	r6, r2
 8007ba6:	fbb5 f1f3 	udiv	r1, r5, r3
 8007baa:	fb03 5711 	mls	r7, r3, r1, r5
 8007bae:	5dc7      	ldrb	r7, [r0, r7]
 8007bb0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007bb4:	462f      	mov	r7, r5
 8007bb6:	42bb      	cmp	r3, r7
 8007bb8:	460d      	mov	r5, r1
 8007bba:	d9f4      	bls.n	8007ba6 <_printf_i+0x11a>
 8007bbc:	2b08      	cmp	r3, #8
 8007bbe:	d10b      	bne.n	8007bd8 <_printf_i+0x14c>
 8007bc0:	6823      	ldr	r3, [r4, #0]
 8007bc2:	07df      	lsls	r7, r3, #31
 8007bc4:	d508      	bpl.n	8007bd8 <_printf_i+0x14c>
 8007bc6:	6923      	ldr	r3, [r4, #16]
 8007bc8:	6861      	ldr	r1, [r4, #4]
 8007bca:	4299      	cmp	r1, r3
 8007bcc:	bfde      	ittt	le
 8007bce:	2330      	movle	r3, #48	; 0x30
 8007bd0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007bd4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007bd8:	1b92      	subs	r2, r2, r6
 8007bda:	6122      	str	r2, [r4, #16]
 8007bdc:	f8cd a000 	str.w	sl, [sp]
 8007be0:	464b      	mov	r3, r9
 8007be2:	aa03      	add	r2, sp, #12
 8007be4:	4621      	mov	r1, r4
 8007be6:	4640      	mov	r0, r8
 8007be8:	f7ff fee2 	bl	80079b0 <_printf_common>
 8007bec:	3001      	adds	r0, #1
 8007bee:	d14c      	bne.n	8007c8a <_printf_i+0x1fe>
 8007bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8007bf4:	b004      	add	sp, #16
 8007bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bfa:	4835      	ldr	r0, [pc, #212]	; (8007cd0 <_printf_i+0x244>)
 8007bfc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007c00:	6823      	ldr	r3, [r4, #0]
 8007c02:	680e      	ldr	r6, [r1, #0]
 8007c04:	061f      	lsls	r7, r3, #24
 8007c06:	f856 5b04 	ldr.w	r5, [r6], #4
 8007c0a:	600e      	str	r6, [r1, #0]
 8007c0c:	d514      	bpl.n	8007c38 <_printf_i+0x1ac>
 8007c0e:	07d9      	lsls	r1, r3, #31
 8007c10:	bf44      	itt	mi
 8007c12:	f043 0320 	orrmi.w	r3, r3, #32
 8007c16:	6023      	strmi	r3, [r4, #0]
 8007c18:	b91d      	cbnz	r5, 8007c22 <_printf_i+0x196>
 8007c1a:	6823      	ldr	r3, [r4, #0]
 8007c1c:	f023 0320 	bic.w	r3, r3, #32
 8007c20:	6023      	str	r3, [r4, #0]
 8007c22:	2310      	movs	r3, #16
 8007c24:	e7b0      	b.n	8007b88 <_printf_i+0xfc>
 8007c26:	6823      	ldr	r3, [r4, #0]
 8007c28:	f043 0320 	orr.w	r3, r3, #32
 8007c2c:	6023      	str	r3, [r4, #0]
 8007c2e:	2378      	movs	r3, #120	; 0x78
 8007c30:	4828      	ldr	r0, [pc, #160]	; (8007cd4 <_printf_i+0x248>)
 8007c32:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007c36:	e7e3      	b.n	8007c00 <_printf_i+0x174>
 8007c38:	065e      	lsls	r6, r3, #25
 8007c3a:	bf48      	it	mi
 8007c3c:	b2ad      	uxthmi	r5, r5
 8007c3e:	e7e6      	b.n	8007c0e <_printf_i+0x182>
 8007c40:	4616      	mov	r6, r2
 8007c42:	e7bb      	b.n	8007bbc <_printf_i+0x130>
 8007c44:	680b      	ldr	r3, [r1, #0]
 8007c46:	6826      	ldr	r6, [r4, #0]
 8007c48:	6960      	ldr	r0, [r4, #20]
 8007c4a:	1d1d      	adds	r5, r3, #4
 8007c4c:	600d      	str	r5, [r1, #0]
 8007c4e:	0635      	lsls	r5, r6, #24
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	d501      	bpl.n	8007c58 <_printf_i+0x1cc>
 8007c54:	6018      	str	r0, [r3, #0]
 8007c56:	e002      	b.n	8007c5e <_printf_i+0x1d2>
 8007c58:	0671      	lsls	r1, r6, #25
 8007c5a:	d5fb      	bpl.n	8007c54 <_printf_i+0x1c8>
 8007c5c:	8018      	strh	r0, [r3, #0]
 8007c5e:	2300      	movs	r3, #0
 8007c60:	6123      	str	r3, [r4, #16]
 8007c62:	4616      	mov	r6, r2
 8007c64:	e7ba      	b.n	8007bdc <_printf_i+0x150>
 8007c66:	680b      	ldr	r3, [r1, #0]
 8007c68:	1d1a      	adds	r2, r3, #4
 8007c6a:	600a      	str	r2, [r1, #0]
 8007c6c:	681e      	ldr	r6, [r3, #0]
 8007c6e:	6862      	ldr	r2, [r4, #4]
 8007c70:	2100      	movs	r1, #0
 8007c72:	4630      	mov	r0, r6
 8007c74:	f7f8 faac 	bl	80001d0 <memchr>
 8007c78:	b108      	cbz	r0, 8007c7e <_printf_i+0x1f2>
 8007c7a:	1b80      	subs	r0, r0, r6
 8007c7c:	6060      	str	r0, [r4, #4]
 8007c7e:	6863      	ldr	r3, [r4, #4]
 8007c80:	6123      	str	r3, [r4, #16]
 8007c82:	2300      	movs	r3, #0
 8007c84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c88:	e7a8      	b.n	8007bdc <_printf_i+0x150>
 8007c8a:	6923      	ldr	r3, [r4, #16]
 8007c8c:	4632      	mov	r2, r6
 8007c8e:	4649      	mov	r1, r9
 8007c90:	4640      	mov	r0, r8
 8007c92:	47d0      	blx	sl
 8007c94:	3001      	adds	r0, #1
 8007c96:	d0ab      	beq.n	8007bf0 <_printf_i+0x164>
 8007c98:	6823      	ldr	r3, [r4, #0]
 8007c9a:	079b      	lsls	r3, r3, #30
 8007c9c:	d413      	bmi.n	8007cc6 <_printf_i+0x23a>
 8007c9e:	68e0      	ldr	r0, [r4, #12]
 8007ca0:	9b03      	ldr	r3, [sp, #12]
 8007ca2:	4298      	cmp	r0, r3
 8007ca4:	bfb8      	it	lt
 8007ca6:	4618      	movlt	r0, r3
 8007ca8:	e7a4      	b.n	8007bf4 <_printf_i+0x168>
 8007caa:	2301      	movs	r3, #1
 8007cac:	4632      	mov	r2, r6
 8007cae:	4649      	mov	r1, r9
 8007cb0:	4640      	mov	r0, r8
 8007cb2:	47d0      	blx	sl
 8007cb4:	3001      	adds	r0, #1
 8007cb6:	d09b      	beq.n	8007bf0 <_printf_i+0x164>
 8007cb8:	3501      	adds	r5, #1
 8007cba:	68e3      	ldr	r3, [r4, #12]
 8007cbc:	9903      	ldr	r1, [sp, #12]
 8007cbe:	1a5b      	subs	r3, r3, r1
 8007cc0:	42ab      	cmp	r3, r5
 8007cc2:	dcf2      	bgt.n	8007caa <_printf_i+0x21e>
 8007cc4:	e7eb      	b.n	8007c9e <_printf_i+0x212>
 8007cc6:	2500      	movs	r5, #0
 8007cc8:	f104 0619 	add.w	r6, r4, #25
 8007ccc:	e7f5      	b.n	8007cba <_printf_i+0x22e>
 8007cce:	bf00      	nop
 8007cd0:	080083b5 	.word	0x080083b5
 8007cd4:	080083c6 	.word	0x080083c6

08007cd8 <_sbrk_r>:
 8007cd8:	b538      	push	{r3, r4, r5, lr}
 8007cda:	4d06      	ldr	r5, [pc, #24]	; (8007cf4 <_sbrk_r+0x1c>)
 8007cdc:	2300      	movs	r3, #0
 8007cde:	4604      	mov	r4, r0
 8007ce0:	4608      	mov	r0, r1
 8007ce2:	602b      	str	r3, [r5, #0]
 8007ce4:	f7f9 fd36 	bl	8001754 <_sbrk>
 8007ce8:	1c43      	adds	r3, r0, #1
 8007cea:	d102      	bne.n	8007cf2 <_sbrk_r+0x1a>
 8007cec:	682b      	ldr	r3, [r5, #0]
 8007cee:	b103      	cbz	r3, 8007cf2 <_sbrk_r+0x1a>
 8007cf0:	6023      	str	r3, [r4, #0]
 8007cf2:	bd38      	pop	{r3, r4, r5, pc}
 8007cf4:	200008ac 	.word	0x200008ac

08007cf8 <__sread>:
 8007cf8:	b510      	push	{r4, lr}
 8007cfa:	460c      	mov	r4, r1
 8007cfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d00:	f000 fab4 	bl	800826c <_read_r>
 8007d04:	2800      	cmp	r0, #0
 8007d06:	bfab      	itete	ge
 8007d08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007d0a:	89a3      	ldrhlt	r3, [r4, #12]
 8007d0c:	181b      	addge	r3, r3, r0
 8007d0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007d12:	bfac      	ite	ge
 8007d14:	6563      	strge	r3, [r4, #84]	; 0x54
 8007d16:	81a3      	strhlt	r3, [r4, #12]
 8007d18:	bd10      	pop	{r4, pc}

08007d1a <__swrite>:
 8007d1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d1e:	461f      	mov	r7, r3
 8007d20:	898b      	ldrh	r3, [r1, #12]
 8007d22:	05db      	lsls	r3, r3, #23
 8007d24:	4605      	mov	r5, r0
 8007d26:	460c      	mov	r4, r1
 8007d28:	4616      	mov	r6, r2
 8007d2a:	d505      	bpl.n	8007d38 <__swrite+0x1e>
 8007d2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d30:	2302      	movs	r3, #2
 8007d32:	2200      	movs	r2, #0
 8007d34:	f000 f9c8 	bl	80080c8 <_lseek_r>
 8007d38:	89a3      	ldrh	r3, [r4, #12]
 8007d3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d42:	81a3      	strh	r3, [r4, #12]
 8007d44:	4632      	mov	r2, r6
 8007d46:	463b      	mov	r3, r7
 8007d48:	4628      	mov	r0, r5
 8007d4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d4e:	f000 b869 	b.w	8007e24 <_write_r>

08007d52 <__sseek>:
 8007d52:	b510      	push	{r4, lr}
 8007d54:	460c      	mov	r4, r1
 8007d56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d5a:	f000 f9b5 	bl	80080c8 <_lseek_r>
 8007d5e:	1c43      	adds	r3, r0, #1
 8007d60:	89a3      	ldrh	r3, [r4, #12]
 8007d62:	bf15      	itete	ne
 8007d64:	6560      	strne	r0, [r4, #84]	; 0x54
 8007d66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007d6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007d6e:	81a3      	strheq	r3, [r4, #12]
 8007d70:	bf18      	it	ne
 8007d72:	81a3      	strhne	r3, [r4, #12]
 8007d74:	bd10      	pop	{r4, pc}

08007d76 <__sclose>:
 8007d76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d7a:	f000 b8d3 	b.w	8007f24 <_close_r>
	...

08007d80 <__swbuf_r>:
 8007d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d82:	460e      	mov	r6, r1
 8007d84:	4614      	mov	r4, r2
 8007d86:	4605      	mov	r5, r0
 8007d88:	b118      	cbz	r0, 8007d92 <__swbuf_r+0x12>
 8007d8a:	6983      	ldr	r3, [r0, #24]
 8007d8c:	b90b      	cbnz	r3, 8007d92 <__swbuf_r+0x12>
 8007d8e:	f7ff fbbb 	bl	8007508 <__sinit>
 8007d92:	4b21      	ldr	r3, [pc, #132]	; (8007e18 <__swbuf_r+0x98>)
 8007d94:	429c      	cmp	r4, r3
 8007d96:	d12b      	bne.n	8007df0 <__swbuf_r+0x70>
 8007d98:	686c      	ldr	r4, [r5, #4]
 8007d9a:	69a3      	ldr	r3, [r4, #24]
 8007d9c:	60a3      	str	r3, [r4, #8]
 8007d9e:	89a3      	ldrh	r3, [r4, #12]
 8007da0:	071a      	lsls	r2, r3, #28
 8007da2:	d52f      	bpl.n	8007e04 <__swbuf_r+0x84>
 8007da4:	6923      	ldr	r3, [r4, #16]
 8007da6:	b36b      	cbz	r3, 8007e04 <__swbuf_r+0x84>
 8007da8:	6923      	ldr	r3, [r4, #16]
 8007daa:	6820      	ldr	r0, [r4, #0]
 8007dac:	1ac0      	subs	r0, r0, r3
 8007dae:	6963      	ldr	r3, [r4, #20]
 8007db0:	b2f6      	uxtb	r6, r6
 8007db2:	4283      	cmp	r3, r0
 8007db4:	4637      	mov	r7, r6
 8007db6:	dc04      	bgt.n	8007dc2 <__swbuf_r+0x42>
 8007db8:	4621      	mov	r1, r4
 8007dba:	4628      	mov	r0, r5
 8007dbc:	f000 f948 	bl	8008050 <_fflush_r>
 8007dc0:	bb30      	cbnz	r0, 8007e10 <__swbuf_r+0x90>
 8007dc2:	68a3      	ldr	r3, [r4, #8]
 8007dc4:	3b01      	subs	r3, #1
 8007dc6:	60a3      	str	r3, [r4, #8]
 8007dc8:	6823      	ldr	r3, [r4, #0]
 8007dca:	1c5a      	adds	r2, r3, #1
 8007dcc:	6022      	str	r2, [r4, #0]
 8007dce:	701e      	strb	r6, [r3, #0]
 8007dd0:	6963      	ldr	r3, [r4, #20]
 8007dd2:	3001      	adds	r0, #1
 8007dd4:	4283      	cmp	r3, r0
 8007dd6:	d004      	beq.n	8007de2 <__swbuf_r+0x62>
 8007dd8:	89a3      	ldrh	r3, [r4, #12]
 8007dda:	07db      	lsls	r3, r3, #31
 8007ddc:	d506      	bpl.n	8007dec <__swbuf_r+0x6c>
 8007dde:	2e0a      	cmp	r6, #10
 8007de0:	d104      	bne.n	8007dec <__swbuf_r+0x6c>
 8007de2:	4621      	mov	r1, r4
 8007de4:	4628      	mov	r0, r5
 8007de6:	f000 f933 	bl	8008050 <_fflush_r>
 8007dea:	b988      	cbnz	r0, 8007e10 <__swbuf_r+0x90>
 8007dec:	4638      	mov	r0, r7
 8007dee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007df0:	4b0a      	ldr	r3, [pc, #40]	; (8007e1c <__swbuf_r+0x9c>)
 8007df2:	429c      	cmp	r4, r3
 8007df4:	d101      	bne.n	8007dfa <__swbuf_r+0x7a>
 8007df6:	68ac      	ldr	r4, [r5, #8]
 8007df8:	e7cf      	b.n	8007d9a <__swbuf_r+0x1a>
 8007dfa:	4b09      	ldr	r3, [pc, #36]	; (8007e20 <__swbuf_r+0xa0>)
 8007dfc:	429c      	cmp	r4, r3
 8007dfe:	bf08      	it	eq
 8007e00:	68ec      	ldreq	r4, [r5, #12]
 8007e02:	e7ca      	b.n	8007d9a <__swbuf_r+0x1a>
 8007e04:	4621      	mov	r1, r4
 8007e06:	4628      	mov	r0, r5
 8007e08:	f000 f81e 	bl	8007e48 <__swsetup_r>
 8007e0c:	2800      	cmp	r0, #0
 8007e0e:	d0cb      	beq.n	8007da8 <__swbuf_r+0x28>
 8007e10:	f04f 37ff 	mov.w	r7, #4294967295
 8007e14:	e7ea      	b.n	8007dec <__swbuf_r+0x6c>
 8007e16:	bf00      	nop
 8007e18:	08008364 	.word	0x08008364
 8007e1c:	08008384 	.word	0x08008384
 8007e20:	08008344 	.word	0x08008344

08007e24 <_write_r>:
 8007e24:	b538      	push	{r3, r4, r5, lr}
 8007e26:	4d07      	ldr	r5, [pc, #28]	; (8007e44 <_write_r+0x20>)
 8007e28:	4604      	mov	r4, r0
 8007e2a:	4608      	mov	r0, r1
 8007e2c:	4611      	mov	r1, r2
 8007e2e:	2200      	movs	r2, #0
 8007e30:	602a      	str	r2, [r5, #0]
 8007e32:	461a      	mov	r2, r3
 8007e34:	f7f9 fc3d 	bl	80016b2 <_write>
 8007e38:	1c43      	adds	r3, r0, #1
 8007e3a:	d102      	bne.n	8007e42 <_write_r+0x1e>
 8007e3c:	682b      	ldr	r3, [r5, #0]
 8007e3e:	b103      	cbz	r3, 8007e42 <_write_r+0x1e>
 8007e40:	6023      	str	r3, [r4, #0]
 8007e42:	bd38      	pop	{r3, r4, r5, pc}
 8007e44:	200008ac 	.word	0x200008ac

08007e48 <__swsetup_r>:
 8007e48:	4b32      	ldr	r3, [pc, #200]	; (8007f14 <__swsetup_r+0xcc>)
 8007e4a:	b570      	push	{r4, r5, r6, lr}
 8007e4c:	681d      	ldr	r5, [r3, #0]
 8007e4e:	4606      	mov	r6, r0
 8007e50:	460c      	mov	r4, r1
 8007e52:	b125      	cbz	r5, 8007e5e <__swsetup_r+0x16>
 8007e54:	69ab      	ldr	r3, [r5, #24]
 8007e56:	b913      	cbnz	r3, 8007e5e <__swsetup_r+0x16>
 8007e58:	4628      	mov	r0, r5
 8007e5a:	f7ff fb55 	bl	8007508 <__sinit>
 8007e5e:	4b2e      	ldr	r3, [pc, #184]	; (8007f18 <__swsetup_r+0xd0>)
 8007e60:	429c      	cmp	r4, r3
 8007e62:	d10f      	bne.n	8007e84 <__swsetup_r+0x3c>
 8007e64:	686c      	ldr	r4, [r5, #4]
 8007e66:	89a3      	ldrh	r3, [r4, #12]
 8007e68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e6c:	0719      	lsls	r1, r3, #28
 8007e6e:	d42c      	bmi.n	8007eca <__swsetup_r+0x82>
 8007e70:	06dd      	lsls	r5, r3, #27
 8007e72:	d411      	bmi.n	8007e98 <__swsetup_r+0x50>
 8007e74:	2309      	movs	r3, #9
 8007e76:	6033      	str	r3, [r6, #0]
 8007e78:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007e7c:	81a3      	strh	r3, [r4, #12]
 8007e7e:	f04f 30ff 	mov.w	r0, #4294967295
 8007e82:	e03e      	b.n	8007f02 <__swsetup_r+0xba>
 8007e84:	4b25      	ldr	r3, [pc, #148]	; (8007f1c <__swsetup_r+0xd4>)
 8007e86:	429c      	cmp	r4, r3
 8007e88:	d101      	bne.n	8007e8e <__swsetup_r+0x46>
 8007e8a:	68ac      	ldr	r4, [r5, #8]
 8007e8c:	e7eb      	b.n	8007e66 <__swsetup_r+0x1e>
 8007e8e:	4b24      	ldr	r3, [pc, #144]	; (8007f20 <__swsetup_r+0xd8>)
 8007e90:	429c      	cmp	r4, r3
 8007e92:	bf08      	it	eq
 8007e94:	68ec      	ldreq	r4, [r5, #12]
 8007e96:	e7e6      	b.n	8007e66 <__swsetup_r+0x1e>
 8007e98:	0758      	lsls	r0, r3, #29
 8007e9a:	d512      	bpl.n	8007ec2 <__swsetup_r+0x7a>
 8007e9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e9e:	b141      	cbz	r1, 8007eb2 <__swsetup_r+0x6a>
 8007ea0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ea4:	4299      	cmp	r1, r3
 8007ea6:	d002      	beq.n	8007eae <__swsetup_r+0x66>
 8007ea8:	4630      	mov	r0, r6
 8007eaa:	f000 f98f 	bl	80081cc <_free_r>
 8007eae:	2300      	movs	r3, #0
 8007eb0:	6363      	str	r3, [r4, #52]	; 0x34
 8007eb2:	89a3      	ldrh	r3, [r4, #12]
 8007eb4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007eb8:	81a3      	strh	r3, [r4, #12]
 8007eba:	2300      	movs	r3, #0
 8007ebc:	6063      	str	r3, [r4, #4]
 8007ebe:	6923      	ldr	r3, [r4, #16]
 8007ec0:	6023      	str	r3, [r4, #0]
 8007ec2:	89a3      	ldrh	r3, [r4, #12]
 8007ec4:	f043 0308 	orr.w	r3, r3, #8
 8007ec8:	81a3      	strh	r3, [r4, #12]
 8007eca:	6923      	ldr	r3, [r4, #16]
 8007ecc:	b94b      	cbnz	r3, 8007ee2 <__swsetup_r+0x9a>
 8007ece:	89a3      	ldrh	r3, [r4, #12]
 8007ed0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007ed4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ed8:	d003      	beq.n	8007ee2 <__swsetup_r+0x9a>
 8007eda:	4621      	mov	r1, r4
 8007edc:	4630      	mov	r0, r6
 8007ede:	f000 f929 	bl	8008134 <__smakebuf_r>
 8007ee2:	89a0      	ldrh	r0, [r4, #12]
 8007ee4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ee8:	f010 0301 	ands.w	r3, r0, #1
 8007eec:	d00a      	beq.n	8007f04 <__swsetup_r+0xbc>
 8007eee:	2300      	movs	r3, #0
 8007ef0:	60a3      	str	r3, [r4, #8]
 8007ef2:	6963      	ldr	r3, [r4, #20]
 8007ef4:	425b      	negs	r3, r3
 8007ef6:	61a3      	str	r3, [r4, #24]
 8007ef8:	6923      	ldr	r3, [r4, #16]
 8007efa:	b943      	cbnz	r3, 8007f0e <__swsetup_r+0xc6>
 8007efc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007f00:	d1ba      	bne.n	8007e78 <__swsetup_r+0x30>
 8007f02:	bd70      	pop	{r4, r5, r6, pc}
 8007f04:	0781      	lsls	r1, r0, #30
 8007f06:	bf58      	it	pl
 8007f08:	6963      	ldrpl	r3, [r4, #20]
 8007f0a:	60a3      	str	r3, [r4, #8]
 8007f0c:	e7f4      	b.n	8007ef8 <__swsetup_r+0xb0>
 8007f0e:	2000      	movs	r0, #0
 8007f10:	e7f7      	b.n	8007f02 <__swsetup_r+0xba>
 8007f12:	bf00      	nop
 8007f14:	20000094 	.word	0x20000094
 8007f18:	08008364 	.word	0x08008364
 8007f1c:	08008384 	.word	0x08008384
 8007f20:	08008344 	.word	0x08008344

08007f24 <_close_r>:
 8007f24:	b538      	push	{r3, r4, r5, lr}
 8007f26:	4d06      	ldr	r5, [pc, #24]	; (8007f40 <_close_r+0x1c>)
 8007f28:	2300      	movs	r3, #0
 8007f2a:	4604      	mov	r4, r0
 8007f2c:	4608      	mov	r0, r1
 8007f2e:	602b      	str	r3, [r5, #0]
 8007f30:	f7f9 fbdb 	bl	80016ea <_close>
 8007f34:	1c43      	adds	r3, r0, #1
 8007f36:	d102      	bne.n	8007f3e <_close_r+0x1a>
 8007f38:	682b      	ldr	r3, [r5, #0]
 8007f3a:	b103      	cbz	r3, 8007f3e <_close_r+0x1a>
 8007f3c:	6023      	str	r3, [r4, #0]
 8007f3e:	bd38      	pop	{r3, r4, r5, pc}
 8007f40:	200008ac 	.word	0x200008ac

08007f44 <__sflush_r>:
 8007f44:	898a      	ldrh	r2, [r1, #12]
 8007f46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f4a:	4605      	mov	r5, r0
 8007f4c:	0710      	lsls	r0, r2, #28
 8007f4e:	460c      	mov	r4, r1
 8007f50:	d458      	bmi.n	8008004 <__sflush_r+0xc0>
 8007f52:	684b      	ldr	r3, [r1, #4]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	dc05      	bgt.n	8007f64 <__sflush_r+0x20>
 8007f58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	dc02      	bgt.n	8007f64 <__sflush_r+0x20>
 8007f5e:	2000      	movs	r0, #0
 8007f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f66:	2e00      	cmp	r6, #0
 8007f68:	d0f9      	beq.n	8007f5e <__sflush_r+0x1a>
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007f70:	682f      	ldr	r7, [r5, #0]
 8007f72:	602b      	str	r3, [r5, #0]
 8007f74:	d032      	beq.n	8007fdc <__sflush_r+0x98>
 8007f76:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007f78:	89a3      	ldrh	r3, [r4, #12]
 8007f7a:	075a      	lsls	r2, r3, #29
 8007f7c:	d505      	bpl.n	8007f8a <__sflush_r+0x46>
 8007f7e:	6863      	ldr	r3, [r4, #4]
 8007f80:	1ac0      	subs	r0, r0, r3
 8007f82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007f84:	b10b      	cbz	r3, 8007f8a <__sflush_r+0x46>
 8007f86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007f88:	1ac0      	subs	r0, r0, r3
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	4602      	mov	r2, r0
 8007f8e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f90:	6a21      	ldr	r1, [r4, #32]
 8007f92:	4628      	mov	r0, r5
 8007f94:	47b0      	blx	r6
 8007f96:	1c43      	adds	r3, r0, #1
 8007f98:	89a3      	ldrh	r3, [r4, #12]
 8007f9a:	d106      	bne.n	8007faa <__sflush_r+0x66>
 8007f9c:	6829      	ldr	r1, [r5, #0]
 8007f9e:	291d      	cmp	r1, #29
 8007fa0:	d82c      	bhi.n	8007ffc <__sflush_r+0xb8>
 8007fa2:	4a2a      	ldr	r2, [pc, #168]	; (800804c <__sflush_r+0x108>)
 8007fa4:	40ca      	lsrs	r2, r1
 8007fa6:	07d6      	lsls	r6, r2, #31
 8007fa8:	d528      	bpl.n	8007ffc <__sflush_r+0xb8>
 8007faa:	2200      	movs	r2, #0
 8007fac:	6062      	str	r2, [r4, #4]
 8007fae:	04d9      	lsls	r1, r3, #19
 8007fb0:	6922      	ldr	r2, [r4, #16]
 8007fb2:	6022      	str	r2, [r4, #0]
 8007fb4:	d504      	bpl.n	8007fc0 <__sflush_r+0x7c>
 8007fb6:	1c42      	adds	r2, r0, #1
 8007fb8:	d101      	bne.n	8007fbe <__sflush_r+0x7a>
 8007fba:	682b      	ldr	r3, [r5, #0]
 8007fbc:	b903      	cbnz	r3, 8007fc0 <__sflush_r+0x7c>
 8007fbe:	6560      	str	r0, [r4, #84]	; 0x54
 8007fc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007fc2:	602f      	str	r7, [r5, #0]
 8007fc4:	2900      	cmp	r1, #0
 8007fc6:	d0ca      	beq.n	8007f5e <__sflush_r+0x1a>
 8007fc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007fcc:	4299      	cmp	r1, r3
 8007fce:	d002      	beq.n	8007fd6 <__sflush_r+0x92>
 8007fd0:	4628      	mov	r0, r5
 8007fd2:	f000 f8fb 	bl	80081cc <_free_r>
 8007fd6:	2000      	movs	r0, #0
 8007fd8:	6360      	str	r0, [r4, #52]	; 0x34
 8007fda:	e7c1      	b.n	8007f60 <__sflush_r+0x1c>
 8007fdc:	6a21      	ldr	r1, [r4, #32]
 8007fde:	2301      	movs	r3, #1
 8007fe0:	4628      	mov	r0, r5
 8007fe2:	47b0      	blx	r6
 8007fe4:	1c41      	adds	r1, r0, #1
 8007fe6:	d1c7      	bne.n	8007f78 <__sflush_r+0x34>
 8007fe8:	682b      	ldr	r3, [r5, #0]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d0c4      	beq.n	8007f78 <__sflush_r+0x34>
 8007fee:	2b1d      	cmp	r3, #29
 8007ff0:	d001      	beq.n	8007ff6 <__sflush_r+0xb2>
 8007ff2:	2b16      	cmp	r3, #22
 8007ff4:	d101      	bne.n	8007ffa <__sflush_r+0xb6>
 8007ff6:	602f      	str	r7, [r5, #0]
 8007ff8:	e7b1      	b.n	8007f5e <__sflush_r+0x1a>
 8007ffa:	89a3      	ldrh	r3, [r4, #12]
 8007ffc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008000:	81a3      	strh	r3, [r4, #12]
 8008002:	e7ad      	b.n	8007f60 <__sflush_r+0x1c>
 8008004:	690f      	ldr	r7, [r1, #16]
 8008006:	2f00      	cmp	r7, #0
 8008008:	d0a9      	beq.n	8007f5e <__sflush_r+0x1a>
 800800a:	0793      	lsls	r3, r2, #30
 800800c:	680e      	ldr	r6, [r1, #0]
 800800e:	bf08      	it	eq
 8008010:	694b      	ldreq	r3, [r1, #20]
 8008012:	600f      	str	r7, [r1, #0]
 8008014:	bf18      	it	ne
 8008016:	2300      	movne	r3, #0
 8008018:	eba6 0807 	sub.w	r8, r6, r7
 800801c:	608b      	str	r3, [r1, #8]
 800801e:	f1b8 0f00 	cmp.w	r8, #0
 8008022:	dd9c      	ble.n	8007f5e <__sflush_r+0x1a>
 8008024:	6a21      	ldr	r1, [r4, #32]
 8008026:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008028:	4643      	mov	r3, r8
 800802a:	463a      	mov	r2, r7
 800802c:	4628      	mov	r0, r5
 800802e:	47b0      	blx	r6
 8008030:	2800      	cmp	r0, #0
 8008032:	dc06      	bgt.n	8008042 <__sflush_r+0xfe>
 8008034:	89a3      	ldrh	r3, [r4, #12]
 8008036:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800803a:	81a3      	strh	r3, [r4, #12]
 800803c:	f04f 30ff 	mov.w	r0, #4294967295
 8008040:	e78e      	b.n	8007f60 <__sflush_r+0x1c>
 8008042:	4407      	add	r7, r0
 8008044:	eba8 0800 	sub.w	r8, r8, r0
 8008048:	e7e9      	b.n	800801e <__sflush_r+0xda>
 800804a:	bf00      	nop
 800804c:	20400001 	.word	0x20400001

08008050 <_fflush_r>:
 8008050:	b538      	push	{r3, r4, r5, lr}
 8008052:	690b      	ldr	r3, [r1, #16]
 8008054:	4605      	mov	r5, r0
 8008056:	460c      	mov	r4, r1
 8008058:	b913      	cbnz	r3, 8008060 <_fflush_r+0x10>
 800805a:	2500      	movs	r5, #0
 800805c:	4628      	mov	r0, r5
 800805e:	bd38      	pop	{r3, r4, r5, pc}
 8008060:	b118      	cbz	r0, 800806a <_fflush_r+0x1a>
 8008062:	6983      	ldr	r3, [r0, #24]
 8008064:	b90b      	cbnz	r3, 800806a <_fflush_r+0x1a>
 8008066:	f7ff fa4f 	bl	8007508 <__sinit>
 800806a:	4b14      	ldr	r3, [pc, #80]	; (80080bc <_fflush_r+0x6c>)
 800806c:	429c      	cmp	r4, r3
 800806e:	d11b      	bne.n	80080a8 <_fflush_r+0x58>
 8008070:	686c      	ldr	r4, [r5, #4]
 8008072:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d0ef      	beq.n	800805a <_fflush_r+0xa>
 800807a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800807c:	07d0      	lsls	r0, r2, #31
 800807e:	d404      	bmi.n	800808a <_fflush_r+0x3a>
 8008080:	0599      	lsls	r1, r3, #22
 8008082:	d402      	bmi.n	800808a <_fflush_r+0x3a>
 8008084:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008086:	f7ff fadd 	bl	8007644 <__retarget_lock_acquire_recursive>
 800808a:	4628      	mov	r0, r5
 800808c:	4621      	mov	r1, r4
 800808e:	f7ff ff59 	bl	8007f44 <__sflush_r>
 8008092:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008094:	07da      	lsls	r2, r3, #31
 8008096:	4605      	mov	r5, r0
 8008098:	d4e0      	bmi.n	800805c <_fflush_r+0xc>
 800809a:	89a3      	ldrh	r3, [r4, #12]
 800809c:	059b      	lsls	r3, r3, #22
 800809e:	d4dd      	bmi.n	800805c <_fflush_r+0xc>
 80080a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80080a2:	f7ff fad0 	bl	8007646 <__retarget_lock_release_recursive>
 80080a6:	e7d9      	b.n	800805c <_fflush_r+0xc>
 80080a8:	4b05      	ldr	r3, [pc, #20]	; (80080c0 <_fflush_r+0x70>)
 80080aa:	429c      	cmp	r4, r3
 80080ac:	d101      	bne.n	80080b2 <_fflush_r+0x62>
 80080ae:	68ac      	ldr	r4, [r5, #8]
 80080b0:	e7df      	b.n	8008072 <_fflush_r+0x22>
 80080b2:	4b04      	ldr	r3, [pc, #16]	; (80080c4 <_fflush_r+0x74>)
 80080b4:	429c      	cmp	r4, r3
 80080b6:	bf08      	it	eq
 80080b8:	68ec      	ldreq	r4, [r5, #12]
 80080ba:	e7da      	b.n	8008072 <_fflush_r+0x22>
 80080bc:	08008364 	.word	0x08008364
 80080c0:	08008384 	.word	0x08008384
 80080c4:	08008344 	.word	0x08008344

080080c8 <_lseek_r>:
 80080c8:	b538      	push	{r3, r4, r5, lr}
 80080ca:	4d07      	ldr	r5, [pc, #28]	; (80080e8 <_lseek_r+0x20>)
 80080cc:	4604      	mov	r4, r0
 80080ce:	4608      	mov	r0, r1
 80080d0:	4611      	mov	r1, r2
 80080d2:	2200      	movs	r2, #0
 80080d4:	602a      	str	r2, [r5, #0]
 80080d6:	461a      	mov	r2, r3
 80080d8:	f7f9 fb2e 	bl	8001738 <_lseek>
 80080dc:	1c43      	adds	r3, r0, #1
 80080de:	d102      	bne.n	80080e6 <_lseek_r+0x1e>
 80080e0:	682b      	ldr	r3, [r5, #0]
 80080e2:	b103      	cbz	r3, 80080e6 <_lseek_r+0x1e>
 80080e4:	6023      	str	r3, [r4, #0]
 80080e6:	bd38      	pop	{r3, r4, r5, pc}
 80080e8:	200008ac 	.word	0x200008ac

080080ec <__swhatbuf_r>:
 80080ec:	b570      	push	{r4, r5, r6, lr}
 80080ee:	460e      	mov	r6, r1
 80080f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080f4:	2900      	cmp	r1, #0
 80080f6:	b096      	sub	sp, #88	; 0x58
 80080f8:	4614      	mov	r4, r2
 80080fa:	461d      	mov	r5, r3
 80080fc:	da07      	bge.n	800810e <__swhatbuf_r+0x22>
 80080fe:	2300      	movs	r3, #0
 8008100:	602b      	str	r3, [r5, #0]
 8008102:	89b3      	ldrh	r3, [r6, #12]
 8008104:	061a      	lsls	r2, r3, #24
 8008106:	d410      	bmi.n	800812a <__swhatbuf_r+0x3e>
 8008108:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800810c:	e00e      	b.n	800812c <__swhatbuf_r+0x40>
 800810e:	466a      	mov	r2, sp
 8008110:	f000 f8be 	bl	8008290 <_fstat_r>
 8008114:	2800      	cmp	r0, #0
 8008116:	dbf2      	blt.n	80080fe <__swhatbuf_r+0x12>
 8008118:	9a01      	ldr	r2, [sp, #4]
 800811a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800811e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008122:	425a      	negs	r2, r3
 8008124:	415a      	adcs	r2, r3
 8008126:	602a      	str	r2, [r5, #0]
 8008128:	e7ee      	b.n	8008108 <__swhatbuf_r+0x1c>
 800812a:	2340      	movs	r3, #64	; 0x40
 800812c:	2000      	movs	r0, #0
 800812e:	6023      	str	r3, [r4, #0]
 8008130:	b016      	add	sp, #88	; 0x58
 8008132:	bd70      	pop	{r4, r5, r6, pc}

08008134 <__smakebuf_r>:
 8008134:	898b      	ldrh	r3, [r1, #12]
 8008136:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008138:	079d      	lsls	r5, r3, #30
 800813a:	4606      	mov	r6, r0
 800813c:	460c      	mov	r4, r1
 800813e:	d507      	bpl.n	8008150 <__smakebuf_r+0x1c>
 8008140:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008144:	6023      	str	r3, [r4, #0]
 8008146:	6123      	str	r3, [r4, #16]
 8008148:	2301      	movs	r3, #1
 800814a:	6163      	str	r3, [r4, #20]
 800814c:	b002      	add	sp, #8
 800814e:	bd70      	pop	{r4, r5, r6, pc}
 8008150:	ab01      	add	r3, sp, #4
 8008152:	466a      	mov	r2, sp
 8008154:	f7ff ffca 	bl	80080ec <__swhatbuf_r>
 8008158:	9900      	ldr	r1, [sp, #0]
 800815a:	4605      	mov	r5, r0
 800815c:	4630      	mov	r0, r6
 800815e:	f7ff fa73 	bl	8007648 <_malloc_r>
 8008162:	b948      	cbnz	r0, 8008178 <__smakebuf_r+0x44>
 8008164:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008168:	059a      	lsls	r2, r3, #22
 800816a:	d4ef      	bmi.n	800814c <__smakebuf_r+0x18>
 800816c:	f023 0303 	bic.w	r3, r3, #3
 8008170:	f043 0302 	orr.w	r3, r3, #2
 8008174:	81a3      	strh	r3, [r4, #12]
 8008176:	e7e3      	b.n	8008140 <__smakebuf_r+0xc>
 8008178:	4b0d      	ldr	r3, [pc, #52]	; (80081b0 <__smakebuf_r+0x7c>)
 800817a:	62b3      	str	r3, [r6, #40]	; 0x28
 800817c:	89a3      	ldrh	r3, [r4, #12]
 800817e:	6020      	str	r0, [r4, #0]
 8008180:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008184:	81a3      	strh	r3, [r4, #12]
 8008186:	9b00      	ldr	r3, [sp, #0]
 8008188:	6163      	str	r3, [r4, #20]
 800818a:	9b01      	ldr	r3, [sp, #4]
 800818c:	6120      	str	r0, [r4, #16]
 800818e:	b15b      	cbz	r3, 80081a8 <__smakebuf_r+0x74>
 8008190:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008194:	4630      	mov	r0, r6
 8008196:	f000 f88d 	bl	80082b4 <_isatty_r>
 800819a:	b128      	cbz	r0, 80081a8 <__smakebuf_r+0x74>
 800819c:	89a3      	ldrh	r3, [r4, #12]
 800819e:	f023 0303 	bic.w	r3, r3, #3
 80081a2:	f043 0301 	orr.w	r3, r3, #1
 80081a6:	81a3      	strh	r3, [r4, #12]
 80081a8:	89a0      	ldrh	r0, [r4, #12]
 80081aa:	4305      	orrs	r5, r0
 80081ac:	81a5      	strh	r5, [r4, #12]
 80081ae:	e7cd      	b.n	800814c <__smakebuf_r+0x18>
 80081b0:	080074a1 	.word	0x080074a1

080081b4 <__malloc_lock>:
 80081b4:	4801      	ldr	r0, [pc, #4]	; (80081bc <__malloc_lock+0x8>)
 80081b6:	f7ff ba45 	b.w	8007644 <__retarget_lock_acquire_recursive>
 80081ba:	bf00      	nop
 80081bc:	200008a4 	.word	0x200008a4

080081c0 <__malloc_unlock>:
 80081c0:	4801      	ldr	r0, [pc, #4]	; (80081c8 <__malloc_unlock+0x8>)
 80081c2:	f7ff ba40 	b.w	8007646 <__retarget_lock_release_recursive>
 80081c6:	bf00      	nop
 80081c8:	200008a4 	.word	0x200008a4

080081cc <_free_r>:
 80081cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80081ce:	2900      	cmp	r1, #0
 80081d0:	d048      	beq.n	8008264 <_free_r+0x98>
 80081d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081d6:	9001      	str	r0, [sp, #4]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	f1a1 0404 	sub.w	r4, r1, #4
 80081de:	bfb8      	it	lt
 80081e0:	18e4      	addlt	r4, r4, r3
 80081e2:	f7ff ffe7 	bl	80081b4 <__malloc_lock>
 80081e6:	4a20      	ldr	r2, [pc, #128]	; (8008268 <_free_r+0x9c>)
 80081e8:	9801      	ldr	r0, [sp, #4]
 80081ea:	6813      	ldr	r3, [r2, #0]
 80081ec:	4615      	mov	r5, r2
 80081ee:	b933      	cbnz	r3, 80081fe <_free_r+0x32>
 80081f0:	6063      	str	r3, [r4, #4]
 80081f2:	6014      	str	r4, [r2, #0]
 80081f4:	b003      	add	sp, #12
 80081f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80081fa:	f7ff bfe1 	b.w	80081c0 <__malloc_unlock>
 80081fe:	42a3      	cmp	r3, r4
 8008200:	d90b      	bls.n	800821a <_free_r+0x4e>
 8008202:	6821      	ldr	r1, [r4, #0]
 8008204:	1862      	adds	r2, r4, r1
 8008206:	4293      	cmp	r3, r2
 8008208:	bf04      	itt	eq
 800820a:	681a      	ldreq	r2, [r3, #0]
 800820c:	685b      	ldreq	r3, [r3, #4]
 800820e:	6063      	str	r3, [r4, #4]
 8008210:	bf04      	itt	eq
 8008212:	1852      	addeq	r2, r2, r1
 8008214:	6022      	streq	r2, [r4, #0]
 8008216:	602c      	str	r4, [r5, #0]
 8008218:	e7ec      	b.n	80081f4 <_free_r+0x28>
 800821a:	461a      	mov	r2, r3
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	b10b      	cbz	r3, 8008224 <_free_r+0x58>
 8008220:	42a3      	cmp	r3, r4
 8008222:	d9fa      	bls.n	800821a <_free_r+0x4e>
 8008224:	6811      	ldr	r1, [r2, #0]
 8008226:	1855      	adds	r5, r2, r1
 8008228:	42a5      	cmp	r5, r4
 800822a:	d10b      	bne.n	8008244 <_free_r+0x78>
 800822c:	6824      	ldr	r4, [r4, #0]
 800822e:	4421      	add	r1, r4
 8008230:	1854      	adds	r4, r2, r1
 8008232:	42a3      	cmp	r3, r4
 8008234:	6011      	str	r1, [r2, #0]
 8008236:	d1dd      	bne.n	80081f4 <_free_r+0x28>
 8008238:	681c      	ldr	r4, [r3, #0]
 800823a:	685b      	ldr	r3, [r3, #4]
 800823c:	6053      	str	r3, [r2, #4]
 800823e:	4421      	add	r1, r4
 8008240:	6011      	str	r1, [r2, #0]
 8008242:	e7d7      	b.n	80081f4 <_free_r+0x28>
 8008244:	d902      	bls.n	800824c <_free_r+0x80>
 8008246:	230c      	movs	r3, #12
 8008248:	6003      	str	r3, [r0, #0]
 800824a:	e7d3      	b.n	80081f4 <_free_r+0x28>
 800824c:	6825      	ldr	r5, [r4, #0]
 800824e:	1961      	adds	r1, r4, r5
 8008250:	428b      	cmp	r3, r1
 8008252:	bf04      	itt	eq
 8008254:	6819      	ldreq	r1, [r3, #0]
 8008256:	685b      	ldreq	r3, [r3, #4]
 8008258:	6063      	str	r3, [r4, #4]
 800825a:	bf04      	itt	eq
 800825c:	1949      	addeq	r1, r1, r5
 800825e:	6021      	streq	r1, [r4, #0]
 8008260:	6054      	str	r4, [r2, #4]
 8008262:	e7c7      	b.n	80081f4 <_free_r+0x28>
 8008264:	b003      	add	sp, #12
 8008266:	bd30      	pop	{r4, r5, pc}
 8008268:	20000708 	.word	0x20000708

0800826c <_read_r>:
 800826c:	b538      	push	{r3, r4, r5, lr}
 800826e:	4d07      	ldr	r5, [pc, #28]	; (800828c <_read_r+0x20>)
 8008270:	4604      	mov	r4, r0
 8008272:	4608      	mov	r0, r1
 8008274:	4611      	mov	r1, r2
 8008276:	2200      	movs	r2, #0
 8008278:	602a      	str	r2, [r5, #0]
 800827a:	461a      	mov	r2, r3
 800827c:	f7f9 f9fc 	bl	8001678 <_read>
 8008280:	1c43      	adds	r3, r0, #1
 8008282:	d102      	bne.n	800828a <_read_r+0x1e>
 8008284:	682b      	ldr	r3, [r5, #0]
 8008286:	b103      	cbz	r3, 800828a <_read_r+0x1e>
 8008288:	6023      	str	r3, [r4, #0]
 800828a:	bd38      	pop	{r3, r4, r5, pc}
 800828c:	200008ac 	.word	0x200008ac

08008290 <_fstat_r>:
 8008290:	b538      	push	{r3, r4, r5, lr}
 8008292:	4d07      	ldr	r5, [pc, #28]	; (80082b0 <_fstat_r+0x20>)
 8008294:	2300      	movs	r3, #0
 8008296:	4604      	mov	r4, r0
 8008298:	4608      	mov	r0, r1
 800829a:	4611      	mov	r1, r2
 800829c:	602b      	str	r3, [r5, #0]
 800829e:	f7f9 fa30 	bl	8001702 <_fstat>
 80082a2:	1c43      	adds	r3, r0, #1
 80082a4:	d102      	bne.n	80082ac <_fstat_r+0x1c>
 80082a6:	682b      	ldr	r3, [r5, #0]
 80082a8:	b103      	cbz	r3, 80082ac <_fstat_r+0x1c>
 80082aa:	6023      	str	r3, [r4, #0]
 80082ac:	bd38      	pop	{r3, r4, r5, pc}
 80082ae:	bf00      	nop
 80082b0:	200008ac 	.word	0x200008ac

080082b4 <_isatty_r>:
 80082b4:	b538      	push	{r3, r4, r5, lr}
 80082b6:	4d06      	ldr	r5, [pc, #24]	; (80082d0 <_isatty_r+0x1c>)
 80082b8:	2300      	movs	r3, #0
 80082ba:	4604      	mov	r4, r0
 80082bc:	4608      	mov	r0, r1
 80082be:	602b      	str	r3, [r5, #0]
 80082c0:	f7f9 fa2f 	bl	8001722 <_isatty>
 80082c4:	1c43      	adds	r3, r0, #1
 80082c6:	d102      	bne.n	80082ce <_isatty_r+0x1a>
 80082c8:	682b      	ldr	r3, [r5, #0]
 80082ca:	b103      	cbz	r3, 80082ce <_isatty_r+0x1a>
 80082cc:	6023      	str	r3, [r4, #0]
 80082ce:	bd38      	pop	{r3, r4, r5, pc}
 80082d0:	200008ac 	.word	0x200008ac

080082d4 <_init>:
 80082d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082d6:	bf00      	nop
 80082d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082da:	bc08      	pop	{r3}
 80082dc:	469e      	mov	lr, r3
 80082de:	4770      	bx	lr

080082e0 <_fini>:
 80082e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082e2:	bf00      	nop
 80082e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082e6:	bc08      	pop	{r3}
 80082e8:	469e      	mov	lr, r3
 80082ea:	4770      	bx	lr
