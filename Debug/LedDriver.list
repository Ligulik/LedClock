
LedDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008440  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  080085d0  080085d0  000185d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086bc  080086bc  000200f0  2**0
                  CONTENTS
  4 .ARM          00000008  080086bc  080086bc  000186bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080086c4  080086c4  000200f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086c4  080086c4  000186c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080086c8  080086c8  000186c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f0  20000000  080086cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000814  200000f0  080087bc  000200f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000904  080087bc  00020904  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b73e  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038f8  00000000  00000000  0003b85e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a0  00000000  00000000  0003f158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001308  00000000  00000000  000405f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a447  00000000  00000000  00041900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018390  00000000  00000000  0006bd47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc61e  00000000  00000000  000840d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001806f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bbc  00000000  00000000  00180748  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000f0 	.word	0x200000f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080085b8 	.word	0x080085b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000f4 	.word	0x200000f4
 80001cc:	080085b8 	.word	0x080085b8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800056e:	4b0c      	ldr	r3, [pc, #48]	; (80005a0 <MX_DMA_Init+0x38>)
 8000570:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000572:	4a0b      	ldr	r2, [pc, #44]	; (80005a0 <MX_DMA_Init+0x38>)
 8000574:	f043 0301 	orr.w	r3, r3, #1
 8000578:	6493      	str	r3, [r2, #72]	; 0x48
 800057a:	4b09      	ldr	r3, [pc, #36]	; (80005a0 <MX_DMA_Init+0x38>)
 800057c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800057e:	f003 0301 	and.w	r3, r3, #1
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000586:	2200      	movs	r2, #0
 8000588:	2100      	movs	r1, #0
 800058a:	200b      	movs	r0, #11
 800058c:	f001 ff15 	bl	80023ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000590:	200b      	movs	r0, #11
 8000592:	f001 ff2e 	bl	80023f2 <HAL_NVIC_EnableIRQ>

}
 8000596:	bf00      	nop
 8000598:	3708      	adds	r7, #8
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	40021000 	.word	0x40021000

080005a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b085      	sub	sp, #20
 80005a8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005aa:	4b15      	ldr	r3, [pc, #84]	; (8000600 <MX_GPIO_Init+0x5c>)
 80005ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ae:	4a14      	ldr	r2, [pc, #80]	; (8000600 <MX_GPIO_Init+0x5c>)
 80005b0:	f043 0304 	orr.w	r3, r3, #4
 80005b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005b6:	4b12      	ldr	r3, [pc, #72]	; (8000600 <MX_GPIO_Init+0x5c>)
 80005b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ba:	f003 0304 	and.w	r3, r3, #4
 80005be:	60fb      	str	r3, [r7, #12]
 80005c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c2:	4b0f      	ldr	r3, [pc, #60]	; (8000600 <MX_GPIO_Init+0x5c>)
 80005c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005c6:	4a0e      	ldr	r2, [pc, #56]	; (8000600 <MX_GPIO_Init+0x5c>)
 80005c8:	f043 0301 	orr.w	r3, r3, #1
 80005cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ce:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <MX_GPIO_Init+0x5c>)
 80005d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005d2:	f003 0301 	and.w	r3, r3, #1
 80005d6:	60bb      	str	r3, [r7, #8]
 80005d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005da:	4b09      	ldr	r3, [pc, #36]	; (8000600 <MX_GPIO_Init+0x5c>)
 80005dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005de:	4a08      	ldr	r2, [pc, #32]	; (8000600 <MX_GPIO_Init+0x5c>)
 80005e0:	f043 0302 	orr.w	r3, r3, #2
 80005e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005e6:	4b06      	ldr	r3, [pc, #24]	; (8000600 <MX_GPIO_Init+0x5c>)
 80005e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ea:	f003 0302 	and.w	r3, r3, #2
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]

}
 80005f2:	bf00      	nop
 80005f4:	3714      	adds	r7, #20
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	40021000 	.word	0x40021000

08000604 <calc_pulse>:
static volatile uint32_t received_value;
static int received_bits;


static pulse_t calc_pulse(uint32_t time)
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
	if (time < 250)
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	2bf9      	cmp	r3, #249	; 0xf9
 8000610:	d801      	bhi.n	8000616 <calc_pulse+0x12>
		return PULSE_ERROR;
 8000612:	2305      	movs	r3, #5
 8000614:	e021      	b.n	800065a <calc_pulse+0x56>
	else if (time < 1200)
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800061c:	d201      	bcs.n	8000622 <calc_pulse+0x1e>
		return PULSE_SHORT;
 800061e:	2304      	movs	r3, #4
 8000620:	e01b      	b.n	800065a <calc_pulse+0x56>
	else if (time < 2000)
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000628:	d201      	bcs.n	800062e <calc_pulse+0x2a>
		return PULSE_LONG;
 800062a:	2303      	movs	r3, #3
 800062c:	e015      	b.n	800065a <calc_pulse+0x56>
	else if (time < 3000)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000634:	4293      	cmp	r3, r2
 8000636:	d801      	bhi.n	800063c <calc_pulse+0x38>
		return PULSE_2MS;
 8000638:	2302      	movs	r3, #2
 800063a:	e00e      	b.n	800065a <calc_pulse+0x56>
	else if (time < 6000)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	f241 726f 	movw	r2, #5999	; 0x176f
 8000642:	4293      	cmp	r3, r2
 8000644:	d801      	bhi.n	800064a <calc_pulse+0x46>
		return PULSE_4MS;
 8000646:	2301      	movs	r3, #1
 8000648:	e007      	b.n	800065a <calc_pulse+0x56>
	else if (time < 12000)
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	f642 62df 	movw	r2, #11999	; 0x2edf
 8000650:	4293      	cmp	r3, r2
 8000652:	d801      	bhi.n	8000658 <calc_pulse+0x54>
		return PULSE_9MS;
 8000654:	2300      	movs	r3, #0
 8000656:	e000      	b.n	800065a <calc_pulse+0x56>
	else
		return PULSE_ERROR;
 8000658:	2305      	movs	r3, #5
}
 800065a:	4618      	mov	r0, r3
 800065c:	370c      	adds	r7, #12
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr
	...

08000668 <ir_tim_interrupt>:


void ir_tim_interrupt(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
	pulse_t pulse;

	if (received_bits >= 32)
 800066e:	4b1f      	ldr	r3, [pc, #124]	; (80006ec <ir_tim_interrupt+0x84>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	2b1f      	cmp	r3, #31
 8000674:	dc36      	bgt.n	80006e4 <ir_tim_interrupt+0x7c>
		return;

	pulse = calc_pulse(HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1));
 8000676:	2100      	movs	r1, #0
 8000678:	481d      	ldr	r0, [pc, #116]	; (80006f0 <ir_tim_interrupt+0x88>)
 800067a:	f005 fb63 	bl	8005d44 <HAL_TIM_ReadCapturedValue>
 800067e:	4603      	mov	r3, r0
 8000680:	4618      	mov	r0, r3
 8000682:	f7ff ffbf 	bl	8000604 <calc_pulse>
 8000686:	4603      	mov	r3, r0
 8000688:	71fb      	strb	r3, [r7, #7]

	switch (pulse) {
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	2b04      	cmp	r3, #4
 800068e:	d006      	beq.n	800069e <ir_tim_interrupt+0x36>
 8000690:	2b04      	cmp	r3, #4
 8000692:	dc23      	bgt.n	80006dc <ir_tim_interrupt+0x74>
 8000694:	2b01      	cmp	r3, #1
 8000696:	d01a      	beq.n	80006ce <ir_tim_interrupt+0x66>
 8000698:	2b03      	cmp	r3, #3
 800069a:	d00b      	beq.n	80006b4 <ir_tim_interrupt+0x4c>
 800069c:	e01e      	b.n	80006dc <ir_tim_interrupt+0x74>
	case PULSE_SHORT:
		received_value = received_value >> 1;
 800069e:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <ir_tim_interrupt+0x8c>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	085b      	lsrs	r3, r3, #1
 80006a4:	4a13      	ldr	r2, [pc, #76]	; (80006f4 <ir_tim_interrupt+0x8c>)
 80006a6:	6013      	str	r3, [r2, #0]
		received_bits++;
 80006a8:	4b10      	ldr	r3, [pc, #64]	; (80006ec <ir_tim_interrupt+0x84>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	3301      	adds	r3, #1
 80006ae:	4a0f      	ldr	r2, [pc, #60]	; (80006ec <ir_tim_interrupt+0x84>)
 80006b0:	6013      	str	r3, [r2, #0]
		break;
 80006b2:	e018      	b.n	80006e6 <ir_tim_interrupt+0x7e>
	case PULSE_LONG:
		received_value = (received_value >> 1) | 0x80000000;
 80006b4:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <ir_tim_interrupt+0x8c>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	085b      	lsrs	r3, r3, #1
 80006ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80006be:	4a0d      	ldr	r2, [pc, #52]	; (80006f4 <ir_tim_interrupt+0x8c>)
 80006c0:	6013      	str	r3, [r2, #0]
		received_bits++;
 80006c2:	4b0a      	ldr	r3, [pc, #40]	; (80006ec <ir_tim_interrupt+0x84>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	3301      	adds	r3, #1
 80006c8:	4a08      	ldr	r2, [pc, #32]	; (80006ec <ir_tim_interrupt+0x84>)
 80006ca:	6013      	str	r3, [r2, #0]
		break;
 80006cc:	e00b      	b.n	80006e6 <ir_tim_interrupt+0x7e>
	case PULSE_4MS:
		received_value = 0;
 80006ce:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <ir_tim_interrupt+0x8c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
		received_bits = 0;
 80006d4:	4b05      	ldr	r3, [pc, #20]	; (80006ec <ir_tim_interrupt+0x84>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
		break;
 80006da:	e004      	b.n	80006e6 <ir_tim_interrupt+0x7e>
//	case PULSE_2MS:
//		if (received_bits == 0)
//			received_bits = 32;
//		break;
	default:
		received_bits = 0;
 80006dc:	4b03      	ldr	r3, [pc, #12]	; (80006ec <ir_tim_interrupt+0x84>)
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
		break;
 80006e2:	e000      	b.n	80006e6 <ir_tim_interrupt+0x7e>
		return;
 80006e4:	bf00      	nop
	}
}
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	20000110 	.word	0x20000110
 80006f0:	200007d8 	.word	0x200007d8
 80006f4:	2000010c 	.word	0x2000010c

080006f8 <ir_init>:


void ir_init(void){
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim2);
 80006fc:	4804      	ldr	r0, [pc, #16]	; (8000710 <ir_init+0x18>)
 80006fe:	f004 fa5f 	bl	8004bc0 <HAL_TIM_Base_Start>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000702:	2100      	movs	r1, #0
 8000704:	4802      	ldr	r0, [pc, #8]	; (8000710 <ir_init+0x18>)
 8000706:	f004 fe0f 	bl	8005328 <HAL_TIM_IC_Start_IT>
}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	200007d8 	.word	0x200007d8

08000714 <ir_read>:


int ir_read(void){
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
	if(received_bits!=32){
 800071a:	4b0a      	ldr	r3, [pc, #40]	; (8000744 <ir_read+0x30>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	2b20      	cmp	r3, #32
 8000720:	d002      	beq.n	8000728 <ir_read+0x14>
		return -1;
 8000722:	f04f 33ff 	mov.w	r3, #4294967295
 8000726:	e007      	b.n	8000738 <ir_read+0x24>
	}

	uint8_t value=received_value>>16;
 8000728:	4b07      	ldr	r3, [pc, #28]	; (8000748 <ir_read+0x34>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	0c1b      	lsrs	r3, r3, #16
 800072e:	71fb      	strb	r3, [r7, #7]
	received_bits=0;
 8000730:	4b04      	ldr	r3, [pc, #16]	; (8000744 <ir_read+0x30>)
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
	return value;
 8000736:	79fb      	ldrb	r3, [r7, #7]
}
 8000738:	4618      	mov	r0, r3
 800073a:	370c      	adds	r7, #12
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr
 8000744:	20000110 	.word	0x20000110
 8000748:	2000010c 	.word	0x2000010c

0800074c <__io_putchar>:

// Funtions rewrite;

// Printf dla USART
int __io_putchar(int ch)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	2b0a      	cmp	r3, #10
 8000758:	d102      	bne.n	8000760 <__io_putchar+0x14>
    __io_putchar('\r');
 800075a:	200d      	movs	r0, #13
 800075c:	f7ff fff6 	bl	800074c <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000760:	1d39      	adds	r1, r7, #4
 8000762:	f04f 33ff 	mov.w	r3, #4294967295
 8000766:	2201      	movs	r2, #1
 8000768:	4803      	ldr	r0, [pc, #12]	; (8000778 <__io_putchar+0x2c>)
 800076a:	f006 fb17 	bl	8006d9c <HAL_UART_Transmit>

  return 1;
 800076e:	2301      	movs	r3, #1
}
 8000770:	4618      	mov	r0, r3
 8000772:	3708      	adds	r7, #8
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	2000086c 	.word	0x2000086c

0800077c <HAL_RTC_AlarmAEventCallback>:

// Callbacks from interrupts


// Przerwanie od RTC
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]


	if(TurnOnMenuMode()==MENU_OFF && flag_showCalendar<DATA_SHOW_DURATION){
 8000784:	f000 f968 	bl	8000a58 <TurnOnMenuMode>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d105      	bne.n	800079a <HAL_RTC_AlarmAEventCallback+0x1e>
 800078e:	4b0b      	ldr	r3, [pc, #44]	; (80007bc <HAL_RTC_AlarmAEventCallback+0x40>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	2b19      	cmp	r3, #25
 8000794:	dc01      	bgt.n	800079a <HAL_RTC_AlarmAEventCallback+0x1e>
		dwukropekStart();
 8000796:	f000 fd8b 	bl	80012b0 <dwukropekStart>
		}else{

		}

	flag_showCalendar += 1;
 800079a:	4b08      	ldr	r3, [pc, #32]	; (80007bc <HAL_RTC_AlarmAEventCallback+0x40>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	3301      	adds	r3, #1
 80007a0:	4a06      	ldr	r2, [pc, #24]	; (80007bc <HAL_RTC_AlarmAEventCallback+0x40>)
 80007a2:	6013      	str	r3, [r2, #0]
	if (flag_showCalendar > DATA_SHOW_PERIOD) {
 80007a4:	4b05      	ldr	r3, [pc, #20]	; (80007bc <HAL_RTC_AlarmAEventCallback+0x40>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	2b1e      	cmp	r3, #30
 80007aa:	dd02      	ble.n	80007b2 <HAL_RTC_AlarmAEventCallback+0x36>
		flag_showCalendar = 0;
 80007ac:	4b03      	ldr	r3, [pc, #12]	; (80007bc <HAL_RTC_AlarmAEventCallback+0x40>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
	}


}
 80007b2:	bf00      	nop
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	2000011c 	.word	0x2000011c

080007c0 <HAL_TIM_IC_CaptureCallback>:




// Przerwanie pobudzane przez pilot
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]


	  if (htim == &htim2) {
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	4a0b      	ldr	r2, [pc, #44]	; (80007f8 <HAL_TIM_IC_CaptureCallback+0x38>)
 80007cc:	4293      	cmp	r3, r2
 80007ce:	d10b      	bne.n	80007e8 <HAL_TIM_IC_CaptureCallback+0x28>
	    switch (HAL_TIM_GetActiveChannel(&htim2)) {
 80007d0:	4809      	ldr	r0, [pc, #36]	; (80007f8 <HAL_TIM_IC_CaptureCallback+0x38>)
 80007d2:	f005 fb2d 	bl	8005e30 <HAL_TIM_GetActiveChannel>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b01      	cmp	r3, #1
 80007da:	d107      	bne.n	80007ec <HAL_TIM_IC_CaptureCallback+0x2c>
	      case HAL_TIM_ACTIVE_CHANNEL_1:
	        ir_tim_interrupt();
 80007dc:	f7ff ff44 	bl	8000668 <ir_tim_interrupt>
	        HAL_TIM_Base_Start_IT(&htim6);
 80007e0:	4806      	ldr	r0, [pc, #24]	; (80007fc <HAL_TIM_IC_CaptureCallback+0x3c>)
 80007e2:	f004 fa55 	bl	8004c90 <HAL_TIM_Base_Start_IT>
	        break;
 80007e6:	e002      	b.n	80007ee <HAL_TIM_IC_CaptureCallback+0x2e>
	      default:
	        break;
		}
	}
 80007e8:	bf00      	nop
 80007ea:	e000      	b.n	80007ee <HAL_TIM_IC_CaptureCallback+0x2e>
	        break;
 80007ec:	bf00      	nop
}
 80007ee:	bf00      	nop
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	200007d8 	.word	0x200007d8
 80007fc:	2000078c 	.word	0x2000078c

08000800 <HAL_TIM_PeriodElapsedCallback>:


// Przerwanie od licznika 6, wywoływane co pół sekundy
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]

	if (htim == &htim6) {
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	4a1d      	ldr	r2, [pc, #116]	; (8000880 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800080c:	4293      	cmp	r3, r2
 800080e:	d133      	bne.n	8000878 <HAL_TIM_PeriodElapsedCallback+0x78>
		if (TurnOnMenuMode() == MENU_TIME_LEVEL
 8000810:	f000 f922 	bl	8000a58 <TurnOnMenuMode>
 8000814:	4603      	mov	r3, r0
 8000816:	2b01      	cmp	r3, #1
 8000818:	d004      	beq.n	8000824 <HAL_TIM_PeriodElapsedCallback+0x24>
				|| TurnOnMenuMode() == MENU_TIME_HOUR_SECOND_DIGIT) {
 800081a:	f000 f91d 	bl	8000a58 <TurnOnMenuMode>
 800081e:	4603      	mov	r3, r0
 8000820:	2b03      	cmp	r3, #3
 8000822:	d10f      	bne.n	8000844 <HAL_TIM_PeriodElapsedCallback+0x44>

			if (flag_TurnOnMenuModeHour == 1) {
 8000824:	4b17      	ldr	r3, [pc, #92]	; (8000884 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	2b01      	cmp	r3, #1
 800082a:	d105      	bne.n	8000838 <HAL_TIM_PeriodElapsedCallback+0x38>
				ws2811_hourDisplayReset();
 800082c:	f001 fbac 	bl	8001f88 <ws2811_hourDisplayReset>
				flag_TurnOnMenuModeHour = 0;
 8000830:	4b14      	ldr	r3, [pc, #80]	; (8000884 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
			if (flag_TurnOnMenuModeHour == 1) {
 8000836:	e01f      	b.n	8000878 <HAL_TIM_PeriodElapsedCallback+0x78>
			} else {
				fullDisplayStart();
 8000838:	f000 feb0 	bl	800159c <fullDisplayStart>
				flag_TurnOnMenuModeHour = 1;
 800083c:	4b11      	ldr	r3, [pc, #68]	; (8000884 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800083e:	2201      	movs	r2, #1
 8000840:	601a      	str	r2, [r3, #0]
			if (flag_TurnOnMenuModeHour == 1) {
 8000842:	e019      	b.n	8000878 <HAL_TIM_PeriodElapsedCallback+0x78>
			}

		} else if (TurnOnMenuMode() == MENU_TIME_MINUTE_LEVEL
 8000844:	f000 f908 	bl	8000a58 <TurnOnMenuMode>
 8000848:	4603      	mov	r3, r0
 800084a:	2b02      	cmp	r3, #2
 800084c:	d004      	beq.n	8000858 <HAL_TIM_PeriodElapsedCallback+0x58>
				|| TurnOnMenuMode() == MENU_TIME_MINUTE_SECOND_DIGIT) {
 800084e:	f000 f903 	bl	8000a58 <TurnOnMenuMode>
 8000852:	4603      	mov	r3, r0
 8000854:	2b04      	cmp	r3, #4
 8000856:	d10f      	bne.n	8000878 <HAL_TIM_PeriodElapsedCallback+0x78>
			if (flag_TurnOnMenuModeMinute == 1) {
 8000858:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	2b01      	cmp	r3, #1
 800085e:	d105      	bne.n	800086c <HAL_TIM_PeriodElapsedCallback+0x6c>
				ws2811_minuteDisplayReset();
 8000860:	f001 fbbe 	bl	8001fe0 <ws2811_minuteDisplayReset>
				flag_TurnOnMenuModeMinute = 0;
 8000864:	4b08      	ldr	r3, [pc, #32]	; (8000888 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
			}
		} else {

		}
	}
}
 800086a:	e005      	b.n	8000878 <HAL_TIM_PeriodElapsedCallback+0x78>
				fullDisplayStart();
 800086c:	f000 fe96 	bl	800159c <fullDisplayStart>
				flag_TurnOnMenuModeMinute = 1;
 8000870:	4b05      	ldr	r3, [pc, #20]	; (8000888 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000872:	2201      	movs	r2, #1
 8000874:	601a      	str	r2, [r3, #0]
}
 8000876:	e7ff      	b.n	8000878 <HAL_TIM_PeriodElapsedCallback+0x78>
 8000878:	bf00      	nop
 800087a:	3708      	adds	r7, #8
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	2000078c 	.word	0x2000078c
 8000884:	20000114 	.word	0x20000114
 8000888:	20000118 	.word	0x20000118

0800088c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000892:	f001 fc42 	bl	800211a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000896:	f000 f85b 	bl	8000950 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800089a:	f7ff fe83 	bl	80005a4 <MX_GPIO_Init>
  MX_DMA_Init();
 800089e:	f7ff fe63 	bl	8000568 <MX_DMA_Init>
  MX_TIM4_Init();
 80008a2:	f001 f90b 	bl	8001abc <MX_TIM4_Init>
  MX_RTC_Init();
 80008a6:	f000 fb7d 	bl	8000fa4 <MX_RTC_Init>
  MX_TIM2_Init();
 80008aa:	f001 f87b 	bl	80019a4 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80008ae:	f001 fa81 	bl	8001db4 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 80008b2:	f001 f979 	bl	8001ba8 <MX_TIM6_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80008b6:	f000 f8ad 	bl	8000a14 <MX_NVIC_Init>




	// Inicjalizacja programu
	ws2811_init();
 80008ba:	f001 fb33 	bl	8001f24 <ws2811_init>
	ir_init();
 80008be:	f7ff ff1b 	bl	80006f8 <ir_init>
	changeColor(RED);
 80008c2:	4b21      	ldr	r3, [pc, #132]	; (8000948 <main+0xbc>)
 80008c4:	781a      	ldrb	r2, [r3, #0]
 80008c6:	7859      	ldrb	r1, [r3, #1]
 80008c8:	0209      	lsls	r1, r1, #8
 80008ca:	430a      	orrs	r2, r1
 80008cc:	789b      	ldrb	r3, [r3, #2]
 80008ce:	041b      	lsls	r3, r3, #16
 80008d0:	431a      	orrs	r2, r3
 80008d2:	2300      	movs	r3, #0
 80008d4:	f362 0317 	bfi	r3, r2, #0, #24
 80008d8:	4618      	mov	r0, r3
 80008da:	f000 fc25 	bl	8001128 <changeColor>
	while (1) {



		// ZEGAR:
				if(TurnOnMenuMode()==0 && flag_showCalendar<DATA_SHOW_DURATION){
 80008de:	f000 f8bb 	bl	8000a58 <TurnOnMenuMode>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d111      	bne.n	800090c <main+0x80>
 80008e8:	4b18      	ldr	r3, [pc, #96]	; (800094c <main+0xc0>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	2b19      	cmp	r3, #25
 80008ee:	dc0d      	bgt.n	800090c <main+0x80>
					if(flag_showCalendar==0){
 80008f0:	4b16      	ldr	r3, [pc, #88]	; (800094c <main+0xc0>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d106      	bne.n	8000906 <main+0x7a>
						dwukropekTurnOn();
 80008f8:	f000 fc90 	bl	800121c <dwukropekTurnOn>
						// Zapobieganie migotaniu
						flag_showCalendar+=1;
 80008fc:	4b13      	ldr	r3, [pc, #76]	; (800094c <main+0xc0>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	3301      	adds	r3, #1
 8000902:	4a12      	ldr	r2, [pc, #72]	; (800094c <main+0xc0>)
 8000904:	6013      	str	r3, [r2, #0]
					}
					fullDisplayStart();
 8000906:	f000 fe49 	bl	800159c <fullDisplayStart>
 800090a:	e011      	b.n	8000930 <main+0xa4>
				}else if(TurnOnMenuMode()==0){
 800090c:	f000 f8a4 	bl	8000a58 <TurnOnMenuMode>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d10c      	bne.n	8000930 <main+0xa4>
					if(flag_showCalendar==DATA_SHOW_DURATION){
 8000916:	4b0d      	ldr	r3, [pc, #52]	; (800094c <main+0xc0>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	2b1a      	cmp	r3, #26
 800091c:	d104      	bne.n	8000928 <main+0x9c>
						dwukropekTurnOff();
 800091e:	f000 fc9d 	bl	800125c <dwukropekTurnOff>
						// Zapobieganie migotaniu
						flag_showCalendar=DATA_SHOW_DURATION+1;
 8000922:	4b0a      	ldr	r3, [pc, #40]	; (800094c <main+0xc0>)
 8000924:	221b      	movs	r2, #27
 8000926:	601a      	str	r2, [r3, #0]
					}
					kropkaOn();
 8000928:	f000 fcb0 	bl	800128c <kropkaOn>
					dateOnDisplay();
 800092c:	f000 fe64 	bl	80015f8 <dateOnDisplay>
				}



				int value=ir_read();
 8000930:	f7ff fef0 	bl	8000714 <ir_read>
 8000934:	6078      	str	r0, [r7, #4]
				if(value!=-1){
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800093c:	d0cf      	beq.n	80008de <main+0x52>
					menu(value);
 800093e:	6878      	ldr	r0, [r7, #4]
 8000940:	f000 f958 	bl	8000bf4 <menu>
	while (1) {
 8000944:	e7cb      	b.n	80008de <main+0x52>
 8000946:	bf00      	nop
 8000948:	2000006c 	.word	0x2000006c
 800094c:	2000011c 	.word	0x2000011c

08000950 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b096      	sub	sp, #88	; 0x58
 8000954:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000956:	f107 0314 	add.w	r3, r7, #20
 800095a:	2244      	movs	r2, #68	; 0x44
 800095c:	2100      	movs	r1, #0
 800095e:	4618      	mov	r0, r3
 8000960:	f006 fecc 	bl	80076fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000964:	463b      	mov	r3, r7
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]
 800096c:	609a      	str	r2, [r3, #8]
 800096e:	60da      	str	r2, [r3, #12]
 8000970:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000972:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000976:	f002 f917 	bl	8002ba8 <HAL_PWREx_ControlVoltageScaling>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000980:	f000 f864 	bl	8000a4c <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000984:	f002 f8f2 	bl	8002b6c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000988:	4b21      	ldr	r3, [pc, #132]	; (8000a10 <SystemClock_Config+0xc0>)
 800098a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800098e:	4a20      	ldr	r2, [pc, #128]	; (8000a10 <SystemClock_Config+0xc0>)
 8000990:	f023 0318 	bic.w	r3, r3, #24
 8000994:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000998:	2314      	movs	r3, #20
 800099a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800099c:	2301      	movs	r3, #1
 800099e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80009a0:	2301      	movs	r3, #1
 80009a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80009a4:	2300      	movs	r3, #0
 80009a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80009a8:	2360      	movs	r3, #96	; 0x60
 80009aa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ac:	2302      	movs	r3, #2
 80009ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80009b0:	2301      	movs	r3, #1
 80009b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009b4:	2301      	movs	r3, #1
 80009b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80009b8:	2328      	movs	r3, #40	; 0x28
 80009ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80009bc:	2307      	movs	r3, #7
 80009be:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009c0:	2302      	movs	r3, #2
 80009c2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009c4:	2302      	movs	r3, #2
 80009c6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c8:	f107 0314 	add.w	r3, r7, #20
 80009cc:	4618      	mov	r0, r3
 80009ce:	f002 f941 	bl	8002c54 <HAL_RCC_OscConfig>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80009d8:	f000 f838 	bl	8000a4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009dc:	230f      	movs	r3, #15
 80009de:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009e0:	2303      	movs	r3, #3
 80009e2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009e4:	2300      	movs	r3, #0
 80009e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009e8:	2300      	movs	r3, #0
 80009ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009ec:	2300      	movs	r3, #0
 80009ee:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009f0:	463b      	mov	r3, r7
 80009f2:	2104      	movs	r1, #4
 80009f4:	4618      	mov	r0, r3
 80009f6:	f002 fd13 	bl	8003420 <HAL_RCC_ClockConfig>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000a00:	f000 f824 	bl	8000a4c <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000a04:	f003 f9fc 	bl	8003e00 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000a08:	bf00      	nop
 8000a0a:	3758      	adds	r7, #88	; 0x58
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40021000 	.word	0x40021000

08000a14 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* RTC_Alarm_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 4, 0);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	2104      	movs	r1, #4
 8000a1c:	2029      	movs	r0, #41	; 0x29
 8000a1e:	f001 fccc 	bl	80023ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000a22:	2029      	movs	r0, #41	; 0x29
 8000a24:	f001 fce5 	bl	80023f2 <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2102      	movs	r1, #2
 8000a2c:	201c      	movs	r0, #28
 8000a2e:	f001 fcc4 	bl	80023ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a32:	201c      	movs	r0, #28
 8000a34:	f001 fcdd 	bl	80023f2 <HAL_NVIC_EnableIRQ>
  /* TIM6_DAC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	2103      	movs	r1, #3
 8000a3c:	2036      	movs	r0, #54	; 0x36
 8000a3e:	f001 fcbc 	bl	80023ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a42:	2036      	movs	r0, #54	; 0x36
 8000a44:	f001 fcd5 	bl	80023f2 <HAL_NVIC_EnableIRQ>
}
 8000a48:	bf00      	nop
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a50:	b672      	cpsid	i
}
 8000a52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000a54:	e7fe      	b.n	8000a54 <Error_Handler+0x8>
	...

08000a58 <TurnOnMenuMode>:



// Funtions:

int TurnOnMenuMode(void){
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
	return flagMenu;
 8000a5c:	4b03      	ldr	r3, [pc, #12]	; (8000a6c <TurnOnMenuMode+0x14>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	20000124 	.word	0x20000124

08000a70 <isInRange>:

int isInRange(uint8_t entryData){
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	71fb      	strb	r3, [r7, #7]
	if(entryData>23){
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	2b17      	cmp	r3, #23
 8000a7e:	d901      	bls.n	8000a84 <isInRange+0x14>
		return 1;
 8000a80:	2301      	movs	r3, #1
 8000a82:	e000      	b.n	8000a86 <isInRange+0x16>
	}else{
		return 0;
 8000a84:	2300      	movs	r3, #0
	}
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr

08000a92 <isInRangeMinute>:

int isInRangeMinute(uint8_t entryData){
 8000a92:	b480      	push	{r7}
 8000a94:	b083      	sub	sp, #12
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	4603      	mov	r3, r0
 8000a9a:	71fb      	strb	r3, [r7, #7]
	if(entryData>60){
 8000a9c:	79fb      	ldrb	r3, [r7, #7]
 8000a9e:	2b3c      	cmp	r3, #60	; 0x3c
 8000aa0:	d901      	bls.n	8000aa6 <isInRangeMinute+0x14>
		return 1;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	e000      	b.n	8000aa8 <isInRangeMinute+0x16>
	}else{
		return 0;
 8000aa6:	2300      	movs	r3, #0
	}
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	370c      	adds	r7, #12
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr

08000ab4 <colorMenu>:

void colorMenu(struct colorRgb color){
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
	if (flagColor == MENU_COLOR_LEVEL) {
 8000abc:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <colorMenu+0x24>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d105      	bne.n	8000ad0 <colorMenu+0x1c>
				changeColor(color);
 8000ac4:	6878      	ldr	r0, [r7, #4]
 8000ac6:	f000 fb2f 	bl	8001128 <changeColor>
				flagColor = MENU_OFF;
 8000aca:	4b03      	ldr	r3, [pc, #12]	; (8000ad8 <colorMenu+0x24>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
			}
}
 8000ad0:	bf00      	nop
 8000ad2:	3708      	adds	r7, #8
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	20000120 	.word	0x20000120

08000adc <firstDigitHour>:

void firstDigitHour(uint8_t forAdd){
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	71fb      	strb	r3, [r7, #7]
	if (flagMenu == MENU_TIME_LEVEL) {
 8000ae6:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <firstDigitHour+0x2c>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d105      	bne.n	8000afa <firstDigitHour+0x1e>
		hoursChange = forAdd;
 8000aee:	4a07      	ldr	r2, [pc, #28]	; (8000b0c <firstDigitHour+0x30>)
 8000af0:	79fb      	ldrb	r3, [r7, #7]
 8000af2:	7013      	strb	r3, [r2, #0]
		flagMenu = MENU_TIME_HOUR_SECOND_DIGIT;
 8000af4:	4b04      	ldr	r3, [pc, #16]	; (8000b08 <firstDigitHour+0x2c>)
 8000af6:	2203      	movs	r2, #3
 8000af8:	601a      	str	r2, [r3, #0]
	}
}
 8000afa:	bf00      	nop
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	20000124 	.word	0x20000124
 8000b0c:	20000129 	.word	0x20000129

08000b10 <secondDigitHour>:

void secondDigitHour(uint8_t forAdd){
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	4603      	mov	r3, r0
 8000b18:	71fb      	strb	r3, [r7, #7]
	if (flagMenu == MENU_TIME_HOUR_SECOND_DIGIT) {
 8000b1a:	4b11      	ldr	r3, [pc, #68]	; (8000b60 <secondDigitHour+0x50>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	2b03      	cmp	r3, #3
 8000b20:	d119      	bne.n	8000b56 <secondDigitHour+0x46>

		hoursChange += forAdd;
 8000b22:	4b10      	ldr	r3, [pc, #64]	; (8000b64 <secondDigitHour+0x54>)
 8000b24:	781a      	ldrb	r2, [r3, #0]
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	4413      	add	r3, r2
 8000b2a:	b2da      	uxtb	r2, r3
 8000b2c:	4b0d      	ldr	r3, [pc, #52]	; (8000b64 <secondDigitHour+0x54>)
 8000b2e:	701a      	strb	r2, [r3, #0]

		if (isInRange(hoursChange)) {
 8000b30:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <secondDigitHour+0x54>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	4618      	mov	r0, r3
 8000b36:	f7ff ff9b 	bl	8000a70 <isInRange>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d002      	beq.n	8000b46 <secondDigitHour+0x36>
			hoursChange = 0;
 8000b40:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <secondDigitHour+0x54>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	701a      	strb	r2, [r3, #0]
		}

		setHours(hoursChange);
 8000b46:	4b07      	ldr	r3, [pc, #28]	; (8000b64 <secondDigitHour+0x54>)
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f000 fdb0 	bl	80016b0 <setHours>
		flagMenu = MENU_TIME_LEVEL;
 8000b50:	4b03      	ldr	r3, [pc, #12]	; (8000b60 <secondDigitHour+0x50>)
 8000b52:	2201      	movs	r2, #1
 8000b54:	601a      	str	r2, [r3, #0]
	}
}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000124 	.word	0x20000124
 8000b64:	20000129 	.word	0x20000129

08000b68 <firstDigitMinute>:

void firstDigitMinute(uint8_t forAdd){
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	71fb      	strb	r3, [r7, #7]
	if (flagMenu == MENU_TIME_MINUTE_LEVEL) {
 8000b72:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <firstDigitMinute+0x2c>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	2b02      	cmp	r3, #2
 8000b78:	d105      	bne.n	8000b86 <firstDigitMinute+0x1e>
		minutesChange = forAdd;
 8000b7a:	4a07      	ldr	r2, [pc, #28]	; (8000b98 <firstDigitMinute+0x30>)
 8000b7c:	79fb      	ldrb	r3, [r7, #7]
 8000b7e:	7013      	strb	r3, [r2, #0]
		flagMenu = MENU_TIME_MINUTE_SECOND_DIGIT;
 8000b80:	4b04      	ldr	r3, [pc, #16]	; (8000b94 <firstDigitMinute+0x2c>)
 8000b82:	2204      	movs	r2, #4
 8000b84:	601a      	str	r2, [r3, #0]

	}
}
 8000b86:	bf00      	nop
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	20000124 	.word	0x20000124
 8000b98:	20000128 	.word	0x20000128

08000b9c <secondDigitMinute>:

void secondDigitMinute(uint8_t forAdd){
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	71fb      	strb	r3, [r7, #7]
	if (flagMenu == MENU_TIME_MINUTE_SECOND_DIGIT) {
 8000ba6:	4b11      	ldr	r3, [pc, #68]	; (8000bec <secondDigitMinute+0x50>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	2b04      	cmp	r3, #4
 8000bac:	d119      	bne.n	8000be2 <secondDigitMinute+0x46>
		minutesChange += forAdd;
 8000bae:	4b10      	ldr	r3, [pc, #64]	; (8000bf0 <secondDigitMinute+0x54>)
 8000bb0:	781a      	ldrb	r2, [r3, #0]
 8000bb2:	79fb      	ldrb	r3, [r7, #7]
 8000bb4:	4413      	add	r3, r2
 8000bb6:	b2da      	uxtb	r2, r3
 8000bb8:	4b0d      	ldr	r3, [pc, #52]	; (8000bf0 <secondDigitMinute+0x54>)
 8000bba:	701a      	strb	r2, [r3, #0]

		if (isInRangeMinute(minutesChange)) {
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <secondDigitMinute+0x54>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff ff66 	bl	8000a92 <isInRangeMinute>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d002      	beq.n	8000bd2 <secondDigitMinute+0x36>
			minutesChange = 0;
 8000bcc:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <secondDigitMinute+0x54>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	701a      	strb	r2, [r3, #0]
		}
		setMinutes(minutesChange);
 8000bd2:	4b07      	ldr	r3, [pc, #28]	; (8000bf0 <secondDigitMinute+0x54>)
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f000 fd3c 	bl	8001654 <setMinutes>
		flagMenu = MENU_TIME_MINUTE_LEVEL;
 8000bdc:	4b03      	ldr	r3, [pc, #12]	; (8000bec <secondDigitMinute+0x50>)
 8000bde:	2202      	movs	r2, #2
 8000be0:	601a      	str	r2, [r3, #0]
	}
}
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20000124 	.word	0x20000124
 8000bf0:	20000128 	.word	0x20000128

08000bf4 <menu>:
/*
 *
 * Obluga przycisku pilota
 *
 */
void menu(int value) {
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b088      	sub	sp, #32
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]

	printf("code=%02x\n", value);
 8000bfc:	6879      	ldr	r1, [r7, #4]
 8000bfe:	48c0      	ldr	r0, [pc, #768]	; (8000f00 <menu+0x30c>)
 8000c00:	f006 fd84 	bl	800770c <iprintf>

	RTC_TimeTypeDef time = {0};
 8000c04:	f107 030c 	add.w	r3, r7, #12
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef date = {0};
 8000c14:	2300      	movs	r3, #0
 8000c16:	60bb      	str	r3, [r7, #8]

	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8000c18:	f107 030c 	add.w	r3, r7, #12
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	4619      	mov	r1, r3
 8000c20:	48b8      	ldr	r0, [pc, #736]	; (8000f04 <menu+0x310>)
 8000c22:	f003 fbe7 	bl	80043f4 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8000c26:	f107 0308 	add.w	r3, r7, #8
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	48b5      	ldr	r0, [pc, #724]	; (8000f04 <menu+0x310>)
 8000c30:	f003 fcc3 	bl	80045ba <HAL_RTC_GetDate>
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	3b07      	subs	r3, #7
 8000c38:	2b57      	cmp	r3, #87	; 0x57
 8000c3a:	f200 81a9 	bhi.w	8000f90 <menu+0x39c>
 8000c3e:	a201      	add	r2, pc, #4	; (adr r2, 8000c44 <menu+0x50>)
 8000c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c44:	08000dc5 	.word	0x08000dc5
 8000c48:	08000e69 	.word	0x08000e69
 8000c4c:	08000dbd 	.word	0x08000dbd
 8000c50:	08000f91 	.word	0x08000f91
 8000c54:	08000f91 	.word	0x08000f91
 8000c58:	08000dcd 	.word	0x08000dcd
 8000c5c:	08000da5 	.word	0x08000da5
 8000c60:	08000f91 	.word	0x08000f91
 8000c64:	08000f91 	.word	0x08000f91
 8000c68:	08000f91 	.word	0x08000f91
 8000c6c:	08000f91 	.word	0x08000f91
 8000c70:	08000f91 	.word	0x08000f91
 8000c74:	08000f91 	.word	0x08000f91
 8000c78:	08000f91 	.word	0x08000f91
 8000c7c:	08000db5 	.word	0x08000db5
 8000c80:	08000f25 	.word	0x08000f25
 8000c84:	08000f91 	.word	0x08000f91
 8000c88:	08000e03 	.word	0x08000e03
 8000c8c:	08000da5 	.word	0x08000da5
 8000c90:	08000f91 	.word	0x08000f91
 8000c94:	08000f91 	.word	0x08000f91
 8000c98:	08000e99 	.word	0x08000e99
 8000c9c:	08000f91 	.word	0x08000f91
 8000ca0:	08000f91 	.word	0x08000f91
 8000ca4:	08000f91 	.word	0x08000f91
 8000ca8:	08000f91 	.word	0x08000f91
 8000cac:	08000f91 	.word	0x08000f91
 8000cb0:	08000f91 	.word	0x08000f91
 8000cb4:	08000f91 	.word	0x08000f91
 8000cb8:	08000f91 	.word	0x08000f91
 8000cbc:	08000f91 	.word	0x08000f91
 8000cc0:	08000f91 	.word	0x08000f91
 8000cc4:	08000f91 	.word	0x08000f91
 8000cc8:	08000f91 	.word	0x08000f91
 8000ccc:	08000f91 	.word	0x08000f91
 8000cd0:	08000f91 	.word	0x08000f91
 8000cd4:	08000f91 	.word	0x08000f91
 8000cd8:	08000f91 	.word	0x08000f91
 8000cdc:	08000f91 	.word	0x08000f91
 8000ce0:	08000f91 	.word	0x08000f91
 8000ce4:	08000f91 	.word	0x08000f91
 8000ce8:	08000f91 	.word	0x08000f91
 8000cec:	08000f91 	.word	0x08000f91
 8000cf0:	08000f91 	.word	0x08000f91
 8000cf4:	08000f91 	.word	0x08000f91
 8000cf8:	08000f91 	.word	0x08000f91
 8000cfc:	08000f91 	.word	0x08000f91
 8000d00:	08000f91 	.word	0x08000f91
 8000d04:	08000f91 	.word	0x08000f91
 8000d08:	08000f91 	.word	0x08000f91
 8000d0c:	08000f91 	.word	0x08000f91
 8000d10:	08000f91 	.word	0x08000f91
 8000d14:	08000f91 	.word	0x08000f91
 8000d18:	08000f91 	.word	0x08000f91
 8000d1c:	08000f91 	.word	0x08000f91
 8000d20:	08000f91 	.word	0x08000f91
 8000d24:	08000f91 	.word	0x08000f91
 8000d28:	08000f8f 	.word	0x08000f8f
 8000d2c:	08000f91 	.word	0x08000f91
 8000d30:	08000ed7 	.word	0x08000ed7
 8000d34:	08000f91 	.word	0x08000f91
 8000d38:	08000f91 	.word	0x08000f91
 8000d3c:	08000f91 	.word	0x08000f91
 8000d40:	08000f91 	.word	0x08000f91
 8000d44:	08000dad 	.word	0x08000dad
 8000d48:	08000f91 	.word	0x08000f91
 8000d4c:	08000f91 	.word	0x08000f91
 8000d50:	08000ef3 	.word	0x08000ef3
 8000d54:	08000f91 	.word	0x08000f91
 8000d58:	08000f91 	.word	0x08000f91
 8000d5c:	08000f91 	.word	0x08000f91
 8000d60:	08000f91 	.word	0x08000f91
 8000d64:	08000f91 	.word	0x08000f91
 8000d68:	08000f91 	.word	0x08000f91
 8000d6c:	08000f91 	.word	0x08000f91
 8000d70:	08000ee5 	.word	0x08000ee5
 8000d74:	08000f91 	.word	0x08000f91
 8000d78:	08000f91 	.word	0x08000f91
 8000d7c:	08000f91 	.word	0x08000f91
 8000d80:	08000f91 	.word	0x08000f91
 8000d84:	08000f91 	.word	0x08000f91
 8000d88:	08000f91 	.word	0x08000f91
 8000d8c:	08000f91 	.word	0x08000f91
 8000d90:	08000ec9 	.word	0x08000ec9
 8000d94:	08000f91 	.word	0x08000f91
 8000d98:	08000f91 	.word	0x08000f91
 8000d9c:	08000f91 	.word	0x08000f91
 8000da0:	08000e39 	.word	0x08000e39
//		time.Hours = hoursAdd;
//		time.Minutes = minutesAdd;
//		HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN);
//		break;
	case IR_CODE_CANCEL:
		flagColor = MENU_COLOR_LEVEL;
 8000da4:	4b58      	ldr	r3, [pc, #352]	; (8000f08 <menu+0x314>)
 8000da6:	2201      	movs	r2, #1
 8000da8:	601a      	str	r2, [r3, #0]
		break;
 8000daa:	e0f1      	b.n	8000f90 <menu+0x39c>



	case IR_CODE_MENU:
		flagMenu=MENU_TIME_LEVEL;
 8000dac:	4b57      	ldr	r3, [pc, #348]	; (8000f0c <menu+0x318>)
 8000dae:	2201      	movs	r2, #1
 8000db0:	601a      	str	r2, [r3, #0]
		break;
 8000db2:	e0ed      	b.n	8000f90 <menu+0x39c>

	case IR_CODE_PLAY:
		flagMenu=MENU_OFF;
 8000db4:	4b55      	ldr	r3, [pc, #340]	; (8000f0c <menu+0x318>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
		break;
 8000dba:	e0e9      	b.n	8000f90 <menu+0x39c>

	case IR_CODE_FORWARD:
		if(flagMenu==MENU_TIME_LEVEL || MENU_TIME_HOUR_SECOND_DIGIT){
			flagMenu=MENU_TIME_MINUTE_LEVEL;
 8000dbc:	4b53      	ldr	r3, [pc, #332]	; (8000f0c <menu+0x318>)
 8000dbe:	2202      	movs	r2, #2
 8000dc0:	601a      	str	r2, [r3, #0]
		}
		break;
 8000dc2:	e0e5      	b.n	8000f90 <menu+0x39c>

	case IR_CODE_REWIND:
		if(flagMenu==MENU_TIME_MINUTE_LEVEL|| MENU_TIME_MINUTE_SECOND_DIGIT){
			flagMenu=MENU_TIME_LEVEL;
 8000dc4:	4b51      	ldr	r3, [pc, #324]	; (8000f0c <menu+0x318>)
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	601a      	str	r2, [r3, #0]
		}
		break;
 8000dca:	e0e1      	b.n	8000f90 <menu+0x39c>



	case IR_CODE_1:
		// COLOR
		colorMenu(BLUE);
 8000dcc:	4b50      	ldr	r3, [pc, #320]	; (8000f10 <menu+0x31c>)
 8000dce:	781a      	ldrb	r2, [r3, #0]
 8000dd0:	7859      	ldrb	r1, [r3, #1]
 8000dd2:	0209      	lsls	r1, r1, #8
 8000dd4:	430a      	orrs	r2, r1
 8000dd6:	789b      	ldrb	r3, [r3, #2]
 8000dd8:	041b      	lsls	r3, r3, #16
 8000dda:	431a      	orrs	r2, r3
 8000ddc:	2300      	movs	r3, #0
 8000dde:	f362 0317 	bfi	r3, r2, #0, #24
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff fe66 	bl	8000ab4 <colorMenu>

		// FUNCTIONS MUST BE IN THIS ORDER

		// SECOND DIGIT_HOUR
		secondDigitHour(1);
 8000de8:	2001      	movs	r0, #1
 8000dea:	f7ff fe91 	bl	8000b10 <secondDigitHour>

		// FIRST DIGIT HOUR

		firstDigitHour(10);
 8000dee:	200a      	movs	r0, #10
 8000df0:	f7ff fe74 	bl	8000adc <firstDigitHour>

		// SECOND DIGIT MINUTE
		secondDigitMinute(1);
 8000df4:	2001      	movs	r0, #1
 8000df6:	f7ff fed1 	bl	8000b9c <secondDigitMinute>

		// FIRST DIGIT MINUTE
		firstDigitMinute(10);
 8000dfa:	200a      	movs	r0, #10
 8000dfc:	f7ff feb4 	bl	8000b68 <firstDigitMinute>


		break;
 8000e00:	e0c6      	b.n	8000f90 <menu+0x39c>


	case IR_CODE_2:
		//COLOR
		colorMenu(RED);
 8000e02:	4b44      	ldr	r3, [pc, #272]	; (8000f14 <menu+0x320>)
 8000e04:	781a      	ldrb	r2, [r3, #0]
 8000e06:	7859      	ldrb	r1, [r3, #1]
 8000e08:	0209      	lsls	r1, r1, #8
 8000e0a:	430a      	orrs	r2, r1
 8000e0c:	789b      	ldrb	r3, [r3, #2]
 8000e0e:	041b      	lsls	r3, r3, #16
 8000e10:	431a      	orrs	r2, r3
 8000e12:	2300      	movs	r3, #0
 8000e14:	f362 0317 	bfi	r3, r2, #0, #24
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff fe4b 	bl	8000ab4 <colorMenu>

		// FUNCTIONS MUST BE IN THIS ORDER

		// SECOND DIGIT_HOUR
		secondDigitHour(2);
 8000e1e:	2002      	movs	r0, #2
 8000e20:	f7ff fe76 	bl	8000b10 <secondDigitHour>

		// FIRST DIGIT HOUR

		firstDigitHour(20);
 8000e24:	2014      	movs	r0, #20
 8000e26:	f7ff fe59 	bl	8000adc <firstDigitHour>

		// SECOND DIGIT MINUTE
		secondDigitMinute(2);
 8000e2a:	2002      	movs	r0, #2
 8000e2c:	f7ff feb6 	bl	8000b9c <secondDigitMinute>

		// FIRST DIGIT MINUTE
		firstDigitMinute(20);
 8000e30:	2014      	movs	r0, #20
 8000e32:	f7ff fe99 	bl	8000b68 <firstDigitMinute>

		break;
 8000e36:	e0ab      	b.n	8000f90 <menu+0x39c>


	case IR_CODE_3:
		// COLOR
		colorMenu(GREEN);
 8000e38:	4b37      	ldr	r3, [pc, #220]	; (8000f18 <menu+0x324>)
 8000e3a:	781a      	ldrb	r2, [r3, #0]
 8000e3c:	7859      	ldrb	r1, [r3, #1]
 8000e3e:	0209      	lsls	r1, r1, #8
 8000e40:	430a      	orrs	r2, r1
 8000e42:	789b      	ldrb	r3, [r3, #2]
 8000e44:	041b      	lsls	r3, r3, #16
 8000e46:	431a      	orrs	r2, r3
 8000e48:	2300      	movs	r3, #0
 8000e4a:	f362 0317 	bfi	r3, r2, #0, #24
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff fe30 	bl	8000ab4 <colorMenu>

		// FUNCTIONS MUST BE IN THIS ORDER

		// SECOND DIGIT_HOUR
		secondDigitHour(3);
 8000e54:	2003      	movs	r0, #3
 8000e56:	f7ff fe5b 	bl	8000b10 <secondDigitHour>
		// FIRST DIGIT HOUR

		// NULL

		// SECOND DIGIT MINUTE
		secondDigitMinute(3);
 8000e5a:	2003      	movs	r0, #3
 8000e5c:	f7ff fe9e 	bl	8000b9c <secondDigitMinute>

		// FIRST DIGIT MINUTE
		firstDigitMinute(30);
 8000e60:	201e      	movs	r0, #30
 8000e62:	f7ff fe81 	bl	8000b68 <firstDigitMinute>
		break;
 8000e66:	e093      	b.n	8000f90 <menu+0x39c>


	case IR_CODE_4:

		//COLOR
		colorMenu(YELLOW);
 8000e68:	4b2c      	ldr	r3, [pc, #176]	; (8000f1c <menu+0x328>)
 8000e6a:	781a      	ldrb	r2, [r3, #0]
 8000e6c:	7859      	ldrb	r1, [r3, #1]
 8000e6e:	0209      	lsls	r1, r1, #8
 8000e70:	430a      	orrs	r2, r1
 8000e72:	789b      	ldrb	r3, [r3, #2]
 8000e74:	041b      	lsls	r3, r3, #16
 8000e76:	431a      	orrs	r2, r3
 8000e78:	2300      	movs	r3, #0
 8000e7a:	f362 0317 	bfi	r3, r2, #0, #24
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff fe18 	bl	8000ab4 <colorMenu>

		// FUNCTIONS MUST BE IN THIS ORDER

		// SECOND DIGIT_HOUR
		secondDigitHour(4);
 8000e84:	2004      	movs	r0, #4
 8000e86:	f7ff fe43 	bl	8000b10 <secondDigitHour>
		// FIRST DIGIT HOUR

		// NULL

		// SECOND DIGIT MINUTE
		secondDigitMinute(4);
 8000e8a:	2004      	movs	r0, #4
 8000e8c:	f7ff fe86 	bl	8000b9c <secondDigitMinute>

		// FIRST DIGIT MINUTE
		firstDigitMinute(40);
 8000e90:	2028      	movs	r0, #40	; 0x28
 8000e92:	f7ff fe69 	bl	8000b68 <firstDigitMinute>
		break;
 8000e96:	e07b      	b.n	8000f90 <menu+0x39c>


	case IR_CODE_5:
		//COLOR
		colorMenu(PINK);
 8000e98:	4b21      	ldr	r3, [pc, #132]	; (8000f20 <menu+0x32c>)
 8000e9a:	781a      	ldrb	r2, [r3, #0]
 8000e9c:	7859      	ldrb	r1, [r3, #1]
 8000e9e:	0209      	lsls	r1, r1, #8
 8000ea0:	430a      	orrs	r2, r1
 8000ea2:	789b      	ldrb	r3, [r3, #2]
 8000ea4:	041b      	lsls	r3, r3, #16
 8000ea6:	431a      	orrs	r2, r3
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	f362 0317 	bfi	r3, r2, #0, #24
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f7ff fe00 	bl	8000ab4 <colorMenu>

		// FUNCTIONS MUST BE IN THIS ORDER

		// SECOND DIGIT_HOUR
		secondDigitHour(5);
 8000eb4:	2005      	movs	r0, #5
 8000eb6:	f7ff fe2b 	bl	8000b10 <secondDigitHour>
		// FIRST DIGIT HOUR

		// NULL

		// SECOND DIGIT MINUTE
		secondDigitMinute(5);
 8000eba:	2005      	movs	r0, #5
 8000ebc:	f7ff fe6e 	bl	8000b9c <secondDigitMinute>

		// FIRST DIGIT MINUTE
		firstDigitMinute(50);
 8000ec0:	2032      	movs	r0, #50	; 0x32
 8000ec2:	f7ff fe51 	bl	8000b68 <firstDigitMinute>


		break;
 8000ec6:	e063      	b.n	8000f90 <menu+0x39c>
		//COLOR

		// FUNCTIONS MUST BE IN THIS ORDER

		// SECOND DIGIT_HOUR
		secondDigitHour(6);
 8000ec8:	2006      	movs	r0, #6
 8000eca:	f7ff fe21 	bl	8000b10 <secondDigitHour>
		// FIRST DIGIT HOUR

		// NULL

		// SECOND DIGIT MINUTE
		secondDigitMinute(6);
 8000ece:	2006      	movs	r0, #6
 8000ed0:	f7ff fe64 	bl	8000b9c <secondDigitMinute>

		// FIRST DIGIT MINUTE

		// NULL

		break;
 8000ed4:	e05c      	b.n	8000f90 <menu+0x39c>
		//COLOR

		// FUNCTIONS MUST BE IN THIS ORDER

		// SECOND DIGIT_HOUR
		secondDigitHour(7);
 8000ed6:	2007      	movs	r0, #7
 8000ed8:	f7ff fe1a 	bl	8000b10 <secondDigitHour>
		// FIRST DIGIT HOUR

		// NULL

		// SECOND DIGIT MINUTE
		secondDigitMinute(7);
 8000edc:	2007      	movs	r0, #7
 8000ede:	f7ff fe5d 	bl	8000b9c <secondDigitMinute>

		// FIRST DIGIT MINUTE

		// NULL

		break;
 8000ee2:	e055      	b.n	8000f90 <menu+0x39c>
		//COLOR

		// FUNCTIONS MUST BE IN THIS ORDER

		// SECOND DIGIT_HOUR
		secondDigitHour(8);
 8000ee4:	2008      	movs	r0, #8
 8000ee6:	f7ff fe13 	bl	8000b10 <secondDigitHour>
		// FIRST DIGIT HOUR

		// NULL

		// SECOND DIGIT MINUTE
		secondDigitMinute(8);
 8000eea:	2008      	movs	r0, #8
 8000eec:	f7ff fe56 	bl	8000b9c <secondDigitMinute>

		// FIRST DIGIT MINUTE

		// NULL
		break;
 8000ef0:	e04e      	b.n	8000f90 <menu+0x39c>
		//COLOR

		// FUNCTIONS MUST BE IN THIS ORDER

		// SECOND DIGIT_HOUR
		secondDigitHour(9);
 8000ef2:	2009      	movs	r0, #9
 8000ef4:	f7ff fe0c 	bl	8000b10 <secondDigitHour>
		// FIRST DIGIT HOUR

		// NULL

		// SECOND DIGIT MINUTE
		secondDigitMinute(9);
 8000ef8:	2009      	movs	r0, #9
 8000efa:	f7ff fe4f 	bl	8000b9c <secondDigitMinute>

		// FIRST DIGIT MINUTE

		// NULL

		break;
 8000efe:	e047      	b.n	8000f90 <menu+0x39c>
 8000f00:	080085d0 	.word	0x080085d0
 8000f04:	20000714 	.word	0x20000714
 8000f08:	20000120 	.word	0x20000120
 8000f0c:	20000124 	.word	0x20000124
 8000f10:	20000074 	.word	0x20000074
 8000f14:	2000006c 	.word	0x2000006c
 8000f18:	20000070 	.word	0x20000070
 8000f1c:	20000078 	.word	0x20000078
 8000f20:	2000007c 	.word	0x2000007c

		// NULL

		// SECOND DIGIT_HOUR

		if (flagMenu == MENU_TIME_HOUR_SECOND_DIGIT) {
 8000f24:	4b1c      	ldr	r3, [pc, #112]	; (8000f98 <menu+0x3a4>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2b03      	cmp	r3, #3
 8000f2a:	d112      	bne.n	8000f52 <menu+0x35e>

			if (isInRange(hoursChange)) {
 8000f2c:	4b1b      	ldr	r3, [pc, #108]	; (8000f9c <menu+0x3a8>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff fd9d 	bl	8000a70 <isInRange>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d002      	beq.n	8000f42 <menu+0x34e>
				hoursChange = 0;
 8000f3c:	4b17      	ldr	r3, [pc, #92]	; (8000f9c <menu+0x3a8>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	701a      	strb	r2, [r3, #0]
			}

			setHours(hoursChange);
 8000f42:	4b16      	ldr	r3, [pc, #88]	; (8000f9c <menu+0x3a8>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	4618      	mov	r0, r3
 8000f48:	f000 fbb2 	bl	80016b0 <setHours>
			flagMenu = MENU_TIME_LEVEL;
 8000f4c:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <menu+0x3a4>)
 8000f4e:	2201      	movs	r2, #1
 8000f50:	601a      	str	r2, [r3, #0]



		// FIRST DIGIT HOUR

		firstDigitHour(0);
 8000f52:	2000      	movs	r0, #0
 8000f54:	f7ff fdc2 	bl	8000adc <firstDigitHour>

		// SECOND DIGIT MINUTE
		if (flagMenu == MENU_TIME_MINUTE_SECOND_DIGIT) {
 8000f58:	4b0f      	ldr	r3, [pc, #60]	; (8000f98 <menu+0x3a4>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2b04      	cmp	r3, #4
 8000f5e:	d112      	bne.n	8000f86 <menu+0x392>

			if (isInRangeMinute(minutesChange)) {
 8000f60:	4b0f      	ldr	r3, [pc, #60]	; (8000fa0 <menu+0x3ac>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff fd94 	bl	8000a92 <isInRangeMinute>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d002      	beq.n	8000f76 <menu+0x382>
				minutesChange = 0;
 8000f70:	4b0b      	ldr	r3, [pc, #44]	; (8000fa0 <menu+0x3ac>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	701a      	strb	r2, [r3, #0]
			}
			setMinutes(minutesChange);
 8000f76:	4b0a      	ldr	r3, [pc, #40]	; (8000fa0 <menu+0x3ac>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f000 fb6a 	bl	8001654 <setMinutes>
			flagMenu = MENU_TIME_MINUTE_LEVEL;
 8000f80:	4b05      	ldr	r3, [pc, #20]	; (8000f98 <menu+0x3a4>)
 8000f82:	2202      	movs	r2, #2
 8000f84:	601a      	str	r2, [r3, #0]



		// FIRST DIGIT MINUTE

		firstDigitMinute(0);
 8000f86:	2000      	movs	r0, #0
 8000f88:	f7ff fdee 	bl	8000b68 <firstDigitMinute>

		break;
 8000f8c:	e000      	b.n	8000f90 <menu+0x39c>
		break;
 8000f8e:	bf00      	nop

	}


}
 8000f90:	bf00      	nop
 8000f92:	3720      	adds	r7, #32
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	20000124 	.word	0x20000124
 8000f9c:	20000129 	.word	0x20000129
 8000fa0:	20000128 	.word	0x20000128

08000fa4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b092      	sub	sp, #72	; 0x48
 8000fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000faa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	605a      	str	r2, [r3, #4]
 8000fb4:	609a      	str	r2, [r3, #8]
 8000fb6:	60da      	str	r2, [r3, #12]
 8000fb8:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000fba:	2300      	movs	r3, #0
 8000fbc:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 8000fbe:	1d3b      	adds	r3, r7, #4
 8000fc0:	222c      	movs	r2, #44	; 0x2c
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f006 fb99 	bl	80076fc <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000fca:	4b3c      	ldr	r3, [pc, #240]	; (80010bc <MX_RTC_Init+0x118>)
 8000fcc:	4a3c      	ldr	r2, [pc, #240]	; (80010c0 <MX_RTC_Init+0x11c>)
 8000fce:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000fd0:	4b3a      	ldr	r3, [pc, #232]	; (80010bc <MX_RTC_Init+0x118>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000fd6:	4b39      	ldr	r3, [pc, #228]	; (80010bc <MX_RTC_Init+0x118>)
 8000fd8:	227f      	movs	r2, #127	; 0x7f
 8000fda:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000fdc:	4b37      	ldr	r3, [pc, #220]	; (80010bc <MX_RTC_Init+0x118>)
 8000fde:	22ff      	movs	r2, #255	; 0xff
 8000fe0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000fe2:	4b36      	ldr	r3, [pc, #216]	; (80010bc <MX_RTC_Init+0x118>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000fe8:	4b34      	ldr	r3, [pc, #208]	; (80010bc <MX_RTC_Init+0x118>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000fee:	4b33      	ldr	r3, [pc, #204]	; (80010bc <MX_RTC_Init+0x118>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000ff4:	4b31      	ldr	r3, [pc, #196]	; (80010bc <MX_RTC_Init+0x118>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ffa:	4830      	ldr	r0, [pc, #192]	; (80010bc <MX_RTC_Init+0x118>)
 8000ffc:	f003 f8e2 	bl	80041c4 <HAL_RTC_Init>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001006:	f7ff fd21 	bl	8000a4c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 19;
 800100a:	2313      	movs	r3, #19
 800100c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 26;
 8001010:	231a      	movs	r3, #26
 8001012:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 20;
 8001016:	2314      	movs	r3, #20
 8001018:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800101c:	2300      	movs	r3, #0
 800101e:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001020:	2300      	movs	r3, #0
 8001022:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001024:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001028:	2200      	movs	r2, #0
 800102a:	4619      	mov	r1, r3
 800102c:	4823      	ldr	r0, [pc, #140]	; (80010bc <MX_RTC_Init+0x118>)
 800102e:	f003 f944 	bl	80042ba <HAL_RTC_SetTime>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8001038:	f7ff fd08 	bl	8000a4c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY;
 800103c:	2307      	movs	r3, #7
 800103e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 8001042:	2301      	movs	r3, #1
 8001044:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 25;
 8001048:	2319      	movs	r3, #25
 800104a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 22;
 800104e:	2316      	movs	r3, #22
 8001050:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001054:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001058:	2200      	movs	r2, #0
 800105a:	4619      	mov	r1, r3
 800105c:	4817      	ldr	r0, [pc, #92]	; (80010bc <MX_RTC_Init+0x118>)
 800105e:	f003 fa25 	bl	80044ac <HAL_RTC_SetDate>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8001068:	f7ff fcf0 	bl	8000a4c <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 23;
 800106c:	2317      	movs	r3, #23
 800106e:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 59;
 8001070:	233b      	movs	r3, #59	; 0x3b
 8001072:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 55;
 8001074:	2337      	movs	r3, #55	; 0x37
 8001076:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800107c:	2300      	movs	r3, #0
 800107e:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001080:	2300      	movs	r3, #0
 8001082:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_ALL;
 8001084:	f04f 3380 	mov.w	r3, #2155905152	; 0x80808080
 8001088:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800108a:	2300      	movs	r3, #0
 800108c:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800108e:	2300      	movs	r3, #0
 8001090:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 1;
 8001092:	2301      	movs	r3, #1
 8001094:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8001098:	f44f 7380 	mov.w	r3, #256	; 0x100
 800109c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 800109e:	1d3b      	adds	r3, r7, #4
 80010a0:	2200      	movs	r2, #0
 80010a2:	4619      	mov	r1, r3
 80010a4:	4805      	ldr	r0, [pc, #20]	; (80010bc <MX_RTC_Init+0x118>)
 80010a6:	f003 fad5 	bl	8004654 <HAL_RTC_SetAlarm_IT>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_RTC_Init+0x110>
  {
    Error_Handler();
 80010b0:	f7ff fccc 	bl	8000a4c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80010b4:	bf00      	nop
 80010b6:	3748      	adds	r7, #72	; 0x48
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20000714 	.word	0x20000714
 80010c0:	40002800 	.word	0x40002800

080010c4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b0a4      	sub	sp, #144	; 0x90
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010cc:	f107 0308 	add.w	r3, r7, #8
 80010d0:	2288      	movs	r2, #136	; 0x88
 80010d2:	2100      	movs	r1, #0
 80010d4:	4618      	mov	r0, r3
 80010d6:	f006 fb11 	bl	80076fc <memset>
  if(rtcHandle->Instance==RTC)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a10      	ldr	r2, [pc, #64]	; (8001120 <HAL_RTC_MspInit+0x5c>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d118      	bne.n	8001116 <HAL_RTC_MspInit+0x52>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80010e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010e8:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80010ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010f2:	f107 0308 	add.w	r3, r7, #8
 80010f6:	4618      	mov	r0, r3
 80010f8:	f002 fb98 	bl	800382c <HAL_RCCEx_PeriphCLKConfig>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001102:	f7ff fca3 	bl	8000a4c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001106:	4b07      	ldr	r3, [pc, #28]	; (8001124 <HAL_RTC_MspInit+0x60>)
 8001108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800110c:	4a05      	ldr	r2, [pc, #20]	; (8001124 <HAL_RTC_MspInit+0x60>)
 800110e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001112:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001116:	bf00      	nop
 8001118:	3790      	adds	r7, #144	; 0x90
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40002800 	.word	0x40002800
 8001124:	40021000 	.word	0x40021000

08001128 <changeColor>:




// Zmiana koloru na zawolanie
void changeColor(struct colorRgb newColor) {
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
	actualColor.blue = newColor.blue;
 8001130:	797a      	ldrb	r2, [r7, #5]
 8001132:	4b07      	ldr	r3, [pc, #28]	; (8001150 <changeColor+0x28>)
 8001134:	705a      	strb	r2, [r3, #1]
	actualColor.red = newColor.red;
 8001136:	793a      	ldrb	r2, [r7, #4]
 8001138:	4b05      	ldr	r3, [pc, #20]	; (8001150 <changeColor+0x28>)
 800113a:	701a      	strb	r2, [r3, #0]
	actualColor.green = newColor.green;
 800113c:	79ba      	ldrb	r2, [r7, #6]
 800113e:	4b04      	ldr	r3, [pc, #16]	; (8001150 <changeColor+0x28>)
 8001140:	709a      	strb	r2, [r3, #2]
}
 8001142:	bf00      	nop
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	20000738 	.word	0x20000738

08001154 <firstSegment>:
}




	void firstSegment(uint8_t number[]) {
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
		uint8_t x = 0;
 800115c:	2300      	movs	r3, #0
 800115e:	73fb      	strb	r3, [r7, #15]
		for (int i = 0; i <= 13; i++) {
 8001160:	2300      	movs	r3, #0
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	e01d      	b.n	80011a2 <firstSegment+0x4e>

			if (number[x] == i) {
 8001166:	7bfb      	ldrb	r3, [r7, #15]
 8001168:	687a      	ldr	r2, [r7, #4]
 800116a:	4413      	add	r3, r2
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	461a      	mov	r2, r3
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	4293      	cmp	r3, r2
 8001174:	d10c      	bne.n	8001190 <firstSegment+0x3c>
				ws2811_set_color(i, actualColor.red, actualColor.green, actualColor.blue);
 8001176:	68b8      	ldr	r0, [r7, #8]
 8001178:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <firstSegment+0x60>)
 800117a:	7819      	ldrb	r1, [r3, #0]
 800117c:	4b0d      	ldr	r3, [pc, #52]	; (80011b4 <firstSegment+0x60>)
 800117e:	789a      	ldrb	r2, [r3, #2]
 8001180:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <firstSegment+0x60>)
 8001182:	785b      	ldrb	r3, [r3, #1]
 8001184:	f000 ff6a 	bl	800205c <ws2811_set_color>
				x++;
 8001188:	7bfb      	ldrb	r3, [r7, #15]
 800118a:	3301      	adds	r3, #1
 800118c:	73fb      	strb	r3, [r7, #15]
 800118e:	e005      	b.n	800119c <firstSegment+0x48>
			} else {
				ws2811_set_color(i, 0, 0, 0);
 8001190:	68b8      	ldr	r0, [r7, #8]
 8001192:	2300      	movs	r3, #0
 8001194:	2200      	movs	r2, #0
 8001196:	2100      	movs	r1, #0
 8001198:	f000 ff60 	bl	800205c <ws2811_set_color>
		for (int i = 0; i <= 13; i++) {
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	3301      	adds	r3, #1
 80011a0:	60bb      	str	r3, [r7, #8]
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	2b0d      	cmp	r3, #13
 80011a6:	ddde      	ble.n	8001166 <firstSegment+0x12>
			}
		}
	}
 80011a8:	bf00      	nop
 80011aa:	bf00      	nop
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	20000738 	.word	0x20000738

080011b8 <secondSegment>:

	void secondSegment(uint8_t number[]) {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
		uint8_t x = 0;
 80011c0:	2300      	movs	r3, #0
 80011c2:	73fb      	strb	r3, [r7, #15]
		for (int i = 14; i <= 27; i++) {
 80011c4:	230e      	movs	r3, #14
 80011c6:	60bb      	str	r3, [r7, #8]
 80011c8:	e01e      	b.n	8001208 <secondSegment+0x50>

			if (number[x] == i - 14) {
 80011ca:	7bfb      	ldrb	r3, [r7, #15]
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	4413      	add	r3, r2
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	461a      	mov	r2, r3
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	3b0e      	subs	r3, #14
 80011d8:	429a      	cmp	r2, r3
 80011da:	d10c      	bne.n	80011f6 <secondSegment+0x3e>
				ws2811_set_color(i,actualColor.red, actualColor.green, actualColor.blue);
 80011dc:	68b8      	ldr	r0, [r7, #8]
 80011de:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <secondSegment+0x60>)
 80011e0:	7819      	ldrb	r1, [r3, #0]
 80011e2:	4b0d      	ldr	r3, [pc, #52]	; (8001218 <secondSegment+0x60>)
 80011e4:	789a      	ldrb	r2, [r3, #2]
 80011e6:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <secondSegment+0x60>)
 80011e8:	785b      	ldrb	r3, [r3, #1]
 80011ea:	f000 ff37 	bl	800205c <ws2811_set_color>
				x++;
 80011ee:	7bfb      	ldrb	r3, [r7, #15]
 80011f0:	3301      	adds	r3, #1
 80011f2:	73fb      	strb	r3, [r7, #15]
 80011f4:	e005      	b.n	8001202 <secondSegment+0x4a>
			} else {
				ws2811_set_color(i, 0, 0, 0);
 80011f6:	68b8      	ldr	r0, [r7, #8]
 80011f8:	2300      	movs	r3, #0
 80011fa:	2200      	movs	r2, #0
 80011fc:	2100      	movs	r1, #0
 80011fe:	f000 ff2d 	bl	800205c <ws2811_set_color>
		for (int i = 14; i <= 27; i++) {
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	3301      	adds	r3, #1
 8001206:	60bb      	str	r3, [r7, #8]
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	2b1b      	cmp	r3, #27
 800120c:	dddd      	ble.n	80011ca <secondSegment+0x12>
			}
		}
	}
 800120e:	bf00      	nop
 8001210:	bf00      	nop
 8001212:	3710      	adds	r7, #16
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20000738 	.word	0x20000738

0800121c <dwukropekTurnOn>:

	void dwukropekTurnOn() {
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0

		ws2811_set_color(28,  actualColor.red, actualColor.green, actualColor.blue);
 8001220:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <dwukropekTurnOn+0x38>)
 8001222:	7819      	ldrb	r1, [r3, #0]
 8001224:	4b0b      	ldr	r3, [pc, #44]	; (8001254 <dwukropekTurnOn+0x38>)
 8001226:	789a      	ldrb	r2, [r3, #2]
 8001228:	4b0a      	ldr	r3, [pc, #40]	; (8001254 <dwukropekTurnOn+0x38>)
 800122a:	785b      	ldrb	r3, [r3, #1]
 800122c:	201c      	movs	r0, #28
 800122e:	f000 ff15 	bl	800205c <ws2811_set_color>
		ws2811_set_color(29,  actualColor.red, actualColor.green, actualColor.blue);
 8001232:	4b08      	ldr	r3, [pc, #32]	; (8001254 <dwukropekTurnOn+0x38>)
 8001234:	7819      	ldrb	r1, [r3, #0]
 8001236:	4b07      	ldr	r3, [pc, #28]	; (8001254 <dwukropekTurnOn+0x38>)
 8001238:	789a      	ldrb	r2, [r3, #2]
 800123a:	4b06      	ldr	r3, [pc, #24]	; (8001254 <dwukropekTurnOn+0x38>)
 800123c:	785b      	ldrb	r3, [r3, #1]
 800123e:	201d      	movs	r0, #29
 8001240:	f000 ff0c 	bl	800205c <ws2811_set_color>
		ws2811_update();
 8001244:	f000 fefa 	bl	800203c <ws2811_update>
		doubleDot=0;
 8001248:	4b03      	ldr	r3, [pc, #12]	; (8001258 <dwukropekTurnOn+0x3c>)
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]

	}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000738 	.word	0x20000738
 8001258:	2000012c 	.word	0x2000012c

0800125c <dwukropekTurnOff>:

	void dwukropekTurnOff() {
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0

		ws2811_set_color(28, 0, 0, 0);
 8001260:	2300      	movs	r3, #0
 8001262:	2200      	movs	r2, #0
 8001264:	2100      	movs	r1, #0
 8001266:	201c      	movs	r0, #28
 8001268:	f000 fef8 	bl	800205c <ws2811_set_color>
		ws2811_set_color(29, 0, 0, 0);
 800126c:	2300      	movs	r3, #0
 800126e:	2200      	movs	r2, #0
 8001270:	2100      	movs	r1, #0
 8001272:	201d      	movs	r0, #29
 8001274:	f000 fef2 	bl	800205c <ws2811_set_color>
		ws2811_update();
 8001278:	f000 fee0 	bl	800203c <ws2811_update>
		doubleDot=1;
 800127c:	4b02      	ldr	r3, [pc, #8]	; (8001288 <dwukropekTurnOff+0x2c>)
 800127e:	2201      	movs	r2, #1
 8001280:	601a      	str	r2, [r3, #0]
}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	2000012c 	.word	0x2000012c

0800128c <kropkaOn>:

	void kropkaOn(){
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
		ws2811_set_color(29,  actualColor.green, actualColor.red, actualColor.blue);
 8001290:	4b06      	ldr	r3, [pc, #24]	; (80012ac <kropkaOn+0x20>)
 8001292:	7899      	ldrb	r1, [r3, #2]
 8001294:	4b05      	ldr	r3, [pc, #20]	; (80012ac <kropkaOn+0x20>)
 8001296:	781a      	ldrb	r2, [r3, #0]
 8001298:	4b04      	ldr	r3, [pc, #16]	; (80012ac <kropkaOn+0x20>)
 800129a:	785b      	ldrb	r3, [r3, #1]
 800129c:	201d      	movs	r0, #29
 800129e:	f000 fedd 	bl	800205c <ws2811_set_color>
		ws2811_update();
 80012a2:	f000 fecb 	bl	800203c <ws2811_update>
	}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000738 	.word	0x20000738

080012b0 <dwukropekStart>:


	void dwukropekStart(void){
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
		if (doubleDot == 1) {
 80012b4:	4b05      	ldr	r3, [pc, #20]	; (80012cc <dwukropekStart+0x1c>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d102      	bne.n	80012c2 <dwukropekStart+0x12>
					dwukropekTurnOn();
 80012bc:	f7ff ffae 	bl	800121c <dwukropekTurnOn>
					//HAL_Delay(1000);
				} else {
					dwukropekTurnOff();
					//HAL_Delay(1000);
				}
	}
 80012c0:	e001      	b.n	80012c6 <dwukropekStart+0x16>
					dwukropekTurnOff();
 80012c2:	f7ff ffcb 	bl	800125c <dwukropekTurnOff>
	}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	2000012c 	.word	0x2000012c

080012d0 <thirdSegment>:

	void thirdSegment(uint8_t number[]) {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
		uint8_t x = 0;
 80012d8:	2300      	movs	r3, #0
 80012da:	73fb      	strb	r3, [r7, #15]
		for (int i = 30; i <= 43; i++) {
 80012dc:	231e      	movs	r3, #30
 80012de:	60bb      	str	r3, [r7, #8]
 80012e0:	e01e      	b.n	8001320 <thirdSegment+0x50>

			if (number[x] == i - 30) {
 80012e2:	7bfb      	ldrb	r3, [r7, #15]
 80012e4:	687a      	ldr	r2, [r7, #4]
 80012e6:	4413      	add	r3, r2
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	461a      	mov	r2, r3
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	3b1e      	subs	r3, #30
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d10c      	bne.n	800130e <thirdSegment+0x3e>
				ws2811_set_color(i, actualColor.red, actualColor.green, actualColor.blue);
 80012f4:	68b8      	ldr	r0, [r7, #8]
 80012f6:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <thirdSegment+0x60>)
 80012f8:	7819      	ldrb	r1, [r3, #0]
 80012fa:	4b0d      	ldr	r3, [pc, #52]	; (8001330 <thirdSegment+0x60>)
 80012fc:	789a      	ldrb	r2, [r3, #2]
 80012fe:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <thirdSegment+0x60>)
 8001300:	785b      	ldrb	r3, [r3, #1]
 8001302:	f000 feab 	bl	800205c <ws2811_set_color>
				x++;
 8001306:	7bfb      	ldrb	r3, [r7, #15]
 8001308:	3301      	adds	r3, #1
 800130a:	73fb      	strb	r3, [r7, #15]
 800130c:	e005      	b.n	800131a <thirdSegment+0x4a>
			} else {
				ws2811_set_color(i, 0, 0, 0);
 800130e:	68b8      	ldr	r0, [r7, #8]
 8001310:	2300      	movs	r3, #0
 8001312:	2200      	movs	r2, #0
 8001314:	2100      	movs	r1, #0
 8001316:	f000 fea1 	bl	800205c <ws2811_set_color>
		for (int i = 30; i <= 43; i++) {
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	3301      	adds	r3, #1
 800131e:	60bb      	str	r3, [r7, #8]
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	2b2b      	cmp	r3, #43	; 0x2b
 8001324:	dddd      	ble.n	80012e2 <thirdSegment+0x12>
			}
		}
	}
 8001326:	bf00      	nop
 8001328:	bf00      	nop
 800132a:	3710      	adds	r7, #16
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20000738 	.word	0x20000738

08001334 <fourthSegment>:

	void fourthSegment(uint8_t number[]) {
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
		uint8_t x = 0;
 800133c:	2300      	movs	r3, #0
 800133e:	73fb      	strb	r3, [r7, #15]
		for (int i = 44; i <= 57; i++) {
 8001340:	232c      	movs	r3, #44	; 0x2c
 8001342:	60bb      	str	r3, [r7, #8]
 8001344:	e01e      	b.n	8001384 <fourthSegment+0x50>

			if (number[x] == i - 44) {
 8001346:	7bfb      	ldrb	r3, [r7, #15]
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	4413      	add	r3, r2
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	461a      	mov	r2, r3
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	3b2c      	subs	r3, #44	; 0x2c
 8001354:	429a      	cmp	r2, r3
 8001356:	d10c      	bne.n	8001372 <fourthSegment+0x3e>
				ws2811_set_color(i, actualColor.red, actualColor.green, actualColor.blue);
 8001358:	68b8      	ldr	r0, [r7, #8]
 800135a:	4b0e      	ldr	r3, [pc, #56]	; (8001394 <fourthSegment+0x60>)
 800135c:	7819      	ldrb	r1, [r3, #0]
 800135e:	4b0d      	ldr	r3, [pc, #52]	; (8001394 <fourthSegment+0x60>)
 8001360:	789a      	ldrb	r2, [r3, #2]
 8001362:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <fourthSegment+0x60>)
 8001364:	785b      	ldrb	r3, [r3, #1]
 8001366:	f000 fe79 	bl	800205c <ws2811_set_color>
				x++;
 800136a:	7bfb      	ldrb	r3, [r7, #15]
 800136c:	3301      	adds	r3, #1
 800136e:	73fb      	strb	r3, [r7, #15]
 8001370:	e005      	b.n	800137e <fourthSegment+0x4a>
			} else {
				ws2811_set_color(i, 0, 0, 0);
 8001372:	68b8      	ldr	r0, [r7, #8]
 8001374:	2300      	movs	r3, #0
 8001376:	2200      	movs	r2, #0
 8001378:	2100      	movs	r1, #0
 800137a:	f000 fe6f 	bl	800205c <ws2811_set_color>
		for (int i = 44; i <= 57; i++) {
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	3301      	adds	r3, #1
 8001382:	60bb      	str	r3, [r7, #8]
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	2b39      	cmp	r3, #57	; 0x39
 8001388:	dddd      	ble.n	8001346 <fourthSegment+0x12>
			}
		}
	}
 800138a:	bf00      	nop
 800138c:	bf00      	nop
 800138e:	3710      	adds	r7, #16
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	20000738 	.word	0x20000738

08001398 <numberToMatrix>:

	uint8_t* numberToMatrix(int number) {
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2b09      	cmp	r3, #9
 80013a4:	d82a      	bhi.n	80013fc <numberToMatrix+0x64>
 80013a6:	a201      	add	r2, pc, #4	; (adr r2, 80013ac <numberToMatrix+0x14>)
 80013a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ac:	080013d5 	.word	0x080013d5
 80013b0:	080013d9 	.word	0x080013d9
 80013b4:	080013dd 	.word	0x080013dd
 80013b8:	080013e1 	.word	0x080013e1
 80013bc:	080013e5 	.word	0x080013e5
 80013c0:	080013e9 	.word	0x080013e9
 80013c4:	080013ed 	.word	0x080013ed
 80013c8:	080013f1 	.word	0x080013f1
 80013cc:	080013f5 	.word	0x080013f5
 80013d0:	080013f9 	.word	0x080013f9
		switch (number) {
		case 0:
			return zero;
 80013d4:	4b0d      	ldr	r3, [pc, #52]	; (800140c <numberToMatrix+0x74>)
 80013d6:	e012      	b.n	80013fe <numberToMatrix+0x66>
			break;
		case 1:
			return one;
 80013d8:	4b0d      	ldr	r3, [pc, #52]	; (8001410 <numberToMatrix+0x78>)
 80013da:	e010      	b.n	80013fe <numberToMatrix+0x66>
			break;
		case 2:
			return two;
 80013dc:	4b0d      	ldr	r3, [pc, #52]	; (8001414 <numberToMatrix+0x7c>)
 80013de:	e00e      	b.n	80013fe <numberToMatrix+0x66>
			break;
		case 3:
			return three;
 80013e0:	4b0d      	ldr	r3, [pc, #52]	; (8001418 <numberToMatrix+0x80>)
 80013e2:	e00c      	b.n	80013fe <numberToMatrix+0x66>
			break;
		case 4:
			return four;
 80013e4:	4b0d      	ldr	r3, [pc, #52]	; (800141c <numberToMatrix+0x84>)
 80013e6:	e00a      	b.n	80013fe <numberToMatrix+0x66>
			break;
		case 5:
			return five;
 80013e8:	4b0d      	ldr	r3, [pc, #52]	; (8001420 <numberToMatrix+0x88>)
 80013ea:	e008      	b.n	80013fe <numberToMatrix+0x66>
			break;
		case 6:
			return six;
 80013ec:	4b0d      	ldr	r3, [pc, #52]	; (8001424 <numberToMatrix+0x8c>)
 80013ee:	e006      	b.n	80013fe <numberToMatrix+0x66>
			break;
		case 7:
			return seven;
 80013f0:	4b0d      	ldr	r3, [pc, #52]	; (8001428 <numberToMatrix+0x90>)
 80013f2:	e004      	b.n	80013fe <numberToMatrix+0x66>
			break;
		case 8:
			return eight;
 80013f4:	4b0d      	ldr	r3, [pc, #52]	; (800142c <numberToMatrix+0x94>)
 80013f6:	e002      	b.n	80013fe <numberToMatrix+0x66>
			break;
		case 9:
			return nine;
 80013f8:	4b0d      	ldr	r3, [pc, #52]	; (8001430 <numberToMatrix+0x98>)
 80013fa:	e000      	b.n	80013fe <numberToMatrix+0x66>
			break;
		default:
			return 0;
 80013fc:	2300      	movs	r3, #0
		}

	}
 80013fe:	4618      	mov	r0, r3
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	20000000 	.word	0x20000000
 8001410:	2000000c 	.word	0x2000000c
 8001414:	20000010 	.word	0x20000010
 8001418:	2000001c 	.word	0x2000001c
 800141c:	20000028 	.word	0x20000028
 8001420:	20000030 	.word	0x20000030
 8001424:	2000003c 	.word	0x2000003c
 8001428:	20000048 	.word	0x20000048
 800142c:	20000050 	.word	0x20000050
 8001430:	20000060 	.word	0x20000060

08001434 <destroy>:

	struct manyNumber destroy(uint8_t numberToDestroy) {
 8001434:	b480      	push	{r7}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	71fb      	strb	r3, [r7, #7]

		struct manyNumber temp;

		temp.firstNumber = numberToDestroy / 10;
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	4a10      	ldr	r2, [pc, #64]	; (8001484 <destroy+0x50>)
 8001442:	fba2 2303 	umull	r2, r3, r2, r3
 8001446:	08db      	lsrs	r3, r3, #3
 8001448:	b2db      	uxtb	r3, r3
 800144a:	723b      	strb	r3, [r7, #8]
		temp.secondNumber = numberToDestroy % 10;
 800144c:	79fa      	ldrb	r2, [r7, #7]
 800144e:	4b0d      	ldr	r3, [pc, #52]	; (8001484 <destroy+0x50>)
 8001450:	fba3 1302 	umull	r1, r3, r3, r2
 8001454:	08d9      	lsrs	r1, r3, #3
 8001456:	460b      	mov	r3, r1
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	440b      	add	r3, r1
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	b2db      	uxtb	r3, r3
 8001462:	727b      	strb	r3, [r7, #9]
		return temp;
 8001464:	893b      	ldrh	r3, [r7, #8]
 8001466:	81bb      	strh	r3, [r7, #12]
 8001468:	2300      	movs	r3, #0
 800146a:	7b3a      	ldrb	r2, [r7, #12]
 800146c:	f362 0307 	bfi	r3, r2, #0, #8
 8001470:	7b7a      	ldrb	r2, [r7, #13]
 8001472:	f362 230f 	bfi	r3, r2, #8, #8
	}
 8001476:	4618      	mov	r0, r3
 8001478:	3714      	adds	r7, #20
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	cccccccd 	.word	0xcccccccd

08001488 <putMinutes>:

	void putMinutes(uint8_t minutes) {
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	71fb      	strb	r3, [r7, #7]
		if (minutes <= 9) {
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	2b09      	cmp	r3, #9
 8001496:	d812      	bhi.n	80014be <putMinutes+0x36>
			thirdSegment(zero);
 8001498:	4816      	ldr	r0, [pc, #88]	; (80014f4 <putMinutes+0x6c>)
 800149a:	f7ff ff19 	bl	80012d0 <thirdSegment>
			if (minutes == 0) {
 800149e:	79fb      	ldrb	r3, [r7, #7]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d103      	bne.n	80014ac <putMinutes+0x24>
				fourthSegment(zero);
 80014a4:	4813      	ldr	r0, [pc, #76]	; (80014f4 <putMinutes+0x6c>)
 80014a6:	f7ff ff45 	bl	8001334 <fourthSegment>
		} else {
			struct manyNumber temp = destroy(minutes);
			thirdSegment(numberToMatrix(temp.firstNumber));
			fourthSegment(numberToMatrix(temp.secondNumber));
		}
	}
 80014aa:	e01e      	b.n	80014ea <putMinutes+0x62>
				fourthSegment(numberToMatrix(minutes));
 80014ac:	79fb      	ldrb	r3, [r7, #7]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff ff72 	bl	8001398 <numberToMatrix>
 80014b4:	4603      	mov	r3, r0
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff ff3c 	bl	8001334 <fourthSegment>
	}
 80014bc:	e015      	b.n	80014ea <putMinutes+0x62>
			struct manyNumber temp = destroy(minutes);
 80014be:	79fb      	ldrb	r3, [r7, #7]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff ffb7 	bl	8001434 <destroy>
 80014c6:	4603      	mov	r3, r0
 80014c8:	81bb      	strh	r3, [r7, #12]
			thirdSegment(numberToMatrix(temp.firstNumber));
 80014ca:	7b3b      	ldrb	r3, [r7, #12]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff ff63 	bl	8001398 <numberToMatrix>
 80014d2:	4603      	mov	r3, r0
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff fefb 	bl	80012d0 <thirdSegment>
			fourthSegment(numberToMatrix(temp.secondNumber));
 80014da:	7b7b      	ldrb	r3, [r7, #13]
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff ff5b 	bl	8001398 <numberToMatrix>
 80014e2:	4603      	mov	r3, r0
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff ff25 	bl	8001334 <fourthSegment>
	}
 80014ea:	bf00      	nop
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20000000 	.word	0x20000000

080014f8 <putHours>:

	void putHours(uint8_t hours) {
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	71fb      	strb	r3, [r7, #7]
		if (hours <= 9) {
 8001502:	79fb      	ldrb	r3, [r7, #7]
 8001504:	2b09      	cmp	r3, #9
 8001506:	d812      	bhi.n	800152e <putHours+0x36>
			firstSegment(zero);
 8001508:	4816      	ldr	r0, [pc, #88]	; (8001564 <putHours+0x6c>)
 800150a:	f7ff fe23 	bl	8001154 <firstSegment>
			if (hours == 0) {
 800150e:	79fb      	ldrb	r3, [r7, #7]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d103      	bne.n	800151c <putHours+0x24>
				secondSegment(zero);
 8001514:	4813      	ldr	r0, [pc, #76]	; (8001564 <putHours+0x6c>)
 8001516:	f7ff fe4f 	bl	80011b8 <secondSegment>
		} else {
			struct manyNumber temp = destroy(hours);
			firstSegment(numberToMatrix(temp.firstNumber));
			secondSegment(numberToMatrix(temp.secondNumber));
		}
	}
 800151a:	e01e      	b.n	800155a <putHours+0x62>
				secondSegment(numberToMatrix(hours));
 800151c:	79fb      	ldrb	r3, [r7, #7]
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff ff3a 	bl	8001398 <numberToMatrix>
 8001524:	4603      	mov	r3, r0
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff fe46 	bl	80011b8 <secondSegment>
	}
 800152c:	e015      	b.n	800155a <putHours+0x62>
			struct manyNumber temp = destroy(hours);
 800152e:	79fb      	ldrb	r3, [r7, #7]
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff ff7f 	bl	8001434 <destroy>
 8001536:	4603      	mov	r3, r0
 8001538:	81bb      	strh	r3, [r7, #12]
			firstSegment(numberToMatrix(temp.firstNumber));
 800153a:	7b3b      	ldrb	r3, [r7, #12]
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff ff2b 	bl	8001398 <numberToMatrix>
 8001542:	4603      	mov	r3, r0
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff fe05 	bl	8001154 <firstSegment>
			secondSegment(numberToMatrix(temp.secondNumber));
 800154a:	7b7b      	ldrb	r3, [r7, #13]
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff ff23 	bl	8001398 <numberToMatrix>
 8001552:	4603      	mov	r3, r0
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff fe2f 	bl	80011b8 <secondSegment>
	}
 800155a:	bf00      	nop
 800155c:	3710      	adds	r7, #16
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20000000 	.word	0x20000000

08001568 <putMonth>:


	void putMonth(uint8_t month){
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	4603      	mov	r3, r0
 8001570:	71fb      	strb	r3, [r7, #7]
		putHours(month);
 8001572:	79fb      	ldrb	r3, [r7, #7]
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff ffbf 	bl	80014f8 <putHours>
	}
 800157a:	bf00      	nop
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <putDay>:


	void putDay(uint8_t day){
 8001582:	b580      	push	{r7, lr}
 8001584:	b082      	sub	sp, #8
 8001586:	af00      	add	r7, sp, #0
 8001588:	4603      	mov	r3, r0
 800158a:	71fb      	strb	r3, [r7, #7]
		putMinutes(day);
 800158c:	79fb      	ldrb	r3, [r7, #7]
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff ff7a 	bl	8001488 <putMinutes>
	}
 8001594:	bf00      	nop
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <fullDisplayStart>:


	void fullDisplayStart(){
 800159c:	b580      	push	{r7, lr}
 800159e:	b088      	sub	sp, #32
 80015a0:	af00      	add	r7, sp, #0

		RTC_TimeTypeDef time = {0};
 80015a2:	f107 0308 	add.w	r3, r7, #8
 80015a6:	2200      	movs	r2, #0
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	605a      	str	r2, [r3, #4]
 80015ac:	609a      	str	r2, [r3, #8]
 80015ae:	60da      	str	r2, [r3, #12]
 80015b0:	611a      	str	r2, [r3, #16]
		RTC_DateTypeDef date = {0};
 80015b2:	2300      	movs	r3, #0
 80015b4:	607b      	str	r3, [r7, #4]

		HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 80015b6:	f107 0308 	add.w	r3, r7, #8
 80015ba:	2200      	movs	r2, #0
 80015bc:	4619      	mov	r1, r3
 80015be:	480d      	ldr	r0, [pc, #52]	; (80015f4 <fullDisplayStart+0x58>)
 80015c0:	f002 ff18 	bl	80043f4 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 80015c4:	1d3b      	adds	r3, r7, #4
 80015c6:	2200      	movs	r2, #0
 80015c8:	4619      	mov	r1, r3
 80015ca:	480a      	ldr	r0, [pc, #40]	; (80015f4 <fullDisplayStart+0x58>)
 80015cc:	f002 fff5 	bl	80045ba <HAL_RTC_GetDate>

		uint8_t hours = time.Hours;
 80015d0:	7a3b      	ldrb	r3, [r7, #8]
 80015d2:	77fb      	strb	r3, [r7, #31]
		uint8_t minutes = time.Minutes;
 80015d4:	7a7b      	ldrb	r3, [r7, #9]
 80015d6:	77bb      	strb	r3, [r7, #30]

		putHours(hours);
 80015d8:	7ffb      	ldrb	r3, [r7, #31]
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff ff8c 	bl	80014f8 <putHours>
		putMinutes(minutes);
 80015e0:	7fbb      	ldrb	r3, [r7, #30]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff ff50 	bl	8001488 <putMinutes>
		ws2811_update();
 80015e8:	f000 fd28 	bl	800203c <ws2811_update>
	}
 80015ec:	bf00      	nop
 80015ee:	3720      	adds	r7, #32
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	20000714 	.word	0x20000714

080015f8 <dateOnDisplay>:

	void dateOnDisplay(){
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b088      	sub	sp, #32
 80015fc:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef time = { 0 };
 80015fe:	f107 0308 	add.w	r3, r7, #8
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	605a      	str	r2, [r3, #4]
 8001608:	609a      	str	r2, [r3, #8]
 800160a:	60da      	str	r2, [r3, #12]
 800160c:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef date = { 0 };
 800160e:	2300      	movs	r3, #0
 8001610:	607b      	str	r3, [r7, #4]

	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8001612:	f107 0308 	add.w	r3, r7, #8
 8001616:	2200      	movs	r2, #0
 8001618:	4619      	mov	r1, r3
 800161a:	480d      	ldr	r0, [pc, #52]	; (8001650 <dateOnDisplay+0x58>)
 800161c:	f002 feea 	bl	80043f4 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8001620:	1d3b      	adds	r3, r7, #4
 8001622:	2200      	movs	r2, #0
 8001624:	4619      	mov	r1, r3
 8001626:	480a      	ldr	r0, [pc, #40]	; (8001650 <dateOnDisplay+0x58>)
 8001628:	f002 ffc7 	bl	80045ba <HAL_RTC_GetDate>

	uint8_t month = date.Month;
 800162c:	797b      	ldrb	r3, [r7, #5]
 800162e:	77fb      	strb	r3, [r7, #31]
	uint8_t day = date.Date;
 8001630:	79bb      	ldrb	r3, [r7, #6]
 8001632:	77bb      	strb	r3, [r7, #30]

	putMonth(month);
 8001634:	7ffb      	ldrb	r3, [r7, #31]
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff ff96 	bl	8001568 <putMonth>
	putDay(day);
 800163c:	7fbb      	ldrb	r3, [r7, #30]
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff ff9f 	bl	8001582 <putDay>
	ws2811_update();
 8001644:	f000 fcfa 	bl	800203c <ws2811_update>
	}
 8001648:	bf00      	nop
 800164a:	3720      	adds	r7, #32
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20000714 	.word	0x20000714

08001654 <setMinutes>:

	void setMinutes(uint8_t minute){
 8001654:	b580      	push	{r7, lr}
 8001656:	b088      	sub	sp, #32
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	71fb      	strb	r3, [r7, #7]
		RTC_TimeTypeDef time = {0};
 800165e:	f107 030c 	add.w	r3, r7, #12
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	605a      	str	r2, [r3, #4]
 8001668:	609a      	str	r2, [r3, #8]
 800166a:	60da      	str	r2, [r3, #12]
 800166c:	611a      	str	r2, [r3, #16]
		RTC_DateTypeDef date = {0};
 800166e:	2300      	movs	r3, #0
 8001670:	60bb      	str	r3, [r7, #8]

		HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8001672:	f107 030c 	add.w	r3, r7, #12
 8001676:	2200      	movs	r2, #0
 8001678:	4619      	mov	r1, r3
 800167a:	480c      	ldr	r0, [pc, #48]	; (80016ac <setMinutes+0x58>)
 800167c:	f002 feba 	bl	80043f4 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8001680:	f107 0308 	add.w	r3, r7, #8
 8001684:	2200      	movs	r2, #0
 8001686:	4619      	mov	r1, r3
 8001688:	4808      	ldr	r0, [pc, #32]	; (80016ac <setMinutes+0x58>)
 800168a:	f002 ff96 	bl	80045ba <HAL_RTC_GetDate>

		time.Minutes=minute;
 800168e:	79fb      	ldrb	r3, [r7, #7]
 8001690:	737b      	strb	r3, [r7, #13]
		time.Seconds=0;
 8001692:	2300      	movs	r3, #0
 8001694:	73bb      	strb	r3, [r7, #14]

		HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8001696:	f107 030c 	add.w	r3, r7, #12
 800169a:	2200      	movs	r2, #0
 800169c:	4619      	mov	r1, r3
 800169e:	4803      	ldr	r0, [pc, #12]	; (80016ac <setMinutes+0x58>)
 80016a0:	f002 fe0b 	bl	80042ba <HAL_RTC_SetTime>
	}
 80016a4:	bf00      	nop
 80016a6:	3720      	adds	r7, #32
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	20000714 	.word	0x20000714

080016b0 <setHours>:

	void setHours(uint8_t hours){
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b088      	sub	sp, #32
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	71fb      	strb	r3, [r7, #7]
			RTC_TimeTypeDef time = {0};
 80016ba:	f107 030c 	add.w	r3, r7, #12
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	605a      	str	r2, [r3, #4]
 80016c4:	609a      	str	r2, [r3, #8]
 80016c6:	60da      	str	r2, [r3, #12]
 80016c8:	611a      	str	r2, [r3, #16]
			RTC_DateTypeDef date = {0};
 80016ca:	2300      	movs	r3, #0
 80016cc:	60bb      	str	r3, [r7, #8]

			HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 80016ce:	f107 030c 	add.w	r3, r7, #12
 80016d2:	2200      	movs	r2, #0
 80016d4:	4619      	mov	r1, r3
 80016d6:	480c      	ldr	r0, [pc, #48]	; (8001708 <setHours+0x58>)
 80016d8:	f002 fe8c 	bl	80043f4 <HAL_RTC_GetTime>
			HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 80016dc:	f107 0308 	add.w	r3, r7, #8
 80016e0:	2200      	movs	r2, #0
 80016e2:	4619      	mov	r1, r3
 80016e4:	4808      	ldr	r0, [pc, #32]	; (8001708 <setHours+0x58>)
 80016e6:	f002 ff68 	bl	80045ba <HAL_RTC_GetDate>

			time.Hours=hours;
 80016ea:	79fb      	ldrb	r3, [r7, #7]
 80016ec:	733b      	strb	r3, [r7, #12]
			time.Seconds=0;
 80016ee:	2300      	movs	r3, #0
 80016f0:	73bb      	strb	r3, [r7, #14]

			HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN);
 80016f2:	f107 030c 	add.w	r3, r7, #12
 80016f6:	2200      	movs	r2, #0
 80016f8:	4619      	mov	r1, r3
 80016fa:	4803      	ldr	r0, [pc, #12]	; (8001708 <setHours+0x58>)
 80016fc:	f002 fddd 	bl	80042ba <HAL_RTC_SetTime>
		}
 8001700:	bf00      	nop
 8001702:	3720      	adds	r7, #32
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	20000714 	.word	0x20000714

0800170c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001712:	4b0f      	ldr	r3, [pc, #60]	; (8001750 <HAL_MspInit+0x44>)
 8001714:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001716:	4a0e      	ldr	r2, [pc, #56]	; (8001750 <HAL_MspInit+0x44>)
 8001718:	f043 0301 	orr.w	r3, r3, #1
 800171c:	6613      	str	r3, [r2, #96]	; 0x60
 800171e:	4b0c      	ldr	r3, [pc, #48]	; (8001750 <HAL_MspInit+0x44>)
 8001720:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	607b      	str	r3, [r7, #4]
 8001728:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800172a:	4b09      	ldr	r3, [pc, #36]	; (8001750 <HAL_MspInit+0x44>)
 800172c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800172e:	4a08      	ldr	r2, [pc, #32]	; (8001750 <HAL_MspInit+0x44>)
 8001730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001734:	6593      	str	r3, [r2, #88]	; 0x58
 8001736:	4b06      	ldr	r3, [pc, #24]	; (8001750 <HAL_MspInit+0x44>)
 8001738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800173a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800173e:	603b      	str	r3, [r7, #0]
 8001740:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001742:	bf00      	nop
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	40021000 	.word	0x40021000

08001754 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001758:	e7fe      	b.n	8001758 <NMI_Handler+0x4>

0800175a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800175a:	b480      	push	{r7}
 800175c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800175e:	e7fe      	b.n	800175e <HardFault_Handler+0x4>

08001760 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001764:	e7fe      	b.n	8001764 <MemManage_Handler+0x4>

08001766 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800176a:	e7fe      	b.n	800176a <BusFault_Handler+0x4>

0800176c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001770:	e7fe      	b.n	8001770 <UsageFault_Handler+0x4>

08001772 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001772:	b480      	push	{r7}
 8001774:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr

0800178e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800178e:	b480      	push	{r7}
 8001790:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017a0:	f000 fd10 	bl	80021c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017a4:	bf00      	nop
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 80017ac:	4802      	ldr	r0, [pc, #8]	; (80017b8 <DMA1_Channel1_IRQHandler+0x10>)
 80017ae:	f000 ff53 	bl	8002658 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	20000824 	.word	0x20000824

080017bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017c0:	4802      	ldr	r0, [pc, #8]	; (80017cc <TIM2_IRQHandler+0x10>)
 80017c2:	f003 fef3 	bl	80055ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	200007d8 	.word	0x200007d8

080017d0 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80017d4:	4802      	ldr	r0, [pc, #8]	; (80017e0 <RTC_Alarm_IRQHandler+0x10>)
 80017d6:	f003 f879 	bl	80048cc <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	20000714 	.word	0x20000714

080017e4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80017e8:	4802      	ldr	r0, [pc, #8]	; (80017f4 <TIM6_DAC_IRQHandler+0x10>)
 80017ea:	f003 fedf 	bl	80055ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	2000078c 	.word	0x2000078c

080017f8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001804:	2300      	movs	r3, #0
 8001806:	617b      	str	r3, [r7, #20]
 8001808:	e00a      	b.n	8001820 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800180a:	f3af 8000 	nop.w
 800180e:	4601      	mov	r1, r0
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	1c5a      	adds	r2, r3, #1
 8001814:	60ba      	str	r2, [r7, #8]
 8001816:	b2ca      	uxtb	r2, r1
 8001818:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	3301      	adds	r3, #1
 800181e:	617b      	str	r3, [r7, #20]
 8001820:	697a      	ldr	r2, [r7, #20]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	429a      	cmp	r2, r3
 8001826:	dbf0      	blt.n	800180a <_read+0x12>
	}

return len;
 8001828:	687b      	ldr	r3, [r7, #4]
}
 800182a:	4618      	mov	r0, r3
 800182c:	3718      	adds	r7, #24
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b086      	sub	sp, #24
 8001836:	af00      	add	r7, sp, #0
 8001838:	60f8      	str	r0, [r7, #12]
 800183a:	60b9      	str	r1, [r7, #8]
 800183c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800183e:	2300      	movs	r3, #0
 8001840:	617b      	str	r3, [r7, #20]
 8001842:	e009      	b.n	8001858 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	1c5a      	adds	r2, r3, #1
 8001848:	60ba      	str	r2, [r7, #8]
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	4618      	mov	r0, r3
 800184e:	f7fe ff7d 	bl	800074c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	3301      	adds	r3, #1
 8001856:	617b      	str	r3, [r7, #20]
 8001858:	697a      	ldr	r2, [r7, #20]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	429a      	cmp	r2, r3
 800185e:	dbf1      	blt.n	8001844 <_write+0x12>
	}
	return len;
 8001860:	687b      	ldr	r3, [r7, #4]
}
 8001862:	4618      	mov	r0, r3
 8001864:	3718      	adds	r7, #24
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <_close>:

int _close(int file)
{
 800186a:	b480      	push	{r7}
 800186c:	b083      	sub	sp, #12
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
	return -1;
 8001872:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001876:	4618      	mov	r0, r3
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr

08001882 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001882:	b480      	push	{r7}
 8001884:	b083      	sub	sp, #12
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
 800188a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001892:	605a      	str	r2, [r3, #4]
	return 0;
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr

080018a2 <_isatty>:

int _isatty(int file)
{
 80018a2:	b480      	push	{r7}
 80018a4:	b083      	sub	sp, #12
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
	return 1;
 80018aa:	2301      	movs	r3, #1
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
	return 0;
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3714      	adds	r7, #20
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
	...

080018d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018dc:	4a14      	ldr	r2, [pc, #80]	; (8001930 <_sbrk+0x5c>)
 80018de:	4b15      	ldr	r3, [pc, #84]	; (8001934 <_sbrk+0x60>)
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018e8:	4b13      	ldr	r3, [pc, #76]	; (8001938 <_sbrk+0x64>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d102      	bne.n	80018f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018f0:	4b11      	ldr	r3, [pc, #68]	; (8001938 <_sbrk+0x64>)
 80018f2:	4a12      	ldr	r2, [pc, #72]	; (800193c <_sbrk+0x68>)
 80018f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018f6:	4b10      	ldr	r3, [pc, #64]	; (8001938 <_sbrk+0x64>)
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4413      	add	r3, r2
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	429a      	cmp	r2, r3
 8001902:	d207      	bcs.n	8001914 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001904:	f005 fed0 	bl	80076a8 <__errno>
 8001908:	4603      	mov	r3, r0
 800190a:	220c      	movs	r2, #12
 800190c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800190e:	f04f 33ff 	mov.w	r3, #4294967295
 8001912:	e009      	b.n	8001928 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001914:	4b08      	ldr	r3, [pc, #32]	; (8001938 <_sbrk+0x64>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800191a:	4b07      	ldr	r3, [pc, #28]	; (8001938 <_sbrk+0x64>)
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4413      	add	r3, r2
 8001922:	4a05      	ldr	r2, [pc, #20]	; (8001938 <_sbrk+0x64>)
 8001924:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001926:	68fb      	ldr	r3, [r7, #12]
}
 8001928:	4618      	mov	r0, r3
 800192a:	3718      	adds	r7, #24
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	20018000 	.word	0x20018000
 8001934:	00000400 	.word	0x00000400
 8001938:	20000130 	.word	0x20000130
 800193c:	20000908 	.word	0x20000908

08001940 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001944:	4b15      	ldr	r3, [pc, #84]	; (800199c <SystemInit+0x5c>)
 8001946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800194a:	4a14      	ldr	r2, [pc, #80]	; (800199c <SystemInit+0x5c>)
 800194c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001950:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001954:	4b12      	ldr	r3, [pc, #72]	; (80019a0 <SystemInit+0x60>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a11      	ldr	r2, [pc, #68]	; (80019a0 <SystemInit+0x60>)
 800195a:	f043 0301 	orr.w	r3, r3, #1
 800195e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001960:	4b0f      	ldr	r3, [pc, #60]	; (80019a0 <SystemInit+0x60>)
 8001962:	2200      	movs	r2, #0
 8001964:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001966:	4b0e      	ldr	r3, [pc, #56]	; (80019a0 <SystemInit+0x60>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a0d      	ldr	r2, [pc, #52]	; (80019a0 <SystemInit+0x60>)
 800196c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001970:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001974:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001976:	4b0a      	ldr	r3, [pc, #40]	; (80019a0 <SystemInit+0x60>)
 8001978:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800197c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800197e:	4b08      	ldr	r3, [pc, #32]	; (80019a0 <SystemInit+0x60>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a07      	ldr	r2, [pc, #28]	; (80019a0 <SystemInit+0x60>)
 8001984:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001988:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800198a:	4b05      	ldr	r3, [pc, #20]	; (80019a0 <SystemInit+0x60>)
 800198c:	2200      	movs	r2, #0
 800198e:	619a      	str	r2, [r3, #24]
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	e000ed00 	.word	0xe000ed00
 80019a0:	40021000 	.word	0x40021000

080019a4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
DMA_HandleTypeDef hdma_tim4_ch1;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b090      	sub	sp, #64	; 0x40
 80019a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019ae:	2200      	movs	r2, #0
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	605a      	str	r2, [r3, #4]
 80019b4:	609a      	str	r2, [r3, #8]
 80019b6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80019b8:	f107 031c 	add.w	r3, r7, #28
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	605a      	str	r2, [r3, #4]
 80019c2:	609a      	str	r2, [r3, #8]
 80019c4:	60da      	str	r2, [r3, #12]
 80019c6:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019c8:	f107 0310 	add.w	r3, r7, #16
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	605a      	str	r2, [r3, #4]
 80019d2:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80019d4:	463b      	mov	r3, r7
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	605a      	str	r2, [r3, #4]
 80019dc:	609a      	str	r2, [r3, #8]
 80019de:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019e0:	4b35      	ldr	r3, [pc, #212]	; (8001ab8 <MX_TIM2_Init+0x114>)
 80019e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 80019e8:	4b33      	ldr	r3, [pc, #204]	; (8001ab8 <MX_TIM2_Init+0x114>)
 80019ea:	224f      	movs	r2, #79	; 0x4f
 80019ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ee:	4b32      	ldr	r3, [pc, #200]	; (8001ab8 <MX_TIM2_Init+0x114>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80019f4:	4b30      	ldr	r3, [pc, #192]	; (8001ab8 <MX_TIM2_Init+0x114>)
 80019f6:	f04f 32ff 	mov.w	r2, #4294967295
 80019fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019fc:	4b2e      	ldr	r3, [pc, #184]	; (8001ab8 <MX_TIM2_Init+0x114>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a02:	4b2d      	ldr	r3, [pc, #180]	; (8001ab8 <MX_TIM2_Init+0x114>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a08:	482b      	ldr	r0, [pc, #172]	; (8001ab8 <MX_TIM2_Init+0x114>)
 8001a0a:	f003 f881 	bl	8004b10 <HAL_TIM_Base_Init>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001a14:	f7ff f81a 	bl	8000a4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a1c:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a1e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a22:	4619      	mov	r1, r3
 8001a24:	4824      	ldr	r0, [pc, #144]	; (8001ab8 <MX_TIM2_Init+0x114>)
 8001a26:	f004 f885 	bl	8005b34 <HAL_TIM_ConfigClockSource>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001a30:	f7ff f80c 	bl	8000a4c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001a34:	4820      	ldr	r0, [pc, #128]	; (8001ab8 <MX_TIM2_Init+0x114>)
 8001a36:	f003 fc15 	bl	8005264 <HAL_TIM_IC_Init>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001a40:	f7ff f804 	bl	8000a4c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001a44:	2304      	movs	r3, #4
 8001a46:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 8001a48:	2340      	movs	r3, #64	; 0x40
 8001a4a:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8001a50:	2300      	movs	r3, #0
 8001a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001a54:	f107 031c 	add.w	r3, r7, #28
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4817      	ldr	r0, [pc, #92]	; (8001ab8 <MX_TIM2_Init+0x114>)
 8001a5c:	f004 f930 	bl	8005cc0 <HAL_TIM_SlaveConfigSynchro>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 8001a66:	f7fe fff1 	bl	8000a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a72:	f107 0310 	add.w	r3, r7, #16
 8001a76:	4619      	mov	r1, r3
 8001a78:	480f      	ldr	r0, [pc, #60]	; (8001ab8 <MX_TIM2_Init+0x114>)
 8001a7a:	f005 f89b 	bl	8006bb4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <MX_TIM2_Init+0xe4>
  {
    Error_Handler();
 8001a84:	f7fe ffe2 	bl	8000a4c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001a90:	2300      	movs	r3, #0
 8001a92:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001a94:	2300      	movs	r3, #0
 8001a96:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001a98:	463b      	mov	r3, r7
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4806      	ldr	r0, [pc, #24]	; (8001ab8 <MX_TIM2_Init+0x114>)
 8001aa0:	f003 fea3 	bl	80057ea <HAL_TIM_IC_ConfigChannel>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <MX_TIM2_Init+0x10a>
  {
    Error_Handler();
 8001aaa:	f7fe ffcf 	bl	8000a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001aae:	bf00      	nop
 8001ab0:	3740      	adds	r7, #64	; 0x40
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	200007d8 	.word	0x200007d8

08001abc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b08e      	sub	sp, #56	; 0x38
 8001ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ac2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	605a      	str	r2, [r3, #4]
 8001acc:	609a      	str	r2, [r3, #8]
 8001ace:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ad0:	f107 031c 	add.w	r3, r7, #28
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	605a      	str	r2, [r3, #4]
 8001ada:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001adc:	463b      	mov	r3, r7
 8001ade:	2200      	movs	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	605a      	str	r2, [r3, #4]
 8001ae4:	609a      	str	r2, [r3, #8]
 8001ae6:	60da      	str	r2, [r3, #12]
 8001ae8:	611a      	str	r2, [r3, #16]
 8001aea:	615a      	str	r2, [r3, #20]
 8001aec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001aee:	4b2c      	ldr	r3, [pc, #176]	; (8001ba0 <MX_TIM4_Init+0xe4>)
 8001af0:	4a2c      	ldr	r2, [pc, #176]	; (8001ba4 <MX_TIM4_Init+0xe8>)
 8001af2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001af4:	4b2a      	ldr	r3, [pc, #168]	; (8001ba0 <MX_TIM4_Init+0xe4>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001afa:	4b29      	ldr	r3, [pc, #164]	; (8001ba0 <MX_TIM4_Init+0xe4>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 199;
 8001b00:	4b27      	ldr	r3, [pc, #156]	; (8001ba0 <MX_TIM4_Init+0xe4>)
 8001b02:	22c7      	movs	r2, #199	; 0xc7
 8001b04:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b06:	4b26      	ldr	r3, [pc, #152]	; (8001ba0 <MX_TIM4_Init+0xe4>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b0c:	4b24      	ldr	r3, [pc, #144]	; (8001ba0 <MX_TIM4_Init+0xe4>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001b12:	4823      	ldr	r0, [pc, #140]	; (8001ba0 <MX_TIM4_Init+0xe4>)
 8001b14:	f002 fffc 	bl	8004b10 <HAL_TIM_Base_Init>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001b1e:	f7fe ff95 	bl	8000a4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b26:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001b28:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	481c      	ldr	r0, [pc, #112]	; (8001ba0 <MX_TIM4_Init+0xe4>)
 8001b30:	f004 f800 	bl	8005b34 <HAL_TIM_ConfigClockSource>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001b3a:	f7fe ff87 	bl	8000a4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001b3e:	4818      	ldr	r0, [pc, #96]	; (8001ba0 <MX_TIM4_Init+0xe4>)
 8001b40:	f003 f916 	bl	8004d70 <HAL_TIM_PWM_Init>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001b4a:	f7fe ff7f 	bl	8000a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b52:	2300      	movs	r3, #0
 8001b54:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b56:	f107 031c 	add.w	r3, r7, #28
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4810      	ldr	r0, [pc, #64]	; (8001ba0 <MX_TIM4_Init+0xe4>)
 8001b5e:	f005 f829 	bl	8006bb4 <HAL_TIMEx_MasterConfigSynchronization>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001b68:	f7fe ff70 	bl	8000a4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b6c:	2360      	movs	r3, #96	; 0x60
 8001b6e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001b70:	2300      	movs	r3, #0
 8001b72:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b74:	2300      	movs	r3, #0
 8001b76:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b7c:	463b      	mov	r3, r7
 8001b7e:	2200      	movs	r2, #0
 8001b80:	4619      	mov	r1, r3
 8001b82:	4807      	ldr	r0, [pc, #28]	; (8001ba0 <MX_TIM4_Init+0xe4>)
 8001b84:	f003 fec6 	bl	8005914 <HAL_TIM_PWM_ConfigChannel>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001b8e:	f7fe ff5d 	bl	8000a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001b92:	4803      	ldr	r0, [pc, #12]	; (8001ba0 <MX_TIM4_Init+0xe4>)
 8001b94:	f000 f8d6 	bl	8001d44 <HAL_TIM_MspPostInit>

}
 8001b98:	bf00      	nop
 8001b9a:	3738      	adds	r7, #56	; 0x38
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	20000740 	.word	0x20000740
 8001ba4:	40000800 	.word	0x40000800

08001ba8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bae:	1d3b      	adds	r3, r7, #4
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001bb8:	4b15      	ldr	r3, [pc, #84]	; (8001c10 <MX_TIM6_Init+0x68>)
 8001bba:	4a16      	ldr	r2, [pc, #88]	; (8001c14 <MX_TIM6_Init+0x6c>)
 8001bbc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 8001bbe:	4b14      	ldr	r3, [pc, #80]	; (8001c10 <MX_TIM6_Init+0x68>)
 8001bc0:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001bc4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bc6:	4b12      	ldr	r3, [pc, #72]	; (8001c10 <MX_TIM6_Init+0x68>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4999;
 8001bcc:	4b10      	ldr	r3, [pc, #64]	; (8001c10 <MX_TIM6_Init+0x68>)
 8001bce:	f241 3287 	movw	r2, #4999	; 0x1387
 8001bd2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bd4:	4b0e      	ldr	r3, [pc, #56]	; (8001c10 <MX_TIM6_Init+0x68>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001bda:	480d      	ldr	r0, [pc, #52]	; (8001c10 <MX_TIM6_Init+0x68>)
 8001bdc:	f002 ff98 	bl	8004b10 <HAL_TIM_Base_Init>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001be6:	f7fe ff31 	bl	8000a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bea:	2300      	movs	r3, #0
 8001bec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001bf2:	1d3b      	adds	r3, r7, #4
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4806      	ldr	r0, [pc, #24]	; (8001c10 <MX_TIM6_Init+0x68>)
 8001bf8:	f004 ffdc 	bl	8006bb4 <HAL_TIMEx_MasterConfigSynchronization>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001c02:	f7fe ff23 	bl	8000a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001c06:	bf00      	nop
 8001c08:	3710      	adds	r7, #16
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	2000078c 	.word	0x2000078c
 8001c14:	40001000 	.word	0x40001000

08001c18 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b08c      	sub	sp, #48	; 0x30
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c20:	f107 031c 	add.w	r3, r7, #28
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
 8001c2a:	609a      	str	r2, [r3, #8]
 8001c2c:	60da      	str	r2, [r3, #12]
 8001c2e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c38:	d129      	bne.n	8001c8e <HAL_TIM_Base_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c3a:	4b3d      	ldr	r3, [pc, #244]	; (8001d30 <HAL_TIM_Base_MspInit+0x118>)
 8001c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c3e:	4a3c      	ldr	r2, [pc, #240]	; (8001d30 <HAL_TIM_Base_MspInit+0x118>)
 8001c40:	f043 0301 	orr.w	r3, r3, #1
 8001c44:	6593      	str	r3, [r2, #88]	; 0x58
 8001c46:	4b3a      	ldr	r3, [pc, #232]	; (8001d30 <HAL_TIM_Base_MspInit+0x118>)
 8001c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	61bb      	str	r3, [r7, #24]
 8001c50:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c52:	4b37      	ldr	r3, [pc, #220]	; (8001d30 <HAL_TIM_Base_MspInit+0x118>)
 8001c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c56:	4a36      	ldr	r2, [pc, #216]	; (8001d30 <HAL_TIM_Base_MspInit+0x118>)
 8001c58:	f043 0301 	orr.w	r3, r3, #1
 8001c5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c5e:	4b34      	ldr	r3, [pc, #208]	; (8001d30 <HAL_TIM_Base_MspInit+0x118>)
 8001c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	617b      	str	r3, [r7, #20]
 8001c68:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6e:	2302      	movs	r3, #2
 8001c70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c72:	2300      	movs	r3, #0
 8001c74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c76:	2300      	movs	r3, #0
 8001c78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c7e:	f107 031c 	add.w	r3, r7, #28
 8001c82:	4619      	mov	r1, r3
 8001c84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c88:	f000 fdc6 	bl	8002818 <HAL_GPIO_Init>
    __HAL_RCC_TIM6_CLK_ENABLE();
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001c8c:	e04c      	b.n	8001d28 <HAL_TIM_Base_MspInit+0x110>
  else if(tim_baseHandle->Instance==TIM4)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a28      	ldr	r2, [pc, #160]	; (8001d34 <HAL_TIM_Base_MspInit+0x11c>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d136      	bne.n	8001d06 <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c98:	4b25      	ldr	r3, [pc, #148]	; (8001d30 <HAL_TIM_Base_MspInit+0x118>)
 8001c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c9c:	4a24      	ldr	r2, [pc, #144]	; (8001d30 <HAL_TIM_Base_MspInit+0x118>)
 8001c9e:	f043 0304 	orr.w	r3, r3, #4
 8001ca2:	6593      	str	r3, [r2, #88]	; 0x58
 8001ca4:	4b22      	ldr	r3, [pc, #136]	; (8001d30 <HAL_TIM_Base_MspInit+0x118>)
 8001ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca8:	f003 0304 	and.w	r3, r3, #4
 8001cac:	613b      	str	r3, [r7, #16]
 8001cae:	693b      	ldr	r3, [r7, #16]
    hdma_tim4_ch1.Instance = DMA1_Channel1;
 8001cb0:	4b21      	ldr	r3, [pc, #132]	; (8001d38 <HAL_TIM_Base_MspInit+0x120>)
 8001cb2:	4a22      	ldr	r2, [pc, #136]	; (8001d3c <HAL_TIM_Base_MspInit+0x124>)
 8001cb4:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Request = DMA_REQUEST_6;
 8001cb6:	4b20      	ldr	r3, [pc, #128]	; (8001d38 <HAL_TIM_Base_MspInit+0x120>)
 8001cb8:	2206      	movs	r2, #6
 8001cba:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001cbc:	4b1e      	ldr	r3, [pc, #120]	; (8001d38 <HAL_TIM_Base_MspInit+0x120>)
 8001cbe:	2210      	movs	r2, #16
 8001cc0:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cc2:	4b1d      	ldr	r3, [pc, #116]	; (8001d38 <HAL_TIM_Base_MspInit+0x120>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001cc8:	4b1b      	ldr	r3, [pc, #108]	; (8001d38 <HAL_TIM_Base_MspInit+0x120>)
 8001cca:	2280      	movs	r2, #128	; 0x80
 8001ccc:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001cce:	4b1a      	ldr	r3, [pc, #104]	; (8001d38 <HAL_TIM_Base_MspInit+0x120>)
 8001cd0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cd4:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cd6:	4b18      	ldr	r3, [pc, #96]	; (8001d38 <HAL_TIM_Base_MspInit+0x120>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_NORMAL;
 8001cdc:	4b16      	ldr	r3, [pc, #88]	; (8001d38 <HAL_TIM_Base_MspInit+0x120>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001ce2:	4b15      	ldr	r3, [pc, #84]	; (8001d38 <HAL_TIM_Base_MspInit+0x120>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 8001ce8:	4813      	ldr	r0, [pc, #76]	; (8001d38 <HAL_TIM_Base_MspInit+0x120>)
 8001cea:	f000 fb9d 	bl	8002428 <HAL_DMA_Init>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <HAL_TIM_Base_MspInit+0xe0>
      Error_Handler();
 8001cf4:	f7fe feaa 	bl	8000a4c <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4a0f      	ldr	r2, [pc, #60]	; (8001d38 <HAL_TIM_Base_MspInit+0x120>)
 8001cfc:	625a      	str	r2, [r3, #36]	; 0x24
 8001cfe:	4a0e      	ldr	r2, [pc, #56]	; (8001d38 <HAL_TIM_Base_MspInit+0x120>)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001d04:	e010      	b.n	8001d28 <HAL_TIM_Base_MspInit+0x110>
  else if(tim_baseHandle->Instance==TIM6)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a0d      	ldr	r2, [pc, #52]	; (8001d40 <HAL_TIM_Base_MspInit+0x128>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d10b      	bne.n	8001d28 <HAL_TIM_Base_MspInit+0x110>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001d10:	4b07      	ldr	r3, [pc, #28]	; (8001d30 <HAL_TIM_Base_MspInit+0x118>)
 8001d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d14:	4a06      	ldr	r2, [pc, #24]	; (8001d30 <HAL_TIM_Base_MspInit+0x118>)
 8001d16:	f043 0310 	orr.w	r3, r3, #16
 8001d1a:	6593      	str	r3, [r2, #88]	; 0x58
 8001d1c:	4b04      	ldr	r3, [pc, #16]	; (8001d30 <HAL_TIM_Base_MspInit+0x118>)
 8001d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d20:	f003 0310 	and.w	r3, r3, #16
 8001d24:	60fb      	str	r3, [r7, #12]
 8001d26:	68fb      	ldr	r3, [r7, #12]
}
 8001d28:	bf00      	nop
 8001d2a:	3730      	adds	r7, #48	; 0x30
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40021000 	.word	0x40021000
 8001d34:	40000800 	.word	0x40000800
 8001d38:	20000824 	.word	0x20000824
 8001d3c:	40020008 	.word	0x40020008
 8001d40:	40001000 	.word	0x40001000

08001d44 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b088      	sub	sp, #32
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d4c:	f107 030c 	add.w	r3, r7, #12
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	605a      	str	r2, [r3, #4]
 8001d56:	609a      	str	r2, [r3, #8]
 8001d58:	60da      	str	r2, [r3, #12]
 8001d5a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a11      	ldr	r2, [pc, #68]	; (8001da8 <HAL_TIM_MspPostInit+0x64>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d11b      	bne.n	8001d9e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d66:	4b11      	ldr	r3, [pc, #68]	; (8001dac <HAL_TIM_MspPostInit+0x68>)
 8001d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d6a:	4a10      	ldr	r2, [pc, #64]	; (8001dac <HAL_TIM_MspPostInit+0x68>)
 8001d6c:	f043 0302 	orr.w	r3, r3, #2
 8001d70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d72:	4b0e      	ldr	r3, [pc, #56]	; (8001dac <HAL_TIM_MspPostInit+0x68>)
 8001d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	60bb      	str	r3, [r7, #8]
 8001d7c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d7e:	2340      	movs	r3, #64	; 0x40
 8001d80:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d82:	2302      	movs	r3, #2
 8001d84:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d86:	2300      	movs	r3, #0
 8001d88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001d8e:	2302      	movs	r3, #2
 8001d90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d92:	f107 030c 	add.w	r3, r7, #12
 8001d96:	4619      	mov	r1, r3
 8001d98:	4805      	ldr	r0, [pc, #20]	; (8001db0 <HAL_TIM_MspPostInit+0x6c>)
 8001d9a:	f000 fd3d 	bl	8002818 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001d9e:	bf00      	nop
 8001da0:	3720      	adds	r7, #32
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	40000800 	.word	0x40000800
 8001dac:	40021000 	.word	0x40021000
 8001db0:	48000400 	.word	0x48000400

08001db4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001db8:	4b14      	ldr	r3, [pc, #80]	; (8001e0c <MX_USART2_UART_Init+0x58>)
 8001dba:	4a15      	ldr	r2, [pc, #84]	; (8001e10 <MX_USART2_UART_Init+0x5c>)
 8001dbc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001dbe:	4b13      	ldr	r3, [pc, #76]	; (8001e0c <MX_USART2_UART_Init+0x58>)
 8001dc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001dc4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001dc6:	4b11      	ldr	r3, [pc, #68]	; (8001e0c <MX_USART2_UART_Init+0x58>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001dcc:	4b0f      	ldr	r3, [pc, #60]	; (8001e0c <MX_USART2_UART_Init+0x58>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001dd2:	4b0e      	ldr	r3, [pc, #56]	; (8001e0c <MX_USART2_UART_Init+0x58>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001dd8:	4b0c      	ldr	r3, [pc, #48]	; (8001e0c <MX_USART2_UART_Init+0x58>)
 8001dda:	220c      	movs	r2, #12
 8001ddc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dde:	4b0b      	ldr	r3, [pc, #44]	; (8001e0c <MX_USART2_UART_Init+0x58>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001de4:	4b09      	ldr	r3, [pc, #36]	; (8001e0c <MX_USART2_UART_Init+0x58>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001dea:	4b08      	ldr	r3, [pc, #32]	; (8001e0c <MX_USART2_UART_Init+0x58>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001df0:	4b06      	ldr	r3, [pc, #24]	; (8001e0c <MX_USART2_UART_Init+0x58>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001df6:	4805      	ldr	r0, [pc, #20]	; (8001e0c <MX_USART2_UART_Init+0x58>)
 8001df8:	f004 ff82 	bl	8006d00 <HAL_UART_Init>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001e02:	f7fe fe23 	bl	8000a4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e06:	bf00      	nop
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	2000086c 	.word	0x2000086c
 8001e10:	40004400 	.word	0x40004400

08001e14 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b0ac      	sub	sp, #176	; 0xb0
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e1c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	605a      	str	r2, [r3, #4]
 8001e26:	609a      	str	r2, [r3, #8]
 8001e28:	60da      	str	r2, [r3, #12]
 8001e2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e2c:	f107 0314 	add.w	r3, r7, #20
 8001e30:	2288      	movs	r2, #136	; 0x88
 8001e32:	2100      	movs	r1, #0
 8001e34:	4618      	mov	r0, r3
 8001e36:	f005 fc61 	bl	80076fc <memset>
  if(uartHandle->Instance==USART2)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a21      	ldr	r2, [pc, #132]	; (8001ec4 <HAL_UART_MspInit+0xb0>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d13b      	bne.n	8001ebc <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001e44:	2302      	movs	r3, #2
 8001e46:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e4c:	f107 0314 	add.w	r3, r7, #20
 8001e50:	4618      	mov	r0, r3
 8001e52:	f001 fceb 	bl	800382c <HAL_RCCEx_PeriphCLKConfig>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001e5c:	f7fe fdf6 	bl	8000a4c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e60:	4b19      	ldr	r3, [pc, #100]	; (8001ec8 <HAL_UART_MspInit+0xb4>)
 8001e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e64:	4a18      	ldr	r2, [pc, #96]	; (8001ec8 <HAL_UART_MspInit+0xb4>)
 8001e66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e6a:	6593      	str	r3, [r2, #88]	; 0x58
 8001e6c:	4b16      	ldr	r3, [pc, #88]	; (8001ec8 <HAL_UART_MspInit+0xb4>)
 8001e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e74:	613b      	str	r3, [r7, #16]
 8001e76:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e78:	4b13      	ldr	r3, [pc, #76]	; (8001ec8 <HAL_UART_MspInit+0xb4>)
 8001e7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e7c:	4a12      	ldr	r2, [pc, #72]	; (8001ec8 <HAL_UART_MspInit+0xb4>)
 8001e7e:	f043 0301 	orr.w	r3, r3, #1
 8001e82:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e84:	4b10      	ldr	r3, [pc, #64]	; (8001ec8 <HAL_UART_MspInit+0xb4>)
 8001e86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e88:	f003 0301 	and.w	r3, r3, #1
 8001e8c:	60fb      	str	r3, [r7, #12]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e90:	230c      	movs	r3, #12
 8001e92:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e96:	2302      	movs	r3, #2
 8001e98:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ea8:	2307      	movs	r3, #7
 8001eaa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eae:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eb8:	f000 fcae 	bl	8002818 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001ebc:	bf00      	nop
 8001ebe:	37b0      	adds	r7, #176	; 0xb0
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	40004400 	.word	0x40004400
 8001ec8:	40021000 	.word	0x40021000

08001ecc <set_byte>:

static uint8_t led_buffer[RESET_LEN+24*LED_N+1];

// Konwertowanie 8 bitowej liczby na 8 bajtow;

static void set_byte(uint32_t pos, uint8_t value){
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	70fb      	strb	r3, [r7, #3]
	int i;
	for(i=0; i<8;i++){
 8001ed8:	2300      	movs	r3, #0
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	e016      	b.n	8001f0c <set_byte+0x40>
		if(value & 0x80){
 8001ede:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	da06      	bge.n	8001ef4 <set_byte+0x28>
			led_buffer[pos+i]=BIT_1_TIME;
 8001ee6:	68fa      	ldr	r2, [r7, #12]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4413      	add	r3, r2
 8001eec:	4a0c      	ldr	r2, [pc, #48]	; (8001f20 <set_byte+0x54>)
 8001eee:	2140      	movs	r1, #64	; 0x40
 8001ef0:	54d1      	strb	r1, [r2, r3]
 8001ef2:	e005      	b.n	8001f00 <set_byte+0x34>
		}else{
			led_buffer[pos+i]=BIT_0_TIME;
 8001ef4:	68fa      	ldr	r2, [r7, #12]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4413      	add	r3, r2
 8001efa:	4a09      	ldr	r2, [pc, #36]	; (8001f20 <set_byte+0x54>)
 8001efc:	2120      	movs	r1, #32
 8001efe:	54d1      	strb	r1, [r2, r3]
		}
		value<<=1;
 8001f00:	78fb      	ldrb	r3, [r7, #3]
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	70fb      	strb	r3, [r7, #3]
	for(i=0; i<8;i++){
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	3301      	adds	r3, #1
 8001f0a:	60fb      	str	r3, [r7, #12]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2b07      	cmp	r3, #7
 8001f10:	dde5      	ble.n	8001ede <set_byte+0x12>
	}
}
 8001f12:	bf00      	nop
 8001f14:	bf00      	nop
 8001f16:	3714      	adds	r7, #20
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	20000134 	.word	0x20000134

08001f24 <ws2811_init>:


// DEFINICJE FUNKCJI

void ws2811_init(void){
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
	int i;

	// Wysłanie resetu:
	for(i=0;i<RESET_LEN;i++){
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	607b      	str	r3, [r7, #4]
 8001f2e:	e007      	b.n	8001f40 <ws2811_init+0x1c>
		led_buffer[i]=0;
 8001f30:	4a13      	ldr	r2, [pc, #76]	; (8001f80 <ws2811_init+0x5c>)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4413      	add	r3, r2
 8001f36:	2200      	movs	r2, #0
 8001f38:	701a      	strb	r2, [r3, #0]
	for(i=0;i<RESET_LEN;i++){
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	607b      	str	r3, [r7, #4]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2b63      	cmp	r3, #99	; 0x63
 8001f44:	ddf4      	ble.n	8001f30 <ws2811_init+0xc>
	}

	// Zgaszenie wszystkich diod:
	for(i=0; i<24*LED_N;i++){
 8001f46:	2300      	movs	r3, #0
 8001f48:	607b      	str	r3, [r7, #4]
 8001f4a:	e007      	b.n	8001f5c <ws2811_init+0x38>
		led_buffer[RESET_LEN+i]=BIT_0_TIME;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	3364      	adds	r3, #100	; 0x64
 8001f50:	4a0b      	ldr	r2, [pc, #44]	; (8001f80 <ws2811_init+0x5c>)
 8001f52:	2120      	movs	r1, #32
 8001f54:	54d1      	strb	r1, [r2, r3]
	for(i=0; i<24*LED_N;i++){
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	607b      	str	r3, [r7, #4]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f5b3 6fae 	cmp.w	r3, #1392	; 0x570
 8001f62:	dbf3      	blt.n	8001f4c <ws2811_init+0x28>
	}

	// Wypełnienie na koniec:

	led_buffer[RESET_LEN+24*LED_N]=100;
 8001f64:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <ws2811_init+0x5c>)
 8001f66:	2264      	movs	r2, #100	; 0x64
 8001f68:	f883 25d4 	strb.w	r2, [r3, #1492]	; 0x5d4

	// Wlączenie timera:
	HAL_TIM_Base_Start(&htim4);
 8001f6c:	4805      	ldr	r0, [pc, #20]	; (8001f84 <ws2811_init+0x60>)
 8001f6e:	f002 fe27 	bl	8004bc0 <HAL_TIM_Base_Start>
	// Zacznij odswiezanie:
	ws2811_update();
 8001f72:	f000 f863 	bl	800203c <ws2811_update>

}
 8001f76:	bf00      	nop
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	20000134 	.word	0x20000134
 8001f84:	20000740 	.word	0x20000740

08001f88 <ws2811_hourDisplayReset>:

void ws2811_hourDisplayReset(void){
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
	int i;

		// Wysłanie resetu:
		for(i=0;i<RESET_LEN;i++){
 8001f8e:	2300      	movs	r3, #0
 8001f90:	607b      	str	r3, [r7, #4]
 8001f92:	e007      	b.n	8001fa4 <ws2811_hourDisplayReset+0x1c>
			led_buffer[i]=0;
 8001f94:	4a11      	ldr	r2, [pc, #68]	; (8001fdc <ws2811_hourDisplayReset+0x54>)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4413      	add	r3, r2
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	701a      	strb	r2, [r3, #0]
		for(i=0;i<RESET_LEN;i++){
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	607b      	str	r3, [r7, #4]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2b63      	cmp	r3, #99	; 0x63
 8001fa8:	ddf4      	ble.n	8001f94 <ws2811_hourDisplayReset+0xc>
		}

		// Zgaszenie wszystkich diod:
		for(i=0; i<24*LED_N_HOURS_FOR_SECTOR;i++){
 8001faa:	2300      	movs	r3, #0
 8001fac:	607b      	str	r3, [r7, #4]
 8001fae:	e007      	b.n	8001fc0 <ws2811_hourDisplayReset+0x38>
			led_buffer[RESET_LEN+i]=BIT_0_TIME;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	3364      	adds	r3, #100	; 0x64
 8001fb4:	4a09      	ldr	r2, [pc, #36]	; (8001fdc <ws2811_hourDisplayReset+0x54>)
 8001fb6:	2120      	movs	r1, #32
 8001fb8:	54d1      	strb	r1, [r2, r3]
		for(i=0; i<24*LED_N_HOURS_FOR_SECTOR;i++){
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	607b      	str	r3, [r7, #4]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f5b3 7f28 	cmp.w	r3, #672	; 0x2a0
 8001fc6:	dbf3      	blt.n	8001fb0 <ws2811_hourDisplayReset+0x28>
		}

		// Wypełnienie na koniec:

		led_buffer[RESET_LEN+24*LED_N]=100;
 8001fc8:	4b04      	ldr	r3, [pc, #16]	; (8001fdc <ws2811_hourDisplayReset+0x54>)
 8001fca:	2264      	movs	r2, #100	; 0x64
 8001fcc:	f883 25d4 	strb.w	r2, [r3, #1492]	; 0x5d4

		// Zacznij odswiezanie:
		ws2811_update();
 8001fd0:	f000 f834 	bl	800203c <ws2811_update>
}
 8001fd4:	bf00      	nop
 8001fd6:	3708      	adds	r7, #8
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	20000134 	.word	0x20000134

08001fe0 <ws2811_minuteDisplayReset>:

void ws2811_minuteDisplayReset(void){
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
	int i;

		// Wysłanie resetu:
		for(i=0;i<RESET_LEN;i++){
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	607b      	str	r3, [r7, #4]
 8001fea:	e007      	b.n	8001ffc <ws2811_minuteDisplayReset+0x1c>
			led_buffer[i]=0;
 8001fec:	4a12      	ldr	r2, [pc, #72]	; (8002038 <ws2811_minuteDisplayReset+0x58>)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	701a      	strb	r2, [r3, #0]
		for(i=0;i<RESET_LEN;i++){
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	607b      	str	r3, [r7, #4]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2b63      	cmp	r3, #99	; 0x63
 8002000:	ddf4      	ble.n	8001fec <ws2811_minuteDisplayReset+0xc>
		}

		// Zgaszenie wszystkich diod:
		for(i=0; i<24*LED_N_MINUTES_FOR_SECTOR;i++){
 8002002:	2300      	movs	r3, #0
 8002004:	607b      	str	r3, [r7, #4]
 8002006:	e008      	b.n	800201a <ws2811_minuteDisplayReset+0x3a>
			led_buffer[RESET_LEN+24*LED_N_HOURS_FOR_SECTOR+24*2+i]=BIT_0_TIME;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800200e:	4a0a      	ldr	r2, [pc, #40]	; (8002038 <ws2811_minuteDisplayReset+0x58>)
 8002010:	2120      	movs	r1, #32
 8002012:	54d1      	strb	r1, [r2, r3]
		for(i=0; i<24*LED_N_MINUTES_FOR_SECTOR;i++){
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	3301      	adds	r3, #1
 8002018:	607b      	str	r3, [r7, #4]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f5b3 7f28 	cmp.w	r3, #672	; 0x2a0
 8002020:	dbf2      	blt.n	8002008 <ws2811_minuteDisplayReset+0x28>
		}

		// Wypełnienie na koniec:

		led_buffer[RESET_LEN+24*LED_N]=100;
 8002022:	4b05      	ldr	r3, [pc, #20]	; (8002038 <ws2811_minuteDisplayReset+0x58>)
 8002024:	2264      	movs	r2, #100	; 0x64
 8002026:	f883 25d4 	strb.w	r2, [r3, #1492]	; 0x5d4

		// Zacznij odswiezanie:
		ws2811_update();
 800202a:	f000 f807 	bl	800203c <ws2811_update>
}
 800202e:	bf00      	nop
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	20000134 	.word	0x20000134

0800203c <ws2811_update>:

void ws2811_update(void){
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start_DMA(&htim4, TIM_CHANNEL_1, (uint32_t*)led_buffer, sizeof(led_buffer));
 8002040:	f240 53d5 	movw	r3, #1493	; 0x5d5
 8002044:	4a03      	ldr	r2, [pc, #12]	; (8002054 <ws2811_update+0x18>)
 8002046:	2100      	movs	r1, #0
 8002048:	4803      	ldr	r0, [pc, #12]	; (8002058 <ws2811_update+0x1c>)
 800204a:	f002 fef3 	bl	8004e34 <HAL_TIM_PWM_Start_DMA>
}
 800204e:	bf00      	nop
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	20000134 	.word	0x20000134
 8002058:	20000740 	.word	0x20000740

0800205c <ws2811_set_color>:

	}
}


void ws2811_set_color(uint32_t led, uint8_t red, uint8_t green, uint8_t blue){
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	4608      	mov	r0, r1
 8002066:	4611      	mov	r1, r2
 8002068:	461a      	mov	r2, r3
 800206a:	4603      	mov	r3, r0
 800206c:	70fb      	strb	r3, [r7, #3]
 800206e:	460b      	mov	r3, r1
 8002070:	70bb      	strb	r3, [r7, #2]
 8002072:	4613      	mov	r3, r2
 8002074:	707b      	strb	r3, [r7, #1]
	if(led<LED_N){
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2b39      	cmp	r3, #57	; 0x39
 800207a:	d820      	bhi.n	80020be <ws2811_set_color+0x62>
		set_byte(RESET_LEN+24*led, green);
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	4613      	mov	r3, r2
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	4413      	add	r3, r2
 8002084:	00db      	lsls	r3, r3, #3
 8002086:	3364      	adds	r3, #100	; 0x64
 8002088:	78ba      	ldrb	r2, [r7, #2]
 800208a:	4611      	mov	r1, r2
 800208c:	4618      	mov	r0, r3
 800208e:	f7ff ff1d 	bl	8001ecc <set_byte>
		set_byte(RESET_LEN+24*led+8, red);
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	4613      	mov	r3, r2
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	4413      	add	r3, r2
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	336c      	adds	r3, #108	; 0x6c
 800209e:	78fa      	ldrb	r2, [r7, #3]
 80020a0:	4611      	mov	r1, r2
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7ff ff12 	bl	8001ecc <set_byte>
		set_byte(RESET_LEN+24*led+16, blue);
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	4613      	mov	r3, r2
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	4413      	add	r3, r2
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	3374      	adds	r3, #116	; 0x74
 80020b4:	787a      	ldrb	r2, [r7, #1]
 80020b6:	4611      	mov	r1, r2
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff ff07 	bl	8001ecc <set_byte>
	}
}
 80020be:	bf00      	nop
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
	...

080020c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80020c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002100 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80020cc:	f7ff fc38 	bl	8001940 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80020d0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80020d2:	e003      	b.n	80020dc <LoopCopyDataInit>

080020d4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80020d4:	4b0b      	ldr	r3, [pc, #44]	; (8002104 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80020d6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80020d8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80020da:	3104      	adds	r1, #4

080020dc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80020dc:	480a      	ldr	r0, [pc, #40]	; (8002108 <LoopForever+0xa>)
	ldr	r3, =_edata
 80020de:	4b0b      	ldr	r3, [pc, #44]	; (800210c <LoopForever+0xe>)
	adds	r2, r0, r1
 80020e0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80020e2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80020e4:	d3f6      	bcc.n	80020d4 <CopyDataInit>
	ldr	r2, =_sbss
 80020e6:	4a0a      	ldr	r2, [pc, #40]	; (8002110 <LoopForever+0x12>)
	b	LoopFillZerobss
 80020e8:	e002      	b.n	80020f0 <LoopFillZerobss>

080020ea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80020ea:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80020ec:	f842 3b04 	str.w	r3, [r2], #4

080020f0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80020f0:	4b08      	ldr	r3, [pc, #32]	; (8002114 <LoopForever+0x16>)
	cmp	r2, r3
 80020f2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80020f4:	d3f9      	bcc.n	80020ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020f6:	f005 fadd 	bl	80076b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80020fa:	f7fe fbc7 	bl	800088c <main>

080020fe <LoopForever>:

LoopForever:
    b LoopForever
 80020fe:	e7fe      	b.n	80020fe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002100:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8002104:	080086cc 	.word	0x080086cc
	ldr	r0, =_sdata
 8002108:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800210c:	200000f0 	.word	0x200000f0
	ldr	r2, =_sbss
 8002110:	200000f0 	.word	0x200000f0
	ldr	r3, = _ebss
 8002114:	20000904 	.word	0x20000904

08002118 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002118:	e7fe      	b.n	8002118 <ADC1_2_IRQHandler>

0800211a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b082      	sub	sp, #8
 800211e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002120:	2300      	movs	r3, #0
 8002122:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002124:	2003      	movs	r0, #3
 8002126:	f000 f93d 	bl	80023a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800212a:	2000      	movs	r0, #0
 800212c:	f000 f80e 	bl	800214c <HAL_InitTick>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d002      	beq.n	800213c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	71fb      	strb	r3, [r7, #7]
 800213a:	e001      	b.n	8002140 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800213c:	f7ff fae6 	bl	800170c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002140:	79fb      	ldrb	r3, [r7, #7]
}
 8002142:	4618      	mov	r0, r3
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
	...

0800214c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002154:	2300      	movs	r3, #0
 8002156:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002158:	4b17      	ldr	r3, [pc, #92]	; (80021b8 <HAL_InitTick+0x6c>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d023      	beq.n	80021a8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002160:	4b16      	ldr	r3, [pc, #88]	; (80021bc <HAL_InitTick+0x70>)
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	4b14      	ldr	r3, [pc, #80]	; (80021b8 <HAL_InitTick+0x6c>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	4619      	mov	r1, r3
 800216a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800216e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002172:	fbb2 f3f3 	udiv	r3, r2, r3
 8002176:	4618      	mov	r0, r3
 8002178:	f000 f949 	bl	800240e <HAL_SYSTICK_Config>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d10f      	bne.n	80021a2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2b0f      	cmp	r3, #15
 8002186:	d809      	bhi.n	800219c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002188:	2200      	movs	r2, #0
 800218a:	6879      	ldr	r1, [r7, #4]
 800218c:	f04f 30ff 	mov.w	r0, #4294967295
 8002190:	f000 f913 	bl	80023ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002194:	4a0a      	ldr	r2, [pc, #40]	; (80021c0 <HAL_InitTick+0x74>)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6013      	str	r3, [r2, #0]
 800219a:	e007      	b.n	80021ac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	73fb      	strb	r3, [r7, #15]
 80021a0:	e004      	b.n	80021ac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	73fb      	strb	r3, [r7, #15]
 80021a6:	e001      	b.n	80021ac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80021ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3710      	adds	r7, #16
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	20000088 	.word	0x20000088
 80021bc:	20000080 	.word	0x20000080
 80021c0:	20000084 	.word	0x20000084

080021c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80021c8:	4b06      	ldr	r3, [pc, #24]	; (80021e4 <HAL_IncTick+0x20>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	461a      	mov	r2, r3
 80021ce:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <HAL_IncTick+0x24>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4413      	add	r3, r2
 80021d4:	4a04      	ldr	r2, [pc, #16]	; (80021e8 <HAL_IncTick+0x24>)
 80021d6:	6013      	str	r3, [r2, #0]
}
 80021d8:	bf00      	nop
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	20000088 	.word	0x20000088
 80021e8:	200008f0 	.word	0x200008f0

080021ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  return uwTick;
 80021f0:	4b03      	ldr	r3, [pc, #12]	; (8002200 <HAL_GetTick+0x14>)
 80021f2:	681b      	ldr	r3, [r3, #0]
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	200008f0 	.word	0x200008f0

08002204 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f003 0307 	and.w	r3, r3, #7
 8002212:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002214:	4b0c      	ldr	r3, [pc, #48]	; (8002248 <__NVIC_SetPriorityGrouping+0x44>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800221a:	68ba      	ldr	r2, [r7, #8]
 800221c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002220:	4013      	ands	r3, r2
 8002222:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800222c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002230:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002234:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002236:	4a04      	ldr	r2, [pc, #16]	; (8002248 <__NVIC_SetPriorityGrouping+0x44>)
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	60d3      	str	r3, [r2, #12]
}
 800223c:	bf00      	nop
 800223e:	3714      	adds	r7, #20
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr
 8002248:	e000ed00 	.word	0xe000ed00

0800224c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002250:	4b04      	ldr	r3, [pc, #16]	; (8002264 <__NVIC_GetPriorityGrouping+0x18>)
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	0a1b      	lsrs	r3, r3, #8
 8002256:	f003 0307 	and.w	r3, r3, #7
}
 800225a:	4618      	mov	r0, r3
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr
 8002264:	e000ed00 	.word	0xe000ed00

08002268 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	4603      	mov	r3, r0
 8002270:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002276:	2b00      	cmp	r3, #0
 8002278:	db0b      	blt.n	8002292 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800227a:	79fb      	ldrb	r3, [r7, #7]
 800227c:	f003 021f 	and.w	r2, r3, #31
 8002280:	4907      	ldr	r1, [pc, #28]	; (80022a0 <__NVIC_EnableIRQ+0x38>)
 8002282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002286:	095b      	lsrs	r3, r3, #5
 8002288:	2001      	movs	r0, #1
 800228a:	fa00 f202 	lsl.w	r2, r0, r2
 800228e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002292:	bf00      	nop
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	e000e100 	.word	0xe000e100

080022a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	4603      	mov	r3, r0
 80022ac:	6039      	str	r1, [r7, #0]
 80022ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	db0a      	blt.n	80022ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	b2da      	uxtb	r2, r3
 80022bc:	490c      	ldr	r1, [pc, #48]	; (80022f0 <__NVIC_SetPriority+0x4c>)
 80022be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c2:	0112      	lsls	r2, r2, #4
 80022c4:	b2d2      	uxtb	r2, r2
 80022c6:	440b      	add	r3, r1
 80022c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022cc:	e00a      	b.n	80022e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	b2da      	uxtb	r2, r3
 80022d2:	4908      	ldr	r1, [pc, #32]	; (80022f4 <__NVIC_SetPriority+0x50>)
 80022d4:	79fb      	ldrb	r3, [r7, #7]
 80022d6:	f003 030f 	and.w	r3, r3, #15
 80022da:	3b04      	subs	r3, #4
 80022dc:	0112      	lsls	r2, r2, #4
 80022de:	b2d2      	uxtb	r2, r2
 80022e0:	440b      	add	r3, r1
 80022e2:	761a      	strb	r2, [r3, #24]
}
 80022e4:	bf00      	nop
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr
 80022f0:	e000e100 	.word	0xe000e100
 80022f4:	e000ed00 	.word	0xe000ed00

080022f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b089      	sub	sp, #36	; 0x24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f003 0307 	and.w	r3, r3, #7
 800230a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	f1c3 0307 	rsb	r3, r3, #7
 8002312:	2b04      	cmp	r3, #4
 8002314:	bf28      	it	cs
 8002316:	2304      	movcs	r3, #4
 8002318:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	3304      	adds	r3, #4
 800231e:	2b06      	cmp	r3, #6
 8002320:	d902      	bls.n	8002328 <NVIC_EncodePriority+0x30>
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	3b03      	subs	r3, #3
 8002326:	e000      	b.n	800232a <NVIC_EncodePriority+0x32>
 8002328:	2300      	movs	r3, #0
 800232a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800232c:	f04f 32ff 	mov.w	r2, #4294967295
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	fa02 f303 	lsl.w	r3, r2, r3
 8002336:	43da      	mvns	r2, r3
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	401a      	ands	r2, r3
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002340:	f04f 31ff 	mov.w	r1, #4294967295
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	fa01 f303 	lsl.w	r3, r1, r3
 800234a:	43d9      	mvns	r1, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002350:	4313      	orrs	r3, r2
         );
}
 8002352:	4618      	mov	r0, r3
 8002354:	3724      	adds	r7, #36	; 0x24
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
	...

08002360 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	3b01      	subs	r3, #1
 800236c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002370:	d301      	bcc.n	8002376 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002372:	2301      	movs	r3, #1
 8002374:	e00f      	b.n	8002396 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002376:	4a0a      	ldr	r2, [pc, #40]	; (80023a0 <SysTick_Config+0x40>)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	3b01      	subs	r3, #1
 800237c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800237e:	210f      	movs	r1, #15
 8002380:	f04f 30ff 	mov.w	r0, #4294967295
 8002384:	f7ff ff8e 	bl	80022a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002388:	4b05      	ldr	r3, [pc, #20]	; (80023a0 <SysTick_Config+0x40>)
 800238a:	2200      	movs	r2, #0
 800238c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800238e:	4b04      	ldr	r3, [pc, #16]	; (80023a0 <SysTick_Config+0x40>)
 8002390:	2207      	movs	r2, #7
 8002392:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	e000e010 	.word	0xe000e010

080023a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f7ff ff29 	bl	8002204 <__NVIC_SetPriorityGrouping>
}
 80023b2:	bf00      	nop
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b086      	sub	sp, #24
 80023be:	af00      	add	r7, sp, #0
 80023c0:	4603      	mov	r3, r0
 80023c2:	60b9      	str	r1, [r7, #8]
 80023c4:	607a      	str	r2, [r7, #4]
 80023c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80023c8:	2300      	movs	r3, #0
 80023ca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80023cc:	f7ff ff3e 	bl	800224c <__NVIC_GetPriorityGrouping>
 80023d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	68b9      	ldr	r1, [r7, #8]
 80023d6:	6978      	ldr	r0, [r7, #20]
 80023d8:	f7ff ff8e 	bl	80022f8 <NVIC_EncodePriority>
 80023dc:	4602      	mov	r2, r0
 80023de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023e2:	4611      	mov	r1, r2
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff ff5d 	bl	80022a4 <__NVIC_SetPriority>
}
 80023ea:	bf00      	nop
 80023ec:	3718      	adds	r7, #24
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b082      	sub	sp, #8
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	4603      	mov	r3, r0
 80023fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002400:	4618      	mov	r0, r3
 8002402:	f7ff ff31 	bl	8002268 <__NVIC_EnableIRQ>
}
 8002406:	bf00      	nop
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800240e:	b580      	push	{r7, lr}
 8002410:	b082      	sub	sp, #8
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f7ff ffa2 	bl	8002360 <SysTick_Config>
 800241c:	4603      	mov	r3, r0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
	...

08002428 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002428:	b480      	push	{r7}
 800242a:	b085      	sub	sp, #20
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d101      	bne.n	800243a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e098      	b.n	800256c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	461a      	mov	r2, r3
 8002440:	4b4d      	ldr	r3, [pc, #308]	; (8002578 <HAL_DMA_Init+0x150>)
 8002442:	429a      	cmp	r2, r3
 8002444:	d80f      	bhi.n	8002466 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	461a      	mov	r2, r3
 800244c:	4b4b      	ldr	r3, [pc, #300]	; (800257c <HAL_DMA_Init+0x154>)
 800244e:	4413      	add	r3, r2
 8002450:	4a4b      	ldr	r2, [pc, #300]	; (8002580 <HAL_DMA_Init+0x158>)
 8002452:	fba2 2303 	umull	r2, r3, r2, r3
 8002456:	091b      	lsrs	r3, r3, #4
 8002458:	009a      	lsls	r2, r3, #2
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a48      	ldr	r2, [pc, #288]	; (8002584 <HAL_DMA_Init+0x15c>)
 8002462:	641a      	str	r2, [r3, #64]	; 0x40
 8002464:	e00e      	b.n	8002484 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	461a      	mov	r2, r3
 800246c:	4b46      	ldr	r3, [pc, #280]	; (8002588 <HAL_DMA_Init+0x160>)
 800246e:	4413      	add	r3, r2
 8002470:	4a43      	ldr	r2, [pc, #268]	; (8002580 <HAL_DMA_Init+0x158>)
 8002472:	fba2 2303 	umull	r2, r3, r2, r3
 8002476:	091b      	lsrs	r3, r3, #4
 8002478:	009a      	lsls	r2, r3, #2
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a42      	ldr	r2, [pc, #264]	; (800258c <HAL_DMA_Init+0x164>)
 8002482:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2202      	movs	r2, #2
 8002488:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800249a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800249e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80024a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	691b      	ldr	r3, [r3, #16]
 80024ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	699b      	ldr	r3, [r3, #24]
 80024ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a1b      	ldr	r3, [r3, #32]
 80024c6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80024c8:	68fa      	ldr	r2, [r7, #12]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	68fa      	ldr	r2, [r7, #12]
 80024d4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024de:	d039      	beq.n	8002554 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e4:	4a27      	ldr	r2, [pc, #156]	; (8002584 <HAL_DMA_Init+0x15c>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d11a      	bne.n	8002520 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80024ea:	4b29      	ldr	r3, [pc, #164]	; (8002590 <HAL_DMA_Init+0x168>)
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f2:	f003 031c 	and.w	r3, r3, #28
 80024f6:	210f      	movs	r1, #15
 80024f8:	fa01 f303 	lsl.w	r3, r1, r3
 80024fc:	43db      	mvns	r3, r3
 80024fe:	4924      	ldr	r1, [pc, #144]	; (8002590 <HAL_DMA_Init+0x168>)
 8002500:	4013      	ands	r3, r2
 8002502:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002504:	4b22      	ldr	r3, [pc, #136]	; (8002590 <HAL_DMA_Init+0x168>)
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6859      	ldr	r1, [r3, #4]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002510:	f003 031c 	and.w	r3, r3, #28
 8002514:	fa01 f303 	lsl.w	r3, r1, r3
 8002518:	491d      	ldr	r1, [pc, #116]	; (8002590 <HAL_DMA_Init+0x168>)
 800251a:	4313      	orrs	r3, r2
 800251c:	600b      	str	r3, [r1, #0]
 800251e:	e019      	b.n	8002554 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002520:	4b1c      	ldr	r3, [pc, #112]	; (8002594 <HAL_DMA_Init+0x16c>)
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002528:	f003 031c 	and.w	r3, r3, #28
 800252c:	210f      	movs	r1, #15
 800252e:	fa01 f303 	lsl.w	r3, r1, r3
 8002532:	43db      	mvns	r3, r3
 8002534:	4917      	ldr	r1, [pc, #92]	; (8002594 <HAL_DMA_Init+0x16c>)
 8002536:	4013      	ands	r3, r2
 8002538:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800253a:	4b16      	ldr	r3, [pc, #88]	; (8002594 <HAL_DMA_Init+0x16c>)
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6859      	ldr	r1, [r3, #4]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002546:	f003 031c 	and.w	r3, r3, #28
 800254a:	fa01 f303 	lsl.w	r3, r1, r3
 800254e:	4911      	ldr	r1, [pc, #68]	; (8002594 <HAL_DMA_Init+0x16c>)
 8002550:	4313      	orrs	r3, r2
 8002552:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2201      	movs	r2, #1
 800255e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800256a:	2300      	movs	r3, #0
}
 800256c:	4618      	mov	r0, r3
 800256e:	3714      	adds	r7, #20
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr
 8002578:	40020407 	.word	0x40020407
 800257c:	bffdfff8 	.word	0xbffdfff8
 8002580:	cccccccd 	.word	0xcccccccd
 8002584:	40020000 	.word	0x40020000
 8002588:	bffdfbf8 	.word	0xbffdfbf8
 800258c:	40020400 	.word	0x40020400
 8002590:	400200a8 	.word	0x400200a8
 8002594:	400204a8 	.word	0x400204a8

08002598 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	607a      	str	r2, [r7, #4]
 80025a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025a6:	2300      	movs	r3, #0
 80025a8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d101      	bne.n	80025b8 <HAL_DMA_Start_IT+0x20>
 80025b4:	2302      	movs	r3, #2
 80025b6:	e04b      	b.n	8002650 <HAL_DMA_Start_IT+0xb8>
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d13a      	bne.n	8002642 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2202      	movs	r2, #2
 80025d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2200      	movs	r2, #0
 80025d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f022 0201 	bic.w	r2, r2, #1
 80025e8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	68b9      	ldr	r1, [r7, #8]
 80025f0:	68f8      	ldr	r0, [r7, #12]
 80025f2:	f000 f8e0 	bl	80027b6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d008      	beq.n	8002610 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f042 020e 	orr.w	r2, r2, #14
 800260c:	601a      	str	r2, [r3, #0]
 800260e:	e00f      	b.n	8002630 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f022 0204 	bic.w	r2, r2, #4
 800261e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f042 020a 	orr.w	r2, r2, #10
 800262e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f042 0201 	orr.w	r2, r2, #1
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	e005      	b.n	800264e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800264a:	2302      	movs	r3, #2
 800264c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800264e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002650:	4618      	mov	r0, r3
 8002652:	3718      	adds	r7, #24
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002674:	f003 031c 	and.w	r3, r3, #28
 8002678:	2204      	movs	r2, #4
 800267a:	409a      	lsls	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	4013      	ands	r3, r2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d026      	beq.n	80026d2 <HAL_DMA_IRQHandler+0x7a>
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	f003 0304 	and.w	r3, r3, #4
 800268a:	2b00      	cmp	r3, #0
 800268c:	d021      	beq.n	80026d2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0320 	and.w	r3, r3, #32
 8002698:	2b00      	cmp	r3, #0
 800269a:	d107      	bne.n	80026ac <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f022 0204 	bic.w	r2, r2, #4
 80026aa:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b0:	f003 021c 	and.w	r2, r3, #28
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b8:	2104      	movs	r1, #4
 80026ba:	fa01 f202 	lsl.w	r2, r1, r2
 80026be:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d071      	beq.n	80027ac <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80026d0:	e06c      	b.n	80027ac <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d6:	f003 031c 	and.w	r3, r3, #28
 80026da:	2202      	movs	r2, #2
 80026dc:	409a      	lsls	r2, r3
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	4013      	ands	r3, r2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d02e      	beq.n	8002744 <HAL_DMA_IRQHandler+0xec>
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	f003 0302 	and.w	r3, r3, #2
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d029      	beq.n	8002744 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0320 	and.w	r3, r3, #32
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d10b      	bne.n	8002716 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f022 020a 	bic.w	r2, r2, #10
 800270c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2201      	movs	r2, #1
 8002712:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271a:	f003 021c 	and.w	r2, r3, #28
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	2102      	movs	r1, #2
 8002724:	fa01 f202 	lsl.w	r2, r1, r2
 8002728:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002736:	2b00      	cmp	r3, #0
 8002738:	d038      	beq.n	80027ac <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002742:	e033      	b.n	80027ac <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002748:	f003 031c 	and.w	r3, r3, #28
 800274c:	2208      	movs	r2, #8
 800274e:	409a      	lsls	r2, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	4013      	ands	r3, r2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d02a      	beq.n	80027ae <HAL_DMA_IRQHandler+0x156>
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	f003 0308 	and.w	r3, r3, #8
 800275e:	2b00      	cmp	r3, #0
 8002760:	d025      	beq.n	80027ae <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f022 020e 	bic.w	r2, r2, #14
 8002770:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002776:	f003 021c 	and.w	r2, r3, #28
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	2101      	movs	r1, #1
 8002780:	fa01 f202 	lsl.w	r2, r1, r2
 8002784:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2201      	movs	r2, #1
 800278a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d004      	beq.n	80027ae <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80027ac:	bf00      	nop
 80027ae:	bf00      	nop
}
 80027b0:	3710      	adds	r7, #16
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027b6:	b480      	push	{r7}
 80027b8:	b085      	sub	sp, #20
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	60f8      	str	r0, [r7, #12]
 80027be:	60b9      	str	r1, [r7, #8]
 80027c0:	607a      	str	r2, [r7, #4]
 80027c2:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c8:	f003 021c 	and.w	r2, r3, #28
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d0:	2101      	movs	r1, #1
 80027d2:	fa01 f202 	lsl.w	r2, r1, r2
 80027d6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	2b10      	cmp	r3, #16
 80027e6:	d108      	bne.n	80027fa <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	68ba      	ldr	r2, [r7, #8]
 80027f6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80027f8:	e007      	b.n	800280a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68ba      	ldr	r2, [r7, #8]
 8002800:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	60da      	str	r2, [r3, #12]
}
 800280a:	bf00      	nop
 800280c:	3714      	adds	r7, #20
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
	...

08002818 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002818:	b480      	push	{r7}
 800281a:	b087      	sub	sp, #28
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002822:	2300      	movs	r3, #0
 8002824:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002826:	e17f      	b.n	8002b28 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	2101      	movs	r1, #1
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	fa01 f303 	lsl.w	r3, r1, r3
 8002834:	4013      	ands	r3, r2
 8002836:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2b00      	cmp	r3, #0
 800283c:	f000 8171 	beq.w	8002b22 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	2b01      	cmp	r3, #1
 8002846:	d00b      	beq.n	8002860 <HAL_GPIO_Init+0x48>
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	2b02      	cmp	r3, #2
 800284e:	d007      	beq.n	8002860 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002854:	2b11      	cmp	r3, #17
 8002856:	d003      	beq.n	8002860 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	2b12      	cmp	r3, #18
 800285e:	d130      	bne.n	80028c2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	2203      	movs	r2, #3
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	43db      	mvns	r3, r3
 8002872:	693a      	ldr	r2, [r7, #16]
 8002874:	4013      	ands	r3, r2
 8002876:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	68da      	ldr	r2, [r3, #12]
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	005b      	lsls	r3, r3, #1
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	693a      	ldr	r2, [r7, #16]
 8002886:	4313      	orrs	r3, r2
 8002888:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	693a      	ldr	r2, [r7, #16]
 800288e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002896:	2201      	movs	r2, #1
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	fa02 f303 	lsl.w	r3, r2, r3
 800289e:	43db      	mvns	r3, r3
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	4013      	ands	r3, r2
 80028a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	091b      	lsrs	r3, r3, #4
 80028ac:	f003 0201 	and.w	r2, r3, #1
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	fa02 f303 	lsl.w	r3, r2, r3
 80028b6:	693a      	ldr	r2, [r7, #16]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f003 0303 	and.w	r3, r3, #3
 80028ca:	2b03      	cmp	r3, #3
 80028cc:	d118      	bne.n	8002900 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80028d4:	2201      	movs	r2, #1
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	43db      	mvns	r3, r3
 80028de:	693a      	ldr	r2, [r7, #16]
 80028e0:	4013      	ands	r3, r2
 80028e2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	08db      	lsrs	r3, r3, #3
 80028ea:	f003 0201 	and.w	r2, r3, #1
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	fa02 f303 	lsl.w	r3, r2, r3
 80028f4:	693a      	ldr	r2, [r7, #16]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	693a      	ldr	r2, [r7, #16]
 80028fe:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	2203      	movs	r2, #3
 800290c:	fa02 f303 	lsl.w	r3, r2, r3
 8002910:	43db      	mvns	r3, r3
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	4013      	ands	r3, r2
 8002916:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	689a      	ldr	r2, [r3, #8]
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	4313      	orrs	r3, r2
 8002928:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	693a      	ldr	r2, [r7, #16]
 800292e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	2b02      	cmp	r3, #2
 8002936:	d003      	beq.n	8002940 <HAL_GPIO_Init+0x128>
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	2b12      	cmp	r3, #18
 800293e:	d123      	bne.n	8002988 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	08da      	lsrs	r2, r3, #3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	3208      	adds	r2, #8
 8002948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800294c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	f003 0307 	and.w	r3, r3, #7
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	220f      	movs	r2, #15
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	43db      	mvns	r3, r3
 800295e:	693a      	ldr	r2, [r7, #16]
 8002960:	4013      	ands	r3, r2
 8002962:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	691a      	ldr	r2, [r3, #16]
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	f003 0307 	and.w	r3, r3, #7
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	fa02 f303 	lsl.w	r3, r2, r3
 8002974:	693a      	ldr	r2, [r7, #16]
 8002976:	4313      	orrs	r3, r2
 8002978:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	08da      	lsrs	r2, r3, #3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	3208      	adds	r2, #8
 8002982:	6939      	ldr	r1, [r7, #16]
 8002984:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	005b      	lsls	r3, r3, #1
 8002992:	2203      	movs	r2, #3
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	43db      	mvns	r3, r3
 800299a:	693a      	ldr	r2, [r7, #16]
 800299c:	4013      	ands	r3, r2
 800299e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f003 0203 	and.w	r2, r3, #3
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	005b      	lsls	r3, r3, #1
 80029ac:	fa02 f303 	lsl.w	r3, r2, r3
 80029b0:	693a      	ldr	r2, [r7, #16]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	693a      	ldr	r2, [r7, #16]
 80029ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	f000 80ac 	beq.w	8002b22 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ca:	4b5f      	ldr	r3, [pc, #380]	; (8002b48 <HAL_GPIO_Init+0x330>)
 80029cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029ce:	4a5e      	ldr	r2, [pc, #376]	; (8002b48 <HAL_GPIO_Init+0x330>)
 80029d0:	f043 0301 	orr.w	r3, r3, #1
 80029d4:	6613      	str	r3, [r2, #96]	; 0x60
 80029d6:	4b5c      	ldr	r3, [pc, #368]	; (8002b48 <HAL_GPIO_Init+0x330>)
 80029d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	60bb      	str	r3, [r7, #8]
 80029e0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80029e2:	4a5a      	ldr	r2, [pc, #360]	; (8002b4c <HAL_GPIO_Init+0x334>)
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	089b      	lsrs	r3, r3, #2
 80029e8:	3302      	adds	r3, #2
 80029ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	f003 0303 	and.w	r3, r3, #3
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	220f      	movs	r2, #15
 80029fa:	fa02 f303 	lsl.w	r3, r2, r3
 80029fe:	43db      	mvns	r3, r3
 8002a00:	693a      	ldr	r2, [r7, #16]
 8002a02:	4013      	ands	r3, r2
 8002a04:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002a0c:	d025      	beq.n	8002a5a <HAL_GPIO_Init+0x242>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a4f      	ldr	r2, [pc, #316]	; (8002b50 <HAL_GPIO_Init+0x338>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d01f      	beq.n	8002a56 <HAL_GPIO_Init+0x23e>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a4e      	ldr	r2, [pc, #312]	; (8002b54 <HAL_GPIO_Init+0x33c>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d019      	beq.n	8002a52 <HAL_GPIO_Init+0x23a>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a4d      	ldr	r2, [pc, #308]	; (8002b58 <HAL_GPIO_Init+0x340>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d013      	beq.n	8002a4e <HAL_GPIO_Init+0x236>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a4c      	ldr	r2, [pc, #304]	; (8002b5c <HAL_GPIO_Init+0x344>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d00d      	beq.n	8002a4a <HAL_GPIO_Init+0x232>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a4b      	ldr	r2, [pc, #300]	; (8002b60 <HAL_GPIO_Init+0x348>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d007      	beq.n	8002a46 <HAL_GPIO_Init+0x22e>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a4a      	ldr	r2, [pc, #296]	; (8002b64 <HAL_GPIO_Init+0x34c>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d101      	bne.n	8002a42 <HAL_GPIO_Init+0x22a>
 8002a3e:	2306      	movs	r3, #6
 8002a40:	e00c      	b.n	8002a5c <HAL_GPIO_Init+0x244>
 8002a42:	2307      	movs	r3, #7
 8002a44:	e00a      	b.n	8002a5c <HAL_GPIO_Init+0x244>
 8002a46:	2305      	movs	r3, #5
 8002a48:	e008      	b.n	8002a5c <HAL_GPIO_Init+0x244>
 8002a4a:	2304      	movs	r3, #4
 8002a4c:	e006      	b.n	8002a5c <HAL_GPIO_Init+0x244>
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e004      	b.n	8002a5c <HAL_GPIO_Init+0x244>
 8002a52:	2302      	movs	r3, #2
 8002a54:	e002      	b.n	8002a5c <HAL_GPIO_Init+0x244>
 8002a56:	2301      	movs	r3, #1
 8002a58:	e000      	b.n	8002a5c <HAL_GPIO_Init+0x244>
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	697a      	ldr	r2, [r7, #20]
 8002a5e:	f002 0203 	and.w	r2, r2, #3
 8002a62:	0092      	lsls	r2, r2, #2
 8002a64:	4093      	lsls	r3, r2
 8002a66:	693a      	ldr	r2, [r7, #16]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a6c:	4937      	ldr	r1, [pc, #220]	; (8002b4c <HAL_GPIO_Init+0x334>)
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	089b      	lsrs	r3, r3, #2
 8002a72:	3302      	adds	r3, #2
 8002a74:	693a      	ldr	r2, [r7, #16]
 8002a76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002a7a:	4b3b      	ldr	r3, [pc, #236]	; (8002b68 <HAL_GPIO_Init+0x350>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	43db      	mvns	r3, r3
 8002a84:	693a      	ldr	r2, [r7, #16]
 8002a86:	4013      	ands	r3, r2
 8002a88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d003      	beq.n	8002a9e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002a96:	693a      	ldr	r2, [r7, #16]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002a9e:	4a32      	ldr	r2, [pc, #200]	; (8002b68 <HAL_GPIO_Init+0x350>)
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002aa4:	4b30      	ldr	r3, [pc, #192]	; (8002b68 <HAL_GPIO_Init+0x350>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	43db      	mvns	r3, r3
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d003      	beq.n	8002ac8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002ac0:	693a      	ldr	r2, [r7, #16]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ac8:	4a27      	ldr	r2, [pc, #156]	; (8002b68 <HAL_GPIO_Init+0x350>)
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ace:	4b26      	ldr	r3, [pc, #152]	; (8002b68 <HAL_GPIO_Init+0x350>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	43db      	mvns	r3, r3
 8002ad8:	693a      	ldr	r2, [r7, #16]
 8002ada:	4013      	ands	r3, r2
 8002adc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d003      	beq.n	8002af2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002af2:	4a1d      	ldr	r2, [pc, #116]	; (8002b68 <HAL_GPIO_Init+0x350>)
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002af8:	4b1b      	ldr	r3, [pc, #108]	; (8002b68 <HAL_GPIO_Init+0x350>)
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	43db      	mvns	r3, r3
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	4013      	ands	r3, r2
 8002b06:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d003      	beq.n	8002b1c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002b14:	693a      	ldr	r2, [r7, #16]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b1c:	4a12      	ldr	r2, [pc, #72]	; (8002b68 <HAL_GPIO_Init+0x350>)
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	3301      	adds	r3, #1
 8002b26:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f47f ae78 	bne.w	8002828 <HAL_GPIO_Init+0x10>
  }
}
 8002b38:	bf00      	nop
 8002b3a:	bf00      	nop
 8002b3c:	371c      	adds	r7, #28
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	40021000 	.word	0x40021000
 8002b4c:	40010000 	.word	0x40010000
 8002b50:	48000400 	.word	0x48000400
 8002b54:	48000800 	.word	0x48000800
 8002b58:	48000c00 	.word	0x48000c00
 8002b5c:	48001000 	.word	0x48001000
 8002b60:	48001400 	.word	0x48001400
 8002b64:	48001800 	.word	0x48001800
 8002b68:	40010400 	.word	0x40010400

08002b6c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b70:	4b05      	ldr	r3, [pc, #20]	; (8002b88 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a04      	ldr	r2, [pc, #16]	; (8002b88 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002b76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b7a:	6013      	str	r3, [r2, #0]
}
 8002b7c:	bf00      	nop
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	40007000 	.word	0x40007000

08002b8c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002b90:	4b04      	ldr	r3, [pc, #16]	; (8002ba4 <HAL_PWREx_GetVoltageRange+0x18>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	40007000 	.word	0x40007000

08002ba8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b085      	sub	sp, #20
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bb6:	d130      	bne.n	8002c1a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bb8:	4b23      	ldr	r3, [pc, #140]	; (8002c48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002bc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bc4:	d038      	beq.n	8002c38 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bc6:	4b20      	ldr	r3, [pc, #128]	; (8002c48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002bce:	4a1e      	ldr	r2, [pc, #120]	; (8002c48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bd0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bd4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002bd6:	4b1d      	ldr	r3, [pc, #116]	; (8002c4c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2232      	movs	r2, #50	; 0x32
 8002bdc:	fb02 f303 	mul.w	r3, r2, r3
 8002be0:	4a1b      	ldr	r2, [pc, #108]	; (8002c50 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002be2:	fba2 2303 	umull	r2, r3, r2, r3
 8002be6:	0c9b      	lsrs	r3, r3, #18
 8002be8:	3301      	adds	r3, #1
 8002bea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bec:	e002      	b.n	8002bf4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	3b01      	subs	r3, #1
 8002bf2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bf4:	4b14      	ldr	r3, [pc, #80]	; (8002c48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bf6:	695b      	ldr	r3, [r3, #20]
 8002bf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c00:	d102      	bne.n	8002c08 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d1f2      	bne.n	8002bee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c08:	4b0f      	ldr	r3, [pc, #60]	; (8002c48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c0a:	695b      	ldr	r3, [r3, #20]
 8002c0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c14:	d110      	bne.n	8002c38 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e00f      	b.n	8002c3a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c1a:	4b0b      	ldr	r3, [pc, #44]	; (8002c48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c26:	d007      	beq.n	8002c38 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c28:	4b07      	ldr	r3, [pc, #28]	; (8002c48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c30:	4a05      	ldr	r2, [pc, #20]	; (8002c48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c36:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3714      	adds	r7, #20
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	40007000 	.word	0x40007000
 8002c4c:	20000080 	.word	0x20000080
 8002c50:	431bde83 	.word	0x431bde83

08002c54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b088      	sub	sp, #32
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d101      	bne.n	8002c66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e3d4      	b.n	8003410 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c66:	4ba1      	ldr	r3, [pc, #644]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f003 030c 	and.w	r3, r3, #12
 8002c6e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c70:	4b9e      	ldr	r3, [pc, #632]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	f003 0303 	and.w	r3, r3, #3
 8002c78:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0310 	and.w	r3, r3, #16
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	f000 80e4 	beq.w	8002e50 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d007      	beq.n	8002c9e <HAL_RCC_OscConfig+0x4a>
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	2b0c      	cmp	r3, #12
 8002c92:	f040 808b 	bne.w	8002dac <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	f040 8087 	bne.w	8002dac <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c9e:	4b93      	ldr	r3, [pc, #588]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d005      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x62>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	699b      	ldr	r3, [r3, #24]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d101      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e3ac      	b.n	8003410 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a1a      	ldr	r2, [r3, #32]
 8002cba:	4b8c      	ldr	r3, [pc, #560]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0308 	and.w	r3, r3, #8
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d004      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x7c>
 8002cc6:	4b89      	ldr	r3, [pc, #548]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cce:	e005      	b.n	8002cdc <HAL_RCC_OscConfig+0x88>
 8002cd0:	4b86      	ldr	r3, [pc, #536]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002cd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cd6:	091b      	lsrs	r3, r3, #4
 8002cd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d223      	bcs.n	8002d28 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a1b      	ldr	r3, [r3, #32]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f000 fd41 	bl	800376c <RCC_SetFlashLatencyFromMSIRange>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d001      	beq.n	8002cf4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e38d      	b.n	8003410 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cf4:	4b7d      	ldr	r3, [pc, #500]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a7c      	ldr	r2, [pc, #496]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002cfa:	f043 0308 	orr.w	r3, r3, #8
 8002cfe:	6013      	str	r3, [r2, #0]
 8002d00:	4b7a      	ldr	r3, [pc, #488]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a1b      	ldr	r3, [r3, #32]
 8002d0c:	4977      	ldr	r1, [pc, #476]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d12:	4b76      	ldr	r3, [pc, #472]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	69db      	ldr	r3, [r3, #28]
 8002d1e:	021b      	lsls	r3, r3, #8
 8002d20:	4972      	ldr	r1, [pc, #456]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	604b      	str	r3, [r1, #4]
 8002d26:	e025      	b.n	8002d74 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d28:	4b70      	ldr	r3, [pc, #448]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a6f      	ldr	r2, [pc, #444]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002d2e:	f043 0308 	orr.w	r3, r3, #8
 8002d32:	6013      	str	r3, [r2, #0]
 8002d34:	4b6d      	ldr	r3, [pc, #436]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6a1b      	ldr	r3, [r3, #32]
 8002d40:	496a      	ldr	r1, [pc, #424]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d46:	4b69      	ldr	r3, [pc, #420]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	69db      	ldr	r3, [r3, #28]
 8002d52:	021b      	lsls	r3, r3, #8
 8002d54:	4965      	ldr	r1, [pc, #404]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d109      	bne.n	8002d74 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a1b      	ldr	r3, [r3, #32]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f000 fd01 	bl	800376c <RCC_SetFlashLatencyFromMSIRange>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d001      	beq.n	8002d74 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e34d      	b.n	8003410 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d74:	f000 fc36 	bl	80035e4 <HAL_RCC_GetSysClockFreq>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	4b5c      	ldr	r3, [pc, #368]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	091b      	lsrs	r3, r3, #4
 8002d80:	f003 030f 	and.w	r3, r3, #15
 8002d84:	495a      	ldr	r1, [pc, #360]	; (8002ef0 <HAL_RCC_OscConfig+0x29c>)
 8002d86:	5ccb      	ldrb	r3, [r1, r3]
 8002d88:	f003 031f 	and.w	r3, r3, #31
 8002d8c:	fa22 f303 	lsr.w	r3, r2, r3
 8002d90:	4a58      	ldr	r2, [pc, #352]	; (8002ef4 <HAL_RCC_OscConfig+0x2a0>)
 8002d92:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002d94:	4b58      	ldr	r3, [pc, #352]	; (8002ef8 <HAL_RCC_OscConfig+0x2a4>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7ff f9d7 	bl	800214c <HAL_InitTick>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002da2:	7bfb      	ldrb	r3, [r7, #15]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d052      	beq.n	8002e4e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002da8:	7bfb      	ldrb	r3, [r7, #15]
 8002daa:	e331      	b.n	8003410 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	699b      	ldr	r3, [r3, #24]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d032      	beq.n	8002e1a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002db4:	4b4d      	ldr	r3, [pc, #308]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a4c      	ldr	r2, [pc, #304]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002dba:	f043 0301 	orr.w	r3, r3, #1
 8002dbe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002dc0:	f7ff fa14 	bl	80021ec <HAL_GetTick>
 8002dc4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002dc8:	f7ff fa10 	bl	80021ec <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e31a      	b.n	8003410 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002dda:	4b44      	ldr	r3, [pc, #272]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d0f0      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002de6:	4b41      	ldr	r3, [pc, #260]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a40      	ldr	r2, [pc, #256]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002dec:	f043 0308 	orr.w	r3, r3, #8
 8002df0:	6013      	str	r3, [r2, #0]
 8002df2:	4b3e      	ldr	r3, [pc, #248]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a1b      	ldr	r3, [r3, #32]
 8002dfe:	493b      	ldr	r1, [pc, #236]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e04:	4b39      	ldr	r3, [pc, #228]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	69db      	ldr	r3, [r3, #28]
 8002e10:	021b      	lsls	r3, r3, #8
 8002e12:	4936      	ldr	r1, [pc, #216]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	604b      	str	r3, [r1, #4]
 8002e18:	e01a      	b.n	8002e50 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e1a:	4b34      	ldr	r3, [pc, #208]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a33      	ldr	r2, [pc, #204]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002e20:	f023 0301 	bic.w	r3, r3, #1
 8002e24:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e26:	f7ff f9e1 	bl	80021ec <HAL_GetTick>
 8002e2a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e2c:	e008      	b.n	8002e40 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e2e:	f7ff f9dd 	bl	80021ec <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d901      	bls.n	8002e40 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e2e7      	b.n	8003410 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e40:	4b2a      	ldr	r3, [pc, #168]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0302 	and.w	r3, r3, #2
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d1f0      	bne.n	8002e2e <HAL_RCC_OscConfig+0x1da>
 8002e4c:	e000      	b.n	8002e50 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e4e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0301 	and.w	r3, r3, #1
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d074      	beq.n	8002f46 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	2b08      	cmp	r3, #8
 8002e60:	d005      	beq.n	8002e6e <HAL_RCC_OscConfig+0x21a>
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	2b0c      	cmp	r3, #12
 8002e66:	d10e      	bne.n	8002e86 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	2b03      	cmp	r3, #3
 8002e6c:	d10b      	bne.n	8002e86 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e6e:	4b1f      	ldr	r3, [pc, #124]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d064      	beq.n	8002f44 <HAL_RCC_OscConfig+0x2f0>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d160      	bne.n	8002f44 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e2c4      	b.n	8003410 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e8e:	d106      	bne.n	8002e9e <HAL_RCC_OscConfig+0x24a>
 8002e90:	4b16      	ldr	r3, [pc, #88]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a15      	ldr	r2, [pc, #84]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002e96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e9a:	6013      	str	r3, [r2, #0]
 8002e9c:	e01d      	b.n	8002eda <HAL_RCC_OscConfig+0x286>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ea6:	d10c      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x26e>
 8002ea8:	4b10      	ldr	r3, [pc, #64]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a0f      	ldr	r2, [pc, #60]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002eae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002eb2:	6013      	str	r3, [r2, #0]
 8002eb4:	4b0d      	ldr	r3, [pc, #52]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a0c      	ldr	r2, [pc, #48]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002eba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ebe:	6013      	str	r3, [r2, #0]
 8002ec0:	e00b      	b.n	8002eda <HAL_RCC_OscConfig+0x286>
 8002ec2:	4b0a      	ldr	r3, [pc, #40]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a09      	ldr	r2, [pc, #36]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002ec8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ecc:	6013      	str	r3, [r2, #0]
 8002ece:	4b07      	ldr	r3, [pc, #28]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a06      	ldr	r2, [pc, #24]	; (8002eec <HAL_RCC_OscConfig+0x298>)
 8002ed4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ed8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d01c      	beq.n	8002f1c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee2:	f7ff f983 	bl	80021ec <HAL_GetTick>
 8002ee6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ee8:	e011      	b.n	8002f0e <HAL_RCC_OscConfig+0x2ba>
 8002eea:	bf00      	nop
 8002eec:	40021000 	.word	0x40021000
 8002ef0:	080085dc 	.word	0x080085dc
 8002ef4:	20000080 	.word	0x20000080
 8002ef8:	20000084 	.word	0x20000084
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002efc:	f7ff f976 	bl	80021ec <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b64      	cmp	r3, #100	; 0x64
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e280      	b.n	8003410 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f0e:	4baf      	ldr	r3, [pc, #700]	; (80031cc <HAL_RCC_OscConfig+0x578>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d0f0      	beq.n	8002efc <HAL_RCC_OscConfig+0x2a8>
 8002f1a:	e014      	b.n	8002f46 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f1c:	f7ff f966 	bl	80021ec <HAL_GetTick>
 8002f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f22:	e008      	b.n	8002f36 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f24:	f7ff f962 	bl	80021ec <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b64      	cmp	r3, #100	; 0x64
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e26c      	b.n	8003410 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f36:	4ba5      	ldr	r3, [pc, #660]	; (80031cc <HAL_RCC_OscConfig+0x578>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1f0      	bne.n	8002f24 <HAL_RCC_OscConfig+0x2d0>
 8002f42:	e000      	b.n	8002f46 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d060      	beq.n	8003014 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	2b04      	cmp	r3, #4
 8002f56:	d005      	beq.n	8002f64 <HAL_RCC_OscConfig+0x310>
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	2b0c      	cmp	r3, #12
 8002f5c:	d119      	bne.n	8002f92 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d116      	bne.n	8002f92 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f64:	4b99      	ldr	r3, [pc, #612]	; (80031cc <HAL_RCC_OscConfig+0x578>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d005      	beq.n	8002f7c <HAL_RCC_OscConfig+0x328>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d101      	bne.n	8002f7c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e249      	b.n	8003410 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f7c:	4b93      	ldr	r3, [pc, #588]	; (80031cc <HAL_RCC_OscConfig+0x578>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	691b      	ldr	r3, [r3, #16]
 8002f88:	061b      	lsls	r3, r3, #24
 8002f8a:	4990      	ldr	r1, [pc, #576]	; (80031cc <HAL_RCC_OscConfig+0x578>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f90:	e040      	b.n	8003014 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d023      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f9a:	4b8c      	ldr	r3, [pc, #560]	; (80031cc <HAL_RCC_OscConfig+0x578>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a8b      	ldr	r2, [pc, #556]	; (80031cc <HAL_RCC_OscConfig+0x578>)
 8002fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fa4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa6:	f7ff f921 	bl	80021ec <HAL_GetTick>
 8002faa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fac:	e008      	b.n	8002fc0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fae:	f7ff f91d 	bl	80021ec <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d901      	bls.n	8002fc0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	e227      	b.n	8003410 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fc0:	4b82      	ldr	r3, [pc, #520]	; (80031cc <HAL_RCC_OscConfig+0x578>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d0f0      	beq.n	8002fae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fcc:	4b7f      	ldr	r3, [pc, #508]	; (80031cc <HAL_RCC_OscConfig+0x578>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	061b      	lsls	r3, r3, #24
 8002fda:	497c      	ldr	r1, [pc, #496]	; (80031cc <HAL_RCC_OscConfig+0x578>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	604b      	str	r3, [r1, #4]
 8002fe0:	e018      	b.n	8003014 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fe2:	4b7a      	ldr	r3, [pc, #488]	; (80031cc <HAL_RCC_OscConfig+0x578>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a79      	ldr	r2, [pc, #484]	; (80031cc <HAL_RCC_OscConfig+0x578>)
 8002fe8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fee:	f7ff f8fd 	bl	80021ec <HAL_GetTick>
 8002ff2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ff4:	e008      	b.n	8003008 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ff6:	f7ff f8f9 	bl	80021ec <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2b02      	cmp	r3, #2
 8003002:	d901      	bls.n	8003008 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e203      	b.n	8003410 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003008:	4b70      	ldr	r3, [pc, #448]	; (80031cc <HAL_RCC_OscConfig+0x578>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003010:	2b00      	cmp	r3, #0
 8003012:	d1f0      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0308 	and.w	r3, r3, #8
 800301c:	2b00      	cmp	r3, #0
 800301e:	d03c      	beq.n	800309a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	695b      	ldr	r3, [r3, #20]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d01c      	beq.n	8003062 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003028:	4b68      	ldr	r3, [pc, #416]	; (80031cc <HAL_RCC_OscConfig+0x578>)
 800302a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800302e:	4a67      	ldr	r2, [pc, #412]	; (80031cc <HAL_RCC_OscConfig+0x578>)
 8003030:	f043 0301 	orr.w	r3, r3, #1
 8003034:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003038:	f7ff f8d8 	bl	80021ec <HAL_GetTick>
 800303c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800303e:	e008      	b.n	8003052 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003040:	f7ff f8d4 	bl	80021ec <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e1de      	b.n	8003410 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003052:	4b5e      	ldr	r3, [pc, #376]	; (80031cc <HAL_RCC_OscConfig+0x578>)
 8003054:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003058:	f003 0302 	and.w	r3, r3, #2
 800305c:	2b00      	cmp	r3, #0
 800305e:	d0ef      	beq.n	8003040 <HAL_RCC_OscConfig+0x3ec>
 8003060:	e01b      	b.n	800309a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003062:	4b5a      	ldr	r3, [pc, #360]	; (80031cc <HAL_RCC_OscConfig+0x578>)
 8003064:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003068:	4a58      	ldr	r2, [pc, #352]	; (80031cc <HAL_RCC_OscConfig+0x578>)
 800306a:	f023 0301 	bic.w	r3, r3, #1
 800306e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003072:	f7ff f8bb 	bl	80021ec <HAL_GetTick>
 8003076:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003078:	e008      	b.n	800308c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800307a:	f7ff f8b7 	bl	80021ec <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	2b02      	cmp	r3, #2
 8003086:	d901      	bls.n	800308c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	e1c1      	b.n	8003410 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800308c:	4b4f      	ldr	r3, [pc, #316]	; (80031cc <HAL_RCC_OscConfig+0x578>)
 800308e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d1ef      	bne.n	800307a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0304 	and.w	r3, r3, #4
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	f000 80a6 	beq.w	80031f4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030a8:	2300      	movs	r3, #0
 80030aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80030ac:	4b47      	ldr	r3, [pc, #284]	; (80031cc <HAL_RCC_OscConfig+0x578>)
 80030ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d10d      	bne.n	80030d4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030b8:	4b44      	ldr	r3, [pc, #272]	; (80031cc <HAL_RCC_OscConfig+0x578>)
 80030ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030bc:	4a43      	ldr	r2, [pc, #268]	; (80031cc <HAL_RCC_OscConfig+0x578>)
 80030be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030c2:	6593      	str	r3, [r2, #88]	; 0x58
 80030c4:	4b41      	ldr	r3, [pc, #260]	; (80031cc <HAL_RCC_OscConfig+0x578>)
 80030c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030cc:	60bb      	str	r3, [r7, #8]
 80030ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030d0:	2301      	movs	r3, #1
 80030d2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030d4:	4b3e      	ldr	r3, [pc, #248]	; (80031d0 <HAL_RCC_OscConfig+0x57c>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d118      	bne.n	8003112 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030e0:	4b3b      	ldr	r3, [pc, #236]	; (80031d0 <HAL_RCC_OscConfig+0x57c>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a3a      	ldr	r2, [pc, #232]	; (80031d0 <HAL_RCC_OscConfig+0x57c>)
 80030e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030ec:	f7ff f87e 	bl	80021ec <HAL_GetTick>
 80030f0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030f2:	e008      	b.n	8003106 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030f4:	f7ff f87a 	bl	80021ec <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e184      	b.n	8003410 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003106:	4b32      	ldr	r3, [pc, #200]	; (80031d0 <HAL_RCC_OscConfig+0x57c>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800310e:	2b00      	cmp	r3, #0
 8003110:	d0f0      	beq.n	80030f4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	2b01      	cmp	r3, #1
 8003118:	d108      	bne.n	800312c <HAL_RCC_OscConfig+0x4d8>
 800311a:	4b2c      	ldr	r3, [pc, #176]	; (80031cc <HAL_RCC_OscConfig+0x578>)
 800311c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003120:	4a2a      	ldr	r2, [pc, #168]	; (80031cc <HAL_RCC_OscConfig+0x578>)
 8003122:	f043 0301 	orr.w	r3, r3, #1
 8003126:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800312a:	e024      	b.n	8003176 <HAL_RCC_OscConfig+0x522>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	2b05      	cmp	r3, #5
 8003132:	d110      	bne.n	8003156 <HAL_RCC_OscConfig+0x502>
 8003134:	4b25      	ldr	r3, [pc, #148]	; (80031cc <HAL_RCC_OscConfig+0x578>)
 8003136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800313a:	4a24      	ldr	r2, [pc, #144]	; (80031cc <HAL_RCC_OscConfig+0x578>)
 800313c:	f043 0304 	orr.w	r3, r3, #4
 8003140:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003144:	4b21      	ldr	r3, [pc, #132]	; (80031cc <HAL_RCC_OscConfig+0x578>)
 8003146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800314a:	4a20      	ldr	r2, [pc, #128]	; (80031cc <HAL_RCC_OscConfig+0x578>)
 800314c:	f043 0301 	orr.w	r3, r3, #1
 8003150:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003154:	e00f      	b.n	8003176 <HAL_RCC_OscConfig+0x522>
 8003156:	4b1d      	ldr	r3, [pc, #116]	; (80031cc <HAL_RCC_OscConfig+0x578>)
 8003158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800315c:	4a1b      	ldr	r2, [pc, #108]	; (80031cc <HAL_RCC_OscConfig+0x578>)
 800315e:	f023 0301 	bic.w	r3, r3, #1
 8003162:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003166:	4b19      	ldr	r3, [pc, #100]	; (80031cc <HAL_RCC_OscConfig+0x578>)
 8003168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800316c:	4a17      	ldr	r2, [pc, #92]	; (80031cc <HAL_RCC_OscConfig+0x578>)
 800316e:	f023 0304 	bic.w	r3, r3, #4
 8003172:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d016      	beq.n	80031ac <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800317e:	f7ff f835 	bl	80021ec <HAL_GetTick>
 8003182:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003184:	e00a      	b.n	800319c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003186:	f7ff f831 	bl	80021ec <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	f241 3288 	movw	r2, #5000	; 0x1388
 8003194:	4293      	cmp	r3, r2
 8003196:	d901      	bls.n	800319c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e139      	b.n	8003410 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800319c:	4b0b      	ldr	r3, [pc, #44]	; (80031cc <HAL_RCC_OscConfig+0x578>)
 800319e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d0ed      	beq.n	8003186 <HAL_RCC_OscConfig+0x532>
 80031aa:	e01a      	b.n	80031e2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ac:	f7ff f81e 	bl	80021ec <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031b2:	e00f      	b.n	80031d4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031b4:	f7ff f81a 	bl	80021ec <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d906      	bls.n	80031d4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e122      	b.n	8003410 <HAL_RCC_OscConfig+0x7bc>
 80031ca:	bf00      	nop
 80031cc:	40021000 	.word	0x40021000
 80031d0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031d4:	4b90      	ldr	r3, [pc, #576]	; (8003418 <HAL_RCC_OscConfig+0x7c4>)
 80031d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d1e8      	bne.n	80031b4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031e2:	7ffb      	ldrb	r3, [r7, #31]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d105      	bne.n	80031f4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031e8:	4b8b      	ldr	r3, [pc, #556]	; (8003418 <HAL_RCC_OscConfig+0x7c4>)
 80031ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ec:	4a8a      	ldr	r2, [pc, #552]	; (8003418 <HAL_RCC_OscConfig+0x7c4>)
 80031ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031f2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	f000 8108 	beq.w	800340e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003202:	2b02      	cmp	r3, #2
 8003204:	f040 80d0 	bne.w	80033a8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003208:	4b83      	ldr	r3, [pc, #524]	; (8003418 <HAL_RCC_OscConfig+0x7c4>)
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	f003 0203 	and.w	r2, r3, #3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003218:	429a      	cmp	r2, r3
 800321a:	d130      	bne.n	800327e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003226:	3b01      	subs	r3, #1
 8003228:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800322a:	429a      	cmp	r2, r3
 800322c:	d127      	bne.n	800327e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003238:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800323a:	429a      	cmp	r2, r3
 800323c:	d11f      	bne.n	800327e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003248:	2a07      	cmp	r2, #7
 800324a:	bf14      	ite	ne
 800324c:	2201      	movne	r2, #1
 800324e:	2200      	moveq	r2, #0
 8003250:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003252:	4293      	cmp	r3, r2
 8003254:	d113      	bne.n	800327e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003260:	085b      	lsrs	r3, r3, #1
 8003262:	3b01      	subs	r3, #1
 8003264:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003266:	429a      	cmp	r2, r3
 8003268:	d109      	bne.n	800327e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003274:	085b      	lsrs	r3, r3, #1
 8003276:	3b01      	subs	r3, #1
 8003278:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800327a:	429a      	cmp	r2, r3
 800327c:	d06e      	beq.n	800335c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	2b0c      	cmp	r3, #12
 8003282:	d069      	beq.n	8003358 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003284:	4b64      	ldr	r3, [pc, #400]	; (8003418 <HAL_RCC_OscConfig+0x7c4>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d105      	bne.n	800329c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003290:	4b61      	ldr	r3, [pc, #388]	; (8003418 <HAL_RCC_OscConfig+0x7c4>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d001      	beq.n	80032a0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e0b7      	b.n	8003410 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80032a0:	4b5d      	ldr	r3, [pc, #372]	; (8003418 <HAL_RCC_OscConfig+0x7c4>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a5c      	ldr	r2, [pc, #368]	; (8003418 <HAL_RCC_OscConfig+0x7c4>)
 80032a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032aa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80032ac:	f7fe ff9e 	bl	80021ec <HAL_GetTick>
 80032b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032b2:	e008      	b.n	80032c6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032b4:	f7fe ff9a 	bl	80021ec <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d901      	bls.n	80032c6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e0a4      	b.n	8003410 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032c6:	4b54      	ldr	r3, [pc, #336]	; (8003418 <HAL_RCC_OscConfig+0x7c4>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1f0      	bne.n	80032b4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032d2:	4b51      	ldr	r3, [pc, #324]	; (8003418 <HAL_RCC_OscConfig+0x7c4>)
 80032d4:	68da      	ldr	r2, [r3, #12]
 80032d6:	4b51      	ldr	r3, [pc, #324]	; (800341c <HAL_RCC_OscConfig+0x7c8>)
 80032d8:	4013      	ands	r3, r2
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80032e2:	3a01      	subs	r2, #1
 80032e4:	0112      	lsls	r2, r2, #4
 80032e6:	4311      	orrs	r1, r2
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80032ec:	0212      	lsls	r2, r2, #8
 80032ee:	4311      	orrs	r1, r2
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80032f4:	0852      	lsrs	r2, r2, #1
 80032f6:	3a01      	subs	r2, #1
 80032f8:	0552      	lsls	r2, r2, #21
 80032fa:	4311      	orrs	r1, r2
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003300:	0852      	lsrs	r2, r2, #1
 8003302:	3a01      	subs	r2, #1
 8003304:	0652      	lsls	r2, r2, #25
 8003306:	4311      	orrs	r1, r2
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800330c:	0912      	lsrs	r2, r2, #4
 800330e:	0452      	lsls	r2, r2, #17
 8003310:	430a      	orrs	r2, r1
 8003312:	4941      	ldr	r1, [pc, #260]	; (8003418 <HAL_RCC_OscConfig+0x7c4>)
 8003314:	4313      	orrs	r3, r2
 8003316:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003318:	4b3f      	ldr	r3, [pc, #252]	; (8003418 <HAL_RCC_OscConfig+0x7c4>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a3e      	ldr	r2, [pc, #248]	; (8003418 <HAL_RCC_OscConfig+0x7c4>)
 800331e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003322:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003324:	4b3c      	ldr	r3, [pc, #240]	; (8003418 <HAL_RCC_OscConfig+0x7c4>)
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	4a3b      	ldr	r2, [pc, #236]	; (8003418 <HAL_RCC_OscConfig+0x7c4>)
 800332a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800332e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003330:	f7fe ff5c 	bl	80021ec <HAL_GetTick>
 8003334:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003336:	e008      	b.n	800334a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003338:	f7fe ff58 	bl	80021ec <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	2b02      	cmp	r3, #2
 8003344:	d901      	bls.n	800334a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e062      	b.n	8003410 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800334a:	4b33      	ldr	r3, [pc, #204]	; (8003418 <HAL_RCC_OscConfig+0x7c4>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d0f0      	beq.n	8003338 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003356:	e05a      	b.n	800340e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e059      	b.n	8003410 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800335c:	4b2e      	ldr	r3, [pc, #184]	; (8003418 <HAL_RCC_OscConfig+0x7c4>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d152      	bne.n	800340e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003368:	4b2b      	ldr	r3, [pc, #172]	; (8003418 <HAL_RCC_OscConfig+0x7c4>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a2a      	ldr	r2, [pc, #168]	; (8003418 <HAL_RCC_OscConfig+0x7c4>)
 800336e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003372:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003374:	4b28      	ldr	r3, [pc, #160]	; (8003418 <HAL_RCC_OscConfig+0x7c4>)
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	4a27      	ldr	r2, [pc, #156]	; (8003418 <HAL_RCC_OscConfig+0x7c4>)
 800337a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800337e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003380:	f7fe ff34 	bl	80021ec <HAL_GetTick>
 8003384:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003386:	e008      	b.n	800339a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003388:	f7fe ff30 	bl	80021ec <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b02      	cmp	r3, #2
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e03a      	b.n	8003410 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800339a:	4b1f      	ldr	r3, [pc, #124]	; (8003418 <HAL_RCC_OscConfig+0x7c4>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d0f0      	beq.n	8003388 <HAL_RCC_OscConfig+0x734>
 80033a6:	e032      	b.n	800340e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	2b0c      	cmp	r3, #12
 80033ac:	d02d      	beq.n	800340a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ae:	4b1a      	ldr	r3, [pc, #104]	; (8003418 <HAL_RCC_OscConfig+0x7c4>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a19      	ldr	r2, [pc, #100]	; (8003418 <HAL_RCC_OscConfig+0x7c4>)
 80033b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033b8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80033ba:	4b17      	ldr	r3, [pc, #92]	; (8003418 <HAL_RCC_OscConfig+0x7c4>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d105      	bne.n	80033d2 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80033c6:	4b14      	ldr	r3, [pc, #80]	; (8003418 <HAL_RCC_OscConfig+0x7c4>)
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	4a13      	ldr	r2, [pc, #76]	; (8003418 <HAL_RCC_OscConfig+0x7c4>)
 80033cc:	f023 0303 	bic.w	r3, r3, #3
 80033d0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80033d2:	4b11      	ldr	r3, [pc, #68]	; (8003418 <HAL_RCC_OscConfig+0x7c4>)
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	4a10      	ldr	r2, [pc, #64]	; (8003418 <HAL_RCC_OscConfig+0x7c4>)
 80033d8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80033dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033e0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e2:	f7fe ff03 	bl	80021ec <HAL_GetTick>
 80033e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033e8:	e008      	b.n	80033fc <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033ea:	f7fe feff 	bl	80021ec <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d901      	bls.n	80033fc <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e009      	b.n	8003410 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033fc:	4b06      	ldr	r3, [pc, #24]	; (8003418 <HAL_RCC_OscConfig+0x7c4>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d1f0      	bne.n	80033ea <HAL_RCC_OscConfig+0x796>
 8003408:	e001      	b.n	800340e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e000      	b.n	8003410 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800340e:	2300      	movs	r3, #0
}
 8003410:	4618      	mov	r0, r3
 8003412:	3720      	adds	r7, #32
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	40021000 	.word	0x40021000
 800341c:	f99d808c 	.word	0xf99d808c

08003420 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d101      	bne.n	8003434 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e0c8      	b.n	80035c6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003434:	4b66      	ldr	r3, [pc, #408]	; (80035d0 <HAL_RCC_ClockConfig+0x1b0>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0307 	and.w	r3, r3, #7
 800343c:	683a      	ldr	r2, [r7, #0]
 800343e:	429a      	cmp	r2, r3
 8003440:	d910      	bls.n	8003464 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003442:	4b63      	ldr	r3, [pc, #396]	; (80035d0 <HAL_RCC_ClockConfig+0x1b0>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f023 0207 	bic.w	r2, r3, #7
 800344a:	4961      	ldr	r1, [pc, #388]	; (80035d0 <HAL_RCC_ClockConfig+0x1b0>)
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	4313      	orrs	r3, r2
 8003450:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003452:	4b5f      	ldr	r3, [pc, #380]	; (80035d0 <HAL_RCC_ClockConfig+0x1b0>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0307 	and.w	r3, r3, #7
 800345a:	683a      	ldr	r2, [r7, #0]
 800345c:	429a      	cmp	r2, r3
 800345e:	d001      	beq.n	8003464 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e0b0      	b.n	80035c6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0301 	and.w	r3, r3, #1
 800346c:	2b00      	cmp	r3, #0
 800346e:	d04c      	beq.n	800350a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	2b03      	cmp	r3, #3
 8003476:	d107      	bne.n	8003488 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003478:	4b56      	ldr	r3, [pc, #344]	; (80035d4 <HAL_RCC_ClockConfig+0x1b4>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d121      	bne.n	80034c8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e09e      	b.n	80035c6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	2b02      	cmp	r3, #2
 800348e:	d107      	bne.n	80034a0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003490:	4b50      	ldr	r3, [pc, #320]	; (80035d4 <HAL_RCC_ClockConfig+0x1b4>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d115      	bne.n	80034c8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e092      	b.n	80035c6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d107      	bne.n	80034b8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034a8:	4b4a      	ldr	r3, [pc, #296]	; (80035d4 <HAL_RCC_ClockConfig+0x1b4>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0302 	and.w	r3, r3, #2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d109      	bne.n	80034c8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e086      	b.n	80035c6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034b8:	4b46      	ldr	r3, [pc, #280]	; (80035d4 <HAL_RCC_ClockConfig+0x1b4>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d101      	bne.n	80034c8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e07e      	b.n	80035c6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80034c8:	4b42      	ldr	r3, [pc, #264]	; (80035d4 <HAL_RCC_ClockConfig+0x1b4>)
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	f023 0203 	bic.w	r2, r3, #3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	493f      	ldr	r1, [pc, #252]	; (80035d4 <HAL_RCC_ClockConfig+0x1b4>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034da:	f7fe fe87 	bl	80021ec <HAL_GetTick>
 80034de:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034e0:	e00a      	b.n	80034f8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034e2:	f7fe fe83 	bl	80021ec <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d901      	bls.n	80034f8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e066      	b.n	80035c6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034f8:	4b36      	ldr	r3, [pc, #216]	; (80035d4 <HAL_RCC_ClockConfig+0x1b4>)
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	f003 020c 	and.w	r2, r3, #12
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	429a      	cmp	r2, r3
 8003508:	d1eb      	bne.n	80034e2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d008      	beq.n	8003528 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003516:	4b2f      	ldr	r3, [pc, #188]	; (80035d4 <HAL_RCC_ClockConfig+0x1b4>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	492c      	ldr	r1, [pc, #176]	; (80035d4 <HAL_RCC_ClockConfig+0x1b4>)
 8003524:	4313      	orrs	r3, r2
 8003526:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003528:	4b29      	ldr	r3, [pc, #164]	; (80035d0 <HAL_RCC_ClockConfig+0x1b0>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0307 	and.w	r3, r3, #7
 8003530:	683a      	ldr	r2, [r7, #0]
 8003532:	429a      	cmp	r2, r3
 8003534:	d210      	bcs.n	8003558 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003536:	4b26      	ldr	r3, [pc, #152]	; (80035d0 <HAL_RCC_ClockConfig+0x1b0>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f023 0207 	bic.w	r2, r3, #7
 800353e:	4924      	ldr	r1, [pc, #144]	; (80035d0 <HAL_RCC_ClockConfig+0x1b0>)
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	4313      	orrs	r3, r2
 8003544:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003546:	4b22      	ldr	r3, [pc, #136]	; (80035d0 <HAL_RCC_ClockConfig+0x1b0>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0307 	and.w	r3, r3, #7
 800354e:	683a      	ldr	r2, [r7, #0]
 8003550:	429a      	cmp	r2, r3
 8003552:	d001      	beq.n	8003558 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e036      	b.n	80035c6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0304 	and.w	r3, r3, #4
 8003560:	2b00      	cmp	r3, #0
 8003562:	d008      	beq.n	8003576 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003564:	4b1b      	ldr	r3, [pc, #108]	; (80035d4 <HAL_RCC_ClockConfig+0x1b4>)
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	4918      	ldr	r1, [pc, #96]	; (80035d4 <HAL_RCC_ClockConfig+0x1b4>)
 8003572:	4313      	orrs	r3, r2
 8003574:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0308 	and.w	r3, r3, #8
 800357e:	2b00      	cmp	r3, #0
 8003580:	d009      	beq.n	8003596 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003582:	4b14      	ldr	r3, [pc, #80]	; (80035d4 <HAL_RCC_ClockConfig+0x1b4>)
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	00db      	lsls	r3, r3, #3
 8003590:	4910      	ldr	r1, [pc, #64]	; (80035d4 <HAL_RCC_ClockConfig+0x1b4>)
 8003592:	4313      	orrs	r3, r2
 8003594:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003596:	f000 f825 	bl	80035e4 <HAL_RCC_GetSysClockFreq>
 800359a:	4602      	mov	r2, r0
 800359c:	4b0d      	ldr	r3, [pc, #52]	; (80035d4 <HAL_RCC_ClockConfig+0x1b4>)
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	091b      	lsrs	r3, r3, #4
 80035a2:	f003 030f 	and.w	r3, r3, #15
 80035a6:	490c      	ldr	r1, [pc, #48]	; (80035d8 <HAL_RCC_ClockConfig+0x1b8>)
 80035a8:	5ccb      	ldrb	r3, [r1, r3]
 80035aa:	f003 031f 	and.w	r3, r3, #31
 80035ae:	fa22 f303 	lsr.w	r3, r2, r3
 80035b2:	4a0a      	ldr	r2, [pc, #40]	; (80035dc <HAL_RCC_ClockConfig+0x1bc>)
 80035b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80035b6:	4b0a      	ldr	r3, [pc, #40]	; (80035e0 <HAL_RCC_ClockConfig+0x1c0>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7fe fdc6 	bl	800214c <HAL_InitTick>
 80035c0:	4603      	mov	r3, r0
 80035c2:	72fb      	strb	r3, [r7, #11]

  return status;
 80035c4:	7afb      	ldrb	r3, [r7, #11]
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3710      	adds	r7, #16
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	40022000 	.word	0x40022000
 80035d4:	40021000 	.word	0x40021000
 80035d8:	080085dc 	.word	0x080085dc
 80035dc:	20000080 	.word	0x20000080
 80035e0:	20000084 	.word	0x20000084

080035e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b089      	sub	sp, #36	; 0x24
 80035e8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80035ea:	2300      	movs	r3, #0
 80035ec:	61fb      	str	r3, [r7, #28]
 80035ee:	2300      	movs	r3, #0
 80035f0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035f2:	4b3e      	ldr	r3, [pc, #248]	; (80036ec <HAL_RCC_GetSysClockFreq+0x108>)
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f003 030c 	and.w	r3, r3, #12
 80035fa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035fc:	4b3b      	ldr	r3, [pc, #236]	; (80036ec <HAL_RCC_GetSysClockFreq+0x108>)
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	f003 0303 	and.w	r3, r3, #3
 8003604:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d005      	beq.n	8003618 <HAL_RCC_GetSysClockFreq+0x34>
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	2b0c      	cmp	r3, #12
 8003610:	d121      	bne.n	8003656 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2b01      	cmp	r3, #1
 8003616:	d11e      	bne.n	8003656 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003618:	4b34      	ldr	r3, [pc, #208]	; (80036ec <HAL_RCC_GetSysClockFreq+0x108>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0308 	and.w	r3, r3, #8
 8003620:	2b00      	cmp	r3, #0
 8003622:	d107      	bne.n	8003634 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003624:	4b31      	ldr	r3, [pc, #196]	; (80036ec <HAL_RCC_GetSysClockFreq+0x108>)
 8003626:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800362a:	0a1b      	lsrs	r3, r3, #8
 800362c:	f003 030f 	and.w	r3, r3, #15
 8003630:	61fb      	str	r3, [r7, #28]
 8003632:	e005      	b.n	8003640 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003634:	4b2d      	ldr	r3, [pc, #180]	; (80036ec <HAL_RCC_GetSysClockFreq+0x108>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	091b      	lsrs	r3, r3, #4
 800363a:	f003 030f 	and.w	r3, r3, #15
 800363e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003640:	4a2b      	ldr	r2, [pc, #172]	; (80036f0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003648:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d10d      	bne.n	800366c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003654:	e00a      	b.n	800366c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	2b04      	cmp	r3, #4
 800365a:	d102      	bne.n	8003662 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800365c:	4b25      	ldr	r3, [pc, #148]	; (80036f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800365e:	61bb      	str	r3, [r7, #24]
 8003660:	e004      	b.n	800366c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	2b08      	cmp	r3, #8
 8003666:	d101      	bne.n	800366c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003668:	4b23      	ldr	r3, [pc, #140]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x114>)
 800366a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	2b0c      	cmp	r3, #12
 8003670:	d134      	bne.n	80036dc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003672:	4b1e      	ldr	r3, [pc, #120]	; (80036ec <HAL_RCC_GetSysClockFreq+0x108>)
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	f003 0303 	and.w	r3, r3, #3
 800367a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	2b02      	cmp	r3, #2
 8003680:	d003      	beq.n	800368a <HAL_RCC_GetSysClockFreq+0xa6>
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	2b03      	cmp	r3, #3
 8003686:	d003      	beq.n	8003690 <HAL_RCC_GetSysClockFreq+0xac>
 8003688:	e005      	b.n	8003696 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800368a:	4b1a      	ldr	r3, [pc, #104]	; (80036f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800368c:	617b      	str	r3, [r7, #20]
      break;
 800368e:	e005      	b.n	800369c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003690:	4b19      	ldr	r3, [pc, #100]	; (80036f8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003692:	617b      	str	r3, [r7, #20]
      break;
 8003694:	e002      	b.n	800369c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	617b      	str	r3, [r7, #20]
      break;
 800369a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800369c:	4b13      	ldr	r3, [pc, #76]	; (80036ec <HAL_RCC_GetSysClockFreq+0x108>)
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	091b      	lsrs	r3, r3, #4
 80036a2:	f003 0307 	and.w	r3, r3, #7
 80036a6:	3301      	adds	r3, #1
 80036a8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80036aa:	4b10      	ldr	r3, [pc, #64]	; (80036ec <HAL_RCC_GetSysClockFreq+0x108>)
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	0a1b      	lsrs	r3, r3, #8
 80036b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036b4:	697a      	ldr	r2, [r7, #20]
 80036b6:	fb02 f203 	mul.w	r2, r2, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80036c0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80036c2:	4b0a      	ldr	r3, [pc, #40]	; (80036ec <HAL_RCC_GetSysClockFreq+0x108>)
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	0e5b      	lsrs	r3, r3, #25
 80036c8:	f003 0303 	and.w	r3, r3, #3
 80036cc:	3301      	adds	r3, #1
 80036ce:	005b      	lsls	r3, r3, #1
 80036d0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80036d2:	697a      	ldr	r2, [r7, #20]
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80036da:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80036dc:	69bb      	ldr	r3, [r7, #24]
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3724      	adds	r7, #36	; 0x24
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	40021000 	.word	0x40021000
 80036f0:	080085f4 	.word	0x080085f4
 80036f4:	00f42400 	.word	0x00f42400
 80036f8:	007a1200 	.word	0x007a1200

080036fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036fc:	b480      	push	{r7}
 80036fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003700:	4b03      	ldr	r3, [pc, #12]	; (8003710 <HAL_RCC_GetHCLKFreq+0x14>)
 8003702:	681b      	ldr	r3, [r3, #0]
}
 8003704:	4618      	mov	r0, r3
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	20000080 	.word	0x20000080

08003714 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003718:	f7ff fff0 	bl	80036fc <HAL_RCC_GetHCLKFreq>
 800371c:	4602      	mov	r2, r0
 800371e:	4b06      	ldr	r3, [pc, #24]	; (8003738 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	0a1b      	lsrs	r3, r3, #8
 8003724:	f003 0307 	and.w	r3, r3, #7
 8003728:	4904      	ldr	r1, [pc, #16]	; (800373c <HAL_RCC_GetPCLK1Freq+0x28>)
 800372a:	5ccb      	ldrb	r3, [r1, r3]
 800372c:	f003 031f 	and.w	r3, r3, #31
 8003730:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003734:	4618      	mov	r0, r3
 8003736:	bd80      	pop	{r7, pc}
 8003738:	40021000 	.word	0x40021000
 800373c:	080085ec 	.word	0x080085ec

08003740 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003744:	f7ff ffda 	bl	80036fc <HAL_RCC_GetHCLKFreq>
 8003748:	4602      	mov	r2, r0
 800374a:	4b06      	ldr	r3, [pc, #24]	; (8003764 <HAL_RCC_GetPCLK2Freq+0x24>)
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	0adb      	lsrs	r3, r3, #11
 8003750:	f003 0307 	and.w	r3, r3, #7
 8003754:	4904      	ldr	r1, [pc, #16]	; (8003768 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003756:	5ccb      	ldrb	r3, [r1, r3]
 8003758:	f003 031f 	and.w	r3, r3, #31
 800375c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003760:	4618      	mov	r0, r3
 8003762:	bd80      	pop	{r7, pc}
 8003764:	40021000 	.word	0x40021000
 8003768:	080085ec 	.word	0x080085ec

0800376c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b086      	sub	sp, #24
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003774:	2300      	movs	r3, #0
 8003776:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003778:	4b2a      	ldr	r3, [pc, #168]	; (8003824 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800377a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800377c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d003      	beq.n	800378c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003784:	f7ff fa02 	bl	8002b8c <HAL_PWREx_GetVoltageRange>
 8003788:	6178      	str	r0, [r7, #20]
 800378a:	e014      	b.n	80037b6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800378c:	4b25      	ldr	r3, [pc, #148]	; (8003824 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800378e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003790:	4a24      	ldr	r2, [pc, #144]	; (8003824 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003792:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003796:	6593      	str	r3, [r2, #88]	; 0x58
 8003798:	4b22      	ldr	r3, [pc, #136]	; (8003824 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800379a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800379c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037a0:	60fb      	str	r3, [r7, #12]
 80037a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80037a4:	f7ff f9f2 	bl	8002b8c <HAL_PWREx_GetVoltageRange>
 80037a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80037aa:	4b1e      	ldr	r3, [pc, #120]	; (8003824 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ae:	4a1d      	ldr	r2, [pc, #116]	; (8003824 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037b4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037bc:	d10b      	bne.n	80037d6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2b80      	cmp	r3, #128	; 0x80
 80037c2:	d919      	bls.n	80037f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2ba0      	cmp	r3, #160	; 0xa0
 80037c8:	d902      	bls.n	80037d0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80037ca:	2302      	movs	r3, #2
 80037cc:	613b      	str	r3, [r7, #16]
 80037ce:	e013      	b.n	80037f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80037d0:	2301      	movs	r3, #1
 80037d2:	613b      	str	r3, [r7, #16]
 80037d4:	e010      	b.n	80037f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2b80      	cmp	r3, #128	; 0x80
 80037da:	d902      	bls.n	80037e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80037dc:	2303      	movs	r3, #3
 80037de:	613b      	str	r3, [r7, #16]
 80037e0:	e00a      	b.n	80037f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2b80      	cmp	r3, #128	; 0x80
 80037e6:	d102      	bne.n	80037ee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80037e8:	2302      	movs	r3, #2
 80037ea:	613b      	str	r3, [r7, #16]
 80037ec:	e004      	b.n	80037f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2b70      	cmp	r3, #112	; 0x70
 80037f2:	d101      	bne.n	80037f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80037f4:	2301      	movs	r3, #1
 80037f6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80037f8:	4b0b      	ldr	r3, [pc, #44]	; (8003828 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f023 0207 	bic.w	r2, r3, #7
 8003800:	4909      	ldr	r1, [pc, #36]	; (8003828 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	4313      	orrs	r3, r2
 8003806:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003808:	4b07      	ldr	r3, [pc, #28]	; (8003828 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0307 	and.w	r3, r3, #7
 8003810:	693a      	ldr	r2, [r7, #16]
 8003812:	429a      	cmp	r2, r3
 8003814:	d001      	beq.n	800381a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e000      	b.n	800381c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800381a:	2300      	movs	r3, #0
}
 800381c:	4618      	mov	r0, r3
 800381e:	3718      	adds	r7, #24
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	40021000 	.word	0x40021000
 8003828:	40022000 	.word	0x40022000

0800382c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b086      	sub	sp, #24
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003834:	2300      	movs	r3, #0
 8003836:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003838:	2300      	movs	r3, #0
 800383a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003844:	2b00      	cmp	r3, #0
 8003846:	d041      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800384c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003850:	d02a      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003852:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003856:	d824      	bhi.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003858:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800385c:	d008      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800385e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003862:	d81e      	bhi.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00a      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003868:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800386c:	d010      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800386e:	e018      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003870:	4b86      	ldr	r3, [pc, #536]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	4a85      	ldr	r2, [pc, #532]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003876:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800387a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800387c:	e015      	b.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	3304      	adds	r3, #4
 8003882:	2100      	movs	r1, #0
 8003884:	4618      	mov	r0, r3
 8003886:	f000 facb 	bl	8003e20 <RCCEx_PLLSAI1_Config>
 800388a:	4603      	mov	r3, r0
 800388c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800388e:	e00c      	b.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	3320      	adds	r3, #32
 8003894:	2100      	movs	r1, #0
 8003896:	4618      	mov	r0, r3
 8003898:	f000 fbb6 	bl	8004008 <RCCEx_PLLSAI2_Config>
 800389c:	4603      	mov	r3, r0
 800389e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80038a0:	e003      	b.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	74fb      	strb	r3, [r7, #19]
      break;
 80038a6:	e000      	b.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80038a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038aa:	7cfb      	ldrb	r3, [r7, #19]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d10b      	bne.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038b0:	4b76      	ldr	r3, [pc, #472]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038be:	4973      	ldr	r1, [pc, #460]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80038c6:	e001      	b.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038c8:	7cfb      	ldrb	r3, [r7, #19]
 80038ca:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d041      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038dc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80038e0:	d02a      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80038e2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80038e6:	d824      	bhi.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80038e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80038ec:	d008      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80038ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80038f2:	d81e      	bhi.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d00a      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80038f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038fc:	d010      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80038fe:	e018      	b.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003900:	4b62      	ldr	r3, [pc, #392]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	4a61      	ldr	r2, [pc, #388]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003906:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800390a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800390c:	e015      	b.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	3304      	adds	r3, #4
 8003912:	2100      	movs	r1, #0
 8003914:	4618      	mov	r0, r3
 8003916:	f000 fa83 	bl	8003e20 <RCCEx_PLLSAI1_Config>
 800391a:	4603      	mov	r3, r0
 800391c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800391e:	e00c      	b.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	3320      	adds	r3, #32
 8003924:	2100      	movs	r1, #0
 8003926:	4618      	mov	r0, r3
 8003928:	f000 fb6e 	bl	8004008 <RCCEx_PLLSAI2_Config>
 800392c:	4603      	mov	r3, r0
 800392e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003930:	e003      	b.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	74fb      	strb	r3, [r7, #19]
      break;
 8003936:	e000      	b.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003938:	bf00      	nop
    }

    if(ret == HAL_OK)
 800393a:	7cfb      	ldrb	r3, [r7, #19]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d10b      	bne.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003940:	4b52      	ldr	r3, [pc, #328]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003946:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800394e:	494f      	ldr	r1, [pc, #316]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003950:	4313      	orrs	r3, r2
 8003952:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003956:	e001      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003958:	7cfb      	ldrb	r3, [r7, #19]
 800395a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003964:	2b00      	cmp	r3, #0
 8003966:	f000 80a0 	beq.w	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800396a:	2300      	movs	r3, #0
 800396c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800396e:	4b47      	ldr	r3, [pc, #284]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d101      	bne.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800397a:	2301      	movs	r3, #1
 800397c:	e000      	b.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800397e:	2300      	movs	r3, #0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d00d      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003984:	4b41      	ldr	r3, [pc, #260]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003988:	4a40      	ldr	r2, [pc, #256]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800398a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800398e:	6593      	str	r3, [r2, #88]	; 0x58
 8003990:	4b3e      	ldr	r3, [pc, #248]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003994:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003998:	60bb      	str	r3, [r7, #8]
 800399a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800399c:	2301      	movs	r3, #1
 800399e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039a0:	4b3b      	ldr	r3, [pc, #236]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a3a      	ldr	r2, [pc, #232]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80039a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80039ac:	f7fe fc1e 	bl	80021ec <HAL_GetTick>
 80039b0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80039b2:	e009      	b.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039b4:	f7fe fc1a 	bl	80021ec <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d902      	bls.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	74fb      	strb	r3, [r7, #19]
        break;
 80039c6:	e005      	b.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80039c8:	4b31      	ldr	r3, [pc, #196]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d0ef      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80039d4:	7cfb      	ldrb	r3, [r7, #19]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d15c      	bne.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80039da:	4b2c      	ldr	r3, [pc, #176]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039e4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d01f      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039f2:	697a      	ldr	r2, [r7, #20]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d019      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80039f8:	4b24      	ldr	r3, [pc, #144]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a02:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a04:	4b21      	ldr	r3, [pc, #132]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a0a:	4a20      	ldr	r2, [pc, #128]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a14:	4b1d      	ldr	r3, [pc, #116]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a1a:	4a1c      	ldr	r2, [pc, #112]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a24:	4a19      	ldr	r2, [pc, #100]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	f003 0301 	and.w	r3, r3, #1
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d016      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a36:	f7fe fbd9 	bl	80021ec <HAL_GetTick>
 8003a3a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a3c:	e00b      	b.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a3e:	f7fe fbd5 	bl	80021ec <HAL_GetTick>
 8003a42:	4602      	mov	r2, r0
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d902      	bls.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	74fb      	strb	r3, [r7, #19]
            break;
 8003a54:	e006      	b.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a56:	4b0d      	ldr	r3, [pc, #52]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a5c:	f003 0302 	and.w	r3, r3, #2
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d0ec      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003a64:	7cfb      	ldrb	r3, [r7, #19]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d10c      	bne.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a6a:	4b08      	ldr	r3, [pc, #32]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a7a:	4904      	ldr	r1, [pc, #16]	; (8003a8c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003a82:	e009      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a84:	7cfb      	ldrb	r3, [r7, #19]
 8003a86:	74bb      	strb	r3, [r7, #18]
 8003a88:	e006      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003a8a:	bf00      	nop
 8003a8c:	40021000 	.word	0x40021000
 8003a90:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a94:	7cfb      	ldrb	r3, [r7, #19]
 8003a96:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a98:	7c7b      	ldrb	r3, [r7, #17]
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d105      	bne.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a9e:	4b9e      	ldr	r3, [pc, #632]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aa2:	4a9d      	ldr	r2, [pc, #628]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aa4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003aa8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d00a      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ab6:	4b98      	ldr	r3, [pc, #608]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003abc:	f023 0203 	bic.w	r2, r3, #3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac4:	4994      	ldr	r1, [pc, #592]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0302 	and.w	r3, r3, #2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d00a      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ad8:	4b8f      	ldr	r3, [pc, #572]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ade:	f023 020c 	bic.w	r2, r3, #12
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ae6:	498c      	ldr	r1, [pc, #560]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0304 	and.w	r3, r3, #4
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00a      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003afa:	4b87      	ldr	r3, [pc, #540]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b00:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b08:	4983      	ldr	r1, [pc, #524]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0308 	and.w	r3, r3, #8
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d00a      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b1c:	4b7e      	ldr	r3, [pc, #504]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b22:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b2a:	497b      	ldr	r1, [pc, #492]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0310 	and.w	r3, r3, #16
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00a      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003b3e:	4b76      	ldr	r3, [pc, #472]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b4c:	4972      	ldr	r1, [pc, #456]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0320 	and.w	r3, r3, #32
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d00a      	beq.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b60:	4b6d      	ldr	r3, [pc, #436]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b66:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b6e:	496a      	ldr	r1, [pc, #424]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00a      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b82:	4b65      	ldr	r3, [pc, #404]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b88:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b90:	4961      	ldr	r1, [pc, #388]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d00a      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ba4:	4b5c      	ldr	r3, [pc, #368]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003baa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bb2:	4959      	ldr	r1, [pc, #356]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00a      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003bc6:	4b54      	ldr	r3, [pc, #336]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bcc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bd4:	4950      	ldr	r1, [pc, #320]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d00a      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003be8:	4b4b      	ldr	r3, [pc, #300]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bf6:	4948      	ldr	r1, [pc, #288]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d00a      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c0a:	4b43      	ldr	r3, [pc, #268]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c10:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c18:	493f      	ldr	r1, [pc, #252]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d028      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c2c:	4b3a      	ldr	r3, [pc, #232]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c32:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c3a:	4937      	ldr	r1, [pc, #220]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c4a:	d106      	bne.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c4c:	4b32      	ldr	r3, [pc, #200]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	4a31      	ldr	r2, [pc, #196]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c56:	60d3      	str	r3, [r2, #12]
 8003c58:	e011      	b.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c5e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c62:	d10c      	bne.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	3304      	adds	r3, #4
 8003c68:	2101      	movs	r1, #1
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f000 f8d8 	bl	8003e20 <RCCEx_PLLSAI1_Config>
 8003c70:	4603      	mov	r3, r0
 8003c72:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003c74:	7cfb      	ldrb	r3, [r7, #19]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d001      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003c7a:	7cfb      	ldrb	r3, [r7, #19]
 8003c7c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d028      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003c8a:	4b23      	ldr	r3, [pc, #140]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c90:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c98:	491f      	ldr	r1, [pc, #124]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ca8:	d106      	bne.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003caa:	4b1b      	ldr	r3, [pc, #108]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	4a1a      	ldr	r2, [pc, #104]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cb0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cb4:	60d3      	str	r3, [r2, #12]
 8003cb6:	e011      	b.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cbc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003cc0:	d10c      	bne.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	3304      	adds	r3, #4
 8003cc6:	2101      	movs	r1, #1
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f000 f8a9 	bl	8003e20 <RCCEx_PLLSAI1_Config>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003cd2:	7cfb      	ldrb	r3, [r7, #19]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d001      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003cd8:	7cfb      	ldrb	r3, [r7, #19]
 8003cda:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d02b      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ce8:	4b0b      	ldr	r3, [pc, #44]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cf6:	4908      	ldr	r1, [pc, #32]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d06:	d109      	bne.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d08:	4b03      	ldr	r3, [pc, #12]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	4a02      	ldr	r2, [pc, #8]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d12:	60d3      	str	r3, [r2, #12]
 8003d14:	e014      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003d16:	bf00      	nop
 8003d18:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d20:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d24:	d10c      	bne.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	3304      	adds	r3, #4
 8003d2a:	2101      	movs	r1, #1
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f000 f877 	bl	8003e20 <RCCEx_PLLSAI1_Config>
 8003d32:	4603      	mov	r3, r0
 8003d34:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d36:	7cfb      	ldrb	r3, [r7, #19]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d001      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003d3c:	7cfb      	ldrb	r3, [r7, #19]
 8003d3e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d02f      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d4c:	4b2b      	ldr	r3, [pc, #172]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d52:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d5a:	4928      	ldr	r1, [pc, #160]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d6a:	d10d      	bne.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	3304      	adds	r3, #4
 8003d70:	2102      	movs	r1, #2
 8003d72:	4618      	mov	r0, r3
 8003d74:	f000 f854 	bl	8003e20 <RCCEx_PLLSAI1_Config>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d7c:	7cfb      	ldrb	r3, [r7, #19]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d014      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003d82:	7cfb      	ldrb	r3, [r7, #19]
 8003d84:	74bb      	strb	r3, [r7, #18]
 8003d86:	e011      	b.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d90:	d10c      	bne.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	3320      	adds	r3, #32
 8003d96:	2102      	movs	r1, #2
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f000 f935 	bl	8004008 <RCCEx_PLLSAI2_Config>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003da2:	7cfb      	ldrb	r3, [r7, #19]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d001      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003da8:	7cfb      	ldrb	r3, [r7, #19]
 8003daa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00a      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003db8:	4b10      	ldr	r3, [pc, #64]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dbe:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003dc6:	490d      	ldr	r1, [pc, #52]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d00b      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003dda:	4b08      	ldr	r3, [pc, #32]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003de0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dea:	4904      	ldr	r1, [pc, #16]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003dec:	4313      	orrs	r3, r2
 8003dee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003df2:	7cbb      	ldrb	r3, [r7, #18]
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3718      	adds	r7, #24
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	40021000 	.word	0x40021000

08003e00 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003e00:	b480      	push	{r7}
 8003e02:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003e04:	4b05      	ldr	r3, [pc, #20]	; (8003e1c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a04      	ldr	r2, [pc, #16]	; (8003e1c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003e0a:	f043 0304 	orr.w	r3, r3, #4
 8003e0e:	6013      	str	r3, [r2, #0]
}
 8003e10:	bf00      	nop
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop
 8003e1c:	40021000 	.word	0x40021000

08003e20 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003e2e:	4b75      	ldr	r3, [pc, #468]	; (8004004 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	f003 0303 	and.w	r3, r3, #3
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d018      	beq.n	8003e6c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003e3a:	4b72      	ldr	r3, [pc, #456]	; (8004004 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	f003 0203 	and.w	r2, r3, #3
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d10d      	bne.n	8003e66 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
       ||
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d009      	beq.n	8003e66 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003e52:	4b6c      	ldr	r3, [pc, #432]	; (8004004 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	091b      	lsrs	r3, r3, #4
 8003e58:	f003 0307 	and.w	r3, r3, #7
 8003e5c:	1c5a      	adds	r2, r3, #1
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685b      	ldr	r3, [r3, #4]
       ||
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d047      	beq.n	8003ef6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	73fb      	strb	r3, [r7, #15]
 8003e6a:	e044      	b.n	8003ef6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2b03      	cmp	r3, #3
 8003e72:	d018      	beq.n	8003ea6 <RCCEx_PLLSAI1_Config+0x86>
 8003e74:	2b03      	cmp	r3, #3
 8003e76:	d825      	bhi.n	8003ec4 <RCCEx_PLLSAI1_Config+0xa4>
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d002      	beq.n	8003e82 <RCCEx_PLLSAI1_Config+0x62>
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d009      	beq.n	8003e94 <RCCEx_PLLSAI1_Config+0x74>
 8003e80:	e020      	b.n	8003ec4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003e82:	4b60      	ldr	r3, [pc, #384]	; (8004004 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0302 	and.w	r3, r3, #2
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d11d      	bne.n	8003eca <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e92:	e01a      	b.n	8003eca <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003e94:	4b5b      	ldr	r3, [pc, #364]	; (8004004 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d116      	bne.n	8003ece <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ea4:	e013      	b.n	8003ece <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003ea6:	4b57      	ldr	r3, [pc, #348]	; (8004004 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d10f      	bne.n	8003ed2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003eb2:	4b54      	ldr	r3, [pc, #336]	; (8004004 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d109      	bne.n	8003ed2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003ec2:	e006      	b.n	8003ed2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ec8:	e004      	b.n	8003ed4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003eca:	bf00      	nop
 8003ecc:	e002      	b.n	8003ed4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003ece:	bf00      	nop
 8003ed0:	e000      	b.n	8003ed4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003ed2:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ed4:	7bfb      	ldrb	r3, [r7, #15]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d10d      	bne.n	8003ef6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003eda:	4b4a      	ldr	r3, [pc, #296]	; (8004004 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6819      	ldr	r1, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	3b01      	subs	r3, #1
 8003eec:	011b      	lsls	r3, r3, #4
 8003eee:	430b      	orrs	r3, r1
 8003ef0:	4944      	ldr	r1, [pc, #272]	; (8004004 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003ef6:	7bfb      	ldrb	r3, [r7, #15]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d17d      	bne.n	8003ff8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003efc:	4b41      	ldr	r3, [pc, #260]	; (8004004 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a40      	ldr	r2, [pc, #256]	; (8004004 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f02:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003f06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f08:	f7fe f970 	bl	80021ec <HAL_GetTick>
 8003f0c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f0e:	e009      	b.n	8003f24 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f10:	f7fe f96c 	bl	80021ec <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d902      	bls.n	8003f24 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	73fb      	strb	r3, [r7, #15]
        break;
 8003f22:	e005      	b.n	8003f30 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f24:	4b37      	ldr	r3, [pc, #220]	; (8004004 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d1ef      	bne.n	8003f10 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003f30:	7bfb      	ldrb	r3, [r7, #15]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d160      	bne.n	8003ff8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d111      	bne.n	8003f60 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f3c:	4b31      	ldr	r3, [pc, #196]	; (8004004 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f3e:	691b      	ldr	r3, [r3, #16]
 8003f40:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003f44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	6892      	ldr	r2, [r2, #8]
 8003f4c:	0211      	lsls	r1, r2, #8
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	68d2      	ldr	r2, [r2, #12]
 8003f52:	0912      	lsrs	r2, r2, #4
 8003f54:	0452      	lsls	r2, r2, #17
 8003f56:	430a      	orrs	r2, r1
 8003f58:	492a      	ldr	r1, [pc, #168]	; (8004004 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	610b      	str	r3, [r1, #16]
 8003f5e:	e027      	b.n	8003fb0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d112      	bne.n	8003f8c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f66:	4b27      	ldr	r3, [pc, #156]	; (8004004 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003f6e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	6892      	ldr	r2, [r2, #8]
 8003f76:	0211      	lsls	r1, r2, #8
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	6912      	ldr	r2, [r2, #16]
 8003f7c:	0852      	lsrs	r2, r2, #1
 8003f7e:	3a01      	subs	r2, #1
 8003f80:	0552      	lsls	r2, r2, #21
 8003f82:	430a      	orrs	r2, r1
 8003f84:	491f      	ldr	r1, [pc, #124]	; (8004004 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f86:	4313      	orrs	r3, r2
 8003f88:	610b      	str	r3, [r1, #16]
 8003f8a:	e011      	b.n	8003fb0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f8c:	4b1d      	ldr	r3, [pc, #116]	; (8004004 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003f94:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	6892      	ldr	r2, [r2, #8]
 8003f9c:	0211      	lsls	r1, r2, #8
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	6952      	ldr	r2, [r2, #20]
 8003fa2:	0852      	lsrs	r2, r2, #1
 8003fa4:	3a01      	subs	r2, #1
 8003fa6:	0652      	lsls	r2, r2, #25
 8003fa8:	430a      	orrs	r2, r1
 8003faa:	4916      	ldr	r1, [pc, #88]	; (8004004 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003fb0:	4b14      	ldr	r3, [pc, #80]	; (8004004 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a13      	ldr	r2, [pc, #76]	; (8004004 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fb6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003fba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fbc:	f7fe f916 	bl	80021ec <HAL_GetTick>
 8003fc0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003fc2:	e009      	b.n	8003fd8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003fc4:	f7fe f912 	bl	80021ec <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d902      	bls.n	8003fd8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	73fb      	strb	r3, [r7, #15]
          break;
 8003fd6:	e005      	b.n	8003fe4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003fd8:	4b0a      	ldr	r3, [pc, #40]	; (8004004 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d0ef      	beq.n	8003fc4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003fe4:	7bfb      	ldrb	r3, [r7, #15]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d106      	bne.n	8003ff8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003fea:	4b06      	ldr	r3, [pc, #24]	; (8004004 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fec:	691a      	ldr	r2, [r3, #16]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	4904      	ldr	r1, [pc, #16]	; (8004004 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3710      	adds	r7, #16
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	40021000 	.word	0x40021000

08004008 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004012:	2300      	movs	r3, #0
 8004014:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004016:	4b6a      	ldr	r3, [pc, #424]	; (80041c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	f003 0303 	and.w	r3, r3, #3
 800401e:	2b00      	cmp	r3, #0
 8004020:	d018      	beq.n	8004054 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004022:	4b67      	ldr	r3, [pc, #412]	; (80041c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	f003 0203 	and.w	r2, r3, #3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	429a      	cmp	r2, r3
 8004030:	d10d      	bne.n	800404e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
       ||
 8004036:	2b00      	cmp	r3, #0
 8004038:	d009      	beq.n	800404e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800403a:	4b61      	ldr	r3, [pc, #388]	; (80041c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	091b      	lsrs	r3, r3, #4
 8004040:	f003 0307 	and.w	r3, r3, #7
 8004044:	1c5a      	adds	r2, r3, #1
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
       ||
 800404a:	429a      	cmp	r2, r3
 800404c:	d047      	beq.n	80040de <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	73fb      	strb	r3, [r7, #15]
 8004052:	e044      	b.n	80040de <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2b03      	cmp	r3, #3
 800405a:	d018      	beq.n	800408e <RCCEx_PLLSAI2_Config+0x86>
 800405c:	2b03      	cmp	r3, #3
 800405e:	d825      	bhi.n	80040ac <RCCEx_PLLSAI2_Config+0xa4>
 8004060:	2b01      	cmp	r3, #1
 8004062:	d002      	beq.n	800406a <RCCEx_PLLSAI2_Config+0x62>
 8004064:	2b02      	cmp	r3, #2
 8004066:	d009      	beq.n	800407c <RCCEx_PLLSAI2_Config+0x74>
 8004068:	e020      	b.n	80040ac <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800406a:	4b55      	ldr	r3, [pc, #340]	; (80041c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0302 	and.w	r3, r3, #2
 8004072:	2b00      	cmp	r3, #0
 8004074:	d11d      	bne.n	80040b2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800407a:	e01a      	b.n	80040b2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800407c:	4b50      	ldr	r3, [pc, #320]	; (80041c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004084:	2b00      	cmp	r3, #0
 8004086:	d116      	bne.n	80040b6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800408c:	e013      	b.n	80040b6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800408e:	4b4c      	ldr	r3, [pc, #304]	; (80041c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d10f      	bne.n	80040ba <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800409a:	4b49      	ldr	r3, [pc, #292]	; (80041c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d109      	bne.n	80040ba <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80040aa:	e006      	b.n	80040ba <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	73fb      	strb	r3, [r7, #15]
      break;
 80040b0:	e004      	b.n	80040bc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80040b2:	bf00      	nop
 80040b4:	e002      	b.n	80040bc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80040b6:	bf00      	nop
 80040b8:	e000      	b.n	80040bc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80040ba:	bf00      	nop
    }

    if(status == HAL_OK)
 80040bc:	7bfb      	ldrb	r3, [r7, #15]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d10d      	bne.n	80040de <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80040c2:	4b3f      	ldr	r3, [pc, #252]	; (80041c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6819      	ldr	r1, [r3, #0]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	3b01      	subs	r3, #1
 80040d4:	011b      	lsls	r3, r3, #4
 80040d6:	430b      	orrs	r3, r1
 80040d8:	4939      	ldr	r1, [pc, #228]	; (80041c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80040de:	7bfb      	ldrb	r3, [r7, #15]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d167      	bne.n	80041b4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80040e4:	4b36      	ldr	r3, [pc, #216]	; (80041c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a35      	ldr	r2, [pc, #212]	; (80041c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040f0:	f7fe f87c 	bl	80021ec <HAL_GetTick>
 80040f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80040f6:	e009      	b.n	800410c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80040f8:	f7fe f878 	bl	80021ec <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	2b02      	cmp	r3, #2
 8004104:	d902      	bls.n	800410c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	73fb      	strb	r3, [r7, #15]
        break;
 800410a:	e005      	b.n	8004118 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800410c:	4b2c      	ldr	r3, [pc, #176]	; (80041c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d1ef      	bne.n	80040f8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004118:	7bfb      	ldrb	r3, [r7, #15]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d14a      	bne.n	80041b4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d111      	bne.n	8004148 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004124:	4b26      	ldr	r3, [pc, #152]	; (80041c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004126:	695b      	ldr	r3, [r3, #20]
 8004128:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800412c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	6892      	ldr	r2, [r2, #8]
 8004134:	0211      	lsls	r1, r2, #8
 8004136:	687a      	ldr	r2, [r7, #4]
 8004138:	68d2      	ldr	r2, [r2, #12]
 800413a:	0912      	lsrs	r2, r2, #4
 800413c:	0452      	lsls	r2, r2, #17
 800413e:	430a      	orrs	r2, r1
 8004140:	491f      	ldr	r1, [pc, #124]	; (80041c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004142:	4313      	orrs	r3, r2
 8004144:	614b      	str	r3, [r1, #20]
 8004146:	e011      	b.n	800416c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004148:	4b1d      	ldr	r3, [pc, #116]	; (80041c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800414a:	695b      	ldr	r3, [r3, #20]
 800414c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004150:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	6892      	ldr	r2, [r2, #8]
 8004158:	0211      	lsls	r1, r2, #8
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	6912      	ldr	r2, [r2, #16]
 800415e:	0852      	lsrs	r2, r2, #1
 8004160:	3a01      	subs	r2, #1
 8004162:	0652      	lsls	r2, r2, #25
 8004164:	430a      	orrs	r2, r1
 8004166:	4916      	ldr	r1, [pc, #88]	; (80041c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004168:	4313      	orrs	r3, r2
 800416a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800416c:	4b14      	ldr	r3, [pc, #80]	; (80041c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a13      	ldr	r2, [pc, #76]	; (80041c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004172:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004176:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004178:	f7fe f838 	bl	80021ec <HAL_GetTick>
 800417c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800417e:	e009      	b.n	8004194 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004180:	f7fe f834 	bl	80021ec <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	2b02      	cmp	r3, #2
 800418c:	d902      	bls.n	8004194 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	73fb      	strb	r3, [r7, #15]
          break;
 8004192:	e005      	b.n	80041a0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004194:	4b0a      	ldr	r3, [pc, #40]	; (80041c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d0ef      	beq.n	8004180 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80041a0:	7bfb      	ldrb	r3, [r7, #15]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d106      	bne.n	80041b4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80041a6:	4b06      	ldr	r3, [pc, #24]	; (80041c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041a8:	695a      	ldr	r2, [r3, #20]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	4904      	ldr	r1, [pc, #16]	; (80041c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80041b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3710      	adds	r7, #16
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	40021000 	.word	0x40021000

080041c4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d06c      	beq.n	80042b0 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d106      	bne.n	80041f0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f7fc ff6a 	bl	80010c4 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2202      	movs	r2, #2
 80041f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	22ca      	movs	r2, #202	; 0xca
 80041fe:	625a      	str	r2, [r3, #36]	; 0x24
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2253      	movs	r2, #83	; 0x53
 8004206:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f000 fbcb 	bl	80049a4 <RTC_EnterInitMode>
 800420e:	4603      	mov	r3, r0
 8004210:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8004212:	7bfb      	ldrb	r3, [r7, #15]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d14b      	bne.n	80042b0 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	6812      	ldr	r2, [r2, #0]
 8004222:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004226:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800422a:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	6899      	ldr	r1, [r3, #8]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	685a      	ldr	r2, [r3, #4]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	431a      	orrs	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	699b      	ldr	r3, [r3, #24]
 8004240:	431a      	orrs	r2, r3
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	430a      	orrs	r2, r1
 8004248:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	68d2      	ldr	r2, [r2, #12]
 8004252:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	6919      	ldr	r1, [r3, #16]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	041a      	lsls	r2, r3, #16
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	430a      	orrs	r2, r1
 8004266:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f000 fbcf 	bl	8004a0c <RTC_ExitInitMode>
 800426e:	4603      	mov	r3, r0
 8004270:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004272:	7bfb      	ldrb	r3, [r7, #15]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d11b      	bne.n	80042b0 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f022 0203 	bic.w	r2, r2, #3
 8004286:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	69da      	ldr	r2, [r3, #28]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	695b      	ldr	r3, [r3, #20]
 8004296:	431a      	orrs	r2, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	430a      	orrs	r2, r1
 800429e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	22ff      	movs	r2, #255	; 0xff
 80042a6:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 80042b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3710      	adds	r7, #16
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}

080042ba <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80042ba:	b590      	push	{r4, r7, lr}
 80042bc:	b087      	sub	sp, #28
 80042be:	af00      	add	r7, sp, #0
 80042c0:	60f8      	str	r0, [r7, #12]
 80042c2:	60b9      	str	r1, [r7, #8]
 80042c4:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d101      	bne.n	80042d4 <HAL_RTC_SetTime+0x1a>
 80042d0:	2302      	movs	r3, #2
 80042d2:	e08b      	b.n	80043ec <HAL_RTC_SetTime+0x132>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2202      	movs	r2, #2
 80042e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	22ca      	movs	r2, #202	; 0xca
 80042ea:	625a      	str	r2, [r3, #36]	; 0x24
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2253      	movs	r2, #83	; 0x53
 80042f2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80042f4:	68f8      	ldr	r0, [r7, #12]
 80042f6:	f000 fb55 	bl	80049a4 <RTC_EnterInitMode>
 80042fa:	4603      	mov	r3, r0
 80042fc:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80042fe:	7cfb      	ldrb	r3, [r7, #19]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d163      	bne.n	80043cc <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d126      	bne.n	8004358 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004314:	2b00      	cmp	r3, #0
 8004316:	d102      	bne.n	800431e <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	2200      	movs	r2, #0
 800431c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	4618      	mov	r0, r3
 8004324:	f000 fbb0 	bl	8004a88 <RTC_ByteToBcd2>
 8004328:	4603      	mov	r3, r0
 800432a:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	785b      	ldrb	r3, [r3, #1]
 8004330:	4618      	mov	r0, r3
 8004332:	f000 fba9 	bl	8004a88 <RTC_ByteToBcd2>
 8004336:	4603      	mov	r3, r0
 8004338:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800433a:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	789b      	ldrb	r3, [r3, #2]
 8004340:	4618      	mov	r0, r3
 8004342:	f000 fba1 	bl	8004a88 <RTC_ByteToBcd2>
 8004346:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004348:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	78db      	ldrb	r3, [r3, #3]
 8004350:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004352:	4313      	orrs	r3, r2
 8004354:	617b      	str	r3, [r7, #20]
 8004356:	e018      	b.n	800438a <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004362:	2b00      	cmp	r3, #0
 8004364:	d102      	bne.n	800436c <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	2200      	movs	r2, #0
 800436a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	785b      	ldrb	r3, [r3, #1]
 8004376:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004378:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800437a:	68ba      	ldr	r2, [r7, #8]
 800437c:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800437e:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	78db      	ldrb	r3, [r3, #3]
 8004384:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004386:	4313      	orrs	r3, r2
 8004388:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004394:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004398:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	689a      	ldr	r2, [r3, #8]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80043a8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	6899      	ldr	r1, [r3, #8]
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	68da      	ldr	r2, [r3, #12]
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	691b      	ldr	r3, [r3, #16]
 80043b8:	431a      	orrs	r2, r3
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	430a      	orrs	r2, r1
 80043c0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80043c2:	68f8      	ldr	r0, [r7, #12]
 80043c4:	f000 fb22 	bl	8004a0c <RTC_ExitInitMode>
 80043c8:	4603      	mov	r3, r0
 80043ca:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	22ff      	movs	r2, #255	; 0xff
 80043d2:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80043d4:	7cfb      	ldrb	r3, [r7, #19]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d103      	bne.n	80043e2 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2201      	movs	r2, #1
 80043de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80043ea:	7cfb      	ldrb	r3, [r7, #19]
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	371c      	adds	r7, #28
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd90      	pop	{r4, r7, pc}

080043f4 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b086      	sub	sp, #24
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	691b      	ldr	r3, [r3, #16]
 8004410:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004422:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004426:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	0c1b      	lsrs	r3, r3, #16
 800442c:	b2db      	uxtb	r3, r3
 800442e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004432:	b2da      	uxtb	r2, r3
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	0a1b      	lsrs	r3, r3, #8
 800443c:	b2db      	uxtb	r3, r3
 800443e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004442:	b2da      	uxtb	r2, r3
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	b2db      	uxtb	r3, r3
 800444c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004450:	b2da      	uxtb	r2, r3
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	0d9b      	lsrs	r3, r3, #22
 800445a:	b2db      	uxtb	r3, r3
 800445c:	f003 0301 	and.w	r3, r3, #1
 8004460:	b2da      	uxtb	r2, r3
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d11a      	bne.n	80044a2 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	4618      	mov	r0, r3
 8004472:	f000 fb29 	bl	8004ac8 <RTC_Bcd2ToByte>
 8004476:	4603      	mov	r3, r0
 8004478:	461a      	mov	r2, r3
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	785b      	ldrb	r3, [r3, #1]
 8004482:	4618      	mov	r0, r3
 8004484:	f000 fb20 	bl	8004ac8 <RTC_Bcd2ToByte>
 8004488:	4603      	mov	r3, r0
 800448a:	461a      	mov	r2, r3
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	789b      	ldrb	r3, [r3, #2]
 8004494:	4618      	mov	r0, r3
 8004496:	f000 fb17 	bl	8004ac8 <RTC_Bcd2ToByte>
 800449a:	4603      	mov	r3, r0
 800449c:	461a      	mov	r2, r3
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80044a2:	2300      	movs	r3, #0
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3718      	adds	r7, #24
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80044ac:	b590      	push	{r4, r7, lr}
 80044ae:	b087      	sub	sp, #28
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d101      	bne.n	80044c6 <HAL_RTC_SetDate+0x1a>
 80044c2:	2302      	movs	r3, #2
 80044c4:	e075      	b.n	80045b2 <HAL_RTC_SetDate+0x106>
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2201      	movs	r2, #1
 80044ca:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2202      	movs	r2, #2
 80044d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d10e      	bne.n	80044fa <HAL_RTC_SetDate+0x4e>
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	785b      	ldrb	r3, [r3, #1]
 80044e0:	f003 0310 	and.w	r3, r3, #16
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d008      	beq.n	80044fa <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	785b      	ldrb	r3, [r3, #1]
 80044ec:	f023 0310 	bic.w	r3, r3, #16
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	330a      	adds	r3, #10
 80044f4:	b2da      	uxtb	r2, r3
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d11c      	bne.n	800453a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	78db      	ldrb	r3, [r3, #3]
 8004504:	4618      	mov	r0, r3
 8004506:	f000 fabf 	bl	8004a88 <RTC_ByteToBcd2>
 800450a:	4603      	mov	r3, r0
 800450c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	785b      	ldrb	r3, [r3, #1]
 8004512:	4618      	mov	r0, r3
 8004514:	f000 fab8 	bl	8004a88 <RTC_ByteToBcd2>
 8004518:	4603      	mov	r3, r0
 800451a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800451c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	789b      	ldrb	r3, [r3, #2]
 8004522:	4618      	mov	r0, r3
 8004524:	f000 fab0 	bl	8004a88 <RTC_ByteToBcd2>
 8004528:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800452a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004534:	4313      	orrs	r3, r2
 8004536:	617b      	str	r3, [r7, #20]
 8004538:	e00e      	b.n	8004558 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	78db      	ldrb	r3, [r3, #3]
 800453e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	785b      	ldrb	r3, [r3, #1]
 8004544:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004546:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8004548:	68ba      	ldr	r2, [r7, #8]
 800454a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800454c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004554:	4313      	orrs	r3, r2
 8004556:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	22ca      	movs	r2, #202	; 0xca
 800455e:	625a      	str	r2, [r3, #36]	; 0x24
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2253      	movs	r2, #83	; 0x53
 8004566:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004568:	68f8      	ldr	r0, [r7, #12]
 800456a:	f000 fa1b 	bl	80049a4 <RTC_EnterInitMode>
 800456e:	4603      	mov	r3, r0
 8004570:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8004572:	7cfb      	ldrb	r3, [r7, #19]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d10c      	bne.n	8004592 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004582:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004586:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004588:	68f8      	ldr	r0, [r7, #12]
 800458a:	f000 fa3f 	bl	8004a0c <RTC_ExitInitMode>
 800458e:	4603      	mov	r3, r0
 8004590:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	22ff      	movs	r2, #255	; 0xff
 8004598:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800459a:	7cfb      	ldrb	r3, [r7, #19]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d103      	bne.n	80045a8 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80045b0:	7cfb      	ldrb	r3, [r7, #19]
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	371c      	adds	r7, #28
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd90      	pop	{r4, r7, pc}

080045ba <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80045ba:	b580      	push	{r7, lr}
 80045bc:	b086      	sub	sp, #24
 80045be:	af00      	add	r7, sp, #0
 80045c0:	60f8      	str	r0, [r7, #12]
 80045c2:	60b9      	str	r1, [r7, #8]
 80045c4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80045d0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80045d4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	0c1b      	lsrs	r3, r3, #16
 80045da:	b2da      	uxtb	r2, r3
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	0a1b      	lsrs	r3, r3, #8
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	f003 031f 	and.w	r3, r3, #31
 80045ea:	b2da      	uxtb	r2, r3
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045f8:	b2da      	uxtb	r2, r3
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	0b5b      	lsrs	r3, r3, #13
 8004602:	b2db      	uxtb	r3, r3
 8004604:	f003 0307 	and.w	r3, r3, #7
 8004608:	b2da      	uxtb	r2, r3
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d11a      	bne.n	800464a <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	78db      	ldrb	r3, [r3, #3]
 8004618:	4618      	mov	r0, r3
 800461a:	f000 fa55 	bl	8004ac8 <RTC_Bcd2ToByte>
 800461e:	4603      	mov	r3, r0
 8004620:	461a      	mov	r2, r3
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	785b      	ldrb	r3, [r3, #1]
 800462a:	4618      	mov	r0, r3
 800462c:	f000 fa4c 	bl	8004ac8 <RTC_Bcd2ToByte>
 8004630:	4603      	mov	r3, r0
 8004632:	461a      	mov	r2, r3
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	789b      	ldrb	r3, [r3, #2]
 800463c:	4618      	mov	r0, r3
 800463e:	f000 fa43 	bl	8004ac8 <RTC_Bcd2ToByte>
 8004642:	4603      	mov	r3, r0
 8004644:	461a      	mov	r2, r3
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800464a:	2300      	movs	r3, #0
}
 800464c:	4618      	mov	r0, r3
 800464e:	3718      	adds	r7, #24
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004654:	b590      	push	{r4, r7, lr}
 8004656:	b089      	sub	sp, #36	; 0x24
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004666:	2b01      	cmp	r3, #1
 8004668:	d101      	bne.n	800466e <HAL_RTC_SetAlarm_IT+0x1a>
 800466a:	2302      	movs	r3, #2
 800466c:	e127      	b.n	80048be <HAL_RTC_SetAlarm_IT+0x26a>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2201      	movs	r2, #1
 8004672:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2202      	movs	r2, #2
 800467a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d137      	bne.n	80046f4 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800468e:	2b00      	cmp	r3, #0
 8004690:	d102      	bne.n	8004698 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	2200      	movs	r2, #0
 8004696:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	4618      	mov	r0, r3
 800469e:	f000 f9f3 	bl	8004a88 <RTC_ByteToBcd2>
 80046a2:	4603      	mov	r3, r0
 80046a4:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	785b      	ldrb	r3, [r3, #1]
 80046aa:	4618      	mov	r0, r3
 80046ac:	f000 f9ec 	bl	8004a88 <RTC_ByteToBcd2>
 80046b0:	4603      	mov	r3, r0
 80046b2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80046b4:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	789b      	ldrb	r3, [r3, #2]
 80046ba:	4618      	mov	r0, r3
 80046bc:	f000 f9e4 	bl	8004a88 <RTC_ByteToBcd2>
 80046c0:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80046c2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	78db      	ldrb	r3, [r3, #3]
 80046ca:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80046cc:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80046d6:	4618      	mov	r0, r3
 80046d8:	f000 f9d6 	bl	8004a88 <RTC_ByteToBcd2>
 80046dc:	4603      	mov	r3, r0
 80046de:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80046e0:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80046e8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80046ee:	4313      	orrs	r3, r2
 80046f0:	61fb      	str	r3, [r7, #28]
 80046f2:	e023      	b.n	800473c <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d102      	bne.n	8004708 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	2200      	movs	r2, #0
 8004706:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	785b      	ldrb	r3, [r3, #1]
 8004712:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004714:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004716:	68ba      	ldr	r2, [r7, #8]
 8004718:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800471a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	78db      	ldrb	r3, [r3, #3]
 8004720:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004722:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800472a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800472c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004732:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004738:	4313      	orrs	r3, r2
 800473a:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	685a      	ldr	r2, [r3, #4]
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	69db      	ldr	r3, [r3, #28]
 8004744:	4313      	orrs	r3, r2
 8004746:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	22ca      	movs	r2, #202	; 0xca
 800474e:	625a      	str	r2, [r3, #36]	; 0x24
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2253      	movs	r2, #83	; 0x53
 8004756:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800475c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004760:	d14a      	bne.n	80047f8 <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	689a      	ldr	r2, [r3, #8]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004770:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	b2da      	uxtb	r2, r3
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8004782:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 8004784:	f7fd fd32 	bl	80021ec <HAL_GetTick>
 8004788:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800478a:	e015      	b.n	80047b8 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800478c:	f7fd fd2e 	bl	80021ec <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800479a:	d90d      	bls.n	80047b8 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	22ff      	movs	r2, #255	; 0xff
 80047a2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2203      	movs	r2, #3
 80047a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80047b4:	2303      	movs	r3, #3
 80047b6:	e082      	b.n	80048be <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	f003 0301 	and.w	r3, r3, #1
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d0e2      	beq.n	800478c <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	69fa      	ldr	r2, [r7, #28]
 80047cc:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	69ba      	ldr	r2, [r7, #24]
 80047d4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	689a      	ldr	r2, [r3, #8]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047e4:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	689a      	ldr	r2, [r3, #8]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80047f4:	609a      	str	r2, [r3, #8]
 80047f6:	e049      	b.n	800488c <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	689a      	ldr	r2, [r3, #8]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004806:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	b2da      	uxtb	r2, r3
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f462 7220 	orn	r2, r2, #640	; 0x280
 8004818:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 800481a:	f7fd fce7 	bl	80021ec <HAL_GetTick>
 800481e:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004820:	e015      	b.n	800484e <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004822:	f7fd fce3 	bl	80021ec <HAL_GetTick>
 8004826:	4602      	mov	r2, r0
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004830:	d90d      	bls.n	800484e <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	22ff      	movs	r2, #255	; 0xff
 8004838:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2203      	movs	r2, #3
 800483e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e037      	b.n	80048be <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	f003 0302 	and.w	r3, r3, #2
 8004858:	2b00      	cmp	r3, #0
 800485a:	d0e2      	beq.n	8004822 <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	69fa      	ldr	r2, [r7, #28]
 8004862:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	69ba      	ldr	r2, [r7, #24]
 800486a:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	689a      	ldr	r2, [r3, #8]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800487a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	689a      	ldr	r2, [r3, #8]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800488a:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800488c:	4b0e      	ldr	r3, [pc, #56]	; (80048c8 <HAL_RTC_SetAlarm_IT+0x274>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a0d      	ldr	r2, [pc, #52]	; (80048c8 <HAL_RTC_SetAlarm_IT+0x274>)
 8004892:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004896:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8004898:	4b0b      	ldr	r3, [pc, #44]	; (80048c8 <HAL_RTC_SetAlarm_IT+0x274>)
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	4a0a      	ldr	r2, [pc, #40]	; (80048c8 <HAL_RTC_SetAlarm_IT+0x274>)
 800489e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048a2:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	22ff      	movs	r2, #255	; 0xff
 80048aa:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3724      	adds	r7, #36	; 0x24
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd90      	pop	{r4, r7, pc}
 80048c6:	bf00      	nop
 80048c8:	40010400 	.word	0x40010400

080048cc <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80048d4:	4b1f      	ldr	r3, [pc, #124]	; (8004954 <HAL_RTC_AlarmIRQHandler+0x88>)
 80048d6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80048da:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d012      	beq.n	8004910 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d00b      	beq.n	8004910 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	b2da      	uxtb	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8004908:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f7fb ff36 	bl	800077c <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d012      	beq.n	8004944 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004928:	2b00      	cmp	r3, #0
 800492a:	d00b      	beq.n	8004944 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	b2da      	uxtb	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f462 7220 	orn	r2, r2, #640	; 0x280
 800493c:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 f8dc 	bl	8004afc <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 800494c:	bf00      	nop
 800494e:	3708      	adds	r7, #8
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}
 8004954:	40010400 	.word	0x40010400

08004958 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	68da      	ldr	r2, [r3, #12]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800496e:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8004970:	f7fd fc3c 	bl	80021ec <HAL_GetTick>
 8004974:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004976:	e009      	b.n	800498c <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004978:	f7fd fc38 	bl	80021ec <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004986:	d901      	bls.n	800498c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004988:	2303      	movs	r3, #3
 800498a:	e007      	b.n	800499c <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	f003 0320 	and.w	r3, r3, #32
 8004996:	2b00      	cmp	r3, #0
 8004998:	d0ee      	beq.n	8004978 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800499a:	2300      	movs	r3, #0
}
 800499c:	4618      	mov	r0, r3
 800499e:	3710      	adds	r7, #16
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049ac:	2300      	movs	r3, #0
 80049ae:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d120      	bne.n	8004a00 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f04f 32ff 	mov.w	r2, #4294967295
 80049c6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80049c8:	f7fd fc10 	bl	80021ec <HAL_GetTick>
 80049cc:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80049ce:	e00d      	b.n	80049ec <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80049d0:	f7fd fc0c 	bl	80021ec <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049de:	d905      	bls.n	80049ec <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80049e0:	2303      	movs	r3, #3
 80049e2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2203      	movs	r2, #3
 80049e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d102      	bne.n	8004a00 <RTC_EnterInitMode+0x5c>
 80049fa:	7bfb      	ldrb	r3, [r7, #15]
 80049fc:	2b03      	cmp	r3, #3
 80049fe:	d1e7      	bne.n	80049d0 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8004a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3710      	adds	r7, #16
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
	...

08004a0c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a14:	2300      	movs	r3, #0
 8004a16:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8004a18:	4b1a      	ldr	r3, [pc, #104]	; (8004a84 <RTC_ExitInitMode+0x78>)
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	4a19      	ldr	r2, [pc, #100]	; (8004a84 <RTC_ExitInitMode+0x78>)
 8004a1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a22:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004a24:	4b17      	ldr	r3, [pc, #92]	; (8004a84 <RTC_ExitInitMode+0x78>)
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	f003 0320 	and.w	r3, r3, #32
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d10c      	bne.n	8004a4a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f7ff ff91 	bl	8004958 <HAL_RTC_WaitForSynchro>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d01e      	beq.n	8004a7a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2203      	movs	r2, #3
 8004a40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004a44:	2303      	movs	r3, #3
 8004a46:	73fb      	strb	r3, [r7, #15]
 8004a48:	e017      	b.n	8004a7a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004a4a:	4b0e      	ldr	r3, [pc, #56]	; (8004a84 <RTC_ExitInitMode+0x78>)
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	4a0d      	ldr	r2, [pc, #52]	; (8004a84 <RTC_ExitInitMode+0x78>)
 8004a50:	f023 0320 	bic.w	r3, r3, #32
 8004a54:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f7ff ff7e 	bl	8004958 <HAL_RTC_WaitForSynchro>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d005      	beq.n	8004a6e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2203      	movs	r2, #3
 8004a66:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004a6e:	4b05      	ldr	r3, [pc, #20]	; (8004a84 <RTC_ExitInitMode+0x78>)
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	4a04      	ldr	r2, [pc, #16]	; (8004a84 <RTC_ExitInitMode+0x78>)
 8004a74:	f043 0320 	orr.w	r3, r3, #32
 8004a78:	6093      	str	r3, [r2, #8]
  }

  return status;
 8004a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3710      	adds	r7, #16
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	40002800 	.word	0x40002800

08004a88 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b085      	sub	sp, #20
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	4603      	mov	r3, r0
 8004a90:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004a92:	2300      	movs	r3, #0
 8004a94:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8004a96:	79fb      	ldrb	r3, [r7, #7]
 8004a98:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8004a9a:	e005      	b.n	8004aa8 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8004aa2:	7afb      	ldrb	r3, [r7, #11]
 8004aa4:	3b0a      	subs	r3, #10
 8004aa6:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8004aa8:	7afb      	ldrb	r3, [r7, #11]
 8004aaa:	2b09      	cmp	r3, #9
 8004aac:	d8f6      	bhi.n	8004a9c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	011b      	lsls	r3, r3, #4
 8004ab4:	b2da      	uxtb	r2, r3
 8004ab6:	7afb      	ldrb	r3, [r7, #11]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	b2db      	uxtb	r3, r3
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3714      	adds	r7, #20
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b085      	sub	sp, #20
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	4603      	mov	r3, r0
 8004ad0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8004ad2:	79fb      	ldrb	r3, [r7, #7]
 8004ad4:	091b      	lsrs	r3, r3, #4
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	461a      	mov	r2, r3
 8004ada:	0092      	lsls	r2, r2, #2
 8004adc:	4413      	add	r3, r2
 8004ade:	005b      	lsls	r3, r3, #1
 8004ae0:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8004ae2:	79fb      	ldrb	r3, [r7, #7]
 8004ae4:	f003 030f 	and.w	r3, r3, #15
 8004ae8:	b2da      	uxtb	r2, r3
 8004aea:	7bfb      	ldrb	r3, [r7, #15]
 8004aec:	4413      	add	r3, r2
 8004aee:	b2db      	uxtb	r3, r3
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3714      	adds	r7, #20
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8004b04:	bf00      	nop
 8004b06:	370c      	adds	r7, #12
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d101      	bne.n	8004b22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e049      	b.n	8004bb6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d106      	bne.n	8004b3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f7fd f86e 	bl	8001c18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2202      	movs	r2, #2
 8004b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	3304      	adds	r3, #4
 8004b4c:	4619      	mov	r1, r3
 8004b4e:	4610      	mov	r0, r2
 8004b50:	f001 fa4c 	bl	8005fec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3708      	adds	r7, #8
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
	...

08004bc0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b085      	sub	sp, #20
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d001      	beq.n	8004bd8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e047      	b.n	8004c68 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2202      	movs	r2, #2
 8004bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a23      	ldr	r2, [pc, #140]	; (8004c74 <HAL_TIM_Base_Start+0xb4>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d01d      	beq.n	8004c26 <HAL_TIM_Base_Start+0x66>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bf2:	d018      	beq.n	8004c26 <HAL_TIM_Base_Start+0x66>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a1f      	ldr	r2, [pc, #124]	; (8004c78 <HAL_TIM_Base_Start+0xb8>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d013      	beq.n	8004c26 <HAL_TIM_Base_Start+0x66>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a1e      	ldr	r2, [pc, #120]	; (8004c7c <HAL_TIM_Base_Start+0xbc>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d00e      	beq.n	8004c26 <HAL_TIM_Base_Start+0x66>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a1c      	ldr	r2, [pc, #112]	; (8004c80 <HAL_TIM_Base_Start+0xc0>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d009      	beq.n	8004c26 <HAL_TIM_Base_Start+0x66>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a1b      	ldr	r2, [pc, #108]	; (8004c84 <HAL_TIM_Base_Start+0xc4>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d004      	beq.n	8004c26 <HAL_TIM_Base_Start+0x66>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a19      	ldr	r2, [pc, #100]	; (8004c88 <HAL_TIM_Base_Start+0xc8>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d115      	bne.n	8004c52 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	689a      	ldr	r2, [r3, #8]
 8004c2c:	4b17      	ldr	r3, [pc, #92]	; (8004c8c <HAL_TIM_Base_Start+0xcc>)
 8004c2e:	4013      	ands	r3, r2
 8004c30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2b06      	cmp	r3, #6
 8004c36:	d015      	beq.n	8004c64 <HAL_TIM_Base_Start+0xa4>
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c3e:	d011      	beq.n	8004c64 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f042 0201 	orr.w	r2, r2, #1
 8004c4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c50:	e008      	b.n	8004c64 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f042 0201 	orr.w	r2, r2, #1
 8004c60:	601a      	str	r2, [r3, #0]
 8004c62:	e000      	b.n	8004c66 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c64:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c66:	2300      	movs	r3, #0
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3714      	adds	r7, #20
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr
 8004c74:	40012c00 	.word	0x40012c00
 8004c78:	40000400 	.word	0x40000400
 8004c7c:	40000800 	.word	0x40000800
 8004c80:	40000c00 	.word	0x40000c00
 8004c84:	40013400 	.word	0x40013400
 8004c88:	40014000 	.word	0x40014000
 8004c8c:	00010007 	.word	0x00010007

08004c90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b085      	sub	sp, #20
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d001      	beq.n	8004ca8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e04f      	b.n	8004d48 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2202      	movs	r2, #2
 8004cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68da      	ldr	r2, [r3, #12]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f042 0201 	orr.w	r2, r2, #1
 8004cbe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a23      	ldr	r2, [pc, #140]	; (8004d54 <HAL_TIM_Base_Start_IT+0xc4>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d01d      	beq.n	8004d06 <HAL_TIM_Base_Start_IT+0x76>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cd2:	d018      	beq.n	8004d06 <HAL_TIM_Base_Start_IT+0x76>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a1f      	ldr	r2, [pc, #124]	; (8004d58 <HAL_TIM_Base_Start_IT+0xc8>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d013      	beq.n	8004d06 <HAL_TIM_Base_Start_IT+0x76>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a1e      	ldr	r2, [pc, #120]	; (8004d5c <HAL_TIM_Base_Start_IT+0xcc>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d00e      	beq.n	8004d06 <HAL_TIM_Base_Start_IT+0x76>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a1c      	ldr	r2, [pc, #112]	; (8004d60 <HAL_TIM_Base_Start_IT+0xd0>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d009      	beq.n	8004d06 <HAL_TIM_Base_Start_IT+0x76>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a1b      	ldr	r2, [pc, #108]	; (8004d64 <HAL_TIM_Base_Start_IT+0xd4>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d004      	beq.n	8004d06 <HAL_TIM_Base_Start_IT+0x76>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a19      	ldr	r2, [pc, #100]	; (8004d68 <HAL_TIM_Base_Start_IT+0xd8>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d115      	bne.n	8004d32 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	689a      	ldr	r2, [r3, #8]
 8004d0c:	4b17      	ldr	r3, [pc, #92]	; (8004d6c <HAL_TIM_Base_Start_IT+0xdc>)
 8004d0e:	4013      	ands	r3, r2
 8004d10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2b06      	cmp	r3, #6
 8004d16:	d015      	beq.n	8004d44 <HAL_TIM_Base_Start_IT+0xb4>
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d1e:	d011      	beq.n	8004d44 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f042 0201 	orr.w	r2, r2, #1
 8004d2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d30:	e008      	b.n	8004d44 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f042 0201 	orr.w	r2, r2, #1
 8004d40:	601a      	str	r2, [r3, #0]
 8004d42:	e000      	b.n	8004d46 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d44:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d46:	2300      	movs	r3, #0
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3714      	adds	r7, #20
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr
 8004d54:	40012c00 	.word	0x40012c00
 8004d58:	40000400 	.word	0x40000400
 8004d5c:	40000800 	.word	0x40000800
 8004d60:	40000c00 	.word	0x40000c00
 8004d64:	40013400 	.word	0x40013400
 8004d68:	40014000 	.word	0x40014000
 8004d6c:	00010007 	.word	0x00010007

08004d70 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b082      	sub	sp, #8
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d101      	bne.n	8004d82 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e049      	b.n	8004e16 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d106      	bne.n	8004d9c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f000 f841 	bl	8004e1e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2202      	movs	r2, #2
 8004da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	3304      	adds	r3, #4
 8004dac:	4619      	mov	r1, r3
 8004dae:	4610      	mov	r0, r2
 8004db0:	f001 f91c 	bl	8005fec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3708      	adds	r7, #8
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004e1e:	b480      	push	{r7}
 8004e20:	b083      	sub	sp, #12
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004e26:	bf00      	nop
 8004e28:	370c      	adds	r7, #12
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr
	...

08004e34 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b086      	sub	sp, #24
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	607a      	str	r2, [r7, #4]
 8004e40:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d109      	bne.n	8004e5c <HAL_TIM_PWM_Start_DMA+0x28>
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	2b02      	cmp	r3, #2
 8004e52:	bf0c      	ite	eq
 8004e54:	2301      	moveq	r3, #1
 8004e56:	2300      	movne	r3, #0
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	e03c      	b.n	8004ed6 <HAL_TIM_PWM_Start_DMA+0xa2>
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	2b04      	cmp	r3, #4
 8004e60:	d109      	bne.n	8004e76 <HAL_TIM_PWM_Start_DMA+0x42>
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	bf0c      	ite	eq
 8004e6e:	2301      	moveq	r3, #1
 8004e70:	2300      	movne	r3, #0
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	e02f      	b.n	8004ed6 <HAL_TIM_PWM_Start_DMA+0xa2>
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	2b08      	cmp	r3, #8
 8004e7a:	d109      	bne.n	8004e90 <HAL_TIM_PWM_Start_DMA+0x5c>
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	2b02      	cmp	r3, #2
 8004e86:	bf0c      	ite	eq
 8004e88:	2301      	moveq	r3, #1
 8004e8a:	2300      	movne	r3, #0
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	e022      	b.n	8004ed6 <HAL_TIM_PWM_Start_DMA+0xa2>
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	2b0c      	cmp	r3, #12
 8004e94:	d109      	bne.n	8004eaa <HAL_TIM_PWM_Start_DMA+0x76>
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	2b02      	cmp	r3, #2
 8004ea0:	bf0c      	ite	eq
 8004ea2:	2301      	moveq	r3, #1
 8004ea4:	2300      	movne	r3, #0
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	e015      	b.n	8004ed6 <HAL_TIM_PWM_Start_DMA+0xa2>
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	2b10      	cmp	r3, #16
 8004eae:	d109      	bne.n	8004ec4 <HAL_TIM_PWM_Start_DMA+0x90>
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	bf0c      	ite	eq
 8004ebc:	2301      	moveq	r3, #1
 8004ebe:	2300      	movne	r3, #0
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	e008      	b.n	8004ed6 <HAL_TIM_PWM_Start_DMA+0xa2>
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	bf0c      	ite	eq
 8004ed0:	2301      	moveq	r3, #1
 8004ed2:	2300      	movne	r3, #0
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d001      	beq.n	8004ede <HAL_TIM_PWM_Start_DMA+0xaa>
  {
    return HAL_BUSY;
 8004eda:	2302      	movs	r3, #2
 8004edc:	e1a6      	b.n	800522c <HAL_TIM_PWM_Start_DMA+0x3f8>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d109      	bne.n	8004ef8 <HAL_TIM_PWM_Start_DMA+0xc4>
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	bf0c      	ite	eq
 8004ef0:	2301      	moveq	r3, #1
 8004ef2:	2300      	movne	r3, #0
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	e03c      	b.n	8004f72 <HAL_TIM_PWM_Start_DMA+0x13e>
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	2b04      	cmp	r3, #4
 8004efc:	d109      	bne.n	8004f12 <HAL_TIM_PWM_Start_DMA+0xde>
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	bf0c      	ite	eq
 8004f0a:	2301      	moveq	r3, #1
 8004f0c:	2300      	movne	r3, #0
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	e02f      	b.n	8004f72 <HAL_TIM_PWM_Start_DMA+0x13e>
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	2b08      	cmp	r3, #8
 8004f16:	d109      	bne.n	8004f2c <HAL_TIM_PWM_Start_DMA+0xf8>
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	bf0c      	ite	eq
 8004f24:	2301      	moveq	r3, #1
 8004f26:	2300      	movne	r3, #0
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	e022      	b.n	8004f72 <HAL_TIM_PWM_Start_DMA+0x13e>
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	2b0c      	cmp	r3, #12
 8004f30:	d109      	bne.n	8004f46 <HAL_TIM_PWM_Start_DMA+0x112>
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	bf0c      	ite	eq
 8004f3e:	2301      	moveq	r3, #1
 8004f40:	2300      	movne	r3, #0
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	e015      	b.n	8004f72 <HAL_TIM_PWM_Start_DMA+0x13e>
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	2b10      	cmp	r3, #16
 8004f4a:	d109      	bne.n	8004f60 <HAL_TIM_PWM_Start_DMA+0x12c>
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	bf0c      	ite	eq
 8004f58:	2301      	moveq	r3, #1
 8004f5a:	2300      	movne	r3, #0
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	e008      	b.n	8004f72 <HAL_TIM_PWM_Start_DMA+0x13e>
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	bf0c      	ite	eq
 8004f6c:	2301      	moveq	r3, #1
 8004f6e:	2300      	movne	r3, #0
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d034      	beq.n	8004fe0 <HAL_TIM_PWM_Start_DMA+0x1ac>
  {
    if ((pData == NULL) && (Length > 0U))
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d104      	bne.n	8004f86 <HAL_TIM_PWM_Start_DMA+0x152>
 8004f7c:	887b      	ldrh	r3, [r7, #2]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d001      	beq.n	8004f86 <HAL_TIM_PWM_Start_DMA+0x152>
    {
      return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e152      	b.n	800522c <HAL_TIM_PWM_Start_DMA+0x3f8>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d104      	bne.n	8004f96 <HAL_TIM_PWM_Start_DMA+0x162>
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2202      	movs	r2, #2
 8004f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f94:	e026      	b.n	8004fe4 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	2b04      	cmp	r3, #4
 8004f9a:	d104      	bne.n	8004fa6 <HAL_TIM_PWM_Start_DMA+0x172>
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2202      	movs	r2, #2
 8004fa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fa4:	e01e      	b.n	8004fe4 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	2b08      	cmp	r3, #8
 8004faa:	d104      	bne.n	8004fb6 <HAL_TIM_PWM_Start_DMA+0x182>
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2202      	movs	r2, #2
 8004fb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fb4:	e016      	b.n	8004fe4 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	2b0c      	cmp	r3, #12
 8004fba:	d104      	bne.n	8004fc6 <HAL_TIM_PWM_Start_DMA+0x192>
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2202      	movs	r2, #2
 8004fc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004fc4:	e00e      	b.n	8004fe4 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	2b10      	cmp	r3, #16
 8004fca:	d104      	bne.n	8004fd6 <HAL_TIM_PWM_Start_DMA+0x1a2>
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2202      	movs	r2, #2
 8004fd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fd4:	e006      	b.n	8004fe4 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2202      	movs	r2, #2
 8004fda:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004fde:	e001      	b.n	8004fe4 <HAL_TIM_PWM_Start_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e123      	b.n	800522c <HAL_TIM_PWM_Start_DMA+0x3f8>
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	2b0c      	cmp	r3, #12
 8004fe8:	f200 80ae 	bhi.w	8005148 <HAL_TIM_PWM_Start_DMA+0x314>
 8004fec:	a201      	add	r2, pc, #4	; (adr r2, 8004ff4 <HAL_TIM_PWM_Start_DMA+0x1c0>)
 8004fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ff2:	bf00      	nop
 8004ff4:	08005029 	.word	0x08005029
 8004ff8:	08005149 	.word	0x08005149
 8004ffc:	08005149 	.word	0x08005149
 8005000:	08005149 	.word	0x08005149
 8005004:	08005071 	.word	0x08005071
 8005008:	08005149 	.word	0x08005149
 800500c:	08005149 	.word	0x08005149
 8005010:	08005149 	.word	0x08005149
 8005014:	080050b9 	.word	0x080050b9
 8005018:	08005149 	.word	0x08005149
 800501c:	08005149 	.word	0x08005149
 8005020:	08005149 	.word	0x08005149
 8005024:	08005101 	.word	0x08005101
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502c:	4a81      	ldr	r2, [pc, #516]	; (8005234 <HAL_TIM_PWM_Start_DMA+0x400>)
 800502e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005034:	4a80      	ldr	r2, [pc, #512]	; (8005238 <HAL_TIM_PWM_Start_DMA+0x404>)
 8005036:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503c:	4a7f      	ldr	r2, [pc, #508]	; (800523c <HAL_TIM_PWM_Start_DMA+0x408>)
 800503e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005044:	6879      	ldr	r1, [r7, #4]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	3334      	adds	r3, #52	; 0x34
 800504c:	461a      	mov	r2, r3
 800504e:	887b      	ldrh	r3, [r7, #2]
 8005050:	f7fd faa2 	bl	8002598 <HAL_DMA_Start_IT>
 8005054:	4603      	mov	r3, r0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d001      	beq.n	800505e <HAL_TIM_PWM_Start_DMA+0x22a>
      {
        /* Return error status */
        return HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	e0e6      	b.n	800522c <HAL_TIM_PWM_Start_DMA+0x3f8>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	68da      	ldr	r2, [r3, #12]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800506c:	60da      	str	r2, [r3, #12]
      break;
 800506e:	e06c      	b.n	800514a <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005074:	4a6f      	ldr	r2, [pc, #444]	; (8005234 <HAL_TIM_PWM_Start_DMA+0x400>)
 8005076:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800507c:	4a6e      	ldr	r2, [pc, #440]	; (8005238 <HAL_TIM_PWM_Start_DMA+0x404>)
 800507e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005084:	4a6d      	ldr	r2, [pc, #436]	; (800523c <HAL_TIM_PWM_Start_DMA+0x408>)
 8005086:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800508c:	6879      	ldr	r1, [r7, #4]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	3338      	adds	r3, #56	; 0x38
 8005094:	461a      	mov	r2, r3
 8005096:	887b      	ldrh	r3, [r7, #2]
 8005098:	f7fd fa7e 	bl	8002598 <HAL_DMA_Start_IT>
 800509c:	4603      	mov	r3, r0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d001      	beq.n	80050a6 <HAL_TIM_PWM_Start_DMA+0x272>
      {
        /* Return error status */
        return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e0c2      	b.n	800522c <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68da      	ldr	r2, [r3, #12]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80050b4:	60da      	str	r2, [r3, #12]
      break;
 80050b6:	e048      	b.n	800514a <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050bc:	4a5d      	ldr	r2, [pc, #372]	; (8005234 <HAL_TIM_PWM_Start_DMA+0x400>)
 80050be:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c4:	4a5c      	ldr	r2, [pc, #368]	; (8005238 <HAL_TIM_PWM_Start_DMA+0x404>)
 80050c6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050cc:	4a5b      	ldr	r2, [pc, #364]	; (800523c <HAL_TIM_PWM_Start_DMA+0x408>)
 80050ce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80050d4:	6879      	ldr	r1, [r7, #4]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	333c      	adds	r3, #60	; 0x3c
 80050dc:	461a      	mov	r2, r3
 80050de:	887b      	ldrh	r3, [r7, #2]
 80050e0:	f7fd fa5a 	bl	8002598 <HAL_DMA_Start_IT>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d001      	beq.n	80050ee <HAL_TIM_PWM_Start_DMA+0x2ba>
      {
        /* Return error status */
        return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e09e      	b.n	800522c <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	68da      	ldr	r2, [r3, #12]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050fc:	60da      	str	r2, [r3, #12]
      break;
 80050fe:	e024      	b.n	800514a <HAL_TIM_PWM_Start_DMA+0x316>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005104:	4a4b      	ldr	r2, [pc, #300]	; (8005234 <HAL_TIM_PWM_Start_DMA+0x400>)
 8005106:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800510c:	4a4a      	ldr	r2, [pc, #296]	; (8005238 <HAL_TIM_PWM_Start_DMA+0x404>)
 800510e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005114:	4a49      	ldr	r2, [pc, #292]	; (800523c <HAL_TIM_PWM_Start_DMA+0x408>)
 8005116:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800511c:	6879      	ldr	r1, [r7, #4]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	3340      	adds	r3, #64	; 0x40
 8005124:	461a      	mov	r2, r3
 8005126:	887b      	ldrh	r3, [r7, #2]
 8005128:	f7fd fa36 	bl	8002598 <HAL_DMA_Start_IT>
 800512c:	4603      	mov	r3, r0
 800512e:	2b00      	cmp	r3, #0
 8005130:	d001      	beq.n	8005136 <HAL_TIM_PWM_Start_DMA+0x302>
      {
        /* Return error status */
        return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e07a      	b.n	800522c <HAL_TIM_PWM_Start_DMA+0x3f8>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68da      	ldr	r2, [r3, #12]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005144:	60da      	str	r2, [r3, #12]
      break;
 8005146:	e000      	b.n	800514a <HAL_TIM_PWM_Start_DMA+0x316>
    }

    default:
      break;
 8005148:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	2201      	movs	r2, #1
 8005150:	68b9      	ldr	r1, [r7, #8]
 8005152:	4618      	mov	r0, r3
 8005154:	f001 fd08 	bl	8006b68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a38      	ldr	r2, [pc, #224]	; (8005240 <HAL_TIM_PWM_Start_DMA+0x40c>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d013      	beq.n	800518a <HAL_TIM_PWM_Start_DMA+0x356>
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a37      	ldr	r2, [pc, #220]	; (8005244 <HAL_TIM_PWM_Start_DMA+0x410>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d00e      	beq.n	800518a <HAL_TIM_PWM_Start_DMA+0x356>
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a35      	ldr	r2, [pc, #212]	; (8005248 <HAL_TIM_PWM_Start_DMA+0x414>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d009      	beq.n	800518a <HAL_TIM_PWM_Start_DMA+0x356>
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a34      	ldr	r2, [pc, #208]	; (800524c <HAL_TIM_PWM_Start_DMA+0x418>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d004      	beq.n	800518a <HAL_TIM_PWM_Start_DMA+0x356>
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a32      	ldr	r2, [pc, #200]	; (8005250 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d101      	bne.n	800518e <HAL_TIM_PWM_Start_DMA+0x35a>
 800518a:	2301      	movs	r3, #1
 800518c:	e000      	b.n	8005190 <HAL_TIM_PWM_Start_DMA+0x35c>
 800518e:	2300      	movs	r3, #0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d007      	beq.n	80051a4 <HAL_TIM_PWM_Start_DMA+0x370>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80051a2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a25      	ldr	r2, [pc, #148]	; (8005240 <HAL_TIM_PWM_Start_DMA+0x40c>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d01d      	beq.n	80051ea <HAL_TIM_PWM_Start_DMA+0x3b6>
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051b6:	d018      	beq.n	80051ea <HAL_TIM_PWM_Start_DMA+0x3b6>
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a25      	ldr	r2, [pc, #148]	; (8005254 <HAL_TIM_PWM_Start_DMA+0x420>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d013      	beq.n	80051ea <HAL_TIM_PWM_Start_DMA+0x3b6>
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a24      	ldr	r2, [pc, #144]	; (8005258 <HAL_TIM_PWM_Start_DMA+0x424>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d00e      	beq.n	80051ea <HAL_TIM_PWM_Start_DMA+0x3b6>
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a22      	ldr	r2, [pc, #136]	; (800525c <HAL_TIM_PWM_Start_DMA+0x428>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d009      	beq.n	80051ea <HAL_TIM_PWM_Start_DMA+0x3b6>
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a1a      	ldr	r2, [pc, #104]	; (8005244 <HAL_TIM_PWM_Start_DMA+0x410>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d004      	beq.n	80051ea <HAL_TIM_PWM_Start_DMA+0x3b6>
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a18      	ldr	r2, [pc, #96]	; (8005248 <HAL_TIM_PWM_Start_DMA+0x414>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d115      	bne.n	8005216 <HAL_TIM_PWM_Start_DMA+0x3e2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	689a      	ldr	r2, [r3, #8]
 80051f0:	4b1b      	ldr	r3, [pc, #108]	; (8005260 <HAL_TIM_PWM_Start_DMA+0x42c>)
 80051f2:	4013      	ands	r3, r2
 80051f4:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	2b06      	cmp	r3, #6
 80051fa:	d015      	beq.n	8005228 <HAL_TIM_PWM_Start_DMA+0x3f4>
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005202:	d011      	beq.n	8005228 <HAL_TIM_PWM_Start_DMA+0x3f4>
    {
      __HAL_TIM_ENABLE(htim);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f042 0201 	orr.w	r2, r2, #1
 8005212:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005214:	e008      	b.n	8005228 <HAL_TIM_PWM_Start_DMA+0x3f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f042 0201 	orr.w	r2, r2, #1
 8005224:	601a      	str	r2, [r3, #0]
 8005226:	e000      	b.n	800522a <HAL_TIM_PWM_Start_DMA+0x3f6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005228:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800522a:	2300      	movs	r3, #0
}
 800522c:	4618      	mov	r0, r3
 800522e:	3718      	adds	r7, #24
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}
 8005234:	08005edb 	.word	0x08005edb
 8005238:	08005f83 	.word	0x08005f83
 800523c:	08005e49 	.word	0x08005e49
 8005240:	40012c00 	.word	0x40012c00
 8005244:	40013400 	.word	0x40013400
 8005248:	40014000 	.word	0x40014000
 800524c:	40014400 	.word	0x40014400
 8005250:	40014800 	.word	0x40014800
 8005254:	40000400 	.word	0x40000400
 8005258:	40000800 	.word	0x40000800
 800525c:	40000c00 	.word	0x40000c00
 8005260:	00010007 	.word	0x00010007

08005264 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d101      	bne.n	8005276 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e049      	b.n	800530a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800527c:	b2db      	uxtb	r3, r3
 800527e:	2b00      	cmp	r3, #0
 8005280:	d106      	bne.n	8005290 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 f841 	bl	8005312 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2202      	movs	r2, #2
 8005294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	3304      	adds	r3, #4
 80052a0:	4619      	mov	r1, r3
 80052a2:	4610      	mov	r0, r2
 80052a4:	f000 fea2 	bl	8005fec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2201      	movs	r2, #1
 80052c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2201      	movs	r2, #1
 80052d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005308:	2300      	movs	r3, #0
}
 800530a:	4618      	mov	r0, r3
 800530c:	3708      	adds	r7, #8
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}

08005312 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005312:	b480      	push	{r7}
 8005314:	b083      	sub	sp, #12
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800531a:	bf00      	nop
 800531c:	370c      	adds	r7, #12
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
	...

08005328 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d104      	bne.n	8005342 <HAL_TIM_IC_Start_IT+0x1a>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800533e:	b2db      	uxtb	r3, r3
 8005340:	e023      	b.n	800538a <HAL_TIM_IC_Start_IT+0x62>
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	2b04      	cmp	r3, #4
 8005346:	d104      	bne.n	8005352 <HAL_TIM_IC_Start_IT+0x2a>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800534e:	b2db      	uxtb	r3, r3
 8005350:	e01b      	b.n	800538a <HAL_TIM_IC_Start_IT+0x62>
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	2b08      	cmp	r3, #8
 8005356:	d104      	bne.n	8005362 <HAL_TIM_IC_Start_IT+0x3a>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800535e:	b2db      	uxtb	r3, r3
 8005360:	e013      	b.n	800538a <HAL_TIM_IC_Start_IT+0x62>
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	2b0c      	cmp	r3, #12
 8005366:	d104      	bne.n	8005372 <HAL_TIM_IC_Start_IT+0x4a>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800536e:	b2db      	uxtb	r3, r3
 8005370:	e00b      	b.n	800538a <HAL_TIM_IC_Start_IT+0x62>
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	2b10      	cmp	r3, #16
 8005376:	d104      	bne.n	8005382 <HAL_TIM_IC_Start_IT+0x5a>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800537e:	b2db      	uxtb	r3, r3
 8005380:	e003      	b.n	800538a <HAL_TIM_IC_Start_IT+0x62>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005388:	b2db      	uxtb	r3, r3
 800538a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d104      	bne.n	800539c <HAL_TIM_IC_Start_IT+0x74>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005398:	b2db      	uxtb	r3, r3
 800539a:	e013      	b.n	80053c4 <HAL_TIM_IC_Start_IT+0x9c>
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	2b04      	cmp	r3, #4
 80053a0:	d104      	bne.n	80053ac <HAL_TIM_IC_Start_IT+0x84>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	e00b      	b.n	80053c4 <HAL_TIM_IC_Start_IT+0x9c>
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	2b08      	cmp	r3, #8
 80053b0:	d104      	bne.n	80053bc <HAL_TIM_IC_Start_IT+0x94>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	e003      	b.n	80053c4 <HAL_TIM_IC_Start_IT+0x9c>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80053c6:	7bfb      	ldrb	r3, [r7, #15]
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d102      	bne.n	80053d2 <HAL_TIM_IC_Start_IT+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80053cc:	7bbb      	ldrb	r3, [r7, #14]
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d001      	beq.n	80053d6 <HAL_TIM_IC_Start_IT+0xae>
  {
    return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e0d8      	b.n	8005588 <HAL_TIM_IC_Start_IT+0x260>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d104      	bne.n	80053e6 <HAL_TIM_IC_Start_IT+0xbe>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2202      	movs	r2, #2
 80053e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053e4:	e023      	b.n	800542e <HAL_TIM_IC_Start_IT+0x106>
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	2b04      	cmp	r3, #4
 80053ea:	d104      	bne.n	80053f6 <HAL_TIM_IC_Start_IT+0xce>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2202      	movs	r2, #2
 80053f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053f4:	e01b      	b.n	800542e <HAL_TIM_IC_Start_IT+0x106>
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	2b08      	cmp	r3, #8
 80053fa:	d104      	bne.n	8005406 <HAL_TIM_IC_Start_IT+0xde>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2202      	movs	r2, #2
 8005400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005404:	e013      	b.n	800542e <HAL_TIM_IC_Start_IT+0x106>
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	2b0c      	cmp	r3, #12
 800540a:	d104      	bne.n	8005416 <HAL_TIM_IC_Start_IT+0xee>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2202      	movs	r2, #2
 8005410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005414:	e00b      	b.n	800542e <HAL_TIM_IC_Start_IT+0x106>
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	2b10      	cmp	r3, #16
 800541a:	d104      	bne.n	8005426 <HAL_TIM_IC_Start_IT+0xfe>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2202      	movs	r2, #2
 8005420:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005424:	e003      	b.n	800542e <HAL_TIM_IC_Start_IT+0x106>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2202      	movs	r2, #2
 800542a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d104      	bne.n	800543e <HAL_TIM_IC_Start_IT+0x116>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2202      	movs	r2, #2
 8005438:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800543c:	e013      	b.n	8005466 <HAL_TIM_IC_Start_IT+0x13e>
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	2b04      	cmp	r3, #4
 8005442:	d104      	bne.n	800544e <HAL_TIM_IC_Start_IT+0x126>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2202      	movs	r2, #2
 8005448:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800544c:	e00b      	b.n	8005466 <HAL_TIM_IC_Start_IT+0x13e>
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	2b08      	cmp	r3, #8
 8005452:	d104      	bne.n	800545e <HAL_TIM_IC_Start_IT+0x136>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2202      	movs	r2, #2
 8005458:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800545c:	e003      	b.n	8005466 <HAL_TIM_IC_Start_IT+0x13e>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2202      	movs	r2, #2
 8005462:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	2b0c      	cmp	r3, #12
 800546a:	d841      	bhi.n	80054f0 <HAL_TIM_IC_Start_IT+0x1c8>
 800546c:	a201      	add	r2, pc, #4	; (adr r2, 8005474 <HAL_TIM_IC_Start_IT+0x14c>)
 800546e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005472:	bf00      	nop
 8005474:	080054a9 	.word	0x080054a9
 8005478:	080054f1 	.word	0x080054f1
 800547c:	080054f1 	.word	0x080054f1
 8005480:	080054f1 	.word	0x080054f1
 8005484:	080054bb 	.word	0x080054bb
 8005488:	080054f1 	.word	0x080054f1
 800548c:	080054f1 	.word	0x080054f1
 8005490:	080054f1 	.word	0x080054f1
 8005494:	080054cd 	.word	0x080054cd
 8005498:	080054f1 	.word	0x080054f1
 800549c:	080054f1 	.word	0x080054f1
 80054a0:	080054f1 	.word	0x080054f1
 80054a4:	080054df 	.word	0x080054df
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68da      	ldr	r2, [r3, #12]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f042 0202 	orr.w	r2, r2, #2
 80054b6:	60da      	str	r2, [r3, #12]
      break;
 80054b8:	e01b      	b.n	80054f2 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68da      	ldr	r2, [r3, #12]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f042 0204 	orr.w	r2, r2, #4
 80054c8:	60da      	str	r2, [r3, #12]
      break;
 80054ca:	e012      	b.n	80054f2 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	68da      	ldr	r2, [r3, #12]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f042 0208 	orr.w	r2, r2, #8
 80054da:	60da      	str	r2, [r3, #12]
      break;
 80054dc:	e009      	b.n	80054f2 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	68da      	ldr	r2, [r3, #12]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f042 0210 	orr.w	r2, r2, #16
 80054ec:	60da      	str	r2, [r3, #12]
      break;
 80054ee:	e000      	b.n	80054f2 <HAL_TIM_IC_Start_IT+0x1ca>
    }

    default:
      break;
 80054f0:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2201      	movs	r2, #1
 80054f8:	6839      	ldr	r1, [r7, #0]
 80054fa:	4618      	mov	r0, r3
 80054fc:	f001 fb34 	bl	8006b68 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a22      	ldr	r2, [pc, #136]	; (8005590 <HAL_TIM_IC_Start_IT+0x268>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d01d      	beq.n	8005546 <HAL_TIM_IC_Start_IT+0x21e>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005512:	d018      	beq.n	8005546 <HAL_TIM_IC_Start_IT+0x21e>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a1e      	ldr	r2, [pc, #120]	; (8005594 <HAL_TIM_IC_Start_IT+0x26c>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d013      	beq.n	8005546 <HAL_TIM_IC_Start_IT+0x21e>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a1d      	ldr	r2, [pc, #116]	; (8005598 <HAL_TIM_IC_Start_IT+0x270>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d00e      	beq.n	8005546 <HAL_TIM_IC_Start_IT+0x21e>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a1b      	ldr	r2, [pc, #108]	; (800559c <HAL_TIM_IC_Start_IT+0x274>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d009      	beq.n	8005546 <HAL_TIM_IC_Start_IT+0x21e>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a1a      	ldr	r2, [pc, #104]	; (80055a0 <HAL_TIM_IC_Start_IT+0x278>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d004      	beq.n	8005546 <HAL_TIM_IC_Start_IT+0x21e>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a18      	ldr	r2, [pc, #96]	; (80055a4 <HAL_TIM_IC_Start_IT+0x27c>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d115      	bne.n	8005572 <HAL_TIM_IC_Start_IT+0x24a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	689a      	ldr	r2, [r3, #8]
 800554c:	4b16      	ldr	r3, [pc, #88]	; (80055a8 <HAL_TIM_IC_Start_IT+0x280>)
 800554e:	4013      	ands	r3, r2
 8005550:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	2b06      	cmp	r3, #6
 8005556:	d015      	beq.n	8005584 <HAL_TIM_IC_Start_IT+0x25c>
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800555e:	d011      	beq.n	8005584 <HAL_TIM_IC_Start_IT+0x25c>
    {
      __HAL_TIM_ENABLE(htim);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f042 0201 	orr.w	r2, r2, #1
 800556e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005570:	e008      	b.n	8005584 <HAL_TIM_IC_Start_IT+0x25c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f042 0201 	orr.w	r2, r2, #1
 8005580:	601a      	str	r2, [r3, #0]
 8005582:	e000      	b.n	8005586 <HAL_TIM_IC_Start_IT+0x25e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005584:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005586:	2300      	movs	r3, #0
}
 8005588:	4618      	mov	r0, r3
 800558a:	3710      	adds	r7, #16
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}
 8005590:	40012c00 	.word	0x40012c00
 8005594:	40000400 	.word	0x40000400
 8005598:	40000800 	.word	0x40000800
 800559c:	40000c00 	.word	0x40000c00
 80055a0:	40013400 	.word	0x40013400
 80055a4:	40014000 	.word	0x40014000
 80055a8:	00010007 	.word	0x00010007

080055ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b082      	sub	sp, #8
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	f003 0302 	and.w	r3, r3, #2
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d122      	bne.n	8005608 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	f003 0302 	and.w	r3, r3, #2
 80055cc:	2b02      	cmp	r3, #2
 80055ce:	d11b      	bne.n	8005608 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f06f 0202 	mvn.w	r2, #2
 80055d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2201      	movs	r2, #1
 80055de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	f003 0303 	and.w	r3, r3, #3
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d003      	beq.n	80055f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f7fb f8e6 	bl	80007c0 <HAL_TIM_IC_CaptureCallback>
 80055f4:	e005      	b.n	8005602 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 fbe8 	bl	8005dcc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f000 fbef 	bl	8005de0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	f003 0304 	and.w	r3, r3, #4
 8005612:	2b04      	cmp	r3, #4
 8005614:	d122      	bne.n	800565c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	f003 0304 	and.w	r3, r3, #4
 8005620:	2b04      	cmp	r3, #4
 8005622:	d11b      	bne.n	800565c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f06f 0204 	mvn.w	r2, #4
 800562c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2202      	movs	r2, #2
 8005632:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	699b      	ldr	r3, [r3, #24]
 800563a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800563e:	2b00      	cmp	r3, #0
 8005640:	d003      	beq.n	800564a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f7fb f8bc 	bl	80007c0 <HAL_TIM_IC_CaptureCallback>
 8005648:	e005      	b.n	8005656 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 fbbe 	bl	8005dcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f000 fbc5 	bl	8005de0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	f003 0308 	and.w	r3, r3, #8
 8005666:	2b08      	cmp	r3, #8
 8005668:	d122      	bne.n	80056b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	f003 0308 	and.w	r3, r3, #8
 8005674:	2b08      	cmp	r3, #8
 8005676:	d11b      	bne.n	80056b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f06f 0208 	mvn.w	r2, #8
 8005680:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2204      	movs	r2, #4
 8005686:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	69db      	ldr	r3, [r3, #28]
 800568e:	f003 0303 	and.w	r3, r3, #3
 8005692:	2b00      	cmp	r3, #0
 8005694:	d003      	beq.n	800569e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f7fb f892 	bl	80007c0 <HAL_TIM_IC_CaptureCallback>
 800569c:	e005      	b.n	80056aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 fb94 	bl	8005dcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 fb9b 	bl	8005de0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	f003 0310 	and.w	r3, r3, #16
 80056ba:	2b10      	cmp	r3, #16
 80056bc:	d122      	bne.n	8005704 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	f003 0310 	and.w	r3, r3, #16
 80056c8:	2b10      	cmp	r3, #16
 80056ca:	d11b      	bne.n	8005704 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f06f 0210 	mvn.w	r2, #16
 80056d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2208      	movs	r2, #8
 80056da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	69db      	ldr	r3, [r3, #28]
 80056e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d003      	beq.n	80056f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f7fb f868 	bl	80007c0 <HAL_TIM_IC_CaptureCallback>
 80056f0:	e005      	b.n	80056fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 fb6a 	bl	8005dcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f000 fb71 	bl	8005de0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	f003 0301 	and.w	r3, r3, #1
 800570e:	2b01      	cmp	r3, #1
 8005710:	d10e      	bne.n	8005730 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	f003 0301 	and.w	r3, r3, #1
 800571c:	2b01      	cmp	r3, #1
 800571e:	d107      	bne.n	8005730 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f06f 0201 	mvn.w	r2, #1
 8005728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f7fb f868 	bl	8000800 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800573a:	2b80      	cmp	r3, #128	; 0x80
 800573c:	d10e      	bne.n	800575c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005748:	2b80      	cmp	r3, #128	; 0x80
 800574a:	d107      	bne.n	800575c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005754:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f001 fabe 	bl	8006cd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005766:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800576a:	d10e      	bne.n	800578a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005776:	2b80      	cmp	r3, #128	; 0x80
 8005778:	d107      	bne.n	800578a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005782:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f001 fab1 	bl	8006cec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	691b      	ldr	r3, [r3, #16]
 8005790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005794:	2b40      	cmp	r3, #64	; 0x40
 8005796:	d10e      	bne.n	80057b6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057a2:	2b40      	cmp	r3, #64	; 0x40
 80057a4:	d107      	bne.n	80057b6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80057ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f000 fb29 	bl	8005e08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	691b      	ldr	r3, [r3, #16]
 80057bc:	f003 0320 	and.w	r3, r3, #32
 80057c0:	2b20      	cmp	r3, #32
 80057c2:	d10e      	bne.n	80057e2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	f003 0320 	and.w	r3, r3, #32
 80057ce:	2b20      	cmp	r3, #32
 80057d0:	d107      	bne.n	80057e2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f06f 0220 	mvn.w	r2, #32
 80057da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f001 fa71 	bl	8006cc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057e2:	bf00      	nop
 80057e4:	3708      	adds	r7, #8
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}

080057ea <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80057ea:	b580      	push	{r7, lr}
 80057ec:	b084      	sub	sp, #16
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	60f8      	str	r0, [r7, #12]
 80057f2:	60b9      	str	r1, [r7, #8]
 80057f4:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d101      	bne.n	8005804 <HAL_TIM_IC_ConfigChannel+0x1a>
 8005800:	2302      	movs	r3, #2
 8005802:	e082      	b.n	800590a <HAL_TIM_IC_ConfigChannel+0x120>
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d11b      	bne.n	800584a <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	6818      	ldr	r0, [r3, #0]
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	6819      	ldr	r1, [r3, #0]
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	685a      	ldr	r2, [r3, #4]
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	68db      	ldr	r3, [r3, #12]
 8005822:	f000 ffe3 	bl	80067ec <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	699a      	ldr	r2, [r3, #24]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f022 020c 	bic.w	r2, r2, #12
 8005834:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	6999      	ldr	r1, [r3, #24]
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	689a      	ldr	r2, [r3, #8]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	430a      	orrs	r2, r1
 8005846:	619a      	str	r2, [r3, #24]
 8005848:	e05a      	b.n	8005900 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2b04      	cmp	r3, #4
 800584e:	d11c      	bne.n	800588a <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6818      	ldr	r0, [r3, #0]
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	6819      	ldr	r1, [r3, #0]
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	685a      	ldr	r2, [r3, #4]
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	f001 f861 	bl	8006926 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	699a      	ldr	r2, [r3, #24]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005872:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	6999      	ldr	r1, [r3, #24]
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	021a      	lsls	r2, r3, #8
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	430a      	orrs	r2, r1
 8005886:	619a      	str	r2, [r3, #24]
 8005888:	e03a      	b.n	8005900 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2b08      	cmp	r3, #8
 800588e:	d11b      	bne.n	80058c8 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6818      	ldr	r0, [r3, #0]
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	6819      	ldr	r1, [r3, #0]
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	685a      	ldr	r2, [r3, #4]
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	f001 f8ae 	bl	8006a00 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	69da      	ldr	r2, [r3, #28]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f022 020c 	bic.w	r2, r2, #12
 80058b2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	69d9      	ldr	r1, [r3, #28]
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	689a      	ldr	r2, [r3, #8]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	430a      	orrs	r2, r1
 80058c4:	61da      	str	r2, [r3, #28]
 80058c6:	e01b      	b.n	8005900 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	6818      	ldr	r0, [r3, #0]
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	6819      	ldr	r1, [r3, #0]
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	685a      	ldr	r2, [r3, #4]
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	f001 f8ce 	bl	8006a78 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	69da      	ldr	r2, [r3, #28]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80058ea:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	69d9      	ldr	r1, [r3, #28]
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	021a      	lsls	r2, r3, #8
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	430a      	orrs	r2, r1
 80058fe:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2200      	movs	r2, #0
 8005904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005908:	2300      	movs	r3, #0
}
 800590a:	4618      	mov	r0, r3
 800590c:	3710      	adds	r7, #16
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
	...

08005914 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005926:	2b01      	cmp	r3, #1
 8005928:	d101      	bne.n	800592e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800592a:	2302      	movs	r3, #2
 800592c:	e0fd      	b.n	8005b2a <HAL_TIM_PWM_ConfigChannel+0x216>
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2201      	movs	r2, #1
 8005932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2b14      	cmp	r3, #20
 800593a:	f200 80f0 	bhi.w	8005b1e <HAL_TIM_PWM_ConfigChannel+0x20a>
 800593e:	a201      	add	r2, pc, #4	; (adr r2, 8005944 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005944:	08005999 	.word	0x08005999
 8005948:	08005b1f 	.word	0x08005b1f
 800594c:	08005b1f 	.word	0x08005b1f
 8005950:	08005b1f 	.word	0x08005b1f
 8005954:	080059d9 	.word	0x080059d9
 8005958:	08005b1f 	.word	0x08005b1f
 800595c:	08005b1f 	.word	0x08005b1f
 8005960:	08005b1f 	.word	0x08005b1f
 8005964:	08005a1b 	.word	0x08005a1b
 8005968:	08005b1f 	.word	0x08005b1f
 800596c:	08005b1f 	.word	0x08005b1f
 8005970:	08005b1f 	.word	0x08005b1f
 8005974:	08005a5b 	.word	0x08005a5b
 8005978:	08005b1f 	.word	0x08005b1f
 800597c:	08005b1f 	.word	0x08005b1f
 8005980:	08005b1f 	.word	0x08005b1f
 8005984:	08005a9d 	.word	0x08005a9d
 8005988:	08005b1f 	.word	0x08005b1f
 800598c:	08005b1f 	.word	0x08005b1f
 8005990:	08005b1f 	.word	0x08005b1f
 8005994:	08005add 	.word	0x08005add
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	68b9      	ldr	r1, [r7, #8]
 800599e:	4618      	mov	r0, r3
 80059a0:	f000 fbbe 	bl	8006120 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	699a      	ldr	r2, [r3, #24]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f042 0208 	orr.w	r2, r2, #8
 80059b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	699a      	ldr	r2, [r3, #24]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f022 0204 	bic.w	r2, r2, #4
 80059c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	6999      	ldr	r1, [r3, #24]
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	691a      	ldr	r2, [r3, #16]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	430a      	orrs	r2, r1
 80059d4:	619a      	str	r2, [r3, #24]
      break;
 80059d6:	e0a3      	b.n	8005b20 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	68b9      	ldr	r1, [r7, #8]
 80059de:	4618      	mov	r0, r3
 80059e0:	f000 fc2e 	bl	8006240 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	699a      	ldr	r2, [r3, #24]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	699a      	ldr	r2, [r3, #24]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	6999      	ldr	r1, [r3, #24]
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	691b      	ldr	r3, [r3, #16]
 8005a0e:	021a      	lsls	r2, r3, #8
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	430a      	orrs	r2, r1
 8005a16:	619a      	str	r2, [r3, #24]
      break;
 8005a18:	e082      	b.n	8005b20 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	68b9      	ldr	r1, [r7, #8]
 8005a20:	4618      	mov	r0, r3
 8005a22:	f000 fc97 	bl	8006354 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	69da      	ldr	r2, [r3, #28]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f042 0208 	orr.w	r2, r2, #8
 8005a34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	69da      	ldr	r2, [r3, #28]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f022 0204 	bic.w	r2, r2, #4
 8005a44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	69d9      	ldr	r1, [r3, #28]
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	691a      	ldr	r2, [r3, #16]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	430a      	orrs	r2, r1
 8005a56:	61da      	str	r2, [r3, #28]
      break;
 8005a58:	e062      	b.n	8005b20 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	68b9      	ldr	r1, [r7, #8]
 8005a60:	4618      	mov	r0, r3
 8005a62:	f000 fcff 	bl	8006464 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	69da      	ldr	r2, [r3, #28]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	69da      	ldr	r2, [r3, #28]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	69d9      	ldr	r1, [r3, #28]
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	691b      	ldr	r3, [r3, #16]
 8005a90:	021a      	lsls	r2, r3, #8
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	430a      	orrs	r2, r1
 8005a98:	61da      	str	r2, [r3, #28]
      break;
 8005a9a:	e041      	b.n	8005b20 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	68b9      	ldr	r1, [r7, #8]
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f000 fd48 	bl	8006538 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f042 0208 	orr.w	r2, r2, #8
 8005ab6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f022 0204 	bic.w	r2, r2, #4
 8005ac6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	691a      	ldr	r2, [r3, #16]
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	430a      	orrs	r2, r1
 8005ad8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005ada:	e021      	b.n	8005b20 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	68b9      	ldr	r1, [r7, #8]
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f000 fd8c 	bl	8006600 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005af6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b06:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	691b      	ldr	r3, [r3, #16]
 8005b12:	021a      	lsls	r2, r3, #8
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	430a      	orrs	r2, r1
 8005b1a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005b1c:	e000      	b.n	8005b20 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8005b1e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2200      	movs	r2, #0
 8005b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b28:	2300      	movs	r3, #0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3710      	adds	r7, #16
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	bf00      	nop

08005b34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b084      	sub	sp, #16
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d101      	bne.n	8005b4c <HAL_TIM_ConfigClockSource+0x18>
 8005b48:	2302      	movs	r3, #2
 8005b4a:	e0b5      	b.n	8005cb8 <HAL_TIM_ConfigClockSource+0x184>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2202      	movs	r2, #2
 8005b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b6a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005b6e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b76:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	68fa      	ldr	r2, [r7, #12]
 8005b7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b88:	d03e      	beq.n	8005c08 <HAL_TIM_ConfigClockSource+0xd4>
 8005b8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b8e:	f200 8087 	bhi.w	8005ca0 <HAL_TIM_ConfigClockSource+0x16c>
 8005b92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b96:	f000 8085 	beq.w	8005ca4 <HAL_TIM_ConfigClockSource+0x170>
 8005b9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b9e:	d87f      	bhi.n	8005ca0 <HAL_TIM_ConfigClockSource+0x16c>
 8005ba0:	2b70      	cmp	r3, #112	; 0x70
 8005ba2:	d01a      	beq.n	8005bda <HAL_TIM_ConfigClockSource+0xa6>
 8005ba4:	2b70      	cmp	r3, #112	; 0x70
 8005ba6:	d87b      	bhi.n	8005ca0 <HAL_TIM_ConfigClockSource+0x16c>
 8005ba8:	2b60      	cmp	r3, #96	; 0x60
 8005baa:	d050      	beq.n	8005c4e <HAL_TIM_ConfigClockSource+0x11a>
 8005bac:	2b60      	cmp	r3, #96	; 0x60
 8005bae:	d877      	bhi.n	8005ca0 <HAL_TIM_ConfigClockSource+0x16c>
 8005bb0:	2b50      	cmp	r3, #80	; 0x50
 8005bb2:	d03c      	beq.n	8005c2e <HAL_TIM_ConfigClockSource+0xfa>
 8005bb4:	2b50      	cmp	r3, #80	; 0x50
 8005bb6:	d873      	bhi.n	8005ca0 <HAL_TIM_ConfigClockSource+0x16c>
 8005bb8:	2b40      	cmp	r3, #64	; 0x40
 8005bba:	d058      	beq.n	8005c6e <HAL_TIM_ConfigClockSource+0x13a>
 8005bbc:	2b40      	cmp	r3, #64	; 0x40
 8005bbe:	d86f      	bhi.n	8005ca0 <HAL_TIM_ConfigClockSource+0x16c>
 8005bc0:	2b30      	cmp	r3, #48	; 0x30
 8005bc2:	d064      	beq.n	8005c8e <HAL_TIM_ConfigClockSource+0x15a>
 8005bc4:	2b30      	cmp	r3, #48	; 0x30
 8005bc6:	d86b      	bhi.n	8005ca0 <HAL_TIM_ConfigClockSource+0x16c>
 8005bc8:	2b20      	cmp	r3, #32
 8005bca:	d060      	beq.n	8005c8e <HAL_TIM_ConfigClockSource+0x15a>
 8005bcc:	2b20      	cmp	r3, #32
 8005bce:	d867      	bhi.n	8005ca0 <HAL_TIM_ConfigClockSource+0x16c>
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d05c      	beq.n	8005c8e <HAL_TIM_ConfigClockSource+0x15a>
 8005bd4:	2b10      	cmp	r3, #16
 8005bd6:	d05a      	beq.n	8005c8e <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005bd8:	e062      	b.n	8005ca0 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6818      	ldr	r0, [r3, #0]
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	6899      	ldr	r1, [r3, #8]
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	685a      	ldr	r2, [r3, #4]
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	f000 ff9d 	bl	8006b28 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005bfc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	68fa      	ldr	r2, [r7, #12]
 8005c04:	609a      	str	r2, [r3, #8]
      break;
 8005c06:	e04e      	b.n	8005ca6 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6818      	ldr	r0, [r3, #0]
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	6899      	ldr	r1, [r3, #8]
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	685a      	ldr	r2, [r3, #4]
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	f000 ff86 	bl	8006b28 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	689a      	ldr	r2, [r3, #8]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c2a:	609a      	str	r2, [r3, #8]
      break;
 8005c2c:	e03b      	b.n	8005ca6 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6818      	ldr	r0, [r3, #0]
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	6859      	ldr	r1, [r3, #4]
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	f000 fe44 	bl	80068c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	2150      	movs	r1, #80	; 0x50
 8005c46:	4618      	mov	r0, r3
 8005c48:	f000 ff53 	bl	8006af2 <TIM_ITRx_SetConfig>
      break;
 8005c4c:	e02b      	b.n	8005ca6 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6818      	ldr	r0, [r3, #0]
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	6859      	ldr	r1, [r3, #4]
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	f000 fea0 	bl	80069a0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	2160      	movs	r1, #96	; 0x60
 8005c66:	4618      	mov	r0, r3
 8005c68:	f000 ff43 	bl	8006af2 <TIM_ITRx_SetConfig>
      break;
 8005c6c:	e01b      	b.n	8005ca6 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6818      	ldr	r0, [r3, #0]
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	6859      	ldr	r1, [r3, #4]
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	f000 fe24 	bl	80068c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	2140      	movs	r1, #64	; 0x40
 8005c86:	4618      	mov	r0, r3
 8005c88:	f000 ff33 	bl	8006af2 <TIM_ITRx_SetConfig>
      break;
 8005c8c:	e00b      	b.n	8005ca6 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4619      	mov	r1, r3
 8005c98:	4610      	mov	r0, r2
 8005c9a:	f000 ff2a 	bl	8006af2 <TIM_ITRx_SetConfig>
        break;
 8005c9e:	e002      	b.n	8005ca6 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8005ca0:	bf00      	nop
 8005ca2:	e000      	b.n	8005ca6 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8005ca4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2201      	movs	r2, #1
 8005caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005cb6:	2300      	movs	r3, #0
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3710      	adds	r7, #16
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b082      	sub	sp, #8
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d101      	bne.n	8005cd8 <HAL_TIM_SlaveConfigSynchro+0x18>
 8005cd4:	2302      	movs	r3, #2
 8005cd6:	e031      	b.n	8005d3c <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2202      	movs	r2, #2
 8005ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005ce8:	6839      	ldr	r1, [r7, #0]
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f000 fcee 	bl	80066cc <TIM_SlaveTimer_SetConfig>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d009      	beq.n	8005d0a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2200      	movs	r2, #0
 8005d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	e018      	b.n	8005d3c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	68da      	ldr	r2, [r3, #12]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d18:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	68da      	ldr	r2, [r3, #12]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005d28:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2200      	movs	r2, #0
 8005d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d3a:	2300      	movs	r3, #0
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3708      	adds	r7, #8
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}

08005d44 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b085      	sub	sp, #20
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	60fb      	str	r3, [r7, #12]
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	2b0c      	cmp	r3, #12
 8005d56:	d831      	bhi.n	8005dbc <HAL_TIM_ReadCapturedValue+0x78>
 8005d58:	a201      	add	r2, pc, #4	; (adr r2, 8005d60 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d5e:	bf00      	nop
 8005d60:	08005d95 	.word	0x08005d95
 8005d64:	08005dbd 	.word	0x08005dbd
 8005d68:	08005dbd 	.word	0x08005dbd
 8005d6c:	08005dbd 	.word	0x08005dbd
 8005d70:	08005d9f 	.word	0x08005d9f
 8005d74:	08005dbd 	.word	0x08005dbd
 8005d78:	08005dbd 	.word	0x08005dbd
 8005d7c:	08005dbd 	.word	0x08005dbd
 8005d80:	08005da9 	.word	0x08005da9
 8005d84:	08005dbd 	.word	0x08005dbd
 8005d88:	08005dbd 	.word	0x08005dbd
 8005d8c:	08005dbd 	.word	0x08005dbd
 8005d90:	08005db3 	.word	0x08005db3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d9a:	60fb      	str	r3, [r7, #12]

      break;
 8005d9c:	e00f      	b.n	8005dbe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da4:	60fb      	str	r3, [r7, #12]

      break;
 8005da6:	e00a      	b.n	8005dbe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dae:	60fb      	str	r3, [r7, #12]

      break;
 8005db0:	e005      	b.n	8005dbe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db8:	60fb      	str	r3, [r7, #12]

      break;
 8005dba:	e000      	b.n	8005dbe <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005dbc:	bf00      	nop
  }

  return tmpreg;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3714      	adds	r7, #20
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr

08005dcc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b083      	sub	sp, #12
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005dd4:	bf00      	nop
 8005dd6:	370c      	adds	r7, #12
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr

08005de0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b083      	sub	sp, #12
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005de8:	bf00      	nop
 8005dea:	370c      	adds	r7, #12
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b083      	sub	sp, #12
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8005dfc:	bf00      	nop
 8005dfe:	370c      	adds	r7, #12
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr

08005e08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e10:	bf00      	nop
 8005e12:	370c      	adds	r7, #12
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005e24:	bf00      	nop
 8005e26:	370c      	adds	r7, #12
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <HAL_TIM_GetActiveChannel>:
  * @brief  Return the TIM Encoder Mode handle state.
  * @param  htim TIM handle
  * @retval Active channel
  */
HAL_TIM_ActiveChannel HAL_TIM_GetActiveChannel(TIM_HandleTypeDef *htim)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  return htim->Channel;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	7f1b      	ldrb	r3, [r3, #28]
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	370c      	adds	r7, #12
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e54:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d107      	bne.n	8005e70 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2201      	movs	r2, #1
 8005e64:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2201      	movs	r2, #1
 8005e6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e6e:	e02a      	b.n	8005ec6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e74:	687a      	ldr	r2, [r7, #4]
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d107      	bne.n	8005e8a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2202      	movs	r2, #2
 8005e7e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e88:	e01d      	b.n	8005ec6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d107      	bne.n	8005ea4 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2204      	movs	r2, #4
 8005e98:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ea2:	e010      	b.n	8005ec6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d107      	bne.n	8005ebe <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2208      	movs	r2, #8
 8005eb2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ebc:	e003      	b.n	8005ec6 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005ec6:	68f8      	ldr	r0, [r7, #12]
 8005ec8:	f7ff ffa8 	bl	8005e1c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	771a      	strb	r2, [r3, #28]
}
 8005ed2:	bf00      	nop
 8005ed4:	3710      	adds	r7, #16
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}

08005eda <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8005eda:	b580      	push	{r7, lr}
 8005edc:	b084      	sub	sp, #16
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d10b      	bne.n	8005f0a <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	69db      	ldr	r3, [r3, #28]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d136      	bne.n	8005f6e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f08:	e031      	b.n	8005f6e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f0e:	687a      	ldr	r2, [r7, #4]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d10b      	bne.n	8005f2c <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2202      	movs	r2, #2
 8005f18:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	69db      	ldr	r3, [r3, #28]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d125      	bne.n	8005f6e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2201      	movs	r2, #1
 8005f26:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f2a:	e020      	b.n	8005f6e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d10b      	bne.n	8005f4e <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2204      	movs	r2, #4
 8005f3a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	69db      	ldr	r3, [r3, #28]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d114      	bne.n	8005f6e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f4c:	e00f      	b.n	8005f6e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f52:	687a      	ldr	r2, [r7, #4]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d10a      	bne.n	8005f6e <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2208      	movs	r2, #8
 8005f5c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	69db      	ldr	r3, [r3, #28]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d103      	bne.n	8005f6e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2201      	movs	r2, #1
 8005f6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f6e:	68f8      	ldr	r0, [r7, #12]
 8005f70:	f7ff ff36 	bl	8005de0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2200      	movs	r2, #0
 8005f78:	771a      	strb	r2, [r3, #28]
}
 8005f7a:	bf00      	nop
 8005f7c:	3710      	adds	r7, #16
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}

08005f82 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005f82:	b580      	push	{r7, lr}
 8005f84:	b084      	sub	sp, #16
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f8e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d103      	bne.n	8005fa2 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	771a      	strb	r2, [r3, #28]
 8005fa0:	e019      	b.n	8005fd6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d103      	bne.n	8005fb4 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2202      	movs	r2, #2
 8005fb0:	771a      	strb	r2, [r3, #28]
 8005fb2:	e010      	b.n	8005fd6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d103      	bne.n	8005fc6 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2204      	movs	r2, #4
 8005fc2:	771a      	strb	r2, [r3, #28]
 8005fc4:	e007      	b.n	8005fd6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d102      	bne.n	8005fd6 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2208      	movs	r2, #8
 8005fd4:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005fd6:	68f8      	ldr	r0, [r7, #12]
 8005fd8:	f7ff ff0c 	bl	8005df4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	771a      	strb	r2, [r3, #28]
}
 8005fe2:	bf00      	nop
 8005fe4:	3710      	adds	r7, #16
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}
	...

08005fec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b085      	sub	sp, #20
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	4a40      	ldr	r2, [pc, #256]	; (8006100 <TIM_Base_SetConfig+0x114>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d013      	beq.n	800602c <TIM_Base_SetConfig+0x40>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800600a:	d00f      	beq.n	800602c <TIM_Base_SetConfig+0x40>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	4a3d      	ldr	r2, [pc, #244]	; (8006104 <TIM_Base_SetConfig+0x118>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d00b      	beq.n	800602c <TIM_Base_SetConfig+0x40>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4a3c      	ldr	r2, [pc, #240]	; (8006108 <TIM_Base_SetConfig+0x11c>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d007      	beq.n	800602c <TIM_Base_SetConfig+0x40>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	4a3b      	ldr	r2, [pc, #236]	; (800610c <TIM_Base_SetConfig+0x120>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d003      	beq.n	800602c <TIM_Base_SetConfig+0x40>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	4a3a      	ldr	r2, [pc, #232]	; (8006110 <TIM_Base_SetConfig+0x124>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d108      	bne.n	800603e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006032:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	68fa      	ldr	r2, [r7, #12]
 800603a:	4313      	orrs	r3, r2
 800603c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a2f      	ldr	r2, [pc, #188]	; (8006100 <TIM_Base_SetConfig+0x114>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d01f      	beq.n	8006086 <TIM_Base_SetConfig+0x9a>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800604c:	d01b      	beq.n	8006086 <TIM_Base_SetConfig+0x9a>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4a2c      	ldr	r2, [pc, #176]	; (8006104 <TIM_Base_SetConfig+0x118>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d017      	beq.n	8006086 <TIM_Base_SetConfig+0x9a>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4a2b      	ldr	r2, [pc, #172]	; (8006108 <TIM_Base_SetConfig+0x11c>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d013      	beq.n	8006086 <TIM_Base_SetConfig+0x9a>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4a2a      	ldr	r2, [pc, #168]	; (800610c <TIM_Base_SetConfig+0x120>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d00f      	beq.n	8006086 <TIM_Base_SetConfig+0x9a>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4a29      	ldr	r2, [pc, #164]	; (8006110 <TIM_Base_SetConfig+0x124>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d00b      	beq.n	8006086 <TIM_Base_SetConfig+0x9a>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	4a28      	ldr	r2, [pc, #160]	; (8006114 <TIM_Base_SetConfig+0x128>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d007      	beq.n	8006086 <TIM_Base_SetConfig+0x9a>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	4a27      	ldr	r2, [pc, #156]	; (8006118 <TIM_Base_SetConfig+0x12c>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d003      	beq.n	8006086 <TIM_Base_SetConfig+0x9a>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	4a26      	ldr	r2, [pc, #152]	; (800611c <TIM_Base_SetConfig+0x130>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d108      	bne.n	8006098 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800608c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	68db      	ldr	r3, [r3, #12]
 8006092:	68fa      	ldr	r2, [r7, #12]
 8006094:	4313      	orrs	r3, r2
 8006096:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	695b      	ldr	r3, [r3, #20]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	68fa      	ldr	r2, [r7, #12]
 80060aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	689a      	ldr	r2, [r3, #8]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	4a10      	ldr	r2, [pc, #64]	; (8006100 <TIM_Base_SetConfig+0x114>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d00f      	beq.n	80060e4 <TIM_Base_SetConfig+0xf8>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	4a12      	ldr	r2, [pc, #72]	; (8006110 <TIM_Base_SetConfig+0x124>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d00b      	beq.n	80060e4 <TIM_Base_SetConfig+0xf8>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	4a11      	ldr	r2, [pc, #68]	; (8006114 <TIM_Base_SetConfig+0x128>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d007      	beq.n	80060e4 <TIM_Base_SetConfig+0xf8>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	4a10      	ldr	r2, [pc, #64]	; (8006118 <TIM_Base_SetConfig+0x12c>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d003      	beq.n	80060e4 <TIM_Base_SetConfig+0xf8>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	4a0f      	ldr	r2, [pc, #60]	; (800611c <TIM_Base_SetConfig+0x130>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d103      	bne.n	80060ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	691a      	ldr	r2, [r3, #16]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2201      	movs	r2, #1
 80060f0:	615a      	str	r2, [r3, #20]
}
 80060f2:	bf00      	nop
 80060f4:	3714      	adds	r7, #20
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr
 80060fe:	bf00      	nop
 8006100:	40012c00 	.word	0x40012c00
 8006104:	40000400 	.word	0x40000400
 8006108:	40000800 	.word	0x40000800
 800610c:	40000c00 	.word	0x40000c00
 8006110:	40013400 	.word	0x40013400
 8006114:	40014000 	.word	0x40014000
 8006118:	40014400 	.word	0x40014400
 800611c:	40014800 	.word	0x40014800

08006120 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006120:	b480      	push	{r7}
 8006122:	b087      	sub	sp, #28
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6a1b      	ldr	r3, [r3, #32]
 800612e:	f023 0201 	bic.w	r2, r3, #1
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6a1b      	ldr	r3, [r3, #32]
 800613a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	699b      	ldr	r3, [r3, #24]
 8006146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800614e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006152:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f023 0303 	bic.w	r3, r3, #3
 800615a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	68fa      	ldr	r2, [r7, #12]
 8006162:	4313      	orrs	r3, r2
 8006164:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	f023 0302 	bic.w	r3, r3, #2
 800616c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	697a      	ldr	r2, [r7, #20]
 8006174:	4313      	orrs	r3, r2
 8006176:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	4a2c      	ldr	r2, [pc, #176]	; (800622c <TIM_OC1_SetConfig+0x10c>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d00f      	beq.n	80061a0 <TIM_OC1_SetConfig+0x80>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	4a2b      	ldr	r2, [pc, #172]	; (8006230 <TIM_OC1_SetConfig+0x110>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d00b      	beq.n	80061a0 <TIM_OC1_SetConfig+0x80>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4a2a      	ldr	r2, [pc, #168]	; (8006234 <TIM_OC1_SetConfig+0x114>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d007      	beq.n	80061a0 <TIM_OC1_SetConfig+0x80>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	4a29      	ldr	r2, [pc, #164]	; (8006238 <TIM_OC1_SetConfig+0x118>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d003      	beq.n	80061a0 <TIM_OC1_SetConfig+0x80>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	4a28      	ldr	r2, [pc, #160]	; (800623c <TIM_OC1_SetConfig+0x11c>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d10c      	bne.n	80061ba <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	f023 0308 	bic.w	r3, r3, #8
 80061a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	697a      	ldr	r2, [r7, #20]
 80061ae:	4313      	orrs	r3, r2
 80061b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	f023 0304 	bic.w	r3, r3, #4
 80061b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4a1b      	ldr	r2, [pc, #108]	; (800622c <TIM_OC1_SetConfig+0x10c>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d00f      	beq.n	80061e2 <TIM_OC1_SetConfig+0xc2>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a1a      	ldr	r2, [pc, #104]	; (8006230 <TIM_OC1_SetConfig+0x110>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d00b      	beq.n	80061e2 <TIM_OC1_SetConfig+0xc2>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4a19      	ldr	r2, [pc, #100]	; (8006234 <TIM_OC1_SetConfig+0x114>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d007      	beq.n	80061e2 <TIM_OC1_SetConfig+0xc2>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4a18      	ldr	r2, [pc, #96]	; (8006238 <TIM_OC1_SetConfig+0x118>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d003      	beq.n	80061e2 <TIM_OC1_SetConfig+0xc2>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4a17      	ldr	r2, [pc, #92]	; (800623c <TIM_OC1_SetConfig+0x11c>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d111      	bne.n	8006206 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80061f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	695b      	ldr	r3, [r3, #20]
 80061f6:	693a      	ldr	r2, [r7, #16]
 80061f8:	4313      	orrs	r3, r2
 80061fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	699b      	ldr	r3, [r3, #24]
 8006200:	693a      	ldr	r2, [r7, #16]
 8006202:	4313      	orrs	r3, r2
 8006204:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	693a      	ldr	r2, [r7, #16]
 800620a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	68fa      	ldr	r2, [r7, #12]
 8006210:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	685a      	ldr	r2, [r3, #4]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	697a      	ldr	r2, [r7, #20]
 800621e:	621a      	str	r2, [r3, #32]
}
 8006220:	bf00      	nop
 8006222:	371c      	adds	r7, #28
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr
 800622c:	40012c00 	.word	0x40012c00
 8006230:	40013400 	.word	0x40013400
 8006234:	40014000 	.word	0x40014000
 8006238:	40014400 	.word	0x40014400
 800623c:	40014800 	.word	0x40014800

08006240 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006240:	b480      	push	{r7}
 8006242:	b087      	sub	sp, #28
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6a1b      	ldr	r3, [r3, #32]
 800624e:	f023 0210 	bic.w	r2, r3, #16
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6a1b      	ldr	r3, [r3, #32]
 800625a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	699b      	ldr	r3, [r3, #24]
 8006266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800626e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006272:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800627a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	021b      	lsls	r3, r3, #8
 8006282:	68fa      	ldr	r2, [r7, #12]
 8006284:	4313      	orrs	r3, r2
 8006286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	f023 0320 	bic.w	r3, r3, #32
 800628e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	011b      	lsls	r3, r3, #4
 8006296:	697a      	ldr	r2, [r7, #20]
 8006298:	4313      	orrs	r3, r2
 800629a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	4a28      	ldr	r2, [pc, #160]	; (8006340 <TIM_OC2_SetConfig+0x100>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d003      	beq.n	80062ac <TIM_OC2_SetConfig+0x6c>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	4a27      	ldr	r2, [pc, #156]	; (8006344 <TIM_OC2_SetConfig+0x104>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d10d      	bne.n	80062c8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	68db      	ldr	r3, [r3, #12]
 80062b8:	011b      	lsls	r3, r3, #4
 80062ba:	697a      	ldr	r2, [r7, #20]
 80062bc:	4313      	orrs	r3, r2
 80062be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	4a1d      	ldr	r2, [pc, #116]	; (8006340 <TIM_OC2_SetConfig+0x100>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d00f      	beq.n	80062f0 <TIM_OC2_SetConfig+0xb0>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	4a1c      	ldr	r2, [pc, #112]	; (8006344 <TIM_OC2_SetConfig+0x104>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d00b      	beq.n	80062f0 <TIM_OC2_SetConfig+0xb0>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	4a1b      	ldr	r2, [pc, #108]	; (8006348 <TIM_OC2_SetConfig+0x108>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d007      	beq.n	80062f0 <TIM_OC2_SetConfig+0xb0>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	4a1a      	ldr	r2, [pc, #104]	; (800634c <TIM_OC2_SetConfig+0x10c>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d003      	beq.n	80062f0 <TIM_OC2_SetConfig+0xb0>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	4a19      	ldr	r2, [pc, #100]	; (8006350 <TIM_OC2_SetConfig+0x110>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d113      	bne.n	8006318 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80062f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80062fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	695b      	ldr	r3, [r3, #20]
 8006304:	009b      	lsls	r3, r3, #2
 8006306:	693a      	ldr	r2, [r7, #16]
 8006308:	4313      	orrs	r3, r2
 800630a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	699b      	ldr	r3, [r3, #24]
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	693a      	ldr	r2, [r7, #16]
 8006314:	4313      	orrs	r3, r2
 8006316:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	693a      	ldr	r2, [r7, #16]
 800631c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	68fa      	ldr	r2, [r7, #12]
 8006322:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	685a      	ldr	r2, [r3, #4]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	697a      	ldr	r2, [r7, #20]
 8006330:	621a      	str	r2, [r3, #32]
}
 8006332:	bf00      	nop
 8006334:	371c      	adds	r7, #28
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr
 800633e:	bf00      	nop
 8006340:	40012c00 	.word	0x40012c00
 8006344:	40013400 	.word	0x40013400
 8006348:	40014000 	.word	0x40014000
 800634c:	40014400 	.word	0x40014400
 8006350:	40014800 	.word	0x40014800

08006354 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006354:	b480      	push	{r7}
 8006356:	b087      	sub	sp, #28
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6a1b      	ldr	r3, [r3, #32]
 8006362:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6a1b      	ldr	r3, [r3, #32]
 800636e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	69db      	ldr	r3, [r3, #28]
 800637a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006386:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f023 0303 	bic.w	r3, r3, #3
 800638e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	68fa      	ldr	r2, [r7, #12]
 8006396:	4313      	orrs	r3, r2
 8006398:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80063a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	021b      	lsls	r3, r3, #8
 80063a8:	697a      	ldr	r2, [r7, #20]
 80063aa:	4313      	orrs	r3, r2
 80063ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	4a27      	ldr	r2, [pc, #156]	; (8006450 <TIM_OC3_SetConfig+0xfc>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d003      	beq.n	80063be <TIM_OC3_SetConfig+0x6a>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	4a26      	ldr	r2, [pc, #152]	; (8006454 <TIM_OC3_SetConfig+0x100>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d10d      	bne.n	80063da <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80063c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	021b      	lsls	r3, r3, #8
 80063cc:	697a      	ldr	r2, [r7, #20]
 80063ce:	4313      	orrs	r3, r2
 80063d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80063d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4a1c      	ldr	r2, [pc, #112]	; (8006450 <TIM_OC3_SetConfig+0xfc>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d00f      	beq.n	8006402 <TIM_OC3_SetConfig+0xae>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4a1b      	ldr	r2, [pc, #108]	; (8006454 <TIM_OC3_SetConfig+0x100>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d00b      	beq.n	8006402 <TIM_OC3_SetConfig+0xae>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4a1a      	ldr	r2, [pc, #104]	; (8006458 <TIM_OC3_SetConfig+0x104>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d007      	beq.n	8006402 <TIM_OC3_SetConfig+0xae>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	4a19      	ldr	r2, [pc, #100]	; (800645c <TIM_OC3_SetConfig+0x108>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d003      	beq.n	8006402 <TIM_OC3_SetConfig+0xae>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4a18      	ldr	r2, [pc, #96]	; (8006460 <TIM_OC3_SetConfig+0x10c>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d113      	bne.n	800642a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006408:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006410:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	695b      	ldr	r3, [r3, #20]
 8006416:	011b      	lsls	r3, r3, #4
 8006418:	693a      	ldr	r2, [r7, #16]
 800641a:	4313      	orrs	r3, r2
 800641c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	699b      	ldr	r3, [r3, #24]
 8006422:	011b      	lsls	r3, r3, #4
 8006424:	693a      	ldr	r2, [r7, #16]
 8006426:	4313      	orrs	r3, r2
 8006428:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	693a      	ldr	r2, [r7, #16]
 800642e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	68fa      	ldr	r2, [r7, #12]
 8006434:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	685a      	ldr	r2, [r3, #4]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	697a      	ldr	r2, [r7, #20]
 8006442:	621a      	str	r2, [r3, #32]
}
 8006444:	bf00      	nop
 8006446:	371c      	adds	r7, #28
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr
 8006450:	40012c00 	.word	0x40012c00
 8006454:	40013400 	.word	0x40013400
 8006458:	40014000 	.word	0x40014000
 800645c:	40014400 	.word	0x40014400
 8006460:	40014800 	.word	0x40014800

08006464 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006464:	b480      	push	{r7}
 8006466:	b087      	sub	sp, #28
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6a1b      	ldr	r3, [r3, #32]
 8006472:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6a1b      	ldr	r3, [r3, #32]
 800647e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	69db      	ldr	r3, [r3, #28]
 800648a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006492:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006496:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800649e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	021b      	lsls	r3, r3, #8
 80064a6:	68fa      	ldr	r2, [r7, #12]
 80064a8:	4313      	orrs	r3, r2
 80064aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80064b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	031b      	lsls	r3, r3, #12
 80064ba:	693a      	ldr	r2, [r7, #16]
 80064bc:	4313      	orrs	r3, r2
 80064be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	4a18      	ldr	r2, [pc, #96]	; (8006524 <TIM_OC4_SetConfig+0xc0>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d00f      	beq.n	80064e8 <TIM_OC4_SetConfig+0x84>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	4a17      	ldr	r2, [pc, #92]	; (8006528 <TIM_OC4_SetConfig+0xc4>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d00b      	beq.n	80064e8 <TIM_OC4_SetConfig+0x84>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	4a16      	ldr	r2, [pc, #88]	; (800652c <TIM_OC4_SetConfig+0xc8>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d007      	beq.n	80064e8 <TIM_OC4_SetConfig+0x84>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	4a15      	ldr	r2, [pc, #84]	; (8006530 <TIM_OC4_SetConfig+0xcc>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d003      	beq.n	80064e8 <TIM_OC4_SetConfig+0x84>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	4a14      	ldr	r2, [pc, #80]	; (8006534 <TIM_OC4_SetConfig+0xd0>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d109      	bne.n	80064fc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	695b      	ldr	r3, [r3, #20]
 80064f4:	019b      	lsls	r3, r3, #6
 80064f6:	697a      	ldr	r2, [r7, #20]
 80064f8:	4313      	orrs	r3, r2
 80064fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	697a      	ldr	r2, [r7, #20]
 8006500:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	68fa      	ldr	r2, [r7, #12]
 8006506:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	685a      	ldr	r2, [r3, #4]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	693a      	ldr	r2, [r7, #16]
 8006514:	621a      	str	r2, [r3, #32]
}
 8006516:	bf00      	nop
 8006518:	371c      	adds	r7, #28
 800651a:	46bd      	mov	sp, r7
 800651c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006520:	4770      	bx	lr
 8006522:	bf00      	nop
 8006524:	40012c00 	.word	0x40012c00
 8006528:	40013400 	.word	0x40013400
 800652c:	40014000 	.word	0x40014000
 8006530:	40014400 	.word	0x40014400
 8006534:	40014800 	.word	0x40014800

08006538 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006538:	b480      	push	{r7}
 800653a:	b087      	sub	sp, #28
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6a1b      	ldr	r3, [r3, #32]
 8006546:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6a1b      	ldr	r3, [r3, #32]
 8006552:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800655e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800656a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	68fa      	ldr	r2, [r7, #12]
 8006572:	4313      	orrs	r3, r2
 8006574:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800657c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	041b      	lsls	r3, r3, #16
 8006584:	693a      	ldr	r2, [r7, #16]
 8006586:	4313      	orrs	r3, r2
 8006588:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	4a17      	ldr	r2, [pc, #92]	; (80065ec <TIM_OC5_SetConfig+0xb4>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d00f      	beq.n	80065b2 <TIM_OC5_SetConfig+0x7a>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	4a16      	ldr	r2, [pc, #88]	; (80065f0 <TIM_OC5_SetConfig+0xb8>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d00b      	beq.n	80065b2 <TIM_OC5_SetConfig+0x7a>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	4a15      	ldr	r2, [pc, #84]	; (80065f4 <TIM_OC5_SetConfig+0xbc>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d007      	beq.n	80065b2 <TIM_OC5_SetConfig+0x7a>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	4a14      	ldr	r2, [pc, #80]	; (80065f8 <TIM_OC5_SetConfig+0xc0>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d003      	beq.n	80065b2 <TIM_OC5_SetConfig+0x7a>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	4a13      	ldr	r2, [pc, #76]	; (80065fc <TIM_OC5_SetConfig+0xc4>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d109      	bne.n	80065c6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065b8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	695b      	ldr	r3, [r3, #20]
 80065be:	021b      	lsls	r3, r3, #8
 80065c0:	697a      	ldr	r2, [r7, #20]
 80065c2:	4313      	orrs	r3, r2
 80065c4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	697a      	ldr	r2, [r7, #20]
 80065ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	68fa      	ldr	r2, [r7, #12]
 80065d0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	685a      	ldr	r2, [r3, #4]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	693a      	ldr	r2, [r7, #16]
 80065de:	621a      	str	r2, [r3, #32]
}
 80065e0:	bf00      	nop
 80065e2:	371c      	adds	r7, #28
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr
 80065ec:	40012c00 	.word	0x40012c00
 80065f0:	40013400 	.word	0x40013400
 80065f4:	40014000 	.word	0x40014000
 80065f8:	40014400 	.word	0x40014400
 80065fc:	40014800 	.word	0x40014800

08006600 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006600:	b480      	push	{r7}
 8006602:	b087      	sub	sp, #28
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6a1b      	ldr	r3, [r3, #32]
 800660e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6a1b      	ldr	r3, [r3, #32]
 800661a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800662e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006632:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	021b      	lsls	r3, r3, #8
 800663a:	68fa      	ldr	r2, [r7, #12]
 800663c:	4313      	orrs	r3, r2
 800663e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006646:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	051b      	lsls	r3, r3, #20
 800664e:	693a      	ldr	r2, [r7, #16]
 8006650:	4313      	orrs	r3, r2
 8006652:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	4a18      	ldr	r2, [pc, #96]	; (80066b8 <TIM_OC6_SetConfig+0xb8>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d00f      	beq.n	800667c <TIM_OC6_SetConfig+0x7c>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	4a17      	ldr	r2, [pc, #92]	; (80066bc <TIM_OC6_SetConfig+0xbc>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d00b      	beq.n	800667c <TIM_OC6_SetConfig+0x7c>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	4a16      	ldr	r2, [pc, #88]	; (80066c0 <TIM_OC6_SetConfig+0xc0>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d007      	beq.n	800667c <TIM_OC6_SetConfig+0x7c>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	4a15      	ldr	r2, [pc, #84]	; (80066c4 <TIM_OC6_SetConfig+0xc4>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d003      	beq.n	800667c <TIM_OC6_SetConfig+0x7c>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	4a14      	ldr	r2, [pc, #80]	; (80066c8 <TIM_OC6_SetConfig+0xc8>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d109      	bne.n	8006690 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006682:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	695b      	ldr	r3, [r3, #20]
 8006688:	029b      	lsls	r3, r3, #10
 800668a:	697a      	ldr	r2, [r7, #20]
 800668c:	4313      	orrs	r3, r2
 800668e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	697a      	ldr	r2, [r7, #20]
 8006694:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	68fa      	ldr	r2, [r7, #12]
 800669a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	685a      	ldr	r2, [r3, #4]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	693a      	ldr	r2, [r7, #16]
 80066a8:	621a      	str	r2, [r3, #32]
}
 80066aa:	bf00      	nop
 80066ac:	371c      	adds	r7, #28
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr
 80066b6:	bf00      	nop
 80066b8:	40012c00 	.word	0x40012c00
 80066bc:	40013400 	.word	0x40013400
 80066c0:	40014000 	.word	0x40014000
 80066c4:	40014400 	.word	0x40014400
 80066c8:	40014800 	.word	0x40014800

080066cc <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b086      	sub	sp, #24
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066e4:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	697a      	ldr	r2, [r7, #20]
 80066ec:	4313      	orrs	r3, r2
 80066ee:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066f6:	f023 0307 	bic.w	r3, r3, #7
 80066fa:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	697a      	ldr	r2, [r7, #20]
 8006702:	4313      	orrs	r3, r2
 8006704:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	697a      	ldr	r2, [r7, #20]
 800670c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	2b70      	cmp	r3, #112	; 0x70
 8006714:	d01a      	beq.n	800674c <TIM_SlaveTimer_SetConfig+0x80>
 8006716:	2b70      	cmp	r3, #112	; 0x70
 8006718:	d860      	bhi.n	80067dc <TIM_SlaveTimer_SetConfig+0x110>
 800671a:	2b60      	cmp	r3, #96	; 0x60
 800671c:	d054      	beq.n	80067c8 <TIM_SlaveTimer_SetConfig+0xfc>
 800671e:	2b60      	cmp	r3, #96	; 0x60
 8006720:	d85c      	bhi.n	80067dc <TIM_SlaveTimer_SetConfig+0x110>
 8006722:	2b50      	cmp	r3, #80	; 0x50
 8006724:	d046      	beq.n	80067b4 <TIM_SlaveTimer_SetConfig+0xe8>
 8006726:	2b50      	cmp	r3, #80	; 0x50
 8006728:	d858      	bhi.n	80067dc <TIM_SlaveTimer_SetConfig+0x110>
 800672a:	2b40      	cmp	r3, #64	; 0x40
 800672c:	d019      	beq.n	8006762 <TIM_SlaveTimer_SetConfig+0x96>
 800672e:	2b40      	cmp	r3, #64	; 0x40
 8006730:	d854      	bhi.n	80067dc <TIM_SlaveTimer_SetConfig+0x110>
 8006732:	2b30      	cmp	r3, #48	; 0x30
 8006734:	d054      	beq.n	80067e0 <TIM_SlaveTimer_SetConfig+0x114>
 8006736:	2b30      	cmp	r3, #48	; 0x30
 8006738:	d850      	bhi.n	80067dc <TIM_SlaveTimer_SetConfig+0x110>
 800673a:	2b20      	cmp	r3, #32
 800673c:	d050      	beq.n	80067e0 <TIM_SlaveTimer_SetConfig+0x114>
 800673e:	2b20      	cmp	r3, #32
 8006740:	d84c      	bhi.n	80067dc <TIM_SlaveTimer_SetConfig+0x110>
 8006742:	2b00      	cmp	r3, #0
 8006744:	d04c      	beq.n	80067e0 <TIM_SlaveTimer_SetConfig+0x114>
 8006746:	2b10      	cmp	r3, #16
 8006748:	d04a      	beq.n	80067e0 <TIM_SlaveTimer_SetConfig+0x114>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 800674a:	e047      	b.n	80067dc <TIM_SlaveTimer_SetConfig+0x110>
      TIM_ETR_SetConfig(htim->Instance,
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6818      	ldr	r0, [r3, #0]
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	68d9      	ldr	r1, [r3, #12]
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	689a      	ldr	r2, [r3, #8]
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	691b      	ldr	r3, [r3, #16]
 800675c:	f000 f9e4 	bl	8006b28 <TIM_ETR_SetConfig>
      break;
 8006760:	e03f      	b.n	80067e2 <TIM_SlaveTimer_SetConfig+0x116>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	2b05      	cmp	r3, #5
 8006768:	d101      	bne.n	800676e <TIM_SlaveTimer_SetConfig+0xa2>
        return HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	e03a      	b.n	80067e4 <TIM_SlaveTimer_SetConfig+0x118>
      tmpccer = htim->Instance->CCER;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	6a1b      	ldr	r3, [r3, #32]
 8006774:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	6a1a      	ldr	r2, [r3, #32]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f022 0201 	bic.w	r2, r2, #1
 8006784:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	699b      	ldr	r3, [r3, #24]
 800678c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006794:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	691b      	ldr	r3, [r3, #16]
 800679a:	011b      	lsls	r3, r3, #4
 800679c:	68fa      	ldr	r2, [r7, #12]
 800679e:	4313      	orrs	r3, r2
 80067a0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	68fa      	ldr	r2, [r7, #12]
 80067a8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	693a      	ldr	r2, [r7, #16]
 80067b0:	621a      	str	r2, [r3, #32]
      break;
 80067b2:	e016      	b.n	80067e2 <TIM_SlaveTimer_SetConfig+0x116>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6818      	ldr	r0, [r3, #0]
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	6899      	ldr	r1, [r3, #8]
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	691b      	ldr	r3, [r3, #16]
 80067c0:	461a      	mov	r2, r3
 80067c2:	f000 f881 	bl	80068c8 <TIM_TI1_ConfigInputStage>
      break;
 80067c6:	e00c      	b.n	80067e2 <TIM_SlaveTimer_SetConfig+0x116>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6818      	ldr	r0, [r3, #0]
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	6899      	ldr	r1, [r3, #8]
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	691b      	ldr	r3, [r3, #16]
 80067d4:	461a      	mov	r2, r3
 80067d6:	f000 f8e3 	bl	80069a0 <TIM_TI2_ConfigInputStage>
      break;
 80067da:	e002      	b.n	80067e2 <TIM_SlaveTimer_SetConfig+0x116>
      break;
 80067dc:	bf00      	nop
 80067de:	e000      	b.n	80067e2 <TIM_SlaveTimer_SetConfig+0x116>
        break;
 80067e0:	bf00      	nop
  }
  return HAL_OK;
 80067e2:	2300      	movs	r3, #0
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3718      	adds	r7, #24
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}

080067ec <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b087      	sub	sp, #28
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	60f8      	str	r0, [r7, #12]
 80067f4:	60b9      	str	r1, [r7, #8]
 80067f6:	607a      	str	r2, [r7, #4]
 80067f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	6a1b      	ldr	r3, [r3, #32]
 80067fe:	f023 0201 	bic.w	r2, r3, #1
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	699b      	ldr	r3, [r3, #24]
 800680a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	6a1b      	ldr	r3, [r3, #32]
 8006810:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	4a26      	ldr	r2, [pc, #152]	; (80068b0 <TIM_TI1_SetConfig+0xc4>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d017      	beq.n	800684a <TIM_TI1_SetConfig+0x5e>
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006820:	d013      	beq.n	800684a <TIM_TI1_SetConfig+0x5e>
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	4a23      	ldr	r2, [pc, #140]	; (80068b4 <TIM_TI1_SetConfig+0xc8>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d00f      	beq.n	800684a <TIM_TI1_SetConfig+0x5e>
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	4a22      	ldr	r2, [pc, #136]	; (80068b8 <TIM_TI1_SetConfig+0xcc>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d00b      	beq.n	800684a <TIM_TI1_SetConfig+0x5e>
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	4a21      	ldr	r2, [pc, #132]	; (80068bc <TIM_TI1_SetConfig+0xd0>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d007      	beq.n	800684a <TIM_TI1_SetConfig+0x5e>
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	4a20      	ldr	r2, [pc, #128]	; (80068c0 <TIM_TI1_SetConfig+0xd4>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d003      	beq.n	800684a <TIM_TI1_SetConfig+0x5e>
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	4a1f      	ldr	r2, [pc, #124]	; (80068c4 <TIM_TI1_SetConfig+0xd8>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d101      	bne.n	800684e <TIM_TI1_SetConfig+0x62>
 800684a:	2301      	movs	r3, #1
 800684c:	e000      	b.n	8006850 <TIM_TI1_SetConfig+0x64>
 800684e:	2300      	movs	r3, #0
 8006850:	2b00      	cmp	r3, #0
 8006852:	d008      	beq.n	8006866 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	f023 0303 	bic.w	r3, r3, #3
 800685a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800685c:	697a      	ldr	r2, [r7, #20]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	4313      	orrs	r3, r2
 8006862:	617b      	str	r3, [r7, #20]
 8006864:	e003      	b.n	800686e <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	f043 0301 	orr.w	r3, r3, #1
 800686c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006874:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	011b      	lsls	r3, r3, #4
 800687a:	b2db      	uxtb	r3, r3
 800687c:	697a      	ldr	r2, [r7, #20]
 800687e:	4313      	orrs	r3, r2
 8006880:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	f023 030a 	bic.w	r3, r3, #10
 8006888:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	f003 030a 	and.w	r3, r3, #10
 8006890:	693a      	ldr	r2, [r7, #16]
 8006892:	4313      	orrs	r3, r2
 8006894:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	697a      	ldr	r2, [r7, #20]
 800689a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	693a      	ldr	r2, [r7, #16]
 80068a0:	621a      	str	r2, [r3, #32]
}
 80068a2:	bf00      	nop
 80068a4:	371c      	adds	r7, #28
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr
 80068ae:	bf00      	nop
 80068b0:	40012c00 	.word	0x40012c00
 80068b4:	40000400 	.word	0x40000400
 80068b8:	40000800 	.word	0x40000800
 80068bc:	40000c00 	.word	0x40000c00
 80068c0:	40013400 	.word	0x40013400
 80068c4:	40014000 	.word	0x40014000

080068c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b087      	sub	sp, #28
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	60f8      	str	r0, [r7, #12]
 80068d0:	60b9      	str	r1, [r7, #8]
 80068d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	6a1b      	ldr	r3, [r3, #32]
 80068d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	6a1b      	ldr	r3, [r3, #32]
 80068de:	f023 0201 	bic.w	r2, r3, #1
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	699b      	ldr	r3, [r3, #24]
 80068ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80068f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	011b      	lsls	r3, r3, #4
 80068f8:	693a      	ldr	r2, [r7, #16]
 80068fa:	4313      	orrs	r3, r2
 80068fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	f023 030a 	bic.w	r3, r3, #10
 8006904:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006906:	697a      	ldr	r2, [r7, #20]
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	4313      	orrs	r3, r2
 800690c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	693a      	ldr	r2, [r7, #16]
 8006912:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	697a      	ldr	r2, [r7, #20]
 8006918:	621a      	str	r2, [r3, #32]
}
 800691a:	bf00      	nop
 800691c:	371c      	adds	r7, #28
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr

08006926 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006926:	b480      	push	{r7}
 8006928:	b087      	sub	sp, #28
 800692a:	af00      	add	r7, sp, #0
 800692c:	60f8      	str	r0, [r7, #12]
 800692e:	60b9      	str	r1, [r7, #8]
 8006930:	607a      	str	r2, [r7, #4]
 8006932:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6a1b      	ldr	r3, [r3, #32]
 8006938:	f023 0210 	bic.w	r2, r3, #16
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	699b      	ldr	r3, [r3, #24]
 8006944:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	6a1b      	ldr	r3, [r3, #32]
 800694a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006952:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	021b      	lsls	r3, r3, #8
 8006958:	697a      	ldr	r2, [r7, #20]
 800695a:	4313      	orrs	r3, r2
 800695c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006964:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	031b      	lsls	r3, r3, #12
 800696a:	b29b      	uxth	r3, r3
 800696c:	697a      	ldr	r2, [r7, #20]
 800696e:	4313      	orrs	r3, r2
 8006970:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006978:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	011b      	lsls	r3, r3, #4
 800697e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006982:	693a      	ldr	r2, [r7, #16]
 8006984:	4313      	orrs	r3, r2
 8006986:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	697a      	ldr	r2, [r7, #20]
 800698c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	693a      	ldr	r2, [r7, #16]
 8006992:	621a      	str	r2, [r3, #32]
}
 8006994:	bf00      	nop
 8006996:	371c      	adds	r7, #28
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr

080069a0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b087      	sub	sp, #28
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	60f8      	str	r0, [r7, #12]
 80069a8:	60b9      	str	r1, [r7, #8]
 80069aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	6a1b      	ldr	r3, [r3, #32]
 80069b0:	f023 0210 	bic.w	r2, r3, #16
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	699b      	ldr	r3, [r3, #24]
 80069bc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	6a1b      	ldr	r3, [r3, #32]
 80069c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80069ca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	031b      	lsls	r3, r3, #12
 80069d0:	697a      	ldr	r2, [r7, #20]
 80069d2:	4313      	orrs	r3, r2
 80069d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80069dc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	011b      	lsls	r3, r3, #4
 80069e2:	693a      	ldr	r2, [r7, #16]
 80069e4:	4313      	orrs	r3, r2
 80069e6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	697a      	ldr	r2, [r7, #20]
 80069ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	693a      	ldr	r2, [r7, #16]
 80069f2:	621a      	str	r2, [r3, #32]
}
 80069f4:	bf00      	nop
 80069f6:	371c      	adds	r7, #28
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr

08006a00 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b087      	sub	sp, #28
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	60f8      	str	r0, [r7, #12]
 8006a08:	60b9      	str	r1, [r7, #8]
 8006a0a:	607a      	str	r2, [r7, #4]
 8006a0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	6a1b      	ldr	r3, [r3, #32]
 8006a12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	69db      	ldr	r3, [r3, #28]
 8006a1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	6a1b      	ldr	r3, [r3, #32]
 8006a24:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	f023 0303 	bic.w	r3, r3, #3
 8006a2c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006a2e:	697a      	ldr	r2, [r7, #20]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	4313      	orrs	r3, r2
 8006a34:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a3c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	011b      	lsls	r3, r3, #4
 8006a42:	b2db      	uxtb	r3, r3
 8006a44:	697a      	ldr	r2, [r7, #20]
 8006a46:	4313      	orrs	r3, r2
 8006a48:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006a50:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	021b      	lsls	r3, r3, #8
 8006a56:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006a5a:	693a      	ldr	r2, [r7, #16]
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	697a      	ldr	r2, [r7, #20]
 8006a64:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	693a      	ldr	r2, [r7, #16]
 8006a6a:	621a      	str	r2, [r3, #32]
}
 8006a6c:	bf00      	nop
 8006a6e:	371c      	adds	r7, #28
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr

08006a78 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b087      	sub	sp, #28
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	60f8      	str	r0, [r7, #12]
 8006a80:	60b9      	str	r1, [r7, #8]
 8006a82:	607a      	str	r2, [r7, #4]
 8006a84:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	6a1b      	ldr	r3, [r3, #32]
 8006a8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	69db      	ldr	r3, [r3, #28]
 8006a96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	6a1b      	ldr	r3, [r3, #32]
 8006a9c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006aa4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	021b      	lsls	r3, r3, #8
 8006aaa:	697a      	ldr	r2, [r7, #20]
 8006aac:	4313      	orrs	r3, r2
 8006aae:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ab6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	031b      	lsls	r3, r3, #12
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	697a      	ldr	r2, [r7, #20]
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006aca:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	031b      	lsls	r3, r3, #12
 8006ad0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006ad4:	693a      	ldr	r2, [r7, #16]
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	697a      	ldr	r2, [r7, #20]
 8006ade:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	693a      	ldr	r2, [r7, #16]
 8006ae4:	621a      	str	r2, [r3, #32]
}
 8006ae6:	bf00      	nop
 8006ae8:	371c      	adds	r7, #28
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr

08006af2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006af2:	b480      	push	{r7}
 8006af4:	b085      	sub	sp, #20
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]
 8006afa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b0a:	683a      	ldr	r2, [r7, #0]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	f043 0307 	orr.w	r3, r3, #7
 8006b14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	68fa      	ldr	r2, [r7, #12]
 8006b1a:	609a      	str	r2, [r3, #8]
}
 8006b1c:	bf00      	nop
 8006b1e:	3714      	adds	r7, #20
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr

08006b28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b087      	sub	sp, #28
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	60f8      	str	r0, [r7, #12]
 8006b30:	60b9      	str	r1, [r7, #8]
 8006b32:	607a      	str	r2, [r7, #4]
 8006b34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	689b      	ldr	r3, [r3, #8]
 8006b3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	021a      	lsls	r2, r3, #8
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	431a      	orrs	r2, r3
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	697a      	ldr	r2, [r7, #20]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	697a      	ldr	r2, [r7, #20]
 8006b5a:	609a      	str	r2, [r3, #8]
}
 8006b5c:	bf00      	nop
 8006b5e:	371c      	adds	r7, #28
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr

08006b68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b087      	sub	sp, #28
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	60f8      	str	r0, [r7, #12]
 8006b70:	60b9      	str	r1, [r7, #8]
 8006b72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	f003 031f 	and.w	r3, r3, #31
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	6a1a      	ldr	r2, [r3, #32]
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	43db      	mvns	r3, r3
 8006b8a:	401a      	ands	r2, r3
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	6a1a      	ldr	r2, [r3, #32]
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	f003 031f 	and.w	r3, r3, #31
 8006b9a:	6879      	ldr	r1, [r7, #4]
 8006b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8006ba0:	431a      	orrs	r2, r3
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	621a      	str	r2, [r3, #32]
}
 8006ba6:	bf00      	nop
 8006ba8:	371c      	adds	r7, #28
 8006baa:	46bd      	mov	sp, r7
 8006bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb0:	4770      	bx	lr
	...

08006bb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b085      	sub	sp, #20
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d101      	bne.n	8006bcc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006bc8:	2302      	movs	r3, #2
 8006bca:	e068      	b.n	8006c9e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2202      	movs	r2, #2
 8006bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a2e      	ldr	r2, [pc, #184]	; (8006cac <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d004      	beq.n	8006c00 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a2d      	ldr	r2, [pc, #180]	; (8006cb0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d108      	bne.n	8006c12 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006c06:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	68fa      	ldr	r2, [r7, #12]
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c18:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	68fa      	ldr	r2, [r7, #12]
 8006c20:	4313      	orrs	r3, r2
 8006c22:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	68fa      	ldr	r2, [r7, #12]
 8006c2a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a1e      	ldr	r2, [pc, #120]	; (8006cac <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d01d      	beq.n	8006c72 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c3e:	d018      	beq.n	8006c72 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a1b      	ldr	r2, [pc, #108]	; (8006cb4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d013      	beq.n	8006c72 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a1a      	ldr	r2, [pc, #104]	; (8006cb8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d00e      	beq.n	8006c72 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a18      	ldr	r2, [pc, #96]	; (8006cbc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d009      	beq.n	8006c72 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a13      	ldr	r2, [pc, #76]	; (8006cb0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d004      	beq.n	8006c72 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a14      	ldr	r2, [pc, #80]	; (8006cc0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d10c      	bne.n	8006c8c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	68ba      	ldr	r2, [r7, #8]
 8006c80:	4313      	orrs	r3, r2
 8006c82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	68ba      	ldr	r2, [r7, #8]
 8006c8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2200      	movs	r2, #0
 8006c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c9c:	2300      	movs	r3, #0
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3714      	adds	r7, #20
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr
 8006caa:	bf00      	nop
 8006cac:	40012c00 	.word	0x40012c00
 8006cb0:	40013400 	.word	0x40013400
 8006cb4:	40000400 	.word	0x40000400
 8006cb8:	40000800 	.word	0x40000800
 8006cbc:	40000c00 	.word	0x40000c00
 8006cc0:	40014000 	.word	0x40014000

08006cc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b083      	sub	sp, #12
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ccc:	bf00      	nop
 8006cce:	370c      	adds	r7, #12
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr

08006cd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ce0:	bf00      	nop
 8006ce2:	370c      	adds	r7, #12
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr

08006cec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006cf4:	bf00      	nop
 8006cf6:	370c      	adds	r7, #12
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b082      	sub	sp, #8
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d101      	bne.n	8006d12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	e040      	b.n	8006d94 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d106      	bne.n	8006d28 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f7fb f876 	bl	8001e14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2224      	movs	r2, #36	; 0x24
 8006d2c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f022 0201 	bic.w	r2, r2, #1
 8006d3c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f000 f8c0 	bl	8006ec4 <UART_SetConfig>
 8006d44:	4603      	mov	r3, r0
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	d101      	bne.n	8006d4e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	e022      	b.n	8006d94 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d002      	beq.n	8006d5c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f000 fb3e 	bl	80073d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	685a      	ldr	r2, [r3, #4]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	689a      	ldr	r2, [r3, #8]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f042 0201 	orr.w	r2, r2, #1
 8006d8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f000 fbc5 	bl	800751c <UART_CheckIdleState>
 8006d92:	4603      	mov	r3, r0
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3708      	adds	r7, #8
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}

08006d9c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b08a      	sub	sp, #40	; 0x28
 8006da0:	af02      	add	r7, sp, #8
 8006da2:	60f8      	str	r0, [r7, #12]
 8006da4:	60b9      	str	r1, [r7, #8]
 8006da6:	603b      	str	r3, [r7, #0]
 8006da8:	4613      	mov	r3, r2
 8006daa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006db0:	2b20      	cmp	r3, #32
 8006db2:	f040 8082 	bne.w	8006eba <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d002      	beq.n	8006dc2 <HAL_UART_Transmit+0x26>
 8006dbc:	88fb      	ldrh	r3, [r7, #6]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d101      	bne.n	8006dc6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	e07a      	b.n	8006ebc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d101      	bne.n	8006dd4 <HAL_UART_Transmit+0x38>
 8006dd0:	2302      	movs	r3, #2
 8006dd2:	e073      	b.n	8006ebc <HAL_UART_Transmit+0x120>
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2200      	movs	r2, #0
 8006de0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2221      	movs	r2, #33	; 0x21
 8006de8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006dea:	f7fb f9ff 	bl	80021ec <HAL_GetTick>
 8006dee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	88fa      	ldrh	r2, [r7, #6]
 8006df4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	88fa      	ldrh	r2, [r7, #6]
 8006dfc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	689b      	ldr	r3, [r3, #8]
 8006e04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e08:	d108      	bne.n	8006e1c <HAL_UART_Transmit+0x80>
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	691b      	ldr	r3, [r3, #16]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d104      	bne.n	8006e1c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006e12:	2300      	movs	r3, #0
 8006e14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	61bb      	str	r3, [r7, #24]
 8006e1a:	e003      	b.n	8006e24 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e20:	2300      	movs	r3, #0
 8006e22:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2200      	movs	r2, #0
 8006e28:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006e2c:	e02d      	b.n	8006e8a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	9300      	str	r3, [sp, #0]
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	2200      	movs	r2, #0
 8006e36:	2180      	movs	r1, #128	; 0x80
 8006e38:	68f8      	ldr	r0, [r7, #12]
 8006e3a:	f000 fbb8 	bl	80075ae <UART_WaitOnFlagUntilTimeout>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d001      	beq.n	8006e48 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006e44:	2303      	movs	r3, #3
 8006e46:	e039      	b.n	8006ebc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006e48:	69fb      	ldr	r3, [r7, #28]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d10b      	bne.n	8006e66 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006e4e:	69bb      	ldr	r3, [r7, #24]
 8006e50:	881a      	ldrh	r2, [r3, #0]
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e5a:	b292      	uxth	r2, r2
 8006e5c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006e5e:	69bb      	ldr	r3, [r7, #24]
 8006e60:	3302      	adds	r3, #2
 8006e62:	61bb      	str	r3, [r7, #24]
 8006e64:	e008      	b.n	8006e78 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006e66:	69fb      	ldr	r3, [r7, #28]
 8006e68:	781a      	ldrb	r2, [r3, #0]
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	b292      	uxth	r2, r2
 8006e70:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006e72:	69fb      	ldr	r3, [r7, #28]
 8006e74:	3301      	adds	r3, #1
 8006e76:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	3b01      	subs	r3, #1
 8006e82:	b29a      	uxth	r2, r3
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d1cb      	bne.n	8006e2e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	9300      	str	r3, [sp, #0]
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	2140      	movs	r1, #64	; 0x40
 8006ea0:	68f8      	ldr	r0, [r7, #12]
 8006ea2:	f000 fb84 	bl	80075ae <UART_WaitOnFlagUntilTimeout>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d001      	beq.n	8006eb0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006eac:	2303      	movs	r3, #3
 8006eae:	e005      	b.n	8006ebc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2220      	movs	r2, #32
 8006eb4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	e000      	b.n	8006ebc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006eba:	2302      	movs	r3, #2
  }
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3720      	adds	r7, #32
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ec4:	b5b0      	push	{r4, r5, r7, lr}
 8006ec6:	b088      	sub	sp, #32
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	689a      	ldr	r2, [r3, #8]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	691b      	ldr	r3, [r3, #16]
 8006ed8:	431a      	orrs	r2, r3
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	695b      	ldr	r3, [r3, #20]
 8006ede:	431a      	orrs	r2, r3
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	69db      	ldr	r3, [r3, #28]
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	4bad      	ldr	r3, [pc, #692]	; (80071a4 <UART_SetConfig+0x2e0>)
 8006ef0:	4013      	ands	r3, r2
 8006ef2:	687a      	ldr	r2, [r7, #4]
 8006ef4:	6812      	ldr	r2, [r2, #0]
 8006ef6:	69f9      	ldr	r1, [r7, #28]
 8006ef8:	430b      	orrs	r3, r1
 8006efa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	68da      	ldr	r2, [r3, #12]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	430a      	orrs	r2, r1
 8006f10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	699b      	ldr	r3, [r3, #24]
 8006f16:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4aa2      	ldr	r2, [pc, #648]	; (80071a8 <UART_SetConfig+0x2e4>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d004      	beq.n	8006f2c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6a1b      	ldr	r3, [r3, #32]
 8006f26:	69fa      	ldr	r2, [r7, #28]
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	69fa      	ldr	r2, [r7, #28]
 8006f3c:	430a      	orrs	r2, r1
 8006f3e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a99      	ldr	r2, [pc, #612]	; (80071ac <UART_SetConfig+0x2e8>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d121      	bne.n	8006f8e <UART_SetConfig+0xca>
 8006f4a:	4b99      	ldr	r3, [pc, #612]	; (80071b0 <UART_SetConfig+0x2ec>)
 8006f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f50:	f003 0303 	and.w	r3, r3, #3
 8006f54:	2b03      	cmp	r3, #3
 8006f56:	d817      	bhi.n	8006f88 <UART_SetConfig+0xc4>
 8006f58:	a201      	add	r2, pc, #4	; (adr r2, 8006f60 <UART_SetConfig+0x9c>)
 8006f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f5e:	bf00      	nop
 8006f60:	08006f71 	.word	0x08006f71
 8006f64:	08006f7d 	.word	0x08006f7d
 8006f68:	08006f77 	.word	0x08006f77
 8006f6c:	08006f83 	.word	0x08006f83
 8006f70:	2301      	movs	r3, #1
 8006f72:	76fb      	strb	r3, [r7, #27]
 8006f74:	e0e7      	b.n	8007146 <UART_SetConfig+0x282>
 8006f76:	2302      	movs	r3, #2
 8006f78:	76fb      	strb	r3, [r7, #27]
 8006f7a:	e0e4      	b.n	8007146 <UART_SetConfig+0x282>
 8006f7c:	2304      	movs	r3, #4
 8006f7e:	76fb      	strb	r3, [r7, #27]
 8006f80:	e0e1      	b.n	8007146 <UART_SetConfig+0x282>
 8006f82:	2308      	movs	r3, #8
 8006f84:	76fb      	strb	r3, [r7, #27]
 8006f86:	e0de      	b.n	8007146 <UART_SetConfig+0x282>
 8006f88:	2310      	movs	r3, #16
 8006f8a:	76fb      	strb	r3, [r7, #27]
 8006f8c:	e0db      	b.n	8007146 <UART_SetConfig+0x282>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a88      	ldr	r2, [pc, #544]	; (80071b4 <UART_SetConfig+0x2f0>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d132      	bne.n	8006ffe <UART_SetConfig+0x13a>
 8006f98:	4b85      	ldr	r3, [pc, #532]	; (80071b0 <UART_SetConfig+0x2ec>)
 8006f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f9e:	f003 030c 	and.w	r3, r3, #12
 8006fa2:	2b0c      	cmp	r3, #12
 8006fa4:	d828      	bhi.n	8006ff8 <UART_SetConfig+0x134>
 8006fa6:	a201      	add	r2, pc, #4	; (adr r2, 8006fac <UART_SetConfig+0xe8>)
 8006fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fac:	08006fe1 	.word	0x08006fe1
 8006fb0:	08006ff9 	.word	0x08006ff9
 8006fb4:	08006ff9 	.word	0x08006ff9
 8006fb8:	08006ff9 	.word	0x08006ff9
 8006fbc:	08006fed 	.word	0x08006fed
 8006fc0:	08006ff9 	.word	0x08006ff9
 8006fc4:	08006ff9 	.word	0x08006ff9
 8006fc8:	08006ff9 	.word	0x08006ff9
 8006fcc:	08006fe7 	.word	0x08006fe7
 8006fd0:	08006ff9 	.word	0x08006ff9
 8006fd4:	08006ff9 	.word	0x08006ff9
 8006fd8:	08006ff9 	.word	0x08006ff9
 8006fdc:	08006ff3 	.word	0x08006ff3
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	76fb      	strb	r3, [r7, #27]
 8006fe4:	e0af      	b.n	8007146 <UART_SetConfig+0x282>
 8006fe6:	2302      	movs	r3, #2
 8006fe8:	76fb      	strb	r3, [r7, #27]
 8006fea:	e0ac      	b.n	8007146 <UART_SetConfig+0x282>
 8006fec:	2304      	movs	r3, #4
 8006fee:	76fb      	strb	r3, [r7, #27]
 8006ff0:	e0a9      	b.n	8007146 <UART_SetConfig+0x282>
 8006ff2:	2308      	movs	r3, #8
 8006ff4:	76fb      	strb	r3, [r7, #27]
 8006ff6:	e0a6      	b.n	8007146 <UART_SetConfig+0x282>
 8006ff8:	2310      	movs	r3, #16
 8006ffa:	76fb      	strb	r3, [r7, #27]
 8006ffc:	e0a3      	b.n	8007146 <UART_SetConfig+0x282>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a6d      	ldr	r2, [pc, #436]	; (80071b8 <UART_SetConfig+0x2f4>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d120      	bne.n	800704a <UART_SetConfig+0x186>
 8007008:	4b69      	ldr	r3, [pc, #420]	; (80071b0 <UART_SetConfig+0x2ec>)
 800700a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800700e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007012:	2b30      	cmp	r3, #48	; 0x30
 8007014:	d013      	beq.n	800703e <UART_SetConfig+0x17a>
 8007016:	2b30      	cmp	r3, #48	; 0x30
 8007018:	d814      	bhi.n	8007044 <UART_SetConfig+0x180>
 800701a:	2b20      	cmp	r3, #32
 800701c:	d009      	beq.n	8007032 <UART_SetConfig+0x16e>
 800701e:	2b20      	cmp	r3, #32
 8007020:	d810      	bhi.n	8007044 <UART_SetConfig+0x180>
 8007022:	2b00      	cmp	r3, #0
 8007024:	d002      	beq.n	800702c <UART_SetConfig+0x168>
 8007026:	2b10      	cmp	r3, #16
 8007028:	d006      	beq.n	8007038 <UART_SetConfig+0x174>
 800702a:	e00b      	b.n	8007044 <UART_SetConfig+0x180>
 800702c:	2300      	movs	r3, #0
 800702e:	76fb      	strb	r3, [r7, #27]
 8007030:	e089      	b.n	8007146 <UART_SetConfig+0x282>
 8007032:	2302      	movs	r3, #2
 8007034:	76fb      	strb	r3, [r7, #27]
 8007036:	e086      	b.n	8007146 <UART_SetConfig+0x282>
 8007038:	2304      	movs	r3, #4
 800703a:	76fb      	strb	r3, [r7, #27]
 800703c:	e083      	b.n	8007146 <UART_SetConfig+0x282>
 800703e:	2308      	movs	r3, #8
 8007040:	76fb      	strb	r3, [r7, #27]
 8007042:	e080      	b.n	8007146 <UART_SetConfig+0x282>
 8007044:	2310      	movs	r3, #16
 8007046:	76fb      	strb	r3, [r7, #27]
 8007048:	e07d      	b.n	8007146 <UART_SetConfig+0x282>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a5b      	ldr	r2, [pc, #364]	; (80071bc <UART_SetConfig+0x2f8>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d120      	bne.n	8007096 <UART_SetConfig+0x1d2>
 8007054:	4b56      	ldr	r3, [pc, #344]	; (80071b0 <UART_SetConfig+0x2ec>)
 8007056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800705a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800705e:	2bc0      	cmp	r3, #192	; 0xc0
 8007060:	d013      	beq.n	800708a <UART_SetConfig+0x1c6>
 8007062:	2bc0      	cmp	r3, #192	; 0xc0
 8007064:	d814      	bhi.n	8007090 <UART_SetConfig+0x1cc>
 8007066:	2b80      	cmp	r3, #128	; 0x80
 8007068:	d009      	beq.n	800707e <UART_SetConfig+0x1ba>
 800706a:	2b80      	cmp	r3, #128	; 0x80
 800706c:	d810      	bhi.n	8007090 <UART_SetConfig+0x1cc>
 800706e:	2b00      	cmp	r3, #0
 8007070:	d002      	beq.n	8007078 <UART_SetConfig+0x1b4>
 8007072:	2b40      	cmp	r3, #64	; 0x40
 8007074:	d006      	beq.n	8007084 <UART_SetConfig+0x1c0>
 8007076:	e00b      	b.n	8007090 <UART_SetConfig+0x1cc>
 8007078:	2300      	movs	r3, #0
 800707a:	76fb      	strb	r3, [r7, #27]
 800707c:	e063      	b.n	8007146 <UART_SetConfig+0x282>
 800707e:	2302      	movs	r3, #2
 8007080:	76fb      	strb	r3, [r7, #27]
 8007082:	e060      	b.n	8007146 <UART_SetConfig+0x282>
 8007084:	2304      	movs	r3, #4
 8007086:	76fb      	strb	r3, [r7, #27]
 8007088:	e05d      	b.n	8007146 <UART_SetConfig+0x282>
 800708a:	2308      	movs	r3, #8
 800708c:	76fb      	strb	r3, [r7, #27]
 800708e:	e05a      	b.n	8007146 <UART_SetConfig+0x282>
 8007090:	2310      	movs	r3, #16
 8007092:	76fb      	strb	r3, [r7, #27]
 8007094:	e057      	b.n	8007146 <UART_SetConfig+0x282>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a49      	ldr	r2, [pc, #292]	; (80071c0 <UART_SetConfig+0x2fc>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d125      	bne.n	80070ec <UART_SetConfig+0x228>
 80070a0:	4b43      	ldr	r3, [pc, #268]	; (80071b0 <UART_SetConfig+0x2ec>)
 80070a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070ae:	d017      	beq.n	80070e0 <UART_SetConfig+0x21c>
 80070b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070b4:	d817      	bhi.n	80070e6 <UART_SetConfig+0x222>
 80070b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070ba:	d00b      	beq.n	80070d4 <UART_SetConfig+0x210>
 80070bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070c0:	d811      	bhi.n	80070e6 <UART_SetConfig+0x222>
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d003      	beq.n	80070ce <UART_SetConfig+0x20a>
 80070c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070ca:	d006      	beq.n	80070da <UART_SetConfig+0x216>
 80070cc:	e00b      	b.n	80070e6 <UART_SetConfig+0x222>
 80070ce:	2300      	movs	r3, #0
 80070d0:	76fb      	strb	r3, [r7, #27]
 80070d2:	e038      	b.n	8007146 <UART_SetConfig+0x282>
 80070d4:	2302      	movs	r3, #2
 80070d6:	76fb      	strb	r3, [r7, #27]
 80070d8:	e035      	b.n	8007146 <UART_SetConfig+0x282>
 80070da:	2304      	movs	r3, #4
 80070dc:	76fb      	strb	r3, [r7, #27]
 80070de:	e032      	b.n	8007146 <UART_SetConfig+0x282>
 80070e0:	2308      	movs	r3, #8
 80070e2:	76fb      	strb	r3, [r7, #27]
 80070e4:	e02f      	b.n	8007146 <UART_SetConfig+0x282>
 80070e6:	2310      	movs	r3, #16
 80070e8:	76fb      	strb	r3, [r7, #27]
 80070ea:	e02c      	b.n	8007146 <UART_SetConfig+0x282>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a2d      	ldr	r2, [pc, #180]	; (80071a8 <UART_SetConfig+0x2e4>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d125      	bne.n	8007142 <UART_SetConfig+0x27e>
 80070f6:	4b2e      	ldr	r3, [pc, #184]	; (80071b0 <UART_SetConfig+0x2ec>)
 80070f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007100:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007104:	d017      	beq.n	8007136 <UART_SetConfig+0x272>
 8007106:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800710a:	d817      	bhi.n	800713c <UART_SetConfig+0x278>
 800710c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007110:	d00b      	beq.n	800712a <UART_SetConfig+0x266>
 8007112:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007116:	d811      	bhi.n	800713c <UART_SetConfig+0x278>
 8007118:	2b00      	cmp	r3, #0
 800711a:	d003      	beq.n	8007124 <UART_SetConfig+0x260>
 800711c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007120:	d006      	beq.n	8007130 <UART_SetConfig+0x26c>
 8007122:	e00b      	b.n	800713c <UART_SetConfig+0x278>
 8007124:	2300      	movs	r3, #0
 8007126:	76fb      	strb	r3, [r7, #27]
 8007128:	e00d      	b.n	8007146 <UART_SetConfig+0x282>
 800712a:	2302      	movs	r3, #2
 800712c:	76fb      	strb	r3, [r7, #27]
 800712e:	e00a      	b.n	8007146 <UART_SetConfig+0x282>
 8007130:	2304      	movs	r3, #4
 8007132:	76fb      	strb	r3, [r7, #27]
 8007134:	e007      	b.n	8007146 <UART_SetConfig+0x282>
 8007136:	2308      	movs	r3, #8
 8007138:	76fb      	strb	r3, [r7, #27]
 800713a:	e004      	b.n	8007146 <UART_SetConfig+0x282>
 800713c:	2310      	movs	r3, #16
 800713e:	76fb      	strb	r3, [r7, #27]
 8007140:	e001      	b.n	8007146 <UART_SetConfig+0x282>
 8007142:	2310      	movs	r3, #16
 8007144:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a17      	ldr	r2, [pc, #92]	; (80071a8 <UART_SetConfig+0x2e4>)
 800714c:	4293      	cmp	r3, r2
 800714e:	f040 8087 	bne.w	8007260 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007152:	7efb      	ldrb	r3, [r7, #27]
 8007154:	2b08      	cmp	r3, #8
 8007156:	d837      	bhi.n	80071c8 <UART_SetConfig+0x304>
 8007158:	a201      	add	r2, pc, #4	; (adr r2, 8007160 <UART_SetConfig+0x29c>)
 800715a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800715e:	bf00      	nop
 8007160:	08007185 	.word	0x08007185
 8007164:	080071c9 	.word	0x080071c9
 8007168:	0800718d 	.word	0x0800718d
 800716c:	080071c9 	.word	0x080071c9
 8007170:	08007193 	.word	0x08007193
 8007174:	080071c9 	.word	0x080071c9
 8007178:	080071c9 	.word	0x080071c9
 800717c:	080071c9 	.word	0x080071c9
 8007180:	0800719b 	.word	0x0800719b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007184:	f7fc fac6 	bl	8003714 <HAL_RCC_GetPCLK1Freq>
 8007188:	6178      	str	r0, [r7, #20]
        break;
 800718a:	e022      	b.n	80071d2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800718c:	4b0d      	ldr	r3, [pc, #52]	; (80071c4 <UART_SetConfig+0x300>)
 800718e:	617b      	str	r3, [r7, #20]
        break;
 8007190:	e01f      	b.n	80071d2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007192:	f7fc fa27 	bl	80035e4 <HAL_RCC_GetSysClockFreq>
 8007196:	6178      	str	r0, [r7, #20]
        break;
 8007198:	e01b      	b.n	80071d2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800719a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800719e:	617b      	str	r3, [r7, #20]
        break;
 80071a0:	e017      	b.n	80071d2 <UART_SetConfig+0x30e>
 80071a2:	bf00      	nop
 80071a4:	efff69f3 	.word	0xefff69f3
 80071a8:	40008000 	.word	0x40008000
 80071ac:	40013800 	.word	0x40013800
 80071b0:	40021000 	.word	0x40021000
 80071b4:	40004400 	.word	0x40004400
 80071b8:	40004800 	.word	0x40004800
 80071bc:	40004c00 	.word	0x40004c00
 80071c0:	40005000 	.word	0x40005000
 80071c4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80071c8:	2300      	movs	r3, #0
 80071ca:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80071cc:	2301      	movs	r3, #1
 80071ce:	76bb      	strb	r3, [r7, #26]
        break;
 80071d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	f000 80f1 	beq.w	80073bc <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	685a      	ldr	r2, [r3, #4]
 80071de:	4613      	mov	r3, r2
 80071e0:	005b      	lsls	r3, r3, #1
 80071e2:	4413      	add	r3, r2
 80071e4:	697a      	ldr	r2, [r7, #20]
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d305      	bcc.n	80071f6 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80071f0:	697a      	ldr	r2, [r7, #20]
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d902      	bls.n	80071fc <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80071f6:	2301      	movs	r3, #1
 80071f8:	76bb      	strb	r3, [r7, #26]
 80071fa:	e0df      	b.n	80073bc <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	4618      	mov	r0, r3
 8007200:	f04f 0100 	mov.w	r1, #0
 8007204:	f04f 0200 	mov.w	r2, #0
 8007208:	f04f 0300 	mov.w	r3, #0
 800720c:	020b      	lsls	r3, r1, #8
 800720e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007212:	0202      	lsls	r2, r0, #8
 8007214:	6879      	ldr	r1, [r7, #4]
 8007216:	6849      	ldr	r1, [r1, #4]
 8007218:	0849      	lsrs	r1, r1, #1
 800721a:	4608      	mov	r0, r1
 800721c:	f04f 0100 	mov.w	r1, #0
 8007220:	1814      	adds	r4, r2, r0
 8007222:	eb43 0501 	adc.w	r5, r3, r1
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	461a      	mov	r2, r3
 800722c:	f04f 0300 	mov.w	r3, #0
 8007230:	4620      	mov	r0, r4
 8007232:	4629      	mov	r1, r5
 8007234:	f7f9 f81c 	bl	8000270 <__aeabi_uldivmod>
 8007238:	4602      	mov	r2, r0
 800723a:	460b      	mov	r3, r1
 800723c:	4613      	mov	r3, r2
 800723e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007246:	d308      	bcc.n	800725a <UART_SetConfig+0x396>
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800724e:	d204      	bcs.n	800725a <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	693a      	ldr	r2, [r7, #16]
 8007256:	60da      	str	r2, [r3, #12]
 8007258:	e0b0      	b.n	80073bc <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800725a:	2301      	movs	r3, #1
 800725c:	76bb      	strb	r3, [r7, #26]
 800725e:	e0ad      	b.n	80073bc <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	69db      	ldr	r3, [r3, #28]
 8007264:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007268:	d15c      	bne.n	8007324 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800726a:	7efb      	ldrb	r3, [r7, #27]
 800726c:	2b08      	cmp	r3, #8
 800726e:	d828      	bhi.n	80072c2 <UART_SetConfig+0x3fe>
 8007270:	a201      	add	r2, pc, #4	; (adr r2, 8007278 <UART_SetConfig+0x3b4>)
 8007272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007276:	bf00      	nop
 8007278:	0800729d 	.word	0x0800729d
 800727c:	080072a5 	.word	0x080072a5
 8007280:	080072ad 	.word	0x080072ad
 8007284:	080072c3 	.word	0x080072c3
 8007288:	080072b3 	.word	0x080072b3
 800728c:	080072c3 	.word	0x080072c3
 8007290:	080072c3 	.word	0x080072c3
 8007294:	080072c3 	.word	0x080072c3
 8007298:	080072bb 	.word	0x080072bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800729c:	f7fc fa3a 	bl	8003714 <HAL_RCC_GetPCLK1Freq>
 80072a0:	6178      	str	r0, [r7, #20]
        break;
 80072a2:	e013      	b.n	80072cc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072a4:	f7fc fa4c 	bl	8003740 <HAL_RCC_GetPCLK2Freq>
 80072a8:	6178      	str	r0, [r7, #20]
        break;
 80072aa:	e00f      	b.n	80072cc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072ac:	4b49      	ldr	r3, [pc, #292]	; (80073d4 <UART_SetConfig+0x510>)
 80072ae:	617b      	str	r3, [r7, #20]
        break;
 80072b0:	e00c      	b.n	80072cc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072b2:	f7fc f997 	bl	80035e4 <HAL_RCC_GetSysClockFreq>
 80072b6:	6178      	str	r0, [r7, #20]
        break;
 80072b8:	e008      	b.n	80072cc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072be:	617b      	str	r3, [r7, #20]
        break;
 80072c0:	e004      	b.n	80072cc <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80072c2:	2300      	movs	r3, #0
 80072c4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80072c6:	2301      	movs	r3, #1
 80072c8:	76bb      	strb	r3, [r7, #26]
        break;
 80072ca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d074      	beq.n	80073bc <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	005a      	lsls	r2, r3, #1
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	085b      	lsrs	r3, r3, #1
 80072dc:	441a      	add	r2, r3
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	2b0f      	cmp	r3, #15
 80072ee:	d916      	bls.n	800731e <UART_SetConfig+0x45a>
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072f6:	d212      	bcs.n	800731e <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	f023 030f 	bic.w	r3, r3, #15
 8007300:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	085b      	lsrs	r3, r3, #1
 8007306:	b29b      	uxth	r3, r3
 8007308:	f003 0307 	and.w	r3, r3, #7
 800730c:	b29a      	uxth	r2, r3
 800730e:	89fb      	ldrh	r3, [r7, #14]
 8007310:	4313      	orrs	r3, r2
 8007312:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	89fa      	ldrh	r2, [r7, #14]
 800731a:	60da      	str	r2, [r3, #12]
 800731c:	e04e      	b.n	80073bc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800731e:	2301      	movs	r3, #1
 8007320:	76bb      	strb	r3, [r7, #26]
 8007322:	e04b      	b.n	80073bc <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007324:	7efb      	ldrb	r3, [r7, #27]
 8007326:	2b08      	cmp	r3, #8
 8007328:	d827      	bhi.n	800737a <UART_SetConfig+0x4b6>
 800732a:	a201      	add	r2, pc, #4	; (adr r2, 8007330 <UART_SetConfig+0x46c>)
 800732c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007330:	08007355 	.word	0x08007355
 8007334:	0800735d 	.word	0x0800735d
 8007338:	08007365 	.word	0x08007365
 800733c:	0800737b 	.word	0x0800737b
 8007340:	0800736b 	.word	0x0800736b
 8007344:	0800737b 	.word	0x0800737b
 8007348:	0800737b 	.word	0x0800737b
 800734c:	0800737b 	.word	0x0800737b
 8007350:	08007373 	.word	0x08007373
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007354:	f7fc f9de 	bl	8003714 <HAL_RCC_GetPCLK1Freq>
 8007358:	6178      	str	r0, [r7, #20]
        break;
 800735a:	e013      	b.n	8007384 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800735c:	f7fc f9f0 	bl	8003740 <HAL_RCC_GetPCLK2Freq>
 8007360:	6178      	str	r0, [r7, #20]
        break;
 8007362:	e00f      	b.n	8007384 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007364:	4b1b      	ldr	r3, [pc, #108]	; (80073d4 <UART_SetConfig+0x510>)
 8007366:	617b      	str	r3, [r7, #20]
        break;
 8007368:	e00c      	b.n	8007384 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800736a:	f7fc f93b 	bl	80035e4 <HAL_RCC_GetSysClockFreq>
 800736e:	6178      	str	r0, [r7, #20]
        break;
 8007370:	e008      	b.n	8007384 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007372:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007376:	617b      	str	r3, [r7, #20]
        break;
 8007378:	e004      	b.n	8007384 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800737a:	2300      	movs	r3, #0
 800737c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800737e:	2301      	movs	r3, #1
 8007380:	76bb      	strb	r3, [r7, #26]
        break;
 8007382:	bf00      	nop
    }

    if (pclk != 0U)
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d018      	beq.n	80073bc <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	085a      	lsrs	r2, r3, #1
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	441a      	add	r2, r3
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	fbb2 f3f3 	udiv	r3, r2, r3
 800739c:	b29b      	uxth	r3, r3
 800739e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	2b0f      	cmp	r3, #15
 80073a4:	d908      	bls.n	80073b8 <UART_SetConfig+0x4f4>
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073ac:	d204      	bcs.n	80073b8 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	693a      	ldr	r2, [r7, #16]
 80073b4:	60da      	str	r2, [r3, #12]
 80073b6:	e001      	b.n	80073bc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80073b8:	2301      	movs	r3, #1
 80073ba:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2200      	movs	r2, #0
 80073c0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2200      	movs	r2, #0
 80073c6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80073c8:	7ebb      	ldrb	r3, [r7, #26]
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3720      	adds	r7, #32
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bdb0      	pop	{r4, r5, r7, pc}
 80073d2:	bf00      	nop
 80073d4:	00f42400 	.word	0x00f42400

080073d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80073d8:	b480      	push	{r7}
 80073da:	b083      	sub	sp, #12
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e4:	f003 0301 	and.w	r3, r3, #1
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d00a      	beq.n	8007402 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	430a      	orrs	r2, r1
 8007400:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007406:	f003 0302 	and.w	r3, r3, #2
 800740a:	2b00      	cmp	r3, #0
 800740c:	d00a      	beq.n	8007424 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	430a      	orrs	r2, r1
 8007422:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007428:	f003 0304 	and.w	r3, r3, #4
 800742c:	2b00      	cmp	r3, #0
 800742e:	d00a      	beq.n	8007446 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	430a      	orrs	r2, r1
 8007444:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800744a:	f003 0308 	and.w	r3, r3, #8
 800744e:	2b00      	cmp	r3, #0
 8007450:	d00a      	beq.n	8007468 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	430a      	orrs	r2, r1
 8007466:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800746c:	f003 0310 	and.w	r3, r3, #16
 8007470:	2b00      	cmp	r3, #0
 8007472:	d00a      	beq.n	800748a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	689b      	ldr	r3, [r3, #8]
 800747a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	430a      	orrs	r2, r1
 8007488:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800748e:	f003 0320 	and.w	r3, r3, #32
 8007492:	2b00      	cmp	r3, #0
 8007494:	d00a      	beq.n	80074ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	430a      	orrs	r2, r1
 80074aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d01a      	beq.n	80074ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	430a      	orrs	r2, r1
 80074cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074d6:	d10a      	bne.n	80074ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	430a      	orrs	r2, r1
 80074ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d00a      	beq.n	8007510 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	430a      	orrs	r2, r1
 800750e:	605a      	str	r2, [r3, #4]
  }
}
 8007510:	bf00      	nop
 8007512:	370c      	adds	r7, #12
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr

0800751c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b086      	sub	sp, #24
 8007520:	af02      	add	r7, sp, #8
 8007522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2200      	movs	r2, #0
 8007528:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800752c:	f7fa fe5e 	bl	80021ec <HAL_GetTick>
 8007530:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f003 0308 	and.w	r3, r3, #8
 800753c:	2b08      	cmp	r3, #8
 800753e:	d10e      	bne.n	800755e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007540:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007544:	9300      	str	r3, [sp, #0]
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2200      	movs	r2, #0
 800754a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f000 f82d 	bl	80075ae <UART_WaitOnFlagUntilTimeout>
 8007554:	4603      	mov	r3, r0
 8007556:	2b00      	cmp	r3, #0
 8007558:	d001      	beq.n	800755e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800755a:	2303      	movs	r3, #3
 800755c:	e023      	b.n	80075a6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f003 0304 	and.w	r3, r3, #4
 8007568:	2b04      	cmp	r3, #4
 800756a:	d10e      	bne.n	800758a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800756c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007570:	9300      	str	r3, [sp, #0]
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2200      	movs	r2, #0
 8007576:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f000 f817 	bl	80075ae <UART_WaitOnFlagUntilTimeout>
 8007580:	4603      	mov	r3, r0
 8007582:	2b00      	cmp	r3, #0
 8007584:	d001      	beq.n	800758a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007586:	2303      	movs	r3, #3
 8007588:	e00d      	b.n	80075a6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2220      	movs	r2, #32
 800758e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2220      	movs	r2, #32
 8007594:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2200      	movs	r2, #0
 800759a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2200      	movs	r2, #0
 80075a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80075a4:	2300      	movs	r3, #0
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3710      	adds	r7, #16
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}

080075ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80075ae:	b580      	push	{r7, lr}
 80075b0:	b084      	sub	sp, #16
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	60f8      	str	r0, [r7, #12]
 80075b6:	60b9      	str	r1, [r7, #8]
 80075b8:	603b      	str	r3, [r7, #0]
 80075ba:	4613      	mov	r3, r2
 80075bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075be:	e05e      	b.n	800767e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075c0:	69bb      	ldr	r3, [r7, #24]
 80075c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075c6:	d05a      	beq.n	800767e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075c8:	f7fa fe10 	bl	80021ec <HAL_GetTick>
 80075cc:	4602      	mov	r2, r0
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	1ad3      	subs	r3, r2, r3
 80075d2:	69ba      	ldr	r2, [r7, #24]
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d302      	bcc.n	80075de <UART_WaitOnFlagUntilTimeout+0x30>
 80075d8:	69bb      	ldr	r3, [r7, #24]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d11b      	bne.n	8007616 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	681a      	ldr	r2, [r3, #0]
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80075ec:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	689a      	ldr	r2, [r3, #8]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f022 0201 	bic.w	r2, r2, #1
 80075fc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2220      	movs	r2, #32
 8007602:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2220      	movs	r2, #32
 8007608:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2200      	movs	r2, #0
 800760e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007612:	2303      	movs	r3, #3
 8007614:	e043      	b.n	800769e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f003 0304 	and.w	r3, r3, #4
 8007620:	2b00      	cmp	r3, #0
 8007622:	d02c      	beq.n	800767e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	69db      	ldr	r3, [r3, #28]
 800762a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800762e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007632:	d124      	bne.n	800767e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800763c:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800764c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	689a      	ldr	r2, [r3, #8]
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f022 0201 	bic.w	r2, r2, #1
 800765c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2220      	movs	r2, #32
 8007662:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2220      	movs	r2, #32
 8007668:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2220      	movs	r2, #32
 800766e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2200      	movs	r2, #0
 8007676:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800767a:	2303      	movs	r3, #3
 800767c:	e00f      	b.n	800769e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	69da      	ldr	r2, [r3, #28]
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	4013      	ands	r3, r2
 8007688:	68ba      	ldr	r2, [r7, #8]
 800768a:	429a      	cmp	r2, r3
 800768c:	bf0c      	ite	eq
 800768e:	2301      	moveq	r3, #1
 8007690:	2300      	movne	r3, #0
 8007692:	b2db      	uxtb	r3, r3
 8007694:	461a      	mov	r2, r3
 8007696:	79fb      	ldrb	r3, [r7, #7]
 8007698:	429a      	cmp	r2, r3
 800769a:	d091      	beq.n	80075c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800769c:	2300      	movs	r3, #0
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3710      	adds	r7, #16
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
	...

080076a8 <__errno>:
 80076a8:	4b01      	ldr	r3, [pc, #4]	; (80076b0 <__errno+0x8>)
 80076aa:	6818      	ldr	r0, [r3, #0]
 80076ac:	4770      	bx	lr
 80076ae:	bf00      	nop
 80076b0:	2000008c 	.word	0x2000008c

080076b4 <__libc_init_array>:
 80076b4:	b570      	push	{r4, r5, r6, lr}
 80076b6:	4d0d      	ldr	r5, [pc, #52]	; (80076ec <__libc_init_array+0x38>)
 80076b8:	4c0d      	ldr	r4, [pc, #52]	; (80076f0 <__libc_init_array+0x3c>)
 80076ba:	1b64      	subs	r4, r4, r5
 80076bc:	10a4      	asrs	r4, r4, #2
 80076be:	2600      	movs	r6, #0
 80076c0:	42a6      	cmp	r6, r4
 80076c2:	d109      	bne.n	80076d8 <__libc_init_array+0x24>
 80076c4:	4d0b      	ldr	r5, [pc, #44]	; (80076f4 <__libc_init_array+0x40>)
 80076c6:	4c0c      	ldr	r4, [pc, #48]	; (80076f8 <__libc_init_array+0x44>)
 80076c8:	f000 ff76 	bl	80085b8 <_init>
 80076cc:	1b64      	subs	r4, r4, r5
 80076ce:	10a4      	asrs	r4, r4, #2
 80076d0:	2600      	movs	r6, #0
 80076d2:	42a6      	cmp	r6, r4
 80076d4:	d105      	bne.n	80076e2 <__libc_init_array+0x2e>
 80076d6:	bd70      	pop	{r4, r5, r6, pc}
 80076d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80076dc:	4798      	blx	r3
 80076de:	3601      	adds	r6, #1
 80076e0:	e7ee      	b.n	80076c0 <__libc_init_array+0xc>
 80076e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80076e6:	4798      	blx	r3
 80076e8:	3601      	adds	r6, #1
 80076ea:	e7f2      	b.n	80076d2 <__libc_init_array+0x1e>
 80076ec:	080086c4 	.word	0x080086c4
 80076f0:	080086c4 	.word	0x080086c4
 80076f4:	080086c4 	.word	0x080086c4
 80076f8:	080086c8 	.word	0x080086c8

080076fc <memset>:
 80076fc:	4402      	add	r2, r0
 80076fe:	4603      	mov	r3, r0
 8007700:	4293      	cmp	r3, r2
 8007702:	d100      	bne.n	8007706 <memset+0xa>
 8007704:	4770      	bx	lr
 8007706:	f803 1b01 	strb.w	r1, [r3], #1
 800770a:	e7f9      	b.n	8007700 <memset+0x4>

0800770c <iprintf>:
 800770c:	b40f      	push	{r0, r1, r2, r3}
 800770e:	4b0a      	ldr	r3, [pc, #40]	; (8007738 <iprintf+0x2c>)
 8007710:	b513      	push	{r0, r1, r4, lr}
 8007712:	681c      	ldr	r4, [r3, #0]
 8007714:	b124      	cbz	r4, 8007720 <iprintf+0x14>
 8007716:	69a3      	ldr	r3, [r4, #24]
 8007718:	b913      	cbnz	r3, 8007720 <iprintf+0x14>
 800771a:	4620      	mov	r0, r4
 800771c:	f000 f866 	bl	80077ec <__sinit>
 8007720:	ab05      	add	r3, sp, #20
 8007722:	9a04      	ldr	r2, [sp, #16]
 8007724:	68a1      	ldr	r1, [r4, #8]
 8007726:	9301      	str	r3, [sp, #4]
 8007728:	4620      	mov	r0, r4
 800772a:	f000 f983 	bl	8007a34 <_vfiprintf_r>
 800772e:	b002      	add	sp, #8
 8007730:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007734:	b004      	add	sp, #16
 8007736:	4770      	bx	lr
 8007738:	2000008c 	.word	0x2000008c

0800773c <std>:
 800773c:	2300      	movs	r3, #0
 800773e:	b510      	push	{r4, lr}
 8007740:	4604      	mov	r4, r0
 8007742:	e9c0 3300 	strd	r3, r3, [r0]
 8007746:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800774a:	6083      	str	r3, [r0, #8]
 800774c:	8181      	strh	r1, [r0, #12]
 800774e:	6643      	str	r3, [r0, #100]	; 0x64
 8007750:	81c2      	strh	r2, [r0, #14]
 8007752:	6183      	str	r3, [r0, #24]
 8007754:	4619      	mov	r1, r3
 8007756:	2208      	movs	r2, #8
 8007758:	305c      	adds	r0, #92	; 0x5c
 800775a:	f7ff ffcf 	bl	80076fc <memset>
 800775e:	4b05      	ldr	r3, [pc, #20]	; (8007774 <std+0x38>)
 8007760:	6263      	str	r3, [r4, #36]	; 0x24
 8007762:	4b05      	ldr	r3, [pc, #20]	; (8007778 <std+0x3c>)
 8007764:	62a3      	str	r3, [r4, #40]	; 0x28
 8007766:	4b05      	ldr	r3, [pc, #20]	; (800777c <std+0x40>)
 8007768:	62e3      	str	r3, [r4, #44]	; 0x2c
 800776a:	4b05      	ldr	r3, [pc, #20]	; (8007780 <std+0x44>)
 800776c:	6224      	str	r4, [r4, #32]
 800776e:	6323      	str	r3, [r4, #48]	; 0x30
 8007770:	bd10      	pop	{r4, pc}
 8007772:	bf00      	nop
 8007774:	08007fdd 	.word	0x08007fdd
 8007778:	08007fff 	.word	0x08007fff
 800777c:	08008037 	.word	0x08008037
 8007780:	0800805b 	.word	0x0800805b

08007784 <_cleanup_r>:
 8007784:	4901      	ldr	r1, [pc, #4]	; (800778c <_cleanup_r+0x8>)
 8007786:	f000 b8af 	b.w	80078e8 <_fwalk_reent>
 800778a:	bf00      	nop
 800778c:	08008335 	.word	0x08008335

08007790 <__sfmoreglue>:
 8007790:	b570      	push	{r4, r5, r6, lr}
 8007792:	1e4a      	subs	r2, r1, #1
 8007794:	2568      	movs	r5, #104	; 0x68
 8007796:	4355      	muls	r5, r2
 8007798:	460e      	mov	r6, r1
 800779a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800779e:	f000 f8c5 	bl	800792c <_malloc_r>
 80077a2:	4604      	mov	r4, r0
 80077a4:	b140      	cbz	r0, 80077b8 <__sfmoreglue+0x28>
 80077a6:	2100      	movs	r1, #0
 80077a8:	e9c0 1600 	strd	r1, r6, [r0]
 80077ac:	300c      	adds	r0, #12
 80077ae:	60a0      	str	r0, [r4, #8]
 80077b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80077b4:	f7ff ffa2 	bl	80076fc <memset>
 80077b8:	4620      	mov	r0, r4
 80077ba:	bd70      	pop	{r4, r5, r6, pc}

080077bc <__sfp_lock_acquire>:
 80077bc:	4801      	ldr	r0, [pc, #4]	; (80077c4 <__sfp_lock_acquire+0x8>)
 80077be:	f000 b8b3 	b.w	8007928 <__retarget_lock_acquire_recursive>
 80077c2:	bf00      	nop
 80077c4:	200008fc 	.word	0x200008fc

080077c8 <__sfp_lock_release>:
 80077c8:	4801      	ldr	r0, [pc, #4]	; (80077d0 <__sfp_lock_release+0x8>)
 80077ca:	f000 b8ae 	b.w	800792a <__retarget_lock_release_recursive>
 80077ce:	bf00      	nop
 80077d0:	200008fc 	.word	0x200008fc

080077d4 <__sinit_lock_acquire>:
 80077d4:	4801      	ldr	r0, [pc, #4]	; (80077dc <__sinit_lock_acquire+0x8>)
 80077d6:	f000 b8a7 	b.w	8007928 <__retarget_lock_acquire_recursive>
 80077da:	bf00      	nop
 80077dc:	200008f7 	.word	0x200008f7

080077e0 <__sinit_lock_release>:
 80077e0:	4801      	ldr	r0, [pc, #4]	; (80077e8 <__sinit_lock_release+0x8>)
 80077e2:	f000 b8a2 	b.w	800792a <__retarget_lock_release_recursive>
 80077e6:	bf00      	nop
 80077e8:	200008f7 	.word	0x200008f7

080077ec <__sinit>:
 80077ec:	b510      	push	{r4, lr}
 80077ee:	4604      	mov	r4, r0
 80077f0:	f7ff fff0 	bl	80077d4 <__sinit_lock_acquire>
 80077f4:	69a3      	ldr	r3, [r4, #24]
 80077f6:	b11b      	cbz	r3, 8007800 <__sinit+0x14>
 80077f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077fc:	f7ff bff0 	b.w	80077e0 <__sinit_lock_release>
 8007800:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007804:	6523      	str	r3, [r4, #80]	; 0x50
 8007806:	4b13      	ldr	r3, [pc, #76]	; (8007854 <__sinit+0x68>)
 8007808:	4a13      	ldr	r2, [pc, #76]	; (8007858 <__sinit+0x6c>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	62a2      	str	r2, [r4, #40]	; 0x28
 800780e:	42a3      	cmp	r3, r4
 8007810:	bf04      	itt	eq
 8007812:	2301      	moveq	r3, #1
 8007814:	61a3      	streq	r3, [r4, #24]
 8007816:	4620      	mov	r0, r4
 8007818:	f000 f820 	bl	800785c <__sfp>
 800781c:	6060      	str	r0, [r4, #4]
 800781e:	4620      	mov	r0, r4
 8007820:	f000 f81c 	bl	800785c <__sfp>
 8007824:	60a0      	str	r0, [r4, #8]
 8007826:	4620      	mov	r0, r4
 8007828:	f000 f818 	bl	800785c <__sfp>
 800782c:	2200      	movs	r2, #0
 800782e:	60e0      	str	r0, [r4, #12]
 8007830:	2104      	movs	r1, #4
 8007832:	6860      	ldr	r0, [r4, #4]
 8007834:	f7ff ff82 	bl	800773c <std>
 8007838:	68a0      	ldr	r0, [r4, #8]
 800783a:	2201      	movs	r2, #1
 800783c:	2109      	movs	r1, #9
 800783e:	f7ff ff7d 	bl	800773c <std>
 8007842:	68e0      	ldr	r0, [r4, #12]
 8007844:	2202      	movs	r2, #2
 8007846:	2112      	movs	r1, #18
 8007848:	f7ff ff78 	bl	800773c <std>
 800784c:	2301      	movs	r3, #1
 800784e:	61a3      	str	r3, [r4, #24]
 8007850:	e7d2      	b.n	80077f8 <__sinit+0xc>
 8007852:	bf00      	nop
 8007854:	08008624 	.word	0x08008624
 8007858:	08007785 	.word	0x08007785

0800785c <__sfp>:
 800785c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800785e:	4607      	mov	r7, r0
 8007860:	f7ff ffac 	bl	80077bc <__sfp_lock_acquire>
 8007864:	4b1e      	ldr	r3, [pc, #120]	; (80078e0 <__sfp+0x84>)
 8007866:	681e      	ldr	r6, [r3, #0]
 8007868:	69b3      	ldr	r3, [r6, #24]
 800786a:	b913      	cbnz	r3, 8007872 <__sfp+0x16>
 800786c:	4630      	mov	r0, r6
 800786e:	f7ff ffbd 	bl	80077ec <__sinit>
 8007872:	3648      	adds	r6, #72	; 0x48
 8007874:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007878:	3b01      	subs	r3, #1
 800787a:	d503      	bpl.n	8007884 <__sfp+0x28>
 800787c:	6833      	ldr	r3, [r6, #0]
 800787e:	b30b      	cbz	r3, 80078c4 <__sfp+0x68>
 8007880:	6836      	ldr	r6, [r6, #0]
 8007882:	e7f7      	b.n	8007874 <__sfp+0x18>
 8007884:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007888:	b9d5      	cbnz	r5, 80078c0 <__sfp+0x64>
 800788a:	4b16      	ldr	r3, [pc, #88]	; (80078e4 <__sfp+0x88>)
 800788c:	60e3      	str	r3, [r4, #12]
 800788e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007892:	6665      	str	r5, [r4, #100]	; 0x64
 8007894:	f000 f847 	bl	8007926 <__retarget_lock_init_recursive>
 8007898:	f7ff ff96 	bl	80077c8 <__sfp_lock_release>
 800789c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80078a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80078a4:	6025      	str	r5, [r4, #0]
 80078a6:	61a5      	str	r5, [r4, #24]
 80078a8:	2208      	movs	r2, #8
 80078aa:	4629      	mov	r1, r5
 80078ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80078b0:	f7ff ff24 	bl	80076fc <memset>
 80078b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80078b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80078bc:	4620      	mov	r0, r4
 80078be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078c0:	3468      	adds	r4, #104	; 0x68
 80078c2:	e7d9      	b.n	8007878 <__sfp+0x1c>
 80078c4:	2104      	movs	r1, #4
 80078c6:	4638      	mov	r0, r7
 80078c8:	f7ff ff62 	bl	8007790 <__sfmoreglue>
 80078cc:	4604      	mov	r4, r0
 80078ce:	6030      	str	r0, [r6, #0]
 80078d0:	2800      	cmp	r0, #0
 80078d2:	d1d5      	bne.n	8007880 <__sfp+0x24>
 80078d4:	f7ff ff78 	bl	80077c8 <__sfp_lock_release>
 80078d8:	230c      	movs	r3, #12
 80078da:	603b      	str	r3, [r7, #0]
 80078dc:	e7ee      	b.n	80078bc <__sfp+0x60>
 80078de:	bf00      	nop
 80078e0:	08008624 	.word	0x08008624
 80078e4:	ffff0001 	.word	0xffff0001

080078e8 <_fwalk_reent>:
 80078e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078ec:	4606      	mov	r6, r0
 80078ee:	4688      	mov	r8, r1
 80078f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80078f4:	2700      	movs	r7, #0
 80078f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80078fa:	f1b9 0901 	subs.w	r9, r9, #1
 80078fe:	d505      	bpl.n	800790c <_fwalk_reent+0x24>
 8007900:	6824      	ldr	r4, [r4, #0]
 8007902:	2c00      	cmp	r4, #0
 8007904:	d1f7      	bne.n	80078f6 <_fwalk_reent+0xe>
 8007906:	4638      	mov	r0, r7
 8007908:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800790c:	89ab      	ldrh	r3, [r5, #12]
 800790e:	2b01      	cmp	r3, #1
 8007910:	d907      	bls.n	8007922 <_fwalk_reent+0x3a>
 8007912:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007916:	3301      	adds	r3, #1
 8007918:	d003      	beq.n	8007922 <_fwalk_reent+0x3a>
 800791a:	4629      	mov	r1, r5
 800791c:	4630      	mov	r0, r6
 800791e:	47c0      	blx	r8
 8007920:	4307      	orrs	r7, r0
 8007922:	3568      	adds	r5, #104	; 0x68
 8007924:	e7e9      	b.n	80078fa <_fwalk_reent+0x12>

08007926 <__retarget_lock_init_recursive>:
 8007926:	4770      	bx	lr

08007928 <__retarget_lock_acquire_recursive>:
 8007928:	4770      	bx	lr

0800792a <__retarget_lock_release_recursive>:
 800792a:	4770      	bx	lr

0800792c <_malloc_r>:
 800792c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800792e:	1ccd      	adds	r5, r1, #3
 8007930:	f025 0503 	bic.w	r5, r5, #3
 8007934:	3508      	adds	r5, #8
 8007936:	2d0c      	cmp	r5, #12
 8007938:	bf38      	it	cc
 800793a:	250c      	movcc	r5, #12
 800793c:	2d00      	cmp	r5, #0
 800793e:	4606      	mov	r6, r0
 8007940:	db01      	blt.n	8007946 <_malloc_r+0x1a>
 8007942:	42a9      	cmp	r1, r5
 8007944:	d903      	bls.n	800794e <_malloc_r+0x22>
 8007946:	230c      	movs	r3, #12
 8007948:	6033      	str	r3, [r6, #0]
 800794a:	2000      	movs	r0, #0
 800794c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800794e:	f000 fda3 	bl	8008498 <__malloc_lock>
 8007952:	4921      	ldr	r1, [pc, #132]	; (80079d8 <_malloc_r+0xac>)
 8007954:	680a      	ldr	r2, [r1, #0]
 8007956:	4614      	mov	r4, r2
 8007958:	b99c      	cbnz	r4, 8007982 <_malloc_r+0x56>
 800795a:	4f20      	ldr	r7, [pc, #128]	; (80079dc <_malloc_r+0xb0>)
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	b923      	cbnz	r3, 800796a <_malloc_r+0x3e>
 8007960:	4621      	mov	r1, r4
 8007962:	4630      	mov	r0, r6
 8007964:	f000 fb2a 	bl	8007fbc <_sbrk_r>
 8007968:	6038      	str	r0, [r7, #0]
 800796a:	4629      	mov	r1, r5
 800796c:	4630      	mov	r0, r6
 800796e:	f000 fb25 	bl	8007fbc <_sbrk_r>
 8007972:	1c43      	adds	r3, r0, #1
 8007974:	d123      	bne.n	80079be <_malloc_r+0x92>
 8007976:	230c      	movs	r3, #12
 8007978:	6033      	str	r3, [r6, #0]
 800797a:	4630      	mov	r0, r6
 800797c:	f000 fd92 	bl	80084a4 <__malloc_unlock>
 8007980:	e7e3      	b.n	800794a <_malloc_r+0x1e>
 8007982:	6823      	ldr	r3, [r4, #0]
 8007984:	1b5b      	subs	r3, r3, r5
 8007986:	d417      	bmi.n	80079b8 <_malloc_r+0x8c>
 8007988:	2b0b      	cmp	r3, #11
 800798a:	d903      	bls.n	8007994 <_malloc_r+0x68>
 800798c:	6023      	str	r3, [r4, #0]
 800798e:	441c      	add	r4, r3
 8007990:	6025      	str	r5, [r4, #0]
 8007992:	e004      	b.n	800799e <_malloc_r+0x72>
 8007994:	6863      	ldr	r3, [r4, #4]
 8007996:	42a2      	cmp	r2, r4
 8007998:	bf0c      	ite	eq
 800799a:	600b      	streq	r3, [r1, #0]
 800799c:	6053      	strne	r3, [r2, #4]
 800799e:	4630      	mov	r0, r6
 80079a0:	f000 fd80 	bl	80084a4 <__malloc_unlock>
 80079a4:	f104 000b 	add.w	r0, r4, #11
 80079a8:	1d23      	adds	r3, r4, #4
 80079aa:	f020 0007 	bic.w	r0, r0, #7
 80079ae:	1ac2      	subs	r2, r0, r3
 80079b0:	d0cc      	beq.n	800794c <_malloc_r+0x20>
 80079b2:	1a1b      	subs	r3, r3, r0
 80079b4:	50a3      	str	r3, [r4, r2]
 80079b6:	e7c9      	b.n	800794c <_malloc_r+0x20>
 80079b8:	4622      	mov	r2, r4
 80079ba:	6864      	ldr	r4, [r4, #4]
 80079bc:	e7cc      	b.n	8007958 <_malloc_r+0x2c>
 80079be:	1cc4      	adds	r4, r0, #3
 80079c0:	f024 0403 	bic.w	r4, r4, #3
 80079c4:	42a0      	cmp	r0, r4
 80079c6:	d0e3      	beq.n	8007990 <_malloc_r+0x64>
 80079c8:	1a21      	subs	r1, r4, r0
 80079ca:	4630      	mov	r0, r6
 80079cc:	f000 faf6 	bl	8007fbc <_sbrk_r>
 80079d0:	3001      	adds	r0, #1
 80079d2:	d1dd      	bne.n	8007990 <_malloc_r+0x64>
 80079d4:	e7cf      	b.n	8007976 <_malloc_r+0x4a>
 80079d6:	bf00      	nop
 80079d8:	2000070c 	.word	0x2000070c
 80079dc:	20000710 	.word	0x20000710

080079e0 <__sfputc_r>:
 80079e0:	6893      	ldr	r3, [r2, #8]
 80079e2:	3b01      	subs	r3, #1
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	b410      	push	{r4}
 80079e8:	6093      	str	r3, [r2, #8]
 80079ea:	da08      	bge.n	80079fe <__sfputc_r+0x1e>
 80079ec:	6994      	ldr	r4, [r2, #24]
 80079ee:	42a3      	cmp	r3, r4
 80079f0:	db01      	blt.n	80079f6 <__sfputc_r+0x16>
 80079f2:	290a      	cmp	r1, #10
 80079f4:	d103      	bne.n	80079fe <__sfputc_r+0x1e>
 80079f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80079fa:	f000 bb33 	b.w	8008064 <__swbuf_r>
 80079fe:	6813      	ldr	r3, [r2, #0]
 8007a00:	1c58      	adds	r0, r3, #1
 8007a02:	6010      	str	r0, [r2, #0]
 8007a04:	7019      	strb	r1, [r3, #0]
 8007a06:	4608      	mov	r0, r1
 8007a08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a0c:	4770      	bx	lr

08007a0e <__sfputs_r>:
 8007a0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a10:	4606      	mov	r6, r0
 8007a12:	460f      	mov	r7, r1
 8007a14:	4614      	mov	r4, r2
 8007a16:	18d5      	adds	r5, r2, r3
 8007a18:	42ac      	cmp	r4, r5
 8007a1a:	d101      	bne.n	8007a20 <__sfputs_r+0x12>
 8007a1c:	2000      	movs	r0, #0
 8007a1e:	e007      	b.n	8007a30 <__sfputs_r+0x22>
 8007a20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a24:	463a      	mov	r2, r7
 8007a26:	4630      	mov	r0, r6
 8007a28:	f7ff ffda 	bl	80079e0 <__sfputc_r>
 8007a2c:	1c43      	adds	r3, r0, #1
 8007a2e:	d1f3      	bne.n	8007a18 <__sfputs_r+0xa>
 8007a30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007a34 <_vfiprintf_r>:
 8007a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a38:	460d      	mov	r5, r1
 8007a3a:	b09d      	sub	sp, #116	; 0x74
 8007a3c:	4614      	mov	r4, r2
 8007a3e:	4698      	mov	r8, r3
 8007a40:	4606      	mov	r6, r0
 8007a42:	b118      	cbz	r0, 8007a4c <_vfiprintf_r+0x18>
 8007a44:	6983      	ldr	r3, [r0, #24]
 8007a46:	b90b      	cbnz	r3, 8007a4c <_vfiprintf_r+0x18>
 8007a48:	f7ff fed0 	bl	80077ec <__sinit>
 8007a4c:	4b89      	ldr	r3, [pc, #548]	; (8007c74 <_vfiprintf_r+0x240>)
 8007a4e:	429d      	cmp	r5, r3
 8007a50:	d11b      	bne.n	8007a8a <_vfiprintf_r+0x56>
 8007a52:	6875      	ldr	r5, [r6, #4]
 8007a54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a56:	07d9      	lsls	r1, r3, #31
 8007a58:	d405      	bmi.n	8007a66 <_vfiprintf_r+0x32>
 8007a5a:	89ab      	ldrh	r3, [r5, #12]
 8007a5c:	059a      	lsls	r2, r3, #22
 8007a5e:	d402      	bmi.n	8007a66 <_vfiprintf_r+0x32>
 8007a60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a62:	f7ff ff61 	bl	8007928 <__retarget_lock_acquire_recursive>
 8007a66:	89ab      	ldrh	r3, [r5, #12]
 8007a68:	071b      	lsls	r3, r3, #28
 8007a6a:	d501      	bpl.n	8007a70 <_vfiprintf_r+0x3c>
 8007a6c:	692b      	ldr	r3, [r5, #16]
 8007a6e:	b9eb      	cbnz	r3, 8007aac <_vfiprintf_r+0x78>
 8007a70:	4629      	mov	r1, r5
 8007a72:	4630      	mov	r0, r6
 8007a74:	f000 fb5a 	bl	800812c <__swsetup_r>
 8007a78:	b1c0      	cbz	r0, 8007aac <_vfiprintf_r+0x78>
 8007a7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a7c:	07dc      	lsls	r4, r3, #31
 8007a7e:	d50e      	bpl.n	8007a9e <_vfiprintf_r+0x6a>
 8007a80:	f04f 30ff 	mov.w	r0, #4294967295
 8007a84:	b01d      	add	sp, #116	; 0x74
 8007a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a8a:	4b7b      	ldr	r3, [pc, #492]	; (8007c78 <_vfiprintf_r+0x244>)
 8007a8c:	429d      	cmp	r5, r3
 8007a8e:	d101      	bne.n	8007a94 <_vfiprintf_r+0x60>
 8007a90:	68b5      	ldr	r5, [r6, #8]
 8007a92:	e7df      	b.n	8007a54 <_vfiprintf_r+0x20>
 8007a94:	4b79      	ldr	r3, [pc, #484]	; (8007c7c <_vfiprintf_r+0x248>)
 8007a96:	429d      	cmp	r5, r3
 8007a98:	bf08      	it	eq
 8007a9a:	68f5      	ldreq	r5, [r6, #12]
 8007a9c:	e7da      	b.n	8007a54 <_vfiprintf_r+0x20>
 8007a9e:	89ab      	ldrh	r3, [r5, #12]
 8007aa0:	0598      	lsls	r0, r3, #22
 8007aa2:	d4ed      	bmi.n	8007a80 <_vfiprintf_r+0x4c>
 8007aa4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007aa6:	f7ff ff40 	bl	800792a <__retarget_lock_release_recursive>
 8007aaa:	e7e9      	b.n	8007a80 <_vfiprintf_r+0x4c>
 8007aac:	2300      	movs	r3, #0
 8007aae:	9309      	str	r3, [sp, #36]	; 0x24
 8007ab0:	2320      	movs	r3, #32
 8007ab2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ab6:	f8cd 800c 	str.w	r8, [sp, #12]
 8007aba:	2330      	movs	r3, #48	; 0x30
 8007abc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007c80 <_vfiprintf_r+0x24c>
 8007ac0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ac4:	f04f 0901 	mov.w	r9, #1
 8007ac8:	4623      	mov	r3, r4
 8007aca:	469a      	mov	sl, r3
 8007acc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ad0:	b10a      	cbz	r2, 8007ad6 <_vfiprintf_r+0xa2>
 8007ad2:	2a25      	cmp	r2, #37	; 0x25
 8007ad4:	d1f9      	bne.n	8007aca <_vfiprintf_r+0x96>
 8007ad6:	ebba 0b04 	subs.w	fp, sl, r4
 8007ada:	d00b      	beq.n	8007af4 <_vfiprintf_r+0xc0>
 8007adc:	465b      	mov	r3, fp
 8007ade:	4622      	mov	r2, r4
 8007ae0:	4629      	mov	r1, r5
 8007ae2:	4630      	mov	r0, r6
 8007ae4:	f7ff ff93 	bl	8007a0e <__sfputs_r>
 8007ae8:	3001      	adds	r0, #1
 8007aea:	f000 80aa 	beq.w	8007c42 <_vfiprintf_r+0x20e>
 8007aee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007af0:	445a      	add	r2, fp
 8007af2:	9209      	str	r2, [sp, #36]	; 0x24
 8007af4:	f89a 3000 	ldrb.w	r3, [sl]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	f000 80a2 	beq.w	8007c42 <_vfiprintf_r+0x20e>
 8007afe:	2300      	movs	r3, #0
 8007b00:	f04f 32ff 	mov.w	r2, #4294967295
 8007b04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b08:	f10a 0a01 	add.w	sl, sl, #1
 8007b0c:	9304      	str	r3, [sp, #16]
 8007b0e:	9307      	str	r3, [sp, #28]
 8007b10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b14:	931a      	str	r3, [sp, #104]	; 0x68
 8007b16:	4654      	mov	r4, sl
 8007b18:	2205      	movs	r2, #5
 8007b1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b1e:	4858      	ldr	r0, [pc, #352]	; (8007c80 <_vfiprintf_r+0x24c>)
 8007b20:	f7f8 fb56 	bl	80001d0 <memchr>
 8007b24:	9a04      	ldr	r2, [sp, #16]
 8007b26:	b9d8      	cbnz	r0, 8007b60 <_vfiprintf_r+0x12c>
 8007b28:	06d1      	lsls	r1, r2, #27
 8007b2a:	bf44      	itt	mi
 8007b2c:	2320      	movmi	r3, #32
 8007b2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b32:	0713      	lsls	r3, r2, #28
 8007b34:	bf44      	itt	mi
 8007b36:	232b      	movmi	r3, #43	; 0x2b
 8007b38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b3c:	f89a 3000 	ldrb.w	r3, [sl]
 8007b40:	2b2a      	cmp	r3, #42	; 0x2a
 8007b42:	d015      	beq.n	8007b70 <_vfiprintf_r+0x13c>
 8007b44:	9a07      	ldr	r2, [sp, #28]
 8007b46:	4654      	mov	r4, sl
 8007b48:	2000      	movs	r0, #0
 8007b4a:	f04f 0c0a 	mov.w	ip, #10
 8007b4e:	4621      	mov	r1, r4
 8007b50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b54:	3b30      	subs	r3, #48	; 0x30
 8007b56:	2b09      	cmp	r3, #9
 8007b58:	d94e      	bls.n	8007bf8 <_vfiprintf_r+0x1c4>
 8007b5a:	b1b0      	cbz	r0, 8007b8a <_vfiprintf_r+0x156>
 8007b5c:	9207      	str	r2, [sp, #28]
 8007b5e:	e014      	b.n	8007b8a <_vfiprintf_r+0x156>
 8007b60:	eba0 0308 	sub.w	r3, r0, r8
 8007b64:	fa09 f303 	lsl.w	r3, r9, r3
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	9304      	str	r3, [sp, #16]
 8007b6c:	46a2      	mov	sl, r4
 8007b6e:	e7d2      	b.n	8007b16 <_vfiprintf_r+0xe2>
 8007b70:	9b03      	ldr	r3, [sp, #12]
 8007b72:	1d19      	adds	r1, r3, #4
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	9103      	str	r1, [sp, #12]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	bfbb      	ittet	lt
 8007b7c:	425b      	neglt	r3, r3
 8007b7e:	f042 0202 	orrlt.w	r2, r2, #2
 8007b82:	9307      	strge	r3, [sp, #28]
 8007b84:	9307      	strlt	r3, [sp, #28]
 8007b86:	bfb8      	it	lt
 8007b88:	9204      	strlt	r2, [sp, #16]
 8007b8a:	7823      	ldrb	r3, [r4, #0]
 8007b8c:	2b2e      	cmp	r3, #46	; 0x2e
 8007b8e:	d10c      	bne.n	8007baa <_vfiprintf_r+0x176>
 8007b90:	7863      	ldrb	r3, [r4, #1]
 8007b92:	2b2a      	cmp	r3, #42	; 0x2a
 8007b94:	d135      	bne.n	8007c02 <_vfiprintf_r+0x1ce>
 8007b96:	9b03      	ldr	r3, [sp, #12]
 8007b98:	1d1a      	adds	r2, r3, #4
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	9203      	str	r2, [sp, #12]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	bfb8      	it	lt
 8007ba2:	f04f 33ff 	movlt.w	r3, #4294967295
 8007ba6:	3402      	adds	r4, #2
 8007ba8:	9305      	str	r3, [sp, #20]
 8007baa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007c90 <_vfiprintf_r+0x25c>
 8007bae:	7821      	ldrb	r1, [r4, #0]
 8007bb0:	2203      	movs	r2, #3
 8007bb2:	4650      	mov	r0, sl
 8007bb4:	f7f8 fb0c 	bl	80001d0 <memchr>
 8007bb8:	b140      	cbz	r0, 8007bcc <_vfiprintf_r+0x198>
 8007bba:	2340      	movs	r3, #64	; 0x40
 8007bbc:	eba0 000a 	sub.w	r0, r0, sl
 8007bc0:	fa03 f000 	lsl.w	r0, r3, r0
 8007bc4:	9b04      	ldr	r3, [sp, #16]
 8007bc6:	4303      	orrs	r3, r0
 8007bc8:	3401      	adds	r4, #1
 8007bca:	9304      	str	r3, [sp, #16]
 8007bcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bd0:	482c      	ldr	r0, [pc, #176]	; (8007c84 <_vfiprintf_r+0x250>)
 8007bd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007bd6:	2206      	movs	r2, #6
 8007bd8:	f7f8 fafa 	bl	80001d0 <memchr>
 8007bdc:	2800      	cmp	r0, #0
 8007bde:	d03f      	beq.n	8007c60 <_vfiprintf_r+0x22c>
 8007be0:	4b29      	ldr	r3, [pc, #164]	; (8007c88 <_vfiprintf_r+0x254>)
 8007be2:	bb1b      	cbnz	r3, 8007c2c <_vfiprintf_r+0x1f8>
 8007be4:	9b03      	ldr	r3, [sp, #12]
 8007be6:	3307      	adds	r3, #7
 8007be8:	f023 0307 	bic.w	r3, r3, #7
 8007bec:	3308      	adds	r3, #8
 8007bee:	9303      	str	r3, [sp, #12]
 8007bf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bf2:	443b      	add	r3, r7
 8007bf4:	9309      	str	r3, [sp, #36]	; 0x24
 8007bf6:	e767      	b.n	8007ac8 <_vfiprintf_r+0x94>
 8007bf8:	fb0c 3202 	mla	r2, ip, r2, r3
 8007bfc:	460c      	mov	r4, r1
 8007bfe:	2001      	movs	r0, #1
 8007c00:	e7a5      	b.n	8007b4e <_vfiprintf_r+0x11a>
 8007c02:	2300      	movs	r3, #0
 8007c04:	3401      	adds	r4, #1
 8007c06:	9305      	str	r3, [sp, #20]
 8007c08:	4619      	mov	r1, r3
 8007c0a:	f04f 0c0a 	mov.w	ip, #10
 8007c0e:	4620      	mov	r0, r4
 8007c10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c14:	3a30      	subs	r2, #48	; 0x30
 8007c16:	2a09      	cmp	r2, #9
 8007c18:	d903      	bls.n	8007c22 <_vfiprintf_r+0x1ee>
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d0c5      	beq.n	8007baa <_vfiprintf_r+0x176>
 8007c1e:	9105      	str	r1, [sp, #20]
 8007c20:	e7c3      	b.n	8007baa <_vfiprintf_r+0x176>
 8007c22:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c26:	4604      	mov	r4, r0
 8007c28:	2301      	movs	r3, #1
 8007c2a:	e7f0      	b.n	8007c0e <_vfiprintf_r+0x1da>
 8007c2c:	ab03      	add	r3, sp, #12
 8007c2e:	9300      	str	r3, [sp, #0]
 8007c30:	462a      	mov	r2, r5
 8007c32:	4b16      	ldr	r3, [pc, #88]	; (8007c8c <_vfiprintf_r+0x258>)
 8007c34:	a904      	add	r1, sp, #16
 8007c36:	4630      	mov	r0, r6
 8007c38:	f3af 8000 	nop.w
 8007c3c:	4607      	mov	r7, r0
 8007c3e:	1c78      	adds	r0, r7, #1
 8007c40:	d1d6      	bne.n	8007bf0 <_vfiprintf_r+0x1bc>
 8007c42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c44:	07d9      	lsls	r1, r3, #31
 8007c46:	d405      	bmi.n	8007c54 <_vfiprintf_r+0x220>
 8007c48:	89ab      	ldrh	r3, [r5, #12]
 8007c4a:	059a      	lsls	r2, r3, #22
 8007c4c:	d402      	bmi.n	8007c54 <_vfiprintf_r+0x220>
 8007c4e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c50:	f7ff fe6b 	bl	800792a <__retarget_lock_release_recursive>
 8007c54:	89ab      	ldrh	r3, [r5, #12]
 8007c56:	065b      	lsls	r3, r3, #25
 8007c58:	f53f af12 	bmi.w	8007a80 <_vfiprintf_r+0x4c>
 8007c5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c5e:	e711      	b.n	8007a84 <_vfiprintf_r+0x50>
 8007c60:	ab03      	add	r3, sp, #12
 8007c62:	9300      	str	r3, [sp, #0]
 8007c64:	462a      	mov	r2, r5
 8007c66:	4b09      	ldr	r3, [pc, #36]	; (8007c8c <_vfiprintf_r+0x258>)
 8007c68:	a904      	add	r1, sp, #16
 8007c6a:	4630      	mov	r0, r6
 8007c6c:	f000 f880 	bl	8007d70 <_printf_i>
 8007c70:	e7e4      	b.n	8007c3c <_vfiprintf_r+0x208>
 8007c72:	bf00      	nop
 8007c74:	08008648 	.word	0x08008648
 8007c78:	08008668 	.word	0x08008668
 8007c7c:	08008628 	.word	0x08008628
 8007c80:	08008688 	.word	0x08008688
 8007c84:	08008692 	.word	0x08008692
 8007c88:	00000000 	.word	0x00000000
 8007c8c:	08007a0f 	.word	0x08007a0f
 8007c90:	0800868e 	.word	0x0800868e

08007c94 <_printf_common>:
 8007c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c98:	4616      	mov	r6, r2
 8007c9a:	4699      	mov	r9, r3
 8007c9c:	688a      	ldr	r2, [r1, #8]
 8007c9e:	690b      	ldr	r3, [r1, #16]
 8007ca0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	bfb8      	it	lt
 8007ca8:	4613      	movlt	r3, r2
 8007caa:	6033      	str	r3, [r6, #0]
 8007cac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007cb0:	4607      	mov	r7, r0
 8007cb2:	460c      	mov	r4, r1
 8007cb4:	b10a      	cbz	r2, 8007cba <_printf_common+0x26>
 8007cb6:	3301      	adds	r3, #1
 8007cb8:	6033      	str	r3, [r6, #0]
 8007cba:	6823      	ldr	r3, [r4, #0]
 8007cbc:	0699      	lsls	r1, r3, #26
 8007cbe:	bf42      	ittt	mi
 8007cc0:	6833      	ldrmi	r3, [r6, #0]
 8007cc2:	3302      	addmi	r3, #2
 8007cc4:	6033      	strmi	r3, [r6, #0]
 8007cc6:	6825      	ldr	r5, [r4, #0]
 8007cc8:	f015 0506 	ands.w	r5, r5, #6
 8007ccc:	d106      	bne.n	8007cdc <_printf_common+0x48>
 8007cce:	f104 0a19 	add.w	sl, r4, #25
 8007cd2:	68e3      	ldr	r3, [r4, #12]
 8007cd4:	6832      	ldr	r2, [r6, #0]
 8007cd6:	1a9b      	subs	r3, r3, r2
 8007cd8:	42ab      	cmp	r3, r5
 8007cda:	dc26      	bgt.n	8007d2a <_printf_common+0x96>
 8007cdc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007ce0:	1e13      	subs	r3, r2, #0
 8007ce2:	6822      	ldr	r2, [r4, #0]
 8007ce4:	bf18      	it	ne
 8007ce6:	2301      	movne	r3, #1
 8007ce8:	0692      	lsls	r2, r2, #26
 8007cea:	d42b      	bmi.n	8007d44 <_printf_common+0xb0>
 8007cec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007cf0:	4649      	mov	r1, r9
 8007cf2:	4638      	mov	r0, r7
 8007cf4:	47c0      	blx	r8
 8007cf6:	3001      	adds	r0, #1
 8007cf8:	d01e      	beq.n	8007d38 <_printf_common+0xa4>
 8007cfa:	6823      	ldr	r3, [r4, #0]
 8007cfc:	68e5      	ldr	r5, [r4, #12]
 8007cfe:	6832      	ldr	r2, [r6, #0]
 8007d00:	f003 0306 	and.w	r3, r3, #6
 8007d04:	2b04      	cmp	r3, #4
 8007d06:	bf08      	it	eq
 8007d08:	1aad      	subeq	r5, r5, r2
 8007d0a:	68a3      	ldr	r3, [r4, #8]
 8007d0c:	6922      	ldr	r2, [r4, #16]
 8007d0e:	bf0c      	ite	eq
 8007d10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d14:	2500      	movne	r5, #0
 8007d16:	4293      	cmp	r3, r2
 8007d18:	bfc4      	itt	gt
 8007d1a:	1a9b      	subgt	r3, r3, r2
 8007d1c:	18ed      	addgt	r5, r5, r3
 8007d1e:	2600      	movs	r6, #0
 8007d20:	341a      	adds	r4, #26
 8007d22:	42b5      	cmp	r5, r6
 8007d24:	d11a      	bne.n	8007d5c <_printf_common+0xc8>
 8007d26:	2000      	movs	r0, #0
 8007d28:	e008      	b.n	8007d3c <_printf_common+0xa8>
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	4652      	mov	r2, sl
 8007d2e:	4649      	mov	r1, r9
 8007d30:	4638      	mov	r0, r7
 8007d32:	47c0      	blx	r8
 8007d34:	3001      	adds	r0, #1
 8007d36:	d103      	bne.n	8007d40 <_printf_common+0xac>
 8007d38:	f04f 30ff 	mov.w	r0, #4294967295
 8007d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d40:	3501      	adds	r5, #1
 8007d42:	e7c6      	b.n	8007cd2 <_printf_common+0x3e>
 8007d44:	18e1      	adds	r1, r4, r3
 8007d46:	1c5a      	adds	r2, r3, #1
 8007d48:	2030      	movs	r0, #48	; 0x30
 8007d4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d4e:	4422      	add	r2, r4
 8007d50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d58:	3302      	adds	r3, #2
 8007d5a:	e7c7      	b.n	8007cec <_printf_common+0x58>
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	4622      	mov	r2, r4
 8007d60:	4649      	mov	r1, r9
 8007d62:	4638      	mov	r0, r7
 8007d64:	47c0      	blx	r8
 8007d66:	3001      	adds	r0, #1
 8007d68:	d0e6      	beq.n	8007d38 <_printf_common+0xa4>
 8007d6a:	3601      	adds	r6, #1
 8007d6c:	e7d9      	b.n	8007d22 <_printf_common+0x8e>
	...

08007d70 <_printf_i>:
 8007d70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d74:	460c      	mov	r4, r1
 8007d76:	4691      	mov	r9, r2
 8007d78:	7e27      	ldrb	r7, [r4, #24]
 8007d7a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007d7c:	2f78      	cmp	r7, #120	; 0x78
 8007d7e:	4680      	mov	r8, r0
 8007d80:	469a      	mov	sl, r3
 8007d82:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d86:	d807      	bhi.n	8007d98 <_printf_i+0x28>
 8007d88:	2f62      	cmp	r7, #98	; 0x62
 8007d8a:	d80a      	bhi.n	8007da2 <_printf_i+0x32>
 8007d8c:	2f00      	cmp	r7, #0
 8007d8e:	f000 80d8 	beq.w	8007f42 <_printf_i+0x1d2>
 8007d92:	2f58      	cmp	r7, #88	; 0x58
 8007d94:	f000 80a3 	beq.w	8007ede <_printf_i+0x16e>
 8007d98:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007d9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007da0:	e03a      	b.n	8007e18 <_printf_i+0xa8>
 8007da2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007da6:	2b15      	cmp	r3, #21
 8007da8:	d8f6      	bhi.n	8007d98 <_printf_i+0x28>
 8007daa:	a001      	add	r0, pc, #4	; (adr r0, 8007db0 <_printf_i+0x40>)
 8007dac:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007db0:	08007e09 	.word	0x08007e09
 8007db4:	08007e1d 	.word	0x08007e1d
 8007db8:	08007d99 	.word	0x08007d99
 8007dbc:	08007d99 	.word	0x08007d99
 8007dc0:	08007d99 	.word	0x08007d99
 8007dc4:	08007d99 	.word	0x08007d99
 8007dc8:	08007e1d 	.word	0x08007e1d
 8007dcc:	08007d99 	.word	0x08007d99
 8007dd0:	08007d99 	.word	0x08007d99
 8007dd4:	08007d99 	.word	0x08007d99
 8007dd8:	08007d99 	.word	0x08007d99
 8007ddc:	08007f29 	.word	0x08007f29
 8007de0:	08007e4d 	.word	0x08007e4d
 8007de4:	08007f0b 	.word	0x08007f0b
 8007de8:	08007d99 	.word	0x08007d99
 8007dec:	08007d99 	.word	0x08007d99
 8007df0:	08007f4b 	.word	0x08007f4b
 8007df4:	08007d99 	.word	0x08007d99
 8007df8:	08007e4d 	.word	0x08007e4d
 8007dfc:	08007d99 	.word	0x08007d99
 8007e00:	08007d99 	.word	0x08007d99
 8007e04:	08007f13 	.word	0x08007f13
 8007e08:	680b      	ldr	r3, [r1, #0]
 8007e0a:	1d1a      	adds	r2, r3, #4
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	600a      	str	r2, [r1, #0]
 8007e10:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007e14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e18:	2301      	movs	r3, #1
 8007e1a:	e0a3      	b.n	8007f64 <_printf_i+0x1f4>
 8007e1c:	6825      	ldr	r5, [r4, #0]
 8007e1e:	6808      	ldr	r0, [r1, #0]
 8007e20:	062e      	lsls	r6, r5, #24
 8007e22:	f100 0304 	add.w	r3, r0, #4
 8007e26:	d50a      	bpl.n	8007e3e <_printf_i+0xce>
 8007e28:	6805      	ldr	r5, [r0, #0]
 8007e2a:	600b      	str	r3, [r1, #0]
 8007e2c:	2d00      	cmp	r5, #0
 8007e2e:	da03      	bge.n	8007e38 <_printf_i+0xc8>
 8007e30:	232d      	movs	r3, #45	; 0x2d
 8007e32:	426d      	negs	r5, r5
 8007e34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e38:	485e      	ldr	r0, [pc, #376]	; (8007fb4 <_printf_i+0x244>)
 8007e3a:	230a      	movs	r3, #10
 8007e3c:	e019      	b.n	8007e72 <_printf_i+0x102>
 8007e3e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007e42:	6805      	ldr	r5, [r0, #0]
 8007e44:	600b      	str	r3, [r1, #0]
 8007e46:	bf18      	it	ne
 8007e48:	b22d      	sxthne	r5, r5
 8007e4a:	e7ef      	b.n	8007e2c <_printf_i+0xbc>
 8007e4c:	680b      	ldr	r3, [r1, #0]
 8007e4e:	6825      	ldr	r5, [r4, #0]
 8007e50:	1d18      	adds	r0, r3, #4
 8007e52:	6008      	str	r0, [r1, #0]
 8007e54:	0628      	lsls	r0, r5, #24
 8007e56:	d501      	bpl.n	8007e5c <_printf_i+0xec>
 8007e58:	681d      	ldr	r5, [r3, #0]
 8007e5a:	e002      	b.n	8007e62 <_printf_i+0xf2>
 8007e5c:	0669      	lsls	r1, r5, #25
 8007e5e:	d5fb      	bpl.n	8007e58 <_printf_i+0xe8>
 8007e60:	881d      	ldrh	r5, [r3, #0]
 8007e62:	4854      	ldr	r0, [pc, #336]	; (8007fb4 <_printf_i+0x244>)
 8007e64:	2f6f      	cmp	r7, #111	; 0x6f
 8007e66:	bf0c      	ite	eq
 8007e68:	2308      	moveq	r3, #8
 8007e6a:	230a      	movne	r3, #10
 8007e6c:	2100      	movs	r1, #0
 8007e6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007e72:	6866      	ldr	r6, [r4, #4]
 8007e74:	60a6      	str	r6, [r4, #8]
 8007e76:	2e00      	cmp	r6, #0
 8007e78:	bfa2      	ittt	ge
 8007e7a:	6821      	ldrge	r1, [r4, #0]
 8007e7c:	f021 0104 	bicge.w	r1, r1, #4
 8007e80:	6021      	strge	r1, [r4, #0]
 8007e82:	b90d      	cbnz	r5, 8007e88 <_printf_i+0x118>
 8007e84:	2e00      	cmp	r6, #0
 8007e86:	d04d      	beq.n	8007f24 <_printf_i+0x1b4>
 8007e88:	4616      	mov	r6, r2
 8007e8a:	fbb5 f1f3 	udiv	r1, r5, r3
 8007e8e:	fb03 5711 	mls	r7, r3, r1, r5
 8007e92:	5dc7      	ldrb	r7, [r0, r7]
 8007e94:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007e98:	462f      	mov	r7, r5
 8007e9a:	42bb      	cmp	r3, r7
 8007e9c:	460d      	mov	r5, r1
 8007e9e:	d9f4      	bls.n	8007e8a <_printf_i+0x11a>
 8007ea0:	2b08      	cmp	r3, #8
 8007ea2:	d10b      	bne.n	8007ebc <_printf_i+0x14c>
 8007ea4:	6823      	ldr	r3, [r4, #0]
 8007ea6:	07df      	lsls	r7, r3, #31
 8007ea8:	d508      	bpl.n	8007ebc <_printf_i+0x14c>
 8007eaa:	6923      	ldr	r3, [r4, #16]
 8007eac:	6861      	ldr	r1, [r4, #4]
 8007eae:	4299      	cmp	r1, r3
 8007eb0:	bfde      	ittt	le
 8007eb2:	2330      	movle	r3, #48	; 0x30
 8007eb4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007eb8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007ebc:	1b92      	subs	r2, r2, r6
 8007ebe:	6122      	str	r2, [r4, #16]
 8007ec0:	f8cd a000 	str.w	sl, [sp]
 8007ec4:	464b      	mov	r3, r9
 8007ec6:	aa03      	add	r2, sp, #12
 8007ec8:	4621      	mov	r1, r4
 8007eca:	4640      	mov	r0, r8
 8007ecc:	f7ff fee2 	bl	8007c94 <_printf_common>
 8007ed0:	3001      	adds	r0, #1
 8007ed2:	d14c      	bne.n	8007f6e <_printf_i+0x1fe>
 8007ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ed8:	b004      	add	sp, #16
 8007eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ede:	4835      	ldr	r0, [pc, #212]	; (8007fb4 <_printf_i+0x244>)
 8007ee0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007ee4:	6823      	ldr	r3, [r4, #0]
 8007ee6:	680e      	ldr	r6, [r1, #0]
 8007ee8:	061f      	lsls	r7, r3, #24
 8007eea:	f856 5b04 	ldr.w	r5, [r6], #4
 8007eee:	600e      	str	r6, [r1, #0]
 8007ef0:	d514      	bpl.n	8007f1c <_printf_i+0x1ac>
 8007ef2:	07d9      	lsls	r1, r3, #31
 8007ef4:	bf44      	itt	mi
 8007ef6:	f043 0320 	orrmi.w	r3, r3, #32
 8007efa:	6023      	strmi	r3, [r4, #0]
 8007efc:	b91d      	cbnz	r5, 8007f06 <_printf_i+0x196>
 8007efe:	6823      	ldr	r3, [r4, #0]
 8007f00:	f023 0320 	bic.w	r3, r3, #32
 8007f04:	6023      	str	r3, [r4, #0]
 8007f06:	2310      	movs	r3, #16
 8007f08:	e7b0      	b.n	8007e6c <_printf_i+0xfc>
 8007f0a:	6823      	ldr	r3, [r4, #0]
 8007f0c:	f043 0320 	orr.w	r3, r3, #32
 8007f10:	6023      	str	r3, [r4, #0]
 8007f12:	2378      	movs	r3, #120	; 0x78
 8007f14:	4828      	ldr	r0, [pc, #160]	; (8007fb8 <_printf_i+0x248>)
 8007f16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007f1a:	e7e3      	b.n	8007ee4 <_printf_i+0x174>
 8007f1c:	065e      	lsls	r6, r3, #25
 8007f1e:	bf48      	it	mi
 8007f20:	b2ad      	uxthmi	r5, r5
 8007f22:	e7e6      	b.n	8007ef2 <_printf_i+0x182>
 8007f24:	4616      	mov	r6, r2
 8007f26:	e7bb      	b.n	8007ea0 <_printf_i+0x130>
 8007f28:	680b      	ldr	r3, [r1, #0]
 8007f2a:	6826      	ldr	r6, [r4, #0]
 8007f2c:	6960      	ldr	r0, [r4, #20]
 8007f2e:	1d1d      	adds	r5, r3, #4
 8007f30:	600d      	str	r5, [r1, #0]
 8007f32:	0635      	lsls	r5, r6, #24
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	d501      	bpl.n	8007f3c <_printf_i+0x1cc>
 8007f38:	6018      	str	r0, [r3, #0]
 8007f3a:	e002      	b.n	8007f42 <_printf_i+0x1d2>
 8007f3c:	0671      	lsls	r1, r6, #25
 8007f3e:	d5fb      	bpl.n	8007f38 <_printf_i+0x1c8>
 8007f40:	8018      	strh	r0, [r3, #0]
 8007f42:	2300      	movs	r3, #0
 8007f44:	6123      	str	r3, [r4, #16]
 8007f46:	4616      	mov	r6, r2
 8007f48:	e7ba      	b.n	8007ec0 <_printf_i+0x150>
 8007f4a:	680b      	ldr	r3, [r1, #0]
 8007f4c:	1d1a      	adds	r2, r3, #4
 8007f4e:	600a      	str	r2, [r1, #0]
 8007f50:	681e      	ldr	r6, [r3, #0]
 8007f52:	6862      	ldr	r2, [r4, #4]
 8007f54:	2100      	movs	r1, #0
 8007f56:	4630      	mov	r0, r6
 8007f58:	f7f8 f93a 	bl	80001d0 <memchr>
 8007f5c:	b108      	cbz	r0, 8007f62 <_printf_i+0x1f2>
 8007f5e:	1b80      	subs	r0, r0, r6
 8007f60:	6060      	str	r0, [r4, #4]
 8007f62:	6863      	ldr	r3, [r4, #4]
 8007f64:	6123      	str	r3, [r4, #16]
 8007f66:	2300      	movs	r3, #0
 8007f68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f6c:	e7a8      	b.n	8007ec0 <_printf_i+0x150>
 8007f6e:	6923      	ldr	r3, [r4, #16]
 8007f70:	4632      	mov	r2, r6
 8007f72:	4649      	mov	r1, r9
 8007f74:	4640      	mov	r0, r8
 8007f76:	47d0      	blx	sl
 8007f78:	3001      	adds	r0, #1
 8007f7a:	d0ab      	beq.n	8007ed4 <_printf_i+0x164>
 8007f7c:	6823      	ldr	r3, [r4, #0]
 8007f7e:	079b      	lsls	r3, r3, #30
 8007f80:	d413      	bmi.n	8007faa <_printf_i+0x23a>
 8007f82:	68e0      	ldr	r0, [r4, #12]
 8007f84:	9b03      	ldr	r3, [sp, #12]
 8007f86:	4298      	cmp	r0, r3
 8007f88:	bfb8      	it	lt
 8007f8a:	4618      	movlt	r0, r3
 8007f8c:	e7a4      	b.n	8007ed8 <_printf_i+0x168>
 8007f8e:	2301      	movs	r3, #1
 8007f90:	4632      	mov	r2, r6
 8007f92:	4649      	mov	r1, r9
 8007f94:	4640      	mov	r0, r8
 8007f96:	47d0      	blx	sl
 8007f98:	3001      	adds	r0, #1
 8007f9a:	d09b      	beq.n	8007ed4 <_printf_i+0x164>
 8007f9c:	3501      	adds	r5, #1
 8007f9e:	68e3      	ldr	r3, [r4, #12]
 8007fa0:	9903      	ldr	r1, [sp, #12]
 8007fa2:	1a5b      	subs	r3, r3, r1
 8007fa4:	42ab      	cmp	r3, r5
 8007fa6:	dcf2      	bgt.n	8007f8e <_printf_i+0x21e>
 8007fa8:	e7eb      	b.n	8007f82 <_printf_i+0x212>
 8007faa:	2500      	movs	r5, #0
 8007fac:	f104 0619 	add.w	r6, r4, #25
 8007fb0:	e7f5      	b.n	8007f9e <_printf_i+0x22e>
 8007fb2:	bf00      	nop
 8007fb4:	08008699 	.word	0x08008699
 8007fb8:	080086aa 	.word	0x080086aa

08007fbc <_sbrk_r>:
 8007fbc:	b538      	push	{r3, r4, r5, lr}
 8007fbe:	4d06      	ldr	r5, [pc, #24]	; (8007fd8 <_sbrk_r+0x1c>)
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	4604      	mov	r4, r0
 8007fc4:	4608      	mov	r0, r1
 8007fc6:	602b      	str	r3, [r5, #0]
 8007fc8:	f7f9 fc84 	bl	80018d4 <_sbrk>
 8007fcc:	1c43      	adds	r3, r0, #1
 8007fce:	d102      	bne.n	8007fd6 <_sbrk_r+0x1a>
 8007fd0:	682b      	ldr	r3, [r5, #0]
 8007fd2:	b103      	cbz	r3, 8007fd6 <_sbrk_r+0x1a>
 8007fd4:	6023      	str	r3, [r4, #0]
 8007fd6:	bd38      	pop	{r3, r4, r5, pc}
 8007fd8:	20000900 	.word	0x20000900

08007fdc <__sread>:
 8007fdc:	b510      	push	{r4, lr}
 8007fde:	460c      	mov	r4, r1
 8007fe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fe4:	f000 fab4 	bl	8008550 <_read_r>
 8007fe8:	2800      	cmp	r0, #0
 8007fea:	bfab      	itete	ge
 8007fec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007fee:	89a3      	ldrhlt	r3, [r4, #12]
 8007ff0:	181b      	addge	r3, r3, r0
 8007ff2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007ff6:	bfac      	ite	ge
 8007ff8:	6563      	strge	r3, [r4, #84]	; 0x54
 8007ffa:	81a3      	strhlt	r3, [r4, #12]
 8007ffc:	bd10      	pop	{r4, pc}

08007ffe <__swrite>:
 8007ffe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008002:	461f      	mov	r7, r3
 8008004:	898b      	ldrh	r3, [r1, #12]
 8008006:	05db      	lsls	r3, r3, #23
 8008008:	4605      	mov	r5, r0
 800800a:	460c      	mov	r4, r1
 800800c:	4616      	mov	r6, r2
 800800e:	d505      	bpl.n	800801c <__swrite+0x1e>
 8008010:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008014:	2302      	movs	r3, #2
 8008016:	2200      	movs	r2, #0
 8008018:	f000 f9c8 	bl	80083ac <_lseek_r>
 800801c:	89a3      	ldrh	r3, [r4, #12]
 800801e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008022:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008026:	81a3      	strh	r3, [r4, #12]
 8008028:	4632      	mov	r2, r6
 800802a:	463b      	mov	r3, r7
 800802c:	4628      	mov	r0, r5
 800802e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008032:	f000 b869 	b.w	8008108 <_write_r>

08008036 <__sseek>:
 8008036:	b510      	push	{r4, lr}
 8008038:	460c      	mov	r4, r1
 800803a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800803e:	f000 f9b5 	bl	80083ac <_lseek_r>
 8008042:	1c43      	adds	r3, r0, #1
 8008044:	89a3      	ldrh	r3, [r4, #12]
 8008046:	bf15      	itete	ne
 8008048:	6560      	strne	r0, [r4, #84]	; 0x54
 800804a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800804e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008052:	81a3      	strheq	r3, [r4, #12]
 8008054:	bf18      	it	ne
 8008056:	81a3      	strhne	r3, [r4, #12]
 8008058:	bd10      	pop	{r4, pc}

0800805a <__sclose>:
 800805a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800805e:	f000 b8d3 	b.w	8008208 <_close_r>
	...

08008064 <__swbuf_r>:
 8008064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008066:	460e      	mov	r6, r1
 8008068:	4614      	mov	r4, r2
 800806a:	4605      	mov	r5, r0
 800806c:	b118      	cbz	r0, 8008076 <__swbuf_r+0x12>
 800806e:	6983      	ldr	r3, [r0, #24]
 8008070:	b90b      	cbnz	r3, 8008076 <__swbuf_r+0x12>
 8008072:	f7ff fbbb 	bl	80077ec <__sinit>
 8008076:	4b21      	ldr	r3, [pc, #132]	; (80080fc <__swbuf_r+0x98>)
 8008078:	429c      	cmp	r4, r3
 800807a:	d12b      	bne.n	80080d4 <__swbuf_r+0x70>
 800807c:	686c      	ldr	r4, [r5, #4]
 800807e:	69a3      	ldr	r3, [r4, #24]
 8008080:	60a3      	str	r3, [r4, #8]
 8008082:	89a3      	ldrh	r3, [r4, #12]
 8008084:	071a      	lsls	r2, r3, #28
 8008086:	d52f      	bpl.n	80080e8 <__swbuf_r+0x84>
 8008088:	6923      	ldr	r3, [r4, #16]
 800808a:	b36b      	cbz	r3, 80080e8 <__swbuf_r+0x84>
 800808c:	6923      	ldr	r3, [r4, #16]
 800808e:	6820      	ldr	r0, [r4, #0]
 8008090:	1ac0      	subs	r0, r0, r3
 8008092:	6963      	ldr	r3, [r4, #20]
 8008094:	b2f6      	uxtb	r6, r6
 8008096:	4283      	cmp	r3, r0
 8008098:	4637      	mov	r7, r6
 800809a:	dc04      	bgt.n	80080a6 <__swbuf_r+0x42>
 800809c:	4621      	mov	r1, r4
 800809e:	4628      	mov	r0, r5
 80080a0:	f000 f948 	bl	8008334 <_fflush_r>
 80080a4:	bb30      	cbnz	r0, 80080f4 <__swbuf_r+0x90>
 80080a6:	68a3      	ldr	r3, [r4, #8]
 80080a8:	3b01      	subs	r3, #1
 80080aa:	60a3      	str	r3, [r4, #8]
 80080ac:	6823      	ldr	r3, [r4, #0]
 80080ae:	1c5a      	adds	r2, r3, #1
 80080b0:	6022      	str	r2, [r4, #0]
 80080b2:	701e      	strb	r6, [r3, #0]
 80080b4:	6963      	ldr	r3, [r4, #20]
 80080b6:	3001      	adds	r0, #1
 80080b8:	4283      	cmp	r3, r0
 80080ba:	d004      	beq.n	80080c6 <__swbuf_r+0x62>
 80080bc:	89a3      	ldrh	r3, [r4, #12]
 80080be:	07db      	lsls	r3, r3, #31
 80080c0:	d506      	bpl.n	80080d0 <__swbuf_r+0x6c>
 80080c2:	2e0a      	cmp	r6, #10
 80080c4:	d104      	bne.n	80080d0 <__swbuf_r+0x6c>
 80080c6:	4621      	mov	r1, r4
 80080c8:	4628      	mov	r0, r5
 80080ca:	f000 f933 	bl	8008334 <_fflush_r>
 80080ce:	b988      	cbnz	r0, 80080f4 <__swbuf_r+0x90>
 80080d0:	4638      	mov	r0, r7
 80080d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080d4:	4b0a      	ldr	r3, [pc, #40]	; (8008100 <__swbuf_r+0x9c>)
 80080d6:	429c      	cmp	r4, r3
 80080d8:	d101      	bne.n	80080de <__swbuf_r+0x7a>
 80080da:	68ac      	ldr	r4, [r5, #8]
 80080dc:	e7cf      	b.n	800807e <__swbuf_r+0x1a>
 80080de:	4b09      	ldr	r3, [pc, #36]	; (8008104 <__swbuf_r+0xa0>)
 80080e0:	429c      	cmp	r4, r3
 80080e2:	bf08      	it	eq
 80080e4:	68ec      	ldreq	r4, [r5, #12]
 80080e6:	e7ca      	b.n	800807e <__swbuf_r+0x1a>
 80080e8:	4621      	mov	r1, r4
 80080ea:	4628      	mov	r0, r5
 80080ec:	f000 f81e 	bl	800812c <__swsetup_r>
 80080f0:	2800      	cmp	r0, #0
 80080f2:	d0cb      	beq.n	800808c <__swbuf_r+0x28>
 80080f4:	f04f 37ff 	mov.w	r7, #4294967295
 80080f8:	e7ea      	b.n	80080d0 <__swbuf_r+0x6c>
 80080fa:	bf00      	nop
 80080fc:	08008648 	.word	0x08008648
 8008100:	08008668 	.word	0x08008668
 8008104:	08008628 	.word	0x08008628

08008108 <_write_r>:
 8008108:	b538      	push	{r3, r4, r5, lr}
 800810a:	4d07      	ldr	r5, [pc, #28]	; (8008128 <_write_r+0x20>)
 800810c:	4604      	mov	r4, r0
 800810e:	4608      	mov	r0, r1
 8008110:	4611      	mov	r1, r2
 8008112:	2200      	movs	r2, #0
 8008114:	602a      	str	r2, [r5, #0]
 8008116:	461a      	mov	r2, r3
 8008118:	f7f9 fb8b 	bl	8001832 <_write>
 800811c:	1c43      	adds	r3, r0, #1
 800811e:	d102      	bne.n	8008126 <_write_r+0x1e>
 8008120:	682b      	ldr	r3, [r5, #0]
 8008122:	b103      	cbz	r3, 8008126 <_write_r+0x1e>
 8008124:	6023      	str	r3, [r4, #0]
 8008126:	bd38      	pop	{r3, r4, r5, pc}
 8008128:	20000900 	.word	0x20000900

0800812c <__swsetup_r>:
 800812c:	4b32      	ldr	r3, [pc, #200]	; (80081f8 <__swsetup_r+0xcc>)
 800812e:	b570      	push	{r4, r5, r6, lr}
 8008130:	681d      	ldr	r5, [r3, #0]
 8008132:	4606      	mov	r6, r0
 8008134:	460c      	mov	r4, r1
 8008136:	b125      	cbz	r5, 8008142 <__swsetup_r+0x16>
 8008138:	69ab      	ldr	r3, [r5, #24]
 800813a:	b913      	cbnz	r3, 8008142 <__swsetup_r+0x16>
 800813c:	4628      	mov	r0, r5
 800813e:	f7ff fb55 	bl	80077ec <__sinit>
 8008142:	4b2e      	ldr	r3, [pc, #184]	; (80081fc <__swsetup_r+0xd0>)
 8008144:	429c      	cmp	r4, r3
 8008146:	d10f      	bne.n	8008168 <__swsetup_r+0x3c>
 8008148:	686c      	ldr	r4, [r5, #4]
 800814a:	89a3      	ldrh	r3, [r4, #12]
 800814c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008150:	0719      	lsls	r1, r3, #28
 8008152:	d42c      	bmi.n	80081ae <__swsetup_r+0x82>
 8008154:	06dd      	lsls	r5, r3, #27
 8008156:	d411      	bmi.n	800817c <__swsetup_r+0x50>
 8008158:	2309      	movs	r3, #9
 800815a:	6033      	str	r3, [r6, #0]
 800815c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008160:	81a3      	strh	r3, [r4, #12]
 8008162:	f04f 30ff 	mov.w	r0, #4294967295
 8008166:	e03e      	b.n	80081e6 <__swsetup_r+0xba>
 8008168:	4b25      	ldr	r3, [pc, #148]	; (8008200 <__swsetup_r+0xd4>)
 800816a:	429c      	cmp	r4, r3
 800816c:	d101      	bne.n	8008172 <__swsetup_r+0x46>
 800816e:	68ac      	ldr	r4, [r5, #8]
 8008170:	e7eb      	b.n	800814a <__swsetup_r+0x1e>
 8008172:	4b24      	ldr	r3, [pc, #144]	; (8008204 <__swsetup_r+0xd8>)
 8008174:	429c      	cmp	r4, r3
 8008176:	bf08      	it	eq
 8008178:	68ec      	ldreq	r4, [r5, #12]
 800817a:	e7e6      	b.n	800814a <__swsetup_r+0x1e>
 800817c:	0758      	lsls	r0, r3, #29
 800817e:	d512      	bpl.n	80081a6 <__swsetup_r+0x7a>
 8008180:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008182:	b141      	cbz	r1, 8008196 <__swsetup_r+0x6a>
 8008184:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008188:	4299      	cmp	r1, r3
 800818a:	d002      	beq.n	8008192 <__swsetup_r+0x66>
 800818c:	4630      	mov	r0, r6
 800818e:	f000 f98f 	bl	80084b0 <_free_r>
 8008192:	2300      	movs	r3, #0
 8008194:	6363      	str	r3, [r4, #52]	; 0x34
 8008196:	89a3      	ldrh	r3, [r4, #12]
 8008198:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800819c:	81a3      	strh	r3, [r4, #12]
 800819e:	2300      	movs	r3, #0
 80081a0:	6063      	str	r3, [r4, #4]
 80081a2:	6923      	ldr	r3, [r4, #16]
 80081a4:	6023      	str	r3, [r4, #0]
 80081a6:	89a3      	ldrh	r3, [r4, #12]
 80081a8:	f043 0308 	orr.w	r3, r3, #8
 80081ac:	81a3      	strh	r3, [r4, #12]
 80081ae:	6923      	ldr	r3, [r4, #16]
 80081b0:	b94b      	cbnz	r3, 80081c6 <__swsetup_r+0x9a>
 80081b2:	89a3      	ldrh	r3, [r4, #12]
 80081b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80081b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081bc:	d003      	beq.n	80081c6 <__swsetup_r+0x9a>
 80081be:	4621      	mov	r1, r4
 80081c0:	4630      	mov	r0, r6
 80081c2:	f000 f929 	bl	8008418 <__smakebuf_r>
 80081c6:	89a0      	ldrh	r0, [r4, #12]
 80081c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80081cc:	f010 0301 	ands.w	r3, r0, #1
 80081d0:	d00a      	beq.n	80081e8 <__swsetup_r+0xbc>
 80081d2:	2300      	movs	r3, #0
 80081d4:	60a3      	str	r3, [r4, #8]
 80081d6:	6963      	ldr	r3, [r4, #20]
 80081d8:	425b      	negs	r3, r3
 80081da:	61a3      	str	r3, [r4, #24]
 80081dc:	6923      	ldr	r3, [r4, #16]
 80081de:	b943      	cbnz	r3, 80081f2 <__swsetup_r+0xc6>
 80081e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80081e4:	d1ba      	bne.n	800815c <__swsetup_r+0x30>
 80081e6:	bd70      	pop	{r4, r5, r6, pc}
 80081e8:	0781      	lsls	r1, r0, #30
 80081ea:	bf58      	it	pl
 80081ec:	6963      	ldrpl	r3, [r4, #20]
 80081ee:	60a3      	str	r3, [r4, #8]
 80081f0:	e7f4      	b.n	80081dc <__swsetup_r+0xb0>
 80081f2:	2000      	movs	r0, #0
 80081f4:	e7f7      	b.n	80081e6 <__swsetup_r+0xba>
 80081f6:	bf00      	nop
 80081f8:	2000008c 	.word	0x2000008c
 80081fc:	08008648 	.word	0x08008648
 8008200:	08008668 	.word	0x08008668
 8008204:	08008628 	.word	0x08008628

08008208 <_close_r>:
 8008208:	b538      	push	{r3, r4, r5, lr}
 800820a:	4d06      	ldr	r5, [pc, #24]	; (8008224 <_close_r+0x1c>)
 800820c:	2300      	movs	r3, #0
 800820e:	4604      	mov	r4, r0
 8008210:	4608      	mov	r0, r1
 8008212:	602b      	str	r3, [r5, #0]
 8008214:	f7f9 fb29 	bl	800186a <_close>
 8008218:	1c43      	adds	r3, r0, #1
 800821a:	d102      	bne.n	8008222 <_close_r+0x1a>
 800821c:	682b      	ldr	r3, [r5, #0]
 800821e:	b103      	cbz	r3, 8008222 <_close_r+0x1a>
 8008220:	6023      	str	r3, [r4, #0]
 8008222:	bd38      	pop	{r3, r4, r5, pc}
 8008224:	20000900 	.word	0x20000900

08008228 <__sflush_r>:
 8008228:	898a      	ldrh	r2, [r1, #12]
 800822a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800822e:	4605      	mov	r5, r0
 8008230:	0710      	lsls	r0, r2, #28
 8008232:	460c      	mov	r4, r1
 8008234:	d458      	bmi.n	80082e8 <__sflush_r+0xc0>
 8008236:	684b      	ldr	r3, [r1, #4]
 8008238:	2b00      	cmp	r3, #0
 800823a:	dc05      	bgt.n	8008248 <__sflush_r+0x20>
 800823c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800823e:	2b00      	cmp	r3, #0
 8008240:	dc02      	bgt.n	8008248 <__sflush_r+0x20>
 8008242:	2000      	movs	r0, #0
 8008244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008248:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800824a:	2e00      	cmp	r6, #0
 800824c:	d0f9      	beq.n	8008242 <__sflush_r+0x1a>
 800824e:	2300      	movs	r3, #0
 8008250:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008254:	682f      	ldr	r7, [r5, #0]
 8008256:	602b      	str	r3, [r5, #0]
 8008258:	d032      	beq.n	80082c0 <__sflush_r+0x98>
 800825a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800825c:	89a3      	ldrh	r3, [r4, #12]
 800825e:	075a      	lsls	r2, r3, #29
 8008260:	d505      	bpl.n	800826e <__sflush_r+0x46>
 8008262:	6863      	ldr	r3, [r4, #4]
 8008264:	1ac0      	subs	r0, r0, r3
 8008266:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008268:	b10b      	cbz	r3, 800826e <__sflush_r+0x46>
 800826a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800826c:	1ac0      	subs	r0, r0, r3
 800826e:	2300      	movs	r3, #0
 8008270:	4602      	mov	r2, r0
 8008272:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008274:	6a21      	ldr	r1, [r4, #32]
 8008276:	4628      	mov	r0, r5
 8008278:	47b0      	blx	r6
 800827a:	1c43      	adds	r3, r0, #1
 800827c:	89a3      	ldrh	r3, [r4, #12]
 800827e:	d106      	bne.n	800828e <__sflush_r+0x66>
 8008280:	6829      	ldr	r1, [r5, #0]
 8008282:	291d      	cmp	r1, #29
 8008284:	d82c      	bhi.n	80082e0 <__sflush_r+0xb8>
 8008286:	4a2a      	ldr	r2, [pc, #168]	; (8008330 <__sflush_r+0x108>)
 8008288:	40ca      	lsrs	r2, r1
 800828a:	07d6      	lsls	r6, r2, #31
 800828c:	d528      	bpl.n	80082e0 <__sflush_r+0xb8>
 800828e:	2200      	movs	r2, #0
 8008290:	6062      	str	r2, [r4, #4]
 8008292:	04d9      	lsls	r1, r3, #19
 8008294:	6922      	ldr	r2, [r4, #16]
 8008296:	6022      	str	r2, [r4, #0]
 8008298:	d504      	bpl.n	80082a4 <__sflush_r+0x7c>
 800829a:	1c42      	adds	r2, r0, #1
 800829c:	d101      	bne.n	80082a2 <__sflush_r+0x7a>
 800829e:	682b      	ldr	r3, [r5, #0]
 80082a0:	b903      	cbnz	r3, 80082a4 <__sflush_r+0x7c>
 80082a2:	6560      	str	r0, [r4, #84]	; 0x54
 80082a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80082a6:	602f      	str	r7, [r5, #0]
 80082a8:	2900      	cmp	r1, #0
 80082aa:	d0ca      	beq.n	8008242 <__sflush_r+0x1a>
 80082ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80082b0:	4299      	cmp	r1, r3
 80082b2:	d002      	beq.n	80082ba <__sflush_r+0x92>
 80082b4:	4628      	mov	r0, r5
 80082b6:	f000 f8fb 	bl	80084b0 <_free_r>
 80082ba:	2000      	movs	r0, #0
 80082bc:	6360      	str	r0, [r4, #52]	; 0x34
 80082be:	e7c1      	b.n	8008244 <__sflush_r+0x1c>
 80082c0:	6a21      	ldr	r1, [r4, #32]
 80082c2:	2301      	movs	r3, #1
 80082c4:	4628      	mov	r0, r5
 80082c6:	47b0      	blx	r6
 80082c8:	1c41      	adds	r1, r0, #1
 80082ca:	d1c7      	bne.n	800825c <__sflush_r+0x34>
 80082cc:	682b      	ldr	r3, [r5, #0]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d0c4      	beq.n	800825c <__sflush_r+0x34>
 80082d2:	2b1d      	cmp	r3, #29
 80082d4:	d001      	beq.n	80082da <__sflush_r+0xb2>
 80082d6:	2b16      	cmp	r3, #22
 80082d8:	d101      	bne.n	80082de <__sflush_r+0xb6>
 80082da:	602f      	str	r7, [r5, #0]
 80082dc:	e7b1      	b.n	8008242 <__sflush_r+0x1a>
 80082de:	89a3      	ldrh	r3, [r4, #12]
 80082e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082e4:	81a3      	strh	r3, [r4, #12]
 80082e6:	e7ad      	b.n	8008244 <__sflush_r+0x1c>
 80082e8:	690f      	ldr	r7, [r1, #16]
 80082ea:	2f00      	cmp	r7, #0
 80082ec:	d0a9      	beq.n	8008242 <__sflush_r+0x1a>
 80082ee:	0793      	lsls	r3, r2, #30
 80082f0:	680e      	ldr	r6, [r1, #0]
 80082f2:	bf08      	it	eq
 80082f4:	694b      	ldreq	r3, [r1, #20]
 80082f6:	600f      	str	r7, [r1, #0]
 80082f8:	bf18      	it	ne
 80082fa:	2300      	movne	r3, #0
 80082fc:	eba6 0807 	sub.w	r8, r6, r7
 8008300:	608b      	str	r3, [r1, #8]
 8008302:	f1b8 0f00 	cmp.w	r8, #0
 8008306:	dd9c      	ble.n	8008242 <__sflush_r+0x1a>
 8008308:	6a21      	ldr	r1, [r4, #32]
 800830a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800830c:	4643      	mov	r3, r8
 800830e:	463a      	mov	r2, r7
 8008310:	4628      	mov	r0, r5
 8008312:	47b0      	blx	r6
 8008314:	2800      	cmp	r0, #0
 8008316:	dc06      	bgt.n	8008326 <__sflush_r+0xfe>
 8008318:	89a3      	ldrh	r3, [r4, #12]
 800831a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800831e:	81a3      	strh	r3, [r4, #12]
 8008320:	f04f 30ff 	mov.w	r0, #4294967295
 8008324:	e78e      	b.n	8008244 <__sflush_r+0x1c>
 8008326:	4407      	add	r7, r0
 8008328:	eba8 0800 	sub.w	r8, r8, r0
 800832c:	e7e9      	b.n	8008302 <__sflush_r+0xda>
 800832e:	bf00      	nop
 8008330:	20400001 	.word	0x20400001

08008334 <_fflush_r>:
 8008334:	b538      	push	{r3, r4, r5, lr}
 8008336:	690b      	ldr	r3, [r1, #16]
 8008338:	4605      	mov	r5, r0
 800833a:	460c      	mov	r4, r1
 800833c:	b913      	cbnz	r3, 8008344 <_fflush_r+0x10>
 800833e:	2500      	movs	r5, #0
 8008340:	4628      	mov	r0, r5
 8008342:	bd38      	pop	{r3, r4, r5, pc}
 8008344:	b118      	cbz	r0, 800834e <_fflush_r+0x1a>
 8008346:	6983      	ldr	r3, [r0, #24]
 8008348:	b90b      	cbnz	r3, 800834e <_fflush_r+0x1a>
 800834a:	f7ff fa4f 	bl	80077ec <__sinit>
 800834e:	4b14      	ldr	r3, [pc, #80]	; (80083a0 <_fflush_r+0x6c>)
 8008350:	429c      	cmp	r4, r3
 8008352:	d11b      	bne.n	800838c <_fflush_r+0x58>
 8008354:	686c      	ldr	r4, [r5, #4]
 8008356:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d0ef      	beq.n	800833e <_fflush_r+0xa>
 800835e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008360:	07d0      	lsls	r0, r2, #31
 8008362:	d404      	bmi.n	800836e <_fflush_r+0x3a>
 8008364:	0599      	lsls	r1, r3, #22
 8008366:	d402      	bmi.n	800836e <_fflush_r+0x3a>
 8008368:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800836a:	f7ff fadd 	bl	8007928 <__retarget_lock_acquire_recursive>
 800836e:	4628      	mov	r0, r5
 8008370:	4621      	mov	r1, r4
 8008372:	f7ff ff59 	bl	8008228 <__sflush_r>
 8008376:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008378:	07da      	lsls	r2, r3, #31
 800837a:	4605      	mov	r5, r0
 800837c:	d4e0      	bmi.n	8008340 <_fflush_r+0xc>
 800837e:	89a3      	ldrh	r3, [r4, #12]
 8008380:	059b      	lsls	r3, r3, #22
 8008382:	d4dd      	bmi.n	8008340 <_fflush_r+0xc>
 8008384:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008386:	f7ff fad0 	bl	800792a <__retarget_lock_release_recursive>
 800838a:	e7d9      	b.n	8008340 <_fflush_r+0xc>
 800838c:	4b05      	ldr	r3, [pc, #20]	; (80083a4 <_fflush_r+0x70>)
 800838e:	429c      	cmp	r4, r3
 8008390:	d101      	bne.n	8008396 <_fflush_r+0x62>
 8008392:	68ac      	ldr	r4, [r5, #8]
 8008394:	e7df      	b.n	8008356 <_fflush_r+0x22>
 8008396:	4b04      	ldr	r3, [pc, #16]	; (80083a8 <_fflush_r+0x74>)
 8008398:	429c      	cmp	r4, r3
 800839a:	bf08      	it	eq
 800839c:	68ec      	ldreq	r4, [r5, #12]
 800839e:	e7da      	b.n	8008356 <_fflush_r+0x22>
 80083a0:	08008648 	.word	0x08008648
 80083a4:	08008668 	.word	0x08008668
 80083a8:	08008628 	.word	0x08008628

080083ac <_lseek_r>:
 80083ac:	b538      	push	{r3, r4, r5, lr}
 80083ae:	4d07      	ldr	r5, [pc, #28]	; (80083cc <_lseek_r+0x20>)
 80083b0:	4604      	mov	r4, r0
 80083b2:	4608      	mov	r0, r1
 80083b4:	4611      	mov	r1, r2
 80083b6:	2200      	movs	r2, #0
 80083b8:	602a      	str	r2, [r5, #0]
 80083ba:	461a      	mov	r2, r3
 80083bc:	f7f9 fa7c 	bl	80018b8 <_lseek>
 80083c0:	1c43      	adds	r3, r0, #1
 80083c2:	d102      	bne.n	80083ca <_lseek_r+0x1e>
 80083c4:	682b      	ldr	r3, [r5, #0]
 80083c6:	b103      	cbz	r3, 80083ca <_lseek_r+0x1e>
 80083c8:	6023      	str	r3, [r4, #0]
 80083ca:	bd38      	pop	{r3, r4, r5, pc}
 80083cc:	20000900 	.word	0x20000900

080083d0 <__swhatbuf_r>:
 80083d0:	b570      	push	{r4, r5, r6, lr}
 80083d2:	460e      	mov	r6, r1
 80083d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083d8:	2900      	cmp	r1, #0
 80083da:	b096      	sub	sp, #88	; 0x58
 80083dc:	4614      	mov	r4, r2
 80083de:	461d      	mov	r5, r3
 80083e0:	da07      	bge.n	80083f2 <__swhatbuf_r+0x22>
 80083e2:	2300      	movs	r3, #0
 80083e4:	602b      	str	r3, [r5, #0]
 80083e6:	89b3      	ldrh	r3, [r6, #12]
 80083e8:	061a      	lsls	r2, r3, #24
 80083ea:	d410      	bmi.n	800840e <__swhatbuf_r+0x3e>
 80083ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083f0:	e00e      	b.n	8008410 <__swhatbuf_r+0x40>
 80083f2:	466a      	mov	r2, sp
 80083f4:	f000 f8be 	bl	8008574 <_fstat_r>
 80083f8:	2800      	cmp	r0, #0
 80083fa:	dbf2      	blt.n	80083e2 <__swhatbuf_r+0x12>
 80083fc:	9a01      	ldr	r2, [sp, #4]
 80083fe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008402:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008406:	425a      	negs	r2, r3
 8008408:	415a      	adcs	r2, r3
 800840a:	602a      	str	r2, [r5, #0]
 800840c:	e7ee      	b.n	80083ec <__swhatbuf_r+0x1c>
 800840e:	2340      	movs	r3, #64	; 0x40
 8008410:	2000      	movs	r0, #0
 8008412:	6023      	str	r3, [r4, #0]
 8008414:	b016      	add	sp, #88	; 0x58
 8008416:	bd70      	pop	{r4, r5, r6, pc}

08008418 <__smakebuf_r>:
 8008418:	898b      	ldrh	r3, [r1, #12]
 800841a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800841c:	079d      	lsls	r5, r3, #30
 800841e:	4606      	mov	r6, r0
 8008420:	460c      	mov	r4, r1
 8008422:	d507      	bpl.n	8008434 <__smakebuf_r+0x1c>
 8008424:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008428:	6023      	str	r3, [r4, #0]
 800842a:	6123      	str	r3, [r4, #16]
 800842c:	2301      	movs	r3, #1
 800842e:	6163      	str	r3, [r4, #20]
 8008430:	b002      	add	sp, #8
 8008432:	bd70      	pop	{r4, r5, r6, pc}
 8008434:	ab01      	add	r3, sp, #4
 8008436:	466a      	mov	r2, sp
 8008438:	f7ff ffca 	bl	80083d0 <__swhatbuf_r>
 800843c:	9900      	ldr	r1, [sp, #0]
 800843e:	4605      	mov	r5, r0
 8008440:	4630      	mov	r0, r6
 8008442:	f7ff fa73 	bl	800792c <_malloc_r>
 8008446:	b948      	cbnz	r0, 800845c <__smakebuf_r+0x44>
 8008448:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800844c:	059a      	lsls	r2, r3, #22
 800844e:	d4ef      	bmi.n	8008430 <__smakebuf_r+0x18>
 8008450:	f023 0303 	bic.w	r3, r3, #3
 8008454:	f043 0302 	orr.w	r3, r3, #2
 8008458:	81a3      	strh	r3, [r4, #12]
 800845a:	e7e3      	b.n	8008424 <__smakebuf_r+0xc>
 800845c:	4b0d      	ldr	r3, [pc, #52]	; (8008494 <__smakebuf_r+0x7c>)
 800845e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008460:	89a3      	ldrh	r3, [r4, #12]
 8008462:	6020      	str	r0, [r4, #0]
 8008464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008468:	81a3      	strh	r3, [r4, #12]
 800846a:	9b00      	ldr	r3, [sp, #0]
 800846c:	6163      	str	r3, [r4, #20]
 800846e:	9b01      	ldr	r3, [sp, #4]
 8008470:	6120      	str	r0, [r4, #16]
 8008472:	b15b      	cbz	r3, 800848c <__smakebuf_r+0x74>
 8008474:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008478:	4630      	mov	r0, r6
 800847a:	f000 f88d 	bl	8008598 <_isatty_r>
 800847e:	b128      	cbz	r0, 800848c <__smakebuf_r+0x74>
 8008480:	89a3      	ldrh	r3, [r4, #12]
 8008482:	f023 0303 	bic.w	r3, r3, #3
 8008486:	f043 0301 	orr.w	r3, r3, #1
 800848a:	81a3      	strh	r3, [r4, #12]
 800848c:	89a0      	ldrh	r0, [r4, #12]
 800848e:	4305      	orrs	r5, r0
 8008490:	81a5      	strh	r5, [r4, #12]
 8008492:	e7cd      	b.n	8008430 <__smakebuf_r+0x18>
 8008494:	08007785 	.word	0x08007785

08008498 <__malloc_lock>:
 8008498:	4801      	ldr	r0, [pc, #4]	; (80084a0 <__malloc_lock+0x8>)
 800849a:	f7ff ba45 	b.w	8007928 <__retarget_lock_acquire_recursive>
 800849e:	bf00      	nop
 80084a0:	200008f8 	.word	0x200008f8

080084a4 <__malloc_unlock>:
 80084a4:	4801      	ldr	r0, [pc, #4]	; (80084ac <__malloc_unlock+0x8>)
 80084a6:	f7ff ba40 	b.w	800792a <__retarget_lock_release_recursive>
 80084aa:	bf00      	nop
 80084ac:	200008f8 	.word	0x200008f8

080084b0 <_free_r>:
 80084b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80084b2:	2900      	cmp	r1, #0
 80084b4:	d048      	beq.n	8008548 <_free_r+0x98>
 80084b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084ba:	9001      	str	r0, [sp, #4]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	f1a1 0404 	sub.w	r4, r1, #4
 80084c2:	bfb8      	it	lt
 80084c4:	18e4      	addlt	r4, r4, r3
 80084c6:	f7ff ffe7 	bl	8008498 <__malloc_lock>
 80084ca:	4a20      	ldr	r2, [pc, #128]	; (800854c <_free_r+0x9c>)
 80084cc:	9801      	ldr	r0, [sp, #4]
 80084ce:	6813      	ldr	r3, [r2, #0]
 80084d0:	4615      	mov	r5, r2
 80084d2:	b933      	cbnz	r3, 80084e2 <_free_r+0x32>
 80084d4:	6063      	str	r3, [r4, #4]
 80084d6:	6014      	str	r4, [r2, #0]
 80084d8:	b003      	add	sp, #12
 80084da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80084de:	f7ff bfe1 	b.w	80084a4 <__malloc_unlock>
 80084e2:	42a3      	cmp	r3, r4
 80084e4:	d90b      	bls.n	80084fe <_free_r+0x4e>
 80084e6:	6821      	ldr	r1, [r4, #0]
 80084e8:	1862      	adds	r2, r4, r1
 80084ea:	4293      	cmp	r3, r2
 80084ec:	bf04      	itt	eq
 80084ee:	681a      	ldreq	r2, [r3, #0]
 80084f0:	685b      	ldreq	r3, [r3, #4]
 80084f2:	6063      	str	r3, [r4, #4]
 80084f4:	bf04      	itt	eq
 80084f6:	1852      	addeq	r2, r2, r1
 80084f8:	6022      	streq	r2, [r4, #0]
 80084fa:	602c      	str	r4, [r5, #0]
 80084fc:	e7ec      	b.n	80084d8 <_free_r+0x28>
 80084fe:	461a      	mov	r2, r3
 8008500:	685b      	ldr	r3, [r3, #4]
 8008502:	b10b      	cbz	r3, 8008508 <_free_r+0x58>
 8008504:	42a3      	cmp	r3, r4
 8008506:	d9fa      	bls.n	80084fe <_free_r+0x4e>
 8008508:	6811      	ldr	r1, [r2, #0]
 800850a:	1855      	adds	r5, r2, r1
 800850c:	42a5      	cmp	r5, r4
 800850e:	d10b      	bne.n	8008528 <_free_r+0x78>
 8008510:	6824      	ldr	r4, [r4, #0]
 8008512:	4421      	add	r1, r4
 8008514:	1854      	adds	r4, r2, r1
 8008516:	42a3      	cmp	r3, r4
 8008518:	6011      	str	r1, [r2, #0]
 800851a:	d1dd      	bne.n	80084d8 <_free_r+0x28>
 800851c:	681c      	ldr	r4, [r3, #0]
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	6053      	str	r3, [r2, #4]
 8008522:	4421      	add	r1, r4
 8008524:	6011      	str	r1, [r2, #0]
 8008526:	e7d7      	b.n	80084d8 <_free_r+0x28>
 8008528:	d902      	bls.n	8008530 <_free_r+0x80>
 800852a:	230c      	movs	r3, #12
 800852c:	6003      	str	r3, [r0, #0]
 800852e:	e7d3      	b.n	80084d8 <_free_r+0x28>
 8008530:	6825      	ldr	r5, [r4, #0]
 8008532:	1961      	adds	r1, r4, r5
 8008534:	428b      	cmp	r3, r1
 8008536:	bf04      	itt	eq
 8008538:	6819      	ldreq	r1, [r3, #0]
 800853a:	685b      	ldreq	r3, [r3, #4]
 800853c:	6063      	str	r3, [r4, #4]
 800853e:	bf04      	itt	eq
 8008540:	1949      	addeq	r1, r1, r5
 8008542:	6021      	streq	r1, [r4, #0]
 8008544:	6054      	str	r4, [r2, #4]
 8008546:	e7c7      	b.n	80084d8 <_free_r+0x28>
 8008548:	b003      	add	sp, #12
 800854a:	bd30      	pop	{r4, r5, pc}
 800854c:	2000070c 	.word	0x2000070c

08008550 <_read_r>:
 8008550:	b538      	push	{r3, r4, r5, lr}
 8008552:	4d07      	ldr	r5, [pc, #28]	; (8008570 <_read_r+0x20>)
 8008554:	4604      	mov	r4, r0
 8008556:	4608      	mov	r0, r1
 8008558:	4611      	mov	r1, r2
 800855a:	2200      	movs	r2, #0
 800855c:	602a      	str	r2, [r5, #0]
 800855e:	461a      	mov	r2, r3
 8008560:	f7f9 f94a 	bl	80017f8 <_read>
 8008564:	1c43      	adds	r3, r0, #1
 8008566:	d102      	bne.n	800856e <_read_r+0x1e>
 8008568:	682b      	ldr	r3, [r5, #0]
 800856a:	b103      	cbz	r3, 800856e <_read_r+0x1e>
 800856c:	6023      	str	r3, [r4, #0]
 800856e:	bd38      	pop	{r3, r4, r5, pc}
 8008570:	20000900 	.word	0x20000900

08008574 <_fstat_r>:
 8008574:	b538      	push	{r3, r4, r5, lr}
 8008576:	4d07      	ldr	r5, [pc, #28]	; (8008594 <_fstat_r+0x20>)
 8008578:	2300      	movs	r3, #0
 800857a:	4604      	mov	r4, r0
 800857c:	4608      	mov	r0, r1
 800857e:	4611      	mov	r1, r2
 8008580:	602b      	str	r3, [r5, #0]
 8008582:	f7f9 f97e 	bl	8001882 <_fstat>
 8008586:	1c43      	adds	r3, r0, #1
 8008588:	d102      	bne.n	8008590 <_fstat_r+0x1c>
 800858a:	682b      	ldr	r3, [r5, #0]
 800858c:	b103      	cbz	r3, 8008590 <_fstat_r+0x1c>
 800858e:	6023      	str	r3, [r4, #0]
 8008590:	bd38      	pop	{r3, r4, r5, pc}
 8008592:	bf00      	nop
 8008594:	20000900 	.word	0x20000900

08008598 <_isatty_r>:
 8008598:	b538      	push	{r3, r4, r5, lr}
 800859a:	4d06      	ldr	r5, [pc, #24]	; (80085b4 <_isatty_r+0x1c>)
 800859c:	2300      	movs	r3, #0
 800859e:	4604      	mov	r4, r0
 80085a0:	4608      	mov	r0, r1
 80085a2:	602b      	str	r3, [r5, #0]
 80085a4:	f7f9 f97d 	bl	80018a2 <_isatty>
 80085a8:	1c43      	adds	r3, r0, #1
 80085aa:	d102      	bne.n	80085b2 <_isatty_r+0x1a>
 80085ac:	682b      	ldr	r3, [r5, #0]
 80085ae:	b103      	cbz	r3, 80085b2 <_isatty_r+0x1a>
 80085b0:	6023      	str	r3, [r4, #0]
 80085b2:	bd38      	pop	{r3, r4, r5, pc}
 80085b4:	20000900 	.word	0x20000900

080085b8 <_init>:
 80085b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ba:	bf00      	nop
 80085bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085be:	bc08      	pop	{r3}
 80085c0:	469e      	mov	lr, r3
 80085c2:	4770      	bx	lr

080085c4 <_fini>:
 80085c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085c6:	bf00      	nop
 80085c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085ca:	bc08      	pop	{r3}
 80085cc:	469e      	mov	lr, r3
 80085ce:	4770      	bx	lr
